// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search_result.proto

#ifndef PROTOBUF_search_5fresult_2eproto__INCLUDED
#define PROTOBUF_search_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "snippetdata.pb.h"
#include "backends_quality.pb.h"
// @@protoc_insertion_point(includes)
namespace gogo {
namespace sr {
class clickrank_data;
class clickrank_dataDefaultTypeInternal;
extern clickrank_dataDefaultTypeInternal _clickrank_data_default_instance_;
class doc_data_ex;
class doc_data_exDefaultTypeInternal;
extern doc_data_exDefaultTypeInternal _doc_data_ex_default_instance_;
class doc_dump;
class doc_dumpDefaultTypeInternal;
extern doc_dumpDefaultTypeInternal _doc_dump_default_instance_;
class doc_item;
class doc_itemDefaultTypeInternal;
extern doc_itemDefaultTypeInternal _doc_item_default_instance_;
class doc_zone;
class doc_zoneDefaultTypeInternal;
extern doc_zoneDefaultTypeInternal _doc_zone_default_instance_;
class double_counter;
class double_counterDefaultTypeInternal;
extern double_counterDefaultTypeInternal _double_counter_default_instance_;
class error;
class errorDefaultTypeInternal;
extern errorDefaultTypeInternal _error_default_instance_;
class integer_counter;
class integer_counterDefaultTypeInternal;
extern integer_counterDefaultTypeInternal _integer_counter_default_instance_;
class multicast_stat;
class multicast_statDefaultTypeInternal;
extern multicast_statDefaultTypeInternal _multicast_stat_default_instance_;
class num_zone_item;
class num_zone_itemDefaultTypeInternal;
extern num_zone_itemDefaultTypeInternal _num_zone_item_default_instance_;
class passage_data;
class passage_dataDefaultTypeInternal;
extern passage_dataDefaultTypeInternal _passage_data_default_instance_;
class qual_stat;
class qual_statDefaultTypeInternal;
extern qual_statDefaultTypeInternal _qual_stat_default_instance_;
class quality_data;
class quality_dataDefaultTypeInternal;
extern quality_dataDefaultTypeInternal _quality_data_default_instance_;
class real_doc_id_data;
class real_doc_id_dataDefaultTypeInternal;
extern real_doc_id_dataDefaultTypeInternal _real_doc_id_data_default_instance_;
class result_frame;
class result_frameDefaultTypeInternal;
extern result_frameDefaultTypeInternal _result_frame_default_instance_;
class search_result;
class search_resultDefaultTypeInternal;
extern search_resultDefaultTypeInternal _search_result_default_instance_;
class snippet_item;
class snippet_itemDefaultTypeInternal;
extern snippet_itemDefaultTypeInternal _snippet_item_default_instance_;
class snippet_text_item;
class snippet_text_itemDefaultTypeInternal;
extern snippet_text_itemDefaultTypeInternal _snippet_text_item_default_instance_;
class statistic;
class statisticDefaultTypeInternal;
extern statisticDefaultTypeInternal _statistic_default_instance_;
class text_zone_item;
class text_zone_itemDefaultTypeInternal;
extern text_zone_itemDefaultTypeInternal _text_zone_item_default_instance_;
class trait;
class traitDefaultTypeInternal;
extern traitDefaultTypeInternal _trait_default_instance_;
class wnf_dump_tz;
class wnf_dump_tzDefaultTypeInternal;
extern wnf_dump_tzDefaultTypeInternal _wnf_dump_tz_default_instance_;
class wnf_text_zone;
class wnf_text_zoneDefaultTypeInternal;
extern wnf_text_zoneDefaultTypeInternal _wnf_text_zone_default_instance_;
class wnf_url;
class wnf_urlDefaultTypeInternal;
extern wnf_urlDefaultTypeInternal _wnf_url_default_instance_;
class word_posistions;
class word_posistionsDefaultTypeInternal;
extern word_posistionsDefaultTypeInternal _word_posistions_default_instance_;
class word_posting_list;
class word_posting_listDefaultTypeInternal;
extern word_posting_listDefaultTypeInternal _word_posting_list_default_instance_;
}  // namespace sr
}  // namespace gogo

namespace gogo {
namespace sr {

namespace protobuf_search_5fresult_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_search_5fresult_2eproto

enum domain_group_type {
  NONE = 0,
  BY_SITE_NAVIG = 1,
  BY_LEADER = 2
};
bool domain_group_type_IsValid(int value);
const domain_group_type domain_group_type_MIN = NONE;
const domain_group_type domain_group_type_MAX = BY_LEADER;
const int domain_group_type_ARRAYSIZE = domain_group_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* domain_group_type_descriptor();
inline const ::std::string& domain_group_type_Name(domain_group_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    domain_group_type_descriptor(), value);
}
inline bool domain_group_type_Parse(
    const ::std::string& name, domain_group_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<domain_group_type>(
    domain_group_type_descriptor(), name, value);
}
// ===================================================================

class result_frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.result_frame) */ {
 public:
  result_frame();
  virtual ~result_frame();

  result_frame(const result_frame& from);

  inline result_frame& operator=(const result_frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  result_frame(result_frame&& from) noexcept
    : result_frame() {
    *this = ::std::move(from);
  }

  inline result_frame& operator=(result_frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const result_frame& default_instance();

  static inline const result_frame* internal_default_instance() {
    return reinterpret_cast<const result_frame*>(
               &_result_frame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(result_frame* other);
  friend void swap(result_frame& a, result_frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline result_frame* New() const PROTOBUF_FINAL { return New(NULL); }

  result_frame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const result_frame& from);
  void MergeFrom(const result_frame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(result_frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matched_docs = 1;
  bool has_matched_docs() const;
  void clear_matched_docs();
  static const int kMatchedDocsFieldNumber = 1;
  ::google::protobuf::uint32 matched_docs() const;
  void set_matched_docs(::google::protobuf::uint32 value);

  // optional uint32 ungrouped_docs = 2;
  bool has_ungrouped_docs() const;
  void clear_ungrouped_docs();
  static const int kUngroupedDocsFieldNumber = 2;
  ::google::protobuf::uint32 ungrouped_docs() const;
  void set_ungrouped_docs(::google::protobuf::uint32 value);

  // optional int32 site_estimate = 3;
  bool has_site_estimate() const;
  void clear_site_estimate();
  static const int kSiteEstimateFieldNumber = 3;
  ::google::protobuf::int32 site_estimate() const;
  void set_site_estimate(::google::protobuf::int32 value);

  // optional int32 docs_estimate = 4;
  bool has_docs_estimate() const;
  void clear_docs_estimate();
  static const int kDocsEstimateFieldNumber = 4;
  ::google::protobuf::int32 docs_estimate() const;
  void set_docs_estimate(::google::protobuf::int32 value);

  // optional uint32 n_ranked_docs = 5;
  bool has_n_ranked_docs() const;
  void clear_n_ranked_docs();
  static const int kNRankedDocsFieldNumber = 5;
  ::google::protobuf::uint32 n_ranked_docs() const;
  void set_n_ranked_docs(::google::protobuf::uint32 value);

  // optional uint32 first_index = 6;
  bool has_first_index() const;
  void clear_first_index();
  static const int kFirstIndexFieldNumber = 6;
  ::google::protobuf::uint32 first_index() const;
  void set_first_index(::google::protobuf::uint32 value);

  // optional uint32 second_index = 7;
  bool has_second_index() const;
  void clear_second_index();
  static const int kSecondIndexFieldNumber = 7;
  ::google::protobuf::uint32 second_index() const;
  void set_second_index(::google::protobuf::uint32 value);

  // optional uint32 last_index = 8;
  bool has_last_index() const;
  void clear_last_index();
  static const int kLastIndexFieldNumber = 8;
  ::google::protobuf::uint32 last_index() const;
  void set_last_index(::google::protobuf::uint32 value);

  // optional uint32 page_count = 9;
  bool has_page_count() const;
  void clear_page_count();
  static const int kPageCountFieldNumber = 9;
  ::google::protobuf::uint32 page_count() const;
  void set_page_count(::google::protobuf::uint32 value);

  // optional uint32 n_param = 10;
  bool has_n_param() const;
  void clear_n_param();
  static const int kNParamFieldNumber = 10;
  ::google::protobuf::uint32 n_param() const;
  void set_n_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.result_frame)
 private:
  void set_has_matched_docs();
  void clear_has_matched_docs();
  void set_has_ungrouped_docs();
  void clear_has_ungrouped_docs();
  void set_has_site_estimate();
  void clear_has_site_estimate();
  void set_has_docs_estimate();
  void clear_has_docs_estimate();
  void set_has_n_ranked_docs();
  void clear_has_n_ranked_docs();
  void set_has_first_index();
  void clear_has_first_index();
  void set_has_second_index();
  void clear_has_second_index();
  void set_has_last_index();
  void clear_has_last_index();
  void set_has_page_count();
  void clear_has_page_count();
  void set_has_n_param();
  void clear_has_n_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 matched_docs_;
  ::google::protobuf::uint32 ungrouped_docs_;
  ::google::protobuf::int32 site_estimate_;
  ::google::protobuf::int32 docs_estimate_;
  ::google::protobuf::uint32 n_ranked_docs_;
  ::google::protobuf::uint32 first_index_;
  ::google::protobuf::uint32 second_index_;
  ::google::protobuf::uint32 last_index_;
  ::google::protobuf::uint32 page_count_;
  ::google::protobuf::uint32 n_param_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class snippet_text_item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.snippet_text_item) */ {
 public:
  snippet_text_item();
  virtual ~snippet_text_item();

  snippet_text_item(const snippet_text_item& from);

  inline snippet_text_item& operator=(const snippet_text_item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  snippet_text_item(snippet_text_item&& from) noexcept
    : snippet_text_item() {
    *this = ::std::move(from);
  }

  inline snippet_text_item& operator=(snippet_text_item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const snippet_text_item& default_instance();

  static inline const snippet_text_item* internal_default_instance() {
    return reinterpret_cast<const snippet_text_item*>(
               &_snippet_text_item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(snippet_text_item* other);
  friend void swap(snippet_text_item& a, snippet_text_item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline snippet_text_item* New() const PROTOBUF_FINAL { return New(NULL); }

  snippet_text_item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const snippet_text_item& from);
  void MergeFrom(const snippet_text_item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(snippet_text_item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string debug_printout = 4;
  bool has_debug_printout() const;
  void clear_debug_printout();
  static const int kDebugPrintoutFieldNumber = 4;
  const ::std::string& debug_printout() const;
  void set_debug_printout(const ::std::string& value);
  #if LANG_CXX11
  void set_debug_printout(::std::string&& value);
  #endif
  void set_debug_printout(const char* value);
  void set_debug_printout(const char* value, size_t size);
  ::std::string* mutable_debug_printout();
  ::std::string* release_debug_printout();
  void set_allocated_debug_printout(::std::string* debug_printout);

  // optional bool cb = 2;
  bool has_cb() const;
  void clear_cb();
  static const int kCbFieldNumber = 2;
  bool cb() const;
  void set_cb(bool value);

  // optional bool ce = 3;
  bool has_ce() const;
  void clear_ce();
  static const int kCeFieldNumber = 3;
  bool ce() const;
  void set_ce(bool value);

  // @@protoc_insertion_point(class_scope:gogo.sr.snippet_text_item)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_cb();
  void clear_has_cb();
  void set_has_ce();
  void clear_has_ce();
  void set_has_debug_printout();
  void clear_has_debug_printout();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr debug_printout_;
  bool cb_;
  bool ce_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class snippet_item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.snippet_item) */ {
 public:
  snippet_item();
  virtual ~snippet_item();

  snippet_item(const snippet_item& from);

  inline snippet_item& operator=(const snippet_item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  snippet_item(snippet_item&& from) noexcept
    : snippet_item() {
    *this = ::std::move(from);
  }

  inline snippet_item& operator=(snippet_item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const snippet_item& default_instance();

  static inline const snippet_item* internal_default_instance() {
    return reinterpret_cast<const snippet_item*>(
               &_snippet_item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(snippet_item* other);
  friend void swap(snippet_item& a, snippet_item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline snippet_item* New() const PROTOBUF_FINAL { return New(NULL); }

  snippet_item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const snippet_item& from);
  void MergeFrom(const snippet_item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(snippet_item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.sr.snippet_text_item text = 3;
  int text_size() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::gogo::sr::snippet_text_item& text(int index) const;
  ::gogo::sr::snippet_text_item* mutable_text(int index);
  ::gogo::sr::snippet_text_item* add_text();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::snippet_text_item >*
      mutable_text();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::snippet_text_item >&
      text() const;

  // optional uint32 qual = 4;
  bool has_qual() const;
  void clear_qual();
  static const int kQualFieldNumber = 4;
  ::google::protobuf::uint32 qual() const;
  void set_qual(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.snippet_item)
 private:
  void set_has_qual();
  void clear_has_qual();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::snippet_text_item > text_;
  ::google::protobuf::uint32 qual_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class doc_data_ex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.doc_data_ex) */ {
 public:
  doc_data_ex();
  virtual ~doc_data_ex();

  doc_data_ex(const doc_data_ex& from);

  inline doc_data_ex& operator=(const doc_data_ex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  doc_data_ex(doc_data_ex&& from) noexcept
    : doc_data_ex() {
    *this = ::std::move(from);
  }

  inline doc_data_ex& operator=(doc_data_ex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doc_data_ex& default_instance();

  static inline const doc_data_ex* internal_default_instance() {
    return reinterpret_cast<const doc_data_ex*>(
               &_doc_data_ex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(doc_data_ex* other);
  friend void swap(doc_data_ex& a, doc_data_ex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline doc_data_ex* New() const PROTOBUF_FINAL { return New(NULL); }

  doc_data_ex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const doc_data_ex& from);
  void MergeFrom(const doc_data_ex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(doc_data_ex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clustTag = 17;
  bool has_clusttag() const;
  void clear_clusttag();
  static const int kClustTagFieldNumber = 17;
  const ::std::string& clusttag() const;
  void set_clusttag(const ::std::string& value);
  #if LANG_CXX11
  void set_clusttag(::std::string&& value);
  #endif
  void set_clusttag(const char* value);
  void set_clusttag(const char* value, size_t size);
  ::std::string* mutable_clusttag();
  ::std::string* release_clusttag();
  void set_allocated_clusttag(::std::string* clusttag);

  // optional string doc_trace = 18;
  bool has_doc_trace() const;
  void clear_doc_trace();
  static const int kDocTraceFieldNumber = 18;
  const ::std::string& doc_trace() const;
  void set_doc_trace(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_trace(::std::string&& value);
  #endif
  void set_doc_trace(const char* value);
  void set_doc_trace(const char* value, size_t size);
  ::std::string* mutable_doc_trace();
  ::std::string* release_doc_trace();
  void set_allocated_doc_trace(::std::string* doc_trace);

  // optional .gogo.sr.clickrank_data clickRank = 20;
  bool has_clickrank() const;
  void clear_clickrank();
  static const int kClickRankFieldNumber = 20;
  const ::gogo::sr::clickrank_data& clickrank() const;
  ::gogo::sr::clickrank_data* mutable_clickrank();
  ::gogo::sr::clickrank_data* release_clickrank();
  void set_allocated_clickrank(::gogo::sr::clickrank_data* clickrank);

  // optional .gogo.sr.quality_data qualityData = 21;
  bool has_qualitydata() const;
  void clear_qualitydata();
  static const int kQualityDataFieldNumber = 21;
  const ::gogo::sr::quality_data& qualitydata() const;
  ::gogo::sr::quality_data* mutable_qualitydata();
  ::gogo::sr::quality_data* release_qualitydata();
  void set_allocated_qualitydata(::gogo::sr::quality_data* qualitydata);

  // optional .gogo.sr.passage_data passages = 23;
  bool has_passages() const;
  void clear_passages();
  static const int kPassagesFieldNumber = 23;
  const ::gogo::sr::passage_data& passages() const;
  ::gogo::sr::passage_data* mutable_passages();
  ::gogo::sr::passage_data* release_passages();
  void set_allocated_passages(::gogo::sr::passage_data* passages);

  // optional sint32 depth = 1;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 1;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional uint32 doclen = 2;
  bool has_doclen() const;
  void clear_doclen();
  static const int kDoclenFieldNumber = 2;
  ::google::protobuf::uint32 doclen() const;
  void set_doclen(::google::protobuf::uint32 value);

  // optional double rank = 3;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 3;
  double rank() const;
  void set_rank(double value);

  // optional double textR = 4;
  bool has_textr() const;
  void clear_textr();
  static const int kTextRFieldNumber = 4;
  double textr() const;
  void set_textr(double value);

  // optional double titleR = 5;
  bool has_titler() const;
  void clear_titler();
  static const int kTitleRFieldNumber = 5;
  double titler() const;
  void set_titler(double value);

  // optional double linkR = 6;
  bool has_linkr() const;
  void clear_linkr();
  static const int kLinkRFieldNumber = 6;
  double linkr() const;
  void set_linkr(double value);

  // optional double catalogR = 7;
  bool has_catalogr() const;
  void clear_catalogr();
  static const int kCatalogRFieldNumber = 7;
  double catalogr() const;
  void set_catalogr(double value);

  // optional double trustedR = 8;
  bool has_trustedr() const;
  void clear_trustedr();
  static const int kTrustedRFieldNumber = 8;
  double trustedr() const;
  void set_trustedr(double value);

  // optional double wikiR = 9;
  bool has_wikir() const;
  void clear_wikir();
  static const int kWikiRFieldNumber = 9;
  double wikir() const;
  void set_wikir(double value);

  // optional double ctgR = 10;
  bool has_ctgr() const;
  void clear_ctgr();
  static const int kCtgRFieldNumber = 10;
  double ctgr() const;
  void set_ctgr(double value);

  // optional double clickNufR = 11;
  bool has_clicknufr() const;
  void clear_clicknufr();
  static const int kClickNufRFieldNumber = 11;
  double clicknufr() const;
  void set_clicknufr(double value);

  // optional double clickLinkR = 12;
  bool has_clicklinkr() const;
  void clear_clicklinkr();
  static const int kClickLinkRFieldNumber = 12;
  double clicklinkr() const;
  void set_clicklinkr(double value);

  // optional double queryLinkR = 13;
  bool has_querylinkr() const;
  void clear_querylinkr();
  static const int kQueryLinkRFieldNumber = 13;
  double querylinkr() const;
  void set_querylinkr(double value);

  // optional double clickUnfR = 14;
  bool has_clickunfr() const;
  void clear_clickunfr();
  static const int kClickUnfRFieldNumber = 14;
  double clickunfr() const;
  void set_clickunfr(double value);

  // optional double lastDelta = 16;
  bool has_lastdelta() const;
  void clear_lastdelta();
  static const int kLastDeltaFieldNumber = 16;
  double lastdelta() const;
  void set_lastdelta(double value);

  // optional uint32 maxWFreq = 15;
  bool has_maxwfreq() const;
  void clear_maxwfreq();
  static const int kMaxWFreqFieldNumber = 15;
  ::google::protobuf::uint32 maxwfreq() const;
  void set_maxwfreq(::google::protobuf::uint32 value);

  // optional bool no_sn = 19;
  bool has_no_sn() const;
  void clear_no_sn();
  static const int kNoSnFieldNumber = 19;
  bool no_sn() const;
  void set_no_sn(bool value);

  // optional uint32 bestOp = 22;
  bool has_bestop() const;
  void clear_bestop();
  static const int kBestOpFieldNumber = 22;
  ::google::protobuf::uint32 bestop() const;
  void set_bestop(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.doc_data_ex)
 private:
  void set_has_depth();
  void clear_has_depth();
  void set_has_doclen();
  void clear_has_doclen();
  void set_has_rank();
  void clear_has_rank();
  void set_has_textr();
  void clear_has_textr();
  void set_has_titler();
  void clear_has_titler();
  void set_has_linkr();
  void clear_has_linkr();
  void set_has_catalogr();
  void clear_has_catalogr();
  void set_has_trustedr();
  void clear_has_trustedr();
  void set_has_wikir();
  void clear_has_wikir();
  void set_has_ctgr();
  void clear_has_ctgr();
  void set_has_clicknufr();
  void clear_has_clicknufr();
  void set_has_clicklinkr();
  void clear_has_clicklinkr();
  void set_has_querylinkr();
  void clear_has_querylinkr();
  void set_has_clickunfr();
  void clear_has_clickunfr();
  void set_has_maxwfreq();
  void clear_has_maxwfreq();
  void set_has_lastdelta();
  void clear_has_lastdelta();
  void set_has_clusttag();
  void clear_has_clusttag();
  void set_has_doc_trace();
  void clear_has_doc_trace();
  void set_has_no_sn();
  void clear_has_no_sn();
  void set_has_clickrank();
  void clear_has_clickrank();
  void set_has_qualitydata();
  void clear_has_qualitydata();
  void set_has_bestop();
  void clear_has_bestop();
  void set_has_passages();
  void clear_has_passages();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clusttag_;
  ::google::protobuf::internal::ArenaStringPtr doc_trace_;
  ::gogo::sr::clickrank_data* clickrank_;
  ::gogo::sr::quality_data* qualitydata_;
  ::gogo::sr::passage_data* passages_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::uint32 doclen_;
  double rank_;
  double textr_;
  double titler_;
  double linkr_;
  double catalogr_;
  double trustedr_;
  double wikir_;
  double ctgr_;
  double clicknufr_;
  double clicklinkr_;
  double querylinkr_;
  double clickunfr_;
  double lastdelta_;
  ::google::protobuf::uint32 maxwfreq_;
  bool no_sn_;
  ::google::protobuf::uint32 bestop_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class clickrank_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.clickrank_data) */ {
 public:
  clickrank_data();
  virtual ~clickrank_data();

  clickrank_data(const clickrank_data& from);

  inline clickrank_data& operator=(const clickrank_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  clickrank_data(clickrank_data&& from) noexcept
    : clickrank_data() {
    *this = ::std::move(from);
  }

  inline clickrank_data& operator=(clickrank_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const clickrank_data& default_instance();

  static inline const clickrank_data* internal_default_instance() {
    return reinterpret_cast<const clickrank_data*>(
               &_clickrank_data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(clickrank_data* other);
  friend void swap(clickrank_data& a, clickrank_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline clickrank_data* New() const PROTOBUF_FINAL { return New(NULL); }

  clickrank_data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const clickrank_data& from);
  void MergeFrom(const clickrank_data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(clickrank_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double rank = 1;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  double rank() const;
  void set_rank(double value);

  // required double attractive = 2;
  bool has_attractive() const;
  void clear_attractive();
  static const int kAttractiveFieldNumber = 2;
  double attractive() const;
  void set_attractive(double value);

  // required double satisfaction = 3;
  bool has_satisfaction() const;
  void clear_satisfaction();
  static const int kSatisfactionFieldNumber = 3;
  double satisfaction() const;
  void set_satisfaction(double value);

  // required uint32 sessions = 4;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 4;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.clickrank_data)
 private:
  void set_has_rank();
  void clear_has_rank();
  void set_has_attractive();
  void clear_has_attractive();
  void set_has_satisfaction();
  void clear_has_satisfaction();
  void set_has_sessions();
  void clear_has_sessions();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double rank_;
  double attractive_;
  double satisfaction_;
  ::google::protobuf::uint32 sessions_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class quality_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.quality_data) */ {
 public:
  quality_data();
  virtual ~quality_data();

  quality_data(const quality_data& from);

  inline quality_data& operator=(const quality_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  quality_data(quality_data&& from) noexcept
    : quality_data() {
    *this = ::std::move(from);
  }

  inline quality_data& operator=(quality_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const quality_data& default_instance();

  static inline const quality_data* internal_default_instance() {
    return reinterpret_cast<const quality_data*>(
               &_quality_data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(quality_data* other);
  friend void swap(quality_data& a, quality_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline quality_data* New() const PROTOBUF_FINAL { return New(NULL); }

  quality_data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const quality_data& from);
  void MergeFrom(const quality_data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(quality_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float pair_idf_rank = 1;
  bool has_pair_idf_rank() const;
  void clear_pair_idf_rank();
  static const int kPairIdfRankFieldNumber = 1;
  float pair_idf_rank() const;
  void set_pair_idf_rank(float value);

  // optional float text_rank = 2 [default = 0];
  bool has_text_rank() const;
  void clear_text_rank();
  static const int kTextRankFieldNumber = 2;
  float text_rank() const;
  void set_text_rank(float value);

  // optional float sq_model_rank = 3;
  bool has_sq_model_rank() const;
  void clear_sq_model_rank();
  static const int kSqModelRankFieldNumber = 3;
  float sq_model_rank() const;
  void set_sq_model_rank(float value);

  // @@protoc_insertion_point(class_scope:gogo.sr.quality_data)
 private:
  void set_has_pair_idf_rank();
  void clear_has_pair_idf_rank();
  void set_has_text_rank();
  void clear_has_text_rank();
  void set_has_sq_model_rank();
  void clear_has_sq_model_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float pair_idf_rank_;
  float text_rank_;
  float sq_model_rank_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class passage_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.passage_data) */ {
 public:
  passage_data();
  virtual ~passage_data();

  passage_data(const passage_data& from);

  inline passage_data& operator=(const passage_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  passage_data(passage_data&& from) noexcept
    : passage_data() {
    *this = ::std::move(from);
  }

  inline passage_data& operator=(passage_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const passage_data& default_instance();

  static inline const passage_data* internal_default_instance() {
    return reinterpret_cast<const passage_data*>(
               &_passage_data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(passage_data* other);
  friend void swap(passage_data& a, passage_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline passage_data* New() const PROTOBUF_FINAL { return New(NULL); }

  passage_data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const passage_data& from);
  void MergeFrom(const passage_data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(passage_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 zone_id = 1 [packed = true];
  int zone_id_size() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  ::google::protobuf::uint32 zone_id(int index) const;
  void set_zone_id(int index, ::google::protobuf::uint32 value);
  void add_zone_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      zone_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_zone_id();

  // repeated uint32 start = 2 [packed = true];
  int start_size() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::uint32 start(int index) const;
  void set_start(int index, ::google::protobuf::uint32 value);
  void add_start(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      start() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_start();

  // repeated uint32 length = 3 [packed = true];
  int length_size() const;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::uint32 length(int index) const;
  void set_length(int index, ::google::protobuf::uint32 value);
  void add_length(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      length() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_length();

  // repeated uint32 rank = 4 [packed = true];
  int rank_size() const;
  void clear_rank();
  static const int kRankFieldNumber = 4;
  ::google::protobuf::uint32 rank(int index) const;
  void set_rank(int index, ::google::protobuf::uint32 value);
  void add_rank(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rank() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:gogo.sr.passage_data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > zone_id_;
  mutable int _zone_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > start_;
  mutable int _start_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > length_;
  mutable int _length_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rank_;
  mutable int _rank_cached_byte_size_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class word_posistions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.word_posistions) */ {
 public:
  word_posistions();
  virtual ~word_posistions();

  word_posistions(const word_posistions& from);

  inline word_posistions& operator=(const word_posistions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  word_posistions(word_posistions&& from) noexcept
    : word_posistions() {
    *this = ::std::move(from);
  }

  inline word_posistions& operator=(word_posistions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const word_posistions& default_instance();

  static inline const word_posistions* internal_default_instance() {
    return reinterpret_cast<const word_posistions*>(
               &_word_posistions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(word_posistions* other);
  friend void swap(word_posistions& a, word_posistions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline word_posistions* New() const PROTOBUF_FINAL { return New(NULL); }

  word_posistions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const word_posistions& from);
  void MergeFrom(const word_posistions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(word_posistions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 positions = 2 [packed = true];
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 2;
  ::google::protobuf::uint32 positions(int index) const;
  void set_positions(int index, ::google::protobuf::uint32 value);
  void add_positions(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      positions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_positions();

  // required uint32 zone_id = 1;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.word_posistions)
 private:
  void set_has_zone_id();
  void clear_has_zone_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > positions_;
  mutable int _positions_cached_byte_size_;
  ::google::protobuf::uint32 zone_id_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class word_posting_list : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.word_posting_list) */ {
 public:
  word_posting_list();
  virtual ~word_posting_list();

  word_posting_list(const word_posting_list& from);

  inline word_posting_list& operator=(const word_posting_list& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  word_posting_list(word_posting_list&& from) noexcept
    : word_posting_list() {
    *this = ::std::move(from);
  }

  inline word_posting_list& operator=(word_posting_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const word_posting_list& default_instance();

  static inline const word_posting_list* internal_default_instance() {
    return reinterpret_cast<const word_posting_list*>(
               &_word_posting_list_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(word_posting_list* other);
  friend void swap(word_posting_list& a, word_posting_list& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline word_posting_list* New() const PROTOBUF_FINAL { return New(NULL); }

  word_posting_list* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const word_posting_list& from);
  void MergeFrom(const word_posting_list& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(word_posting_list* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.sr.word_posistions w_pos = 2;
  int w_pos_size() const;
  void clear_w_pos();
  static const int kWPosFieldNumber = 2;
  const ::gogo::sr::word_posistions& w_pos(int index) const;
  ::gogo::sr::word_posistions* mutable_w_pos(int index);
  ::gogo::sr::word_posistions* add_w_pos();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posistions >*
      mutable_w_pos();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posistions >&
      w_pos() const;

  // required uint32 pos_in_query = 1;
  bool has_pos_in_query() const;
  void clear_pos_in_query();
  static const int kPosInQueryFieldNumber = 1;
  ::google::protobuf::uint32 pos_in_query() const;
  void set_pos_in_query(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.word_posting_list)
 private:
  void set_has_pos_in_query();
  void clear_has_pos_in_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posistions > w_pos_;
  ::google::protobuf::uint32 pos_in_query_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class text_zone_item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.text_zone_item) */ {
 public:
  text_zone_item();
  virtual ~text_zone_item();

  text_zone_item(const text_zone_item& from);

  inline text_zone_item& operator=(const text_zone_item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  text_zone_item(text_zone_item&& from) noexcept
    : text_zone_item() {
    *this = ::std::move(from);
  }

  inline text_zone_item& operator=(text_zone_item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const text_zone_item& default_instance();

  static inline const text_zone_item* internal_default_instance() {
    return reinterpret_cast<const text_zone_item*>(
               &_text_zone_item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(text_zone_item* other);
  friend void swap(text_zone_item& a, text_zone_item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline text_zone_item* New() const PROTOBUF_FINAL { return New(NULL); }

  text_zone_item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const text_zone_item& from);
  void MergeFrom(const text_zone_item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(text_zone_item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string loop_tag = 3;
  bool has_loop_tag() const;
  void clear_loop_tag();
  static const int kLoopTagFieldNumber = 3;
  const ::std::string& loop_tag() const;
  void set_loop_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_loop_tag(::std::string&& value);
  #endif
  void set_loop_tag(const char* value);
  void set_loop_tag(const char* value, size_t size);
  ::std::string* mutable_loop_tag();
  ::std::string* release_loop_tag();
  void set_allocated_loop_tag(::std::string* loop_tag);

  // optional string visualize_tag = 7;
  bool has_visualize_tag() const;
  void clear_visualize_tag();
  static const int kVisualizeTagFieldNumber = 7;
  const ::std::string& visualize_tag() const;
  void set_visualize_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_visualize_tag(::std::string&& value);
  #endif
  void set_visualize_tag(const char* value);
  void set_visualize_tag(const char* value, size_t size);
  ::std::string* mutable_visualize_tag();
  ::std::string* release_visualize_tag();
  void set_allocated_visualize_tag(::std::string* visualize_tag);

  // optional bool b_marked_flag = 4;
  bool has_b_marked_flag() const;
  void clear_b_marked_flag();
  static const int kBMarkedFlagFieldNumber = 4;
  bool b_marked_flag() const;
  void set_b_marked_flag(bool value);

  // optional bool b_visualize_prev = 5;
  bool has_b_visualize_prev() const;
  void clear_b_visualize_prev();
  static const int kBVisualizePrevFieldNumber = 5;
  bool b_visualize_prev() const;
  void set_b_visualize_prev(bool value);

  // optional bool b_visualize_equal_prev = 6;
  bool has_b_visualize_equal_prev() const;
  void clear_b_visualize_equal_prev();
  static const int kBVisualizeEqualPrevFieldNumber = 6;
  bool b_visualize_equal_prev() const;
  void set_b_visualize_equal_prev(bool value);

  // @@protoc_insertion_point(class_scope:gogo.sr.text_zone_item)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();
  void set_has_loop_tag();
  void clear_has_loop_tag();
  void set_has_b_marked_flag();
  void clear_has_b_marked_flag();
  void set_has_b_visualize_prev();
  void clear_has_b_visualize_prev();
  void set_has_b_visualize_equal_prev();
  void clear_has_b_visualize_equal_prev();
  void set_has_visualize_tag();
  void clear_has_visualize_tag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr loop_tag_;
  ::google::protobuf::internal::ArenaStringPtr visualize_tag_;
  bool b_marked_flag_;
  bool b_visualize_prev_;
  bool b_visualize_equal_prev_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class num_zone_item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.num_zone_item) */ {
 public:
  num_zone_item();
  virtual ~num_zone_item();

  num_zone_item(const num_zone_item& from);

  inline num_zone_item& operator=(const num_zone_item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  num_zone_item(num_zone_item&& from) noexcept
    : num_zone_item() {
    *this = ::std::move(from);
  }

  inline num_zone_item& operator=(num_zone_item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const num_zone_item& default_instance();

  static inline const num_zone_item* internal_default_instance() {
    return reinterpret_cast<const num_zone_item*>(
               &_num_zone_item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(num_zone_item* other);
  friend void swap(num_zone_item& a, num_zone_item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline num_zone_item* New() const PROTOBUF_FINAL { return New(NULL); }

  num_zone_item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const num_zone_item& from);
  void MergeFrom(const num_zone_item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(num_zone_item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // optional bool b_visualize_hex = 3;
  bool has_b_visualize_hex() const;
  void clear_b_visualize_hex();
  static const int kBVisualizeHexFieldNumber = 3;
  bool b_visualize_hex() const;
  void set_b_visualize_hex(bool value);

  // optional bool b_visualize_upper_hex = 4;
  bool has_b_visualize_upper_hex() const;
  void clear_b_visualize_upper_hex();
  static const int kBVisualizeUpperHexFieldNumber = 4;
  bool b_visualize_upper_hex() const;
  void set_b_visualize_upper_hex(bool value);

  // optional bool b_visualize_signed = 5;
  bool has_b_visualize_signed() const;
  void clear_b_visualize_signed();
  static const int kBVisualizeSignedFieldNumber = 5;
  bool b_visualize_signed() const;
  void set_b_visualize_signed(bool value);

  // optional bool b_visualize_bits = 6;
  bool has_b_visualize_bits() const;
  void clear_b_visualize_bits();
  static const int kBVisualizeBitsFieldNumber = 6;
  bool b_visualize_bits() const;
  void set_b_visualize_bits(bool value);

  // optional bool b_visualize_time_diff = 7;
  bool has_b_visualize_time_diff() const;
  void clear_b_visualize_time_diff();
  static const int kBVisualizeTimeDiffFieldNumber = 7;
  bool b_visualize_time_diff() const;
  void set_b_visualize_time_diff(bool value);

  // optional bool b_age_in_year = 8;
  bool has_b_age_in_year() const;
  void clear_b_age_in_year();
  static const int kBAgeInYearFieldNumber = 8;
  bool b_age_in_year() const;
  void set_b_age_in_year(bool value);

  // optional uint32 bit_len = 9;
  bool has_bit_len() const;
  void clear_bit_len();
  static const int kBitLenFieldNumber = 9;
  ::google::protobuf::uint32 bit_len() const;
  void set_bit_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.num_zone_item)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();
  void set_has_b_visualize_hex();
  void clear_has_b_visualize_hex();
  void set_has_b_visualize_upper_hex();
  void clear_has_b_visualize_upper_hex();
  void set_has_b_visualize_signed();
  void clear_has_b_visualize_signed();
  void set_has_b_visualize_bits();
  void clear_has_b_visualize_bits();
  void set_has_b_visualize_time_diff();
  void clear_has_b_visualize_time_diff();
  void set_has_b_age_in_year();
  void clear_has_b_age_in_year();
  void set_has_bit_len();
  void clear_has_bit_len();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 value_;
  bool b_visualize_hex_;
  bool b_visualize_upper_hex_;
  bool b_visualize_signed_;
  bool b_visualize_bits_;
  bool b_visualize_time_diff_;
  bool b_age_in_year_;
  ::google::protobuf::uint32 bit_len_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class real_doc_id_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.real_doc_id_data) */ {
 public:
  real_doc_id_data();
  virtual ~real_doc_id_data();

  real_doc_id_data(const real_doc_id_data& from);

  inline real_doc_id_data& operator=(const real_doc_id_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  real_doc_id_data(real_doc_id_data&& from) noexcept
    : real_doc_id_data() {
    *this = ::std::move(from);
  }

  inline real_doc_id_data& operator=(real_doc_id_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const real_doc_id_data& default_instance();

  static inline const real_doc_id_data* internal_default_instance() {
    return reinterpret_cast<const real_doc_id_data*>(
               &_real_doc_id_data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(real_doc_id_data* other);
  friend void swap(real_doc_id_data& a, real_doc_id_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline real_doc_id_data* New() const PROTOBUF_FINAL { return New(NULL); }

  real_doc_id_data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const real_doc_id_data& from);
  void MergeFrom(const real_doc_id_data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(real_doc_id_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 db_id = 1;
  bool has_db_id() const;
  void clear_db_id();
  static const int kDbIdFieldNumber = 1;
  ::google::protobuf::uint32 db_id() const;
  void set_db_id(::google::protobuf::uint32 value);

  // required uint32 db_timestamp = 2;
  bool has_db_timestamp() const;
  void clear_db_timestamp();
  static const int kDbTimestampFieldNumber = 2;
  ::google::protobuf::uint32 db_timestamp() const;
  void set_db_timestamp(::google::protobuf::uint32 value);

  // required uint32 doc_id = 3;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 3;
  ::google::protobuf::uint32 doc_id() const;
  void set_doc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.real_doc_id_data)
 private:
  void set_has_db_id();
  void clear_has_db_id();
  void set_has_db_timestamp();
  void clear_has_db_timestamp();
  void set_has_doc_id();
  void clear_has_doc_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 db_id_;
  ::google::protobuf::uint32 db_timestamp_;
  ::google::protobuf::uint32 doc_id_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class doc_zone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.doc_zone) */ {
 public:
  doc_zone();
  virtual ~doc_zone();

  doc_zone(const doc_zone& from);

  inline doc_zone& operator=(const doc_zone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  doc_zone(doc_zone&& from) noexcept
    : doc_zone() {
    *this = ::std::move(from);
  }

  inline doc_zone& operator=(doc_zone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doc_zone& default_instance();

  static inline const doc_zone* internal_default_instance() {
    return reinterpret_cast<const doc_zone*>(
               &_doc_zone_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(doc_zone* other);
  friend void swap(doc_zone& a, doc_zone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline doc_zone* New() const PROTOBUF_FINAL { return New(NULL); }

  doc_zone* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const doc_zone& from);
  void MergeFrom(const doc_zone& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(doc_zone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sentences = 4;
  int sentences_size() const;
  void clear_sentences();
  static const int kSentencesFieldNumber = 4;
  const ::std::string& sentences(int index) const;
  ::std::string* mutable_sentences(int index);
  void set_sentences(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sentences(int index, ::std::string&& value);
  #endif
  void set_sentences(int index, const char* value);
  void set_sentences(int index, const char* value, size_t size);
  ::std::string* add_sentences();
  void add_sentences(const ::std::string& value);
  #if LANG_CXX11
  void add_sentences(::std::string&& value);
  #endif
  void add_sentences(const char* value);
  void add_sentences(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sentences() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sentences();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string mode = 2;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  const ::std::string& mode() const;
  void set_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_mode(::std::string&& value);
  #endif
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  ::std::string* mutable_mode();
  ::std::string* release_mode();
  void set_allocated_mode(::std::string* mode);

  // optional string text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:gogo.sr.doc_zone)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_mode();
  void clear_has_mode();
  void set_has_text();
  void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sentences_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr mode_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class doc_dump : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.doc_dump) */ {
 public:
  doc_dump();
  virtual ~doc_dump();

  doc_dump(const doc_dump& from);

  inline doc_dump& operator=(const doc_dump& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  doc_dump(doc_dump&& from) noexcept
    : doc_dump() {
    *this = ::std::move(from);
  }

  inline doc_dump& operator=(doc_dump&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doc_dump& default_instance();

  static inline const doc_dump* internal_default_instance() {
    return reinterpret_cast<const doc_dump*>(
               &_doc_dump_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(doc_dump* other);
  friend void swap(doc_dump& a, doc_dump& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline doc_dump* New() const PROTOBUF_FINAL { return New(NULL); }

  doc_dump* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const doc_dump& from);
  void MergeFrom(const doc_dump& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(doc_dump* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.sr.doc_zone zones = 1;
  int zones_size() const;
  void clear_zones();
  static const int kZonesFieldNumber = 1;
  const ::gogo::sr::doc_zone& zones(int index) const;
  ::gogo::sr::doc_zone* mutable_zones(int index);
  ::gogo::sr::doc_zone* add_zones();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_zone >*
      mutable_zones();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_zone >&
      zones() const;

  // @@protoc_insertion_point(class_scope:gogo.sr.doc_dump)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_zone > zones_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class doc_item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.doc_item) */ {
 public:
  doc_item();
  virtual ~doc_item();

  doc_item(const doc_item& from);

  inline doc_item& operator=(const doc_item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  doc_item(doc_item&& from) noexcept
    : doc_item() {
    *this = ::std::move(from);
  }

  inline doc_item& operator=(doc_item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const doc_item& default_instance();

  static inline const doc_item* internal_default_instance() {
    return reinterpret_cast<const doc_item*>(
               &_doc_item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(doc_item* other);
  friend void swap(doc_item& a, doc_item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline doc_item* New() const PROTOBUF_FINAL { return New(NULL); }

  doc_item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const doc_item& from);
  void MergeFrom(const doc_item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(doc_item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.sr.word_posting_list snip_hl = 12;
  int snip_hl_size() const;
  void clear_snip_hl();
  static const int kSnipHlFieldNumber = 12;
  const ::gogo::sr::word_posting_list& snip_hl(int index) const;
  ::gogo::sr::word_posting_list* mutable_snip_hl(int index);
  ::gogo::sr::word_posting_list* add_snip_hl();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posting_list >*
      mutable_snip_hl();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posting_list >&
      snip_hl() const;

  // repeated .gogo.sr.num_zone_item num_zone_values = 13;
  int num_zone_values_size() const;
  void clear_num_zone_values();
  static const int kNumZoneValuesFieldNumber = 13;
  const ::gogo::sr::num_zone_item& num_zone_values(int index) const;
  ::gogo::sr::num_zone_item* mutable_num_zone_values(int index);
  ::gogo::sr::num_zone_item* add_num_zone_values();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::num_zone_item >*
      mutable_num_zone_values();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::num_zone_item >&
      num_zone_values() const;

  // repeated .gogo.sr.text_zone_item text_zone_values = 14;
  int text_zone_values_size() const;
  void clear_text_zone_values();
  static const int kTextZoneValuesFieldNumber = 14;
  const ::gogo::sr::text_zone_item& text_zone_values(int index) const;
  ::gogo::sr::text_zone_item* mutable_text_zone_values(int index);
  ::gogo::sr::text_zone_item* add_text_zone_values();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::text_zone_item >*
      mutable_text_zone_values();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::text_zone_item >&
      text_zone_values() const;

  // repeated string track_list = 15;
  int track_list_size() const;
  void clear_track_list();
  static const int kTrackListFieldNumber = 15;
  const ::std::string& track_list(int index) const;
  ::std::string* mutable_track_list(int index);
  void set_track_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_track_list(int index, ::std::string&& value);
  #endif
  void set_track_list(int index, const char* value);
  void set_track_list(int index, const char* value, size_t size);
  ::std::string* add_track_list();
  void add_track_list(const ::std::string& value);
  #if LANG_CXX11
  void add_track_list(::std::string&& value);
  #endif
  void add_track_list(const char* value);
  void add_track_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& track_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_track_list();

  // optional string last_date = 3;
  bool has_last_date() const;
  void clear_last_date();
  static const int kLastDateFieldNumber = 3;
  const ::std::string& last_date() const;
  void set_last_date(const ::std::string& value);
  #if LANG_CXX11
  void set_last_date(::std::string&& value);
  #endif
  void set_last_date(const char* value);
  void set_last_date(const char* value, size_t size);
  ::std::string* mutable_last_date();
  ::std::string* release_last_date();
  void set_allocated_last_date(::std::string* last_date);

  // optional string body = 16;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 16;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string rank_trace_feat = 24;
  bool has_rank_trace_feat() const;
  void clear_rank_trace_feat();
  static const int kRankTraceFeatFieldNumber = 24;
  const ::std::string& rank_trace_feat() const;
  void set_rank_trace_feat(const ::std::string& value);
  #if LANG_CXX11
  void set_rank_trace_feat(::std::string&& value);
  #endif
  void set_rank_trace_feat(const char* value);
  void set_rank_trace_feat(const char* value, size_t size);
  ::std::string* mutable_rank_trace_feat();
  ::std::string* release_rank_trace_feat();
  void set_allocated_rank_trace_feat(::std::string* rank_trace_feat);

  // optional string index_version = 26;
  bool has_index_version() const;
  void clear_index_version();
  static const int kIndexVersionFieldNumber = 26;
  const ::std::string& index_version() const;
  void set_index_version(const ::std::string& value);
  #if LANG_CXX11
  void set_index_version(::std::string&& value);
  #endif
  void set_index_version(const char* value);
  void set_index_version(const char* value, size_t size);
  ::std::string* mutable_index_version();
  ::std::string* release_index_version();
  void set_allocated_index_version(::std::string* index_version);

  // optional string raw_text_ranks = 27;
  bool has_raw_text_ranks() const;
  void clear_raw_text_ranks();
  static const int kRawTextRanksFieldNumber = 27;
  const ::std::string& raw_text_ranks() const;
  void set_raw_text_ranks(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_text_ranks(::std::string&& value);
  #endif
  void set_raw_text_ranks(const char* value);
  void set_raw_text_ranks(const char* value, size_t size);
  ::std::string* mutable_raw_text_ranks();
  ::std::string* release_raw_text_ranks();
  void set_allocated_raw_text_ranks(::std::string* raw_text_ranks);

  // optional string doc_trace = 30;
  bool has_doc_trace() const;
  void clear_doc_trace();
  static const int kDocTraceFieldNumber = 30;
  const ::std::string& doc_trace() const;
  void set_doc_trace(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_trace(::std::string&& value);
  #endif
  void set_doc_trace(const char* value);
  void set_doc_trace(const char* value, size_t size);
  ::std::string* mutable_doc_trace();
  ::std::string* release_doc_trace();
  void set_allocated_doc_trace(::std::string* doc_trace);

  // optional bytes raw_doc_content = 33;
  bool has_raw_doc_content() const;
  void clear_raw_doc_content();
  static const int kRawDocContentFieldNumber = 33;
  const ::std::string& raw_doc_content() const;
  void set_raw_doc_content(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_doc_content(::std::string&& value);
  #endif
  void set_raw_doc_content(const char* value);
  void set_raw_doc_content(const void* value, size_t size);
  ::std::string* mutable_raw_doc_content();
  ::std::string* release_raw_doc_content();
  void set_allocated_raw_doc_content(::std::string* raw_doc_content);

  // optional string doc_url = 36;
  bool has_doc_url() const;
  void clear_doc_url();
  static const int kDocUrlFieldNumber = 36;
  const ::std::string& doc_url() const;
  void set_doc_url(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_url(::std::string&& value);
  #endif
  void set_doc_url(const char* value);
  void set_doc_url(const char* value, size_t size);
  ::std::string* mutable_doc_url();
  ::std::string* release_doc_url();
  void set_allocated_doc_url(::std::string* doc_url);

  // optional .gogo.sr.snippet_item snip = 10;
  bool has_snip() const;
  void clear_snip();
  static const int kSnipFieldNumber = 10;
  const ::gogo::sr::snippet_item& snip() const;
  ::gogo::sr::snippet_item* mutable_snip();
  ::gogo::sr::snippet_item* release_snip();
  void set_allocated_snip(::gogo::sr::snippet_item* snip);

  // optional .gogo.sr.doc_data_ex data_ex = 11;
  bool has_data_ex() const;
  void clear_data_ex();
  static const int kDataExFieldNumber = 11;
  const ::gogo::sr::doc_data_ex& data_ex() const;
  ::gogo::sr::doc_data_ex* mutable_data_ex();
  ::gogo::sr::doc_data_ex* release_data_ex();
  void set_allocated_data_ex(::gogo::sr::doc_data_ex* data_ex);

  // optional .gogo.sr.real_doc_id_data real_doc_id = 17;
  bool has_real_doc_id() const;
  void clear_real_doc_id();
  static const int kRealDocIdFieldNumber = 17;
  const ::gogo::sr::real_doc_id_data& real_doc_id() const;
  ::gogo::sr::real_doc_id_data* mutable_real_doc_id();
  ::gogo::sr::real_doc_id_data* release_real_doc_id();
  void set_allocated_real_doc_id(::gogo::sr::real_doc_id_data* real_doc_id);

  // optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 19;
  bool has_site_links() const;
  void clear_site_links();
  static const int kSiteLinksFieldNumber = 19;
  const ::ru::mail::go::snippetdata::parser::SiteLinks& site_links() const;
  ::ru::mail::go::snippetdata::parser::SiteLinks* mutable_site_links();
  ::ru::mail::go::snippetdata::parser::SiteLinks* release_site_links();
  void set_allocated_site_links(::ru::mail::go::snippetdata::parser::SiteLinks* site_links);

  // optional .ru.mail.go.snippetdata.parser.ValueComposite extra_snippet_data = 20;
  bool has_extra_snippet_data() const;
  void clear_extra_snippet_data();
  static const int kExtraSnippetDataFieldNumber = 20;
  const ::ru::mail::go::snippetdata::parser::ValueComposite& extra_snippet_data() const;
  ::ru::mail::go::snippetdata::parser::ValueComposite* mutable_extra_snippet_data();
  ::ru::mail::go::snippetdata::parser::ValueComposite* release_extra_snippet_data();
  void set_allocated_extra_snippet_data(::ru::mail::go::snippetdata::parser::ValueComposite* extra_snippet_data);

  // required uint32 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::uint32 doc_id() const;
  void set_doc_id(::google::protobuf::uint32 value);

  // required uint32 num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // optional double weight = 4;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 4;
  double weight() const;
  void set_weight(double value);

  // optional int64 c1 = 7;
  bool has_c1() const;
  void clear_c1();
  static const int kC1FieldNumber = 7;
  ::google::protobuf::int64 c1() const;
  void set_c1(::google::protobuf::int64 value);

  // optional int64 c2 = 8;
  bool has_c2() const;
  void clear_c2();
  static const int kC2FieldNumber = 8;
  ::google::protobuf::int64 c2() const;
  void set_c2(::google::protobuf::int64 value);

  // optional int64 c3 = 9;
  bool has_c3() const;
  void clear_c3();
  static const int kC3FieldNumber = 9;
  ::google::protobuf::int64 c3() const;
  void set_c3(::google::protobuf::int64 value);

  // optional uint32 group_size = 5;
  bool has_group_size() const;
  void clear_group_size();
  static const int kGroupSizeFieldNumber = 5;
  ::google::protobuf::uint32 group_size() const;
  void set_group_size(::google::protobuf::uint32 value);

  // optional uint32 required_position = 22;
  bool has_required_position() const;
  void clear_required_position();
  static const int kRequiredPositionFieldNumber = 22;
  ::google::protobuf::uint32 required_position() const;
  void set_required_position(::google::protobuf::uint32 value);

  // optional uint64 c4 = 18;
  bool has_c4() const;
  void clear_c4();
  static const int kC4FieldNumber = 18;
  ::google::protobuf::uint64 c4() const;
  void set_c4(::google::protobuf::uint64 value);

  // optional .gogo.sr.domain_group_type domain_group = 23 [default = NONE];
  bool has_domain_group() const;
  void clear_domain_group();
  static const int kDomainGroupFieldNumber = 23;
  ::gogo::sr::domain_group_type domain_group() const;
  void set_domain_group(::gogo::sr::domain_group_type value);

  // optional bool spam = 6;
  bool has_spam() const;
  void clear_spam();
  static const int kSpamFieldNumber = 6;
  bool spam() const;
  void set_spam(bool value);

  // optional bool is_navig = 21;
  bool has_is_navig() const;
  void clear_is_navig();
  static const int kIsNavigFieldNumber = 21;
  bool is_navig() const;
  void set_is_navig(bool value);

  // optional bool could_be_a_group_leader = 31;
  bool has_could_be_a_group_leader() const;
  void clear_could_be_a_group_leader();
  static const int kCouldBeAGroupLeaderFieldNumber = 31;
  bool could_be_a_group_leader() const;
  void set_could_be_a_group_leader(bool value);

  // optional bool req_pos_mergable = 35 [default = false];
  bool has_req_pos_mergable() const;
  void clear_req_pos_mergable();
  static const int kReqPosMergableFieldNumber = 35;
  bool req_pos_mergable() const;
  void set_req_pos_mergable(bool value);

  // optional uint64 c5 = 28;
  bool has_c5() const;
  void clear_c5();
  static const int kC5FieldNumber = 28;
  ::google::protobuf::uint64 c5() const;
  void set_c5(::google::protobuf::uint64 value);

  // optional uint32 snippet_version = 29;
  bool has_snippet_version() const;
  void clear_snippet_version();
  static const int kSnippetVersionFieldNumber = 29;
  ::google::protobuf::uint32 snippet_version() const;
  void set_snippet_version(::google::protobuf::uint32 value);

  // optional fixed32 full_domain_hash = 32;
  bool has_full_domain_hash() const;
  void clear_full_domain_hash();
  static const int kFullDomainHashFieldNumber = 32;
  ::google::protobuf::uint32 full_domain_hash() const;
  void set_full_domain_hash(::google::protobuf::uint32 value);

  // optional sfixed32 features_hash = 34;
  bool has_features_hash() const;
  void clear_features_hash();
  static const int kFeaturesHashFieldNumber = 34;
  ::google::protobuf::int32 features_hash() const;
  void set_features_hash(::google::protobuf::int32 value);

  // optional bool is_vkmusic_master_copy = 37 [default = false];
  bool has_is_vkmusic_master_copy() const;
  void clear_is_vkmusic_master_copy();
  static const int kIsVkmusicMasterCopyFieldNumber = 37;
  bool is_vkmusic_master_copy() const;
  void set_is_vkmusic_master_copy(bool value);

  // optional bool is_vkmusic_release_copy = 38 [default = false];
  bool has_is_vkmusic_release_copy() const;
  void clear_is_vkmusic_release_copy();
  static const int kIsVkmusicReleaseCopyFieldNumber = 38;
  bool is_vkmusic_release_copy() const;
  void set_is_vkmusic_release_copy(bool value);

  // optional bool is_mergable = 25 [default = true];
  bool has_is_mergable() const;
  void clear_is_mergable();
  static const int kIsMergableFieldNumber = 25;
  bool is_mergable() const;
  void set_is_mergable(bool value);

  // @@protoc_insertion_point(class_scope:gogo.sr.doc_item)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_num();
  void clear_has_num();
  void set_has_last_date();
  void clear_has_last_date();
  void set_has_weight();
  void clear_has_weight();
  void set_has_group_size();
  void clear_has_group_size();
  void set_has_spam();
  void clear_has_spam();
  void set_has_c1();
  void clear_has_c1();
  void set_has_c2();
  void clear_has_c2();
  void set_has_c3();
  void clear_has_c3();
  void set_has_snip();
  void clear_has_snip();
  void set_has_data_ex();
  void clear_has_data_ex();
  void set_has_body();
  void clear_has_body();
  void set_has_real_doc_id();
  void clear_has_real_doc_id();
  void set_has_c4();
  void clear_has_c4();
  void set_has_site_links();
  void clear_has_site_links();
  void set_has_extra_snippet_data();
  void clear_has_extra_snippet_data();
  void set_has_is_navig();
  void clear_has_is_navig();
  void set_has_required_position();
  void clear_has_required_position();
  void set_has_domain_group();
  void clear_has_domain_group();
  void set_has_rank_trace_feat();
  void clear_has_rank_trace_feat();
  void set_has_is_mergable();
  void clear_has_is_mergable();
  void set_has_index_version();
  void clear_has_index_version();
  void set_has_raw_text_ranks();
  void clear_has_raw_text_ranks();
  void set_has_c5();
  void clear_has_c5();
  void set_has_snippet_version();
  void clear_has_snippet_version();
  void set_has_doc_trace();
  void clear_has_doc_trace();
  void set_has_could_be_a_group_leader();
  void clear_has_could_be_a_group_leader();
  void set_has_full_domain_hash();
  void clear_has_full_domain_hash();
  void set_has_raw_doc_content();
  void clear_has_raw_doc_content();
  void set_has_features_hash();
  void clear_has_features_hash();
  void set_has_req_pos_mergable();
  void clear_has_req_pos_mergable();
  void set_has_doc_url();
  void clear_has_doc_url();
  void set_has_is_vkmusic_master_copy();
  void clear_has_is_vkmusic_master_copy();
  void set_has_is_vkmusic_release_copy();
  void clear_has_is_vkmusic_release_copy();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posting_list > snip_hl_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::num_zone_item > num_zone_values_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::text_zone_item > text_zone_values_;
  ::google::protobuf::RepeatedPtrField< ::std::string> track_list_;
  ::google::protobuf::internal::ArenaStringPtr last_date_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr rank_trace_feat_;
  ::google::protobuf::internal::ArenaStringPtr index_version_;
  ::google::protobuf::internal::ArenaStringPtr raw_text_ranks_;
  ::google::protobuf::internal::ArenaStringPtr doc_trace_;
  ::google::protobuf::internal::ArenaStringPtr raw_doc_content_;
  ::google::protobuf::internal::ArenaStringPtr doc_url_;
  ::gogo::sr::snippet_item* snip_;
  ::gogo::sr::doc_data_ex* data_ex_;
  ::gogo::sr::real_doc_id_data* real_doc_id_;
  ::ru::mail::go::snippetdata::parser::SiteLinks* site_links_;
  ::ru::mail::go::snippetdata::parser::ValueComposite* extra_snippet_data_;
  ::google::protobuf::uint32 doc_id_;
  ::google::protobuf::uint32 num_;
  double weight_;
  ::google::protobuf::int64 c1_;
  ::google::protobuf::int64 c2_;
  ::google::protobuf::int64 c3_;
  ::google::protobuf::uint32 group_size_;
  ::google::protobuf::uint32 required_position_;
  ::google::protobuf::uint64 c4_;
  int domain_group_;
  bool spam_;
  bool is_navig_;
  bool could_be_a_group_leader_;
  bool req_pos_mergable_;
  ::google::protobuf::uint64 c5_;
  ::google::protobuf::uint32 snippet_version_;
  ::google::protobuf::uint32 full_domain_hash_;
  ::google::protobuf::int32 features_hash_;
  bool is_vkmusic_master_copy_;
  bool is_vkmusic_release_copy_;
  bool is_mergable_;
  mutable int _cached_size_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.error) */ {
 public:
  error();
  virtual ~error();

  error(const error& from);

  inline error& operator=(const error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  error(error&& from) noexcept
    : error() {
    *this = ::std::move(from);
  }

  inline error& operator=(error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const error& default_instance();

  static inline const error* internal_default_instance() {
    return reinterpret_cast<const error*>(
               &_error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(error* other);
  friend void swap(error& a, error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline error* New() const PROTOBUF_FINAL { return New(NULL); }

  error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const error& from);
  void MergeFrom(const error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_message = 2;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // required sint32 error_code = 1;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.error)
 private:
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_message();
  void clear_has_error_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 error_code_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class integer_counter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.integer_counter) */ {
 public:
  integer_counter();
  virtual ~integer_counter();

  integer_counter(const integer_counter& from);

  inline integer_counter& operator=(const integer_counter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  integer_counter(integer_counter&& from) noexcept
    : integer_counter() {
    *this = ::std::move(from);
  }

  inline integer_counter& operator=(integer_counter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const integer_counter& default_instance();

  static inline const integer_counter* internal_default_instance() {
    return reinterpret_cast<const integer_counter*>(
               &_integer_counter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(integer_counter* other);
  friend void swap(integer_counter& a, integer_counter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline integer_counter* New() const PROTOBUF_FINAL { return New(NULL); }

  integer_counter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const integer_counter& from);
  void MergeFrom(const integer_counter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(integer_counter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 counter = 2;
  bool has_counter() const;
  void clear_counter();
  static const int kCounterFieldNumber = 2;
  ::google::protobuf::int64 counter() const;
  void set_counter(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.integer_counter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_counter();
  void clear_has_counter();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 counter_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class double_counter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.double_counter) */ {
 public:
  double_counter();
  virtual ~double_counter();

  double_counter(const double_counter& from);

  inline double_counter& operator=(const double_counter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  double_counter(double_counter&& from) noexcept
    : double_counter() {
    *this = ::std::move(from);
  }

  inline double_counter& operator=(double_counter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const double_counter& default_instance();

  static inline const double_counter* internal_default_instance() {
    return reinterpret_cast<const double_counter*>(
               &_double_counter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(double_counter* other);
  friend void swap(double_counter& a, double_counter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline double_counter* New() const PROTOBUF_FINAL { return New(NULL); }

  double_counter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const double_counter& from);
  void MergeFrom(const double_counter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(double_counter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required double counter = 2;
  bool has_counter() const;
  void clear_counter();
  static const int kCounterFieldNumber = 2;
  double counter() const;
  void set_counter(double value);

  // @@protoc_insertion_point(class_scope:gogo.sr.double_counter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_counter();
  void clear_has_counter();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double counter_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class statistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.statistic) */ {
 public:
  statistic();
  virtual ~statistic();

  statistic(const statistic& from);

  inline statistic& operator=(const statistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  statistic(statistic&& from) noexcept
    : statistic() {
    *this = ::std::move(from);
  }

  inline statistic& operator=(statistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const statistic& default_instance();

  static inline const statistic* internal_default_instance() {
    return reinterpret_cast<const statistic*>(
               &_statistic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(statistic* other);
  friend void swap(statistic& a, statistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline statistic* New() const PROTOBUF_FINAL { return New(NULL); }

  statistic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const statistic& from);
  void MergeFrom(const statistic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(statistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 porno_stats = 1 [packed = true];
  int porno_stats_size() const;
  void clear_porno_stats();
  static const int kPornoStatsFieldNumber = 1;
  ::google::protobuf::uint32 porno_stats(int index) const;
  void set_porno_stats(int index, ::google::protobuf::uint32 value);
  void add_porno_stats(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      porno_stats() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_porno_stats();

  // repeated uint32 geo_list = 2 [packed = true];
  int geo_list_size() const;
  void clear_geo_list();
  static const int kGeoListFieldNumber = 2;
  ::google::protobuf::uint32 geo_list(int index) const;
  void set_geo_list(int index, ::google::protobuf::uint32 value);
  void add_geo_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      geo_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_geo_list();

  // repeated uint32 porno2_stats = 3 [packed = true];
  int porno2_stats_size() const;
  void clear_porno2_stats();
  static const int kPorno2StatsFieldNumber = 3;
  ::google::protobuf::uint32 porno2_stats(int index) const;
  void set_porno2_stats(int index, ::google::protobuf::uint32 value);
  void add_porno2_stats(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      porno2_stats() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_porno2_stats();

  // repeated uint32 porno_prob_stats = 4 [packed = true];
  int porno_prob_stats_size() const;
  void clear_porno_prob_stats();
  static const int kPornoProbStatsFieldNumber = 4;
  ::google::protobuf::uint32 porno_prob_stats(int index) const;
  void set_porno_prob_stats(int index, ::google::protobuf::uint32 value);
  void add_porno_prob_stats(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      porno_prob_stats() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_porno_prob_stats();

  // repeated .gogo.sr.integer_counter max_integer_counter = 100;
  int max_integer_counter_size() const;
  void clear_max_integer_counter();
  static const int kMaxIntegerCounterFieldNumber = 100;
  const ::gogo::sr::integer_counter& max_integer_counter(int index) const;
  ::gogo::sr::integer_counter* mutable_max_integer_counter(int index);
  ::gogo::sr::integer_counter* add_max_integer_counter();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >*
      mutable_max_integer_counter();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >&
      max_integer_counter() const;

  // repeated .gogo.sr.integer_counter integer_counter = 101;
  int integer_counter_size() const;
  void clear_integer_counter();
  static const int kIntegerCounterFieldNumber = 101;
  const ::gogo::sr::integer_counter& integer_counter(int index) const;
  ::gogo::sr::integer_counter* mutable_integer_counter(int index);
  ::gogo::sr::integer_counter* add_integer_counter();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >*
      mutable_integer_counter();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >&
      integer_counter() const;

  // repeated .gogo.sr.double_counter double_counter = 102;
  int double_counter_size() const;
  void clear_double_counter();
  static const int kDoubleCounterFieldNumber = 102;
  const ::gogo::sr::double_counter& double_counter(int index) const;
  ::gogo::sr::double_counter* mutable_double_counter(int index);
  ::gogo::sr::double_counter* add_double_counter();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::double_counter >*
      mutable_double_counter();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::double_counter >&
      double_counter() const;

  // optional bool metasearch_used = 103;
  bool has_metasearch_used() const;
  void clear_metasearch_used();
  static const int kMetasearchUsedFieldNumber = 103;
  bool metasearch_used() const;
  void set_metasearch_used(bool value);

  // @@protoc_insertion_point(class_scope:gogo.sr.statistic)
 private:
  void set_has_metasearch_used();
  void clear_has_metasearch_used();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > porno_stats_;
  mutable int _porno_stats_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > geo_list_;
  mutable int _geo_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > porno2_stats_;
  mutable int _porno2_stats_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > porno_prob_stats_;
  mutable int _porno_prob_stats_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter > max_integer_counter_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter > integer_counter_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::double_counter > double_counter_;
  bool metasearch_used_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class trait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.trait) */ {
 public:
  trait();
  virtual ~trait();

  trait(const trait& from);

  inline trait& operator=(const trait& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  trait(trait&& from) noexcept
    : trait() {
    *this = ::std::move(from);
  }

  inline trait& operator=(trait&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const trait& default_instance();

  static inline const trait* internal_default_instance() {
    return reinterpret_cast<const trait*>(
               &_trait_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(trait* other);
  friend void swap(trait& a, trait& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trait* New() const PROTOBUF_FINAL { return New(NULL); }

  trait* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const trait& from);
  void MergeFrom(const trait& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(trait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.trait)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class wnf_url : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.wnf_url) */ {
 public:
  wnf_url();
  virtual ~wnf_url();

  wnf_url(const wnf_url& from);

  inline wnf_url& operator=(const wnf_url& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  wnf_url(wnf_url&& from) noexcept
    : wnf_url() {
    *this = ::std::move(from);
  }

  inline wnf_url& operator=(wnf_url&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wnf_url& default_instance();

  static inline const wnf_url* internal_default_instance() {
    return reinterpret_cast<const wnf_url*>(
               &_wnf_url_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(wnf_url* other);
  friend void swap(wnf_url& a, wnf_url& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline wnf_url* New() const PROTOBUF_FINAL { return New(NULL); }

  wnf_url* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const wnf_url& from);
  void MergeFrom(const wnf_url& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(wnf_url* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string category = 2;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // @@protoc_insertion_point(class_scope:gogo.sr.wnf_url)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_category();
  void clear_has_category();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class wnf_text_zone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.wnf_text_zone) */ {
 public:
  wnf_text_zone();
  virtual ~wnf_text_zone();

  wnf_text_zone(const wnf_text_zone& from);

  inline wnf_text_zone& operator=(const wnf_text_zone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  wnf_text_zone(wnf_text_zone&& from) noexcept
    : wnf_text_zone() {
    *this = ::std::move(from);
  }

  inline wnf_text_zone& operator=(wnf_text_zone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wnf_text_zone& default_instance();

  static inline const wnf_text_zone* internal_default_instance() {
    return reinterpret_cast<const wnf_text_zone*>(
               &_wnf_text_zone_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(wnf_text_zone* other);
  friend void swap(wnf_text_zone& a, wnf_text_zone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline wnf_text_zone* New() const PROTOBUF_FINAL { return New(NULL); }

  wnf_text_zone* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const wnf_text_zone& from);
  void MergeFrom(const wnf_text_zone& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(wnf_text_zone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // required uint32 zone_id = 1;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.wnf_text_zone)
 private:
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint32 zone_id_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class wnf_dump_tz : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.wnf_dump_tz) */ {
 public:
  wnf_dump_tz();
  virtual ~wnf_dump_tz();

  wnf_dump_tz(const wnf_dump_tz& from);

  inline wnf_dump_tz& operator=(const wnf_dump_tz& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  wnf_dump_tz(wnf_dump_tz&& from) noexcept
    : wnf_dump_tz() {
    *this = ::std::move(from);
  }

  inline wnf_dump_tz& operator=(wnf_dump_tz&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wnf_dump_tz& default_instance();

  static inline const wnf_dump_tz* internal_default_instance() {
    return reinterpret_cast<const wnf_dump_tz*>(
               &_wnf_dump_tz_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(wnf_dump_tz* other);
  friend void swap(wnf_dump_tz& a, wnf_dump_tz& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline wnf_dump_tz* New() const PROTOBUF_FINAL { return New(NULL); }

  wnf_dump_tz* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const wnf_dump_tz& from);
  void MergeFrom(const wnf_dump_tz& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(wnf_dump_tz* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.sr.wnf_text_zone zones = 2;
  int zones_size() const;
  void clear_zones();
  static const int kZonesFieldNumber = 2;
  const ::gogo::sr::wnf_text_zone& zones(int index) const;
  ::gogo::sr::wnf_text_zone* mutable_zones(int index);
  ::gogo::sr::wnf_text_zone* add_zones();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_text_zone >*
      mutable_zones();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_text_zone >&
      zones() const;

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:gogo.sr.wnf_dump_tz)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_text_zone > zones_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class multicast_stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.multicast_stat) */ {
 public:
  multicast_stat();
  virtual ~multicast_stat();

  multicast_stat(const multicast_stat& from);

  inline multicast_stat& operator=(const multicast_stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  multicast_stat(multicast_stat&& from) noexcept
    : multicast_stat() {
    *this = ::std::move(from);
  }

  inline multicast_stat& operator=(multicast_stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const multicast_stat& default_instance();

  static inline const multicast_stat* internal_default_instance() {
    return reinterpret_cast<const multicast_stat*>(
               &_multicast_stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(multicast_stat* other);
  friend void swap(multicast_stat& a, multicast_stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline multicast_stat* New() const PROTOBUF_FINAL { return New(NULL); }

  multicast_stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const multicast_stat& from);
  void MergeFrom(const multicast_stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(multicast_stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 searcher_request_status = 1;
  bool has_searcher_request_status() const;
  void clear_searcher_request_status();
  static const int kSearcherRequestStatusFieldNumber = 1;
  ::google::protobuf::int64 searcher_request_status() const;
  void set_searcher_request_status(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.multicast_stat)
 private:
  void set_has_searcher_request_status();
  void clear_has_searcher_request_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 searcher_request_status_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class qual_stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.qual_stat) */ {
 public:
  qual_stat();
  virtual ~qual_stat();

  qual_stat(const qual_stat& from);

  inline qual_stat& operator=(const qual_stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  qual_stat(qual_stat&& from) noexcept
    : qual_stat() {
    *this = ::std::move(from);
  }

  inline qual_stat& operator=(qual_stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qual_stat& default_instance();

  static inline const qual_stat* internal_default_instance() {
    return reinterpret_cast<const qual_stat*>(
               &_qual_stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(qual_stat* other);
  friend void swap(qual_stat& a, qual_stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline qual_stat* New() const PROTOBUF_FINAL { return New(NULL); }

  qual_stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const qual_stat& from);
  void MergeFrom(const qual_stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(qual_stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .backends_quality.pb.BackendsQuality backends_quality = 1;
  int backends_quality_size() const;
  void clear_backends_quality();
  static const int kBackendsQualityFieldNumber = 1;
  const ::backends_quality::pb::BackendsQuality& backends_quality(int index) const;
  ::backends_quality::pb::BackendsQuality* mutable_backends_quality(int index);
  ::backends_quality::pb::BackendsQuality* add_backends_quality();
  ::google::protobuf::RepeatedPtrField< ::backends_quality::pb::BackendsQuality >*
      mutable_backends_quality();
  const ::google::protobuf::RepeatedPtrField< ::backends_quality::pb::BackendsQuality >&
      backends_quality() const;

  // optional .gogo.sr.multicast_stat multicast_stat = 2;
  bool has_multicast_stat() const;
  void clear_multicast_stat();
  static const int kMulticastStatFieldNumber = 2;
  const ::gogo::sr::multicast_stat& multicast_stat() const;
  ::gogo::sr::multicast_stat* mutable_multicast_stat();
  ::gogo::sr::multicast_stat* release_multicast_stat();
  void set_allocated_multicast_stat(::gogo::sr::multicast_stat* multicast_stat);

  // @@protoc_insertion_point(class_scope:gogo.sr.qual_stat)
 private:
  void set_has_multicast_stat();
  void clear_has_multicast_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::backends_quality::pb::BackendsQuality > backends_quality_;
  ::gogo::sr::multicast_stat* multicast_stat_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class search_result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.sr.search_result) */ {
 public:
  search_result();
  virtual ~search_result();

  search_result(const search_result& from);

  inline search_result& operator=(const search_result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  search_result(search_result&& from) noexcept
    : search_result() {
    *this = ::std::move(from);
  }

  inline search_result& operator=(search_result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const search_result& default_instance();

  static inline const search_result* internal_default_instance() {
    return reinterpret_cast<const search_result*>(
               &_search_result_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(search_result* other);
  friend void swap(search_result& a, search_result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline search_result* New() const PROTOBUF_FINAL { return New(NULL); }

  search_result* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const search_result& from);
  void MergeFrom(const search_result& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(search_result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string words = 6;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 6;
  const ::std::string& words(int index) const;
  ::std::string* mutable_words(int index);
  void set_words(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_words(int index, ::std::string&& value);
  #endif
  void set_words(int index, const char* value);
  void set_words(int index, const char* value, size_t size);
  ::std::string* add_words();
  void add_words(const ::std::string& value);
  #if LANG_CXX11
  void add_words(::std::string&& value);
  #endif
  void add_words(const char* value);
  void add_words(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& words() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_words();

  // repeated .gogo.sr.doc_item docs = 7;
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 7;
  const ::gogo::sr::doc_item& docs(int index) const;
  ::gogo::sr::doc_item* mutable_docs(int index);
  ::gogo::sr::doc_item* add_docs();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_item >*
      mutable_docs();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_item >&
      docs() const;

  // repeated uint64 zone_dump = 9;
  int zone_dump_size() const;
  void clear_zone_dump();
  static const int kZoneDumpFieldNumber = 9;
  ::google::protobuf::uint64 zone_dump(int index) const;
  void set_zone_dump(int index, ::google::protobuf::uint64 value);
  void add_zone_dump(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      zone_dump() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_zone_dump();

  // repeated uint32 porno_stats = 12 [packed = true];
  int porno_stats_size() const;
  void clear_porno_stats();
  static const int kPornoStatsFieldNumber = 12;
  ::google::protobuf::uint32 porno_stats(int index) const;
  void set_porno_stats(int index, ::google::protobuf::uint32 value);
  void add_porno_stats(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      porno_stats() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_porno_stats();

  // repeated string microbase_id = 16;
  int microbase_id_size() const;
  void clear_microbase_id();
  static const int kMicrobaseIdFieldNumber = 16;
  const ::std::string& microbase_id(int index) const;
  ::std::string* mutable_microbase_id(int index);
  void set_microbase_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_microbase_id(int index, ::std::string&& value);
  #endif
  void set_microbase_id(int index, const char* value);
  void set_microbase_id(int index, const char* value, size_t size);
  ::std::string* add_microbase_id();
  void add_microbase_id(const ::std::string& value);
  #if LANG_CXX11
  void add_microbase_id(::std::string&& value);
  #endif
  void add_microbase_id(const char* value);
  void add_microbase_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& microbase_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_microbase_id();

  // repeated .gogo.sr.trait traits = 18;
  int traits_size() const;
  void clear_traits();
  static const int kTraitsFieldNumber = 18;
  const ::gogo::sr::trait& traits(int index) const;
  ::gogo::sr::trait* mutable_traits(int index);
  ::gogo::sr::trait* add_traits();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::trait >*
      mutable_traits();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::trait >&
      traits() const;

  // repeated .gogo.sr.wnf_url wnf_urls = 20;
  int wnf_urls_size() const;
  void clear_wnf_urls();
  static const int kWnfUrlsFieldNumber = 20;
  const ::gogo::sr::wnf_url& wnf_urls(int index) const;
  ::gogo::sr::wnf_url* mutable_wnf_urls(int index);
  ::gogo::sr::wnf_url* add_wnf_urls();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_url >*
      mutable_wnf_urls();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_url >&
      wnf_urls() const;

  // repeated .gogo.sr.wnf_dump_tz wnf_tz = 21;
  int wnf_tz_size() const;
  void clear_wnf_tz();
  static const int kWnfTzFieldNumber = 21;
  const ::gogo::sr::wnf_dump_tz& wnf_tz(int index) const;
  ::gogo::sr::wnf_dump_tz* mutable_wnf_tz(int index);
  ::gogo::sr::wnf_dump_tz* add_wnf_tz();
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_dump_tz >*
      mutable_wnf_tz();
  const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_dump_tz >&
      wnf_tz() const;

  // optional string query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string query_string = 3;
  bool has_query_string() const;
  void clear_query_string();
  static const int kQueryStringFieldNumber = 3;
  const ::std::string& query_string() const;
  void set_query_string(const ::std::string& value);
  #if LANG_CXX11
  void set_query_string(::std::string&& value);
  #endif
  void set_query_string(const char* value);
  void set_query_string(const char* value, size_t size);
  ::std::string* mutable_query_string();
  ::std::string* release_query_string();
  void set_allocated_query_string(::std::string* query_string);

  // optional string statistics = 10;
  bool has_statistics() const;
  void clear_statistics();
  static const int kStatisticsFieldNumber = 10;
  const ::std::string& statistics() const;
  void set_statistics(const ::std::string& value);
  #if LANG_CXX11
  void set_statistics(::std::string&& value);
  #endif
  void set_statistics(const char* value);
  void set_statistics(const char* value, size_t size);
  ::std::string* mutable_statistics();
  ::std::string* release_statistics();
  void set_allocated_statistics(::std::string* statistics);

  // optional string sm_through = 11;
  bool has_sm_through() const;
  void clear_sm_through();
  static const int kSmThroughFieldNumber = 11;
  const ::std::string& sm_through() const;
  void set_sm_through(const ::std::string& value);
  #if LANG_CXX11
  void set_sm_through(::std::string&& value);
  #endif
  void set_sm_through(const char* value);
  void set_sm_through(const char* value, size_t size);
  ::std::string* mutable_sm_through();
  ::std::string* release_sm_through();
  void set_allocated_sm_through(::std::string* sm_through);

  // optional string searcher_vers = 17;
  bool has_searcher_vers() const;
  void clear_searcher_vers();
  static const int kSearcherVersFieldNumber = 17;
  const ::std::string& searcher_vers() const;
  void set_searcher_vers(const ::std::string& value);
  #if LANG_CXX11
  void set_searcher_vers(::std::string&& value);
  #endif
  void set_searcher_vers(const char* value);
  void set_searcher_vers(const char* value, size_t size);
  ::std::string* mutable_searcher_vers();
  ::std::string* release_searcher_vers();
  void set_allocated_searcher_vers(::std::string* searcher_vers);

  // required .gogo.sr.error err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::gogo::sr::error& err() const;
  ::gogo::sr::error* mutable_err();
  ::gogo::sr::error* release_err();
  void set_allocated_err(::gogo::sr::error* err);

  // optional .gogo.sr.result_frame frame = 5;
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 5;
  const ::gogo::sr::result_frame& frame() const;
  ::gogo::sr::result_frame* mutable_frame();
  ::gogo::sr::result_frame* release_frame();
  void set_allocated_frame(::gogo::sr::result_frame* frame);

  // optional .gogo.sr.statistic statistic = 14;
  bool has_statistic() const;
  void clear_statistic();
  static const int kStatisticFieldNumber = 14;
  const ::gogo::sr::statistic& statistic() const;
  ::gogo::sr::statistic* mutable_statistic();
  ::gogo::sr::statistic* release_statistic();
  void set_allocated_statistic(::gogo::sr::statistic* statistic);

  // optional .gogo.sr.qual_stat qual_stat = 24;
  bool has_qual_stat() const;
  void clear_qual_stat();
  static const int kQualStatFieldNumber = 24;
  const ::gogo::sr::qual_stat& qual_stat() const;
  ::gogo::sr::qual_stat* mutable_qual_stat();
  ::gogo::sr::qual_stat* release_qual_stat();
  void set_allocated_qual_stat(::gogo::sr::qual_stat* qual_stat);

  // optional uint64 fingerprint = 8;
  bool has_fingerprint() const;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 8;
  ::google::protobuf::uint64 fingerprint() const;
  void set_fingerprint(::google::protobuf::uint64 value);

  // optional float time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  float time() const;
  void set_time(float value);

  // optional bool use_snip_cache = 13;
  bool has_use_snip_cache() const;
  void clear_use_snip_cache();
  static const int kUseSnipCacheFieldNumber = 13;
  bool use_snip_cache() const;
  void set_use_snip_cache(bool value);

  // optional bool utf8 = 15;
  bool has_utf8() const;
  void clear_utf8();
  static const int kUtf8FieldNumber = 15;
  bool utf8() const;
  void set_utf8(bool value);

  // optional bool domain_group_ooo = 22;
  bool has_domain_group_ooo() const;
  void clear_domain_group_ooo();
  static const int kDomainGroupOooFieldNumber = 22;
  bool domain_group_ooo() const;
  void set_domain_group_ooo(bool value);

  // optional fixed32 version_hash = 19;
  bool has_version_hash() const;
  void clear_version_hash();
  static const int kVersionHashFieldNumber = 19;
  ::google::protobuf::uint32 version_hash() const;
  void set_version_hash(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.sr.search_result)
 private:
  void set_has_err();
  void clear_has_err();
  void set_has_query();
  void clear_has_query();
  void set_has_query_string();
  void clear_has_query_string();
  void set_has_time();
  void clear_has_time();
  void set_has_frame();
  void clear_has_frame();
  void set_has_fingerprint();
  void clear_has_fingerprint();
  void set_has_statistics();
  void clear_has_statistics();
  void set_has_sm_through();
  void clear_has_sm_through();
  void set_has_use_snip_cache();
  void clear_has_use_snip_cache();
  void set_has_statistic();
  void clear_has_statistic();
  void set_has_utf8();
  void clear_has_utf8();
  void set_has_searcher_vers();
  void clear_has_searcher_vers();
  void set_has_version_hash();
  void clear_has_version_hash();
  void set_has_domain_group_ooo();
  void clear_has_domain_group_ooo();
  void set_has_qual_stat();
  void clear_has_qual_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> words_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_item > docs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > zone_dump_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > porno_stats_;
  mutable int _porno_stats_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> microbase_id_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::trait > traits_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_url > wnf_urls_;
  ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_dump_tz > wnf_tz_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr query_string_;
  ::google::protobuf::internal::ArenaStringPtr statistics_;
  ::google::protobuf::internal::ArenaStringPtr sm_through_;
  ::google::protobuf::internal::ArenaStringPtr searcher_vers_;
  ::gogo::sr::error* err_;
  ::gogo::sr::result_frame* frame_;
  ::gogo::sr::statistic* statistic_;
  ::gogo::sr::qual_stat* qual_stat_;
  ::google::protobuf::uint64 fingerprint_;
  float time_;
  bool use_snip_cache_;
  bool utf8_;
  bool domain_group_ooo_;
  ::google::protobuf::uint32 version_hash_;
  friend struct protobuf_search_5fresult_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// result_frame

// required uint32 matched_docs = 1;
inline bool result_frame::has_matched_docs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void result_frame::set_has_matched_docs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void result_frame::clear_has_matched_docs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void result_frame::clear_matched_docs() {
  matched_docs_ = 0u;
  clear_has_matched_docs();
}
inline ::google::protobuf::uint32 result_frame::matched_docs() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.matched_docs)
  return matched_docs_;
}
inline void result_frame::set_matched_docs(::google::protobuf::uint32 value) {
  set_has_matched_docs();
  matched_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.matched_docs)
}

// optional uint32 ungrouped_docs = 2;
inline bool result_frame::has_ungrouped_docs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void result_frame::set_has_ungrouped_docs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void result_frame::clear_has_ungrouped_docs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void result_frame::clear_ungrouped_docs() {
  ungrouped_docs_ = 0u;
  clear_has_ungrouped_docs();
}
inline ::google::protobuf::uint32 result_frame::ungrouped_docs() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.ungrouped_docs)
  return ungrouped_docs_;
}
inline void result_frame::set_ungrouped_docs(::google::protobuf::uint32 value) {
  set_has_ungrouped_docs();
  ungrouped_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.ungrouped_docs)
}

// optional int32 site_estimate = 3;
inline bool result_frame::has_site_estimate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void result_frame::set_has_site_estimate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void result_frame::clear_has_site_estimate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void result_frame::clear_site_estimate() {
  site_estimate_ = 0;
  clear_has_site_estimate();
}
inline ::google::protobuf::int32 result_frame::site_estimate() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.site_estimate)
  return site_estimate_;
}
inline void result_frame::set_site_estimate(::google::protobuf::int32 value) {
  set_has_site_estimate();
  site_estimate_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.site_estimate)
}

// optional int32 docs_estimate = 4;
inline bool result_frame::has_docs_estimate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void result_frame::set_has_docs_estimate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void result_frame::clear_has_docs_estimate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void result_frame::clear_docs_estimate() {
  docs_estimate_ = 0;
  clear_has_docs_estimate();
}
inline ::google::protobuf::int32 result_frame::docs_estimate() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.docs_estimate)
  return docs_estimate_;
}
inline void result_frame::set_docs_estimate(::google::protobuf::int32 value) {
  set_has_docs_estimate();
  docs_estimate_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.docs_estimate)
}

// optional uint32 n_ranked_docs = 5;
inline bool result_frame::has_n_ranked_docs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void result_frame::set_has_n_ranked_docs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void result_frame::clear_has_n_ranked_docs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void result_frame::clear_n_ranked_docs() {
  n_ranked_docs_ = 0u;
  clear_has_n_ranked_docs();
}
inline ::google::protobuf::uint32 result_frame::n_ranked_docs() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.n_ranked_docs)
  return n_ranked_docs_;
}
inline void result_frame::set_n_ranked_docs(::google::protobuf::uint32 value) {
  set_has_n_ranked_docs();
  n_ranked_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.n_ranked_docs)
}

// optional uint32 first_index = 6;
inline bool result_frame::has_first_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void result_frame::set_has_first_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void result_frame::clear_has_first_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void result_frame::clear_first_index() {
  first_index_ = 0u;
  clear_has_first_index();
}
inline ::google::protobuf::uint32 result_frame::first_index() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.first_index)
  return first_index_;
}
inline void result_frame::set_first_index(::google::protobuf::uint32 value) {
  set_has_first_index();
  first_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.first_index)
}

// optional uint32 second_index = 7;
inline bool result_frame::has_second_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void result_frame::set_has_second_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void result_frame::clear_has_second_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void result_frame::clear_second_index() {
  second_index_ = 0u;
  clear_has_second_index();
}
inline ::google::protobuf::uint32 result_frame::second_index() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.second_index)
  return second_index_;
}
inline void result_frame::set_second_index(::google::protobuf::uint32 value) {
  set_has_second_index();
  second_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.second_index)
}

// optional uint32 last_index = 8;
inline bool result_frame::has_last_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void result_frame::set_has_last_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void result_frame::clear_has_last_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void result_frame::clear_last_index() {
  last_index_ = 0u;
  clear_has_last_index();
}
inline ::google::protobuf::uint32 result_frame::last_index() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.last_index)
  return last_index_;
}
inline void result_frame::set_last_index(::google::protobuf::uint32 value) {
  set_has_last_index();
  last_index_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.last_index)
}

// optional uint32 page_count = 9;
inline bool result_frame::has_page_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void result_frame::set_has_page_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void result_frame::clear_has_page_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void result_frame::clear_page_count() {
  page_count_ = 0u;
  clear_has_page_count();
}
inline ::google::protobuf::uint32 result_frame::page_count() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.page_count)
  return page_count_;
}
inline void result_frame::set_page_count(::google::protobuf::uint32 value) {
  set_has_page_count();
  page_count_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.page_count)
}

// optional uint32 n_param = 10;
inline bool result_frame::has_n_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void result_frame::set_has_n_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void result_frame::clear_has_n_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void result_frame::clear_n_param() {
  n_param_ = 0u;
  clear_has_n_param();
}
inline ::google::protobuf::uint32 result_frame::n_param() const {
  // @@protoc_insertion_point(field_get:gogo.sr.result_frame.n_param)
  return n_param_;
}
inline void result_frame::set_n_param(::google::protobuf::uint32 value) {
  set_has_n_param();
  n_param_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.result_frame.n_param)
}

// -------------------------------------------------------------------

// snippet_text_item

// required string text = 1;
inline bool snippet_text_item::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void snippet_text_item::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void snippet_text_item::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void snippet_text_item::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& snippet_text_item::text() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_text_item.text)
  return text_.GetNoArena();
}
inline void snippet_text_item::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_text_item.text)
}
#if LANG_CXX11
inline void snippet_text_item::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.snippet_text_item.text)
}
#endif
inline void snippet_text_item::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.snippet_text_item.text)
}
inline void snippet_text_item::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.snippet_text_item.text)
}
inline ::std::string* snippet_text_item::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:gogo.sr.snippet_text_item.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* snippet_text_item::release_text() {
  // @@protoc_insertion_point(field_release:gogo.sr.snippet_text_item.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void snippet_text_item::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.snippet_text_item.text)
}

// optional bool cb = 2;
inline bool snippet_text_item::has_cb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void snippet_text_item::set_has_cb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void snippet_text_item::clear_has_cb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void snippet_text_item::clear_cb() {
  cb_ = false;
  clear_has_cb();
}
inline bool snippet_text_item::cb() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_text_item.cb)
  return cb_;
}
inline void snippet_text_item::set_cb(bool value) {
  set_has_cb();
  cb_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_text_item.cb)
}

// optional bool ce = 3;
inline bool snippet_text_item::has_ce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void snippet_text_item::set_has_ce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void snippet_text_item::clear_has_ce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void snippet_text_item::clear_ce() {
  ce_ = false;
  clear_has_ce();
}
inline bool snippet_text_item::ce() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_text_item.ce)
  return ce_;
}
inline void snippet_text_item::set_ce(bool value) {
  set_has_ce();
  ce_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_text_item.ce)
}

// optional string debug_printout = 4;
inline bool snippet_text_item::has_debug_printout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void snippet_text_item::set_has_debug_printout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void snippet_text_item::clear_has_debug_printout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void snippet_text_item::clear_debug_printout() {
  debug_printout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug_printout();
}
inline const ::std::string& snippet_text_item::debug_printout() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_text_item.debug_printout)
  return debug_printout_.GetNoArena();
}
inline void snippet_text_item::set_debug_printout(const ::std::string& value) {
  set_has_debug_printout();
  debug_printout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_text_item.debug_printout)
}
#if LANG_CXX11
inline void snippet_text_item::set_debug_printout(::std::string&& value) {
  set_has_debug_printout();
  debug_printout_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.snippet_text_item.debug_printout)
}
#endif
inline void snippet_text_item::set_debug_printout(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_debug_printout();
  debug_printout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.snippet_text_item.debug_printout)
}
inline void snippet_text_item::set_debug_printout(const char* value, size_t size) {
  set_has_debug_printout();
  debug_printout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.snippet_text_item.debug_printout)
}
inline ::std::string* snippet_text_item::mutable_debug_printout() {
  set_has_debug_printout();
  // @@protoc_insertion_point(field_mutable:gogo.sr.snippet_text_item.debug_printout)
  return debug_printout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* snippet_text_item::release_debug_printout() {
  // @@protoc_insertion_point(field_release:gogo.sr.snippet_text_item.debug_printout)
  clear_has_debug_printout();
  return debug_printout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void snippet_text_item::set_allocated_debug_printout(::std::string* debug_printout) {
  if (debug_printout != NULL) {
    set_has_debug_printout();
  } else {
    clear_has_debug_printout();
  }
  debug_printout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_printout);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.snippet_text_item.debug_printout)
}

// -------------------------------------------------------------------

// snippet_item

// repeated .gogo.sr.snippet_text_item text = 3;
inline int snippet_item::text_size() const {
  return text_.size();
}
inline void snippet_item::clear_text() {
  text_.Clear();
}
inline const ::gogo::sr::snippet_text_item& snippet_item::text(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_item.text)
  return text_.Get(index);
}
inline ::gogo::sr::snippet_text_item* snippet_item::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.snippet_item.text)
  return text_.Mutable(index);
}
inline ::gogo::sr::snippet_text_item* snippet_item::add_text() {
  // @@protoc_insertion_point(field_add:gogo.sr.snippet_item.text)
  return text_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::snippet_text_item >*
snippet_item::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.snippet_item.text)
  return &text_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::snippet_text_item >&
snippet_item::text() const {
  // @@protoc_insertion_point(field_list:gogo.sr.snippet_item.text)
  return text_;
}

// optional uint32 qual = 4;
inline bool snippet_item::has_qual() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void snippet_item::set_has_qual() {
  _has_bits_[0] |= 0x00000001u;
}
inline void snippet_item::clear_has_qual() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void snippet_item::clear_qual() {
  qual_ = 0u;
  clear_has_qual();
}
inline ::google::protobuf::uint32 snippet_item::qual() const {
  // @@protoc_insertion_point(field_get:gogo.sr.snippet_item.qual)
  return qual_;
}
inline void snippet_item::set_qual(::google::protobuf::uint32 value) {
  set_has_qual();
  qual_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.snippet_item.qual)
}

// -------------------------------------------------------------------

// doc_data_ex

// optional sint32 depth = 1;
inline bool doc_data_ex::has_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void doc_data_ex::set_has_depth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void doc_data_ex::clear_has_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void doc_data_ex::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 doc_data_ex::depth() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.depth)
  return depth_;
}
inline void doc_data_ex::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.depth)
}

// optional uint32 doclen = 2;
inline bool doc_data_ex::has_doclen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void doc_data_ex::set_has_doclen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void doc_data_ex::clear_has_doclen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void doc_data_ex::clear_doclen() {
  doclen_ = 0u;
  clear_has_doclen();
}
inline ::google::protobuf::uint32 doc_data_ex::doclen() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.doclen)
  return doclen_;
}
inline void doc_data_ex::set_doclen(::google::protobuf::uint32 value) {
  set_has_doclen();
  doclen_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.doclen)
}

// optional double rank = 3;
inline bool doc_data_ex::has_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void doc_data_ex::set_has_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void doc_data_ex::clear_has_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void doc_data_ex::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline double doc_data_ex::rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.rank)
  return rank_;
}
inline void doc_data_ex::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.rank)
}

// optional double textR = 4;
inline bool doc_data_ex::has_textr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void doc_data_ex::set_has_textr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void doc_data_ex::clear_has_textr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void doc_data_ex::clear_textr() {
  textr_ = 0;
  clear_has_textr();
}
inline double doc_data_ex::textr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.textR)
  return textr_;
}
inline void doc_data_ex::set_textr(double value) {
  set_has_textr();
  textr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.textR)
}

// optional double titleR = 5;
inline bool doc_data_ex::has_titler() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void doc_data_ex::set_has_titler() {
  _has_bits_[0] |= 0x00000200u;
}
inline void doc_data_ex::clear_has_titler() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void doc_data_ex::clear_titler() {
  titler_ = 0;
  clear_has_titler();
}
inline double doc_data_ex::titler() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.titleR)
  return titler_;
}
inline void doc_data_ex::set_titler(double value) {
  set_has_titler();
  titler_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.titleR)
}

// optional double linkR = 6;
inline bool doc_data_ex::has_linkr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void doc_data_ex::set_has_linkr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void doc_data_ex::clear_has_linkr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void doc_data_ex::clear_linkr() {
  linkr_ = 0;
  clear_has_linkr();
}
inline double doc_data_ex::linkr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.linkR)
  return linkr_;
}
inline void doc_data_ex::set_linkr(double value) {
  set_has_linkr();
  linkr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.linkR)
}

// optional double catalogR = 7;
inline bool doc_data_ex::has_catalogr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void doc_data_ex::set_has_catalogr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void doc_data_ex::clear_has_catalogr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void doc_data_ex::clear_catalogr() {
  catalogr_ = 0;
  clear_has_catalogr();
}
inline double doc_data_ex::catalogr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.catalogR)
  return catalogr_;
}
inline void doc_data_ex::set_catalogr(double value) {
  set_has_catalogr();
  catalogr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.catalogR)
}

// optional double trustedR = 8;
inline bool doc_data_ex::has_trustedr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void doc_data_ex::set_has_trustedr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void doc_data_ex::clear_has_trustedr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void doc_data_ex::clear_trustedr() {
  trustedr_ = 0;
  clear_has_trustedr();
}
inline double doc_data_ex::trustedr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.trustedR)
  return trustedr_;
}
inline void doc_data_ex::set_trustedr(double value) {
  set_has_trustedr();
  trustedr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.trustedR)
}

// optional double wikiR = 9;
inline bool doc_data_ex::has_wikir() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void doc_data_ex::set_has_wikir() {
  _has_bits_[0] |= 0x00002000u;
}
inline void doc_data_ex::clear_has_wikir() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void doc_data_ex::clear_wikir() {
  wikir_ = 0;
  clear_has_wikir();
}
inline double doc_data_ex::wikir() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.wikiR)
  return wikir_;
}
inline void doc_data_ex::set_wikir(double value) {
  set_has_wikir();
  wikir_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.wikiR)
}

// optional double ctgR = 10;
inline bool doc_data_ex::has_ctgr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void doc_data_ex::set_has_ctgr() {
  _has_bits_[0] |= 0x00004000u;
}
inline void doc_data_ex::clear_has_ctgr() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void doc_data_ex::clear_ctgr() {
  ctgr_ = 0;
  clear_has_ctgr();
}
inline double doc_data_ex::ctgr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.ctgR)
  return ctgr_;
}
inline void doc_data_ex::set_ctgr(double value) {
  set_has_ctgr();
  ctgr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.ctgR)
}

// optional double clickNufR = 11;
inline bool doc_data_ex::has_clicknufr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void doc_data_ex::set_has_clicknufr() {
  _has_bits_[0] |= 0x00008000u;
}
inline void doc_data_ex::clear_has_clicknufr() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void doc_data_ex::clear_clicknufr() {
  clicknufr_ = 0;
  clear_has_clicknufr();
}
inline double doc_data_ex::clicknufr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clickNufR)
  return clicknufr_;
}
inline void doc_data_ex::set_clicknufr(double value) {
  set_has_clicknufr();
  clicknufr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.clickNufR)
}

// optional double clickLinkR = 12;
inline bool doc_data_ex::has_clicklinkr() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void doc_data_ex::set_has_clicklinkr() {
  _has_bits_[0] |= 0x00010000u;
}
inline void doc_data_ex::clear_has_clicklinkr() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void doc_data_ex::clear_clicklinkr() {
  clicklinkr_ = 0;
  clear_has_clicklinkr();
}
inline double doc_data_ex::clicklinkr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clickLinkR)
  return clicklinkr_;
}
inline void doc_data_ex::set_clicklinkr(double value) {
  set_has_clicklinkr();
  clicklinkr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.clickLinkR)
}

// optional double queryLinkR = 13;
inline bool doc_data_ex::has_querylinkr() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void doc_data_ex::set_has_querylinkr() {
  _has_bits_[0] |= 0x00020000u;
}
inline void doc_data_ex::clear_has_querylinkr() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void doc_data_ex::clear_querylinkr() {
  querylinkr_ = 0;
  clear_has_querylinkr();
}
inline double doc_data_ex::querylinkr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.queryLinkR)
  return querylinkr_;
}
inline void doc_data_ex::set_querylinkr(double value) {
  set_has_querylinkr();
  querylinkr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.queryLinkR)
}

// optional double clickUnfR = 14;
inline bool doc_data_ex::has_clickunfr() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void doc_data_ex::set_has_clickunfr() {
  _has_bits_[0] |= 0x00040000u;
}
inline void doc_data_ex::clear_has_clickunfr() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void doc_data_ex::clear_clickunfr() {
  clickunfr_ = 0;
  clear_has_clickunfr();
}
inline double doc_data_ex::clickunfr() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clickUnfR)
  return clickunfr_;
}
inline void doc_data_ex::set_clickunfr(double value) {
  set_has_clickunfr();
  clickunfr_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.clickUnfR)
}

// optional uint32 maxWFreq = 15;
inline bool doc_data_ex::has_maxwfreq() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void doc_data_ex::set_has_maxwfreq() {
  _has_bits_[0] |= 0x00100000u;
}
inline void doc_data_ex::clear_has_maxwfreq() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void doc_data_ex::clear_maxwfreq() {
  maxwfreq_ = 0u;
  clear_has_maxwfreq();
}
inline ::google::protobuf::uint32 doc_data_ex::maxwfreq() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.maxWFreq)
  return maxwfreq_;
}
inline void doc_data_ex::set_maxwfreq(::google::protobuf::uint32 value) {
  set_has_maxwfreq();
  maxwfreq_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.maxWFreq)
}

// optional double lastDelta = 16;
inline bool doc_data_ex::has_lastdelta() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void doc_data_ex::set_has_lastdelta() {
  _has_bits_[0] |= 0x00080000u;
}
inline void doc_data_ex::clear_has_lastdelta() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void doc_data_ex::clear_lastdelta() {
  lastdelta_ = 0;
  clear_has_lastdelta();
}
inline double doc_data_ex::lastdelta() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.lastDelta)
  return lastdelta_;
}
inline void doc_data_ex::set_lastdelta(double value) {
  set_has_lastdelta();
  lastdelta_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.lastDelta)
}

// optional string clustTag = 17;
inline bool doc_data_ex::has_clusttag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void doc_data_ex::set_has_clusttag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void doc_data_ex::clear_has_clusttag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void doc_data_ex::clear_clusttag() {
  clusttag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clusttag();
}
inline const ::std::string& doc_data_ex::clusttag() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clustTag)
  return clusttag_.GetNoArena();
}
inline void doc_data_ex::set_clusttag(const ::std::string& value) {
  set_has_clusttag();
  clusttag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.clustTag)
}
#if LANG_CXX11
inline void doc_data_ex::set_clusttag(::std::string&& value) {
  set_has_clusttag();
  clusttag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_data_ex.clustTag)
}
#endif
inline void doc_data_ex::set_clusttag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clusttag();
  clusttag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_data_ex.clustTag)
}
inline void doc_data_ex::set_clusttag(const char* value, size_t size) {
  set_has_clusttag();
  clusttag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_data_ex.clustTag)
}
inline ::std::string* doc_data_ex::mutable_clusttag() {
  set_has_clusttag();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.clustTag)
  return clusttag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_data_ex::release_clusttag() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.clustTag)
  clear_has_clusttag();
  return clusttag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_data_ex::set_allocated_clusttag(::std::string* clusttag) {
  if (clusttag != NULL) {
    set_has_clusttag();
  } else {
    clear_has_clusttag();
  }
  clusttag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clusttag);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.clustTag)
}

// optional string doc_trace = 18;
inline bool doc_data_ex::has_doc_trace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void doc_data_ex::set_has_doc_trace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void doc_data_ex::clear_has_doc_trace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void doc_data_ex::clear_doc_trace() {
  doc_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_trace();
}
inline const ::std::string& doc_data_ex::doc_trace() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.doc_trace)
  return doc_trace_.GetNoArena();
}
inline void doc_data_ex::set_doc_trace(const ::std::string& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.doc_trace)
}
#if LANG_CXX11
inline void doc_data_ex::set_doc_trace(::std::string&& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_data_ex.doc_trace)
}
#endif
inline void doc_data_ex::set_doc_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_data_ex.doc_trace)
}
inline void doc_data_ex::set_doc_trace(const char* value, size_t size) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_data_ex.doc_trace)
}
inline ::std::string* doc_data_ex::mutable_doc_trace() {
  set_has_doc_trace();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.doc_trace)
  return doc_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_data_ex::release_doc_trace() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.doc_trace)
  clear_has_doc_trace();
  return doc_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_data_ex::set_allocated_doc_trace(::std::string* doc_trace) {
  if (doc_trace != NULL) {
    set_has_doc_trace();
  } else {
    clear_has_doc_trace();
  }
  doc_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_trace);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.doc_trace)
}

// optional bool no_sn = 19;
inline bool doc_data_ex::has_no_sn() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void doc_data_ex::set_has_no_sn() {
  _has_bits_[0] |= 0x00200000u;
}
inline void doc_data_ex::clear_has_no_sn() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void doc_data_ex::clear_no_sn() {
  no_sn_ = false;
  clear_has_no_sn();
}
inline bool doc_data_ex::no_sn() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.no_sn)
  return no_sn_;
}
inline void doc_data_ex::set_no_sn(bool value) {
  set_has_no_sn();
  no_sn_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.no_sn)
}

// optional .gogo.sr.clickrank_data clickRank = 20;
inline bool doc_data_ex::has_clickrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void doc_data_ex::set_has_clickrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void doc_data_ex::clear_has_clickrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void doc_data_ex::clear_clickrank() {
  if (clickrank_ != NULL) clickrank_->::gogo::sr::clickrank_data::Clear();
  clear_has_clickrank();
}
inline const ::gogo::sr::clickrank_data& doc_data_ex::clickrank() const {
  const ::gogo::sr::clickrank_data* p = clickrank_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.clickRank)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::clickrank_data*>(
      &::gogo::sr::_clickrank_data_default_instance_);
}
inline ::gogo::sr::clickrank_data* doc_data_ex::mutable_clickrank() {
  set_has_clickrank();
  if (clickrank_ == NULL) {
    clickrank_ = new ::gogo::sr::clickrank_data;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.clickRank)
  return clickrank_;
}
inline ::gogo::sr::clickrank_data* doc_data_ex::release_clickrank() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.clickRank)
  clear_has_clickrank();
  ::gogo::sr::clickrank_data* temp = clickrank_;
  clickrank_ = NULL;
  return temp;
}
inline void doc_data_ex::set_allocated_clickrank(::gogo::sr::clickrank_data* clickrank) {
  delete clickrank_;
  clickrank_ = clickrank;
  if (clickrank) {
    set_has_clickrank();
  } else {
    clear_has_clickrank();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.clickRank)
}

// optional .gogo.sr.quality_data qualityData = 21;
inline bool doc_data_ex::has_qualitydata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void doc_data_ex::set_has_qualitydata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void doc_data_ex::clear_has_qualitydata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void doc_data_ex::clear_qualitydata() {
  if (qualitydata_ != NULL) qualitydata_->::gogo::sr::quality_data::Clear();
  clear_has_qualitydata();
}
inline const ::gogo::sr::quality_data& doc_data_ex::qualitydata() const {
  const ::gogo::sr::quality_data* p = qualitydata_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.qualityData)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::quality_data*>(
      &::gogo::sr::_quality_data_default_instance_);
}
inline ::gogo::sr::quality_data* doc_data_ex::mutable_qualitydata() {
  set_has_qualitydata();
  if (qualitydata_ == NULL) {
    qualitydata_ = new ::gogo::sr::quality_data;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.qualityData)
  return qualitydata_;
}
inline ::gogo::sr::quality_data* doc_data_ex::release_qualitydata() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.qualityData)
  clear_has_qualitydata();
  ::gogo::sr::quality_data* temp = qualitydata_;
  qualitydata_ = NULL;
  return temp;
}
inline void doc_data_ex::set_allocated_qualitydata(::gogo::sr::quality_data* qualitydata) {
  delete qualitydata_;
  qualitydata_ = qualitydata;
  if (qualitydata) {
    set_has_qualitydata();
  } else {
    clear_has_qualitydata();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.qualityData)
}

// optional uint32 bestOp = 22;
inline bool doc_data_ex::has_bestop() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void doc_data_ex::set_has_bestop() {
  _has_bits_[0] |= 0x00400000u;
}
inline void doc_data_ex::clear_has_bestop() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void doc_data_ex::clear_bestop() {
  bestop_ = 0u;
  clear_has_bestop();
}
inline ::google::protobuf::uint32 doc_data_ex::bestop() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.bestOp)
  return bestop_;
}
inline void doc_data_ex::set_bestop(::google::protobuf::uint32 value) {
  set_has_bestop();
  bestop_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_data_ex.bestOp)
}

// optional .gogo.sr.passage_data passages = 23;
inline bool doc_data_ex::has_passages() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void doc_data_ex::set_has_passages() {
  _has_bits_[0] |= 0x00000010u;
}
inline void doc_data_ex::clear_has_passages() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void doc_data_ex::clear_passages() {
  if (passages_ != NULL) passages_->::gogo::sr::passage_data::Clear();
  clear_has_passages();
}
inline const ::gogo::sr::passage_data& doc_data_ex::passages() const {
  const ::gogo::sr::passage_data* p = passages_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_data_ex.passages)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::passage_data*>(
      &::gogo::sr::_passage_data_default_instance_);
}
inline ::gogo::sr::passage_data* doc_data_ex::mutable_passages() {
  set_has_passages();
  if (passages_ == NULL) {
    passages_ = new ::gogo::sr::passage_data;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_data_ex.passages)
  return passages_;
}
inline ::gogo::sr::passage_data* doc_data_ex::release_passages() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_data_ex.passages)
  clear_has_passages();
  ::gogo::sr::passage_data* temp = passages_;
  passages_ = NULL;
  return temp;
}
inline void doc_data_ex::set_allocated_passages(::gogo::sr::passage_data* passages) {
  delete passages_;
  passages_ = passages;
  if (passages) {
    set_has_passages();
  } else {
    clear_has_passages();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_data_ex.passages)
}

// -------------------------------------------------------------------

// clickrank_data

// required double rank = 1;
inline bool clickrank_data::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void clickrank_data::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void clickrank_data::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void clickrank_data::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline double clickrank_data::rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.clickrank_data.rank)
  return rank_;
}
inline void clickrank_data::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.clickrank_data.rank)
}

// required double attractive = 2;
inline bool clickrank_data::has_attractive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void clickrank_data::set_has_attractive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void clickrank_data::clear_has_attractive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void clickrank_data::clear_attractive() {
  attractive_ = 0;
  clear_has_attractive();
}
inline double clickrank_data::attractive() const {
  // @@protoc_insertion_point(field_get:gogo.sr.clickrank_data.attractive)
  return attractive_;
}
inline void clickrank_data::set_attractive(double value) {
  set_has_attractive();
  attractive_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.clickrank_data.attractive)
}

// required double satisfaction = 3;
inline bool clickrank_data::has_satisfaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void clickrank_data::set_has_satisfaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void clickrank_data::clear_has_satisfaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void clickrank_data::clear_satisfaction() {
  satisfaction_ = 0;
  clear_has_satisfaction();
}
inline double clickrank_data::satisfaction() const {
  // @@protoc_insertion_point(field_get:gogo.sr.clickrank_data.satisfaction)
  return satisfaction_;
}
inline void clickrank_data::set_satisfaction(double value) {
  set_has_satisfaction();
  satisfaction_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.clickrank_data.satisfaction)
}

// required uint32 sessions = 4;
inline bool clickrank_data::has_sessions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void clickrank_data::set_has_sessions() {
  _has_bits_[0] |= 0x00000008u;
}
inline void clickrank_data::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void clickrank_data::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 clickrank_data::sessions() const {
  // @@protoc_insertion_point(field_get:gogo.sr.clickrank_data.sessions)
  return sessions_;
}
inline void clickrank_data::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.clickrank_data.sessions)
}

// -------------------------------------------------------------------

// quality_data

// required float pair_idf_rank = 1;
inline bool quality_data::has_pair_idf_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void quality_data::set_has_pair_idf_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void quality_data::clear_has_pair_idf_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void quality_data::clear_pair_idf_rank() {
  pair_idf_rank_ = 0;
  clear_has_pair_idf_rank();
}
inline float quality_data::pair_idf_rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.quality_data.pair_idf_rank)
  return pair_idf_rank_;
}
inline void quality_data::set_pair_idf_rank(float value) {
  set_has_pair_idf_rank();
  pair_idf_rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.quality_data.pair_idf_rank)
}

// optional float text_rank = 2 [default = 0];
inline bool quality_data::has_text_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void quality_data::set_has_text_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void quality_data::clear_has_text_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void quality_data::clear_text_rank() {
  text_rank_ = 0;
  clear_has_text_rank();
}
inline float quality_data::text_rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.quality_data.text_rank)
  return text_rank_;
}
inline void quality_data::set_text_rank(float value) {
  set_has_text_rank();
  text_rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.quality_data.text_rank)
}

// optional float sq_model_rank = 3;
inline bool quality_data::has_sq_model_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void quality_data::set_has_sq_model_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void quality_data::clear_has_sq_model_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void quality_data::clear_sq_model_rank() {
  sq_model_rank_ = 0;
  clear_has_sq_model_rank();
}
inline float quality_data::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:gogo.sr.quality_data.sq_model_rank)
  return sq_model_rank_;
}
inline void quality_data::set_sq_model_rank(float value) {
  set_has_sq_model_rank();
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.quality_data.sq_model_rank)
}

// -------------------------------------------------------------------

// passage_data

// repeated uint32 zone_id = 1 [packed = true];
inline int passage_data::zone_id_size() const {
  return zone_id_.size();
}
inline void passage_data::clear_zone_id() {
  zone_id_.Clear();
}
inline ::google::protobuf::uint32 passage_data::zone_id(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.passage_data.zone_id)
  return zone_id_.Get(index);
}
inline void passage_data::set_zone_id(int index, ::google::protobuf::uint32 value) {
  zone_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.passage_data.zone_id)
}
inline void passage_data::add_zone_id(::google::protobuf::uint32 value) {
  zone_id_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.passage_data.zone_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
passage_data::zone_id() const {
  // @@protoc_insertion_point(field_list:gogo.sr.passage_data.zone_id)
  return zone_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
passage_data::mutable_zone_id() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.passage_data.zone_id)
  return &zone_id_;
}

// repeated uint32 start = 2 [packed = true];
inline int passage_data::start_size() const {
  return start_.size();
}
inline void passage_data::clear_start() {
  start_.Clear();
}
inline ::google::protobuf::uint32 passage_data::start(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.passage_data.start)
  return start_.Get(index);
}
inline void passage_data::set_start(int index, ::google::protobuf::uint32 value) {
  start_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.passage_data.start)
}
inline void passage_data::add_start(::google::protobuf::uint32 value) {
  start_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.passage_data.start)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
passage_data::start() const {
  // @@protoc_insertion_point(field_list:gogo.sr.passage_data.start)
  return start_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
passage_data::mutable_start() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.passage_data.start)
  return &start_;
}

// repeated uint32 length = 3 [packed = true];
inline int passage_data::length_size() const {
  return length_.size();
}
inline void passage_data::clear_length() {
  length_.Clear();
}
inline ::google::protobuf::uint32 passage_data::length(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.passage_data.length)
  return length_.Get(index);
}
inline void passage_data::set_length(int index, ::google::protobuf::uint32 value) {
  length_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.passage_data.length)
}
inline void passage_data::add_length(::google::protobuf::uint32 value) {
  length_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.passage_data.length)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
passage_data::length() const {
  // @@protoc_insertion_point(field_list:gogo.sr.passage_data.length)
  return length_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
passage_data::mutable_length() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.passage_data.length)
  return &length_;
}

// repeated uint32 rank = 4 [packed = true];
inline int passage_data::rank_size() const {
  return rank_.size();
}
inline void passage_data::clear_rank() {
  rank_.Clear();
}
inline ::google::protobuf::uint32 passage_data::rank(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.passage_data.rank)
  return rank_.Get(index);
}
inline void passage_data::set_rank(int index, ::google::protobuf::uint32 value) {
  rank_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.passage_data.rank)
}
inline void passage_data::add_rank(::google::protobuf::uint32 value) {
  rank_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.passage_data.rank)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
passage_data::rank() const {
  // @@protoc_insertion_point(field_list:gogo.sr.passage_data.rank)
  return rank_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
passage_data::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.passage_data.rank)
  return &rank_;
}

// -------------------------------------------------------------------

// word_posistions

// required uint32 zone_id = 1;
inline bool word_posistions::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void word_posistions::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void word_posistions::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void word_posistions::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 word_posistions::zone_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.word_posistions.zone_id)
  return zone_id_;
}
inline void word_posistions::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.word_posistions.zone_id)
}

// repeated uint32 positions = 2 [packed = true];
inline int word_posistions::positions_size() const {
  return positions_.size();
}
inline void word_posistions::clear_positions() {
  positions_.Clear();
}
inline ::google::protobuf::uint32 word_posistions::positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.word_posistions.positions)
  return positions_.Get(index);
}
inline void word_posistions::set_positions(int index, ::google::protobuf::uint32 value) {
  positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.word_posistions.positions)
}
inline void word_posistions::add_positions(::google::protobuf::uint32 value) {
  positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.word_posistions.positions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
word_posistions::positions() const {
  // @@protoc_insertion_point(field_list:gogo.sr.word_posistions.positions)
  return positions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
word_posistions::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.word_posistions.positions)
  return &positions_;
}

// -------------------------------------------------------------------

// word_posting_list

// required uint32 pos_in_query = 1;
inline bool word_posting_list::has_pos_in_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void word_posting_list::set_has_pos_in_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void word_posting_list::clear_has_pos_in_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void word_posting_list::clear_pos_in_query() {
  pos_in_query_ = 0u;
  clear_has_pos_in_query();
}
inline ::google::protobuf::uint32 word_posting_list::pos_in_query() const {
  // @@protoc_insertion_point(field_get:gogo.sr.word_posting_list.pos_in_query)
  return pos_in_query_;
}
inline void word_posting_list::set_pos_in_query(::google::protobuf::uint32 value) {
  set_has_pos_in_query();
  pos_in_query_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.word_posting_list.pos_in_query)
}

// repeated .gogo.sr.word_posistions w_pos = 2;
inline int word_posting_list::w_pos_size() const {
  return w_pos_.size();
}
inline void word_posting_list::clear_w_pos() {
  w_pos_.Clear();
}
inline const ::gogo::sr::word_posistions& word_posting_list::w_pos(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.word_posting_list.w_pos)
  return w_pos_.Get(index);
}
inline ::gogo::sr::word_posistions* word_posting_list::mutable_w_pos(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.word_posting_list.w_pos)
  return w_pos_.Mutable(index);
}
inline ::gogo::sr::word_posistions* word_posting_list::add_w_pos() {
  // @@protoc_insertion_point(field_add:gogo.sr.word_posting_list.w_pos)
  return w_pos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posistions >*
word_posting_list::mutable_w_pos() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.word_posting_list.w_pos)
  return &w_pos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posistions >&
word_posting_list::w_pos() const {
  // @@protoc_insertion_point(field_list:gogo.sr.word_posting_list.w_pos)
  return w_pos_;
}

// -------------------------------------------------------------------

// text_zone_item

// required string name = 1;
inline bool text_zone_item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void text_zone_item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void text_zone_item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void text_zone_item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& text_zone_item::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.name)
  return name_.GetNoArena();
}
inline void text_zone_item::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.name)
}
#if LANG_CXX11
inline void text_zone_item::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.text_zone_item.name)
}
#endif
inline void text_zone_item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.text_zone_item.name)
}
inline void text_zone_item::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.text_zone_item.name)
}
inline ::std::string* text_zone_item::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.text_zone_item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* text_zone_item::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.text_zone_item.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void text_zone_item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.text_zone_item.name)
}

// required string value = 2;
inline bool text_zone_item::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void text_zone_item::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void text_zone_item::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void text_zone_item::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& text_zone_item::value() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.value)
  return value_.GetNoArena();
}
inline void text_zone_item::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.value)
}
#if LANG_CXX11
inline void text_zone_item::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.text_zone_item.value)
}
#endif
inline void text_zone_item::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.text_zone_item.value)
}
inline void text_zone_item::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.text_zone_item.value)
}
inline ::std::string* text_zone_item::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:gogo.sr.text_zone_item.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* text_zone_item::release_value() {
  // @@protoc_insertion_point(field_release:gogo.sr.text_zone_item.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void text_zone_item::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.text_zone_item.value)
}

// optional string loop_tag = 3;
inline bool text_zone_item::has_loop_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void text_zone_item::set_has_loop_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void text_zone_item::clear_has_loop_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void text_zone_item::clear_loop_tag() {
  loop_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loop_tag();
}
inline const ::std::string& text_zone_item::loop_tag() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.loop_tag)
  return loop_tag_.GetNoArena();
}
inline void text_zone_item::set_loop_tag(const ::std::string& value) {
  set_has_loop_tag();
  loop_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.loop_tag)
}
#if LANG_CXX11
inline void text_zone_item::set_loop_tag(::std::string&& value) {
  set_has_loop_tag();
  loop_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.text_zone_item.loop_tag)
}
#endif
inline void text_zone_item::set_loop_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loop_tag();
  loop_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.text_zone_item.loop_tag)
}
inline void text_zone_item::set_loop_tag(const char* value, size_t size) {
  set_has_loop_tag();
  loop_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.text_zone_item.loop_tag)
}
inline ::std::string* text_zone_item::mutable_loop_tag() {
  set_has_loop_tag();
  // @@protoc_insertion_point(field_mutable:gogo.sr.text_zone_item.loop_tag)
  return loop_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* text_zone_item::release_loop_tag() {
  // @@protoc_insertion_point(field_release:gogo.sr.text_zone_item.loop_tag)
  clear_has_loop_tag();
  return loop_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void text_zone_item::set_allocated_loop_tag(::std::string* loop_tag) {
  if (loop_tag != NULL) {
    set_has_loop_tag();
  } else {
    clear_has_loop_tag();
  }
  loop_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loop_tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.text_zone_item.loop_tag)
}

// optional bool b_marked_flag = 4;
inline bool text_zone_item::has_b_marked_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void text_zone_item::set_has_b_marked_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void text_zone_item::clear_has_b_marked_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void text_zone_item::clear_b_marked_flag() {
  b_marked_flag_ = false;
  clear_has_b_marked_flag();
}
inline bool text_zone_item::b_marked_flag() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.b_marked_flag)
  return b_marked_flag_;
}
inline void text_zone_item::set_b_marked_flag(bool value) {
  set_has_b_marked_flag();
  b_marked_flag_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.b_marked_flag)
}

// optional bool b_visualize_prev = 5;
inline bool text_zone_item::has_b_visualize_prev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void text_zone_item::set_has_b_visualize_prev() {
  _has_bits_[0] |= 0x00000020u;
}
inline void text_zone_item::clear_has_b_visualize_prev() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void text_zone_item::clear_b_visualize_prev() {
  b_visualize_prev_ = false;
  clear_has_b_visualize_prev();
}
inline bool text_zone_item::b_visualize_prev() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.b_visualize_prev)
  return b_visualize_prev_;
}
inline void text_zone_item::set_b_visualize_prev(bool value) {
  set_has_b_visualize_prev();
  b_visualize_prev_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.b_visualize_prev)
}

// optional bool b_visualize_equal_prev = 6;
inline bool text_zone_item::has_b_visualize_equal_prev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void text_zone_item::set_has_b_visualize_equal_prev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void text_zone_item::clear_has_b_visualize_equal_prev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void text_zone_item::clear_b_visualize_equal_prev() {
  b_visualize_equal_prev_ = false;
  clear_has_b_visualize_equal_prev();
}
inline bool text_zone_item::b_visualize_equal_prev() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.b_visualize_equal_prev)
  return b_visualize_equal_prev_;
}
inline void text_zone_item::set_b_visualize_equal_prev(bool value) {
  set_has_b_visualize_equal_prev();
  b_visualize_equal_prev_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.b_visualize_equal_prev)
}

// optional string visualize_tag = 7;
inline bool text_zone_item::has_visualize_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void text_zone_item::set_has_visualize_tag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void text_zone_item::clear_has_visualize_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void text_zone_item::clear_visualize_tag() {
  visualize_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_visualize_tag();
}
inline const ::std::string& text_zone_item::visualize_tag() const {
  // @@protoc_insertion_point(field_get:gogo.sr.text_zone_item.visualize_tag)
  return visualize_tag_.GetNoArena();
}
inline void text_zone_item::set_visualize_tag(const ::std::string& value) {
  set_has_visualize_tag();
  visualize_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.text_zone_item.visualize_tag)
}
#if LANG_CXX11
inline void text_zone_item::set_visualize_tag(::std::string&& value) {
  set_has_visualize_tag();
  visualize_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.text_zone_item.visualize_tag)
}
#endif
inline void text_zone_item::set_visualize_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_visualize_tag();
  visualize_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.text_zone_item.visualize_tag)
}
inline void text_zone_item::set_visualize_tag(const char* value, size_t size) {
  set_has_visualize_tag();
  visualize_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.text_zone_item.visualize_tag)
}
inline ::std::string* text_zone_item::mutable_visualize_tag() {
  set_has_visualize_tag();
  // @@protoc_insertion_point(field_mutable:gogo.sr.text_zone_item.visualize_tag)
  return visualize_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* text_zone_item::release_visualize_tag() {
  // @@protoc_insertion_point(field_release:gogo.sr.text_zone_item.visualize_tag)
  clear_has_visualize_tag();
  return visualize_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void text_zone_item::set_allocated_visualize_tag(::std::string* visualize_tag) {
  if (visualize_tag != NULL) {
    set_has_visualize_tag();
  } else {
    clear_has_visualize_tag();
  }
  visualize_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), visualize_tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.text_zone_item.visualize_tag)
}

// -------------------------------------------------------------------

// num_zone_item

// required string name = 1;
inline bool num_zone_item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void num_zone_item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void num_zone_item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void num_zone_item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& num_zone_item::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.name)
  return name_.GetNoArena();
}
inline void num_zone_item::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.name)
}
#if LANG_CXX11
inline void num_zone_item::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.num_zone_item.name)
}
#endif
inline void num_zone_item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.num_zone_item.name)
}
inline void num_zone_item::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.num_zone_item.name)
}
inline ::std::string* num_zone_item::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.num_zone_item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* num_zone_item::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.num_zone_item.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void num_zone_item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.num_zone_item.name)
}

// required uint64 value = 2;
inline bool num_zone_item::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void num_zone_item::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void num_zone_item::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void num_zone_item::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 num_zone_item::value() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.value)
  return value_;
}
inline void num_zone_item::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.value)
}

// optional bool b_visualize_hex = 3;
inline bool num_zone_item::has_b_visualize_hex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void num_zone_item::set_has_b_visualize_hex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void num_zone_item::clear_has_b_visualize_hex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void num_zone_item::clear_b_visualize_hex() {
  b_visualize_hex_ = false;
  clear_has_b_visualize_hex();
}
inline bool num_zone_item::b_visualize_hex() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_hex)
  return b_visualize_hex_;
}
inline void num_zone_item::set_b_visualize_hex(bool value) {
  set_has_b_visualize_hex();
  b_visualize_hex_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_hex)
}

// optional bool b_visualize_upper_hex = 4;
inline bool num_zone_item::has_b_visualize_upper_hex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void num_zone_item::set_has_b_visualize_upper_hex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void num_zone_item::clear_has_b_visualize_upper_hex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void num_zone_item::clear_b_visualize_upper_hex() {
  b_visualize_upper_hex_ = false;
  clear_has_b_visualize_upper_hex();
}
inline bool num_zone_item::b_visualize_upper_hex() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_upper_hex)
  return b_visualize_upper_hex_;
}
inline void num_zone_item::set_b_visualize_upper_hex(bool value) {
  set_has_b_visualize_upper_hex();
  b_visualize_upper_hex_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_upper_hex)
}

// optional bool b_visualize_signed = 5;
inline bool num_zone_item::has_b_visualize_signed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void num_zone_item::set_has_b_visualize_signed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void num_zone_item::clear_has_b_visualize_signed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void num_zone_item::clear_b_visualize_signed() {
  b_visualize_signed_ = false;
  clear_has_b_visualize_signed();
}
inline bool num_zone_item::b_visualize_signed() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_signed)
  return b_visualize_signed_;
}
inline void num_zone_item::set_b_visualize_signed(bool value) {
  set_has_b_visualize_signed();
  b_visualize_signed_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_signed)
}

// optional bool b_visualize_bits = 6;
inline bool num_zone_item::has_b_visualize_bits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void num_zone_item::set_has_b_visualize_bits() {
  _has_bits_[0] |= 0x00000020u;
}
inline void num_zone_item::clear_has_b_visualize_bits() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void num_zone_item::clear_b_visualize_bits() {
  b_visualize_bits_ = false;
  clear_has_b_visualize_bits();
}
inline bool num_zone_item::b_visualize_bits() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_bits)
  return b_visualize_bits_;
}
inline void num_zone_item::set_b_visualize_bits(bool value) {
  set_has_b_visualize_bits();
  b_visualize_bits_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_bits)
}

// optional bool b_visualize_time_diff = 7;
inline bool num_zone_item::has_b_visualize_time_diff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void num_zone_item::set_has_b_visualize_time_diff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void num_zone_item::clear_has_b_visualize_time_diff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void num_zone_item::clear_b_visualize_time_diff() {
  b_visualize_time_diff_ = false;
  clear_has_b_visualize_time_diff();
}
inline bool num_zone_item::b_visualize_time_diff() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_visualize_time_diff)
  return b_visualize_time_diff_;
}
inline void num_zone_item::set_b_visualize_time_diff(bool value) {
  set_has_b_visualize_time_diff();
  b_visualize_time_diff_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_visualize_time_diff)
}

// optional bool b_age_in_year = 8;
inline bool num_zone_item::has_b_age_in_year() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void num_zone_item::set_has_b_age_in_year() {
  _has_bits_[0] |= 0x00000080u;
}
inline void num_zone_item::clear_has_b_age_in_year() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void num_zone_item::clear_b_age_in_year() {
  b_age_in_year_ = false;
  clear_has_b_age_in_year();
}
inline bool num_zone_item::b_age_in_year() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.b_age_in_year)
  return b_age_in_year_;
}
inline void num_zone_item::set_b_age_in_year(bool value) {
  set_has_b_age_in_year();
  b_age_in_year_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.b_age_in_year)
}

// optional uint32 bit_len = 9;
inline bool num_zone_item::has_bit_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void num_zone_item::set_has_bit_len() {
  _has_bits_[0] |= 0x00000100u;
}
inline void num_zone_item::clear_has_bit_len() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void num_zone_item::clear_bit_len() {
  bit_len_ = 0u;
  clear_has_bit_len();
}
inline ::google::protobuf::uint32 num_zone_item::bit_len() const {
  // @@protoc_insertion_point(field_get:gogo.sr.num_zone_item.bit_len)
  return bit_len_;
}
inline void num_zone_item::set_bit_len(::google::protobuf::uint32 value) {
  set_has_bit_len();
  bit_len_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.num_zone_item.bit_len)
}

// -------------------------------------------------------------------

// real_doc_id_data

// required uint32 db_id = 1;
inline bool real_doc_id_data::has_db_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void real_doc_id_data::set_has_db_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void real_doc_id_data::clear_has_db_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void real_doc_id_data::clear_db_id() {
  db_id_ = 0u;
  clear_has_db_id();
}
inline ::google::protobuf::uint32 real_doc_id_data::db_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.real_doc_id_data.db_id)
  return db_id_;
}
inline void real_doc_id_data::set_db_id(::google::protobuf::uint32 value) {
  set_has_db_id();
  db_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.real_doc_id_data.db_id)
}

// required uint32 db_timestamp = 2;
inline bool real_doc_id_data::has_db_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void real_doc_id_data::set_has_db_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void real_doc_id_data::clear_has_db_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void real_doc_id_data::clear_db_timestamp() {
  db_timestamp_ = 0u;
  clear_has_db_timestamp();
}
inline ::google::protobuf::uint32 real_doc_id_data::db_timestamp() const {
  // @@protoc_insertion_point(field_get:gogo.sr.real_doc_id_data.db_timestamp)
  return db_timestamp_;
}
inline void real_doc_id_data::set_db_timestamp(::google::protobuf::uint32 value) {
  set_has_db_timestamp();
  db_timestamp_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.real_doc_id_data.db_timestamp)
}

// required uint32 doc_id = 3;
inline bool real_doc_id_data::has_doc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void real_doc_id_data::set_has_doc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void real_doc_id_data::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void real_doc_id_data::clear_doc_id() {
  doc_id_ = 0u;
  clear_has_doc_id();
}
inline ::google::protobuf::uint32 real_doc_id_data::doc_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.real_doc_id_data.doc_id)
  return doc_id_;
}
inline void real_doc_id_data::set_doc_id(::google::protobuf::uint32 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.real_doc_id_data.doc_id)
}

// -------------------------------------------------------------------

// doc_zone

// optional string name = 1;
inline bool doc_zone::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void doc_zone::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void doc_zone::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void doc_zone::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& doc_zone::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_zone.name)
  return name_.GetNoArena();
}
inline void doc_zone::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.name)
}
#if LANG_CXX11
inline void doc_zone::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_zone.name)
}
#endif
inline void doc_zone::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_zone.name)
}
inline void doc_zone::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_zone.name)
}
inline ::std::string* doc_zone::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_zone.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_zone::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_zone.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_zone::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_zone.name)
}

// optional string mode = 2;
inline bool doc_zone::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void doc_zone::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void doc_zone::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void doc_zone::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mode();
}
inline const ::std::string& doc_zone::mode() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_zone.mode)
  return mode_.GetNoArena();
}
inline void doc_zone::set_mode(const ::std::string& value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.mode)
}
#if LANG_CXX11
inline void doc_zone::set_mode(::std::string&& value) {
  set_has_mode();
  mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_zone.mode)
}
#endif
inline void doc_zone::set_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_zone.mode)
}
inline void doc_zone::set_mode(const char* value, size_t size) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_zone.mode)
}
inline ::std::string* doc_zone::mutable_mode() {
  set_has_mode();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_zone.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_zone::release_mode() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_zone.mode)
  clear_has_mode();
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_zone::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    set_has_mode();
  } else {
    clear_has_mode();
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_zone.mode)
}

// optional string text = 3;
inline bool doc_zone::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void doc_zone::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void doc_zone::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void doc_zone::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& doc_zone::text() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_zone.text)
  return text_.GetNoArena();
}
inline void doc_zone::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.text)
}
#if LANG_CXX11
inline void doc_zone::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_zone.text)
}
#endif
inline void doc_zone::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_zone.text)
}
inline void doc_zone::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_zone.text)
}
inline ::std::string* doc_zone::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_zone.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_zone::release_text() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_zone.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_zone::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_zone.text)
}

// repeated string sentences = 4;
inline int doc_zone::sentences_size() const {
  return sentences_.size();
}
inline void doc_zone::clear_sentences() {
  sentences_.Clear();
}
inline const ::std::string& doc_zone::sentences(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_zone.sentences)
  return sentences_.Get(index);
}
inline ::std::string* doc_zone::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_zone.sentences)
  return sentences_.Mutable(index);
}
inline void doc_zone::set_sentences(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.sentences)
  sentences_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void doc_zone::set_sentences(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.doc_zone.sentences)
  sentences_.Mutable(index)->assign(std::move(value));
}
#endif
inline void doc_zone::set_sentences(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sentences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_zone.sentences)
}
inline void doc_zone::set_sentences(int index, const char* value, size_t size) {
  sentences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_zone.sentences)
}
inline ::std::string* doc_zone::add_sentences() {
  // @@protoc_insertion_point(field_add_mutable:gogo.sr.doc_zone.sentences)
  return sentences_.Add();
}
inline void doc_zone::add_sentences(const ::std::string& value) {
  sentences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.sr.doc_zone.sentences)
}
#if LANG_CXX11
inline void doc_zone::add_sentences(::std::string&& value) {
  sentences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.sr.doc_zone.sentences)
}
#endif
inline void doc_zone::add_sentences(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sentences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.sr.doc_zone.sentences)
}
inline void doc_zone::add_sentences(const char* value, size_t size) {
  sentences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.sr.doc_zone.sentences)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
doc_zone::sentences() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_zone.sentences)
  return sentences_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
doc_zone::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_zone.sentences)
  return &sentences_;
}

// -------------------------------------------------------------------

// doc_dump

// repeated .gogo.sr.doc_zone zones = 1;
inline int doc_dump::zones_size() const {
  return zones_.size();
}
inline void doc_dump::clear_zones() {
  zones_.Clear();
}
inline const ::gogo::sr::doc_zone& doc_dump::zones(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_dump.zones)
  return zones_.Get(index);
}
inline ::gogo::sr::doc_zone* doc_dump::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_dump.zones)
  return zones_.Mutable(index);
}
inline ::gogo::sr::doc_zone* doc_dump::add_zones() {
  // @@protoc_insertion_point(field_add:gogo.sr.doc_dump.zones)
  return zones_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_zone >*
doc_dump::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_dump.zones)
  return &zones_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_zone >&
doc_dump::zones() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_dump.zones)
  return zones_;
}

// -------------------------------------------------------------------

// doc_item

// required uint32 doc_id = 1;
inline bool doc_item::has_doc_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void doc_item::set_has_doc_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void doc_item::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void doc_item::clear_doc_id() {
  doc_id_ = 0u;
  clear_has_doc_id();
}
inline ::google::protobuf::uint32 doc_item::doc_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.doc_id)
  return doc_id_;
}
inline void doc_item::set_doc_id(::google::protobuf::uint32 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.doc_id)
}

// required uint32 num = 2;
inline bool doc_item::has_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void doc_item::set_has_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void doc_item::clear_has_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void doc_item::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 doc_item::num() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.num)
  return num_;
}
inline void doc_item::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.num)
}

// optional string last_date = 3;
inline bool doc_item::has_last_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void doc_item::set_has_last_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void doc_item::clear_has_last_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void doc_item::clear_last_date() {
  last_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_date();
}
inline const ::std::string& doc_item::last_date() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.last_date)
  return last_date_.GetNoArena();
}
inline void doc_item::set_last_date(const ::std::string& value) {
  set_has_last_date();
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.last_date)
}
#if LANG_CXX11
inline void doc_item::set_last_date(::std::string&& value) {
  set_has_last_date();
  last_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.last_date)
}
#endif
inline void doc_item::set_last_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_date();
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.last_date)
}
inline void doc_item::set_last_date(const char* value, size_t size) {
  set_has_last_date();
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.last_date)
}
inline ::std::string* doc_item::mutable_last_date() {
  set_has_last_date();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.last_date)
  return last_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_item::release_last_date() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.last_date)
  clear_has_last_date();
  return last_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_item::set_allocated_last_date(::std::string* last_date) {
  if (last_date != NULL) {
    set_has_last_date();
  } else {
    clear_has_last_date();
  }
  last_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_date);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.last_date)
}

// optional double weight = 4;
inline bool doc_item::has_weight() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void doc_item::set_has_weight() {
  _has_bits_[0] |= 0x00008000u;
}
inline void doc_item::clear_has_weight() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void doc_item::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline double doc_item::weight() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.weight)
  return weight_;
}
inline void doc_item::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.weight)
}

// optional uint32 group_size = 5;
inline bool doc_item::has_group_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void doc_item::set_has_group_size() {
  _has_bits_[0] |= 0x00080000u;
}
inline void doc_item::clear_has_group_size() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void doc_item::clear_group_size() {
  group_size_ = 0u;
  clear_has_group_size();
}
inline ::google::protobuf::uint32 doc_item::group_size() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.group_size)
  return group_size_;
}
inline void doc_item::set_group_size(::google::protobuf::uint32 value) {
  set_has_group_size();
  group_size_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.group_size)
}

// optional bool spam = 6;
inline bool doc_item::has_spam() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void doc_item::set_has_spam() {
  _has_bits_[0] |= 0x00800000u;
}
inline void doc_item::clear_has_spam() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void doc_item::clear_spam() {
  spam_ = false;
  clear_has_spam();
}
inline bool doc_item::spam() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.spam)
  return spam_;
}
inline void doc_item::set_spam(bool value) {
  set_has_spam();
  spam_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.spam)
}

// optional int64 c1 = 7;
inline bool doc_item::has_c1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void doc_item::set_has_c1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void doc_item::clear_has_c1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void doc_item::clear_c1() {
  c1_ = GOOGLE_LONGLONG(0);
  clear_has_c1();
}
inline ::google::protobuf::int64 doc_item::c1() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c1)
  return c1_;
}
inline void doc_item::set_c1(::google::protobuf::int64 value) {
  set_has_c1();
  c1_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c1)
}

// optional int64 c2 = 8;
inline bool doc_item::has_c2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void doc_item::set_has_c2() {
  _has_bits_[0] |= 0x00020000u;
}
inline void doc_item::clear_has_c2() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void doc_item::clear_c2() {
  c2_ = GOOGLE_LONGLONG(0);
  clear_has_c2();
}
inline ::google::protobuf::int64 doc_item::c2() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c2)
  return c2_;
}
inline void doc_item::set_c2(::google::protobuf::int64 value) {
  set_has_c2();
  c2_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c2)
}

// optional int64 c3 = 9;
inline bool doc_item::has_c3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void doc_item::set_has_c3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void doc_item::clear_has_c3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void doc_item::clear_c3() {
  c3_ = GOOGLE_LONGLONG(0);
  clear_has_c3();
}
inline ::google::protobuf::int64 doc_item::c3() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c3)
  return c3_;
}
inline void doc_item::set_c3(::google::protobuf::int64 value) {
  set_has_c3();
  c3_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c3)
}

// optional .gogo.sr.snippet_item snip = 10;
inline bool doc_item::has_snip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void doc_item::set_has_snip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void doc_item::clear_has_snip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void doc_item::clear_snip() {
  if (snip_ != NULL) snip_->::gogo::sr::snippet_item::Clear();
  clear_has_snip();
}
inline const ::gogo::sr::snippet_item& doc_item::snip() const {
  const ::gogo::sr::snippet_item* p = snip_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.snip)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::snippet_item*>(
      &::gogo::sr::_snippet_item_default_instance_);
}
inline ::gogo::sr::snippet_item* doc_item::mutable_snip() {
  set_has_snip();
  if (snip_ == NULL) {
    snip_ = new ::gogo::sr::snippet_item;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.snip)
  return snip_;
}
inline ::gogo::sr::snippet_item* doc_item::release_snip() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.snip)
  clear_has_snip();
  ::gogo::sr::snippet_item* temp = snip_;
  snip_ = NULL;
  return temp;
}
inline void doc_item::set_allocated_snip(::gogo::sr::snippet_item* snip) {
  delete snip_;
  snip_ = snip;
  if (snip) {
    set_has_snip();
  } else {
    clear_has_snip();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.snip)
}

// optional .gogo.sr.doc_data_ex data_ex = 11;
inline bool doc_item::has_data_ex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void doc_item::set_has_data_ex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void doc_item::clear_has_data_ex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void doc_item::clear_data_ex() {
  if (data_ex_ != NULL) data_ex_->::gogo::sr::doc_data_ex::Clear();
  clear_has_data_ex();
}
inline const ::gogo::sr::doc_data_ex& doc_item::data_ex() const {
  const ::gogo::sr::doc_data_ex* p = data_ex_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.data_ex)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::doc_data_ex*>(
      &::gogo::sr::_doc_data_ex_default_instance_);
}
inline ::gogo::sr::doc_data_ex* doc_item::mutable_data_ex() {
  set_has_data_ex();
  if (data_ex_ == NULL) {
    data_ex_ = new ::gogo::sr::doc_data_ex;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.data_ex)
  return data_ex_;
}
inline ::gogo::sr::doc_data_ex* doc_item::release_data_ex() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.data_ex)
  clear_has_data_ex();
  ::gogo::sr::doc_data_ex* temp = data_ex_;
  data_ex_ = NULL;
  return temp;
}
inline void doc_item::set_allocated_data_ex(::gogo::sr::doc_data_ex* data_ex) {
  delete data_ex_;
  data_ex_ = data_ex;
  if (data_ex) {
    set_has_data_ex();
  } else {
    clear_has_data_ex();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.data_ex)
}

// repeated .gogo.sr.word_posting_list snip_hl = 12;
inline int doc_item::snip_hl_size() const {
  return snip_hl_.size();
}
inline void doc_item::clear_snip_hl() {
  snip_hl_.Clear();
}
inline const ::gogo::sr::word_posting_list& doc_item::snip_hl(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.snip_hl)
  return snip_hl_.Get(index);
}
inline ::gogo::sr::word_posting_list* doc_item::mutable_snip_hl(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.snip_hl)
  return snip_hl_.Mutable(index);
}
inline ::gogo::sr::word_posting_list* doc_item::add_snip_hl() {
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.snip_hl)
  return snip_hl_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posting_list >*
doc_item::mutable_snip_hl() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_item.snip_hl)
  return &snip_hl_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::word_posting_list >&
doc_item::snip_hl() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_item.snip_hl)
  return snip_hl_;
}

// repeated .gogo.sr.num_zone_item num_zone_values = 13;
inline int doc_item::num_zone_values_size() const {
  return num_zone_values_.size();
}
inline void doc_item::clear_num_zone_values() {
  num_zone_values_.Clear();
}
inline const ::gogo::sr::num_zone_item& doc_item::num_zone_values(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.num_zone_values)
  return num_zone_values_.Get(index);
}
inline ::gogo::sr::num_zone_item* doc_item::mutable_num_zone_values(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.num_zone_values)
  return num_zone_values_.Mutable(index);
}
inline ::gogo::sr::num_zone_item* doc_item::add_num_zone_values() {
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.num_zone_values)
  return num_zone_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::num_zone_item >*
doc_item::mutable_num_zone_values() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_item.num_zone_values)
  return &num_zone_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::num_zone_item >&
doc_item::num_zone_values() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_item.num_zone_values)
  return num_zone_values_;
}

// repeated .gogo.sr.text_zone_item text_zone_values = 14;
inline int doc_item::text_zone_values_size() const {
  return text_zone_values_.size();
}
inline void doc_item::clear_text_zone_values() {
  text_zone_values_.Clear();
}
inline const ::gogo::sr::text_zone_item& doc_item::text_zone_values(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.text_zone_values)
  return text_zone_values_.Get(index);
}
inline ::gogo::sr::text_zone_item* doc_item::mutable_text_zone_values(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.text_zone_values)
  return text_zone_values_.Mutable(index);
}
inline ::gogo::sr::text_zone_item* doc_item::add_text_zone_values() {
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.text_zone_values)
  return text_zone_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::text_zone_item >*
doc_item::mutable_text_zone_values() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_item.text_zone_values)
  return &text_zone_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::text_zone_item >&
doc_item::text_zone_values() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_item.text_zone_values)
  return text_zone_values_;
}

// repeated string track_list = 15;
inline int doc_item::track_list_size() const {
  return track_list_.size();
}
inline void doc_item::clear_track_list() {
  track_list_.Clear();
}
inline const ::std::string& doc_item::track_list(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.track_list)
  return track_list_.Get(index);
}
inline ::std::string* doc_item::mutable_track_list(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.track_list)
  return track_list_.Mutable(index);
}
inline void doc_item::set_track_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.track_list)
  track_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void doc_item::set_track_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.track_list)
  track_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void doc_item::set_track_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.track_list)
}
inline void doc_item::set_track_list(int index, const char* value, size_t size) {
  track_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.track_list)
}
inline ::std::string* doc_item::add_track_list() {
  // @@protoc_insertion_point(field_add_mutable:gogo.sr.doc_item.track_list)
  return track_list_.Add();
}
inline void doc_item::add_track_list(const ::std::string& value) {
  track_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.track_list)
}
#if LANG_CXX11
inline void doc_item::add_track_list(::std::string&& value) {
  track_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.sr.doc_item.track_list)
}
#endif
inline void doc_item::add_track_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.sr.doc_item.track_list)
}
inline void doc_item::add_track_list(const char* value, size_t size) {
  track_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.sr.doc_item.track_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
doc_item::track_list() const {
  // @@protoc_insertion_point(field_list:gogo.sr.doc_item.track_list)
  return track_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
doc_item::mutable_track_list() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.doc_item.track_list)
  return &track_list_;
}

// optional string body = 16;
inline bool doc_item::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void doc_item::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void doc_item::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void doc_item::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& doc_item::body() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.body)
  return body_.GetNoArena();
}
inline void doc_item::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.body)
}
#if LANG_CXX11
inline void doc_item::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.body)
}
#endif
inline void doc_item::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.body)
}
inline void doc_item::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.body)
}
inline ::std::string* doc_item::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_item::release_body() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_item::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.body)
}

// optional .gogo.sr.real_doc_id_data real_doc_id = 17;
inline bool doc_item::has_real_doc_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void doc_item::set_has_real_doc_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void doc_item::clear_has_real_doc_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void doc_item::clear_real_doc_id() {
  if (real_doc_id_ != NULL) real_doc_id_->::gogo::sr::real_doc_id_data::Clear();
  clear_has_real_doc_id();
}
inline const ::gogo::sr::real_doc_id_data& doc_item::real_doc_id() const {
  const ::gogo::sr::real_doc_id_data* p = real_doc_id_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.real_doc_id)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::real_doc_id_data*>(
      &::gogo::sr::_real_doc_id_data_default_instance_);
}
inline ::gogo::sr::real_doc_id_data* doc_item::mutable_real_doc_id() {
  set_has_real_doc_id();
  if (real_doc_id_ == NULL) {
    real_doc_id_ = new ::gogo::sr::real_doc_id_data;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.real_doc_id)
  return real_doc_id_;
}
inline ::gogo::sr::real_doc_id_data* doc_item::release_real_doc_id() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.real_doc_id)
  clear_has_real_doc_id();
  ::gogo::sr::real_doc_id_data* temp = real_doc_id_;
  real_doc_id_ = NULL;
  return temp;
}
inline void doc_item::set_allocated_real_doc_id(::gogo::sr::real_doc_id_data* real_doc_id) {
  delete real_doc_id_;
  real_doc_id_ = real_doc_id;
  if (real_doc_id) {
    set_has_real_doc_id();
  } else {
    clear_has_real_doc_id();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.real_doc_id)
}

// optional uint64 c4 = 18;
inline bool doc_item::has_c4() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void doc_item::set_has_c4() {
  _has_bits_[0] |= 0x00200000u;
}
inline void doc_item::clear_has_c4() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void doc_item::clear_c4() {
  c4_ = GOOGLE_ULONGLONG(0);
  clear_has_c4();
}
inline ::google::protobuf::uint64 doc_item::c4() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c4)
  return c4_;
}
inline void doc_item::set_c4(::google::protobuf::uint64 value) {
  set_has_c4();
  c4_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c4)
}

// optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 19;
inline bool doc_item::has_site_links() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void doc_item::set_has_site_links() {
  _has_bits_[0] |= 0x00000800u;
}
inline void doc_item::clear_has_site_links() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void doc_item::clear_site_links() {
  if (site_links_ != NULL) site_links_->::ru::mail::go::snippetdata::parser::SiteLinks::Clear();
  clear_has_site_links();
}
inline const ::ru::mail::go::snippetdata::parser::SiteLinks& doc_item::site_links() const {
  const ::ru::mail::go::snippetdata::parser::SiteLinks* p = site_links_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.site_links)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::SiteLinks*>(
      &::ru::mail::go::snippetdata::parser::_SiteLinks_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::SiteLinks* doc_item::mutable_site_links() {
  set_has_site_links();
  if (site_links_ == NULL) {
    site_links_ = new ::ru::mail::go::snippetdata::parser::SiteLinks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.site_links)
  return site_links_;
}
inline ::ru::mail::go::snippetdata::parser::SiteLinks* doc_item::release_site_links() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.site_links)
  clear_has_site_links();
  ::ru::mail::go::snippetdata::parser::SiteLinks* temp = site_links_;
  site_links_ = NULL;
  return temp;
}
inline void doc_item::set_allocated_site_links(::ru::mail::go::snippetdata::parser::SiteLinks* site_links) {
  delete site_links_;
  site_links_ = site_links;
  if (site_links) {
    set_has_site_links();
  } else {
    clear_has_site_links();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.site_links)
}

// optional .ru.mail.go.snippetdata.parser.ValueComposite extra_snippet_data = 20;
inline bool doc_item::has_extra_snippet_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void doc_item::set_has_extra_snippet_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void doc_item::clear_has_extra_snippet_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void doc_item::clear_extra_snippet_data() {
  if (extra_snippet_data_ != NULL) extra_snippet_data_->::ru::mail::go::snippetdata::parser::ValueComposite::Clear();
  clear_has_extra_snippet_data();
}
inline const ::ru::mail::go::snippetdata::parser::ValueComposite& doc_item::extra_snippet_data() const {
  const ::ru::mail::go::snippetdata::parser::ValueComposite* p = extra_snippet_data_;
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.extra_snippet_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::ValueComposite*>(
      &::ru::mail::go::snippetdata::parser::_ValueComposite_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::ValueComposite* doc_item::mutable_extra_snippet_data() {
  set_has_extra_snippet_data();
  if (extra_snippet_data_ == NULL) {
    extra_snippet_data_ = new ::ru::mail::go::snippetdata::parser::ValueComposite;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.extra_snippet_data)
  return extra_snippet_data_;
}
inline ::ru::mail::go::snippetdata::parser::ValueComposite* doc_item::release_extra_snippet_data() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.extra_snippet_data)
  clear_has_extra_snippet_data();
  ::ru::mail::go::snippetdata::parser::ValueComposite* temp = extra_snippet_data_;
  extra_snippet_data_ = NULL;
  return temp;
}
inline void doc_item::set_allocated_extra_snippet_data(::ru::mail::go::snippetdata::parser::ValueComposite* extra_snippet_data) {
  delete extra_snippet_data_;
  extra_snippet_data_ = extra_snippet_data;
  if (extra_snippet_data) {
    set_has_extra_snippet_data();
  } else {
    clear_has_extra_snippet_data();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.extra_snippet_data)
}

// optional bool is_navig = 21;
inline bool doc_item::has_is_navig() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void doc_item::set_has_is_navig() {
  _has_bits_[0] |= 0x01000000u;
}
inline void doc_item::clear_has_is_navig() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void doc_item::clear_is_navig() {
  is_navig_ = false;
  clear_has_is_navig();
}
inline bool doc_item::is_navig() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.is_navig)
  return is_navig_;
}
inline void doc_item::set_is_navig(bool value) {
  set_has_is_navig();
  is_navig_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.is_navig)
}

// optional uint32 required_position = 22;
inline bool doc_item::has_required_position() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void doc_item::set_has_required_position() {
  _has_bits_[0] |= 0x00100000u;
}
inline void doc_item::clear_has_required_position() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void doc_item::clear_required_position() {
  required_position_ = 0u;
  clear_has_required_position();
}
inline ::google::protobuf::uint32 doc_item::required_position() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.required_position)
  return required_position_;
}
inline void doc_item::set_required_position(::google::protobuf::uint32 value) {
  set_has_required_position();
  required_position_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.required_position)
}

// optional .gogo.sr.domain_group_type domain_group = 23 [default = NONE];
inline bool doc_item::has_domain_group() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void doc_item::set_has_domain_group() {
  _has_bits_[0] |= 0x00400000u;
}
inline void doc_item::clear_has_domain_group() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void doc_item::clear_domain_group() {
  domain_group_ = 0;
  clear_has_domain_group();
}
inline ::gogo::sr::domain_group_type doc_item::domain_group() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.domain_group)
  return static_cast< ::gogo::sr::domain_group_type >(domain_group_);
}
inline void doc_item::set_domain_group(::gogo::sr::domain_group_type value) {
  assert(::gogo::sr::domain_group_type_IsValid(value));
  set_has_domain_group();
  domain_group_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.domain_group)
}

// optional string rank_trace_feat = 24;
inline bool doc_item::has_rank_trace_feat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void doc_item::set_has_rank_trace_feat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void doc_item::clear_has_rank_trace_feat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void doc_item::clear_rank_trace_feat() {
  rank_trace_feat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rank_trace_feat();
}
inline const ::std::string& doc_item::rank_trace_feat() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.rank_trace_feat)
  return rank_trace_feat_.GetNoArena();
}
inline void doc_item::set_rank_trace_feat(const ::std::string& value) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.rank_trace_feat)
}
#if LANG_CXX11
inline void doc_item::set_rank_trace_feat(::std::string&& value) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.rank_trace_feat)
}
#endif
inline void doc_item::set_rank_trace_feat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.rank_trace_feat)
}
inline void doc_item::set_rank_trace_feat(const char* value, size_t size) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.rank_trace_feat)
}
inline ::std::string* doc_item::mutable_rank_trace_feat() {
  set_has_rank_trace_feat();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.rank_trace_feat)
  return rank_trace_feat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_item::release_rank_trace_feat() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.rank_trace_feat)
  clear_has_rank_trace_feat();
  return rank_trace_feat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_item::set_allocated_rank_trace_feat(::std::string* rank_trace_feat) {
  if (rank_trace_feat != NULL) {
    set_has_rank_trace_feat();
  } else {
    clear_has_rank_trace_feat();
  }
  rank_trace_feat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rank_trace_feat);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.rank_trace_feat)
}

// optional bool is_mergable = 25 [default = true];
inline bool doc_item::has_is_mergable() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void doc_item::set_has_is_mergable() {
  _has_bits_[1] |= 0x00000002u;
}
inline void doc_item::clear_has_is_mergable() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void doc_item::clear_is_mergable() {
  is_mergable_ = true;
  clear_has_is_mergable();
}
inline bool doc_item::is_mergable() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.is_mergable)
  return is_mergable_;
}
inline void doc_item::set_is_mergable(bool value) {
  set_has_is_mergable();
  is_mergable_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.is_mergable)
}

// optional string index_version = 26;
inline bool doc_item::has_index_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void doc_item::set_has_index_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void doc_item::clear_has_index_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void doc_item::clear_index_version() {
  index_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_index_version();
}
inline const ::std::string& doc_item::index_version() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.index_version)
  return index_version_.GetNoArena();
}
inline void doc_item::set_index_version(const ::std::string& value) {
  set_has_index_version();
  index_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.index_version)
}
#if LANG_CXX11
inline void doc_item::set_index_version(::std::string&& value) {
  set_has_index_version();
  index_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.index_version)
}
#endif
inline void doc_item::set_index_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_index_version();
  index_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.index_version)
}
inline void doc_item::set_index_version(const char* value, size_t size) {
  set_has_index_version();
  index_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.index_version)
}
inline ::std::string* doc_item::mutable_index_version() {
  set_has_index_version();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.index_version)
  return index_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_item::release_index_version() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.index_version)
  clear_has_index_version();
  return index_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_item::set_allocated_index_version(::std::string* index_version) {
  if (index_version != NULL) {
    set_has_index_version();
  } else {
    clear_has_index_version();
  }
  index_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_version);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.index_version)
}

// optional string raw_text_ranks = 27;
inline bool doc_item::has_raw_text_ranks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void doc_item::set_has_raw_text_ranks() {
  _has_bits_[0] |= 0x00000010u;
}
inline void doc_item::clear_has_raw_text_ranks() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void doc_item::clear_raw_text_ranks() {
  raw_text_ranks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_text_ranks();
}
inline const ::std::string& doc_item::raw_text_ranks() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.raw_text_ranks)
  return raw_text_ranks_.GetNoArena();
}
inline void doc_item::set_raw_text_ranks(const ::std::string& value) {
  set_has_raw_text_ranks();
  raw_text_ranks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.raw_text_ranks)
}
#if LANG_CXX11
inline void doc_item::set_raw_text_ranks(::std::string&& value) {
  set_has_raw_text_ranks();
  raw_text_ranks_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.raw_text_ranks)
}
#endif
inline void doc_item::set_raw_text_ranks(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_text_ranks();
  raw_text_ranks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.raw_text_ranks)
}
inline void doc_item::set_raw_text_ranks(const char* value, size_t size) {
  set_has_raw_text_ranks();
  raw_text_ranks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.raw_text_ranks)
}
inline ::std::string* doc_item::mutable_raw_text_ranks() {
  set_has_raw_text_ranks();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.raw_text_ranks)
  return raw_text_ranks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_item::release_raw_text_ranks() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.raw_text_ranks)
  clear_has_raw_text_ranks();
  return raw_text_ranks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_item::set_allocated_raw_text_ranks(::std::string* raw_text_ranks) {
  if (raw_text_ranks != NULL) {
    set_has_raw_text_ranks();
  } else {
    clear_has_raw_text_ranks();
  }
  raw_text_ranks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_text_ranks);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.raw_text_ranks)
}

// optional uint64 c5 = 28;
inline bool doc_item::has_c5() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void doc_item::set_has_c5() {
  _has_bits_[0] |= 0x08000000u;
}
inline void doc_item::clear_has_c5() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void doc_item::clear_c5() {
  c5_ = GOOGLE_ULONGLONG(0);
  clear_has_c5();
}
inline ::google::protobuf::uint64 doc_item::c5() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.c5)
  return c5_;
}
inline void doc_item::set_c5(::google::protobuf::uint64 value) {
  set_has_c5();
  c5_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.c5)
}

// optional uint32 snippet_version = 29;
inline bool doc_item::has_snippet_version() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void doc_item::set_has_snippet_version() {
  _has_bits_[0] |= 0x10000000u;
}
inline void doc_item::clear_has_snippet_version() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void doc_item::clear_snippet_version() {
  snippet_version_ = 0u;
  clear_has_snippet_version();
}
inline ::google::protobuf::uint32 doc_item::snippet_version() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.snippet_version)
  return snippet_version_;
}
inline void doc_item::set_snippet_version(::google::protobuf::uint32 value) {
  set_has_snippet_version();
  snippet_version_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.snippet_version)
}

// optional string doc_trace = 30;
inline bool doc_item::has_doc_trace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void doc_item::set_has_doc_trace() {
  _has_bits_[0] |= 0x00000020u;
}
inline void doc_item::clear_has_doc_trace() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void doc_item::clear_doc_trace() {
  doc_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_trace();
}
inline const ::std::string& doc_item::doc_trace() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.doc_trace)
  return doc_trace_.GetNoArena();
}
inline void doc_item::set_doc_trace(const ::std::string& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.doc_trace)
}
#if LANG_CXX11
inline void doc_item::set_doc_trace(::std::string&& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.doc_trace)
}
#endif
inline void doc_item::set_doc_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.doc_trace)
}
inline void doc_item::set_doc_trace(const char* value, size_t size) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.doc_trace)
}
inline ::std::string* doc_item::mutable_doc_trace() {
  set_has_doc_trace();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.doc_trace)
  return doc_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_item::release_doc_trace() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.doc_trace)
  clear_has_doc_trace();
  return doc_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_item::set_allocated_doc_trace(::std::string* doc_trace) {
  if (doc_trace != NULL) {
    set_has_doc_trace();
  } else {
    clear_has_doc_trace();
  }
  doc_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_trace);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.doc_trace)
}

// optional bool could_be_a_group_leader = 31;
inline bool doc_item::has_could_be_a_group_leader() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void doc_item::set_has_could_be_a_group_leader() {
  _has_bits_[0] |= 0x02000000u;
}
inline void doc_item::clear_has_could_be_a_group_leader() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void doc_item::clear_could_be_a_group_leader() {
  could_be_a_group_leader_ = false;
  clear_has_could_be_a_group_leader();
}
inline bool doc_item::could_be_a_group_leader() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.could_be_a_group_leader)
  return could_be_a_group_leader_;
}
inline void doc_item::set_could_be_a_group_leader(bool value) {
  set_has_could_be_a_group_leader();
  could_be_a_group_leader_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.could_be_a_group_leader)
}

// optional fixed32 full_domain_hash = 32;
inline bool doc_item::has_full_domain_hash() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void doc_item::set_has_full_domain_hash() {
  _has_bits_[0] |= 0x20000000u;
}
inline void doc_item::clear_has_full_domain_hash() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void doc_item::clear_full_domain_hash() {
  full_domain_hash_ = 0u;
  clear_has_full_domain_hash();
}
inline ::google::protobuf::uint32 doc_item::full_domain_hash() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.full_domain_hash)
  return full_domain_hash_;
}
inline void doc_item::set_full_domain_hash(::google::protobuf::uint32 value) {
  set_has_full_domain_hash();
  full_domain_hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.full_domain_hash)
}

// optional bytes raw_doc_content = 33;
inline bool doc_item::has_raw_doc_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void doc_item::set_has_raw_doc_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void doc_item::clear_has_raw_doc_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void doc_item::clear_raw_doc_content() {
  raw_doc_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_doc_content();
}
inline const ::std::string& doc_item::raw_doc_content() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.raw_doc_content)
  return raw_doc_content_.GetNoArena();
}
inline void doc_item::set_raw_doc_content(const ::std::string& value) {
  set_has_raw_doc_content();
  raw_doc_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.raw_doc_content)
}
#if LANG_CXX11
inline void doc_item::set_raw_doc_content(::std::string&& value) {
  set_has_raw_doc_content();
  raw_doc_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.raw_doc_content)
}
#endif
inline void doc_item::set_raw_doc_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_doc_content();
  raw_doc_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.raw_doc_content)
}
inline void doc_item::set_raw_doc_content(const void* value, size_t size) {
  set_has_raw_doc_content();
  raw_doc_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.raw_doc_content)
}
inline ::std::string* doc_item::mutable_raw_doc_content() {
  set_has_raw_doc_content();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.raw_doc_content)
  return raw_doc_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_item::release_raw_doc_content() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.raw_doc_content)
  clear_has_raw_doc_content();
  return raw_doc_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_item::set_allocated_raw_doc_content(::std::string* raw_doc_content) {
  if (raw_doc_content != NULL) {
    set_has_raw_doc_content();
  } else {
    clear_has_raw_doc_content();
  }
  raw_doc_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_doc_content);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.raw_doc_content)
}

// optional sfixed32 features_hash = 34;
inline bool doc_item::has_features_hash() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void doc_item::set_has_features_hash() {
  _has_bits_[0] |= 0x40000000u;
}
inline void doc_item::clear_has_features_hash() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void doc_item::clear_features_hash() {
  features_hash_ = 0;
  clear_has_features_hash();
}
inline ::google::protobuf::int32 doc_item::features_hash() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.features_hash)
  return features_hash_;
}
inline void doc_item::set_features_hash(::google::protobuf::int32 value) {
  set_has_features_hash();
  features_hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.features_hash)
}

// optional bool req_pos_mergable = 35 [default = false];
inline bool doc_item::has_req_pos_mergable() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void doc_item::set_has_req_pos_mergable() {
  _has_bits_[0] |= 0x04000000u;
}
inline void doc_item::clear_has_req_pos_mergable() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void doc_item::clear_req_pos_mergable() {
  req_pos_mergable_ = false;
  clear_has_req_pos_mergable();
}
inline bool doc_item::req_pos_mergable() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.req_pos_mergable)
  return req_pos_mergable_;
}
inline void doc_item::set_req_pos_mergable(bool value) {
  set_has_req_pos_mergable();
  req_pos_mergable_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.req_pos_mergable)
}

// optional string doc_url = 36;
inline bool doc_item::has_doc_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void doc_item::set_has_doc_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void doc_item::clear_has_doc_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void doc_item::clear_doc_url() {
  doc_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_url();
}
inline const ::std::string& doc_item::doc_url() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.doc_url)
  return doc_url_.GetNoArena();
}
inline void doc_item::set_doc_url(const ::std::string& value) {
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.doc_url)
}
#if LANG_CXX11
inline void doc_item::set_doc_url(::std::string&& value) {
  set_has_doc_url();
  doc_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.doc_item.doc_url)
}
#endif
inline void doc_item::set_doc_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.doc_item.doc_url)
}
inline void doc_item::set_doc_url(const char* value, size_t size) {
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.doc_item.doc_url)
}
inline ::std::string* doc_item::mutable_doc_url() {
  set_has_doc_url();
  // @@protoc_insertion_point(field_mutable:gogo.sr.doc_item.doc_url)
  return doc_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* doc_item::release_doc_url() {
  // @@protoc_insertion_point(field_release:gogo.sr.doc_item.doc_url)
  clear_has_doc_url();
  return doc_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void doc_item::set_allocated_doc_url(::std::string* doc_url) {
  if (doc_url != NULL) {
    set_has_doc_url();
  } else {
    clear_has_doc_url();
  }
  doc_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_url);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.doc_item.doc_url)
}

// optional bool is_vkmusic_master_copy = 37 [default = false];
inline bool doc_item::has_is_vkmusic_master_copy() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void doc_item::set_has_is_vkmusic_master_copy() {
  _has_bits_[0] |= 0x80000000u;
}
inline void doc_item::clear_has_is_vkmusic_master_copy() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void doc_item::clear_is_vkmusic_master_copy() {
  is_vkmusic_master_copy_ = false;
  clear_has_is_vkmusic_master_copy();
}
inline bool doc_item::is_vkmusic_master_copy() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.is_vkmusic_master_copy)
  return is_vkmusic_master_copy_;
}
inline void doc_item::set_is_vkmusic_master_copy(bool value) {
  set_has_is_vkmusic_master_copy();
  is_vkmusic_master_copy_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.is_vkmusic_master_copy)
}

// optional bool is_vkmusic_release_copy = 38 [default = false];
inline bool doc_item::has_is_vkmusic_release_copy() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void doc_item::set_has_is_vkmusic_release_copy() {
  _has_bits_[1] |= 0x00000001u;
}
inline void doc_item::clear_has_is_vkmusic_release_copy() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void doc_item::clear_is_vkmusic_release_copy() {
  is_vkmusic_release_copy_ = false;
  clear_has_is_vkmusic_release_copy();
}
inline bool doc_item::is_vkmusic_release_copy() const {
  // @@protoc_insertion_point(field_get:gogo.sr.doc_item.is_vkmusic_release_copy)
  return is_vkmusic_release_copy_;
}
inline void doc_item::set_is_vkmusic_release_copy(bool value) {
  set_has_is_vkmusic_release_copy();
  is_vkmusic_release_copy_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.doc_item.is_vkmusic_release_copy)
}

// -------------------------------------------------------------------

// error

// required sint32 error_code = 1;
inline bool error::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void error::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void error::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void error::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 error::error_code() const {
  // @@protoc_insertion_point(field_get:gogo.sr.error.error_code)
  return error_code_;
}
inline void error::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.error.error_code)
}

// optional string error_message = 2;
inline bool error::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void error::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void error::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void error::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& error::error_message() const {
  // @@protoc_insertion_point(field_get:gogo.sr.error.error_message)
  return error_message_.GetNoArena();
}
inline void error::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.error.error_message)
}
#if LANG_CXX11
inline void error::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.error.error_message)
}
#endif
inline void error::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.error.error_message)
}
inline void error::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.error.error_message)
}
inline ::std::string* error::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:gogo.sr.error.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* error::release_error_message() {
  // @@protoc_insertion_point(field_release:gogo.sr.error.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void error::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.error.error_message)
}

// -------------------------------------------------------------------

// integer_counter

// required string name = 1;
inline bool integer_counter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void integer_counter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void integer_counter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void integer_counter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& integer_counter::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.integer_counter.name)
  return name_.GetNoArena();
}
inline void integer_counter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.integer_counter.name)
}
#if LANG_CXX11
inline void integer_counter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.integer_counter.name)
}
#endif
inline void integer_counter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.integer_counter.name)
}
inline void integer_counter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.integer_counter.name)
}
inline ::std::string* integer_counter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.integer_counter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* integer_counter::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.integer_counter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void integer_counter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.integer_counter.name)
}

// required int64 counter = 2;
inline bool integer_counter::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void integer_counter::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void integer_counter::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void integer_counter::clear_counter() {
  counter_ = GOOGLE_LONGLONG(0);
  clear_has_counter();
}
inline ::google::protobuf::int64 integer_counter::counter() const {
  // @@protoc_insertion_point(field_get:gogo.sr.integer_counter.counter)
  return counter_;
}
inline void integer_counter::set_counter(::google::protobuf::int64 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.integer_counter.counter)
}

// -------------------------------------------------------------------

// double_counter

// required string name = 1;
inline bool double_counter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void double_counter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void double_counter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void double_counter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& double_counter::name() const {
  // @@protoc_insertion_point(field_get:gogo.sr.double_counter.name)
  return name_.GetNoArena();
}
inline void double_counter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.double_counter.name)
}
#if LANG_CXX11
inline void double_counter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.double_counter.name)
}
#endif
inline void double_counter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.double_counter.name)
}
inline void double_counter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.double_counter.name)
}
inline ::std::string* double_counter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.sr.double_counter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* double_counter::release_name() {
  // @@protoc_insertion_point(field_release:gogo.sr.double_counter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void double_counter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.double_counter.name)
}

// required double counter = 2;
inline bool double_counter::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void double_counter::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void double_counter::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void double_counter::clear_counter() {
  counter_ = 0;
  clear_has_counter();
}
inline double double_counter::counter() const {
  // @@protoc_insertion_point(field_get:gogo.sr.double_counter.counter)
  return counter_;
}
inline void double_counter::set_counter(double value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.double_counter.counter)
}

// -------------------------------------------------------------------

// statistic

// repeated uint32 porno_stats = 1 [packed = true];
inline int statistic::porno_stats_size() const {
  return porno_stats_.size();
}
inline void statistic::clear_porno_stats() {
  porno_stats_.Clear();
}
inline ::google::protobuf::uint32 statistic::porno_stats(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.porno_stats)
  return porno_stats_.Get(index);
}
inline void statistic::set_porno_stats(int index, ::google::protobuf::uint32 value) {
  porno_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.porno_stats)
}
inline void statistic::add_porno_stats(::google::protobuf::uint32 value) {
  porno_stats_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.porno_stats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
statistic::porno_stats() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.porno_stats)
  return porno_stats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
statistic::mutable_porno_stats() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.porno_stats)
  return &porno_stats_;
}

// repeated uint32 geo_list = 2 [packed = true];
inline int statistic::geo_list_size() const {
  return geo_list_.size();
}
inline void statistic::clear_geo_list() {
  geo_list_.Clear();
}
inline ::google::protobuf::uint32 statistic::geo_list(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.geo_list)
  return geo_list_.Get(index);
}
inline void statistic::set_geo_list(int index, ::google::protobuf::uint32 value) {
  geo_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.geo_list)
}
inline void statistic::add_geo_list(::google::protobuf::uint32 value) {
  geo_list_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.geo_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
statistic::geo_list() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.geo_list)
  return geo_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
statistic::mutable_geo_list() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.geo_list)
  return &geo_list_;
}

// repeated uint32 porno2_stats = 3 [packed = true];
inline int statistic::porno2_stats_size() const {
  return porno2_stats_.size();
}
inline void statistic::clear_porno2_stats() {
  porno2_stats_.Clear();
}
inline ::google::protobuf::uint32 statistic::porno2_stats(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.porno2_stats)
  return porno2_stats_.Get(index);
}
inline void statistic::set_porno2_stats(int index, ::google::protobuf::uint32 value) {
  porno2_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.porno2_stats)
}
inline void statistic::add_porno2_stats(::google::protobuf::uint32 value) {
  porno2_stats_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.porno2_stats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
statistic::porno2_stats() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.porno2_stats)
  return porno2_stats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
statistic::mutable_porno2_stats() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.porno2_stats)
  return &porno2_stats_;
}

// repeated uint32 porno_prob_stats = 4 [packed = true];
inline int statistic::porno_prob_stats_size() const {
  return porno_prob_stats_.size();
}
inline void statistic::clear_porno_prob_stats() {
  porno_prob_stats_.Clear();
}
inline ::google::protobuf::uint32 statistic::porno_prob_stats(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.porno_prob_stats)
  return porno_prob_stats_.Get(index);
}
inline void statistic::set_porno_prob_stats(int index, ::google::protobuf::uint32 value) {
  porno_prob_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.porno_prob_stats)
}
inline void statistic::add_porno_prob_stats(::google::protobuf::uint32 value) {
  porno_prob_stats_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.porno_prob_stats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
statistic::porno_prob_stats() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.porno_prob_stats)
  return porno_prob_stats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
statistic::mutable_porno_prob_stats() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.porno_prob_stats)
  return &porno_prob_stats_;
}

// repeated .gogo.sr.integer_counter max_integer_counter = 100;
inline int statistic::max_integer_counter_size() const {
  return max_integer_counter_.size();
}
inline void statistic::clear_max_integer_counter() {
  max_integer_counter_.Clear();
}
inline const ::gogo::sr::integer_counter& statistic::max_integer_counter(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.max_integer_counter)
  return max_integer_counter_.Get(index);
}
inline ::gogo::sr::integer_counter* statistic::mutable_max_integer_counter(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.statistic.max_integer_counter)
  return max_integer_counter_.Mutable(index);
}
inline ::gogo::sr::integer_counter* statistic::add_max_integer_counter() {
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.max_integer_counter)
  return max_integer_counter_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >*
statistic::mutable_max_integer_counter() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.max_integer_counter)
  return &max_integer_counter_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >&
statistic::max_integer_counter() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.max_integer_counter)
  return max_integer_counter_;
}

// repeated .gogo.sr.integer_counter integer_counter = 101;
inline int statistic::integer_counter_size() const {
  return integer_counter_.size();
}
inline void statistic::clear_integer_counter() {
  integer_counter_.Clear();
}
inline const ::gogo::sr::integer_counter& statistic::integer_counter(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.integer_counter)
  return integer_counter_.Get(index);
}
inline ::gogo::sr::integer_counter* statistic::mutable_integer_counter(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.statistic.integer_counter)
  return integer_counter_.Mutable(index);
}
inline ::gogo::sr::integer_counter* statistic::add_integer_counter() {
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.integer_counter)
  return integer_counter_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >*
statistic::mutable_integer_counter() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.integer_counter)
  return &integer_counter_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::integer_counter >&
statistic::integer_counter() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.integer_counter)
  return integer_counter_;
}

// repeated .gogo.sr.double_counter double_counter = 102;
inline int statistic::double_counter_size() const {
  return double_counter_.size();
}
inline void statistic::clear_double_counter() {
  double_counter_.Clear();
}
inline const ::gogo::sr::double_counter& statistic::double_counter(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.double_counter)
  return double_counter_.Get(index);
}
inline ::gogo::sr::double_counter* statistic::mutable_double_counter(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.statistic.double_counter)
  return double_counter_.Mutable(index);
}
inline ::gogo::sr::double_counter* statistic::add_double_counter() {
  // @@protoc_insertion_point(field_add:gogo.sr.statistic.double_counter)
  return double_counter_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::double_counter >*
statistic::mutable_double_counter() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.statistic.double_counter)
  return &double_counter_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::double_counter >&
statistic::double_counter() const {
  // @@protoc_insertion_point(field_list:gogo.sr.statistic.double_counter)
  return double_counter_;
}

// optional bool metasearch_used = 103;
inline bool statistic::has_metasearch_used() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void statistic::set_has_metasearch_used() {
  _has_bits_[0] |= 0x00000001u;
}
inline void statistic::clear_has_metasearch_used() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void statistic::clear_metasearch_used() {
  metasearch_used_ = false;
  clear_has_metasearch_used();
}
inline bool statistic::metasearch_used() const {
  // @@protoc_insertion_point(field_get:gogo.sr.statistic.metasearch_used)
  return metasearch_used_;
}
inline void statistic::set_metasearch_used(bool value) {
  set_has_metasearch_used();
  metasearch_used_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.statistic.metasearch_used)
}

// -------------------------------------------------------------------

// trait

// required int32 id = 1;
inline bool trait::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void trait::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void trait::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void trait::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 trait::id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.trait.id)
  return id_;
}
inline void trait::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.trait.id)
}

// required bytes data = 2;
inline bool trait::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void trait::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void trait::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void trait::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& trait::data() const {
  // @@protoc_insertion_point(field_get:gogo.sr.trait.data)
  return data_.GetNoArena();
}
inline void trait::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.trait.data)
}
#if LANG_CXX11
inline void trait::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.trait.data)
}
#endif
inline void trait::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.trait.data)
}
inline void trait::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.trait.data)
}
inline ::std::string* trait::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:gogo.sr.trait.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trait::release_data() {
  // @@protoc_insertion_point(field_release:gogo.sr.trait.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trait::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.trait.data)
}

// -------------------------------------------------------------------

// wnf_url

// required string url = 1;
inline bool wnf_url::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wnf_url::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wnf_url::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wnf_url::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& wnf_url::url() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_url.url)
  return url_.GetNoArena();
}
inline void wnf_url::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_url.url)
}
#if LANG_CXX11
inline void wnf_url::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.wnf_url.url)
}
#endif
inline void wnf_url::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.wnf_url.url)
}
inline void wnf_url::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.wnf_url.url)
}
inline ::std::string* wnf_url::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_url.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wnf_url::release_url() {
  // @@protoc_insertion_point(field_release:gogo.sr.wnf_url.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wnf_url::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.wnf_url.url)
}

// required string category = 2;
inline bool wnf_url::has_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wnf_url::set_has_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wnf_url::clear_has_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wnf_url::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& wnf_url::category() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_url.category)
  return category_.GetNoArena();
}
inline void wnf_url::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_url.category)
}
#if LANG_CXX11
inline void wnf_url::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.wnf_url.category)
}
#endif
inline void wnf_url::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.wnf_url.category)
}
inline void wnf_url::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.wnf_url.category)
}
inline ::std::string* wnf_url::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_url.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wnf_url::release_category() {
  // @@protoc_insertion_point(field_release:gogo.sr.wnf_url.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wnf_url::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.wnf_url.category)
}

// -------------------------------------------------------------------

// wnf_text_zone

// required uint32 zone_id = 1;
inline bool wnf_text_zone::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wnf_text_zone::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wnf_text_zone::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wnf_text_zone::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 wnf_text_zone::zone_id() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_text_zone.zone_id)
  return zone_id_;
}
inline void wnf_text_zone::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_text_zone.zone_id)
}

// required string value = 2;
inline bool wnf_text_zone::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wnf_text_zone::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wnf_text_zone::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wnf_text_zone::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& wnf_text_zone::value() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_text_zone.value)
  return value_.GetNoArena();
}
inline void wnf_text_zone::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_text_zone.value)
}
#if LANG_CXX11
inline void wnf_text_zone::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.wnf_text_zone.value)
}
#endif
inline void wnf_text_zone::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.wnf_text_zone.value)
}
inline void wnf_text_zone::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.wnf_text_zone.value)
}
inline ::std::string* wnf_text_zone::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_text_zone.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wnf_text_zone::release_value() {
  // @@protoc_insertion_point(field_release:gogo.sr.wnf_text_zone.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wnf_text_zone::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.wnf_text_zone.value)
}

// -------------------------------------------------------------------

// wnf_dump_tz

// required string url = 1;
inline bool wnf_dump_tz::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wnf_dump_tz::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wnf_dump_tz::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wnf_dump_tz::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& wnf_dump_tz::url() const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_dump_tz.url)
  return url_.GetNoArena();
}
inline void wnf_dump_tz::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.wnf_dump_tz.url)
}
#if LANG_CXX11
inline void wnf_dump_tz::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.wnf_dump_tz.url)
}
#endif
inline void wnf_dump_tz::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.wnf_dump_tz.url)
}
inline void wnf_dump_tz::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.wnf_dump_tz.url)
}
inline ::std::string* wnf_dump_tz::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_dump_tz.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wnf_dump_tz::release_url() {
  // @@protoc_insertion_point(field_release:gogo.sr.wnf_dump_tz.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wnf_dump_tz::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.wnf_dump_tz.url)
}

// repeated .gogo.sr.wnf_text_zone zones = 2;
inline int wnf_dump_tz::zones_size() const {
  return zones_.size();
}
inline void wnf_dump_tz::clear_zones() {
  zones_.Clear();
}
inline const ::gogo::sr::wnf_text_zone& wnf_dump_tz::zones(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.wnf_dump_tz.zones)
  return zones_.Get(index);
}
inline ::gogo::sr::wnf_text_zone* wnf_dump_tz::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.wnf_dump_tz.zones)
  return zones_.Mutable(index);
}
inline ::gogo::sr::wnf_text_zone* wnf_dump_tz::add_zones() {
  // @@protoc_insertion_point(field_add:gogo.sr.wnf_dump_tz.zones)
  return zones_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_text_zone >*
wnf_dump_tz::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.wnf_dump_tz.zones)
  return &zones_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_text_zone >&
wnf_dump_tz::zones() const {
  // @@protoc_insertion_point(field_list:gogo.sr.wnf_dump_tz.zones)
  return zones_;
}

// -------------------------------------------------------------------

// multicast_stat

// optional int64 searcher_request_status = 1;
inline bool multicast_stat::has_searcher_request_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void multicast_stat::set_has_searcher_request_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void multicast_stat::clear_has_searcher_request_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void multicast_stat::clear_searcher_request_status() {
  searcher_request_status_ = GOOGLE_LONGLONG(0);
  clear_has_searcher_request_status();
}
inline ::google::protobuf::int64 multicast_stat::searcher_request_status() const {
  // @@protoc_insertion_point(field_get:gogo.sr.multicast_stat.searcher_request_status)
  return searcher_request_status_;
}
inline void multicast_stat::set_searcher_request_status(::google::protobuf::int64 value) {
  set_has_searcher_request_status();
  searcher_request_status_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.multicast_stat.searcher_request_status)
}

// -------------------------------------------------------------------

// qual_stat

// repeated .backends_quality.pb.BackendsQuality backends_quality = 1;
inline int qual_stat::backends_quality_size() const {
  return backends_quality_.size();
}
inline void qual_stat::clear_backends_quality() {
  backends_quality_.Clear();
}
inline const ::backends_quality::pb::BackendsQuality& qual_stat::backends_quality(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.qual_stat.backends_quality)
  return backends_quality_.Get(index);
}
inline ::backends_quality::pb::BackendsQuality* qual_stat::mutable_backends_quality(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.qual_stat.backends_quality)
  return backends_quality_.Mutable(index);
}
inline ::backends_quality::pb::BackendsQuality* qual_stat::add_backends_quality() {
  // @@protoc_insertion_point(field_add:gogo.sr.qual_stat.backends_quality)
  return backends_quality_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::backends_quality::pb::BackendsQuality >*
qual_stat::mutable_backends_quality() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.qual_stat.backends_quality)
  return &backends_quality_;
}
inline const ::google::protobuf::RepeatedPtrField< ::backends_quality::pb::BackendsQuality >&
qual_stat::backends_quality() const {
  // @@protoc_insertion_point(field_list:gogo.sr.qual_stat.backends_quality)
  return backends_quality_;
}

// optional .gogo.sr.multicast_stat multicast_stat = 2;
inline bool qual_stat::has_multicast_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qual_stat::set_has_multicast_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qual_stat::clear_has_multicast_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qual_stat::clear_multicast_stat() {
  if (multicast_stat_ != NULL) multicast_stat_->::gogo::sr::multicast_stat::Clear();
  clear_has_multicast_stat();
}
inline const ::gogo::sr::multicast_stat& qual_stat::multicast_stat() const {
  const ::gogo::sr::multicast_stat* p = multicast_stat_;
  // @@protoc_insertion_point(field_get:gogo.sr.qual_stat.multicast_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::multicast_stat*>(
      &::gogo::sr::_multicast_stat_default_instance_);
}
inline ::gogo::sr::multicast_stat* qual_stat::mutable_multicast_stat() {
  set_has_multicast_stat();
  if (multicast_stat_ == NULL) {
    multicast_stat_ = new ::gogo::sr::multicast_stat;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.qual_stat.multicast_stat)
  return multicast_stat_;
}
inline ::gogo::sr::multicast_stat* qual_stat::release_multicast_stat() {
  // @@protoc_insertion_point(field_release:gogo.sr.qual_stat.multicast_stat)
  clear_has_multicast_stat();
  ::gogo::sr::multicast_stat* temp = multicast_stat_;
  multicast_stat_ = NULL;
  return temp;
}
inline void qual_stat::set_allocated_multicast_stat(::gogo::sr::multicast_stat* multicast_stat) {
  delete multicast_stat_;
  multicast_stat_ = multicast_stat;
  if (multicast_stat) {
    set_has_multicast_stat();
  } else {
    clear_has_multicast_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.qual_stat.multicast_stat)
}

// -------------------------------------------------------------------

// search_result

// required .gogo.sr.error err = 1;
inline bool search_result::has_err() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void search_result::set_has_err() {
  _has_bits_[0] |= 0x00000020u;
}
inline void search_result::clear_has_err() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void search_result::clear_err() {
  if (err_ != NULL) err_->::gogo::sr::error::Clear();
  clear_has_err();
}
inline const ::gogo::sr::error& search_result::err() const {
  const ::gogo::sr::error* p = err_;
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.err)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::error*>(
      &::gogo::sr::_error_default_instance_);
}
inline ::gogo::sr::error* search_result::mutable_err() {
  set_has_err();
  if (err_ == NULL) {
    err_ = new ::gogo::sr::error;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.err)
  return err_;
}
inline ::gogo::sr::error* search_result::release_err() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.err)
  clear_has_err();
  ::gogo::sr::error* temp = err_;
  err_ = NULL;
  return temp;
}
inline void search_result::set_allocated_err(::gogo::sr::error* err) {
  delete err_;
  err_ = err;
  if (err) {
    set_has_err();
  } else {
    clear_has_err();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.err)
}

// optional string query = 2;
inline bool search_result::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void search_result::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void search_result::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void search_result::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& search_result::query() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.query)
  return query_.GetNoArena();
}
inline void search_result::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.query)
}
#if LANG_CXX11
inline void search_result::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.query)
}
#endif
inline void search_result::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.query)
}
inline void search_result::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.query)
}
inline ::std::string* search_result::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* search_result::release_query() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void search_result::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.query)
}

// optional string query_string = 3;
inline bool search_result::has_query_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void search_result::set_has_query_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void search_result::clear_has_query_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void search_result::clear_query_string() {
  query_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_string();
}
inline const ::std::string& search_result::query_string() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.query_string)
  return query_string_.GetNoArena();
}
inline void search_result::set_query_string(const ::std::string& value) {
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.query_string)
}
#if LANG_CXX11
inline void search_result::set_query_string(::std::string&& value) {
  set_has_query_string();
  query_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.query_string)
}
#endif
inline void search_result::set_query_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.query_string)
}
inline void search_result::set_query_string(const char* value, size_t size) {
  set_has_query_string();
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.query_string)
}
inline ::std::string* search_result::mutable_query_string() {
  set_has_query_string();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.query_string)
  return query_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* search_result::release_query_string() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.query_string)
  clear_has_query_string();
  return query_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void search_result::set_allocated_query_string(::std::string* query_string) {
  if (query_string != NULL) {
    set_has_query_string();
  } else {
    clear_has_query_string();
  }
  query_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_string);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.query_string)
}

// optional float time = 4;
inline bool search_result::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void search_result::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void search_result::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void search_result::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float search_result::time() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.time)
  return time_;
}
inline void search_result::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.time)
}

// optional .gogo.sr.result_frame frame = 5;
inline bool search_result::has_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void search_result::set_has_frame() {
  _has_bits_[0] |= 0x00000040u;
}
inline void search_result::clear_has_frame() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void search_result::clear_frame() {
  if (frame_ != NULL) frame_->::gogo::sr::result_frame::Clear();
  clear_has_frame();
}
inline const ::gogo::sr::result_frame& search_result::frame() const {
  const ::gogo::sr::result_frame* p = frame_;
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.frame)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::result_frame*>(
      &::gogo::sr::_result_frame_default_instance_);
}
inline ::gogo::sr::result_frame* search_result::mutable_frame() {
  set_has_frame();
  if (frame_ == NULL) {
    frame_ = new ::gogo::sr::result_frame;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.frame)
  return frame_;
}
inline ::gogo::sr::result_frame* search_result::release_frame() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.frame)
  clear_has_frame();
  ::gogo::sr::result_frame* temp = frame_;
  frame_ = NULL;
  return temp;
}
inline void search_result::set_allocated_frame(::gogo::sr::result_frame* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.frame)
}

// repeated string words = 6;
inline int search_result::words_size() const {
  return words_.size();
}
inline void search_result::clear_words() {
  words_.Clear();
}
inline const ::std::string& search_result::words(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.words)
  return words_.Get(index);
}
inline ::std::string* search_result::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.words)
  return words_.Mutable(index);
}
inline void search_result::set_words(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.words)
  words_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void search_result::set_words(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.words)
  words_.Mutable(index)->assign(std::move(value));
}
#endif
inline void search_result::set_words(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.words)
}
inline void search_result::set_words(int index, const char* value, size_t size) {
  words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.words)
}
inline ::std::string* search_result::add_words() {
  // @@protoc_insertion_point(field_add_mutable:gogo.sr.search_result.words)
  return words_.Add();
}
inline void search_result::add_words(const ::std::string& value) {
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.words)
}
#if LANG_CXX11
inline void search_result::add_words(::std::string&& value) {
  words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.words)
}
#endif
inline void search_result::add_words(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.sr.search_result.words)
}
inline void search_result::add_words(const char* value, size_t size) {
  words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.sr.search_result.words)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
search_result::words() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.words)
  return words_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
search_result::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.words)
  return &words_;
}

// repeated .gogo.sr.doc_item docs = 7;
inline int search_result::docs_size() const {
  return docs_.size();
}
inline void search_result::clear_docs() {
  docs_.Clear();
}
inline const ::gogo::sr::doc_item& search_result::docs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.docs)
  return docs_.Get(index);
}
inline ::gogo::sr::doc_item* search_result::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.docs)
  return docs_.Mutable(index);
}
inline ::gogo::sr::doc_item* search_result::add_docs() {
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.docs)
  return docs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_item >*
search_result::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.docs)
  return &docs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::doc_item >&
search_result::docs() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.docs)
  return docs_;
}

// optional uint64 fingerprint = 8;
inline bool search_result::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void search_result::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000200u;
}
inline void search_result::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void search_result::clear_fingerprint() {
  fingerprint_ = GOOGLE_ULONGLONG(0);
  clear_has_fingerprint();
}
inline ::google::protobuf::uint64 search_result::fingerprint() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.fingerprint)
  return fingerprint_;
}
inline void search_result::set_fingerprint(::google::protobuf::uint64 value) {
  set_has_fingerprint();
  fingerprint_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.fingerprint)
}

// repeated uint64 zone_dump = 9;
inline int search_result::zone_dump_size() const {
  return zone_dump_.size();
}
inline void search_result::clear_zone_dump() {
  zone_dump_.Clear();
}
inline ::google::protobuf::uint64 search_result::zone_dump(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.zone_dump)
  return zone_dump_.Get(index);
}
inline void search_result::set_zone_dump(int index, ::google::protobuf::uint64 value) {
  zone_dump_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.zone_dump)
}
inline void search_result::add_zone_dump(::google::protobuf::uint64 value) {
  zone_dump_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.zone_dump)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
search_result::zone_dump() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.zone_dump)
  return zone_dump_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
search_result::mutable_zone_dump() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.zone_dump)
  return &zone_dump_;
}

// optional string statistics = 10;
inline bool search_result::has_statistics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void search_result::set_has_statistics() {
  _has_bits_[0] |= 0x00000004u;
}
inline void search_result::clear_has_statistics() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void search_result::clear_statistics() {
  statistics_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_statistics();
}
inline const ::std::string& search_result::statistics() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.statistics)
  return statistics_.GetNoArena();
}
inline void search_result::set_statistics(const ::std::string& value) {
  set_has_statistics();
  statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.statistics)
}
#if LANG_CXX11
inline void search_result::set_statistics(::std::string&& value) {
  set_has_statistics();
  statistics_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.statistics)
}
#endif
inline void search_result::set_statistics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_statistics();
  statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.statistics)
}
inline void search_result::set_statistics(const char* value, size_t size) {
  set_has_statistics();
  statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.statistics)
}
inline ::std::string* search_result::mutable_statistics() {
  set_has_statistics();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.statistics)
  return statistics_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* search_result::release_statistics() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.statistics)
  clear_has_statistics();
  return statistics_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void search_result::set_allocated_statistics(::std::string* statistics) {
  if (statistics != NULL) {
    set_has_statistics();
  } else {
    clear_has_statistics();
  }
  statistics_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statistics);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.statistics)
}

// optional string sm_through = 11;
inline bool search_result::has_sm_through() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void search_result::set_has_sm_through() {
  _has_bits_[0] |= 0x00000008u;
}
inline void search_result::clear_has_sm_through() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void search_result::clear_sm_through() {
  sm_through_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sm_through();
}
inline const ::std::string& search_result::sm_through() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.sm_through)
  return sm_through_.GetNoArena();
}
inline void search_result::set_sm_through(const ::std::string& value) {
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.sm_through)
}
#if LANG_CXX11
inline void search_result::set_sm_through(::std::string&& value) {
  set_has_sm_through();
  sm_through_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.sm_through)
}
#endif
inline void search_result::set_sm_through(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.sm_through)
}
inline void search_result::set_sm_through(const char* value, size_t size) {
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.sm_through)
}
inline ::std::string* search_result::mutable_sm_through() {
  set_has_sm_through();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.sm_through)
  return sm_through_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* search_result::release_sm_through() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.sm_through)
  clear_has_sm_through();
  return sm_through_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void search_result::set_allocated_sm_through(::std::string* sm_through) {
  if (sm_through != NULL) {
    set_has_sm_through();
  } else {
    clear_has_sm_through();
  }
  sm_through_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sm_through);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.sm_through)
}

// repeated uint32 porno_stats = 12 [packed = true];
inline int search_result::porno_stats_size() const {
  return porno_stats_.size();
}
inline void search_result::clear_porno_stats() {
  porno_stats_.Clear();
}
inline ::google::protobuf::uint32 search_result::porno_stats(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.porno_stats)
  return porno_stats_.Get(index);
}
inline void search_result::set_porno_stats(int index, ::google::protobuf::uint32 value) {
  porno_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.porno_stats)
}
inline void search_result::add_porno_stats(::google::protobuf::uint32 value) {
  porno_stats_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.porno_stats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
search_result::porno_stats() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.porno_stats)
  return porno_stats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
search_result::mutable_porno_stats() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.porno_stats)
  return &porno_stats_;
}

// optional bool use_snip_cache = 13;
inline bool search_result::has_use_snip_cache() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void search_result::set_has_use_snip_cache() {
  _has_bits_[0] |= 0x00000800u;
}
inline void search_result::clear_has_use_snip_cache() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void search_result::clear_use_snip_cache() {
  use_snip_cache_ = false;
  clear_has_use_snip_cache();
}
inline bool search_result::use_snip_cache() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.use_snip_cache)
  return use_snip_cache_;
}
inline void search_result::set_use_snip_cache(bool value) {
  set_has_use_snip_cache();
  use_snip_cache_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.use_snip_cache)
}

// optional .gogo.sr.statistic statistic = 14;
inline bool search_result::has_statistic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void search_result::set_has_statistic() {
  _has_bits_[0] |= 0x00000080u;
}
inline void search_result::clear_has_statistic() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void search_result::clear_statistic() {
  if (statistic_ != NULL) statistic_->::gogo::sr::statistic::Clear();
  clear_has_statistic();
}
inline const ::gogo::sr::statistic& search_result::statistic() const {
  const ::gogo::sr::statistic* p = statistic_;
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.statistic)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::statistic*>(
      &::gogo::sr::_statistic_default_instance_);
}
inline ::gogo::sr::statistic* search_result::mutable_statistic() {
  set_has_statistic();
  if (statistic_ == NULL) {
    statistic_ = new ::gogo::sr::statistic;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.statistic)
  return statistic_;
}
inline ::gogo::sr::statistic* search_result::release_statistic() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.statistic)
  clear_has_statistic();
  ::gogo::sr::statistic* temp = statistic_;
  statistic_ = NULL;
  return temp;
}
inline void search_result::set_allocated_statistic(::gogo::sr::statistic* statistic) {
  delete statistic_;
  statistic_ = statistic;
  if (statistic) {
    set_has_statistic();
  } else {
    clear_has_statistic();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.statistic)
}

// optional bool utf8 = 15;
inline bool search_result::has_utf8() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void search_result::set_has_utf8() {
  _has_bits_[0] |= 0x00001000u;
}
inline void search_result::clear_has_utf8() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void search_result::clear_utf8() {
  utf8_ = false;
  clear_has_utf8();
}
inline bool search_result::utf8() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.utf8)
  return utf8_;
}
inline void search_result::set_utf8(bool value) {
  set_has_utf8();
  utf8_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.utf8)
}

// repeated string microbase_id = 16;
inline int search_result::microbase_id_size() const {
  return microbase_id_.size();
}
inline void search_result::clear_microbase_id() {
  microbase_id_.Clear();
}
inline const ::std::string& search_result::microbase_id(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.microbase_id)
  return microbase_id_.Get(index);
}
inline ::std::string* search_result::mutable_microbase_id(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.microbase_id)
  return microbase_id_.Mutable(index);
}
inline void search_result::set_microbase_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.microbase_id)
  microbase_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void search_result::set_microbase_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.microbase_id)
  microbase_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void search_result::set_microbase_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  microbase_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.microbase_id)
}
inline void search_result::set_microbase_id(int index, const char* value, size_t size) {
  microbase_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.microbase_id)
}
inline ::std::string* search_result::add_microbase_id() {
  // @@protoc_insertion_point(field_add_mutable:gogo.sr.search_result.microbase_id)
  return microbase_id_.Add();
}
inline void search_result::add_microbase_id(const ::std::string& value) {
  microbase_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.microbase_id)
}
#if LANG_CXX11
inline void search_result::add_microbase_id(::std::string&& value) {
  microbase_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.microbase_id)
}
#endif
inline void search_result::add_microbase_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  microbase_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.sr.search_result.microbase_id)
}
inline void search_result::add_microbase_id(const char* value, size_t size) {
  microbase_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.sr.search_result.microbase_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
search_result::microbase_id() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.microbase_id)
  return microbase_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
search_result::mutable_microbase_id() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.microbase_id)
  return &microbase_id_;
}

// optional string searcher_vers = 17;
inline bool search_result::has_searcher_vers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void search_result::set_has_searcher_vers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void search_result::clear_has_searcher_vers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void search_result::clear_searcher_vers() {
  searcher_vers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searcher_vers();
}
inline const ::std::string& search_result::searcher_vers() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.searcher_vers)
  return searcher_vers_.GetNoArena();
}
inline void search_result::set_searcher_vers(const ::std::string& value) {
  set_has_searcher_vers();
  searcher_vers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.searcher_vers)
}
#if LANG_CXX11
inline void search_result::set_searcher_vers(::std::string&& value) {
  set_has_searcher_vers();
  searcher_vers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.sr.search_result.searcher_vers)
}
#endif
inline void search_result::set_searcher_vers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searcher_vers();
  searcher_vers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.sr.search_result.searcher_vers)
}
inline void search_result::set_searcher_vers(const char* value, size_t size) {
  set_has_searcher_vers();
  searcher_vers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.sr.search_result.searcher_vers)
}
inline ::std::string* search_result::mutable_searcher_vers() {
  set_has_searcher_vers();
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.searcher_vers)
  return searcher_vers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* search_result::release_searcher_vers() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.searcher_vers)
  clear_has_searcher_vers();
  return searcher_vers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void search_result::set_allocated_searcher_vers(::std::string* searcher_vers) {
  if (searcher_vers != NULL) {
    set_has_searcher_vers();
  } else {
    clear_has_searcher_vers();
  }
  searcher_vers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searcher_vers);
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.searcher_vers)
}

// repeated .gogo.sr.trait traits = 18;
inline int search_result::traits_size() const {
  return traits_.size();
}
inline void search_result::clear_traits() {
  traits_.Clear();
}
inline const ::gogo::sr::trait& search_result::traits(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.traits)
  return traits_.Get(index);
}
inline ::gogo::sr::trait* search_result::mutable_traits(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.traits)
  return traits_.Mutable(index);
}
inline ::gogo::sr::trait* search_result::add_traits() {
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.traits)
  return traits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::trait >*
search_result::mutable_traits() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.traits)
  return &traits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::trait >&
search_result::traits() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.traits)
  return traits_;
}

// optional fixed32 version_hash = 19;
inline bool search_result::has_version_hash() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void search_result::set_has_version_hash() {
  _has_bits_[0] |= 0x00004000u;
}
inline void search_result::clear_has_version_hash() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void search_result::clear_version_hash() {
  version_hash_ = 0u;
  clear_has_version_hash();
}
inline ::google::protobuf::uint32 search_result::version_hash() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.version_hash)
  return version_hash_;
}
inline void search_result::set_version_hash(::google::protobuf::uint32 value) {
  set_has_version_hash();
  version_hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.version_hash)
}

// repeated .gogo.sr.wnf_url wnf_urls = 20;
inline int search_result::wnf_urls_size() const {
  return wnf_urls_.size();
}
inline void search_result::clear_wnf_urls() {
  wnf_urls_.Clear();
}
inline const ::gogo::sr::wnf_url& search_result::wnf_urls(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.wnf_urls)
  return wnf_urls_.Get(index);
}
inline ::gogo::sr::wnf_url* search_result::mutable_wnf_urls(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.wnf_urls)
  return wnf_urls_.Mutable(index);
}
inline ::gogo::sr::wnf_url* search_result::add_wnf_urls() {
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.wnf_urls)
  return wnf_urls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_url >*
search_result::mutable_wnf_urls() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.wnf_urls)
  return &wnf_urls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_url >&
search_result::wnf_urls() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.wnf_urls)
  return wnf_urls_;
}

// repeated .gogo.sr.wnf_dump_tz wnf_tz = 21;
inline int search_result::wnf_tz_size() const {
  return wnf_tz_.size();
}
inline void search_result::clear_wnf_tz() {
  wnf_tz_.Clear();
}
inline const ::gogo::sr::wnf_dump_tz& search_result::wnf_tz(int index) const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.wnf_tz)
  return wnf_tz_.Get(index);
}
inline ::gogo::sr::wnf_dump_tz* search_result::mutable_wnf_tz(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.wnf_tz)
  return wnf_tz_.Mutable(index);
}
inline ::gogo::sr::wnf_dump_tz* search_result::add_wnf_tz() {
  // @@protoc_insertion_point(field_add:gogo.sr.search_result.wnf_tz)
  return wnf_tz_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_dump_tz >*
search_result::mutable_wnf_tz() {
  // @@protoc_insertion_point(field_mutable_list:gogo.sr.search_result.wnf_tz)
  return &wnf_tz_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::sr::wnf_dump_tz >&
search_result::wnf_tz() const {
  // @@protoc_insertion_point(field_list:gogo.sr.search_result.wnf_tz)
  return wnf_tz_;
}

// optional bool domain_group_ooo = 22;
inline bool search_result::has_domain_group_ooo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void search_result::set_has_domain_group_ooo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void search_result::clear_has_domain_group_ooo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void search_result::clear_domain_group_ooo() {
  domain_group_ooo_ = false;
  clear_has_domain_group_ooo();
}
inline bool search_result::domain_group_ooo() const {
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.domain_group_ooo)
  return domain_group_ooo_;
}
inline void search_result::set_domain_group_ooo(bool value) {
  set_has_domain_group_ooo();
  domain_group_ooo_ = value;
  // @@protoc_insertion_point(field_set:gogo.sr.search_result.domain_group_ooo)
}

// optional .gogo.sr.qual_stat qual_stat = 24;
inline bool search_result::has_qual_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void search_result::set_has_qual_stat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void search_result::clear_has_qual_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void search_result::clear_qual_stat() {
  if (qual_stat_ != NULL) qual_stat_->::gogo::sr::qual_stat::Clear();
  clear_has_qual_stat();
}
inline const ::gogo::sr::qual_stat& search_result::qual_stat() const {
  const ::gogo::sr::qual_stat* p = qual_stat_;
  // @@protoc_insertion_point(field_get:gogo.sr.search_result.qual_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::sr::qual_stat*>(
      &::gogo::sr::_qual_stat_default_instance_);
}
inline ::gogo::sr::qual_stat* search_result::mutable_qual_stat() {
  set_has_qual_stat();
  if (qual_stat_ == NULL) {
    qual_stat_ = new ::gogo::sr::qual_stat;
  }
  // @@protoc_insertion_point(field_mutable:gogo.sr.search_result.qual_stat)
  return qual_stat_;
}
inline ::gogo::sr::qual_stat* search_result::release_qual_stat() {
  // @@protoc_insertion_point(field_release:gogo.sr.search_result.qual_stat)
  clear_has_qual_stat();
  ::gogo::sr::qual_stat* temp = qual_stat_;
  qual_stat_ = NULL;
  return temp;
}
inline void search_result::set_allocated_qual_stat(::gogo::sr::qual_stat* qual_stat) {
  delete qual_stat_;
  qual_stat_ = qual_stat;
  if (qual_stat) {
    set_has_qual_stat();
  } else {
    clear_has_qual_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.sr.search_result.qual_stat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sr
}  // namespace gogo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gogo::sr::domain_group_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::sr::domain_group_type>() {
  return ::gogo::sr::domain_group_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_search_5fresult_2eproto__INCLUDED
