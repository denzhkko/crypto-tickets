// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sessions_container.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sessions_container.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace clickrank {
class SessionsContainerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SessionsContainer>
     _instance;
} _SessionsContainer_default_instance_;
class SessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Session>
     _instance;
} _Session_default_instance_;

namespace protobuf_sessions_5fcontainer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsContainer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsContainer, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsContainer, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsContainer, nextsessionsts_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, timestampofclicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, startfrom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, sessioninfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, uniformsessionparameters_),
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  5,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(SessionsContainer)},
  { 11, 26, sizeof(Session)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionsContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Session_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sessions_container.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::ranking::protobuf_urllog_5frecord_2eproto::InitDefaults();
  _SessionsContainer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SessionsContainer_default_instance_);_Session_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Session_default_instance_);_Session_default_instance_._instance.get_mutable()->sessioninfo_ = const_cast< ::ru::mail::go::webbase::ranking::ParamList*>(
      ::ru::mail::go::webbase::ranking::ParamList::internal_default_instance());
  _Session_default_instance_._instance.get_mutable()->uniformsessionparameters_ = const_cast< ::ru::mail::go::webbase::ranking::ParamList*>(
      ::ru::mail::go::webbase::ranking::ParamList::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030sessions_container.proto\022\034ru.mail.go.w"
      "ebbase.clickrank\032\023urllog_record.proto\"t\n"
      "\021SessionsContainer\022\016\n\006userId\030\001 \002(\t\0227\n\010se"
      "ssions\030\002 \003(\0132%.ru.mail.go.webbase.clickr"
      "ank.Session\022\026\n\016nextSessionsTs\030\003 \001(\004\"\230\002\n\007"
      "Session\022\014\n\004urls\030\001 \003(\t\022\016\n\006clicks\030\002 \003(\005\022\031\n"
      "\021timestampOfClicks\030\003 \003(\004\022\021\n\tstartFrom\030\004 "
      "\001(\005\022\016\n\006userId\030\005 \001(\t\022\021\n\ttimestamp\030\006 \002(\004\022\n"
      "\n\002ip\030\007 \001(\t\022\r\n\005query\030\010 \001(\t\022:\n\013sessionInfo"
      "\030\t \001(\0132%.ru.mail.go.webbase.ranking.Para"
      "mList\022G\n\030uniformSessionParameters\030\n \001(\0132"
      "%.ru.mail.go.webbase.ranking.ParamListB\030"
      "B\026SessionsContainerClass"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sessions_container.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::ranking::protobuf_urllog_5frecord_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sessions_5fcontainer_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionsContainer::kUserIdFieldNumber;
const int SessionsContainer::kSessionsFieldNumber;
const int SessionsContainer::kNextSessionsTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionsContainer::SessionsContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sessions_5fcontainer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.clickrank.SessionsContainer)
}
SessionsContainer::SessionsContainer(const SessionsContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  nextsessionsts_ = from.nextsessionsts_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.clickrank.SessionsContainer)
}

void SessionsContainer::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nextsessionsts_ = GOOGLE_ULONGLONG(0);
}

SessionsContainer::~SessionsContainer() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.clickrank.SessionsContainer)
  SharedDtor();
}

void SessionsContainer::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionsContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionsContainer::descriptor() {
  protobuf_sessions_5fcontainer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sessions_5fcontainer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionsContainer& SessionsContainer::default_instance() {
  protobuf_sessions_5fcontainer_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionsContainer* SessionsContainer::New(::google::protobuf::Arena* arena) const {
  SessionsContainer* n = new SessionsContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionsContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  if (has_userid()) {
    GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*userid_.UnsafeRawStringPointer())->clear();
  }
  nextsessionsts_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionsContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.SessionsContainer.userId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.clickrank.Session sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nextSessionsTs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nextsessionsts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nextsessionsts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.clickrank.SessionsContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.clickrank.SessionsContainer)
  return false;
#undef DO_
}

void SessionsContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.SessionsContainer.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // repeated .ru.mail.go.webbase.clickrank.Session sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sessions(static_cast<int>(i)), output);
  }

  // optional uint64 nextSessionsTs = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nextsessionsts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.clickrank.SessionsContainer)
}

::google::protobuf::uint8* SessionsContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.SessionsContainer.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated .ru.mail.go.webbase.clickrank.Session sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 nextSessionsTs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nextsessionsts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.clickrank.SessionsContainer)
  return target;
}

size_t SessionsContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  // repeated .ru.mail.go.webbase.clickrank.Session sessions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(static_cast<int>(i)));
    }
  }

  // optional uint64 nextSessionsTs = 3;
  if (has_nextsessionsts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nextsessionsts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionsContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionsContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionsContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.clickrank.SessionsContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.clickrank.SessionsContainer)
    MergeFrom(*source);
  }
}

void SessionsContainer::MergeFrom(const SessionsContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      nextsessionsts_ = from.nextsessionsts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionsContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionsContainer::CopyFrom(const SessionsContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.clickrank.SessionsContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionsContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sessions())) return false;
  return true;
}

void SessionsContainer::Swap(SessionsContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionsContainer::InternalSwap(SessionsContainer* other) {
  using std::swap;
  sessions_.InternalSwap(&other->sessions_);
  userid_.Swap(&other->userid_);
  swap(nextsessionsts_, other->nextsessionsts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionsContainer::GetMetadata() const {
  protobuf_sessions_5fcontainer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sessions_5fcontainer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionsContainer

// required string userId = 1;
bool SessionsContainer::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionsContainer::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionsContainer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionsContainer::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& SessionsContainer::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
  return userid_.GetNoArena();
}
void SessionsContainer::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}
#if LANG_CXX11
void SessionsContainer::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}
#endif
void SessionsContainer::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}
void SessionsContainer::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}
::std::string* SessionsContainer::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionsContainer::release_userid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionsContainer::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}

// repeated .ru.mail.go.webbase.clickrank.Session sessions = 2;
int SessionsContainer::sessions_size() const {
  return sessions_.size();
}
void SessionsContainer::clear_sessions() {
  sessions_.Clear();
}
const ::ru::mail::go::webbase::clickrank::Session& SessionsContainer::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return sessions_.Get(index);
}
::ru::mail::go::webbase::clickrank::Session* SessionsContainer::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return sessions_.Mutable(index);
}
::ru::mail::go::webbase::clickrank::Session* SessionsContainer::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::clickrank::Session >*
SessionsContainer::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::clickrank::Session >&
SessionsContainer::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return sessions_;
}

// optional uint64 nextSessionsTs = 3;
bool SessionsContainer::has_nextsessionsts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionsContainer::set_has_nextsessionsts() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionsContainer::clear_has_nextsessionsts() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionsContainer::clear_nextsessionsts() {
  nextsessionsts_ = GOOGLE_ULONGLONG(0);
  clear_has_nextsessionsts();
}
::google::protobuf::uint64 SessionsContainer::nextsessionsts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.SessionsContainer.nextSessionsTs)
  return nextsessionsts_;
}
void SessionsContainer::set_nextsessionsts(::google::protobuf::uint64 value) {
  set_has_nextsessionsts();
  nextsessionsts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.SessionsContainer.nextSessionsTs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kUrlsFieldNumber;
const int Session::kClicksFieldNumber;
const int Session::kTimestampOfClicksFieldNumber;
const int Session::kStartFromFieldNumber;
const int Session::kUserIdFieldNumber;
const int Session::kTimestampFieldNumber;
const int Session::kIpFieldNumber;
const int Session::kQueryFieldNumber;
const int Session::kSessionInfoFieldNumber;
const int Session::kUniformSessionParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sessions_5fcontainer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.clickrank.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_),
      clicks_(from.clicks_),
      timestampofclicks_(from.timestampofclicks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.has_sessioninfo()) {
    sessioninfo_ = new ::ru::mail::go::webbase::ranking::ParamList(*from.sessioninfo_);
  } else {
    sessioninfo_ = NULL;
  }
  if (from.has_uniformsessionparameters()) {
    uniformsessionparameters_ = new ::ru::mail::go::webbase::ranking::ParamList(*from.uniformsessionparameters_);
  } else {
    uniformsessionparameters_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&startfrom_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(startfrom_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.clickrank.Session)
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessioninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startfrom_) -
      reinterpret_cast<char*>(&sessioninfo_)) + sizeof(startfrom_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.clickrank.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sessioninfo_;
  if (this != internal_default_instance()) delete uniformsessionparameters_;
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_sessions_5fcontainer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sessions_5fcontainer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  protobuf_sessions_5fcontainer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.clickrank.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  clicks_.Clear();
  timestampofclicks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sessioninfo_ != NULL);
      sessioninfo_->::ru::mail::go::webbase::ranking::ParamList::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(uniformsessionparameters_ != NULL);
      uniformsessionparameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startfrom_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(startfrom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.clickrank.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_clicks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_clicks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 timestampOfClicks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24u, input, this->mutable_timestampofclicks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_timestampofclicks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 startFrom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_startfrom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startfrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string userId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.userId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.ParamList uniformSessionParameters = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uniformsessionparameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.clickrank.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.clickrank.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.clickrank.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }

  // repeated int32 clicks = 2;
  for (int i = 0, n = this->clicks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->clicks(i), output);
  }

  // repeated uint64 timestampOfClicks = 3;
  for (int i = 0, n = this->timestampofclicks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->timestampofclicks(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 startFrom = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startfrom(), output);
  }

  // optional string userId = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->userid(), output);
  }

  // required uint64 timestamp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }

  // optional string ip = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ip(), output);
  }

  // optional string query = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->query(), output);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->sessioninfo_, output);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList uniformSessionParameters = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->uniformsessionparameters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.clickrank.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.clickrank.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->urls(i), target);
  }

  // repeated int32 clicks = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->clicks_, target);

  // repeated uint64 timestampOfClicks = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(3, this->timestampofclicks_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 startFrom = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startfrom(), target);
  }

  // optional string userId = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // required uint64 timestamp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }

  // optional string ip = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ip(), target);
  }

  // optional string query = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->query(), target);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->sessioninfo_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList uniformSessionParameters = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->uniformsessionparameters_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.clickrank.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.clickrank.Session)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 timestamp = 6;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }
  // repeated string urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  // repeated int32 clicks = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->clicks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->clicks_size());
    total_size += data_size;
  }

  // repeated uint64 timestampOfClicks = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->timestampofclicks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->timestampofclicks_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string userId = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional string ip = 7;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string query = 8;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
    if (has_sessioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sessioninfo_);
    }

    // optional .ru.mail.go.webbase.ranking.ParamList uniformSessionParameters = 10;
    if (has_uniformsessionparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uniformsessionparameters_);
    }

  }
  // optional int32 startFrom = 4;
  if (has_startfrom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startfrom());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.clickrank.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.clickrank.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.clickrank.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.clickrank.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  clicks_.MergeFrom(from.clicks_);
  timestampofclicks_.MergeFrom(from.timestampofclicks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_sessioninfo()->::ru::mail::go::webbase::ranking::ParamList::MergeFrom(from.sessioninfo());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_uniformsessionparameters()->::ru::mail::go::webbase::ranking::ParamList::MergeFrom(from.uniformsessionparameters());
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      startfrom_ = from.startfrom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.clickrank.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.clickrank.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  clicks_.InternalSwap(&other->clicks_);
  timestampofclicks_.InternalSwap(&other->timestampofclicks_);
  userid_.Swap(&other->userid_);
  ip_.Swap(&other->ip_);
  query_.Swap(&other->query_);
  swap(sessioninfo_, other->sessioninfo_);
  swap(uniformsessionparameters_, other->uniformsessionparameters_);
  swap(timestamp_, other->timestamp_);
  swap(startfrom_, other->startfrom_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_sessions_5fcontainer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sessions_5fcontainer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Session

// repeated string urls = 1;
int Session::urls_size() const {
  return urls_.size();
}
void Session::clear_urls() {
  urls_.Clear();
}
const ::std::string& Session::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.urls)
  return urls_.Get(index);
}
::std::string* Session::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.urls)
  return urls_.Mutable(index);
}
void Session::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Session::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void Session::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.urls)
}
void Session::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.urls)
}
::std::string* Session::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.clickrank.Session.urls)
  return urls_.Add();
}
void Session::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.urls)
}
#if LANG_CXX11
void Session::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.urls)
}
#endif
void Session::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.clickrank.Session.urls)
}
void Session::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.clickrank.Session.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Session::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Session::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.urls)
  return &urls_;
}

// repeated int32 clicks = 2;
int Session::clicks_size() const {
  return clicks_.size();
}
void Session::clear_clicks() {
  clicks_.Clear();
}
::google::protobuf::int32 Session::clicks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.clicks)
  return clicks_.Get(index);
}
void Session::set_clicks(int index, ::google::protobuf::int32 value) {
  clicks_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.clicks)
}
void Session::add_clicks(::google::protobuf::int32 value) {
  clicks_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.clicks)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Session::clicks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.clicks)
  return clicks_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Session::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.clicks)
  return &clicks_;
}

// repeated uint64 timestampOfClicks = 3;
int Session::timestampofclicks_size() const {
  return timestampofclicks_.size();
}
void Session::clear_timestampofclicks() {
  timestampofclicks_.Clear();
}
::google::protobuf::uint64 Session::timestampofclicks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
  return timestampofclicks_.Get(index);
}
void Session::set_timestampofclicks(int index, ::google::protobuf::uint64 value) {
  timestampofclicks_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
}
void Session::add_timestampofclicks(::google::protobuf::uint64 value) {
  timestampofclicks_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Session::timestampofclicks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
  return timestampofclicks_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Session::mutable_timestampofclicks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
  return &timestampofclicks_;
}

// optional int32 startFrom = 4;
bool Session::has_startfrom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Session::set_has_startfrom() {
  _has_bits_[0] |= 0x00000040u;
}
void Session::clear_has_startfrom() {
  _has_bits_[0] &= ~0x00000040u;
}
void Session::clear_startfrom() {
  startfrom_ = 0;
  clear_has_startfrom();
}
::google::protobuf::int32 Session::startfrom() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.startFrom)
  return startfrom_;
}
void Session::set_startfrom(::google::protobuf::int32 value) {
  set_has_startfrom();
  startfrom_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.startFrom)
}

// optional string userId = 5;
bool Session::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Session::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void Session::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Session::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& Session::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.userId)
  return userid_.GetNoArena();
}
void Session::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.userId)
}
#if LANG_CXX11
void Session::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.userId)
}
#endif
void Session::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.userId)
}
void Session::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.userId)
}
::std::string* Session::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_userid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.userId)
}

// required uint64 timestamp = 6;
bool Session::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Session::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void Session::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void Session::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Session::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.timestamp)
  return timestamp_;
}
void Session::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.timestamp)
}

// optional string ip = 7;
bool Session::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Session::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void Session::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void Session::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& Session::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.ip)
  return ip_.GetNoArena();
}
void Session::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.ip)
}
#if LANG_CXX11
void Session::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.ip)
}
#endif
void Session::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.ip)
}
void Session::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.ip)
}
::std::string* Session::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.ip)
}

// optional string query = 8;
bool Session::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Session::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
void Session::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
void Session::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& Session::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.query)
  return query_.GetNoArena();
}
void Session::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.query)
}
#if LANG_CXX11
void Session::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.query)
}
#endif
void Session::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.query)
}
void Session::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.query)
}
::std::string* Session::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.query)
}

// optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
bool Session::has_sessioninfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Session::set_has_sessioninfo() {
  _has_bits_[0] |= 0x00000008u;
}
void Session::clear_has_sessioninfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void Session::clear_sessioninfo() {
  if (sessioninfo_ != NULL) sessioninfo_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_sessioninfo();
}
const ::ru::mail::go::webbase::ranking::ParamList& Session::sessioninfo() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = sessioninfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
::ru::mail::go::webbase::ranking::ParamList* Session::mutable_sessioninfo() {
  set_has_sessioninfo();
  if (sessioninfo_ == NULL) {
    sessioninfo_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  return sessioninfo_;
}
::ru::mail::go::webbase::ranking::ParamList* Session::release_sessioninfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  clear_has_sessioninfo();
  ::ru::mail::go::webbase::ranking::ParamList* temp = sessioninfo_;
  sessioninfo_ = NULL;
  return temp;
}
void Session::set_allocated_sessioninfo(::ru::mail::go::webbase::ranking::ParamList* sessioninfo) {
  delete sessioninfo_;
  sessioninfo_ = sessioninfo;
  if (sessioninfo) {
    set_has_sessioninfo();
  } else {
    clear_has_sessioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.sessionInfo)
}

// optional .ru.mail.go.webbase.ranking.ParamList uniformSessionParameters = 10;
bool Session::has_uniformsessionparameters() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Session::set_has_uniformsessionparameters() {
  _has_bits_[0] |= 0x00000010u;
}
void Session::clear_has_uniformsessionparameters() {
  _has_bits_[0] &= ~0x00000010u;
}
void Session::clear_uniformsessionparameters() {
  if (uniformsessionparameters_ != NULL) uniformsessionparameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_uniformsessionparameters();
}
const ::ru::mail::go::webbase::ranking::ParamList& Session::uniformsessionparameters() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = uniformsessionparameters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.uniformSessionParameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
::ru::mail::go::webbase::ranking::ParamList* Session::mutable_uniformsessionparameters() {
  set_has_uniformsessionparameters();
  if (uniformsessionparameters_ == NULL) {
    uniformsessionparameters_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.uniformSessionParameters)
  return uniformsessionparameters_;
}
::ru::mail::go::webbase::ranking::ParamList* Session::release_uniformsessionparameters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.uniformSessionParameters)
  clear_has_uniformsessionparameters();
  ::ru::mail::go::webbase::ranking::ParamList* temp = uniformsessionparameters_;
  uniformsessionparameters_ = NULL;
  return temp;
}
void Session::set_allocated_uniformsessionparameters(::ru::mail::go::webbase::ranking::ParamList* uniformsessionparameters) {
  delete uniformsessionparameters_;
  uniformsessionparameters_ = uniformsessionparameters;
  if (uniformsessionparameters) {
    set_has_uniformsessionparameters();
  } else {
    clear_has_uniformsessionparameters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.uniformSessionParameters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace clickrank
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
