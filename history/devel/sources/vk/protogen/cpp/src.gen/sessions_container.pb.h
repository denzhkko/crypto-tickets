// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sessions_container.proto

#ifndef PROTOBUF_sessions_5fcontainer_2eproto__INCLUDED
#define PROTOBUF_sessions_5fcontainer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "urllog_record.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace clickrank {
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionsContainer;
class SessionsContainerDefaultTypeInternal;
extern SessionsContainerDefaultTypeInternal _SessionsContainer_default_instance_;
}  // namespace clickrank
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace clickrank {

namespace protobuf_sessions_5fcontainer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sessions_5fcontainer_2eproto

// ===================================================================

class SessionsContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.clickrank.SessionsContainer) */ {
 public:
  SessionsContainer();
  virtual ~SessionsContainer();

  SessionsContainer(const SessionsContainer& from);

  inline SessionsContainer& operator=(const SessionsContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionsContainer(SessionsContainer&& from) noexcept
    : SessionsContainer() {
    *this = ::std::move(from);
  }

  inline SessionsContainer& operator=(SessionsContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionsContainer& default_instance();

  static inline const SessionsContainer* internal_default_instance() {
    return reinterpret_cast<const SessionsContainer*>(
               &_SessionsContainer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SessionsContainer* other);
  friend void swap(SessionsContainer& a, SessionsContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionsContainer* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionsContainer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionsContainer& from);
  void MergeFrom(const SessionsContainer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionsContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.clickrank.Session sessions = 2;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 2;
  const ::ru::mail::go::webbase::clickrank::Session& sessions(int index) const;
  ::ru::mail::go::webbase::clickrank::Session* mutable_sessions(int index);
  ::ru::mail::go::webbase::clickrank::Session* add_sessions();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::clickrank::Session >*
      mutable_sessions();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::clickrank::Session >&
      sessions() const;

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional uint64 nextSessionsTs = 3;
  bool has_nextsessionsts() const;
  void clear_nextsessionsts();
  static const int kNextSessionsTsFieldNumber = 3;
  ::google::protobuf::uint64 nextsessionsts() const;
  void set_nextsessionsts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.clickrank.SessionsContainer)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_nextsessionsts();
  void clear_has_nextsessionsts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::clickrank::Session > sessions_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::uint64 nextsessionsts_;
  friend struct protobuf_sessions_5fcontainer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.clickrank.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const PROTOBUF_FINAL { return New(NULL); }

  Session* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string urls = 1;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 1;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_urls(int index, ::std::string&& value);
  #endif
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_urls(::std::string&& value);
  #endif
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // repeated int32 clicks = 2;
  int clicks_size() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  ::google::protobuf::int32 clicks(int index) const;
  void set_clicks(int index, ::google::protobuf::int32 value);
  void add_clicks(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      clicks() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_clicks();

  // repeated uint64 timestampOfClicks = 3;
  int timestampofclicks_size() const;
  void clear_timestampofclicks();
  static const int kTimestampOfClicksFieldNumber = 3;
  ::google::protobuf::uint64 timestampofclicks(int index) const;
  void set_timestampofclicks(int index, ::google::protobuf::uint64 value);
  void add_timestampofclicks(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      timestampofclicks() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_timestampofclicks();

  // optional string userId = 5;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 5;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string ip = 7;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 7;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string query = 8;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 8;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
  bool has_sessioninfo() const;
  void clear_sessioninfo();
  static const int kSessionInfoFieldNumber = 9;
  const ::ru::mail::go::webbase::ranking::ParamList& sessioninfo() const;
  ::ru::mail::go::webbase::ranking::ParamList* mutable_sessioninfo();
  ::ru::mail::go::webbase::ranking::ParamList* release_sessioninfo();
  void set_allocated_sessioninfo(::ru::mail::go::webbase::ranking::ParamList* sessioninfo);

  // optional .ru.mail.go.webbase.ranking.ParamList uniformSessionParameters = 10;
  bool has_uniformsessionparameters() const;
  void clear_uniformsessionparameters();
  static const int kUniformSessionParametersFieldNumber = 10;
  const ::ru::mail::go::webbase::ranking::ParamList& uniformsessionparameters() const;
  ::ru::mail::go::webbase::ranking::ParamList* mutable_uniformsessionparameters();
  ::ru::mail::go::webbase::ranking::ParamList* release_uniformsessionparameters();
  void set_allocated_uniformsessionparameters(::ru::mail::go::webbase::ranking::ParamList* uniformsessionparameters);

  // required uint64 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional int32 startFrom = 4;
  bool has_startfrom() const;
  void clear_startfrom();
  static const int kStartFromFieldNumber = 4;
  ::google::protobuf::int32 startfrom() const;
  void set_startfrom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.clickrank.Session)
 private:
  void set_has_startfrom();
  void clear_has_startfrom();
  void set_has_userid();
  void clear_has_userid();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_ip();
  void clear_has_ip();
  void set_has_query();
  void clear_has_query();
  void set_has_sessioninfo();
  void clear_has_sessioninfo();
  void set_has_uniformsessionparameters();
  void clear_has_uniformsessionparameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > clicks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > timestampofclicks_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::ru::mail::go::webbase::ranking::ParamList* sessioninfo_;
  ::ru::mail::go::webbase::ranking::ParamList* uniformsessionparameters_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int32 startfrom_;
  friend struct protobuf_sessions_5fcontainer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionsContainer

// required string userId = 1;
inline bool SessionsContainer::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionsContainer::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionsContainer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionsContainer::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& SessionsContainer::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
  return userid_.GetNoArena();
}
inline void SessionsContainer::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}
#if LANG_CXX11
inline void SessionsContainer::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}
#endif
inline void SessionsContainer::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}
inline void SessionsContainer::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}
inline ::std::string* SessionsContainer::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionsContainer::release_userid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionsContainer::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.SessionsContainer.userId)
}

// repeated .ru.mail.go.webbase.clickrank.Session sessions = 2;
inline int SessionsContainer::sessions_size() const {
  return sessions_.size();
}
inline void SessionsContainer::clear_sessions() {
  sessions_.Clear();
}
inline const ::ru::mail::go::webbase::clickrank::Session& SessionsContainer::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return sessions_.Get(index);
}
inline ::ru::mail::go::webbase::clickrank::Session* SessionsContainer::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return sessions_.Mutable(index);
}
inline ::ru::mail::go::webbase::clickrank::Session* SessionsContainer::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::clickrank::Session >*
SessionsContainer::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return &sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::clickrank::Session >&
SessionsContainer::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.SessionsContainer.sessions)
  return sessions_;
}

// optional uint64 nextSessionsTs = 3;
inline bool SessionsContainer::has_nextsessionsts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionsContainer::set_has_nextsessionsts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionsContainer::clear_has_nextsessionsts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionsContainer::clear_nextsessionsts() {
  nextsessionsts_ = GOOGLE_ULONGLONG(0);
  clear_has_nextsessionsts();
}
inline ::google::protobuf::uint64 SessionsContainer::nextsessionsts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.SessionsContainer.nextSessionsTs)
  return nextsessionsts_;
}
inline void SessionsContainer::set_nextsessionsts(::google::protobuf::uint64 value) {
  set_has_nextsessionsts();
  nextsessionsts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.SessionsContainer.nextSessionsTs)
}

// -------------------------------------------------------------------

// Session

// repeated string urls = 1;
inline int Session::urls_size() const {
  return urls_.size();
}
inline void Session::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& Session::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.urls)
  return urls_.Get(index);
}
inline ::std::string* Session::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.urls)
  return urls_.Mutable(index);
}
inline void Session::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Session::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Session::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.urls)
}
inline void Session::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.urls)
}
inline ::std::string* Session::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.clickrank.Session.urls)
  return urls_.Add();
}
inline void Session::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.urls)
}
#if LANG_CXX11
inline void Session::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.urls)
}
#endif
inline void Session::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.clickrank.Session.urls)
}
inline void Session::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.clickrank.Session.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Session::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Session::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.urls)
  return &urls_;
}

// repeated int32 clicks = 2;
inline int Session::clicks_size() const {
  return clicks_.size();
}
inline void Session::clear_clicks() {
  clicks_.Clear();
}
inline ::google::protobuf::int32 Session::clicks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.clicks)
  return clicks_.Get(index);
}
inline void Session::set_clicks(int index, ::google::protobuf::int32 value) {
  clicks_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.clicks)
}
inline void Session::add_clicks(::google::protobuf::int32 value) {
  clicks_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.clicks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Session::clicks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.clicks)
  return clicks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Session::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.clicks)
  return &clicks_;
}

// repeated uint64 timestampOfClicks = 3;
inline int Session::timestampofclicks_size() const {
  return timestampofclicks_.size();
}
inline void Session::clear_timestampofclicks() {
  timestampofclicks_.Clear();
}
inline ::google::protobuf::uint64 Session::timestampofclicks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
  return timestampofclicks_.Get(index);
}
inline void Session::set_timestampofclicks(int index, ::google::protobuf::uint64 value) {
  timestampofclicks_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
}
inline void Session::add_timestampofclicks(::google::protobuf::uint64 value) {
  timestampofclicks_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Session::timestampofclicks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
  return timestampofclicks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Session::mutable_timestampofclicks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.timestampOfClicks)
  return &timestampofclicks_;
}

// optional int32 startFrom = 4;
inline bool Session::has_startfrom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Session::set_has_startfrom() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Session::clear_has_startfrom() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Session::clear_startfrom() {
  startfrom_ = 0;
  clear_has_startfrom();
}
inline ::google::protobuf::int32 Session::startfrom() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.startFrom)
  return startfrom_;
}
inline void Session::set_startfrom(::google::protobuf::int32 value) {
  set_has_startfrom();
  startfrom_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.startFrom)
}

// optional string userId = 5;
inline bool Session::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& Session::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.userId)
  return userid_.GetNoArena();
}
inline void Session::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.userId)
}
#if LANG_CXX11
inline void Session::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.userId)
}
#endif
inline void Session::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.userId)
}
inline void Session::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.userId)
}
inline ::std::string* Session::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_userid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.userId)
}

// required uint64 timestamp = 6;
inline bool Session::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Session::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Session::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Session::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Session::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.timestamp)
  return timestamp_;
}
inline void Session::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.timestamp)
}

// optional string ip = 7;
inline bool Session::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Session::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Session::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Session::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& Session::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.ip)
  return ip_.GetNoArena();
}
inline void Session::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.ip)
}
#if LANG_CXX11
inline void Session::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.ip)
}
#endif
inline void Session::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.ip)
}
inline void Session::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.ip)
}
inline ::std::string* Session::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.ip)
}

// optional string query = 8;
inline bool Session::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Session::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Session::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Session::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& Session::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.query)
  return query_.GetNoArena();
}
inline void Session::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.query)
}
#if LANG_CXX11
inline void Session::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.query)
}
#endif
inline void Session::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.query)
}
inline void Session::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.query)
}
inline ::std::string* Session::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.query)
}

// optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
inline bool Session::has_sessioninfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Session::set_has_sessioninfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Session::clear_has_sessioninfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Session::clear_sessioninfo() {
  if (sessioninfo_ != NULL) sessioninfo_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_sessioninfo();
}
inline const ::ru::mail::go::webbase::ranking::ParamList& Session::sessioninfo() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = sessioninfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
inline ::ru::mail::go::webbase::ranking::ParamList* Session::mutable_sessioninfo() {
  set_has_sessioninfo();
  if (sessioninfo_ == NULL) {
    sessioninfo_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  return sessioninfo_;
}
inline ::ru::mail::go::webbase::ranking::ParamList* Session::release_sessioninfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  clear_has_sessioninfo();
  ::ru::mail::go::webbase::ranking::ParamList* temp = sessioninfo_;
  sessioninfo_ = NULL;
  return temp;
}
inline void Session::set_allocated_sessioninfo(::ru::mail::go::webbase::ranking::ParamList* sessioninfo) {
  delete sessioninfo_;
  sessioninfo_ = sessioninfo;
  if (sessioninfo) {
    set_has_sessioninfo();
  } else {
    clear_has_sessioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.sessionInfo)
}

// optional .ru.mail.go.webbase.ranking.ParamList uniformSessionParameters = 10;
inline bool Session::has_uniformsessionparameters() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Session::set_has_uniformsessionparameters() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Session::clear_has_uniformsessionparameters() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Session::clear_uniformsessionparameters() {
  if (uniformsessionparameters_ != NULL) uniformsessionparameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_uniformsessionparameters();
}
inline const ::ru::mail::go::webbase::ranking::ParamList& Session::uniformsessionparameters() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = uniformsessionparameters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.uniformSessionParameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
inline ::ru::mail::go::webbase::ranking::ParamList* Session::mutable_uniformsessionparameters() {
  set_has_uniformsessionparameters();
  if (uniformsessionparameters_ == NULL) {
    uniformsessionparameters_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.uniformSessionParameters)
  return uniformsessionparameters_;
}
inline ::ru::mail::go::webbase::ranking::ParamList* Session::release_uniformsessionparameters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.uniformSessionParameters)
  clear_has_uniformsessionparameters();
  ::ru::mail::go::webbase::ranking::ParamList* temp = uniformsessionparameters_;
  uniformsessionparameters_ = NULL;
  return temp;
}
inline void Session::set_allocated_uniformsessionparameters(::ru::mail::go::webbase::ranking::ParamList* uniformsessionparameters) {
  delete uniformsessionparameters_;
  uniformsessionparameters_ = uniformsessionparameters;
  if (uniformsessionparameters) {
    set_has_uniformsessionparameters();
  } else {
    clear_has_uniformsessionparameters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.uniformSessionParameters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace clickrank
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sessions_5fcontainer_2eproto__INCLUDED
