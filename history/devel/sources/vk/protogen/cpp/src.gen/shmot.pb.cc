// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shmot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "shmot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ShmotData_FeatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShmotData_Feature>
     _instance;
} _ShmotData_Feature_default_instance_;
class ShmotData_SimilarItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShmotData_SimilarItem>
     _instance;
} _ShmotData_SimilarItem_default_instance_;
class ShmotData_MarketInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShmotData_MarketInfo>
     _instance;
} _ShmotData_MarketInfo_default_instance_;
class ShmotDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShmotData>
     _instance;
} _ShmotData_default_instance_;
class ItemRankDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ItemRank>
     _instance;
} _ItemRank_default_instance_;
class CategoryItemsForFigureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CategoryItemsForFigure>
     _instance;
} _CategoryItemsForFigure_default_instance_;

namespace protobuf_shmot_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_Feature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_Feature, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_Feature, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_SimilarItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_SimilarItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_SimilarItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_SimilarItem, similarity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, pic_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, available_sizes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, vendor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData_MarketInfo, currency_),
  0,
  1,
  5,
  ~0u,
  2,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, similar_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, admitad_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, torg_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, pic_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, firstmeet_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, img_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, site_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, geo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, direct_market_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmotData, rb_url_),
  7,
  9,
  0,
  8,
  ~0u,
  ~0u,
  4,
  5,
  1,
  11,
  ~0u,
  2,
  12,
  10,
  6,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRank, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRank, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRank, rank_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItemsForFigure, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItemsForFigure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItemsForFigure, figure_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItemsForFigure, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItemsForFigure, items_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(ShmotData_Feature)},
  { 9, 16, sizeof(ShmotData_SimilarItem)},
  { 18, 31, sizeof(ShmotData_MarketInfo)},
  { 39, 60, sizeof(ShmotData)},
  { 76, 83, sizeof(ItemRank)},
  { 85, 93, sizeof(CategoryItemsForFigure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShmotData_Feature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShmotData_SimilarItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShmotData_MarketInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShmotData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ItemRank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CategoryItemsForFigure_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "shmot.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ShmotData_Feature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShmotData_Feature_default_instance_);_ShmotData_SimilarItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShmotData_SimilarItem_default_instance_);_ShmotData_MarketInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShmotData_MarketInfo_default_instance_);_ShmotData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShmotData_default_instance_);_ItemRank_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ItemRank_default_instance_);_CategoryItemsForFigure_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CategoryItemsForFigure_default_instance_);_ShmotData_default_instance_._instance.get_mutable()->admitad_info_ = const_cast< ::ShmotData_MarketInfo*>(
      ::ShmotData_MarketInfo::internal_default_instance());
  _ShmotData_default_instance_._instance.get_mutable()->torg_info_ = const_cast< ::ShmotData_MarketInfo*>(
      ::ShmotData_MarketInfo::internal_default_instance());
  _ShmotData_default_instance_._instance.get_mutable()->direct_market_info_ = const_cast< ::ShmotData_MarketInfo*>(
      ::ShmotData_MarketInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013shmot.proto\"\237\005\n\tShmotData\022\n\n\002id\030\001 \002(\003\022"
      "\023\n\013category_id\030\002 \001(\005\022\013\n\003url\030\003 \001(\t\022\n\n\002ts\030"
      "\004 \001(\003\022$\n\010features\030\005 \003(\0132\022.ShmotData.Feat"
      "ure\022-\n\rsimilar_items\030\006 \003(\0132\026.ShmotData.S"
      "imilarItem\022+\n\014admitad_info\030\007 \001(\0132\025.Shmot"
      "Data.MarketInfo\022(\n\ttorg_info\030\010 \001(\0132\025.Shm"
      "otData.MarketInfo\022\017\n\007pic_url\030\t \001(\t\022\024\n\014fi"
      "rstmeet_ts\030\n \001(\003\022\020\n\010img_urls\030\013 \003(\t\022\014\n\004si"
      "te\030\014 \001(\t\022\021\n\tsite_hash\030\r \001(\003\022\016\n\006geo_id\030\016 "
      "\001(\005\0221\n\022direct_market_info\030\017 \001(\0132\025.ShmotD"
      "ata.MarketInfo\022\016\n\006rb_url\030\020 \001(\t\032&\n\007Featur"
      "e\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \001(\002\032-\n\013Simila"
      "rItem\022\n\n\002id\030\001 \002(\003\022\022\n\nsimilarity\030\002 \001(\002\032\247\001"
      "\n\nMarketInfo\022\013\n\003url\030\001 \002(\t\022\017\n\007pic_url\030\002 \001"
      "(\t\022\r\n\005price\030\003 \001(\002\022\027\n\017available_sizes\030\004 \003"
      "(\005\022\r\n\005title\030\005 \001(\t\022\023\n\013description\030\006 \001(\t\022\016"
      "\n\006vendor\030\007 \001(\t\022\037\n\010currency\030\010 \001(\0162\r.Curre"
      "ncyType\"$\n\010ItemRank\022\n\n\002id\030\001 \002(\003\022\014\n\004rank\030"
      "\002 \001(\002\"i\n\026CategoryItemsForFigure\022 \n\013figur"
      "e_type\030\001 \002(\0162\013.FigureType\022\023\n\013category_id"
      "\030\002 \002(\005\022\030\n\005items\030\003 \003(\0132\t.ItemRank*\265\001\n\nFig"
      "ureType\022\010\n\004Pear\020\000\022\t\n\005Apple\020\001\022\n\n\006Column\020\002"
      "\022\023\n\017InverseTriangle\020\003\022\r\n\tHourglass\020\004\022\r\n\t"
      "Rectangle\020\005\022\013\n\007PearMan\020\006\022\014\n\010AppleMan\020\007\022\016"
      "\n\nTrapezeMan\020\010\022\026\n\022InverseTriangleMan\020\t\022\020"
      "\n\014RectangleMan\020\n* \n\014CurrencyType\022\007\n\003RUB\020"
      "\001\022\007\n\003KZT\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1050);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shmot.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_shmot_2eproto

const ::google::protobuf::EnumDescriptor* FigureType_descriptor() {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_enum_descriptors[0];
}
bool FigureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor() {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_enum_descriptors[1];
}
bool CurrencyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShmotData_Feature::kNameFieldNumber;
const int ShmotData_Feature::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShmotData_Feature::ShmotData_Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_shmot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShmotData.Feature)
}
ShmotData_Feature::ShmotData_Feature(const ShmotData_Feature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ShmotData.Feature)
}

void ShmotData_Feature::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

ShmotData_Feature::~ShmotData_Feature() {
  // @@protoc_insertion_point(destructor:ShmotData.Feature)
  SharedDtor();
}

void ShmotData_Feature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShmotData_Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShmotData_Feature::descriptor() {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShmotData_Feature& ShmotData_Feature::default_instance() {
  protobuf_shmot_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShmotData_Feature* ShmotData_Feature::New(::google::protobuf::Arena* arena) const {
  ShmotData_Feature* n = new ShmotData_Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShmotData_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:ShmotData.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShmotData_Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShmotData.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.Feature.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShmotData.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShmotData.Feature)
  return false;
#undef DO_
}

void ShmotData_Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShmotData.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.Feature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShmotData.Feature)
}

::google::protobuf::uint8* ShmotData_Feature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShmotData.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.Feature.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShmotData.Feature)
  return target;
}

size_t ShmotData_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShmotData.Feature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional float value = 2;
  if (has_value()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShmotData_Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShmotData.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmotData_Feature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShmotData_Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShmotData.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShmotData.Feature)
    MergeFrom(*source);
  }
}

void ShmotData_Feature::MergeFrom(const ShmotData_Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShmotData.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmotData_Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShmotData.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmotData_Feature::CopyFrom(const ShmotData_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShmotData.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmotData_Feature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ShmotData_Feature::Swap(ShmotData_Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShmotData_Feature::InternalSwap(ShmotData_Feature* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShmotData_Feature::GetMetadata() const {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShmotData_Feature

// required string name = 1;
bool ShmotData_Feature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShmotData_Feature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ShmotData_Feature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShmotData_Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ShmotData_Feature::name() const {
  // @@protoc_insertion_point(field_get:ShmotData.Feature.name)
  return name_.GetNoArena();
}
void ShmotData_Feature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.Feature.name)
}
#if LANG_CXX11
void ShmotData_Feature::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.Feature.name)
}
#endif
void ShmotData_Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.Feature.name)
}
void ShmotData_Feature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.Feature.name)
}
::std::string* ShmotData_Feature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ShmotData.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData_Feature::release_name() {
  // @@protoc_insertion_point(field_release:ShmotData.Feature.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData_Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.Feature.name)
}

// optional float value = 2;
bool ShmotData_Feature::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShmotData_Feature::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void ShmotData_Feature::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShmotData_Feature::clear_value() {
  value_ = 0;
  clear_has_value();
}
float ShmotData_Feature::value() const {
  // @@protoc_insertion_point(field_get:ShmotData.Feature.value)
  return value_;
}
void ShmotData_Feature::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.Feature.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShmotData_SimilarItem::kIdFieldNumber;
const int ShmotData_SimilarItem::kSimilarityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShmotData_SimilarItem::ShmotData_SimilarItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_shmot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShmotData.SimilarItem)
}
ShmotData_SimilarItem::ShmotData_SimilarItem(const ShmotData_SimilarItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&similarity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(similarity_));
  // @@protoc_insertion_point(copy_constructor:ShmotData.SimilarItem)
}

void ShmotData_SimilarItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&similarity_) -
      reinterpret_cast<char*>(&id_)) + sizeof(similarity_));
}

ShmotData_SimilarItem::~ShmotData_SimilarItem() {
  // @@protoc_insertion_point(destructor:ShmotData.SimilarItem)
  SharedDtor();
}

void ShmotData_SimilarItem::SharedDtor() {
}

void ShmotData_SimilarItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShmotData_SimilarItem::descriptor() {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShmotData_SimilarItem& ShmotData_SimilarItem::default_instance() {
  protobuf_shmot_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShmotData_SimilarItem* ShmotData_SimilarItem::New(::google::protobuf::Arena* arena) const {
  ShmotData_SimilarItem* n = new ShmotData_SimilarItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShmotData_SimilarItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ShmotData.SimilarItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&similarity_) -
        reinterpret_cast<char*>(&id_)) + sizeof(similarity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShmotData_SimilarItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShmotData.SimilarItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float similarity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_similarity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &similarity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShmotData.SimilarItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShmotData.SimilarItem)
  return false;
#undef DO_
}

void ShmotData_SimilarItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShmotData.SimilarItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional float similarity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->similarity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShmotData.SimilarItem)
}

::google::protobuf::uint8* ShmotData_SimilarItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShmotData.SimilarItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional float similarity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->similarity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShmotData.SimilarItem)
  return target;
}

size_t ShmotData_SimilarItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShmotData.SimilarItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  // optional float similarity = 2;
  if (has_similarity()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShmotData_SimilarItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShmotData.SimilarItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmotData_SimilarItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShmotData_SimilarItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShmotData.SimilarItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShmotData.SimilarItem)
    MergeFrom(*source);
  }
}

void ShmotData_SimilarItem::MergeFrom(const ShmotData_SimilarItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShmotData.SimilarItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      similarity_ = from.similarity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmotData_SimilarItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShmotData.SimilarItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmotData_SimilarItem::CopyFrom(const ShmotData_SimilarItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShmotData.SimilarItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmotData_SimilarItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ShmotData_SimilarItem::Swap(ShmotData_SimilarItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShmotData_SimilarItem::InternalSwap(ShmotData_SimilarItem* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(similarity_, other->similarity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShmotData_SimilarItem::GetMetadata() const {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShmotData_SimilarItem

// required int64 id = 1;
bool ShmotData_SimilarItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShmotData_SimilarItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ShmotData_SimilarItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShmotData_SimilarItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 ShmotData_SimilarItem::id() const {
  // @@protoc_insertion_point(field_get:ShmotData.SimilarItem.id)
  return id_;
}
void ShmotData_SimilarItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.SimilarItem.id)
}

// optional float similarity = 2;
bool ShmotData_SimilarItem::has_similarity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShmotData_SimilarItem::set_has_similarity() {
  _has_bits_[0] |= 0x00000002u;
}
void ShmotData_SimilarItem::clear_has_similarity() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShmotData_SimilarItem::clear_similarity() {
  similarity_ = 0;
  clear_has_similarity();
}
float ShmotData_SimilarItem::similarity() const {
  // @@protoc_insertion_point(field_get:ShmotData.SimilarItem.similarity)
  return similarity_;
}
void ShmotData_SimilarItem::set_similarity(float value) {
  set_has_similarity();
  similarity_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.SimilarItem.similarity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShmotData_MarketInfo::kUrlFieldNumber;
const int ShmotData_MarketInfo::kPicUrlFieldNumber;
const int ShmotData_MarketInfo::kPriceFieldNumber;
const int ShmotData_MarketInfo::kAvailableSizesFieldNumber;
const int ShmotData_MarketInfo::kTitleFieldNumber;
const int ShmotData_MarketInfo::kDescriptionFieldNumber;
const int ShmotData_MarketInfo::kVendorFieldNumber;
const int ShmotData_MarketInfo::kCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShmotData_MarketInfo::ShmotData_MarketInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_shmot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShmotData.MarketInfo)
}
ShmotData_MarketInfo::ShmotData_MarketInfo(const ShmotData_MarketInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      available_sizes_(from.available_sizes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  pic_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pic_url()) {
    pic_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor()) {
    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&price_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:ShmotData.MarketInfo)
}

void ShmotData_MarketInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  currency_ = 1;
}

ShmotData_MarketInfo::~ShmotData_MarketInfo() {
  // @@protoc_insertion_point(destructor:ShmotData.MarketInfo)
  SharedDtor();
}

void ShmotData_MarketInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShmotData_MarketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShmotData_MarketInfo::descriptor() {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShmotData_MarketInfo& ShmotData_MarketInfo::default_instance() {
  protobuf_shmot_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShmotData_MarketInfo* ShmotData_MarketInfo::New(::google::protobuf::Arena* arena) const {
  ShmotData_MarketInfo* n = new ShmotData_MarketInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShmotData_MarketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShmotData.MarketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_sizes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pic_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pic_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!vendor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vendor_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 96u) {
    price_ = 0;
    currency_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShmotData_MarketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShmotData.MarketInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.MarketInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pic_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pic_url().data(), static_cast<int>(this->pic_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.MarketInfo.pic_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 available_sizes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_available_sizes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_available_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.MarketInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.MarketInfo.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vendor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendor().data(), static_cast<int>(this->vendor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.MarketInfo.vendor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CurrencyType currency = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CurrencyType_IsValid(value)) {
            set_currency(static_cast< ::CurrencyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShmotData.MarketInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShmotData.MarketInfo)
  return false;
#undef DO_
}

void ShmotData_MarketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShmotData.MarketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string pic_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic_url().data(), static_cast<int>(this->pic_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.pic_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pic_url(), output);
  }

  // optional float price = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }

  // repeated int32 available_sizes = 4;
  for (int i = 0, n = this->available_sizes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->available_sizes(i), output);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional string vendor = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), static_cast<int>(this->vendor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->vendor(), output);
  }

  // optional .CurrencyType currency = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->currency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShmotData.MarketInfo)
}

::google::protobuf::uint8* ShmotData_MarketInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShmotData.MarketInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string pic_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic_url().data(), static_cast<int>(this->pic_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.pic_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pic_url(), target);
  }

  // optional float price = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }

  // repeated int32 available_sizes = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->available_sizes_, target);

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional string vendor = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), static_cast<int>(this->vendor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.MarketInfo.vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->vendor(), target);
  }

  // optional .CurrencyType currency = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->currency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShmotData.MarketInfo)
  return target;
}

size_t ShmotData_MarketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShmotData.MarketInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // repeated int32 available_sizes = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->available_sizes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->available_sizes_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 126u) {
    // optional string pic_url = 2;
    if (has_pic_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic_url());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string vendor = 7;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }

    // optional float price = 3;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // optional .CurrencyType currency = 8;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShmotData_MarketInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShmotData.MarketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmotData_MarketInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShmotData_MarketInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShmotData.MarketInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShmotData.MarketInfo)
    MergeFrom(*source);
  }
}

void ShmotData_MarketInfo::MergeFrom(const ShmotData_MarketInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShmotData.MarketInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_sizes_.MergeFrom(from.available_sizes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pic_url();
      pic_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_vendor();
      vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000040u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmotData_MarketInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShmotData.MarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmotData_MarketInfo::CopyFrom(const ShmotData_MarketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShmotData.MarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmotData_MarketInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ShmotData_MarketInfo::Swap(ShmotData_MarketInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShmotData_MarketInfo::InternalSwap(ShmotData_MarketInfo* other) {
  using std::swap;
  available_sizes_.InternalSwap(&other->available_sizes_);
  url_.Swap(&other->url_);
  pic_url_.Swap(&other->pic_url_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  vendor_.Swap(&other->vendor_);
  swap(price_, other->price_);
  swap(currency_, other->currency_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShmotData_MarketInfo::GetMetadata() const {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShmotData_MarketInfo

// required string url = 1;
bool ShmotData_MarketInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShmotData_MarketInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ShmotData_MarketInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShmotData_MarketInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ShmotData_MarketInfo::url() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.url)
  return url_.GetNoArena();
}
void ShmotData_MarketInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.url)
}
#if LANG_CXX11
void ShmotData_MarketInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.url)
}
#endif
void ShmotData_MarketInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.url)
}
void ShmotData_MarketInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.url)
}
::std::string* ShmotData_MarketInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData_MarketInfo::release_url() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData_MarketInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.url)
}

// optional string pic_url = 2;
bool ShmotData_MarketInfo::has_pic_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShmotData_MarketInfo::set_has_pic_url() {
  _has_bits_[0] |= 0x00000002u;
}
void ShmotData_MarketInfo::clear_has_pic_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShmotData_MarketInfo::clear_pic_url() {
  pic_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pic_url();
}
const ::std::string& ShmotData_MarketInfo::pic_url() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.pic_url)
  return pic_url_.GetNoArena();
}
void ShmotData_MarketInfo::set_pic_url(const ::std::string& value) {
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.pic_url)
}
#if LANG_CXX11
void ShmotData_MarketInfo::set_pic_url(::std::string&& value) {
  set_has_pic_url();
  pic_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.pic_url)
}
#endif
void ShmotData_MarketInfo::set_pic_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.pic_url)
}
void ShmotData_MarketInfo::set_pic_url(const char* value, size_t size) {
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.pic_url)
}
::std::string* ShmotData_MarketInfo::mutable_pic_url() {
  set_has_pic_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.pic_url)
  return pic_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData_MarketInfo::release_pic_url() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.pic_url)
  clear_has_pic_url();
  return pic_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData_MarketInfo::set_allocated_pic_url(::std::string* pic_url) {
  if (pic_url != NULL) {
    set_has_pic_url();
  } else {
    clear_has_pic_url();
  }
  pic_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pic_url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.pic_url)
}

// optional float price = 3;
bool ShmotData_MarketInfo::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShmotData_MarketInfo::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
void ShmotData_MarketInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShmotData_MarketInfo::clear_price() {
  price_ = 0;
  clear_has_price();
}
float ShmotData_MarketInfo::price() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.price)
  return price_;
}
void ShmotData_MarketInfo::set_price(float value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.price)
}

// repeated int32 available_sizes = 4;
int ShmotData_MarketInfo::available_sizes_size() const {
  return available_sizes_.size();
}
void ShmotData_MarketInfo::clear_available_sizes() {
  available_sizes_.Clear();
}
::google::protobuf::int32 ShmotData_MarketInfo::available_sizes(int index) const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.available_sizes)
  return available_sizes_.Get(index);
}
void ShmotData_MarketInfo::set_available_sizes(int index, ::google::protobuf::int32 value) {
  available_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.available_sizes)
}
void ShmotData_MarketInfo::add_available_sizes(::google::protobuf::int32 value) {
  available_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:ShmotData.MarketInfo.available_sizes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShmotData_MarketInfo::available_sizes() const {
  // @@protoc_insertion_point(field_list:ShmotData.MarketInfo.available_sizes)
  return available_sizes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShmotData_MarketInfo::mutable_available_sizes() {
  // @@protoc_insertion_point(field_mutable_list:ShmotData.MarketInfo.available_sizes)
  return &available_sizes_;
}

// optional string title = 5;
bool ShmotData_MarketInfo::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShmotData_MarketInfo::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void ShmotData_MarketInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShmotData_MarketInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& ShmotData_MarketInfo::title() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.title)
  return title_.GetNoArena();
}
void ShmotData_MarketInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.title)
}
#if LANG_CXX11
void ShmotData_MarketInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.title)
}
#endif
void ShmotData_MarketInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.title)
}
void ShmotData_MarketInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.title)
}
::std::string* ShmotData_MarketInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData_MarketInfo::release_title() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData_MarketInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.title)
}

// optional string description = 6;
bool ShmotData_MarketInfo::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShmotData_MarketInfo::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
void ShmotData_MarketInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShmotData_MarketInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& ShmotData_MarketInfo::description() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.description)
  return description_.GetNoArena();
}
void ShmotData_MarketInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.description)
}
#if LANG_CXX11
void ShmotData_MarketInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.description)
}
#endif
void ShmotData_MarketInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.description)
}
void ShmotData_MarketInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.description)
}
::std::string* ShmotData_MarketInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData_MarketInfo::release_description() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData_MarketInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.description)
}

// optional string vendor = 7;
bool ShmotData_MarketInfo::has_vendor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShmotData_MarketInfo::set_has_vendor() {
  _has_bits_[0] |= 0x00000010u;
}
void ShmotData_MarketInfo::clear_has_vendor() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShmotData_MarketInfo::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vendor();
}
const ::std::string& ShmotData_MarketInfo::vendor() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.vendor)
  return vendor_.GetNoArena();
}
void ShmotData_MarketInfo::set_vendor(const ::std::string& value) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.vendor)
}
#if LANG_CXX11
void ShmotData_MarketInfo::set_vendor(::std::string&& value) {
  set_has_vendor();
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.vendor)
}
#endif
void ShmotData_MarketInfo::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.vendor)
}
void ShmotData_MarketInfo::set_vendor(const char* value, size_t size) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.vendor)
}
::std::string* ShmotData_MarketInfo::mutable_vendor() {
  set_has_vendor();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData_MarketInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.vendor)
  clear_has_vendor();
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData_MarketInfo::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    set_has_vendor();
  } else {
    clear_has_vendor();
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.vendor)
}

// optional .CurrencyType currency = 8;
bool ShmotData_MarketInfo::has_currency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShmotData_MarketInfo::set_has_currency() {
  _has_bits_[0] |= 0x00000040u;
}
void ShmotData_MarketInfo::clear_has_currency() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShmotData_MarketInfo::clear_currency() {
  currency_ = 1;
  clear_has_currency();
}
::CurrencyType ShmotData_MarketInfo::currency() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.currency)
  return static_cast< ::CurrencyType >(currency_);
}
void ShmotData_MarketInfo::set_currency(::CurrencyType value) {
  assert(::CurrencyType_IsValid(value));
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.currency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShmotData::kIdFieldNumber;
const int ShmotData::kCategoryIdFieldNumber;
const int ShmotData::kUrlFieldNumber;
const int ShmotData::kTsFieldNumber;
const int ShmotData::kFeaturesFieldNumber;
const int ShmotData::kSimilarItemsFieldNumber;
const int ShmotData::kAdmitadInfoFieldNumber;
const int ShmotData::kTorgInfoFieldNumber;
const int ShmotData::kPicUrlFieldNumber;
const int ShmotData::kFirstmeetTsFieldNumber;
const int ShmotData::kImgUrlsFieldNumber;
const int ShmotData::kSiteFieldNumber;
const int ShmotData::kSiteHashFieldNumber;
const int ShmotData::kGeoIdFieldNumber;
const int ShmotData::kDirectMarketInfoFieldNumber;
const int ShmotData::kRbUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShmotData::ShmotData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_shmot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShmotData)
}
ShmotData::ShmotData(const ShmotData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_),
      similar_items_(from.similar_items_),
      img_urls_(from.img_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  pic_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pic_url()) {
    pic_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_url_);
  }
  site_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site()) {
    site_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_);
  }
  rb_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rb_url()) {
    rb_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rb_url_);
  }
  if (from.has_admitad_info()) {
    admitad_info_ = new ::ShmotData_MarketInfo(*from.admitad_info_);
  } else {
    admitad_info_ = NULL;
  }
  if (from.has_torg_info()) {
    torg_info_ = new ::ShmotData_MarketInfo(*from.torg_info_);
  } else {
    torg_info_ = NULL;
  }
  if (from.has_direct_market_info()) {
    direct_market_info_ = new ::ShmotData_MarketInfo(*from.direct_market_info_);
  } else {
    direct_market_info_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&site_hash_) -
    reinterpret_cast<char*>(&id_)) + sizeof(site_hash_));
  // @@protoc_insertion_point(copy_constructor:ShmotData)
}

void ShmotData::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&admitad_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&site_hash_) -
      reinterpret_cast<char*>(&admitad_info_)) + sizeof(site_hash_));
}

ShmotData::~ShmotData() {
  // @@protoc_insertion_point(destructor:ShmotData)
  SharedDtor();
}

void ShmotData::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete admitad_info_;
  if (this != internal_default_instance()) delete torg_info_;
  if (this != internal_default_instance()) delete direct_market_info_;
}

void ShmotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShmotData::descriptor() {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShmotData& ShmotData::default_instance() {
  protobuf_shmot_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShmotData* ShmotData::New(::google::protobuf::Arena* arena) const {
  ShmotData* n = new ShmotData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShmotData::Clear() {
// @@protoc_insertion_point(message_clear_start:ShmotData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  similar_items_.Clear();
  img_urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pic_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pic_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!site_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*site_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!rb_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rb_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(admitad_info_ != NULL);
      admitad_info_->::ShmotData_MarketInfo::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(torg_info_ != NULL);
      torg_info_->::ShmotData_MarketInfo::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(direct_market_info_ != NULL);
      direct_market_info_->::ShmotData_MarketInfo::Clear();
    }
  }
  id_ = GOOGLE_LONGLONG(0);
  if (cached_has_bits & 7936u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&site_hash_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(site_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShmotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShmotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 category_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ShmotData.Feature features = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ShmotData.SimilarItem similar_items = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_similar_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ShmotData.MarketInfo admitad_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admitad_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ShmotData.MarketInfo torg_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torg_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pic_url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pic_url().data(), static_cast<int>(this->pic_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.pic_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 firstmeet_ts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_firstmeet_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firstmeet_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string img_urls = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_img_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_urls(this->img_urls_size() - 1).data(),
            static_cast<int>(this->img_urls(this->img_urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.img_urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site().data(), static_cast<int>(this->site().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.site");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 site_hash = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_site_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &site_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 geo_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_geo_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ShmotData.MarketInfo direct_market_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct_market_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rb_url = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rb_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rb_url().data(), static_cast<int>(this->rb_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShmotData.rb_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShmotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShmotData)
  return false;
#undef DO_
}

void ShmotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShmotData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 category_id = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional int64 ts = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ts(), output);
  }

  // repeated .ShmotData.Feature features = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->features(static_cast<int>(i)), output);
  }

  // repeated .ShmotData.SimilarItem similar_items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->similar_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->similar_items(static_cast<int>(i)), output);
  }

  // optional .ShmotData.MarketInfo admitad_info = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->admitad_info_, output);
  }

  // optional .ShmotData.MarketInfo torg_info = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->torg_info_, output);
  }

  // optional string pic_url = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic_url().data(), static_cast<int>(this->pic_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.pic_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->pic_url(), output);
  }

  // optional int64 firstmeet_ts = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->firstmeet_ts(), output);
  }

  // repeated string img_urls = 11;
  for (int i = 0, n = this->img_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_urls(i).data(), static_cast<int>(this->img_urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.img_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->img_urls(i), output);
  }

  // optional string site = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site().data(), static_cast<int>(this->site().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.site");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->site(), output);
  }

  // optional int64 site_hash = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->site_hash(), output);
  }

  // optional int32 geo_id = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->geo_id(), output);
  }

  // optional .ShmotData.MarketInfo direct_market_info = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->direct_market_info_, output);
  }

  // optional string rb_url = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rb_url().data(), static_cast<int>(this->rb_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.rb_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->rb_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShmotData)
}

::google::protobuf::uint8* ShmotData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShmotData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 category_id = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category_id(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional int64 ts = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ts(), target);
  }

  // repeated .ShmotData.Feature features = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->features(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ShmotData.SimilarItem similar_items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->similar_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->similar_items(static_cast<int>(i)), deterministic, target);
  }

  // optional .ShmotData.MarketInfo admitad_info = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->admitad_info_, deterministic, target);
  }

  // optional .ShmotData.MarketInfo torg_info = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->torg_info_, deterministic, target);
  }

  // optional string pic_url = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic_url().data(), static_cast<int>(this->pic_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.pic_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pic_url(), target);
  }

  // optional int64 firstmeet_ts = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->firstmeet_ts(), target);
  }

  // repeated string img_urls = 11;
  for (int i = 0, n = this->img_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_urls(i).data(), static_cast<int>(this->img_urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.img_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->img_urls(i), target);
  }

  // optional string site = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site().data(), static_cast<int>(this->site().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.site");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->site(), target);
  }

  // optional int64 site_hash = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->site_hash(), target);
  }

  // optional int32 geo_id = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->geo_id(), target);
  }

  // optional .ShmotData.MarketInfo direct_market_info = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->direct_market_info_, deterministic, target);
  }

  // optional string rb_url = 16;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rb_url().data(), static_cast<int>(this->rb_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ShmotData.rb_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->rb_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShmotData)
  return target;
}

size_t ShmotData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShmotData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  // repeated .ShmotData.Feature features = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  // repeated .ShmotData.SimilarItem similar_items = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->similar_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->similar_items(static_cast<int>(i)));
    }
  }

  // repeated string img_urls = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->img_urls_size());
  for (int i = 0, n = this->img_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->img_urls(i));
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string pic_url = 9;
    if (has_pic_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic_url());
    }

    // optional string site = 12;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site());
    }

    // optional string rb_url = 16;
    if (has_rb_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rb_url());
    }

    // optional .ShmotData.MarketInfo admitad_info = 7;
    if (has_admitad_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->admitad_info_);
    }

    // optional .ShmotData.MarketInfo torg_info = 8;
    if (has_torg_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->torg_info_);
    }

    // optional .ShmotData.MarketInfo direct_market_info = 15;
    if (has_direct_market_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direct_market_info_);
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int64 ts = 4;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ts());
    }

    // optional int32 category_id = 2;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // optional int32 geo_id = 14;
    if (has_geo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geo_id());
    }

    // optional int64 firstmeet_ts = 10;
    if (has_firstmeet_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firstmeet_ts());
    }

    // optional int64 site_hash = 13;
    if (has_site_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->site_hash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShmotData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShmotData)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmotData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShmotData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShmotData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShmotData)
    MergeFrom(*source);
  }
}

void ShmotData::MergeFrom(const ShmotData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShmotData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  similar_items_.MergeFrom(from.similar_items_);
  img_urls_.MergeFrom(from.img_urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pic_url();
      pic_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_site();
      site_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_rb_url();
      rb_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rb_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_admitad_info()->::ShmotData_MarketInfo::MergeFrom(from.admitad_info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_torg_info()->::ShmotData_MarketInfo::MergeFrom(from.torg_info());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_direct_market_info()->::ShmotData_MarketInfo::MergeFrom(from.direct_market_info());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000200u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      geo_id_ = from.geo_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      firstmeet_ts_ = from.firstmeet_ts_;
    }
    if (cached_has_bits & 0x00001000u) {
      site_hash_ = from.site_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmotData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShmotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmotData::CopyFrom(const ShmotData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShmotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmotData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->features())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->similar_items())) return false;
  if (has_admitad_info()) {
    if (!this->admitad_info_->IsInitialized()) return false;
  }
  if (has_torg_info()) {
    if (!this->torg_info_->IsInitialized()) return false;
  }
  if (has_direct_market_info()) {
    if (!this->direct_market_info_->IsInitialized()) return false;
  }
  return true;
}

void ShmotData::Swap(ShmotData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShmotData::InternalSwap(ShmotData* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  similar_items_.InternalSwap(&other->similar_items_);
  img_urls_.InternalSwap(&other->img_urls_);
  url_.Swap(&other->url_);
  pic_url_.Swap(&other->pic_url_);
  site_.Swap(&other->site_);
  rb_url_.Swap(&other->rb_url_);
  swap(admitad_info_, other->admitad_info_);
  swap(torg_info_, other->torg_info_);
  swap(direct_market_info_, other->direct_market_info_);
  swap(id_, other->id_);
  swap(ts_, other->ts_);
  swap(category_id_, other->category_id_);
  swap(geo_id_, other->geo_id_);
  swap(firstmeet_ts_, other->firstmeet_ts_);
  swap(site_hash_, other->site_hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShmotData::GetMetadata() const {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShmotData

// required int64 id = 1;
bool ShmotData::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ShmotData::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
void ShmotData::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void ShmotData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 ShmotData::id() const {
  // @@protoc_insertion_point(field_get:ShmotData.id)
  return id_;
}
void ShmotData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.id)
}

// optional int32 category_id = 2;
bool ShmotData::has_category_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ShmotData::set_has_category_id() {
  _has_bits_[0] |= 0x00000200u;
}
void ShmotData::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void ShmotData::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
::google::protobuf::int32 ShmotData::category_id() const {
  // @@protoc_insertion_point(field_get:ShmotData.category_id)
  return category_id_;
}
void ShmotData::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.category_id)
}

// optional string url = 3;
bool ShmotData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShmotData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ShmotData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShmotData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ShmotData::url() const {
  // @@protoc_insertion_point(field_get:ShmotData.url)
  return url_.GetNoArena();
}
void ShmotData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.url)
}
#if LANG_CXX11
void ShmotData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.url)
}
#endif
void ShmotData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.url)
}
void ShmotData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.url)
}
::std::string* ShmotData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData::release_url() {
  // @@protoc_insertion_point(field_release:ShmotData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.url)
}

// optional int64 ts = 4;
bool ShmotData::has_ts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ShmotData::set_has_ts() {
  _has_bits_[0] |= 0x00000100u;
}
void ShmotData::clear_has_ts() {
  _has_bits_[0] &= ~0x00000100u;
}
void ShmotData::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
  clear_has_ts();
}
::google::protobuf::int64 ShmotData::ts() const {
  // @@protoc_insertion_point(field_get:ShmotData.ts)
  return ts_;
}
void ShmotData::set_ts(::google::protobuf::int64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.ts)
}

// repeated .ShmotData.Feature features = 5;
int ShmotData::features_size() const {
  return features_.size();
}
void ShmotData::clear_features() {
  features_.Clear();
}
const ::ShmotData_Feature& ShmotData::features(int index) const {
  // @@protoc_insertion_point(field_get:ShmotData.features)
  return features_.Get(index);
}
::ShmotData_Feature* ShmotData::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ShmotData.features)
  return features_.Mutable(index);
}
::ShmotData_Feature* ShmotData::add_features() {
  // @@protoc_insertion_point(field_add:ShmotData.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShmotData_Feature >*
ShmotData::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ShmotData.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::ShmotData_Feature >&
ShmotData::features() const {
  // @@protoc_insertion_point(field_list:ShmotData.features)
  return features_;
}

// repeated .ShmotData.SimilarItem similar_items = 6;
int ShmotData::similar_items_size() const {
  return similar_items_.size();
}
void ShmotData::clear_similar_items() {
  similar_items_.Clear();
}
const ::ShmotData_SimilarItem& ShmotData::similar_items(int index) const {
  // @@protoc_insertion_point(field_get:ShmotData.similar_items)
  return similar_items_.Get(index);
}
::ShmotData_SimilarItem* ShmotData::mutable_similar_items(int index) {
  // @@protoc_insertion_point(field_mutable:ShmotData.similar_items)
  return similar_items_.Mutable(index);
}
::ShmotData_SimilarItem* ShmotData::add_similar_items() {
  // @@protoc_insertion_point(field_add:ShmotData.similar_items)
  return similar_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ShmotData_SimilarItem >*
ShmotData::mutable_similar_items() {
  // @@protoc_insertion_point(field_mutable_list:ShmotData.similar_items)
  return &similar_items_;
}
const ::google::protobuf::RepeatedPtrField< ::ShmotData_SimilarItem >&
ShmotData::similar_items() const {
  // @@protoc_insertion_point(field_list:ShmotData.similar_items)
  return similar_items_;
}

// optional .ShmotData.MarketInfo admitad_info = 7;
bool ShmotData::has_admitad_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShmotData::set_has_admitad_info() {
  _has_bits_[0] |= 0x00000010u;
}
void ShmotData::clear_has_admitad_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShmotData::clear_admitad_info() {
  if (admitad_info_ != NULL) admitad_info_->::ShmotData_MarketInfo::Clear();
  clear_has_admitad_info();
}
const ::ShmotData_MarketInfo& ShmotData::admitad_info() const {
  const ::ShmotData_MarketInfo* p = admitad_info_;
  // @@protoc_insertion_point(field_get:ShmotData.admitad_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ShmotData_MarketInfo*>(
      &::_ShmotData_MarketInfo_default_instance_);
}
::ShmotData_MarketInfo* ShmotData::mutable_admitad_info() {
  set_has_admitad_info();
  if (admitad_info_ == NULL) {
    admitad_info_ = new ::ShmotData_MarketInfo;
  }
  // @@protoc_insertion_point(field_mutable:ShmotData.admitad_info)
  return admitad_info_;
}
::ShmotData_MarketInfo* ShmotData::release_admitad_info() {
  // @@protoc_insertion_point(field_release:ShmotData.admitad_info)
  clear_has_admitad_info();
  ::ShmotData_MarketInfo* temp = admitad_info_;
  admitad_info_ = NULL;
  return temp;
}
void ShmotData::set_allocated_admitad_info(::ShmotData_MarketInfo* admitad_info) {
  delete admitad_info_;
  admitad_info_ = admitad_info;
  if (admitad_info) {
    set_has_admitad_info();
  } else {
    clear_has_admitad_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ShmotData.admitad_info)
}

// optional .ShmotData.MarketInfo torg_info = 8;
bool ShmotData::has_torg_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShmotData::set_has_torg_info() {
  _has_bits_[0] |= 0x00000020u;
}
void ShmotData::clear_has_torg_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShmotData::clear_torg_info() {
  if (torg_info_ != NULL) torg_info_->::ShmotData_MarketInfo::Clear();
  clear_has_torg_info();
}
const ::ShmotData_MarketInfo& ShmotData::torg_info() const {
  const ::ShmotData_MarketInfo* p = torg_info_;
  // @@protoc_insertion_point(field_get:ShmotData.torg_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ShmotData_MarketInfo*>(
      &::_ShmotData_MarketInfo_default_instance_);
}
::ShmotData_MarketInfo* ShmotData::mutable_torg_info() {
  set_has_torg_info();
  if (torg_info_ == NULL) {
    torg_info_ = new ::ShmotData_MarketInfo;
  }
  // @@protoc_insertion_point(field_mutable:ShmotData.torg_info)
  return torg_info_;
}
::ShmotData_MarketInfo* ShmotData::release_torg_info() {
  // @@protoc_insertion_point(field_release:ShmotData.torg_info)
  clear_has_torg_info();
  ::ShmotData_MarketInfo* temp = torg_info_;
  torg_info_ = NULL;
  return temp;
}
void ShmotData::set_allocated_torg_info(::ShmotData_MarketInfo* torg_info) {
  delete torg_info_;
  torg_info_ = torg_info;
  if (torg_info) {
    set_has_torg_info();
  } else {
    clear_has_torg_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ShmotData.torg_info)
}

// optional string pic_url = 9;
bool ShmotData::has_pic_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShmotData::set_has_pic_url() {
  _has_bits_[0] |= 0x00000002u;
}
void ShmotData::clear_has_pic_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShmotData::clear_pic_url() {
  pic_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pic_url();
}
const ::std::string& ShmotData::pic_url() const {
  // @@protoc_insertion_point(field_get:ShmotData.pic_url)
  return pic_url_.GetNoArena();
}
void ShmotData::set_pic_url(const ::std::string& value) {
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.pic_url)
}
#if LANG_CXX11
void ShmotData::set_pic_url(::std::string&& value) {
  set_has_pic_url();
  pic_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.pic_url)
}
#endif
void ShmotData::set_pic_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.pic_url)
}
void ShmotData::set_pic_url(const char* value, size_t size) {
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.pic_url)
}
::std::string* ShmotData::mutable_pic_url() {
  set_has_pic_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.pic_url)
  return pic_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData::release_pic_url() {
  // @@protoc_insertion_point(field_release:ShmotData.pic_url)
  clear_has_pic_url();
  return pic_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData::set_allocated_pic_url(::std::string* pic_url) {
  if (pic_url != NULL) {
    set_has_pic_url();
  } else {
    clear_has_pic_url();
  }
  pic_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pic_url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.pic_url)
}

// optional int64 firstmeet_ts = 10;
bool ShmotData::has_firstmeet_ts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ShmotData::set_has_firstmeet_ts() {
  _has_bits_[0] |= 0x00000800u;
}
void ShmotData::clear_has_firstmeet_ts() {
  _has_bits_[0] &= ~0x00000800u;
}
void ShmotData::clear_firstmeet_ts() {
  firstmeet_ts_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeet_ts();
}
::google::protobuf::int64 ShmotData::firstmeet_ts() const {
  // @@protoc_insertion_point(field_get:ShmotData.firstmeet_ts)
  return firstmeet_ts_;
}
void ShmotData::set_firstmeet_ts(::google::protobuf::int64 value) {
  set_has_firstmeet_ts();
  firstmeet_ts_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.firstmeet_ts)
}

// repeated string img_urls = 11;
int ShmotData::img_urls_size() const {
  return img_urls_.size();
}
void ShmotData::clear_img_urls() {
  img_urls_.Clear();
}
const ::std::string& ShmotData::img_urls(int index) const {
  // @@protoc_insertion_point(field_get:ShmotData.img_urls)
  return img_urls_.Get(index);
}
::std::string* ShmotData::mutable_img_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ShmotData.img_urls)
  return img_urls_.Mutable(index);
}
void ShmotData::set_img_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ShmotData.img_urls)
  img_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ShmotData::set_img_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ShmotData.img_urls)
  img_urls_.Mutable(index)->assign(std::move(value));
}
#endif
void ShmotData::set_img_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  img_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ShmotData.img_urls)
}
void ShmotData::set_img_urls(int index, const char* value, size_t size) {
  img_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShmotData.img_urls)
}
::std::string* ShmotData::add_img_urls() {
  // @@protoc_insertion_point(field_add_mutable:ShmotData.img_urls)
  return img_urls_.Add();
}
void ShmotData::add_img_urls(const ::std::string& value) {
  img_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ShmotData.img_urls)
}
#if LANG_CXX11
void ShmotData::add_img_urls(::std::string&& value) {
  img_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ShmotData.img_urls)
}
#endif
void ShmotData::add_img_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  img_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ShmotData.img_urls)
}
void ShmotData::add_img_urls(const char* value, size_t size) {
  img_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ShmotData.img_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShmotData::img_urls() const {
  // @@protoc_insertion_point(field_list:ShmotData.img_urls)
  return img_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ShmotData::mutable_img_urls() {
  // @@protoc_insertion_point(field_mutable_list:ShmotData.img_urls)
  return &img_urls_;
}

// optional string site = 12;
bool ShmotData::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShmotData::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
void ShmotData::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShmotData::clear_site() {
  site_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site();
}
const ::std::string& ShmotData::site() const {
  // @@protoc_insertion_point(field_get:ShmotData.site)
  return site_.GetNoArena();
}
void ShmotData::set_site(const ::std::string& value) {
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.site)
}
#if LANG_CXX11
void ShmotData::set_site(::std::string&& value) {
  set_has_site();
  site_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.site)
}
#endif
void ShmotData::set_site(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.site)
}
void ShmotData::set_site(const char* value, size_t size) {
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.site)
}
::std::string* ShmotData::mutable_site() {
  set_has_site();
  // @@protoc_insertion_point(field_mutable:ShmotData.site)
  return site_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData::release_site() {
  // @@protoc_insertion_point(field_release:ShmotData.site)
  clear_has_site();
  return site_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData::set_allocated_site(::std::string* site) {
  if (site != NULL) {
    set_has_site();
  } else {
    clear_has_site();
  }
  site_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.site)
}

// optional int64 site_hash = 13;
bool ShmotData::has_site_hash() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ShmotData::set_has_site_hash() {
  _has_bits_[0] |= 0x00001000u;
}
void ShmotData::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00001000u;
}
void ShmotData::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
::google::protobuf::int64 ShmotData::site_hash() const {
  // @@protoc_insertion_point(field_get:ShmotData.site_hash)
  return site_hash_;
}
void ShmotData::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.site_hash)
}

// optional int32 geo_id = 14;
bool ShmotData::has_geo_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ShmotData::set_has_geo_id() {
  _has_bits_[0] |= 0x00000400u;
}
void ShmotData::clear_has_geo_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void ShmotData::clear_geo_id() {
  geo_id_ = 0;
  clear_has_geo_id();
}
::google::protobuf::int32 ShmotData::geo_id() const {
  // @@protoc_insertion_point(field_get:ShmotData.geo_id)
  return geo_id_;
}
void ShmotData::set_geo_id(::google::protobuf::int32 value) {
  set_has_geo_id();
  geo_id_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.geo_id)
}

// optional .ShmotData.MarketInfo direct_market_info = 15;
bool ShmotData::has_direct_market_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShmotData::set_has_direct_market_info() {
  _has_bits_[0] |= 0x00000040u;
}
void ShmotData::clear_has_direct_market_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShmotData::clear_direct_market_info() {
  if (direct_market_info_ != NULL) direct_market_info_->::ShmotData_MarketInfo::Clear();
  clear_has_direct_market_info();
}
const ::ShmotData_MarketInfo& ShmotData::direct_market_info() const {
  const ::ShmotData_MarketInfo* p = direct_market_info_;
  // @@protoc_insertion_point(field_get:ShmotData.direct_market_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ShmotData_MarketInfo*>(
      &::_ShmotData_MarketInfo_default_instance_);
}
::ShmotData_MarketInfo* ShmotData::mutable_direct_market_info() {
  set_has_direct_market_info();
  if (direct_market_info_ == NULL) {
    direct_market_info_ = new ::ShmotData_MarketInfo;
  }
  // @@protoc_insertion_point(field_mutable:ShmotData.direct_market_info)
  return direct_market_info_;
}
::ShmotData_MarketInfo* ShmotData::release_direct_market_info() {
  // @@protoc_insertion_point(field_release:ShmotData.direct_market_info)
  clear_has_direct_market_info();
  ::ShmotData_MarketInfo* temp = direct_market_info_;
  direct_market_info_ = NULL;
  return temp;
}
void ShmotData::set_allocated_direct_market_info(::ShmotData_MarketInfo* direct_market_info) {
  delete direct_market_info_;
  direct_market_info_ = direct_market_info;
  if (direct_market_info) {
    set_has_direct_market_info();
  } else {
    clear_has_direct_market_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ShmotData.direct_market_info)
}

// optional string rb_url = 16;
bool ShmotData::has_rb_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShmotData::set_has_rb_url() {
  _has_bits_[0] |= 0x00000008u;
}
void ShmotData::clear_has_rb_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShmotData::clear_rb_url() {
  rb_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rb_url();
}
const ::std::string& ShmotData::rb_url() const {
  // @@protoc_insertion_point(field_get:ShmotData.rb_url)
  return rb_url_.GetNoArena();
}
void ShmotData::set_rb_url(const ::std::string& value) {
  set_has_rb_url();
  rb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.rb_url)
}
#if LANG_CXX11
void ShmotData::set_rb_url(::std::string&& value) {
  set_has_rb_url();
  rb_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.rb_url)
}
#endif
void ShmotData::set_rb_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rb_url();
  rb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.rb_url)
}
void ShmotData::set_rb_url(const char* value, size_t size) {
  set_has_rb_url();
  rb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.rb_url)
}
::std::string* ShmotData::mutable_rb_url() {
  set_has_rb_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.rb_url)
  return rb_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmotData::release_rb_url() {
  // @@protoc_insertion_point(field_release:ShmotData.rb_url)
  clear_has_rb_url();
  return rb_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmotData::set_allocated_rb_url(::std::string* rb_url) {
  if (rb_url != NULL) {
    set_has_rb_url();
  } else {
    clear_has_rb_url();
  }
  rb_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rb_url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.rb_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemRank::kIdFieldNumber;
const int ItemRank::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemRank::ItemRank()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_shmot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemRank)
}
ItemRank::ItemRank(const ItemRank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:ItemRank)
}

void ItemRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rank_));
}

ItemRank::~ItemRank() {
  // @@protoc_insertion_point(destructor:ItemRank)
  SharedDtor();
}

void ItemRank::SharedDtor() {
}

void ItemRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemRank::descriptor() {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ItemRank& ItemRank::default_instance() {
  protobuf_shmot_2eproto::InitDefaults();
  return *internal_default_instance();
}

ItemRank* ItemRank::New(::google::protobuf::Arena* arena) const {
  ItemRank* n = new ItemRank;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemRank::Clear() {
// @@protoc_insertion_point(message_clear_start:ItemRank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&id_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ItemRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ItemRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ItemRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ItemRank)
  return false;
#undef DO_
}

void ItemRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ItemRank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ItemRank)
}

::google::protobuf::uint8* ItemRank::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ItemRank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ItemRank)
  return target;
}

size_t ItemRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ItemRank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  // optional float rank = 2;
  if (has_rank()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemRank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ItemRank)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemRank* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemRank>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ItemRank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ItemRank)
    MergeFrom(*source);
  }
}

void ItemRank::MergeFrom(const ItemRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ItemRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ItemRank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ItemRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemRank::CopyFrom(const ItemRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ItemRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ItemRank::Swap(ItemRank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemRank::InternalSwap(ItemRank* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(rank_, other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemRank::GetMetadata() const {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemRank

// required int64 id = 1;
bool ItemRank::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ItemRank::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ItemRank::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ItemRank::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 ItemRank::id() const {
  // @@protoc_insertion_point(field_get:ItemRank.id)
  return id_;
}
void ItemRank::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ItemRank.id)
}

// optional float rank = 2;
bool ItemRank::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ItemRank::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void ItemRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void ItemRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float ItemRank::rank() const {
  // @@protoc_insertion_point(field_get:ItemRank.rank)
  return rank_;
}
void ItemRank::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ItemRank.rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryItemsForFigure::kFigureTypeFieldNumber;
const int CategoryItemsForFigure::kCategoryIdFieldNumber;
const int CategoryItemsForFigure::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryItemsForFigure::CategoryItemsForFigure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_shmot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CategoryItemsForFigure)
}
CategoryItemsForFigure::CategoryItemsForFigure(const CategoryItemsForFigure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&figure_type_, &from.figure_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_id_) -
    reinterpret_cast<char*>(&figure_type_)) + sizeof(category_id_));
  // @@protoc_insertion_point(copy_constructor:CategoryItemsForFigure)
}

void CategoryItemsForFigure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&figure_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_id_) -
      reinterpret_cast<char*>(&figure_type_)) + sizeof(category_id_));
}

CategoryItemsForFigure::~CategoryItemsForFigure() {
  // @@protoc_insertion_point(destructor:CategoryItemsForFigure)
  SharedDtor();
}

void CategoryItemsForFigure::SharedDtor() {
}

void CategoryItemsForFigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryItemsForFigure::descriptor() {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CategoryItemsForFigure& CategoryItemsForFigure::default_instance() {
  protobuf_shmot_2eproto::InitDefaults();
  return *internal_default_instance();
}

CategoryItemsForFigure* CategoryItemsForFigure::New(::google::protobuf::Arena* arena) const {
  CategoryItemsForFigure* n = new CategoryItemsForFigure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryItemsForFigure::Clear() {
// @@protoc_insertion_point(message_clear_start:CategoryItemsForFigure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&figure_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_id_) -
        reinterpret_cast<char*>(&figure_type_)) + sizeof(category_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CategoryItemsForFigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CategoryItemsForFigure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FigureType figure_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FigureType_IsValid(value)) {
            set_figure_type(static_cast< ::FigureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 category_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ItemRank items = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CategoryItemsForFigure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CategoryItemsForFigure)
  return false;
#undef DO_
}

void CategoryItemsForFigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CategoryItemsForFigure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .FigureType figure_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->figure_type(), output);
  }

  // required int32 category_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // repeated .ItemRank items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CategoryItemsForFigure)
}

::google::protobuf::uint8* CategoryItemsForFigure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CategoryItemsForFigure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .FigureType figure_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->figure_type(), target);
  }

  // required int32 category_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category_id(), target);
  }

  // repeated .ItemRank items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CategoryItemsForFigure)
  return target;
}

size_t CategoryItemsForFigure::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CategoryItemsForFigure)
  size_t total_size = 0;

  if (has_figure_type()) {
    // required .FigureType figure_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->figure_type());
  }

  if (has_category_id()) {
    // required int32 category_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_id());
  }

  return total_size;
}
size_t CategoryItemsForFigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CategoryItemsForFigure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .FigureType figure_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->figure_type());

    // required int32 category_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ItemRank items = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryItemsForFigure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CategoryItemsForFigure)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoryItemsForFigure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryItemsForFigure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CategoryItemsForFigure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CategoryItemsForFigure)
    MergeFrom(*source);
  }
}

void CategoryItemsForFigure::MergeFrom(const CategoryItemsForFigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CategoryItemsForFigure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      figure_type_ = from.figure_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      category_id_ = from.category_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CategoryItemsForFigure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CategoryItemsForFigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryItemsForFigure::CopyFrom(const CategoryItemsForFigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CategoryItemsForFigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryItemsForFigure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void CategoryItemsForFigure::Swap(CategoryItemsForFigure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryItemsForFigure::InternalSwap(CategoryItemsForFigure* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(figure_type_, other->figure_type_);
  swap(category_id_, other->category_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryItemsForFigure::GetMetadata() const {
  protobuf_shmot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_shmot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryItemsForFigure

// required .FigureType figure_type = 1;
bool CategoryItemsForFigure::has_figure_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CategoryItemsForFigure::set_has_figure_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CategoryItemsForFigure::clear_has_figure_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryItemsForFigure::clear_figure_type() {
  figure_type_ = 0;
  clear_has_figure_type();
}
::FigureType CategoryItemsForFigure::figure_type() const {
  // @@protoc_insertion_point(field_get:CategoryItemsForFigure.figure_type)
  return static_cast< ::FigureType >(figure_type_);
}
void CategoryItemsForFigure::set_figure_type(::FigureType value) {
  assert(::FigureType_IsValid(value));
  set_has_figure_type();
  figure_type_ = value;
  // @@protoc_insertion_point(field_set:CategoryItemsForFigure.figure_type)
}

// required int32 category_id = 2;
bool CategoryItemsForFigure::has_category_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CategoryItemsForFigure::set_has_category_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CategoryItemsForFigure::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CategoryItemsForFigure::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
::google::protobuf::int32 CategoryItemsForFigure::category_id() const {
  // @@protoc_insertion_point(field_get:CategoryItemsForFigure.category_id)
  return category_id_;
}
void CategoryItemsForFigure::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:CategoryItemsForFigure.category_id)
}

// repeated .ItemRank items = 3;
int CategoryItemsForFigure::items_size() const {
  return items_.size();
}
void CategoryItemsForFigure::clear_items() {
  items_.Clear();
}
const ::ItemRank& CategoryItemsForFigure::items(int index) const {
  // @@protoc_insertion_point(field_get:CategoryItemsForFigure.items)
  return items_.Get(index);
}
::ItemRank* CategoryItemsForFigure::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CategoryItemsForFigure.items)
  return items_.Mutable(index);
}
::ItemRank* CategoryItemsForFigure::add_items() {
  // @@protoc_insertion_point(field_add:CategoryItemsForFigure.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ItemRank >*
CategoryItemsForFigure::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CategoryItemsForFigure.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ItemRank >&
CategoryItemsForFigure::items() const {
  // @@protoc_insertion_point(field_list:CategoryItemsForFigure.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
