// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shmot.proto

#ifndef PROTOBUF_shmot_2eproto__INCLUDED
#define PROTOBUF_shmot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CategoryItemsForFigure;
class CategoryItemsForFigureDefaultTypeInternal;
extern CategoryItemsForFigureDefaultTypeInternal _CategoryItemsForFigure_default_instance_;
class ItemRank;
class ItemRankDefaultTypeInternal;
extern ItemRankDefaultTypeInternal _ItemRank_default_instance_;
class ShmotData;
class ShmotDataDefaultTypeInternal;
extern ShmotDataDefaultTypeInternal _ShmotData_default_instance_;
class ShmotData_Feature;
class ShmotData_FeatureDefaultTypeInternal;
extern ShmotData_FeatureDefaultTypeInternal _ShmotData_Feature_default_instance_;
class ShmotData_MarketInfo;
class ShmotData_MarketInfoDefaultTypeInternal;
extern ShmotData_MarketInfoDefaultTypeInternal _ShmotData_MarketInfo_default_instance_;
class ShmotData_SimilarItem;
class ShmotData_SimilarItemDefaultTypeInternal;
extern ShmotData_SimilarItemDefaultTypeInternal _ShmotData_SimilarItem_default_instance_;

namespace protobuf_shmot_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_shmot_2eproto

enum FigureType {
  Pear = 0,
  Apple = 1,
  Column = 2,
  InverseTriangle = 3,
  Hourglass = 4,
  Rectangle = 5,
  PearMan = 6,
  AppleMan = 7,
  TrapezeMan = 8,
  InverseTriangleMan = 9,
  RectangleMan = 10
};
bool FigureType_IsValid(int value);
const FigureType FigureType_MIN = Pear;
const FigureType FigureType_MAX = RectangleMan;
const int FigureType_ARRAYSIZE = FigureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FigureType_descriptor();
inline const ::std::string& FigureType_Name(FigureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FigureType_descriptor(), value);
}
inline bool FigureType_Parse(
    const ::std::string& name, FigureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FigureType>(
    FigureType_descriptor(), name, value);
}
enum CurrencyType {
  RUB = 1,
  KZT = 2
};
bool CurrencyType_IsValid(int value);
const CurrencyType CurrencyType_MIN = RUB;
const CurrencyType CurrencyType_MAX = KZT;
const int CurrencyType_ARRAYSIZE = CurrencyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor();
inline const ::std::string& CurrencyType_Name(CurrencyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CurrencyType_descriptor(), value);
}
inline bool CurrencyType_Parse(
    const ::std::string& name, CurrencyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CurrencyType>(
    CurrencyType_descriptor(), name, value);
}
// ===================================================================

class ShmotData_Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShmotData.Feature) */ {
 public:
  ShmotData_Feature();
  virtual ~ShmotData_Feature();

  ShmotData_Feature(const ShmotData_Feature& from);

  inline ShmotData_Feature& operator=(const ShmotData_Feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShmotData_Feature(ShmotData_Feature&& from) noexcept
    : ShmotData_Feature() {
    *this = ::std::move(from);
  }

  inline ShmotData_Feature& operator=(ShmotData_Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShmotData_Feature& default_instance();

  static inline const ShmotData_Feature* internal_default_instance() {
    return reinterpret_cast<const ShmotData_Feature*>(
               &_ShmotData_Feature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ShmotData_Feature* other);
  friend void swap(ShmotData_Feature& a, ShmotData_Feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShmotData_Feature* New() const PROTOBUF_FINAL { return New(NULL); }

  ShmotData_Feature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShmotData_Feature& from);
  void MergeFrom(const ShmotData_Feature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShmotData_Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:ShmotData.Feature)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float value_;
  friend struct protobuf_shmot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShmotData_SimilarItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShmotData.SimilarItem) */ {
 public:
  ShmotData_SimilarItem();
  virtual ~ShmotData_SimilarItem();

  ShmotData_SimilarItem(const ShmotData_SimilarItem& from);

  inline ShmotData_SimilarItem& operator=(const ShmotData_SimilarItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShmotData_SimilarItem(ShmotData_SimilarItem&& from) noexcept
    : ShmotData_SimilarItem() {
    *this = ::std::move(from);
  }

  inline ShmotData_SimilarItem& operator=(ShmotData_SimilarItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShmotData_SimilarItem& default_instance();

  static inline const ShmotData_SimilarItem* internal_default_instance() {
    return reinterpret_cast<const ShmotData_SimilarItem*>(
               &_ShmotData_SimilarItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ShmotData_SimilarItem* other);
  friend void swap(ShmotData_SimilarItem& a, ShmotData_SimilarItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShmotData_SimilarItem* New() const PROTOBUF_FINAL { return New(NULL); }

  ShmotData_SimilarItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShmotData_SimilarItem& from);
  void MergeFrom(const ShmotData_SimilarItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShmotData_SimilarItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional float similarity = 2;
  bool has_similarity() const;
  void clear_similarity();
  static const int kSimilarityFieldNumber = 2;
  float similarity() const;
  void set_similarity(float value);

  // @@protoc_insertion_point(class_scope:ShmotData.SimilarItem)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_similarity();
  void clear_has_similarity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  float similarity_;
  friend struct protobuf_shmot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShmotData_MarketInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShmotData.MarketInfo) */ {
 public:
  ShmotData_MarketInfo();
  virtual ~ShmotData_MarketInfo();

  ShmotData_MarketInfo(const ShmotData_MarketInfo& from);

  inline ShmotData_MarketInfo& operator=(const ShmotData_MarketInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShmotData_MarketInfo(ShmotData_MarketInfo&& from) noexcept
    : ShmotData_MarketInfo() {
    *this = ::std::move(from);
  }

  inline ShmotData_MarketInfo& operator=(ShmotData_MarketInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShmotData_MarketInfo& default_instance();

  static inline const ShmotData_MarketInfo* internal_default_instance() {
    return reinterpret_cast<const ShmotData_MarketInfo*>(
               &_ShmotData_MarketInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ShmotData_MarketInfo* other);
  friend void swap(ShmotData_MarketInfo& a, ShmotData_MarketInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShmotData_MarketInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ShmotData_MarketInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShmotData_MarketInfo& from);
  void MergeFrom(const ShmotData_MarketInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShmotData_MarketInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 available_sizes = 4;
  int available_sizes_size() const;
  void clear_available_sizes();
  static const int kAvailableSizesFieldNumber = 4;
  ::google::protobuf::int32 available_sizes(int index) const;
  void set_available_sizes(int index, ::google::protobuf::int32 value);
  void add_available_sizes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      available_sizes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_available_sizes();

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string pic_url = 2;
  bool has_pic_url() const;
  void clear_pic_url();
  static const int kPicUrlFieldNumber = 2;
  const ::std::string& pic_url() const;
  void set_pic_url(const ::std::string& value);
  #if LANG_CXX11
  void set_pic_url(::std::string&& value);
  #endif
  void set_pic_url(const char* value);
  void set_pic_url(const char* value, size_t size);
  ::std::string* mutable_pic_url();
  ::std::string* release_pic_url();
  void set_allocated_pic_url(::std::string* pic_url);

  // optional string title = 5;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string description = 6;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string vendor = 7;
  bool has_vendor() const;
  void clear_vendor();
  static const int kVendorFieldNumber = 7;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  #if LANG_CXX11
  void set_vendor(::std::string&& value);
  #endif
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // optional float price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  float price() const;
  void set_price(float value);

  // optional .CurrencyType currency = 8;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 8;
  ::CurrencyType currency() const;
  void set_currency(::CurrencyType value);

  // @@protoc_insertion_point(class_scope:ShmotData.MarketInfo)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_pic_url();
  void clear_has_pic_url();
  void set_has_price();
  void clear_has_price();
  void set_has_title();
  void clear_has_title();
  void set_has_description();
  void clear_has_description();
  void set_has_vendor();
  void clear_has_vendor();
  void set_has_currency();
  void clear_has_currency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > available_sizes_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr pic_url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  float price_;
  int currency_;
  friend struct protobuf_shmot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShmotData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShmotData) */ {
 public:
  ShmotData();
  virtual ~ShmotData();

  ShmotData(const ShmotData& from);

  inline ShmotData& operator=(const ShmotData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShmotData(ShmotData&& from) noexcept
    : ShmotData() {
    *this = ::std::move(from);
  }

  inline ShmotData& operator=(ShmotData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShmotData& default_instance();

  static inline const ShmotData* internal_default_instance() {
    return reinterpret_cast<const ShmotData*>(
               &_ShmotData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ShmotData* other);
  friend void swap(ShmotData& a, ShmotData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShmotData* New() const PROTOBUF_FINAL { return New(NULL); }

  ShmotData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShmotData& from);
  void MergeFrom(const ShmotData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShmotData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ShmotData_Feature Feature;
  typedef ShmotData_SimilarItem SimilarItem;
  typedef ShmotData_MarketInfo MarketInfo;

  // accessors -------------------------------------------------------

  // repeated .ShmotData.Feature features = 5;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 5;
  const ::ShmotData_Feature& features(int index) const;
  ::ShmotData_Feature* mutable_features(int index);
  ::ShmotData_Feature* add_features();
  ::google::protobuf::RepeatedPtrField< ::ShmotData_Feature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::ShmotData_Feature >&
      features() const;

  // repeated .ShmotData.SimilarItem similar_items = 6;
  int similar_items_size() const;
  void clear_similar_items();
  static const int kSimilarItemsFieldNumber = 6;
  const ::ShmotData_SimilarItem& similar_items(int index) const;
  ::ShmotData_SimilarItem* mutable_similar_items(int index);
  ::ShmotData_SimilarItem* add_similar_items();
  ::google::protobuf::RepeatedPtrField< ::ShmotData_SimilarItem >*
      mutable_similar_items();
  const ::google::protobuf::RepeatedPtrField< ::ShmotData_SimilarItem >&
      similar_items() const;

  // repeated string img_urls = 11;
  int img_urls_size() const;
  void clear_img_urls();
  static const int kImgUrlsFieldNumber = 11;
  const ::std::string& img_urls(int index) const;
  ::std::string* mutable_img_urls(int index);
  void set_img_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_img_urls(int index, ::std::string&& value);
  #endif
  void set_img_urls(int index, const char* value);
  void set_img_urls(int index, const char* value, size_t size);
  ::std::string* add_img_urls();
  void add_img_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_img_urls(::std::string&& value);
  #endif
  void add_img_urls(const char* value);
  void add_img_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& img_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_img_urls();

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string pic_url = 9;
  bool has_pic_url() const;
  void clear_pic_url();
  static const int kPicUrlFieldNumber = 9;
  const ::std::string& pic_url() const;
  void set_pic_url(const ::std::string& value);
  #if LANG_CXX11
  void set_pic_url(::std::string&& value);
  #endif
  void set_pic_url(const char* value);
  void set_pic_url(const char* value, size_t size);
  ::std::string* mutable_pic_url();
  ::std::string* release_pic_url();
  void set_allocated_pic_url(::std::string* pic_url);

  // optional string site = 12;
  bool has_site() const;
  void clear_site();
  static const int kSiteFieldNumber = 12;
  const ::std::string& site() const;
  void set_site(const ::std::string& value);
  #if LANG_CXX11
  void set_site(::std::string&& value);
  #endif
  void set_site(const char* value);
  void set_site(const char* value, size_t size);
  ::std::string* mutable_site();
  ::std::string* release_site();
  void set_allocated_site(::std::string* site);

  // optional string rb_url = 16;
  bool has_rb_url() const;
  void clear_rb_url();
  static const int kRbUrlFieldNumber = 16;
  const ::std::string& rb_url() const;
  void set_rb_url(const ::std::string& value);
  #if LANG_CXX11
  void set_rb_url(::std::string&& value);
  #endif
  void set_rb_url(const char* value);
  void set_rb_url(const char* value, size_t size);
  ::std::string* mutable_rb_url();
  ::std::string* release_rb_url();
  void set_allocated_rb_url(::std::string* rb_url);

  // optional .ShmotData.MarketInfo admitad_info = 7;
  bool has_admitad_info() const;
  void clear_admitad_info();
  static const int kAdmitadInfoFieldNumber = 7;
  const ::ShmotData_MarketInfo& admitad_info() const;
  ::ShmotData_MarketInfo* mutable_admitad_info();
  ::ShmotData_MarketInfo* release_admitad_info();
  void set_allocated_admitad_info(::ShmotData_MarketInfo* admitad_info);

  // optional .ShmotData.MarketInfo torg_info = 8;
  bool has_torg_info() const;
  void clear_torg_info();
  static const int kTorgInfoFieldNumber = 8;
  const ::ShmotData_MarketInfo& torg_info() const;
  ::ShmotData_MarketInfo* mutable_torg_info();
  ::ShmotData_MarketInfo* release_torg_info();
  void set_allocated_torg_info(::ShmotData_MarketInfo* torg_info);

  // optional .ShmotData.MarketInfo direct_market_info = 15;
  bool has_direct_market_info() const;
  void clear_direct_market_info();
  static const int kDirectMarketInfoFieldNumber = 15;
  const ::ShmotData_MarketInfo& direct_market_info() const;
  ::ShmotData_MarketInfo* mutable_direct_market_info();
  ::ShmotData_MarketInfo* release_direct_market_info();
  void set_allocated_direct_market_info(::ShmotData_MarketInfo* direct_market_info);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 ts = 4;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 4;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // optional int32 category_id = 2;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 2;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // optional int32 geo_id = 14;
  bool has_geo_id() const;
  void clear_geo_id();
  static const int kGeoIdFieldNumber = 14;
  ::google::protobuf::int32 geo_id() const;
  void set_geo_id(::google::protobuf::int32 value);

  // optional int64 firstmeet_ts = 10;
  bool has_firstmeet_ts() const;
  void clear_firstmeet_ts();
  static const int kFirstmeetTsFieldNumber = 10;
  ::google::protobuf::int64 firstmeet_ts() const;
  void set_firstmeet_ts(::google::protobuf::int64 value);

  // optional int64 site_hash = 13;
  bool has_site_hash() const;
  void clear_site_hash();
  static const int kSiteHashFieldNumber = 13;
  ::google::protobuf::int64 site_hash() const;
  void set_site_hash(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ShmotData)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_url();
  void clear_has_url();
  void set_has_ts();
  void clear_has_ts();
  void set_has_admitad_info();
  void clear_has_admitad_info();
  void set_has_torg_info();
  void clear_has_torg_info();
  void set_has_pic_url();
  void clear_has_pic_url();
  void set_has_firstmeet_ts();
  void clear_has_firstmeet_ts();
  void set_has_site();
  void clear_has_site();
  void set_has_site_hash();
  void clear_has_site_hash();
  void set_has_geo_id();
  void clear_has_geo_id();
  void set_has_direct_market_info();
  void clear_has_direct_market_info();
  void set_has_rb_url();
  void clear_has_rb_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ShmotData_Feature > features_;
  ::google::protobuf::RepeatedPtrField< ::ShmotData_SimilarItem > similar_items_;
  ::google::protobuf::RepeatedPtrField< ::std::string> img_urls_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr pic_url_;
  ::google::protobuf::internal::ArenaStringPtr site_;
  ::google::protobuf::internal::ArenaStringPtr rb_url_;
  ::ShmotData_MarketInfo* admitad_info_;
  ::ShmotData_MarketInfo* torg_info_;
  ::ShmotData_MarketInfo* direct_market_info_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 ts_;
  ::google::protobuf::int32 category_id_;
  ::google::protobuf::int32 geo_id_;
  ::google::protobuf::int64 firstmeet_ts_;
  ::google::protobuf::int64 site_hash_;
  friend struct protobuf_shmot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ItemRank : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ItemRank) */ {
 public:
  ItemRank();
  virtual ~ItemRank();

  ItemRank(const ItemRank& from);

  inline ItemRank& operator=(const ItemRank& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemRank(ItemRank&& from) noexcept
    : ItemRank() {
    *this = ::std::move(from);
  }

  inline ItemRank& operator=(ItemRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemRank& default_instance();

  static inline const ItemRank* internal_default_instance() {
    return reinterpret_cast<const ItemRank*>(
               &_ItemRank_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ItemRank* other);
  friend void swap(ItemRank& a, ItemRank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemRank* New() const PROTOBUF_FINAL { return New(NULL); }

  ItemRank* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ItemRank& from);
  void MergeFrom(const ItemRank& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ItemRank* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional float rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  float rank() const;
  void set_rank(float value);

  // @@protoc_insertion_point(class_scope:ItemRank)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  float rank_;
  friend struct protobuf_shmot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CategoryItemsForFigure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CategoryItemsForFigure) */ {
 public:
  CategoryItemsForFigure();
  virtual ~CategoryItemsForFigure();

  CategoryItemsForFigure(const CategoryItemsForFigure& from);

  inline CategoryItemsForFigure& operator=(const CategoryItemsForFigure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CategoryItemsForFigure(CategoryItemsForFigure&& from) noexcept
    : CategoryItemsForFigure() {
    *this = ::std::move(from);
  }

  inline CategoryItemsForFigure& operator=(CategoryItemsForFigure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CategoryItemsForFigure& default_instance();

  static inline const CategoryItemsForFigure* internal_default_instance() {
    return reinterpret_cast<const CategoryItemsForFigure*>(
               &_CategoryItemsForFigure_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CategoryItemsForFigure* other);
  friend void swap(CategoryItemsForFigure& a, CategoryItemsForFigure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CategoryItemsForFigure* New() const PROTOBUF_FINAL { return New(NULL); }

  CategoryItemsForFigure* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CategoryItemsForFigure& from);
  void MergeFrom(const CategoryItemsForFigure& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CategoryItemsForFigure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ItemRank items = 3;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 3;
  const ::ItemRank& items(int index) const;
  ::ItemRank* mutable_items(int index);
  ::ItemRank* add_items();
  ::google::protobuf::RepeatedPtrField< ::ItemRank >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ItemRank >&
      items() const;

  // required .FigureType figure_type = 1;
  bool has_figure_type() const;
  void clear_figure_type();
  static const int kFigureTypeFieldNumber = 1;
  ::FigureType figure_type() const;
  void set_figure_type(::FigureType value);

  // required int32 category_id = 2;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 2;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CategoryItemsForFigure)
 private:
  void set_has_figure_type();
  void clear_has_figure_type();
  void set_has_category_id();
  void clear_has_category_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ItemRank > items_;
  int figure_type_;
  ::google::protobuf::int32 category_id_;
  friend struct protobuf_shmot_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShmotData_Feature

// required string name = 1;
inline bool ShmotData_Feature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShmotData_Feature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShmotData_Feature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShmotData_Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ShmotData_Feature::name() const {
  // @@protoc_insertion_point(field_get:ShmotData.Feature.name)
  return name_.GetNoArena();
}
inline void ShmotData_Feature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.Feature.name)
}
#if LANG_CXX11
inline void ShmotData_Feature::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.Feature.name)
}
#endif
inline void ShmotData_Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.Feature.name)
}
inline void ShmotData_Feature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.Feature.name)
}
inline ::std::string* ShmotData_Feature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ShmotData.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData_Feature::release_name() {
  // @@protoc_insertion_point(field_release:ShmotData.Feature.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData_Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.Feature.name)
}

// optional float value = 2;
inline bool ShmotData_Feature::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShmotData_Feature::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShmotData_Feature::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShmotData_Feature::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float ShmotData_Feature::value() const {
  // @@protoc_insertion_point(field_get:ShmotData.Feature.value)
  return value_;
}
inline void ShmotData_Feature::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.Feature.value)
}

// -------------------------------------------------------------------

// ShmotData_SimilarItem

// required int64 id = 1;
inline bool ShmotData_SimilarItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShmotData_SimilarItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShmotData_SimilarItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShmotData_SimilarItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ShmotData_SimilarItem::id() const {
  // @@protoc_insertion_point(field_get:ShmotData.SimilarItem.id)
  return id_;
}
inline void ShmotData_SimilarItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.SimilarItem.id)
}

// optional float similarity = 2;
inline bool ShmotData_SimilarItem::has_similarity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShmotData_SimilarItem::set_has_similarity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShmotData_SimilarItem::clear_has_similarity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShmotData_SimilarItem::clear_similarity() {
  similarity_ = 0;
  clear_has_similarity();
}
inline float ShmotData_SimilarItem::similarity() const {
  // @@protoc_insertion_point(field_get:ShmotData.SimilarItem.similarity)
  return similarity_;
}
inline void ShmotData_SimilarItem::set_similarity(float value) {
  set_has_similarity();
  similarity_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.SimilarItem.similarity)
}

// -------------------------------------------------------------------

// ShmotData_MarketInfo

// required string url = 1;
inline bool ShmotData_MarketInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShmotData_MarketInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShmotData_MarketInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShmotData_MarketInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ShmotData_MarketInfo::url() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.url)
  return url_.GetNoArena();
}
inline void ShmotData_MarketInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.url)
}
#if LANG_CXX11
inline void ShmotData_MarketInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.url)
}
#endif
inline void ShmotData_MarketInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.url)
}
inline void ShmotData_MarketInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.url)
}
inline ::std::string* ShmotData_MarketInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData_MarketInfo::release_url() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData_MarketInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.url)
}

// optional string pic_url = 2;
inline bool ShmotData_MarketInfo::has_pic_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShmotData_MarketInfo::set_has_pic_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShmotData_MarketInfo::clear_has_pic_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShmotData_MarketInfo::clear_pic_url() {
  pic_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pic_url();
}
inline const ::std::string& ShmotData_MarketInfo::pic_url() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.pic_url)
  return pic_url_.GetNoArena();
}
inline void ShmotData_MarketInfo::set_pic_url(const ::std::string& value) {
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.pic_url)
}
#if LANG_CXX11
inline void ShmotData_MarketInfo::set_pic_url(::std::string&& value) {
  set_has_pic_url();
  pic_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.pic_url)
}
#endif
inline void ShmotData_MarketInfo::set_pic_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.pic_url)
}
inline void ShmotData_MarketInfo::set_pic_url(const char* value, size_t size) {
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.pic_url)
}
inline ::std::string* ShmotData_MarketInfo::mutable_pic_url() {
  set_has_pic_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.pic_url)
  return pic_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData_MarketInfo::release_pic_url() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.pic_url)
  clear_has_pic_url();
  return pic_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData_MarketInfo::set_allocated_pic_url(::std::string* pic_url) {
  if (pic_url != NULL) {
    set_has_pic_url();
  } else {
    clear_has_pic_url();
  }
  pic_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pic_url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.pic_url)
}

// optional float price = 3;
inline bool ShmotData_MarketInfo::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShmotData_MarketInfo::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShmotData_MarketInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShmotData_MarketInfo::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline float ShmotData_MarketInfo::price() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.price)
  return price_;
}
inline void ShmotData_MarketInfo::set_price(float value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.price)
}

// repeated int32 available_sizes = 4;
inline int ShmotData_MarketInfo::available_sizes_size() const {
  return available_sizes_.size();
}
inline void ShmotData_MarketInfo::clear_available_sizes() {
  available_sizes_.Clear();
}
inline ::google::protobuf::int32 ShmotData_MarketInfo::available_sizes(int index) const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.available_sizes)
  return available_sizes_.Get(index);
}
inline void ShmotData_MarketInfo::set_available_sizes(int index, ::google::protobuf::int32 value) {
  available_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.available_sizes)
}
inline void ShmotData_MarketInfo::add_available_sizes(::google::protobuf::int32 value) {
  available_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:ShmotData.MarketInfo.available_sizes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ShmotData_MarketInfo::available_sizes() const {
  // @@protoc_insertion_point(field_list:ShmotData.MarketInfo.available_sizes)
  return available_sizes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ShmotData_MarketInfo::mutable_available_sizes() {
  // @@protoc_insertion_point(field_mutable_list:ShmotData.MarketInfo.available_sizes)
  return &available_sizes_;
}

// optional string title = 5;
inline bool ShmotData_MarketInfo::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShmotData_MarketInfo::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShmotData_MarketInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShmotData_MarketInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& ShmotData_MarketInfo::title() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.title)
  return title_.GetNoArena();
}
inline void ShmotData_MarketInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.title)
}
#if LANG_CXX11
inline void ShmotData_MarketInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.title)
}
#endif
inline void ShmotData_MarketInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.title)
}
inline void ShmotData_MarketInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.title)
}
inline ::std::string* ShmotData_MarketInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData_MarketInfo::release_title() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData_MarketInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.title)
}

// optional string description = 6;
inline bool ShmotData_MarketInfo::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShmotData_MarketInfo::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShmotData_MarketInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShmotData_MarketInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& ShmotData_MarketInfo::description() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.description)
  return description_.GetNoArena();
}
inline void ShmotData_MarketInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.description)
}
#if LANG_CXX11
inline void ShmotData_MarketInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.description)
}
#endif
inline void ShmotData_MarketInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.description)
}
inline void ShmotData_MarketInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.description)
}
inline ::std::string* ShmotData_MarketInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData_MarketInfo::release_description() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData_MarketInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.description)
}

// optional string vendor = 7;
inline bool ShmotData_MarketInfo::has_vendor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShmotData_MarketInfo::set_has_vendor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShmotData_MarketInfo::clear_has_vendor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShmotData_MarketInfo::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vendor();
}
inline const ::std::string& ShmotData_MarketInfo::vendor() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.vendor)
  return vendor_.GetNoArena();
}
inline void ShmotData_MarketInfo::set_vendor(const ::std::string& value) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.vendor)
}
#if LANG_CXX11
inline void ShmotData_MarketInfo::set_vendor(::std::string&& value) {
  set_has_vendor();
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.MarketInfo.vendor)
}
#endif
inline void ShmotData_MarketInfo::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.MarketInfo.vendor)
}
inline void ShmotData_MarketInfo::set_vendor(const char* value, size_t size) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.MarketInfo.vendor)
}
inline ::std::string* ShmotData_MarketInfo::mutable_vendor() {
  set_has_vendor();
  // @@protoc_insertion_point(field_mutable:ShmotData.MarketInfo.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData_MarketInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:ShmotData.MarketInfo.vendor)
  clear_has_vendor();
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData_MarketInfo::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    set_has_vendor();
  } else {
    clear_has_vendor();
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.MarketInfo.vendor)
}

// optional .CurrencyType currency = 8;
inline bool ShmotData_MarketInfo::has_currency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShmotData_MarketInfo::set_has_currency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShmotData_MarketInfo::clear_has_currency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShmotData_MarketInfo::clear_currency() {
  currency_ = 1;
  clear_has_currency();
}
inline ::CurrencyType ShmotData_MarketInfo::currency() const {
  // @@protoc_insertion_point(field_get:ShmotData.MarketInfo.currency)
  return static_cast< ::CurrencyType >(currency_);
}
inline void ShmotData_MarketInfo::set_currency(::CurrencyType value) {
  assert(::CurrencyType_IsValid(value));
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.MarketInfo.currency)
}

// -------------------------------------------------------------------

// ShmotData

// required int64 id = 1;
inline bool ShmotData::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShmotData::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShmotData::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShmotData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ShmotData::id() const {
  // @@protoc_insertion_point(field_get:ShmotData.id)
  return id_;
}
inline void ShmotData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.id)
}

// optional int32 category_id = 2;
inline bool ShmotData::has_category_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShmotData::set_has_category_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShmotData::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShmotData::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 ShmotData::category_id() const {
  // @@protoc_insertion_point(field_get:ShmotData.category_id)
  return category_id_;
}
inline void ShmotData::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.category_id)
}

// optional string url = 3;
inline bool ShmotData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShmotData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShmotData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShmotData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ShmotData::url() const {
  // @@protoc_insertion_point(field_get:ShmotData.url)
  return url_.GetNoArena();
}
inline void ShmotData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.url)
}
#if LANG_CXX11
inline void ShmotData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.url)
}
#endif
inline void ShmotData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.url)
}
inline void ShmotData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.url)
}
inline ::std::string* ShmotData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData::release_url() {
  // @@protoc_insertion_point(field_release:ShmotData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.url)
}

// optional int64 ts = 4;
inline bool ShmotData::has_ts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShmotData::set_has_ts() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShmotData::clear_has_ts() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShmotData::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::int64 ShmotData::ts() const {
  // @@protoc_insertion_point(field_get:ShmotData.ts)
  return ts_;
}
inline void ShmotData::set_ts(::google::protobuf::int64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.ts)
}

// repeated .ShmotData.Feature features = 5;
inline int ShmotData::features_size() const {
  return features_.size();
}
inline void ShmotData::clear_features() {
  features_.Clear();
}
inline const ::ShmotData_Feature& ShmotData::features(int index) const {
  // @@protoc_insertion_point(field_get:ShmotData.features)
  return features_.Get(index);
}
inline ::ShmotData_Feature* ShmotData::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ShmotData.features)
  return features_.Mutable(index);
}
inline ::ShmotData_Feature* ShmotData::add_features() {
  // @@protoc_insertion_point(field_add:ShmotData.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ShmotData_Feature >*
ShmotData::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ShmotData.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ShmotData_Feature >&
ShmotData::features() const {
  // @@protoc_insertion_point(field_list:ShmotData.features)
  return features_;
}

// repeated .ShmotData.SimilarItem similar_items = 6;
inline int ShmotData::similar_items_size() const {
  return similar_items_.size();
}
inline void ShmotData::clear_similar_items() {
  similar_items_.Clear();
}
inline const ::ShmotData_SimilarItem& ShmotData::similar_items(int index) const {
  // @@protoc_insertion_point(field_get:ShmotData.similar_items)
  return similar_items_.Get(index);
}
inline ::ShmotData_SimilarItem* ShmotData::mutable_similar_items(int index) {
  // @@protoc_insertion_point(field_mutable:ShmotData.similar_items)
  return similar_items_.Mutable(index);
}
inline ::ShmotData_SimilarItem* ShmotData::add_similar_items() {
  // @@protoc_insertion_point(field_add:ShmotData.similar_items)
  return similar_items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ShmotData_SimilarItem >*
ShmotData::mutable_similar_items() {
  // @@protoc_insertion_point(field_mutable_list:ShmotData.similar_items)
  return &similar_items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ShmotData_SimilarItem >&
ShmotData::similar_items() const {
  // @@protoc_insertion_point(field_list:ShmotData.similar_items)
  return similar_items_;
}

// optional .ShmotData.MarketInfo admitad_info = 7;
inline bool ShmotData::has_admitad_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShmotData::set_has_admitad_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShmotData::clear_has_admitad_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShmotData::clear_admitad_info() {
  if (admitad_info_ != NULL) admitad_info_->::ShmotData_MarketInfo::Clear();
  clear_has_admitad_info();
}
inline const ::ShmotData_MarketInfo& ShmotData::admitad_info() const {
  const ::ShmotData_MarketInfo* p = admitad_info_;
  // @@protoc_insertion_point(field_get:ShmotData.admitad_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ShmotData_MarketInfo*>(
      &::_ShmotData_MarketInfo_default_instance_);
}
inline ::ShmotData_MarketInfo* ShmotData::mutable_admitad_info() {
  set_has_admitad_info();
  if (admitad_info_ == NULL) {
    admitad_info_ = new ::ShmotData_MarketInfo;
  }
  // @@protoc_insertion_point(field_mutable:ShmotData.admitad_info)
  return admitad_info_;
}
inline ::ShmotData_MarketInfo* ShmotData::release_admitad_info() {
  // @@protoc_insertion_point(field_release:ShmotData.admitad_info)
  clear_has_admitad_info();
  ::ShmotData_MarketInfo* temp = admitad_info_;
  admitad_info_ = NULL;
  return temp;
}
inline void ShmotData::set_allocated_admitad_info(::ShmotData_MarketInfo* admitad_info) {
  delete admitad_info_;
  admitad_info_ = admitad_info;
  if (admitad_info) {
    set_has_admitad_info();
  } else {
    clear_has_admitad_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ShmotData.admitad_info)
}

// optional .ShmotData.MarketInfo torg_info = 8;
inline bool ShmotData::has_torg_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShmotData::set_has_torg_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShmotData::clear_has_torg_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShmotData::clear_torg_info() {
  if (torg_info_ != NULL) torg_info_->::ShmotData_MarketInfo::Clear();
  clear_has_torg_info();
}
inline const ::ShmotData_MarketInfo& ShmotData::torg_info() const {
  const ::ShmotData_MarketInfo* p = torg_info_;
  // @@protoc_insertion_point(field_get:ShmotData.torg_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ShmotData_MarketInfo*>(
      &::_ShmotData_MarketInfo_default_instance_);
}
inline ::ShmotData_MarketInfo* ShmotData::mutable_torg_info() {
  set_has_torg_info();
  if (torg_info_ == NULL) {
    torg_info_ = new ::ShmotData_MarketInfo;
  }
  // @@protoc_insertion_point(field_mutable:ShmotData.torg_info)
  return torg_info_;
}
inline ::ShmotData_MarketInfo* ShmotData::release_torg_info() {
  // @@protoc_insertion_point(field_release:ShmotData.torg_info)
  clear_has_torg_info();
  ::ShmotData_MarketInfo* temp = torg_info_;
  torg_info_ = NULL;
  return temp;
}
inline void ShmotData::set_allocated_torg_info(::ShmotData_MarketInfo* torg_info) {
  delete torg_info_;
  torg_info_ = torg_info;
  if (torg_info) {
    set_has_torg_info();
  } else {
    clear_has_torg_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ShmotData.torg_info)
}

// optional string pic_url = 9;
inline bool ShmotData::has_pic_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShmotData::set_has_pic_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShmotData::clear_has_pic_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShmotData::clear_pic_url() {
  pic_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pic_url();
}
inline const ::std::string& ShmotData::pic_url() const {
  // @@protoc_insertion_point(field_get:ShmotData.pic_url)
  return pic_url_.GetNoArena();
}
inline void ShmotData::set_pic_url(const ::std::string& value) {
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.pic_url)
}
#if LANG_CXX11
inline void ShmotData::set_pic_url(::std::string&& value) {
  set_has_pic_url();
  pic_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.pic_url)
}
#endif
inline void ShmotData::set_pic_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.pic_url)
}
inline void ShmotData::set_pic_url(const char* value, size_t size) {
  set_has_pic_url();
  pic_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.pic_url)
}
inline ::std::string* ShmotData::mutable_pic_url() {
  set_has_pic_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.pic_url)
  return pic_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData::release_pic_url() {
  // @@protoc_insertion_point(field_release:ShmotData.pic_url)
  clear_has_pic_url();
  return pic_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData::set_allocated_pic_url(::std::string* pic_url) {
  if (pic_url != NULL) {
    set_has_pic_url();
  } else {
    clear_has_pic_url();
  }
  pic_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pic_url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.pic_url)
}

// optional int64 firstmeet_ts = 10;
inline bool ShmotData::has_firstmeet_ts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ShmotData::set_has_firstmeet_ts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ShmotData::clear_has_firstmeet_ts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ShmotData::clear_firstmeet_ts() {
  firstmeet_ts_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeet_ts();
}
inline ::google::protobuf::int64 ShmotData::firstmeet_ts() const {
  // @@protoc_insertion_point(field_get:ShmotData.firstmeet_ts)
  return firstmeet_ts_;
}
inline void ShmotData::set_firstmeet_ts(::google::protobuf::int64 value) {
  set_has_firstmeet_ts();
  firstmeet_ts_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.firstmeet_ts)
}

// repeated string img_urls = 11;
inline int ShmotData::img_urls_size() const {
  return img_urls_.size();
}
inline void ShmotData::clear_img_urls() {
  img_urls_.Clear();
}
inline const ::std::string& ShmotData::img_urls(int index) const {
  // @@protoc_insertion_point(field_get:ShmotData.img_urls)
  return img_urls_.Get(index);
}
inline ::std::string* ShmotData::mutable_img_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ShmotData.img_urls)
  return img_urls_.Mutable(index);
}
inline void ShmotData::set_img_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ShmotData.img_urls)
  img_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ShmotData::set_img_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ShmotData.img_urls)
  img_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ShmotData::set_img_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  img_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ShmotData.img_urls)
}
inline void ShmotData::set_img_urls(int index, const char* value, size_t size) {
  img_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShmotData.img_urls)
}
inline ::std::string* ShmotData::add_img_urls() {
  // @@protoc_insertion_point(field_add_mutable:ShmotData.img_urls)
  return img_urls_.Add();
}
inline void ShmotData::add_img_urls(const ::std::string& value) {
  img_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ShmotData.img_urls)
}
#if LANG_CXX11
inline void ShmotData::add_img_urls(::std::string&& value) {
  img_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ShmotData.img_urls)
}
#endif
inline void ShmotData::add_img_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  img_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ShmotData.img_urls)
}
inline void ShmotData::add_img_urls(const char* value, size_t size) {
  img_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ShmotData.img_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShmotData::img_urls() const {
  // @@protoc_insertion_point(field_list:ShmotData.img_urls)
  return img_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ShmotData::mutable_img_urls() {
  // @@protoc_insertion_point(field_mutable_list:ShmotData.img_urls)
  return &img_urls_;
}

// optional string site = 12;
inline bool ShmotData::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShmotData::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShmotData::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShmotData::clear_site() {
  site_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site();
}
inline const ::std::string& ShmotData::site() const {
  // @@protoc_insertion_point(field_get:ShmotData.site)
  return site_.GetNoArena();
}
inline void ShmotData::set_site(const ::std::string& value) {
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.site)
}
#if LANG_CXX11
inline void ShmotData::set_site(::std::string&& value) {
  set_has_site();
  site_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.site)
}
#endif
inline void ShmotData::set_site(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.site)
}
inline void ShmotData::set_site(const char* value, size_t size) {
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.site)
}
inline ::std::string* ShmotData::mutable_site() {
  set_has_site();
  // @@protoc_insertion_point(field_mutable:ShmotData.site)
  return site_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData::release_site() {
  // @@protoc_insertion_point(field_release:ShmotData.site)
  clear_has_site();
  return site_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData::set_allocated_site(::std::string* site) {
  if (site != NULL) {
    set_has_site();
  } else {
    clear_has_site();
  }
  site_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.site)
}

// optional int64 site_hash = 13;
inline bool ShmotData::has_site_hash() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ShmotData::set_has_site_hash() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ShmotData::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ShmotData::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
inline ::google::protobuf::int64 ShmotData::site_hash() const {
  // @@protoc_insertion_point(field_get:ShmotData.site_hash)
  return site_hash_;
}
inline void ShmotData::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.site_hash)
}

// optional int32 geo_id = 14;
inline bool ShmotData::has_geo_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ShmotData::set_has_geo_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ShmotData::clear_has_geo_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ShmotData::clear_geo_id() {
  geo_id_ = 0;
  clear_has_geo_id();
}
inline ::google::protobuf::int32 ShmotData::geo_id() const {
  // @@protoc_insertion_point(field_get:ShmotData.geo_id)
  return geo_id_;
}
inline void ShmotData::set_geo_id(::google::protobuf::int32 value) {
  set_has_geo_id();
  geo_id_ = value;
  // @@protoc_insertion_point(field_set:ShmotData.geo_id)
}

// optional .ShmotData.MarketInfo direct_market_info = 15;
inline bool ShmotData::has_direct_market_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShmotData::set_has_direct_market_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShmotData::clear_has_direct_market_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShmotData::clear_direct_market_info() {
  if (direct_market_info_ != NULL) direct_market_info_->::ShmotData_MarketInfo::Clear();
  clear_has_direct_market_info();
}
inline const ::ShmotData_MarketInfo& ShmotData::direct_market_info() const {
  const ::ShmotData_MarketInfo* p = direct_market_info_;
  // @@protoc_insertion_point(field_get:ShmotData.direct_market_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ShmotData_MarketInfo*>(
      &::_ShmotData_MarketInfo_default_instance_);
}
inline ::ShmotData_MarketInfo* ShmotData::mutable_direct_market_info() {
  set_has_direct_market_info();
  if (direct_market_info_ == NULL) {
    direct_market_info_ = new ::ShmotData_MarketInfo;
  }
  // @@protoc_insertion_point(field_mutable:ShmotData.direct_market_info)
  return direct_market_info_;
}
inline ::ShmotData_MarketInfo* ShmotData::release_direct_market_info() {
  // @@protoc_insertion_point(field_release:ShmotData.direct_market_info)
  clear_has_direct_market_info();
  ::ShmotData_MarketInfo* temp = direct_market_info_;
  direct_market_info_ = NULL;
  return temp;
}
inline void ShmotData::set_allocated_direct_market_info(::ShmotData_MarketInfo* direct_market_info) {
  delete direct_market_info_;
  direct_market_info_ = direct_market_info;
  if (direct_market_info) {
    set_has_direct_market_info();
  } else {
    clear_has_direct_market_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ShmotData.direct_market_info)
}

// optional string rb_url = 16;
inline bool ShmotData::has_rb_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShmotData::set_has_rb_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShmotData::clear_has_rb_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShmotData::clear_rb_url() {
  rb_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rb_url();
}
inline const ::std::string& ShmotData::rb_url() const {
  // @@protoc_insertion_point(field_get:ShmotData.rb_url)
  return rb_url_.GetNoArena();
}
inline void ShmotData::set_rb_url(const ::std::string& value) {
  set_has_rb_url();
  rb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShmotData.rb_url)
}
#if LANG_CXX11
inline void ShmotData::set_rb_url(::std::string&& value) {
  set_has_rb_url();
  rb_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShmotData.rb_url)
}
#endif
inline void ShmotData::set_rb_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rb_url();
  rb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShmotData.rb_url)
}
inline void ShmotData::set_rb_url(const char* value, size_t size) {
  set_has_rb_url();
  rb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShmotData.rb_url)
}
inline ::std::string* ShmotData::mutable_rb_url() {
  set_has_rb_url();
  // @@protoc_insertion_point(field_mutable:ShmotData.rb_url)
  return rb_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmotData::release_rb_url() {
  // @@protoc_insertion_point(field_release:ShmotData.rb_url)
  clear_has_rb_url();
  return rb_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmotData::set_allocated_rb_url(::std::string* rb_url) {
  if (rb_url != NULL) {
    set_has_rb_url();
  } else {
    clear_has_rb_url();
  }
  rb_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rb_url);
  // @@protoc_insertion_point(field_set_allocated:ShmotData.rb_url)
}

// -------------------------------------------------------------------

// ItemRank

// required int64 id = 1;
inline bool ItemRank::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemRank::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemRank::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemRank::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ItemRank::id() const {
  // @@protoc_insertion_point(field_get:ItemRank.id)
  return id_;
}
inline void ItemRank::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ItemRank.id)
}

// optional float rank = 2;
inline bool ItemRank::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemRank::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float ItemRank::rank() const {
  // @@protoc_insertion_point(field_get:ItemRank.rank)
  return rank_;
}
inline void ItemRank::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ItemRank.rank)
}

// -------------------------------------------------------------------

// CategoryItemsForFigure

// required .FigureType figure_type = 1;
inline bool CategoryItemsForFigure::has_figure_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CategoryItemsForFigure::set_has_figure_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CategoryItemsForFigure::clear_has_figure_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CategoryItemsForFigure::clear_figure_type() {
  figure_type_ = 0;
  clear_has_figure_type();
}
inline ::FigureType CategoryItemsForFigure::figure_type() const {
  // @@protoc_insertion_point(field_get:CategoryItemsForFigure.figure_type)
  return static_cast< ::FigureType >(figure_type_);
}
inline void CategoryItemsForFigure::set_figure_type(::FigureType value) {
  assert(::FigureType_IsValid(value));
  set_has_figure_type();
  figure_type_ = value;
  // @@protoc_insertion_point(field_set:CategoryItemsForFigure.figure_type)
}

// required int32 category_id = 2;
inline bool CategoryItemsForFigure::has_category_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CategoryItemsForFigure::set_has_category_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CategoryItemsForFigure::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CategoryItemsForFigure::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 CategoryItemsForFigure::category_id() const {
  // @@protoc_insertion_point(field_get:CategoryItemsForFigure.category_id)
  return category_id_;
}
inline void CategoryItemsForFigure::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:CategoryItemsForFigure.category_id)
}

// repeated .ItemRank items = 3;
inline int CategoryItemsForFigure::items_size() const {
  return items_.size();
}
inline void CategoryItemsForFigure::clear_items() {
  items_.Clear();
}
inline const ::ItemRank& CategoryItemsForFigure::items(int index) const {
  // @@protoc_insertion_point(field_get:CategoryItemsForFigure.items)
  return items_.Get(index);
}
inline ::ItemRank* CategoryItemsForFigure::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CategoryItemsForFigure.items)
  return items_.Mutable(index);
}
inline ::ItemRank* CategoryItemsForFigure::add_items() {
  // @@protoc_insertion_point(field_add:CategoryItemsForFigure.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ItemRank >*
CategoryItemsForFigure::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CategoryItemsForFigure.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemRank >&
CategoryItemsForFigure::items() const {
  // @@protoc_insertion_point(field_list:CategoryItemsForFigure.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FigureType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FigureType>() {
  return ::FigureType_descriptor();
}
template <> struct is_proto_enum< ::CurrencyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CurrencyType>() {
  return ::CurrencyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_shmot_2eproto__INCLUDED
