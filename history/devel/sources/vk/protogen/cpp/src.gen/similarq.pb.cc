// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: similarq.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "similarq.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace similarq {
class SimilarQueryInfo_SimilarQueryStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SimilarQueryInfo_SimilarQueryStats>
     _instance;
} _SimilarQueryInfo_SimilarQueryStats_default_instance_;
class SimilarQueryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SimilarQueryInfo>
     _instance;
} _SimilarQueryInfo_default_instance_;

namespace protobuf_similarq_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo_SimilarQueryStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo_SimilarQueryStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo_SimilarQueryStats, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo_SimilarQueryStats, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo_SimilarQueryStats, words_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarQueryInfo, query_stats_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(SimilarQueryInfo_SimilarQueryStats)},
  { 11, 18, sizeof(SimilarQueryInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimilarQueryInfo_SimilarQueryStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimilarQueryInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "similarq.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SimilarQueryInfo_SimilarQueryStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SimilarQueryInfo_SimilarQueryStats_default_instance_);_SimilarQueryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SimilarQueryInfo_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016similarq.proto\022\033ru.mail.go.webbase.sim"
      "ilarq\"\276\001\n\020SimilarQueryInfo\022\022\n\nquery_text"
      "\030\001 \001(\t\022T\n\013query_stats\030\002 \003(\0132\?.ru.mail.go"
      ".webbase.similarq.SimilarQueryInfo.Simil"
      "arQueryStats\032@\n\021SimilarQueryStats\022\014\n\004tex"
      "t\030\001 \001(\t\022\016\n\006clicks\030\002 \001(\r\022\r\n\005words\030\003 \001(\rB\024"
      "B\022SimilarQueriesData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "similarq.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_similarq_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimilarQueryInfo_SimilarQueryStats::kTextFieldNumber;
const int SimilarQueryInfo_SimilarQueryStats::kClicksFieldNumber;
const int SimilarQueryInfo_SimilarQueryStats::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimilarQueryInfo_SimilarQueryStats::SimilarQueryInfo_SimilarQueryStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_similarq_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
}
SimilarQueryInfo_SimilarQueryStats::SimilarQueryInfo_SimilarQueryStats(const SimilarQueryInfo_SimilarQueryStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&clicks_, &from.clicks_,
    static_cast<size_t>(reinterpret_cast<char*>(&words_) -
    reinterpret_cast<char*>(&clicks_)) + sizeof(words_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
}

void SimilarQueryInfo_SimilarQueryStats::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clicks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&words_) -
      reinterpret_cast<char*>(&clicks_)) + sizeof(words_));
}

SimilarQueryInfo_SimilarQueryStats::~SimilarQueryInfo_SimilarQueryStats() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  SharedDtor();
}

void SimilarQueryInfo_SimilarQueryStats::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SimilarQueryInfo_SimilarQueryStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimilarQueryInfo_SimilarQueryStats::descriptor() {
  protobuf_similarq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_similarq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimilarQueryInfo_SimilarQueryStats& SimilarQueryInfo_SimilarQueryStats::default_instance() {
  protobuf_similarq_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimilarQueryInfo_SimilarQueryStats* SimilarQueryInfo_SimilarQueryStats::New(::google::protobuf::Arena* arena) const {
  SimilarQueryInfo_SimilarQueryStats* n = new SimilarQueryInfo_SimilarQueryStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimilarQueryInfo_SimilarQueryStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&clicks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&words_) -
        reinterpret_cast<char*>(&clicks_)) + sizeof(words_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimilarQueryInfo_SimilarQueryStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 words = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_words();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &words_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  return false;
#undef DO_
}

void SimilarQueryInfo_SimilarQueryStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional uint32 clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clicks(), output);
  }

  // optional uint32 words = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->words(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
}

::google::protobuf::uint8* SimilarQueryInfo_SimilarQueryStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional uint32 clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clicks(), target);
  }

  // optional uint32 words = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->words(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  return target;
}

size_t SimilarQueryInfo_SimilarQueryStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 clicks = 2;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks());
    }

    // optional uint32 words = 3;
    if (has_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->words());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimilarQueryInfo_SimilarQueryStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarQueryInfo_SimilarQueryStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimilarQueryInfo_SimilarQueryStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
    MergeFrom(*source);
  }
}

void SimilarQueryInfo_SimilarQueryStats::MergeFrom(const SimilarQueryInfo_SimilarQueryStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      clicks_ = from.clicks_;
    }
    if (cached_has_bits & 0x00000004u) {
      words_ = from.words_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimilarQueryInfo_SimilarQueryStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarQueryInfo_SimilarQueryStats::CopyFrom(const SimilarQueryInfo_SimilarQueryStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarQueryInfo_SimilarQueryStats::IsInitialized() const {
  return true;
}

void SimilarQueryInfo_SimilarQueryStats::Swap(SimilarQueryInfo_SimilarQueryStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimilarQueryInfo_SimilarQueryStats::InternalSwap(SimilarQueryInfo_SimilarQueryStats* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(clicks_, other->clicks_);
  swap(words_, other->words_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimilarQueryInfo_SimilarQueryStats::GetMetadata() const {
  protobuf_similarq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_similarq_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimilarQueryInfo_SimilarQueryStats

// optional string text = 1;
bool SimilarQueryInfo_SimilarQueryStats::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimilarQueryInfo_SimilarQueryStats::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void SimilarQueryInfo_SimilarQueryStats::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimilarQueryInfo_SimilarQueryStats::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& SimilarQueryInfo_SimilarQueryStats::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
  return text_.GetNoArena();
}
void SimilarQueryInfo_SimilarQueryStats::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}
#if LANG_CXX11
void SimilarQueryInfo_SimilarQueryStats::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}
#endif
void SimilarQueryInfo_SimilarQueryStats::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}
void SimilarQueryInfo_SimilarQueryStats::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}
::std::string* SimilarQueryInfo_SimilarQueryStats::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimilarQueryInfo_SimilarQueryStats::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimilarQueryInfo_SimilarQueryStats::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}

// optional uint32 clicks = 2;
bool SimilarQueryInfo_SimilarQueryStats::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimilarQueryInfo_SimilarQueryStats::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
void SimilarQueryInfo_SimilarQueryStats::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimilarQueryInfo_SimilarQueryStats::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
::google::protobuf::uint32 SimilarQueryInfo_SimilarQueryStats::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.clicks)
  return clicks_;
}
void SimilarQueryInfo_SimilarQueryStats::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.clicks)
}

// optional uint32 words = 3;
bool SimilarQueryInfo_SimilarQueryStats::has_words() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SimilarQueryInfo_SimilarQueryStats::set_has_words() {
  _has_bits_[0] |= 0x00000004u;
}
void SimilarQueryInfo_SimilarQueryStats::clear_has_words() {
  _has_bits_[0] &= ~0x00000004u;
}
void SimilarQueryInfo_SimilarQueryStats::clear_words() {
  words_ = 0u;
  clear_has_words();
}
::google::protobuf::uint32 SimilarQueryInfo_SimilarQueryStats::words() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.words)
  return words_;
}
void SimilarQueryInfo_SimilarQueryStats::set_words(::google::protobuf::uint32 value) {
  set_has_words();
  words_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.words)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimilarQueryInfo::kQueryTextFieldNumber;
const int SimilarQueryInfo::kQueryStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimilarQueryInfo::SimilarQueryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_similarq_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.similarq.SimilarQueryInfo)
}
SimilarQueryInfo::SimilarQueryInfo(const SimilarQueryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      query_stats_(from.query_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.similarq.SimilarQueryInfo)
}

void SimilarQueryInfo::SharedCtor() {
  _cached_size_ = 0;
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SimilarQueryInfo::~SimilarQueryInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  SharedDtor();
}

void SimilarQueryInfo::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SimilarQueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimilarQueryInfo::descriptor() {
  protobuf_similarq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_similarq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimilarQueryInfo& SimilarQueryInfo::default_instance() {
  protobuf_similarq_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimilarQueryInfo* SimilarQueryInfo::New(::google::protobuf::Arena* arena) const {
  SimilarQueryInfo* n = new SimilarQueryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimilarQueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_stats_.Clear();
  if (has_query_text()) {
    GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimilarQueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats query_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  return false;
#undef DO_
}

void SimilarQueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // repeated .ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats query_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->query_stats(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.similarq.SimilarQueryInfo)
}

::google::protobuf::uint8* SimilarQueryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // repeated .ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats query_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->query_stats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  return target;
}

size_t SimilarQueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats query_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->query_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_stats(static_cast<int>(i)));
    }
  }

  // optional string query_text = 1;
  if (has_query_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimilarQueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarQueryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimilarQueryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.similarq.SimilarQueryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.similarq.SimilarQueryInfo)
    MergeFrom(*source);
  }
}

void SimilarQueryInfo::MergeFrom(const SimilarQueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_stats_.MergeFrom(from.query_stats_);
  if (from.has_query_text()) {
    set_has_query_text();
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
}

void SimilarQueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarQueryInfo::CopyFrom(const SimilarQueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.similarq.SimilarQueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarQueryInfo::IsInitialized() const {
  return true;
}

void SimilarQueryInfo::Swap(SimilarQueryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimilarQueryInfo::InternalSwap(SimilarQueryInfo* other) {
  using std::swap;
  query_stats_.InternalSwap(&other->query_stats_);
  query_text_.Swap(&other->query_text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimilarQueryInfo::GetMetadata() const {
  protobuf_similarq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_similarq_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimilarQueryInfo

// optional string query_text = 1;
bool SimilarQueryInfo::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimilarQueryInfo::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
void SimilarQueryInfo::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimilarQueryInfo::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& SimilarQueryInfo::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
  return query_text_.GetNoArena();
}
void SimilarQueryInfo::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}
#if LANG_CXX11
void SimilarQueryInfo::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}
#endif
void SimilarQueryInfo::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}
void SimilarQueryInfo::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}
::std::string* SimilarQueryInfo::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimilarQueryInfo::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimilarQueryInfo::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}

// repeated .ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats query_stats = 2;
int SimilarQueryInfo::query_stats_size() const {
  return query_stats_.size();
}
void SimilarQueryInfo::clear_query_stats() {
  query_stats_.Clear();
}
const ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats& SimilarQueryInfo::query_stats(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return query_stats_.Get(index);
}
::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats* SimilarQueryInfo::mutable_query_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return query_stats_.Mutable(index);
}
::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats* SimilarQueryInfo::add_query_stats() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return query_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats >*
SimilarQueryInfo::mutable_query_stats() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return &query_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats >&
SimilarQueryInfo::query_stats() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return query_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace similarq
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
