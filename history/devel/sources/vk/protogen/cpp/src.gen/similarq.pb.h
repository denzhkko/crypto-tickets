// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: similarq.proto

#ifndef PROTOBUF_similarq_2eproto__INCLUDED
#define PROTOBUF_similarq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace similarq {
class SimilarQueryInfo;
class SimilarQueryInfoDefaultTypeInternal;
extern SimilarQueryInfoDefaultTypeInternal _SimilarQueryInfo_default_instance_;
class SimilarQueryInfo_SimilarQueryStats;
class SimilarQueryInfo_SimilarQueryStatsDefaultTypeInternal;
extern SimilarQueryInfo_SimilarQueryStatsDefaultTypeInternal _SimilarQueryInfo_SimilarQueryStats_default_instance_;
}  // namespace similarq
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace similarq {

namespace protobuf_similarq_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_similarq_2eproto

// ===================================================================

class SimilarQueryInfo_SimilarQueryStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats) */ {
 public:
  SimilarQueryInfo_SimilarQueryStats();
  virtual ~SimilarQueryInfo_SimilarQueryStats();

  SimilarQueryInfo_SimilarQueryStats(const SimilarQueryInfo_SimilarQueryStats& from);

  inline SimilarQueryInfo_SimilarQueryStats& operator=(const SimilarQueryInfo_SimilarQueryStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimilarQueryInfo_SimilarQueryStats(SimilarQueryInfo_SimilarQueryStats&& from) noexcept
    : SimilarQueryInfo_SimilarQueryStats() {
    *this = ::std::move(from);
  }

  inline SimilarQueryInfo_SimilarQueryStats& operator=(SimilarQueryInfo_SimilarQueryStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimilarQueryInfo_SimilarQueryStats& default_instance();

  static inline const SimilarQueryInfo_SimilarQueryStats* internal_default_instance() {
    return reinterpret_cast<const SimilarQueryInfo_SimilarQueryStats*>(
               &_SimilarQueryInfo_SimilarQueryStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SimilarQueryInfo_SimilarQueryStats* other);
  friend void swap(SimilarQueryInfo_SimilarQueryStats& a, SimilarQueryInfo_SimilarQueryStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimilarQueryInfo_SimilarQueryStats* New() const PROTOBUF_FINAL { return New(NULL); }

  SimilarQueryInfo_SimilarQueryStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimilarQueryInfo_SimilarQueryStats& from);
  void MergeFrom(const SimilarQueryInfo_SimilarQueryStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimilarQueryInfo_SimilarQueryStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional uint32 clicks = 2;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  ::google::protobuf::uint32 clicks() const;
  void set_clicks(::google::protobuf::uint32 value);

  // optional uint32 words = 3;
  bool has_words() const;
  void clear_words();
  static const int kWordsFieldNumber = 3;
  ::google::protobuf::uint32 words() const;
  void set_words(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_words();
  void clear_has_words();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 clicks_;
  ::google::protobuf::uint32 words_;
  friend struct protobuf_similarq_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimilarQueryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.similarq.SimilarQueryInfo) */ {
 public:
  SimilarQueryInfo();
  virtual ~SimilarQueryInfo();

  SimilarQueryInfo(const SimilarQueryInfo& from);

  inline SimilarQueryInfo& operator=(const SimilarQueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimilarQueryInfo(SimilarQueryInfo&& from) noexcept
    : SimilarQueryInfo() {
    *this = ::std::move(from);
  }

  inline SimilarQueryInfo& operator=(SimilarQueryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimilarQueryInfo& default_instance();

  static inline const SimilarQueryInfo* internal_default_instance() {
    return reinterpret_cast<const SimilarQueryInfo*>(
               &_SimilarQueryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SimilarQueryInfo* other);
  friend void swap(SimilarQueryInfo& a, SimilarQueryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimilarQueryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SimilarQueryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimilarQueryInfo& from);
  void MergeFrom(const SimilarQueryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimilarQueryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SimilarQueryInfo_SimilarQueryStats SimilarQueryStats;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats query_stats = 2;
  int query_stats_size() const;
  void clear_query_stats();
  static const int kQueryStatsFieldNumber = 2;
  const ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats& query_stats(int index) const;
  ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats* mutable_query_stats(int index);
  ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats* add_query_stats();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats >*
      mutable_query_stats();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats >&
      query_stats() const;

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.similarq.SimilarQueryInfo)
 private:
  void set_has_query_text();
  void clear_has_query_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats > query_stats_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  friend struct protobuf_similarq_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimilarQueryInfo_SimilarQueryStats

// optional string text = 1;
inline bool SimilarQueryInfo_SimilarQueryStats::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimilarQueryInfo_SimilarQueryStats::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimilarQueryInfo_SimilarQueryStats::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimilarQueryInfo_SimilarQueryStats::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& SimilarQueryInfo_SimilarQueryStats::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
  return text_.GetNoArena();
}
inline void SimilarQueryInfo_SimilarQueryStats::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}
#if LANG_CXX11
inline void SimilarQueryInfo_SimilarQueryStats::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}
#endif
inline void SimilarQueryInfo_SimilarQueryStats::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}
inline void SimilarQueryInfo_SimilarQueryStats::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}
inline ::std::string* SimilarQueryInfo_SimilarQueryStats::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimilarQueryInfo_SimilarQueryStats::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimilarQueryInfo_SimilarQueryStats::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.text)
}

// optional uint32 clicks = 2;
inline bool SimilarQueryInfo_SimilarQueryStats::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimilarQueryInfo_SimilarQueryStats::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimilarQueryInfo_SimilarQueryStats::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimilarQueryInfo_SimilarQueryStats::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
inline ::google::protobuf::uint32 SimilarQueryInfo_SimilarQueryStats::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.clicks)
  return clicks_;
}
inline void SimilarQueryInfo_SimilarQueryStats::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.clicks)
}

// optional uint32 words = 3;
inline bool SimilarQueryInfo_SimilarQueryStats::has_words() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimilarQueryInfo_SimilarQueryStats::set_has_words() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimilarQueryInfo_SimilarQueryStats::clear_has_words() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimilarQueryInfo_SimilarQueryStats::clear_words() {
  words_ = 0u;
  clear_has_words();
}
inline ::google::protobuf::uint32 SimilarQueryInfo_SimilarQueryStats::words() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.words)
  return words_;
}
inline void SimilarQueryInfo_SimilarQueryStats::set_words(::google::protobuf::uint32 value) {
  set_has_words();
  words_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats.words)
}

// -------------------------------------------------------------------

// SimilarQueryInfo

// optional string query_text = 1;
inline bool SimilarQueryInfo::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimilarQueryInfo::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimilarQueryInfo::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimilarQueryInfo::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& SimilarQueryInfo::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
  return query_text_.GetNoArena();
}
inline void SimilarQueryInfo::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}
#if LANG_CXX11
inline void SimilarQueryInfo::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}
#endif
inline void SimilarQueryInfo::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}
inline void SimilarQueryInfo::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}
inline ::std::string* SimilarQueryInfo::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimilarQueryInfo::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimilarQueryInfo::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_text)
}

// repeated .ru.mail.go.webbase.similarq.SimilarQueryInfo.SimilarQueryStats query_stats = 2;
inline int SimilarQueryInfo::query_stats_size() const {
  return query_stats_.size();
}
inline void SimilarQueryInfo::clear_query_stats() {
  query_stats_.Clear();
}
inline const ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats& SimilarQueryInfo::query_stats(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return query_stats_.Get(index);
}
inline ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats* SimilarQueryInfo::mutable_query_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return query_stats_.Mutable(index);
}
inline ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats* SimilarQueryInfo::add_query_stats() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return query_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats >*
SimilarQueryInfo::mutable_query_stats() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return &query_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::similarq::SimilarQueryInfo_SimilarQueryStats >&
SimilarQueryInfo::query_stats() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.similarq.SimilarQueryInfo.query_stats)
  return query_stats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace similarq
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_similarq_2eproto__INCLUDED
