// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smoothing_searcherd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "smoothing_searcherd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {
class SmoothingSearchResult_UrlDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SmoothingSearchResult_UrlData>
     _instance;
} _SmoothingSearchResult_UrlData_default_instance_;
class SmoothingSearchResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SmoothingSearchResult>
     _instance;
} _SmoothingSearchResult_default_instance_;

namespace protobuf_smoothing_5fsearcherd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult_UrlData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult_UrlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult_UrlData, url_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult_UrlData, relevance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult_UrlData, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult_UrlData, cluster_prob_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult, max_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothingSearchResult, url_data_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(SmoothingSearchResult_UrlData)},
  { 13, 20, sizeof(SmoothingSearchResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SmoothingSearchResult_UrlData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SmoothingSearchResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "smoothing_searcherd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SmoothingSearchResult_UrlData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SmoothingSearchResult_UrlData_default_instance_);_SmoothingSearchResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SmoothingSearchResult_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031smoothing_searcherd.proto\022\027ru.mail.go."
      "webbase.serp\"\314\001\n\025SmoothingSearchResult\022\017"
      "\n\007max_pos\030\001 \002(\005\022H\n\010url_data\030\002 \003(\01326.ru.m"
      "ail.go.webbase.serp.SmoothingSearchResul"
      "t.UrlData\032X\n\007UrlData\022\020\n\010url_hash\030\001 \002(\005\022\021"
      "\n\trelevance\030\002 \002(\002\022\022\n\ncluster_id\030\003 \001(\005\022\024\n"
      "\014cluster_prob\030\004 \001(\002B\034B\032SmoothingSearchRe"
      "sultProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "smoothing_searcherd.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_smoothing_5fsearcherd_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmoothingSearchResult_UrlData::kUrlHashFieldNumber;
const int SmoothingSearchResult_UrlData::kRelevanceFieldNumber;
const int SmoothingSearchResult_UrlData::kClusterIdFieldNumber;
const int SmoothingSearchResult_UrlData::kClusterProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmoothingSearchResult_UrlData::SmoothingSearchResult_UrlData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_smoothing_5fsearcherd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
}
SmoothingSearchResult_UrlData::SmoothingSearchResult_UrlData(const SmoothingSearchResult_UrlData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&url_hash_, &from.url_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&cluster_prob_) -
    reinterpret_cast<char*>(&url_hash_)) + sizeof(cluster_prob_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
}

void SmoothingSearchResult_UrlData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&url_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_prob_) -
      reinterpret_cast<char*>(&url_hash_)) + sizeof(cluster_prob_));
}

SmoothingSearchResult_UrlData::~SmoothingSearchResult_UrlData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  SharedDtor();
}

void SmoothingSearchResult_UrlData::SharedDtor() {
}

void SmoothingSearchResult_UrlData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothingSearchResult_UrlData::descriptor() {
  protobuf_smoothing_5fsearcherd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_smoothing_5fsearcherd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SmoothingSearchResult_UrlData& SmoothingSearchResult_UrlData::default_instance() {
  protobuf_smoothing_5fsearcherd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SmoothingSearchResult_UrlData* SmoothingSearchResult_UrlData::New(::google::protobuf::Arena* arena) const {
  SmoothingSearchResult_UrlData* n = new SmoothingSearchResult_UrlData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmoothingSearchResult_UrlData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&url_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cluster_prob_) -
        reinterpret_cast<char*>(&url_hash_)) + sizeof(cluster_prob_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SmoothingSearchResult_UrlData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 url_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_url_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &url_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float relevance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_relevance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relevance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cluster_prob = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_cluster_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cluster_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  return false;
#undef DO_
}

void SmoothingSearchResult_UrlData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 url_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->url_hash(), output);
  }

  // required float relevance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->relevance(), output);
  }

  // optional int32 cluster_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cluster_id(), output);
  }

  // optional float cluster_prob = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cluster_prob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
}

::google::protobuf::uint8* SmoothingSearchResult_UrlData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 url_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->url_hash(), target);
  }

  // required float relevance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->relevance(), target);
  }

  // optional int32 cluster_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cluster_id(), target);
  }

  // optional float cluster_prob = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cluster_prob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  return target;
}

size_t SmoothingSearchResult_UrlData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  size_t total_size = 0;

  if (has_url_hash()) {
    // required int32 url_hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->url_hash());
  }

  if (has_relevance()) {
    // required float relevance = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SmoothingSearchResult_UrlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 url_hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->url_hash());

    // required float relevance = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 cluster_id = 3;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cluster_id());
    }

    // optional float cluster_prob = 4;
    if (has_cluster_prob()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothingSearchResult_UrlData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  GOOGLE_DCHECK_NE(&from, this);
  const SmoothingSearchResult_UrlData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SmoothingSearchResult_UrlData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
    MergeFrom(*source);
  }
}

void SmoothingSearchResult_UrlData::MergeFrom(const SmoothingSearchResult_UrlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      url_hash_ = from.url_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      relevance_ = from.relevance_;
    }
    if (cached_has_bits & 0x00000004u) {
      cluster_id_ = from.cluster_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cluster_prob_ = from.cluster_prob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SmoothingSearchResult_UrlData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothingSearchResult_UrlData::CopyFrom(const SmoothingSearchResult_UrlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothingSearchResult_UrlData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SmoothingSearchResult_UrlData::Swap(SmoothingSearchResult_UrlData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmoothingSearchResult_UrlData::InternalSwap(SmoothingSearchResult_UrlData* other) {
  using std::swap;
  swap(url_hash_, other->url_hash_);
  swap(relevance_, other->relevance_);
  swap(cluster_id_, other->cluster_id_);
  swap(cluster_prob_, other->cluster_prob_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmoothingSearchResult_UrlData::GetMetadata() const {
  protobuf_smoothing_5fsearcherd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_smoothing_5fsearcherd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmoothingSearchResult_UrlData

// required int32 url_hash = 1;
bool SmoothingSearchResult_UrlData::has_url_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SmoothingSearchResult_UrlData::set_has_url_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void SmoothingSearchResult_UrlData::clear_has_url_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void SmoothingSearchResult_UrlData::clear_url_hash() {
  url_hash_ = 0;
  clear_has_url_hash();
}
::google::protobuf::int32 SmoothingSearchResult_UrlData::url_hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.url_hash)
  return url_hash_;
}
void SmoothingSearchResult_UrlData::set_url_hash(::google::protobuf::int32 value) {
  set_has_url_hash();
  url_hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.url_hash)
}

// required float relevance = 2;
bool SmoothingSearchResult_UrlData::has_relevance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SmoothingSearchResult_UrlData::set_has_relevance() {
  _has_bits_[0] |= 0x00000002u;
}
void SmoothingSearchResult_UrlData::clear_has_relevance() {
  _has_bits_[0] &= ~0x00000002u;
}
void SmoothingSearchResult_UrlData::clear_relevance() {
  relevance_ = 0;
  clear_has_relevance();
}
float SmoothingSearchResult_UrlData::relevance() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.relevance)
  return relevance_;
}
void SmoothingSearchResult_UrlData::set_relevance(float value) {
  set_has_relevance();
  relevance_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.relevance)
}

// optional int32 cluster_id = 3;
bool SmoothingSearchResult_UrlData::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SmoothingSearchResult_UrlData::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SmoothingSearchResult_UrlData::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SmoothingSearchResult_UrlData::clear_cluster_id() {
  cluster_id_ = 0;
  clear_has_cluster_id();
}
::google::protobuf::int32 SmoothingSearchResult_UrlData::cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.cluster_id)
  return cluster_id_;
}
void SmoothingSearchResult_UrlData::set_cluster_id(::google::protobuf::int32 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.cluster_id)
}

// optional float cluster_prob = 4;
bool SmoothingSearchResult_UrlData::has_cluster_prob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SmoothingSearchResult_UrlData::set_has_cluster_prob() {
  _has_bits_[0] |= 0x00000008u;
}
void SmoothingSearchResult_UrlData::clear_has_cluster_prob() {
  _has_bits_[0] &= ~0x00000008u;
}
void SmoothingSearchResult_UrlData::clear_cluster_prob() {
  cluster_prob_ = 0;
  clear_has_cluster_prob();
}
float SmoothingSearchResult_UrlData::cluster_prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.cluster_prob)
  return cluster_prob_;
}
void SmoothingSearchResult_UrlData::set_cluster_prob(float value) {
  set_has_cluster_prob();
  cluster_prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.cluster_prob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmoothingSearchResult::kMaxPosFieldNumber;
const int SmoothingSearchResult::kUrlDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmoothingSearchResult::SmoothingSearchResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_smoothing_5fsearcherd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.SmoothingSearchResult)
}
SmoothingSearchResult::SmoothingSearchResult(const SmoothingSearchResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_data_(from.url_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_pos_ = from.max_pos_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.SmoothingSearchResult)
}

void SmoothingSearchResult::SharedCtor() {
  _cached_size_ = 0;
  max_pos_ = 0;
}

SmoothingSearchResult::~SmoothingSearchResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.SmoothingSearchResult)
  SharedDtor();
}

void SmoothingSearchResult::SharedDtor() {
}

void SmoothingSearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothingSearchResult::descriptor() {
  protobuf_smoothing_5fsearcherd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_smoothing_5fsearcherd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SmoothingSearchResult& SmoothingSearchResult::default_instance() {
  protobuf_smoothing_5fsearcherd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SmoothingSearchResult* SmoothingSearchResult::New(::google::protobuf::Arena* arena) const {
  SmoothingSearchResult* n = new SmoothingSearchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmoothingSearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_data_.Clear();
  max_pos_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SmoothingSearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 max_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData url_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_url_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.SmoothingSearchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.SmoothingSearchResult)
  return false;
#undef DO_
}

void SmoothingSearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 max_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_pos(), output);
  }

  // repeated .ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData url_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->url_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->url_data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.SmoothingSearchResult)
}

::google::protobuf::uint8* SmoothingSearchResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 max_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_pos(), target);
  }

  // repeated .ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData url_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->url_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->url_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.SmoothingSearchResult)
  return target;
}

size_t SmoothingSearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 max_pos = 1;
  if (has_max_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_pos());
  }
  // repeated .ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData url_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->url_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->url_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothingSearchResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SmoothingSearchResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SmoothingSearchResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.SmoothingSearchResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.SmoothingSearchResult)
    MergeFrom(*source);
  }
}

void SmoothingSearchResult::MergeFrom(const SmoothingSearchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_data_.MergeFrom(from.url_data_);
  if (from.has_max_pos()) {
    set_max_pos(from.max_pos());
  }
}

void SmoothingSearchResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothingSearchResult::CopyFrom(const SmoothingSearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.SmoothingSearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothingSearchResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->url_data())) return false;
  return true;
}

void SmoothingSearchResult::Swap(SmoothingSearchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmoothingSearchResult::InternalSwap(SmoothingSearchResult* other) {
  using std::swap;
  url_data_.InternalSwap(&other->url_data_);
  swap(max_pos_, other->max_pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmoothingSearchResult::GetMetadata() const {
  protobuf_smoothing_5fsearcherd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_smoothing_5fsearcherd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmoothingSearchResult

// required int32 max_pos = 1;
bool SmoothingSearchResult::has_max_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SmoothingSearchResult::set_has_max_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void SmoothingSearchResult::clear_has_max_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void SmoothingSearchResult::clear_max_pos() {
  max_pos_ = 0;
  clear_has_max_pos();
}
::google::protobuf::int32 SmoothingSearchResult::max_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.max_pos)
  return max_pos_;
}
void SmoothingSearchResult::set_max_pos(::google::protobuf::int32 value) {
  set_has_max_pos();
  max_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.max_pos)
}

// repeated .ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData url_data = 2;
int SmoothingSearchResult::url_data_size() const {
  return url_data_.size();
}
void SmoothingSearchResult::clear_url_data() {
  url_data_.Clear();
}
const ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData& SmoothingSearchResult::url_data(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return url_data_.Get(index);
}
::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData* SmoothingSearchResult::mutable_url_data(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return url_data_.Mutable(index);
}
::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData* SmoothingSearchResult::add_url_data() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return url_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData >*
SmoothingSearchResult::mutable_url_data() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return &url_data_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData >&
SmoothingSearchResult::url_data() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return url_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
