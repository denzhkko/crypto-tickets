// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smoothing_searcherd.proto

#ifndef PROTOBUF_smoothing_5fsearcherd_2eproto__INCLUDED
#define PROTOBUF_smoothing_5fsearcherd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {
class SmoothingSearchResult;
class SmoothingSearchResultDefaultTypeInternal;
extern SmoothingSearchResultDefaultTypeInternal _SmoothingSearchResult_default_instance_;
class SmoothingSearchResult_UrlData;
class SmoothingSearchResult_UrlDataDefaultTypeInternal;
extern SmoothingSearchResult_UrlDataDefaultTypeInternal _SmoothingSearchResult_UrlData_default_instance_;
}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {

namespace protobuf_smoothing_5fsearcherd_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_smoothing_5fsearcherd_2eproto

// ===================================================================

class SmoothingSearchResult_UrlData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData) */ {
 public:
  SmoothingSearchResult_UrlData();
  virtual ~SmoothingSearchResult_UrlData();

  SmoothingSearchResult_UrlData(const SmoothingSearchResult_UrlData& from);

  inline SmoothingSearchResult_UrlData& operator=(const SmoothingSearchResult_UrlData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmoothingSearchResult_UrlData(SmoothingSearchResult_UrlData&& from) noexcept
    : SmoothingSearchResult_UrlData() {
    *this = ::std::move(from);
  }

  inline SmoothingSearchResult_UrlData& operator=(SmoothingSearchResult_UrlData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothingSearchResult_UrlData& default_instance();

  static inline const SmoothingSearchResult_UrlData* internal_default_instance() {
    return reinterpret_cast<const SmoothingSearchResult_UrlData*>(
               &_SmoothingSearchResult_UrlData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SmoothingSearchResult_UrlData* other);
  friend void swap(SmoothingSearchResult_UrlData& a, SmoothingSearchResult_UrlData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmoothingSearchResult_UrlData* New() const PROTOBUF_FINAL { return New(NULL); }

  SmoothingSearchResult_UrlData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SmoothingSearchResult_UrlData& from);
  void MergeFrom(const SmoothingSearchResult_UrlData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SmoothingSearchResult_UrlData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 url_hash = 1;
  bool has_url_hash() const;
  void clear_url_hash();
  static const int kUrlHashFieldNumber = 1;
  ::google::protobuf::int32 url_hash() const;
  void set_url_hash(::google::protobuf::int32 value);

  // required float relevance = 2;
  bool has_relevance() const;
  void clear_relevance();
  static const int kRelevanceFieldNumber = 2;
  float relevance() const;
  void set_relevance(float value);

  // optional int32 cluster_id = 3;
  bool has_cluster_id() const;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  ::google::protobuf::int32 cluster_id() const;
  void set_cluster_id(::google::protobuf::int32 value);

  // optional float cluster_prob = 4;
  bool has_cluster_prob() const;
  void clear_cluster_prob();
  static const int kClusterProbFieldNumber = 4;
  float cluster_prob() const;
  void set_cluster_prob(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData)
 private:
  void set_has_url_hash();
  void clear_has_url_hash();
  void set_has_relevance();
  void clear_has_relevance();
  void set_has_cluster_id();
  void clear_has_cluster_id();
  void set_has_cluster_prob();
  void clear_has_cluster_prob();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 url_hash_;
  float relevance_;
  ::google::protobuf::int32 cluster_id_;
  float cluster_prob_;
  friend struct protobuf_smoothing_5fsearcherd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SmoothingSearchResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.SmoothingSearchResult) */ {
 public:
  SmoothingSearchResult();
  virtual ~SmoothingSearchResult();

  SmoothingSearchResult(const SmoothingSearchResult& from);

  inline SmoothingSearchResult& operator=(const SmoothingSearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmoothingSearchResult(SmoothingSearchResult&& from) noexcept
    : SmoothingSearchResult() {
    *this = ::std::move(from);
  }

  inline SmoothingSearchResult& operator=(SmoothingSearchResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothingSearchResult& default_instance();

  static inline const SmoothingSearchResult* internal_default_instance() {
    return reinterpret_cast<const SmoothingSearchResult*>(
               &_SmoothingSearchResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SmoothingSearchResult* other);
  friend void swap(SmoothingSearchResult& a, SmoothingSearchResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmoothingSearchResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SmoothingSearchResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SmoothingSearchResult& from);
  void MergeFrom(const SmoothingSearchResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SmoothingSearchResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SmoothingSearchResult_UrlData UrlData;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData url_data = 2;
  int url_data_size() const;
  void clear_url_data();
  static const int kUrlDataFieldNumber = 2;
  const ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData& url_data(int index) const;
  ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData* mutable_url_data(int index);
  ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData* add_url_data();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData >*
      mutable_url_data();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData >&
      url_data() const;

  // required int32 max_pos = 1;
  bool has_max_pos() const;
  void clear_max_pos();
  static const int kMaxPosFieldNumber = 1;
  ::google::protobuf::int32 max_pos() const;
  void set_max_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.SmoothingSearchResult)
 private:
  void set_has_max_pos();
  void clear_has_max_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData > url_data_;
  ::google::protobuf::int32 max_pos_;
  friend struct protobuf_smoothing_5fsearcherd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SmoothingSearchResult_UrlData

// required int32 url_hash = 1;
inline bool SmoothingSearchResult_UrlData::has_url_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmoothingSearchResult_UrlData::set_has_url_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmoothingSearchResult_UrlData::clear_has_url_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmoothingSearchResult_UrlData::clear_url_hash() {
  url_hash_ = 0;
  clear_has_url_hash();
}
inline ::google::protobuf::int32 SmoothingSearchResult_UrlData::url_hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.url_hash)
  return url_hash_;
}
inline void SmoothingSearchResult_UrlData::set_url_hash(::google::protobuf::int32 value) {
  set_has_url_hash();
  url_hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.url_hash)
}

// required float relevance = 2;
inline bool SmoothingSearchResult_UrlData::has_relevance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmoothingSearchResult_UrlData::set_has_relevance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmoothingSearchResult_UrlData::clear_has_relevance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmoothingSearchResult_UrlData::clear_relevance() {
  relevance_ = 0;
  clear_has_relevance();
}
inline float SmoothingSearchResult_UrlData::relevance() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.relevance)
  return relevance_;
}
inline void SmoothingSearchResult_UrlData::set_relevance(float value) {
  set_has_relevance();
  relevance_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.relevance)
}

// optional int32 cluster_id = 3;
inline bool SmoothingSearchResult_UrlData::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmoothingSearchResult_UrlData::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmoothingSearchResult_UrlData::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmoothingSearchResult_UrlData::clear_cluster_id() {
  cluster_id_ = 0;
  clear_has_cluster_id();
}
inline ::google::protobuf::int32 SmoothingSearchResult_UrlData::cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.cluster_id)
  return cluster_id_;
}
inline void SmoothingSearchResult_UrlData::set_cluster_id(::google::protobuf::int32 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.cluster_id)
}

// optional float cluster_prob = 4;
inline bool SmoothingSearchResult_UrlData::has_cluster_prob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmoothingSearchResult_UrlData::set_has_cluster_prob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmoothingSearchResult_UrlData::clear_has_cluster_prob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmoothingSearchResult_UrlData::clear_cluster_prob() {
  cluster_prob_ = 0;
  clear_has_cluster_prob();
}
inline float SmoothingSearchResult_UrlData::cluster_prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.cluster_prob)
  return cluster_prob_;
}
inline void SmoothingSearchResult_UrlData::set_cluster_prob(float value) {
  set_has_cluster_prob();
  cluster_prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData.cluster_prob)
}

// -------------------------------------------------------------------

// SmoothingSearchResult

// required int32 max_pos = 1;
inline bool SmoothingSearchResult::has_max_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmoothingSearchResult::set_has_max_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmoothingSearchResult::clear_has_max_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmoothingSearchResult::clear_max_pos() {
  max_pos_ = 0;
  clear_has_max_pos();
}
inline ::google::protobuf::int32 SmoothingSearchResult::max_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.max_pos)
  return max_pos_;
}
inline void SmoothingSearchResult::set_max_pos(::google::protobuf::int32 value) {
  set_has_max_pos();
  max_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.SmoothingSearchResult.max_pos)
}

// repeated .ru.mail.go.webbase.serp.SmoothingSearchResult.UrlData url_data = 2;
inline int SmoothingSearchResult::url_data_size() const {
  return url_data_.size();
}
inline void SmoothingSearchResult::clear_url_data() {
  url_data_.Clear();
}
inline const ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData& SmoothingSearchResult::url_data(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return url_data_.Get(index);
}
inline ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData* SmoothingSearchResult::mutable_url_data(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return url_data_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData* SmoothingSearchResult::add_url_data() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return url_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData >*
SmoothingSearchResult::mutable_url_data() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return &url_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::SmoothingSearchResult_UrlData >&
SmoothingSearchResult::url_data() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.SmoothingSearchResult.url_data)
  return url_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_smoothing_5fsearcherd_2eproto__INCLUDED
