// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snippetdata.proto

#ifndef PROTOBUF_snippetdata_2eproto__INCLUDED
#define PROTOBUF_snippetdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace snippetdata {
namespace parser {
class ExtendedUrlInfo;
class ExtendedUrlInfoDefaultTypeInternal;
extern ExtendedUrlInfoDefaultTypeInternal _ExtendedUrlInfo_default_instance_;
class ParamComposite;
class ParamCompositeDefaultTypeInternal;
extern ParamCompositeDefaultTypeInternal _ParamComposite_default_instance_;
class ParamSimple;
class ParamSimpleDefaultTypeInternal;
extern ParamSimpleDefaultTypeInternal _ParamSimple_default_instance_;
class ParamVector;
class ParamVectorDefaultTypeInternal;
extern ParamVectorDefaultTypeInternal _ParamVector_default_instance_;
class SiteLink;
class SiteLinkDefaultTypeInternal;
extern SiteLinkDefaultTypeInternal _SiteLink_default_instance_;
class SiteLinks;
class SiteLinksDefaultTypeInternal;
extern SiteLinksDefaultTypeInternal _SiteLinks_default_instance_;
class SnippetData;
class SnippetDataDefaultTypeInternal;
extern SnippetDataDefaultTypeInternal _SnippetData_default_instance_;
class SnippetDataMain;
class SnippetDataMainDefaultTypeInternal;
extern SnippetDataMainDefaultTypeInternal _SnippetDataMain_default_instance_;
class ValueComposite;
class ValueCompositeDefaultTypeInternal;
extern ValueCompositeDefaultTypeInternal _ValueComposite_default_instance_;
class ValueSimple;
class ValueSimpleDefaultTypeInternal;
extern ValueSimpleDefaultTypeInternal _ValueSimple_default_instance_;
class ValueVector;
class ValueVectorDefaultTypeInternal;
extern ValueVectorDefaultTypeInternal _ValueVector_default_instance_;
}  // namespace parser
}  // namespace snippetdata
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace snippetdata {
namespace parser {

namespace protobuf_snippetdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_snippetdata_2eproto

enum ValueSimple_Type {
  ValueSimple_Type_INTEGER = 0,
  ValueSimple_Type_STRING = 1
};
bool ValueSimple_Type_IsValid(int value);
const ValueSimple_Type ValueSimple_Type_Type_MIN = ValueSimple_Type_INTEGER;
const ValueSimple_Type ValueSimple_Type_Type_MAX = ValueSimple_Type_STRING;
const int ValueSimple_Type_Type_ARRAYSIZE = ValueSimple_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueSimple_Type_descriptor();
inline const ::std::string& ValueSimple_Type_Name(ValueSimple_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueSimple_Type_descriptor(), value);
}
inline bool ValueSimple_Type_Parse(
    const ::std::string& name, ValueSimple_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueSimple_Type>(
    ValueSimple_Type_descriptor(), name, value);
}
// ===================================================================

class ValueSimple : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.ValueSimple) */ {
 public:
  ValueSimple();
  virtual ~ValueSimple();

  ValueSimple(const ValueSimple& from);

  inline ValueSimple& operator=(const ValueSimple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSimple(ValueSimple&& from) noexcept
    : ValueSimple() {
    *this = ::std::move(from);
  }

  inline ValueSimple& operator=(ValueSimple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSimple& default_instance();

  static inline const ValueSimple* internal_default_instance() {
    return reinterpret_cast<const ValueSimple*>(
               &_ValueSimple_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ValueSimple* other);
  friend void swap(ValueSimple& a, ValueSimple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSimple* New() const PROTOBUF_FINAL { return New(NULL); }

  ValueSimple* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValueSimple& from);
  void MergeFrom(const ValueSimple& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValueSimple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ValueSimple_Type Type;
  static const Type INTEGER =
    ValueSimple_Type_INTEGER;
  static const Type STRING =
    ValueSimple_Type_STRING;
  static inline bool Type_IsValid(int value) {
    return ValueSimple_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ValueSimple_Type_Type_MIN;
  static const Type Type_MAX =
    ValueSimple_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ValueSimple_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ValueSimple_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ValueSimple_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ValueSimple_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  const ::std::string& value_string() const;
  void set_value_string(const ::std::string& value);
  #if LANG_CXX11
  void set_value_string(::std::string&& value);
  #endif
  void set_value_string(const char* value);
  void set_value_string(const char* value, size_t size);
  ::std::string* mutable_value_string();
  ::std::string* release_value_string();
  void set_allocated_value_string(::std::string* value_string);

  // optional int64 value_integer = 2;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 2;
  ::google::protobuf::int64 value_integer() const;
  void set_value_integer(::google::protobuf::int64 value);

  // required .ru.mail.go.snippetdata.parser.ValueSimple.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::snippetdata::parser::ValueSimple_Type type() const;
  void set_type(::ru::mail::go::snippetdata::parser::ValueSimple_Type value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.ValueSimple)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value_integer();
  void clear_has_value_integer();
  void set_has_value_string();
  void clear_has_value_string();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_string_;
  ::google::protobuf::int64 value_integer_;
  int type_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueComposite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.ValueComposite) */ {
 public:
  ValueComposite();
  virtual ~ValueComposite();

  ValueComposite(const ValueComposite& from);

  inline ValueComposite& operator=(const ValueComposite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueComposite(ValueComposite&& from) noexcept
    : ValueComposite() {
    *this = ::std::move(from);
  }

  inline ValueComposite& operator=(ValueComposite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueComposite& default_instance();

  static inline const ValueComposite* internal_default_instance() {
    return reinterpret_cast<const ValueComposite*>(
               &_ValueComposite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ValueComposite* other);
  friend void swap(ValueComposite& a, ValueComposite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueComposite* New() const PROTOBUF_FINAL { return New(NULL); }

  ValueComposite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValueComposite& from);
  void MergeFrom(const ValueComposite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValueComposite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.snippetdata.parser.ParamSimple param = 1;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  const ::ru::mail::go::snippetdata::parser::ParamSimple& param(int index) const;
  ::ru::mail::go::snippetdata::parser::ParamSimple* mutable_param(int index);
  ::ru::mail::go::snippetdata::parser::ParamSimple* add_param();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamSimple >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamSimple >&
      param() const;

  // repeated .ru.mail.go.snippetdata.parser.ParamComposite composite = 2;
  int composite_size() const;
  void clear_composite();
  static const int kCompositeFieldNumber = 2;
  const ::ru::mail::go::snippetdata::parser::ParamComposite& composite(int index) const;
  ::ru::mail::go::snippetdata::parser::ParamComposite* mutable_composite(int index);
  ::ru::mail::go::snippetdata::parser::ParamComposite* add_composite();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamComposite >*
      mutable_composite();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamComposite >&
      composite() const;

  // repeated .ru.mail.go.snippetdata.parser.ParamVector vector = 3;
  int vector_size() const;
  void clear_vector();
  static const int kVectorFieldNumber = 3;
  const ::ru::mail::go::snippetdata::parser::ParamVector& vector(int index) const;
  ::ru::mail::go::snippetdata::parser::ParamVector* mutable_vector(int index);
  ::ru::mail::go::snippetdata::parser::ParamVector* add_vector();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamVector >*
      mutable_vector();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamVector >&
      vector() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.ValueComposite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamSimple > param_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamComposite > composite_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamVector > vector_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.ValueVector) */ {
 public:
  ValueVector();
  virtual ~ValueVector();

  ValueVector(const ValueVector& from);

  inline ValueVector& operator=(const ValueVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueVector(ValueVector&& from) noexcept
    : ValueVector() {
    *this = ::std::move(from);
  }

  inline ValueVector& operator=(ValueVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueVector& default_instance();

  static inline const ValueVector* internal_default_instance() {
    return reinterpret_cast<const ValueVector*>(
               &_ValueVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ValueVector* other);
  friend void swap(ValueVector& a, ValueVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueVector* New() const PROTOBUF_FINAL { return New(NULL); }

  ValueVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValueVector& from);
  void MergeFrom(const ValueVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValueVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.snippetdata.parser.ValueComposite item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::ru::mail::go::snippetdata::parser::ValueComposite& item(int index) const;
  ::ru::mail::go::snippetdata::parser::ValueComposite* mutable_item(int index);
  ::ru::mail::go::snippetdata::parser::ValueComposite* add_item();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ValueComposite >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ValueComposite >&
      item() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.ValueVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ValueComposite > item_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamSimple : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.ParamSimple) */ {
 public:
  ParamSimple();
  virtual ~ParamSimple();

  ParamSimple(const ParamSimple& from);

  inline ParamSimple& operator=(const ParamSimple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamSimple(ParamSimple&& from) noexcept
    : ParamSimple() {
    *this = ::std::move(from);
  }

  inline ParamSimple& operator=(ParamSimple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSimple& default_instance();

  static inline const ParamSimple* internal_default_instance() {
    return reinterpret_cast<const ParamSimple*>(
               &_ParamSimple_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ParamSimple* other);
  friend void swap(ParamSimple& a, ParamSimple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamSimple* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamSimple* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamSimple& from);
  void MergeFrom(const ParamSimple& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamSimple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .ru.mail.go.snippetdata.parser.ValueSimple value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::ru::mail::go::snippetdata::parser::ValueSimple& value() const;
  ::ru::mail::go::snippetdata::parser::ValueSimple* mutable_value();
  ::ru::mail::go::snippetdata::parser::ValueSimple* release_value();
  void set_allocated_value(::ru::mail::go::snippetdata::parser::ValueSimple* value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.ParamSimple)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ru::mail::go::snippetdata::parser::ValueSimple* value_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamComposite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.ParamComposite) */ {
 public:
  ParamComposite();
  virtual ~ParamComposite();

  ParamComposite(const ParamComposite& from);

  inline ParamComposite& operator=(const ParamComposite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamComposite(ParamComposite&& from) noexcept
    : ParamComposite() {
    *this = ::std::move(from);
  }

  inline ParamComposite& operator=(ParamComposite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamComposite& default_instance();

  static inline const ParamComposite* internal_default_instance() {
    return reinterpret_cast<const ParamComposite*>(
               &_ParamComposite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ParamComposite* other);
  friend void swap(ParamComposite& a, ParamComposite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamComposite* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamComposite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamComposite& from);
  void MergeFrom(const ParamComposite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamComposite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .ru.mail.go.snippetdata.parser.ValueComposite value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::ru::mail::go::snippetdata::parser::ValueComposite& value() const;
  ::ru::mail::go::snippetdata::parser::ValueComposite* mutable_value();
  ::ru::mail::go::snippetdata::parser::ValueComposite* release_value();
  void set_allocated_value(::ru::mail::go::snippetdata::parser::ValueComposite* value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.ParamComposite)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ru::mail::go::snippetdata::parser::ValueComposite* value_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.ParamVector) */ {
 public:
  ParamVector();
  virtual ~ParamVector();

  ParamVector(const ParamVector& from);

  inline ParamVector& operator=(const ParamVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamVector(ParamVector&& from) noexcept
    : ParamVector() {
    *this = ::std::move(from);
  }

  inline ParamVector& operator=(ParamVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamVector& default_instance();

  static inline const ParamVector* internal_default_instance() {
    return reinterpret_cast<const ParamVector*>(
               &_ParamVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ParamVector* other);
  friend void swap(ParamVector& a, ParamVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamVector* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamVector& from);
  void MergeFrom(const ParamVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .ru.mail.go.snippetdata.parser.ValueVector value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::ru::mail::go::snippetdata::parser::ValueVector& value() const;
  ::ru::mail::go::snippetdata::parser::ValueVector* mutable_value();
  ::ru::mail::go::snippetdata::parser::ValueVector* release_value();
  void set_allocated_value(::ru::mail::go::snippetdata::parser::ValueVector* value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.ParamVector)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ru::mail::go::snippetdata::parser::ValueVector* value_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiteLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.SiteLink) */ {
 public:
  SiteLink();
  virtual ~SiteLink();

  SiteLink(const SiteLink& from);

  inline SiteLink& operator=(const SiteLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiteLink(SiteLink&& from) noexcept
    : SiteLink() {
    *this = ::std::move(from);
  }

  inline SiteLink& operator=(SiteLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiteLink& default_instance();

  static inline const SiteLink* internal_default_instance() {
    return reinterpret_cast<const SiteLink*>(
               &_SiteLink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SiteLink* other);
  friend void swap(SiteLink& a, SiteLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiteLink* New() const PROTOBUF_FINAL { return New(NULL); }

  SiteLink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiteLink& from);
  void MergeFrom(const SiteLink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiteLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.SiteLink)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiteLinks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.SiteLinks) */ {
 public:
  SiteLinks();
  virtual ~SiteLinks();

  SiteLinks(const SiteLinks& from);

  inline SiteLinks& operator=(const SiteLinks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiteLinks(SiteLinks&& from) noexcept
    : SiteLinks() {
    *this = ::std::move(from);
  }

  inline SiteLinks& operator=(SiteLinks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiteLinks& default_instance();

  static inline const SiteLinks* internal_default_instance() {
    return reinterpret_cast<const SiteLinks*>(
               &_SiteLinks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SiteLinks* other);
  friend void swap(SiteLinks& a, SiteLinks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiteLinks* New() const PROTOBUF_FINAL { return New(NULL); }

  SiteLinks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiteLinks& from);
  void MergeFrom(const SiteLinks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiteLinks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.snippetdata.parser.SiteLink site_link = 1;
  int site_link_size() const;
  void clear_site_link();
  static const int kSiteLinkFieldNumber = 1;
  const ::ru::mail::go::snippetdata::parser::SiteLink& site_link(int index) const;
  ::ru::mail::go::snippetdata::parser::SiteLink* mutable_site_link(int index);
  ::ru::mail::go::snippetdata::parser::SiteLink* add_site_link();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::SiteLink >*
      mutable_site_link();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::SiteLink >&
      site_link() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.SiteLinks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::SiteLink > site_link_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnippetDataMain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.SnippetDataMain) */ {
 public:
  SnippetDataMain();
  virtual ~SnippetDataMain();

  SnippetDataMain(const SnippetDataMain& from);

  inline SnippetDataMain& operator=(const SnippetDataMain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnippetDataMain(SnippetDataMain&& from) noexcept
    : SnippetDataMain() {
    *this = ::std::move(from);
  }

  inline SnippetDataMain& operator=(SnippetDataMain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnippetDataMain& default_instance();

  static inline const SnippetDataMain* internal_default_instance() {
    return reinterpret_cast<const SnippetDataMain*>(
               &_SnippetDataMain_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SnippetDataMain* other);
  friend void swap(SnippetDataMain& a, SnippetDataMain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnippetDataMain* New() const PROTOBUF_FINAL { return New(NULL); }

  SnippetDataMain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnippetDataMain& from);
  void MergeFrom(const SnippetDataMain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnippetDataMain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string keywords = 3;
  bool has_keywords() const;
  void clear_keywords();
  static const int kKeywordsFieldNumber = 3;
  const ::std::string& keywords() const;
  void set_keywords(const ::std::string& value);
  #if LANG_CXX11
  void set_keywords(::std::string&& value);
  #endif
  void set_keywords(const char* value);
  void set_keywords(const char* value, size_t size);
  ::std::string* mutable_keywords();
  ::std::string* release_keywords();
  void set_allocated_keywords(::std::string* keywords);

  // optional string img = 4;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 4;
  const ::std::string& img() const;
  void set_img(const ::std::string& value);
  #if LANG_CXX11
  void set_img(::std::string&& value);
  #endif
  void set_img(const char* value);
  void set_img(const char* value, size_t size);
  ::std::string* mutable_img();
  ::std::string* release_img();
  void set_allocated_img(::std::string* img);

  // optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 5;
  bool has_site_links() const;
  void clear_site_links();
  static const int kSiteLinksFieldNumber = 5;
  const ::ru::mail::go::snippetdata::parser::SiteLinks& site_links() const;
  ::ru::mail::go::snippetdata::parser::SiteLinks* mutable_site_links();
  ::ru::mail::go::snippetdata::parser::SiteLinks* release_site_links();
  void set_allocated_site_links(::ru::mail::go::snippetdata::parser::SiteLinks* site_links);

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.SnippetDataMain)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_description();
  void clear_has_description();
  void set_has_keywords();
  void clear_has_keywords();
  void set_has_img();
  void clear_has_img();
  void set_has_site_links();
  void clear_has_site_links();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr keywords_;
  ::google::protobuf::internal::ArenaStringPtr img_;
  ::ru::mail::go::snippetdata::parser::SiteLinks* site_links_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnippetData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.SnippetData) */ {
 public:
  SnippetData();
  virtual ~SnippetData();

  SnippetData(const SnippetData& from);

  inline SnippetData& operator=(const SnippetData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnippetData(SnippetData&& from) noexcept
    : SnippetData() {
    *this = ::std::move(from);
  }

  inline SnippetData& operator=(SnippetData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnippetData& default_instance();

  static inline const SnippetData* internal_default_instance() {
    return reinterpret_cast<const SnippetData*>(
               &_SnippetData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SnippetData* other);
  friend void swap(SnippetData& a, SnippetData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnippetData* New() const PROTOBUF_FINAL { return New(NULL); }

  SnippetData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnippetData& from);
  void MergeFrom(const SnippetData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnippetData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string category = 1;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // required .ru.mail.go.snippetdata.parser.SnippetDataMain main = 2;
  bool has_main() const;
  void clear_main();
  static const int kMainFieldNumber = 2;
  const ::ru::mail::go::snippetdata::parser::SnippetDataMain& main() const;
  ::ru::mail::go::snippetdata::parser::SnippetDataMain* mutable_main();
  ::ru::mail::go::snippetdata::parser::SnippetDataMain* release_main();
  void set_allocated_main(::ru::mail::go::snippetdata::parser::SnippetDataMain* main);

  // optional .ru.mail.go.snippetdata.parser.ValueComposite extra = 3;
  bool has_extra() const;
  void clear_extra();
  static const int kExtraFieldNumber = 3;
  const ::ru::mail::go::snippetdata::parser::ValueComposite& extra() const;
  ::ru::mail::go::snippetdata::parser::ValueComposite* mutable_extra();
  ::ru::mail::go::snippetdata::parser::ValueComposite* release_extra();
  void set_allocated_extra(::ru::mail::go::snippetdata::parser::ValueComposite* extra);

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.SnippetData)
 private:
  void set_has_category();
  void clear_has_category();
  void set_has_main();
  void clear_has_main();
  void set_has_extra();
  void clear_has_extra();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::ru::mail::go::snippetdata::parser::SnippetDataMain* main_;
  ::ru::mail::go::snippetdata::parser::ValueComposite* extra_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtendedUrlInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.snippetdata.parser.ExtendedUrlInfo) */ {
 public:
  ExtendedUrlInfo();
  virtual ~ExtendedUrlInfo();

  ExtendedUrlInfo(const ExtendedUrlInfo& from);

  inline ExtendedUrlInfo& operator=(const ExtendedUrlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExtendedUrlInfo(ExtendedUrlInfo&& from) noexcept
    : ExtendedUrlInfo() {
    *this = ::std::move(from);
  }

  inline ExtendedUrlInfo& operator=(ExtendedUrlInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtendedUrlInfo& default_instance();

  static inline const ExtendedUrlInfo* internal_default_instance() {
    return reinterpret_cast<const ExtendedUrlInfo*>(
               &_ExtendedUrlInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ExtendedUrlInfo* other);
  friend void swap(ExtendedUrlInfo& a, ExtendedUrlInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExtendedUrlInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ExtendedUrlInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExtendedUrlInfo& from);
  void MergeFrom(const ExtendedUrlInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExtendedUrlInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required .ru.mail.go.snippetdata.parser.SnippetData snippet_data = 2;
  bool has_snippet_data() const;
  void clear_snippet_data();
  static const int kSnippetDataFieldNumber = 2;
  const ::ru::mail::go::snippetdata::parser::SnippetData& snippet_data() const;
  ::ru::mail::go::snippetdata::parser::SnippetData* mutable_snippet_data();
  ::ru::mail::go::snippetdata::parser::SnippetData* release_snippet_data();
  void set_allocated_snippet_data(::ru::mail::go::snippetdata::parser::SnippetData* snippet_data);

  // optional int64 timestamp_ms = 3;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 3;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.snippetdata.parser.ExtendedUrlInfo)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_snippet_data();
  void clear_has_snippet_data();
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::ru::mail::go::snippetdata::parser::SnippetData* snippet_data_;
  ::google::protobuf::int64 timestamp_ms_;
  friend struct protobuf_snippetdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ValueSimple

// required .ru.mail.go.snippetdata.parser.ValueSimple.Type type = 1;
inline bool ValueSimple::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValueSimple::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ValueSimple::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ValueSimple::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::snippetdata::parser::ValueSimple_Type ValueSimple::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ValueSimple.type)
  return static_cast< ::ru::mail::go::snippetdata::parser::ValueSimple_Type >(type_);
}
inline void ValueSimple::set_type(::ru::mail::go::snippetdata::parser::ValueSimple_Type value) {
  assert(::ru::mail::go::snippetdata::parser::ValueSimple_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.ValueSimple.type)
}

// optional int64 value_integer = 2;
inline bool ValueSimple::has_value_integer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueSimple::set_has_value_integer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValueSimple::clear_has_value_integer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValueSimple::clear_value_integer() {
  value_integer_ = GOOGLE_LONGLONG(0);
  clear_has_value_integer();
}
inline ::google::protobuf::int64 ValueSimple::value_integer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ValueSimple.value_integer)
  return value_integer_;
}
inline void ValueSimple::set_value_integer(::google::protobuf::int64 value) {
  set_has_value_integer();
  value_integer_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.ValueSimple.value_integer)
}

// optional string value_string = 3;
inline bool ValueSimple::has_value_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueSimple::set_has_value_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValueSimple::clear_has_value_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValueSimple::clear_value_string() {
  value_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_string();
}
inline const ::std::string& ValueSimple::value_string() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ValueSimple.value_string)
  return value_string_.GetNoArena();
}
inline void ValueSimple::set_value_string(const ::std::string& value) {
  set_has_value_string();
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.ValueSimple.value_string)
}
#if LANG_CXX11
inline void ValueSimple::set_value_string(::std::string&& value) {
  set_has_value_string();
  value_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.ValueSimple.value_string)
}
#endif
inline void ValueSimple::set_value_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value_string();
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.ValueSimple.value_string)
}
inline void ValueSimple::set_value_string(const char* value, size_t size) {
  set_has_value_string();
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.ValueSimple.value_string)
}
inline ::std::string* ValueSimple::mutable_value_string() {
  set_has_value_string();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ValueSimple.value_string)
  return value_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValueSimple::release_value_string() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ValueSimple.value_string)
  clear_has_value_string();
  return value_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValueSimple::set_allocated_value_string(::std::string* value_string) {
  if (value_string != NULL) {
    set_has_value_string();
  } else {
    clear_has_value_string();
  }
  value_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_string);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ValueSimple.value_string)
}

// -------------------------------------------------------------------

// ValueComposite

// repeated .ru.mail.go.snippetdata.parser.ParamSimple param = 1;
inline int ValueComposite::param_size() const {
  return param_.size();
}
inline void ValueComposite::clear_param() {
  param_.Clear();
}
inline const ::ru::mail::go::snippetdata::parser::ParamSimple& ValueComposite::param(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ValueComposite.param)
  return param_.Get(index);
}
inline ::ru::mail::go::snippetdata::parser::ParamSimple* ValueComposite::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ValueComposite.param)
  return param_.Mutable(index);
}
inline ::ru::mail::go::snippetdata::parser::ParamSimple* ValueComposite::add_param() {
  // @@protoc_insertion_point(field_add:ru.mail.go.snippetdata.parser.ValueComposite.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamSimple >*
ValueComposite::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.snippetdata.parser.ValueComposite.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamSimple >&
ValueComposite::param() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.snippetdata.parser.ValueComposite.param)
  return param_;
}

// repeated .ru.mail.go.snippetdata.parser.ParamComposite composite = 2;
inline int ValueComposite::composite_size() const {
  return composite_.size();
}
inline void ValueComposite::clear_composite() {
  composite_.Clear();
}
inline const ::ru::mail::go::snippetdata::parser::ParamComposite& ValueComposite::composite(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ValueComposite.composite)
  return composite_.Get(index);
}
inline ::ru::mail::go::snippetdata::parser::ParamComposite* ValueComposite::mutable_composite(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ValueComposite.composite)
  return composite_.Mutable(index);
}
inline ::ru::mail::go::snippetdata::parser::ParamComposite* ValueComposite::add_composite() {
  // @@protoc_insertion_point(field_add:ru.mail.go.snippetdata.parser.ValueComposite.composite)
  return composite_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamComposite >*
ValueComposite::mutable_composite() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.snippetdata.parser.ValueComposite.composite)
  return &composite_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamComposite >&
ValueComposite::composite() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.snippetdata.parser.ValueComposite.composite)
  return composite_;
}

// repeated .ru.mail.go.snippetdata.parser.ParamVector vector = 3;
inline int ValueComposite::vector_size() const {
  return vector_.size();
}
inline void ValueComposite::clear_vector() {
  vector_.Clear();
}
inline const ::ru::mail::go::snippetdata::parser::ParamVector& ValueComposite::vector(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ValueComposite.vector)
  return vector_.Get(index);
}
inline ::ru::mail::go::snippetdata::parser::ParamVector* ValueComposite::mutable_vector(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ValueComposite.vector)
  return vector_.Mutable(index);
}
inline ::ru::mail::go::snippetdata::parser::ParamVector* ValueComposite::add_vector() {
  // @@protoc_insertion_point(field_add:ru.mail.go.snippetdata.parser.ValueComposite.vector)
  return vector_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamVector >*
ValueComposite::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.snippetdata.parser.ValueComposite.vector)
  return &vector_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ParamVector >&
ValueComposite::vector() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.snippetdata.parser.ValueComposite.vector)
  return vector_;
}

// -------------------------------------------------------------------

// ValueVector

// repeated .ru.mail.go.snippetdata.parser.ValueComposite item = 1;
inline int ValueVector::item_size() const {
  return item_.size();
}
inline void ValueVector::clear_item() {
  item_.Clear();
}
inline const ::ru::mail::go::snippetdata::parser::ValueComposite& ValueVector::item(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ValueVector.item)
  return item_.Get(index);
}
inline ::ru::mail::go::snippetdata::parser::ValueComposite* ValueVector::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ValueVector.item)
  return item_.Mutable(index);
}
inline ::ru::mail::go::snippetdata::parser::ValueComposite* ValueVector::add_item() {
  // @@protoc_insertion_point(field_add:ru.mail.go.snippetdata.parser.ValueVector.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ValueComposite >*
ValueVector::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.snippetdata.parser.ValueVector.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::ValueComposite >&
ValueVector::item() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.snippetdata.parser.ValueVector.item)
  return item_;
}

// -------------------------------------------------------------------

// ParamSimple

// required string name = 1;
inline bool ParamSimple::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSimple::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSimple::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSimple::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ParamSimple::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ParamSimple.name)
  return name_.GetNoArena();
}
inline void ParamSimple::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.ParamSimple.name)
}
#if LANG_CXX11
inline void ParamSimple::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.ParamSimple.name)
}
#endif
inline void ParamSimple::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.ParamSimple.name)
}
inline void ParamSimple::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.ParamSimple.name)
}
inline ::std::string* ParamSimple::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ParamSimple.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSimple::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ParamSimple.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSimple::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ParamSimple.name)
}

// required .ru.mail.go.snippetdata.parser.ValueSimple value = 2;
inline bool ParamSimple::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSimple::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSimple::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSimple::clear_value() {
  if (value_ != NULL) value_->::ru::mail::go::snippetdata::parser::ValueSimple::Clear();
  clear_has_value();
}
inline const ::ru::mail::go::snippetdata::parser::ValueSimple& ParamSimple::value() const {
  const ::ru::mail::go::snippetdata::parser::ValueSimple* p = value_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ParamSimple.value)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::ValueSimple*>(
      &::ru::mail::go::snippetdata::parser::_ValueSimple_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::ValueSimple* ParamSimple::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::ru::mail::go::snippetdata::parser::ValueSimple;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ParamSimple.value)
  return value_;
}
inline ::ru::mail::go::snippetdata::parser::ValueSimple* ParamSimple::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ParamSimple.value)
  clear_has_value();
  ::ru::mail::go::snippetdata::parser::ValueSimple* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ParamSimple::set_allocated_value(::ru::mail::go::snippetdata::parser::ValueSimple* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ParamSimple.value)
}

// -------------------------------------------------------------------

// ParamComposite

// required string name = 1;
inline bool ParamComposite::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamComposite::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamComposite::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamComposite::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ParamComposite::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ParamComposite.name)
  return name_.GetNoArena();
}
inline void ParamComposite::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.ParamComposite.name)
}
#if LANG_CXX11
inline void ParamComposite::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.ParamComposite.name)
}
#endif
inline void ParamComposite::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.ParamComposite.name)
}
inline void ParamComposite::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.ParamComposite.name)
}
inline ::std::string* ParamComposite::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ParamComposite.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamComposite::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ParamComposite.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamComposite::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ParamComposite.name)
}

// required .ru.mail.go.snippetdata.parser.ValueComposite value = 2;
inline bool ParamComposite::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamComposite::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamComposite::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamComposite::clear_value() {
  if (value_ != NULL) value_->::ru::mail::go::snippetdata::parser::ValueComposite::Clear();
  clear_has_value();
}
inline const ::ru::mail::go::snippetdata::parser::ValueComposite& ParamComposite::value() const {
  const ::ru::mail::go::snippetdata::parser::ValueComposite* p = value_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ParamComposite.value)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::ValueComposite*>(
      &::ru::mail::go::snippetdata::parser::_ValueComposite_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::ValueComposite* ParamComposite::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::ru::mail::go::snippetdata::parser::ValueComposite;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ParamComposite.value)
  return value_;
}
inline ::ru::mail::go::snippetdata::parser::ValueComposite* ParamComposite::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ParamComposite.value)
  clear_has_value();
  ::ru::mail::go::snippetdata::parser::ValueComposite* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ParamComposite::set_allocated_value(::ru::mail::go::snippetdata::parser::ValueComposite* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ParamComposite.value)
}

// -------------------------------------------------------------------

// ParamVector

// required string name = 1;
inline bool ParamVector::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamVector::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamVector::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamVector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ParamVector::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ParamVector.name)
  return name_.GetNoArena();
}
inline void ParamVector::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.ParamVector.name)
}
#if LANG_CXX11
inline void ParamVector::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.ParamVector.name)
}
#endif
inline void ParamVector::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.ParamVector.name)
}
inline void ParamVector::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.ParamVector.name)
}
inline ::std::string* ParamVector::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ParamVector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamVector::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ParamVector.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamVector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ParamVector.name)
}

// required .ru.mail.go.snippetdata.parser.ValueVector value = 2;
inline bool ParamVector::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamVector::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamVector::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamVector::clear_value() {
  if (value_ != NULL) value_->::ru::mail::go::snippetdata::parser::ValueVector::Clear();
  clear_has_value();
}
inline const ::ru::mail::go::snippetdata::parser::ValueVector& ParamVector::value() const {
  const ::ru::mail::go::snippetdata::parser::ValueVector* p = value_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ParamVector.value)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::ValueVector*>(
      &::ru::mail::go::snippetdata::parser::_ValueVector_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::ValueVector* ParamVector::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::ru::mail::go::snippetdata::parser::ValueVector;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ParamVector.value)
  return value_;
}
inline ::ru::mail::go::snippetdata::parser::ValueVector* ParamVector::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ParamVector.value)
  clear_has_value();
  ::ru::mail::go::snippetdata::parser::ValueVector* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ParamVector::set_allocated_value(::ru::mail::go::snippetdata::parser::ValueVector* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ParamVector.value)
}

// -------------------------------------------------------------------

// SiteLink

// required string url = 1;
inline bool SiteLink::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiteLink::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiteLink::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiteLink::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SiteLink::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SiteLink.url)
  return url_.GetNoArena();
}
inline void SiteLink::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.SiteLink.url)
}
#if LANG_CXX11
inline void SiteLink::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.SiteLink.url)
}
#endif
inline void SiteLink::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.SiteLink.url)
}
inline void SiteLink::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.SiteLink.url)
}
inline ::std::string* SiteLink::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SiteLink.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiteLink::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SiteLink.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiteLink::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SiteLink.url)
}

// required string title = 2;
inline bool SiteLink::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiteLink::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiteLink::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiteLink::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SiteLink::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SiteLink.title)
  return title_.GetNoArena();
}
inline void SiteLink::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.SiteLink.title)
}
#if LANG_CXX11
inline void SiteLink::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.SiteLink.title)
}
#endif
inline void SiteLink::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.SiteLink.title)
}
inline void SiteLink::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.SiteLink.title)
}
inline ::std::string* SiteLink::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SiteLink.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SiteLink::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SiteLink.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SiteLink::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SiteLink.title)
}

// -------------------------------------------------------------------

// SiteLinks

// repeated .ru.mail.go.snippetdata.parser.SiteLink site_link = 1;
inline int SiteLinks::site_link_size() const {
  return site_link_.size();
}
inline void SiteLinks::clear_site_link() {
  site_link_.Clear();
}
inline const ::ru::mail::go::snippetdata::parser::SiteLink& SiteLinks::site_link(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SiteLinks.site_link)
  return site_link_.Get(index);
}
inline ::ru::mail::go::snippetdata::parser::SiteLink* SiteLinks::mutable_site_link(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SiteLinks.site_link)
  return site_link_.Mutable(index);
}
inline ::ru::mail::go::snippetdata::parser::SiteLink* SiteLinks::add_site_link() {
  // @@protoc_insertion_point(field_add:ru.mail.go.snippetdata.parser.SiteLinks.site_link)
  return site_link_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::SiteLink >*
SiteLinks::mutable_site_link() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.snippetdata.parser.SiteLinks.site_link)
  return &site_link_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::snippetdata::parser::SiteLink >&
SiteLinks::site_link() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.snippetdata.parser.SiteLinks.site_link)
  return site_link_;
}

// -------------------------------------------------------------------

// SnippetDataMain

// required string title = 1;
inline bool SnippetDataMain::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnippetDataMain::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnippetDataMain::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnippetDataMain::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SnippetDataMain::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SnippetDataMain.title)
  return title_.GetNoArena();
}
inline void SnippetDataMain::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.SnippetDataMain.title)
}
#if LANG_CXX11
inline void SnippetDataMain::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.SnippetDataMain.title)
}
#endif
inline void SnippetDataMain::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.SnippetDataMain.title)
}
inline void SnippetDataMain::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.SnippetDataMain.title)
}
inline ::std::string* SnippetDataMain::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SnippetDataMain.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetDataMain::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SnippetDataMain.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetDataMain::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SnippetDataMain.title)
}

// required string description = 2;
inline bool SnippetDataMain::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnippetDataMain::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnippetDataMain::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnippetDataMain::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& SnippetDataMain::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SnippetDataMain.description)
  return description_.GetNoArena();
}
inline void SnippetDataMain::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.SnippetDataMain.description)
}
#if LANG_CXX11
inline void SnippetDataMain::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.SnippetDataMain.description)
}
#endif
inline void SnippetDataMain::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.SnippetDataMain.description)
}
inline void SnippetDataMain::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.SnippetDataMain.description)
}
inline ::std::string* SnippetDataMain::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SnippetDataMain.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetDataMain::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SnippetDataMain.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetDataMain::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SnippetDataMain.description)
}

// optional string keywords = 3;
inline bool SnippetDataMain::has_keywords() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnippetDataMain::set_has_keywords() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnippetDataMain::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnippetDataMain::clear_keywords() {
  keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keywords();
}
inline const ::std::string& SnippetDataMain::keywords() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SnippetDataMain.keywords)
  return keywords_.GetNoArena();
}
inline void SnippetDataMain::set_keywords(const ::std::string& value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.SnippetDataMain.keywords)
}
#if LANG_CXX11
inline void SnippetDataMain::set_keywords(::std::string&& value) {
  set_has_keywords();
  keywords_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.SnippetDataMain.keywords)
}
#endif
inline void SnippetDataMain::set_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.SnippetDataMain.keywords)
}
inline void SnippetDataMain::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.SnippetDataMain.keywords)
}
inline ::std::string* SnippetDataMain::mutable_keywords() {
  set_has_keywords();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SnippetDataMain.keywords)
  return keywords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetDataMain::release_keywords() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SnippetDataMain.keywords)
  clear_has_keywords();
  return keywords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetDataMain::set_allocated_keywords(::std::string* keywords) {
  if (keywords != NULL) {
    set_has_keywords();
  } else {
    clear_has_keywords();
  }
  keywords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keywords);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SnippetDataMain.keywords)
}

// optional string img = 4;
inline bool SnippetDataMain::has_img() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnippetDataMain::set_has_img() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SnippetDataMain::clear_has_img() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SnippetDataMain::clear_img() {
  img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img();
}
inline const ::std::string& SnippetDataMain::img() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SnippetDataMain.img)
  return img_.GetNoArena();
}
inline void SnippetDataMain::set_img(const ::std::string& value) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.SnippetDataMain.img)
}
#if LANG_CXX11
inline void SnippetDataMain::set_img(::std::string&& value) {
  set_has_img();
  img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.SnippetDataMain.img)
}
#endif
inline void SnippetDataMain::set_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.SnippetDataMain.img)
}
inline void SnippetDataMain::set_img(const char* value, size_t size) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.SnippetDataMain.img)
}
inline ::std::string* SnippetDataMain::mutable_img() {
  set_has_img();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SnippetDataMain.img)
  return img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetDataMain::release_img() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SnippetDataMain.img)
  clear_has_img();
  return img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetDataMain::set_allocated_img(::std::string* img) {
  if (img != NULL) {
    set_has_img();
  } else {
    clear_has_img();
  }
  img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SnippetDataMain.img)
}

// optional .ru.mail.go.snippetdata.parser.SiteLinks site_links = 5;
inline bool SnippetDataMain::has_site_links() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SnippetDataMain::set_has_site_links() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SnippetDataMain::clear_has_site_links() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SnippetDataMain::clear_site_links() {
  if (site_links_ != NULL) site_links_->::ru::mail::go::snippetdata::parser::SiteLinks::Clear();
  clear_has_site_links();
}
inline const ::ru::mail::go::snippetdata::parser::SiteLinks& SnippetDataMain::site_links() const {
  const ::ru::mail::go::snippetdata::parser::SiteLinks* p = site_links_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SnippetDataMain.site_links)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::SiteLinks*>(
      &::ru::mail::go::snippetdata::parser::_SiteLinks_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::SiteLinks* SnippetDataMain::mutable_site_links() {
  set_has_site_links();
  if (site_links_ == NULL) {
    site_links_ = new ::ru::mail::go::snippetdata::parser::SiteLinks;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SnippetDataMain.site_links)
  return site_links_;
}
inline ::ru::mail::go::snippetdata::parser::SiteLinks* SnippetDataMain::release_site_links() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SnippetDataMain.site_links)
  clear_has_site_links();
  ::ru::mail::go::snippetdata::parser::SiteLinks* temp = site_links_;
  site_links_ = NULL;
  return temp;
}
inline void SnippetDataMain::set_allocated_site_links(::ru::mail::go::snippetdata::parser::SiteLinks* site_links) {
  delete site_links_;
  site_links_ = site_links;
  if (site_links) {
    set_has_site_links();
  } else {
    clear_has_site_links();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SnippetDataMain.site_links)
}

// -------------------------------------------------------------------

// SnippetData

// required string category = 1;
inline bool SnippetData::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnippetData::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnippetData::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnippetData::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& SnippetData::category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SnippetData.category)
  return category_.GetNoArena();
}
inline void SnippetData::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.SnippetData.category)
}
#if LANG_CXX11
inline void SnippetData::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.SnippetData.category)
}
#endif
inline void SnippetData::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.SnippetData.category)
}
inline void SnippetData::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.SnippetData.category)
}
inline ::std::string* SnippetData::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SnippetData.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnippetData::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SnippetData.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetData::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SnippetData.category)
}

// required .ru.mail.go.snippetdata.parser.SnippetDataMain main = 2;
inline bool SnippetData::has_main() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnippetData::set_has_main() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnippetData::clear_has_main() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnippetData::clear_main() {
  if (main_ != NULL) main_->::ru::mail::go::snippetdata::parser::SnippetDataMain::Clear();
  clear_has_main();
}
inline const ::ru::mail::go::snippetdata::parser::SnippetDataMain& SnippetData::main() const {
  const ::ru::mail::go::snippetdata::parser::SnippetDataMain* p = main_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SnippetData.main)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::SnippetDataMain*>(
      &::ru::mail::go::snippetdata::parser::_SnippetDataMain_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::SnippetDataMain* SnippetData::mutable_main() {
  set_has_main();
  if (main_ == NULL) {
    main_ = new ::ru::mail::go::snippetdata::parser::SnippetDataMain;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SnippetData.main)
  return main_;
}
inline ::ru::mail::go::snippetdata::parser::SnippetDataMain* SnippetData::release_main() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SnippetData.main)
  clear_has_main();
  ::ru::mail::go::snippetdata::parser::SnippetDataMain* temp = main_;
  main_ = NULL;
  return temp;
}
inline void SnippetData::set_allocated_main(::ru::mail::go::snippetdata::parser::SnippetDataMain* main) {
  delete main_;
  main_ = main;
  if (main) {
    set_has_main();
  } else {
    clear_has_main();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SnippetData.main)
}

// optional .ru.mail.go.snippetdata.parser.ValueComposite extra = 3;
inline bool SnippetData::has_extra() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnippetData::set_has_extra() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnippetData::clear_has_extra() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnippetData::clear_extra() {
  if (extra_ != NULL) extra_->::ru::mail::go::snippetdata::parser::ValueComposite::Clear();
  clear_has_extra();
}
inline const ::ru::mail::go::snippetdata::parser::ValueComposite& SnippetData::extra() const {
  const ::ru::mail::go::snippetdata::parser::ValueComposite* p = extra_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.SnippetData.extra)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::ValueComposite*>(
      &::ru::mail::go::snippetdata::parser::_ValueComposite_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::ValueComposite* SnippetData::mutable_extra() {
  set_has_extra();
  if (extra_ == NULL) {
    extra_ = new ::ru::mail::go::snippetdata::parser::ValueComposite;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.SnippetData.extra)
  return extra_;
}
inline ::ru::mail::go::snippetdata::parser::ValueComposite* SnippetData::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.SnippetData.extra)
  clear_has_extra();
  ::ru::mail::go::snippetdata::parser::ValueComposite* temp = extra_;
  extra_ = NULL;
  return temp;
}
inline void SnippetData::set_allocated_extra(::ru::mail::go::snippetdata::parser::ValueComposite* extra) {
  delete extra_;
  extra_ = extra;
  if (extra) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.SnippetData.extra)
}

// -------------------------------------------------------------------

// ExtendedUrlInfo

// required string url = 1;
inline bool ExtendedUrlInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtendedUrlInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtendedUrlInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtendedUrlInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ExtendedUrlInfo::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.url)
  return url_.GetNoArena();
}
inline void ExtendedUrlInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.url)
}
#if LANG_CXX11
inline void ExtendedUrlInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.url)
}
#endif
inline void ExtendedUrlInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.url)
}
inline void ExtendedUrlInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.url)
}
inline ::std::string* ExtendedUrlInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtendedUrlInfo::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtendedUrlInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.url)
}

// required .ru.mail.go.snippetdata.parser.SnippetData snippet_data = 2;
inline bool ExtendedUrlInfo::has_snippet_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtendedUrlInfo::set_has_snippet_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtendedUrlInfo::clear_has_snippet_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtendedUrlInfo::clear_snippet_data() {
  if (snippet_data_ != NULL) snippet_data_->::ru::mail::go::snippetdata::parser::SnippetData::Clear();
  clear_has_snippet_data();
}
inline const ::ru::mail::go::snippetdata::parser::SnippetData& ExtendedUrlInfo::snippet_data() const {
  const ::ru::mail::go::snippetdata::parser::SnippetData* p = snippet_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.snippet_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::snippetdata::parser::SnippetData*>(
      &::ru::mail::go::snippetdata::parser::_SnippetData_default_instance_);
}
inline ::ru::mail::go::snippetdata::parser::SnippetData* ExtendedUrlInfo::mutable_snippet_data() {
  set_has_snippet_data();
  if (snippet_data_ == NULL) {
    snippet_data_ = new ::ru::mail::go::snippetdata::parser::SnippetData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.snippet_data)
  return snippet_data_;
}
inline ::ru::mail::go::snippetdata::parser::SnippetData* ExtendedUrlInfo::release_snippet_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.snippet_data)
  clear_has_snippet_data();
  ::ru::mail::go::snippetdata::parser::SnippetData* temp = snippet_data_;
  snippet_data_ = NULL;
  return temp;
}
inline void ExtendedUrlInfo::set_allocated_snippet_data(::ru::mail::go::snippetdata::parser::SnippetData* snippet_data) {
  delete snippet_data_;
  snippet_data_ = snippet_data;
  if (snippet_data) {
    set_has_snippet_data();
  } else {
    clear_has_snippet_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.snippet_data)
}

// optional int64 timestamp_ms = 3;
inline bool ExtendedUrlInfo::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtendedUrlInfo::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtendedUrlInfo::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtendedUrlInfo::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 ExtendedUrlInfo::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.timestamp_ms)
  return timestamp_ms_;
}
inline void ExtendedUrlInfo::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.snippetdata.parser.ExtendedUrlInfo.timestamp_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace parser
}  // namespace snippetdata
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::snippetdata::parser::ValueSimple_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::snippetdata::parser::ValueSimple_Type>() {
  return ::ru::mail::go::snippetdata::parser::ValueSimple_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_snippetdata_2eproto__INCLUDED
