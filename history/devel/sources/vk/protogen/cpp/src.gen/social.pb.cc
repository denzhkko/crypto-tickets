// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: social.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "social.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace social {
class KVDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KV>
     _instance;
} _KV_default_instance_;
class AudioDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Audio>
     _instance;
} _Audio_default_instance_;
class Address_TimetableDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Address_Timetable>
     _instance;
} _Address_Timetable_default_instance_;
class AddressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Address>
     _instance;
} _Address_default_instance_;
class ProfileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Profile>
     _instance;
} _Profile_default_instance_;
class PostDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Post>
     _instance;
} _Post_default_instance_;
class VideoCollection_VideoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoCollection_Video>
     _instance;
} _VideoCollection_Video_default_instance_;
class VideoCollectionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoCollection>
     _instance;
} _VideoCollection_default_instance_;
class CountersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Counters>
     _instance;
} _Counters_default_instance_;
class ImgAttachesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImgAttaches>
     _instance;
} _ImgAttaches_default_instance_;
class FaceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Face>
     _instance;
} _Face_default_instance_;
class FacesInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FacesInfo>
     _instance;
} _FacesInfo_default_instance_;
class PutRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PutRequest>
     _instance;
} _PutRequest_default_instance_;
class LoginResolveRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoginResolveRequest>
     _instance;
} _LoginResolveRequest_default_instance_;
class StatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Status>
     _instance;
} _Status_default_instance_;
class UrlListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlList>
     _instance;
} _UrlList_default_instance_;
class GatewayRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GatewayRecord>
     _instance;
} _GatewayRecord_default_instance_;
class ProfileExplorerResponse_BodyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileExplorerResponse_Body>
     _instance;
} _ProfileExplorerResponse_Body_default_instance_;
class ProfileExplorerResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileExplorerResponse>
     _instance;
} _ProfileExplorerResponse_default_instance_;
class GeoStats_RecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GeoStats_Record>
     _instance;
} _GeoStats_Record_default_instance_;
class GeoStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GeoStats>
     _instance;
} _GeoStats_default_instance_;
class ConverterStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConverterState>
     _instance;
} _ConverterState_default_instance_;
class YoulaAdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<YoulaAd>
     _instance;
} _YoulaAd_default_instance_;
class YoulaWithPutRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<YoulaWithPutRequest>
     _instance;
} _YoulaWithPutRequest_default_instance_;
class PutRequestListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PutRequestList>
     _instance;
} _PutRequestList_default_instance_;

namespace protobuf_social_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audio, author_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audio, title_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address_Timetable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address_Timetable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address_Timetable, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address_Timetable, opentime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address_Timetable, closetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address_Timetable, breakopentime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address_Timetable, breakclosetime_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, rbcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, countryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, cityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, workinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, timetable_),
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  2,
  3,
  9,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, private__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, canonicalurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, followers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, following_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, extra_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, last_seen_),
  0,
  1,
  10,
  11,
  2,
  5,
  6,
  12,
  3,
  4,
  7,
  8,
  ~0u,
  ~0u,
  13,
  14,
  ~0u,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, author_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, repostedfrom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, pubdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, cntlike_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, cntshare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, cntview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, cntcomment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, extra_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, private__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, audios_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, youlaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, youlaad_),
  0,
  1,
  2,
  8,
  3,
  5,
  4,
  ~0u,
  9,
  10,
  11,
  12,
  ~0u,
  14,
  15,
  13,
  ~0u,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection_Video, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection_Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection_Video, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection_Video, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection_Video, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection_Video, pubdate_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, author_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, pubdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoCollection, videos_),
  0,
  1,
  4,
  2,
  3,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counters, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counters, comments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counters, shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counters, views_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgAttaches, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgAttaches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgAttaches, img_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, photo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, v_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacesInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacesInfo, bad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacesInfo, faces_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, post_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, attaches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, profile_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, fastbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, counters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, last_event_attempt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, nofetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, noindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, dest_),
  0,
  7,
  2,
  3,
  4,
  1,
  12,
  5,
  13,
  6,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResolveRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResolveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResolveRequest, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResolveRequest, put_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, alive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlList, urls_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayRecord, socialid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayRecord, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayRecord, targetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayRecord, value64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayRecord, value32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayRecord, value_),
  0,
  1,
  4,
  3,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse_Body, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse_Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse_Body, vkfriendsids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse_Body, vksubgroupsids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse_Body, vksubusersids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse_Body, okfriendsids_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileExplorerResponse, error_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStats_Record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStats_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStats_Record, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStats_Record, percent_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStats, records_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterState, putrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterState, fasttexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterState, numzones_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterState, geostats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterState, neuroporn_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, isarchived_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, isblocked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, isdeleted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, issold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, priceorig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaAd, lon_),
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
  2,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaWithPutRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaWithPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaWithPutRequest, youlaad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoulaWithPutRequest, putrequest_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequestList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequestList, putrequest_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(KV)},
  { 9, 16, sizeof(Audio)},
  { 18, 28, sizeof(Address_Timetable)},
  { 33, 49, sizeof(Address)},
  { 60, 83, sizeof(Profile)},
  { 101, 125, sizeof(Post)},
  { 144, 153, sizeof(VideoCollection_Video)},
  { 157, 169, sizeof(VideoCollection)},
  { 176, 185, sizeof(Counters)},
  { 189, 195, sizeof(ImgAttaches)},
  { 196, 205, sizeof(Face)},
  { 209, 216, sizeof(FacesInfo)},
  { 218, 237, sizeof(PutRequest)},
  { 251, 258, sizeof(LoginResolveRequest)},
  { 260, 267, sizeof(Status)},
  { 269, 275, sizeof(UrlList)},
  { 276, 287, sizeof(GatewayRecord)},
  { 293, 302, sizeof(ProfileExplorerResponse_Body)},
  { 306, 313, sizeof(ProfileExplorerResponse)},
  { 315, 322, sizeof(GeoStats_Record)},
  { 324, 330, sizeof(GeoStats)},
  { 331, 341, sizeof(ConverterState)},
  { 346, 363, sizeof(YoulaAd)},
  { 375, 382, sizeof(YoulaWithPutRequest)},
  { 384, 390, sizeof(PutRequestList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_KV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Audio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Address_Timetable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Address_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Profile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Post_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoCollection_Video_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoCollection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Counters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImgAttaches_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Face_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FacesInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginResolveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GatewayRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileExplorerResponse_Body_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileExplorerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GeoStats_Record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GeoStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConverterState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YoulaAd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YoulaWithPutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PutRequestList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "social.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gogo::storage::protobuf_content_5fstorage_2eproto::InitDefaults();
  ::gogo::fetcher::protobuf_fetcher_5fstorage_2eproto::InitDefaults();
  _KV_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KV_default_instance_);_Audio_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Audio_default_instance_);_Address_Timetable_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Address_Timetable_default_instance_);_Address_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Address_default_instance_);_Profile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Profile_default_instance_);_Post_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Post_default_instance_);_VideoCollection_Video_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoCollection_Video_default_instance_);_VideoCollection_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoCollection_default_instance_);_Counters_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Counters_default_instance_);_ImgAttaches_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImgAttaches_default_instance_);_Face_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Face_default_instance_);_FacesInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FacesInfo_default_instance_);_PutRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PutRequest_default_instance_);_LoginResolveRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoginResolveRequest_default_instance_);_Status_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Status_default_instance_);_UrlList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlList_default_instance_);_GatewayRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GatewayRecord_default_instance_);_ProfileExplorerResponse_Body_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileExplorerResponse_Body_default_instance_);_ProfileExplorerResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileExplorerResponse_default_instance_);_GeoStats_Record_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GeoStats_Record_default_instance_);_GeoStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GeoStats_default_instance_);_ConverterState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConverterState_default_instance_);_YoulaAd_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_YoulaAd_default_instance_);_YoulaWithPutRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_YoulaWithPutRequest_default_instance_);_PutRequestList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PutRequestList_default_instance_);_Post_default_instance_._instance.get_mutable()->youlaad_ = const_cast< ::ru::mail::go::social::YoulaAd*>(
      ::ru::mail::go::social::YoulaAd::internal_default_instance());
  _Face_default_instance_._instance.get_mutable()->img_ = const_cast< ::gogo::fetcher::fetcher_image*>(
      ::gogo::fetcher::fetcher_image::internal_default_instance());
  _PutRequest_default_instance_._instance.get_mutable()->post_ = const_cast< ::ru::mail::go::social::Post*>(
      ::ru::mail::go::social::Post::internal_default_instance());
  _PutRequest_default_instance_._instance.get_mutable()->profile_ = const_cast< ::ru::mail::go::social::Profile*>(
      ::ru::mail::go::social::Profile::internal_default_instance());
  _PutRequest_default_instance_._instance.get_mutable()->attaches_ = const_cast< ::ru::mail::go::social::ImgAttaches*>(
      ::ru::mail::go::social::ImgAttaches::internal_default_instance());
  _PutRequest_default_instance_._instance.get_mutable()->status_ = const_cast< ::ru::mail::go::social::Status*>(
      ::ru::mail::go::social::Status::internal_default_instance());
  _PutRequest_default_instance_._instance.get_mutable()->counters_ = const_cast< ::ru::mail::go::social::Counters*>(
      ::ru::mail::go::social::Counters::internal_default_instance());
  _LoginResolveRequest_default_instance_._instance.get_mutable()->put_ = const_cast< ::ru::mail::go::social::PutRequest*>(
      ::ru::mail::go::social::PutRequest::internal_default_instance());
  _ProfileExplorerResponse_default_instance_._instance.get_mutable()->body_ = const_cast< ::ru::mail::go::social::ProfileExplorerResponse_Body*>(
      ::ru::mail::go::social::ProfileExplorerResponse_Body::internal_default_instance());
  _ConverterState_default_instance_._instance.get_mutable()->putrequest_ = const_cast< ::ru::mail::go::social::PutRequest*>(
      ::ru::mail::go::social::PutRequest::internal_default_instance());
  _ConverterState_default_instance_._instance.get_mutable()->fasttexts_ = const_cast< ::gogo::storage::spider_document_detail*>(
      ::gogo::storage::spider_document_detail::internal_default_instance());
  _ConverterState_default_instance_._instance.get_mutable()->numzones_ = const_cast< ::gogo::storage::spider_document_detail*>(
      ::gogo::storage::spider_document_detail::internal_default_instance());
  _ConverterState_default_instance_._instance.get_mutable()->geostats_ = const_cast< ::ru::mail::go::social::GeoStats*>(
      ::ru::mail::go::social::GeoStats::internal_default_instance());
  _YoulaWithPutRequest_default_instance_._instance.get_mutable()->youlaad_ = const_cast< ::ru::mail::go::social::YoulaAd*>(
      ::ru::mail::go::social::YoulaAd::internal_default_instance());
  _YoulaWithPutRequest_default_instance_._instance.get_mutable()->putrequest_ = const_cast< ::ru::mail::go::social::PutRequest*>(
      ::ru::mail::go::social::PutRequest::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014social.proto\022\021ru.mail.go.social\032\025conte"
      "nt_storage.proto\032\025fetcher_storage.proto\""
      " \n\002KV\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"&\n\005Aud"
      "io\022\016\n\006author\030\001 \002(\t\022\r\n\005title\030\002 \002(\t\"\351\002\n\007Ad"
      "dress\022\013\n\003lat\030\001 \002(\002\022\013\n\003lon\030\002 \002(\002\022\016\n\006rbCod"
      "e\030\003 \002(\005\022\021\n\tcountryId\030\004 \002(\005\022\016\n\006cityId\030\005 \002"
      "(\005\022\014\n\004city\030\006 \002(\t\022\017\n\007address\030\007 \002(\t\022\r\n\005pho"
      "ne\030\010 \001(\t\022\r\n\005title\030\t \001(\t\022-\n\010workInfo\030\n \002("
      "\0162\033.ru.mail.go.social.WorkInfo\0227\n\ttimeta"
      "ble\030\013 \003(\0132$.ru.mail.go.social.Address.Ti"
      "metable\032l\n\tTimetable\022\013\n\003day\030\001 \002(\t\022\020\n\010ope"
      "nTime\030\002 \002(\005\022\021\n\tcloseTime\030\003 \002(\005\022\025\n\rbreakO"
      "penTime\030\004 \002(\005\022\026\n\016breakCloseTime\030\005 \002(\005\"\227\003"
      "\n\007Profile\022\013\n\003key\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010"
      "verified\030\003 \002(\010\022\017\n\007private\030\004 \002(\010\022\r\n\005login"
      "\030\005 \001(\t\022\013\n\003url\030\014 \001(\t\022\024\n\014canonicalUrl\030\016 \001("
      "\t\022\021\n\005group\030\r \001(\010B\002\030\001\022\014\n\004text\030\006 \001(\t\022\016\n\006st"
      "atus\030\007 \001(\t\022\021\n\tfollowers\030\010 \001(\004\022\021\n\tfollowi"
      "ng\030\t \001(\004\022\r\n\005links\030\n \003(\t\022$\n\005extra\030\013 \003(\0132\025"
      ".ru.mail.go.social.KV\022%\n\004type\030\017 \001(\0162\027.ru"
      ".mail.go.social.Type\022)\n\006source\030\020 \001(\0162\031.r"
      "u.mail.go.social.Source\022+\n\007address\030\021 \003(\013"
      "2\032.ru.mail.go.social.Address\022\021\n\tlast_see"
      "n\030\022 \001(\004\"\277\003\n\004Post\022\013\n\003key\030\001 \002(\t\022\021\n\tauthor_"
      "id\030\002 \002(\t\022\024\n\014repostedFrom\030\003 \001(\t\022\017\n\007pubDat"
      "e\030\004 \002(\004\022\013\n\003url\030\005 \002(\t\022\r\n\005title\030\013 \001(\t\022\014\n\004t"
      "ext\030\006 \002(\t\022\r\n\005links\030\n \003(\t\022\017\n\007cntLike\030\007 \001("
      "\003\022\020\n\010cntShare\030\010 \001(\003\022\017\n\007cntView\030\t \001(\003\022\022\n\n"
      "cntComment\030\014 \001(\003\022$\n\005extra\030\r \003(\0132\025.ru.mai"
      "l.go.social.KV\022%\n\004type\030\016 \001(\0162\027.ru.mail.g"
      "o.social.Type\022)\n\006source\030\017 \001(\0162\031.ru.mail."
      "go.social.Source\022\017\n\007private\030\020 \001(\010\022(\n\006aud"
      "ios\030\021 \003(\0132\030.ru.mail.go.social.Audio\022\017\n\007y"
      "oulaId\030\022 \001(\t\022+\n\007youlaAd\030\023 \001(\0132\032.ru.mail."
      "go.social.YoulaAd\"\357\001\n\017VideoCollection\022\013\n"
      "\003key\030\001 \002(\t\022\021\n\tauthor_id\030\002 \002(\t\022\017\n\007pubDate"
      "\030\003 \002(\004\022\013\n\003url\030\004 \002(\t\022\r\n\005title\030\005 \002(\t\022\r\n\005co"
      "unt\030\006 \002(\005\0228\n\006videos\030\007 \003(\0132(.ru.mail.go.s"
      "ocial.VideoCollection.Video\032F\n\005Video\022\r\n\005"
      "title\030\001 \002(\t\022\013\n\003url\030\002 \002(\t\022\020\n\010duration\030\003 \002"
      "(\005\022\017\n\007pubdate\030\004 \002(\003\"J\n\010Counters\022\r\n\005likes"
      "\030\001 \001(\003\022\020\n\010comments\030\002 \001(\003\022\016\n\006shares\030\003 \001(\003"
      "\022\r\n\005views\030\004 \001(\003\"7\n\013ImgAttaches\022(\n\003img\030\001 "
      "\003(\0132\033.gogo.fetcher.fetcher_image\"e\n\004Face"
      "\022\020\n\010photo_id\030\001 \002(\004\022(\n\003img\030\002 \002(\0132\033.gogo.f"
      "etcher.fetcher_image\022\022\n\nconfidence\030\003 \002(\002"
      "\022\r\n\001v\030\004 \003(\002B\002\020\001\"@\n\tFacesInfo\022\013\n\003bad\030\001 \003("
      "\004\022&\n\005faces\030\002 \003(\0132\027.ru.mail.go.social.Fac"
      "e\"\240\005\n\nPutRequest\022\013\n\003key\030\001 \002(\t\022\n\n\002ts\030\002 \002("
      "\004\022%\n\004post\030\003 \001(\0132\027.ru.mail.go.social.Post"
      "\022+\n\007profile\030\004 \001(\0132\032.ru.mail.go.social.Pr"
      "ofile\0220\n\010attaches\030\005 \001(\0132\036.ru.mail.go.soc"
      "ial.ImgAttaches\022\023\n\013profile_url\030\006 \001(\t\0224\n\006"
      "origin\030\007 \001(\0162$.ru.mail.go.social.PutRequ"
      "est.Origin\022)\n\006status\030\010 \001(\0132\031.ru.mail.go."
      "social.Status\0228\n\010fastbase\030\t \001(\0162&.ru.mai"
      "l.go.social.PutRequest.Fastbase\022-\n\010count"
      "ers\030\n \001(\0132\033.ru.mail.go.social.Counters\022\032"
      "\n\022last_event_attempt\030\013 \001(\003\022\017\n\007noFetch\030\014 "
      "\001(\010\022\017\n\007noIndex\030\r \001(\010\022\?\n\004dest\030\016 \001(\0162).ru."
      "mail.go.social.PutRequest.Destination:\006S"
      "OCIAL\"\?\n\006Origin\022\010\n\004wpII\020\001\022\013\n\007message\020\002\022\014"
      "\n\010longread\020\003\022\020\n\014userActivity\020\004\".\n\010Fastba"
      "se\022\010\n\004PROD\020\001\022\n\n\006RM_TTL\020\002\022\014\n\010RM_KAFKA\020\003\"$"
      "\n\013Destination\022\n\n\006SOCIAL\020\000\022\t\n\005FACES\020\001\"\275\001\n"
      "\023LoginResolveRequest\022A\n\007request\030\001 \003(\01620."
      "ru.mail.go.social.LoginResolveRequest.re"
      "quest_t\022*\n\003put\030\002 \002(\0132\035.ru.mail.go.social"
      ".PutRequest\"7\n\trequest_t\022\017\n\013key_primary\020"
      "\000\022\031\n\025reposted_from_primary\020\001\"\322\001\n\006Status\022"
      "\r\n\005alive\030\001 \002(\010\0221\n\004type\030\002 \002(\0162#.ru.mail.g"
      "o.social.Status.CheckType\"\205\001\n\tCheckType\022"
      "\n\n\006IMPORT\020\001\022\017\n\013VK_MESSAGES\020\002\022\r\n\tAPI_FETC"
      "H\020\003\022\r\n\tRB_IMPORT\020\004\022\021\n\rOWNER_DELETED\020\005\022\024\n"
      "\020OK_USER_ACTIVITY\020\006\022\024\n\020YOULA_NOT_ACTUAL\020"
      "\007\"\027\n\007UrlList\022\014\n\004urls\030\001 \003(\t\"q\n\rGatewayRec"
      "ord\022\020\n\010socialId\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\020\n\010ta"
      "rgetId\030\003 \001(\005\022\017\n\007value64\030\004 \001(\003\022\017\n\007value32"
      "\030\005 \001(\005\022\r\n\005value\030\006 \001(\014\"\312\001\n\027ProfileExplore"
      "rResponse\022=\n\004body\030\001 \001(\0132/.ru.mail.go.soc"
      "ial.ProfileExplorerResponse.Body\022\r\n\005erro"
      "r\030\002 \001(\t\032a\n\004Body\022\024\n\014vkFriendsIds\030\001 \003(\t\022\026\n"
      "\016vkSubGroupsIds\030\002 \003(\t\022\025\n\rvkSubUsersIds\030\003"
      " \003(\t\022\024\n\014okFriendsIds\030\004 \003(\t\"g\n\010GeoStats\0223"
      "\n\007records\030\001 \003(\0132\".ru.mail.go.social.GeoS"
      "tats.Record\032&\n\006Record\022\013\n\003geo\030\001 \002(\t\022\017\n\007pe"
      "rcent\030\002 \002(\002\"\366\001\n\016ConverterState\0221\n\nputReq"
      "uest\030\001 \002(\0132\035.ru.mail.go.social.PutReques"
      "t\0227\n\tfastTexts\030\002 \001(\0132$.gogo.storage.spid"
      "er_document_detail\0226\n\010numzones\030\003 \001(\0132$.g"
      "ogo.storage.spider_document_detail\022-\n\010ge"
      "oStats\030\004 \001(\0132\033.ru.mail.go.social.GeoStat"
      "s\022\021\n\tneuroporn\030\005 \001(\005\"\312\001\n\007YoulaAd\022\021\n\tprod"
      "uctId\030\001 \002(\t\022\n\n\002ts\030\002 \002(\004\022\022\n\nisArchived\030\003 "
      "\002(\010\022\021\n\tisBlocked\030\004 \002(\010\022\021\n\tisDeleted\030\005 \002("
      "\010\022\016\n\006isSold\030\006 \002(\010\022\r\n\005price\030\007 \002(\005\022\021\n\tpric"
      "eOrig\030\010 \002(\005\022\014\n\004name\030\t \002(\t\022\014\n\004desc\030\n \002(\t\022"
      "\013\n\003lat\030\013 \002(\002\022\013\n\003lon\030\014 \002(\002\"u\n\023YoulaWithPu"
      "tRequest\022+\n\007youlaAd\030\001 \001(\0132\032.ru.mail.go.s"
      "ocial.YoulaAd\0221\n\nputRequest\030\002 \001(\0132\035.ru.m"
      "ail.go.social.PutRequest\"C\n\016PutRequestLi"
      "st\0221\n\nputRequest\030\001 \003(\0132\035.ru.mail.go.soci"
      "al.PutRequest*c\n\004Type\022\013\n\007profile\020\001\022\t\n\005gr"
      "oup\020\002\022\010\n\004post\020\003\022\014\n\010longread\020\004\022\t\n\005video\020\005"
      "\022\020\n\014topic_offset\020\006\022\016\n\ntopic_post\020\007*(\n\006So"
      "urce\022\006\n\002vk\020\001\022\006\n\002fb\020\002\022\006\n\002ok\020\003\022\006\n\002ig\020\004*`\n\010"
      "WorkInfo\022\013\n\007unknown\020\000\022\023\n\017temporaryClosed"
      "\020\001\022\020\n\014alwaysOpened\020\002\022\021\n\rforeverClosed\020\003\022"
      "\r\n\ttimetable\020\004*\245\001\n\032OkVideoCollectionsPro"
      "vider\022\r\n\tVIDEOMORE\020\001\022\024\n\020ODKL_COMPILATION"
      "\020\002\022\007\n\003VSP\020\003\022\016\n\nSTART_FILM\020\004\022\023\n\017X_MEDIA_D"
      "IGITAL\020\005\022\023\n\017RIDE_THE_PLANET\020\006\022\021\n\rMISCELL"
      "ANEOUS\020\007\022\014\n\010PLADFORM\020\010B\010B\006Social"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "social.proto", &protobuf_RegisterTypes);
  ::gogo::storage::protobuf_content_5fstorage_2eproto::AddDescriptors();
  ::gogo::fetcher::protobuf_fetcher_5fstorage_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_social_2eproto

const ::google::protobuf::EnumDescriptor* PutRequest_Origin_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[0];
}
bool PutRequest_Origin_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PutRequest_Origin PutRequest::wpII;
const PutRequest_Origin PutRequest::message;
const PutRequest_Origin PutRequest::longread;
const PutRequest_Origin PutRequest::userActivity;
const PutRequest_Origin PutRequest::Origin_MIN;
const PutRequest_Origin PutRequest::Origin_MAX;
const int PutRequest::Origin_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PutRequest_Fastbase_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[1];
}
bool PutRequest_Fastbase_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PutRequest_Fastbase PutRequest::PROD;
const PutRequest_Fastbase PutRequest::RM_TTL;
const PutRequest_Fastbase PutRequest::RM_KAFKA;
const PutRequest_Fastbase PutRequest::Fastbase_MIN;
const PutRequest_Fastbase PutRequest::Fastbase_MAX;
const int PutRequest::Fastbase_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PutRequest_Destination_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[2];
}
bool PutRequest_Destination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PutRequest_Destination PutRequest::SOCIAL;
const PutRequest_Destination PutRequest::FACES;
const PutRequest_Destination PutRequest::Destination_MIN;
const PutRequest_Destination PutRequest::Destination_MAX;
const int PutRequest::Destination_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LoginResolveRequest_request_t_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[3];
}
bool LoginResolveRequest_request_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoginResolveRequest_request_t LoginResolveRequest::key_primary;
const LoginResolveRequest_request_t LoginResolveRequest::reposted_from_primary;
const LoginResolveRequest_request_t LoginResolveRequest::request_t_MIN;
const LoginResolveRequest_request_t LoginResolveRequest::request_t_MAX;
const int LoginResolveRequest::request_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Status_CheckType_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[4];
}
bool Status_CheckType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Status_CheckType Status::IMPORT;
const Status_CheckType Status::VK_MESSAGES;
const Status_CheckType Status::API_FETCH;
const Status_CheckType Status::RB_IMPORT;
const Status_CheckType Status::OWNER_DELETED;
const Status_CheckType Status::OK_USER_ACTIVITY;
const Status_CheckType Status::YOULA_NOT_ACTUAL;
const Status_CheckType Status::CheckType_MIN;
const Status_CheckType Status::CheckType_MAX;
const int Status::CheckType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[5];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Source_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[6];
}
bool Source_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorkInfo_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[7];
}
bool WorkInfo_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OkVideoCollectionsProvider_descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_enum_descriptors[8];
}
bool OkVideoCollectionsProvider_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KV::kKeyFieldNumber;
const int KV::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KV::KV()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.KV)
}
KV::KV(const KV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.KV)
}

void KV::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KV::~KV() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.KV)
  SharedDtor();
}

void KV::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KV::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KV& KV::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

KV* KV::New(::google::protobuf::Arena* arena) const {
  KV* n = new KV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KV::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.KV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.KV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.KV.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.KV.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.KV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.KV)
  return false;
#undef DO_
}

void KV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.KV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.KV.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.KV.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.KV)
}

::google::protobuf::uint8* KV::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.KV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.KV.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.KV.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.KV)
  return target;
}

size_t KV::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.KV)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t KV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.KV)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.KV)
  GOOGLE_DCHECK_NE(&from, this);
  const KV* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KV>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.KV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.KV)
    MergeFrom(*source);
  }
}

void KV::MergeFrom(const KV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.KV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void KV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KV::CopyFrom(const KV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void KV::Swap(KV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KV::InternalSwap(KV* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KV::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KV

// required string key = 1;
bool KV::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KV::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void KV::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void KV::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& KV::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.KV.key)
  return key_.GetNoArena();
}
void KV::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.KV.key)
}
#if LANG_CXX11
void KV::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.KV.key)
}
#endif
void KV::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.KV.key)
}
void KV::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.KV.key)
}
::std::string* KV::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.KV.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KV::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.KV.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KV::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.KV.key)
}

// required string value = 2;
bool KV::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KV::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void KV::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void KV::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& KV::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.KV.value)
  return value_.GetNoArena();
}
void KV::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.KV.value)
}
#if LANG_CXX11
void KV::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.KV.value)
}
#endif
void KV::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.KV.value)
}
void KV::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.KV.value)
}
::std::string* KV::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.KV.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KV::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.KV.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KV::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.KV.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Audio::kAuthorFieldNumber;
const int Audio::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Audio::Audio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.Audio)
}
Audio::Audio(const Audio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author()) {
    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.Audio)
}

void Audio::SharedCtor() {
  _cached_size_ = 0;
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.Audio)
  SharedDtor();
}

void Audio::SharedDtor() {
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Audio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Audio::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Audio& Audio::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

Audio* Audio::New(::google::protobuf::Arena* arena) const {
  Audio* n = new Audio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.Audio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!author_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*author_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Audio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.Audio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string author = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), static_cast<int>(this->author().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Audio.author");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Audio.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.Audio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.Audio)
  return false;
#undef DO_
}

void Audio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.Audio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string author = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Audio.author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->author(), output);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Audio.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.Audio)
}

::google::protobuf::uint8* Audio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.Audio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string author = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Audio.author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->author(), target);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Audio.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.Audio)
  return target;
}

size_t Audio::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.Audio)
  size_t total_size = 0;

  if (has_author()) {
    // required string author = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());
  }

  if (has_title()) {
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  return total_size;
}
size_t Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.Audio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string author = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());

    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Audio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  const Audio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Audio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.Audio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.Audio)
    MergeFrom(*source);
  }
}

void Audio::MergeFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_author();
      author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
  }
}

void Audio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Audio::Swap(Audio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Audio::InternalSwap(Audio* other) {
  using std::swap;
  author_.Swap(&other->author_);
  title_.Swap(&other->title_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Audio::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Audio

// required string author = 1;
bool Audio::has_author() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Audio::set_has_author() {
  _has_bits_[0] |= 0x00000001u;
}
void Audio::clear_has_author() {
  _has_bits_[0] &= ~0x00000001u;
}
void Audio::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
const ::std::string& Audio::author() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Audio.author)
  return author_.GetNoArena();
}
void Audio::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Audio.author)
}
#if LANG_CXX11
void Audio::set_author(::std::string&& value) {
  set_has_author();
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Audio.author)
}
#endif
void Audio::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Audio.author)
}
void Audio::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Audio.author)
}
::std::string* Audio::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Audio.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Audio::release_author() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Audio.author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Audio::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Audio.author)
}

// required string title = 2;
bool Audio::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Audio::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void Audio::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void Audio::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Audio::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Audio.title)
  return title_.GetNoArena();
}
void Audio::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Audio.title)
}
#if LANG_CXX11
void Audio::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Audio.title)
}
#endif
void Audio::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Audio.title)
}
void Audio::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Audio.title)
}
::std::string* Audio::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Audio.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Audio::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Audio.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Audio::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Audio.title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address_Timetable::kDayFieldNumber;
const int Address_Timetable::kOpenTimeFieldNumber;
const int Address_Timetable::kCloseTimeFieldNumber;
const int Address_Timetable::kBreakOpenTimeFieldNumber;
const int Address_Timetable::kBreakCloseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address_Timetable::Address_Timetable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.Address.Timetable)
}
Address_Timetable::Address_Timetable(const Address_Timetable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_day()) {
    day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_);
  }
  ::memcpy(&opentime_, &from.opentime_,
    static_cast<size_t>(reinterpret_cast<char*>(&breakclosetime_) -
    reinterpret_cast<char*>(&opentime_)) + sizeof(breakclosetime_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.Address.Timetable)
}

void Address_Timetable::SharedCtor() {
  _cached_size_ = 0;
  day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&opentime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&breakclosetime_) -
      reinterpret_cast<char*>(&opentime_)) + sizeof(breakclosetime_));
}

Address_Timetable::~Address_Timetable() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.Address.Timetable)
  SharedDtor();
}

void Address_Timetable::SharedDtor() {
  day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Address_Timetable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address_Timetable::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address_Timetable& Address_Timetable::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

Address_Timetable* Address_Timetable::New(::google::protobuf::Arena* arena) const {
  Address_Timetable* n = new Address_Timetable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address_Timetable::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.Address.Timetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_day()) {
    GOOGLE_DCHECK(!day_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*day_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&opentime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&breakclosetime_) -
        reinterpret_cast<char*>(&opentime_)) + sizeof(breakclosetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Address_Timetable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.Address.Timetable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string day = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->day().data(), static_cast<int>(this->day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Address.Timetable.day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 openTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_opentime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 closeTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_closetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 breakOpenTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_breakopentime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breakopentime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 breakCloseTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_breakclosetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breakclosetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.Address.Timetable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.Address.Timetable)
  return false;
#undef DO_
}

void Address_Timetable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.Address.Timetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string day = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day().data(), static_cast<int>(this->day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.Timetable.day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->day(), output);
  }

  // required int32 openTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opentime(), output);
  }

  // required int32 closeTime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->closetime(), output);
  }

  // required int32 breakOpenTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->breakopentime(), output);
  }

  // required int32 breakCloseTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->breakclosetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.Address.Timetable)
}

::google::protobuf::uint8* Address_Timetable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.Address.Timetable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string day = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day().data(), static_cast<int>(this->day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.Timetable.day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->day(), target);
  }

  // required int32 openTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opentime(), target);
  }

  // required int32 closeTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->closetime(), target);
  }

  // required int32 breakOpenTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->breakopentime(), target);
  }

  // required int32 breakCloseTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->breakclosetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.Address.Timetable)
  return target;
}

size_t Address_Timetable::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.Address.Timetable)
  size_t total_size = 0;

  if (has_day()) {
    // required string day = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->day());
  }

  if (has_opentime()) {
    // required int32 openTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opentime());
  }

  if (has_closetime()) {
    // required int32 closeTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->closetime());
  }

  if (has_breakopentime()) {
    // required int32 breakOpenTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->breakopentime());
  }

  if (has_breakclosetime()) {
    // required int32 breakCloseTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->breakclosetime());
  }

  return total_size;
}
size_t Address_Timetable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.Address.Timetable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string day = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->day());

    // required int32 openTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opentime());

    // required int32 closeTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->closetime());

    // required int32 breakOpenTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->breakopentime());

    // required int32 breakCloseTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->breakclosetime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address_Timetable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.Address.Timetable)
  GOOGLE_DCHECK_NE(&from, this);
  const Address_Timetable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address_Timetable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.Address.Timetable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.Address.Timetable)
    MergeFrom(*source);
  }
}

void Address_Timetable::MergeFrom(const Address_Timetable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.Address.Timetable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_day();
      day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_);
    }
    if (cached_has_bits & 0x00000002u) {
      opentime_ = from.opentime_;
    }
    if (cached_has_bits & 0x00000004u) {
      closetime_ = from.closetime_;
    }
    if (cached_has_bits & 0x00000008u) {
      breakopentime_ = from.breakopentime_;
    }
    if (cached_has_bits & 0x00000010u) {
      breakclosetime_ = from.breakclosetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Address_Timetable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.Address.Timetable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address_Timetable::CopyFrom(const Address_Timetable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.Address.Timetable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_Timetable::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Address_Timetable::Swap(Address_Timetable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address_Timetable::InternalSwap(Address_Timetable* other) {
  using std::swap;
  day_.Swap(&other->day_);
  swap(opentime_, other->opentime_);
  swap(closetime_, other->closetime_);
  swap(breakopentime_, other->breakopentime_);
  swap(breakclosetime_, other->breakclosetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address_Timetable::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Address_Timetable

// required string day = 1;
bool Address_Timetable::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Address_Timetable::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
void Address_Timetable::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
void Address_Timetable::clear_day() {
  day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_day();
}
const ::std::string& Address_Timetable::day() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.day)
  return day_.GetNoArena();
}
void Address_Timetable::set_day(const ::std::string& value) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.day)
}
#if LANG_CXX11
void Address_Timetable::set_day(::std::string&& value) {
  set_has_day();
  day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.Timetable.day)
}
#endif
void Address_Timetable::set_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.Timetable.day)
}
void Address_Timetable::set_day(const char* value, size_t size) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.Timetable.day)
}
::std::string* Address_Timetable::mutable_day() {
  set_has_day();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.Timetable.day)
  return day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address_Timetable::release_day() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.Timetable.day)
  clear_has_day();
  return day_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address_Timetable::set_allocated_day(::std::string* day) {
  if (day != NULL) {
    set_has_day();
  } else {
    clear_has_day();
  }
  day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), day);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.Timetable.day)
}

// required int32 openTime = 2;
bool Address_Timetable::has_opentime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Address_Timetable::set_has_opentime() {
  _has_bits_[0] |= 0x00000002u;
}
void Address_Timetable::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000002u;
}
void Address_Timetable::clear_opentime() {
  opentime_ = 0;
  clear_has_opentime();
}
::google::protobuf::int32 Address_Timetable::opentime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.openTime)
  return opentime_;
}
void Address_Timetable::set_opentime(::google::protobuf::int32 value) {
  set_has_opentime();
  opentime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.openTime)
}

// required int32 closeTime = 3;
bool Address_Timetable::has_closetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Address_Timetable::set_has_closetime() {
  _has_bits_[0] |= 0x00000004u;
}
void Address_Timetable::clear_has_closetime() {
  _has_bits_[0] &= ~0x00000004u;
}
void Address_Timetable::clear_closetime() {
  closetime_ = 0;
  clear_has_closetime();
}
::google::protobuf::int32 Address_Timetable::closetime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.closeTime)
  return closetime_;
}
void Address_Timetable::set_closetime(::google::protobuf::int32 value) {
  set_has_closetime();
  closetime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.closeTime)
}

// required int32 breakOpenTime = 4;
bool Address_Timetable::has_breakopentime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Address_Timetable::set_has_breakopentime() {
  _has_bits_[0] |= 0x00000008u;
}
void Address_Timetable::clear_has_breakopentime() {
  _has_bits_[0] &= ~0x00000008u;
}
void Address_Timetable::clear_breakopentime() {
  breakopentime_ = 0;
  clear_has_breakopentime();
}
::google::protobuf::int32 Address_Timetable::breakopentime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.breakOpenTime)
  return breakopentime_;
}
void Address_Timetable::set_breakopentime(::google::protobuf::int32 value) {
  set_has_breakopentime();
  breakopentime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.breakOpenTime)
}

// required int32 breakCloseTime = 5;
bool Address_Timetable::has_breakclosetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Address_Timetable::set_has_breakclosetime() {
  _has_bits_[0] |= 0x00000010u;
}
void Address_Timetable::clear_has_breakclosetime() {
  _has_bits_[0] &= ~0x00000010u;
}
void Address_Timetable::clear_breakclosetime() {
  breakclosetime_ = 0;
  clear_has_breakclosetime();
}
::google::protobuf::int32 Address_Timetable::breakclosetime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.breakCloseTime)
  return breakclosetime_;
}
void Address_Timetable::set_breakclosetime(::google::protobuf::int32 value) {
  set_has_breakclosetime();
  breakclosetime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.breakCloseTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kLatFieldNumber;
const int Address::kLonFieldNumber;
const int Address::kRbCodeFieldNumber;
const int Address::kCountryIdFieldNumber;
const int Address::kCityIdFieldNumber;
const int Address::kCityFieldNumber;
const int Address::kAddressFieldNumber;
const int Address::kPhoneFieldNumber;
const int Address::kTitleFieldNumber;
const int Address::kWorkInfoFieldNumber;
const int Address::kTimetableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.Address)
}
Address::Address(const Address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      timetable_(from.timetable_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone()) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&workinfo_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(workinfo_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.Address)
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workinfo_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(workinfo_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address& Address::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

Address* Address::New(::google::protobuf::Arena* arena) const {
  Address* n = new Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timetable_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!phone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phone_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&countryid_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(countryid_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&cityid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&workinfo_) -
        reinterpret_cast<char*>(&cityid_)) + sizeof(workinfo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rbCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rbcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rbcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 countryId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_countryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cityId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cityid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string city = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), static_cast<int>(this->city().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Address.city");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string address = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Address.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Address.phone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Address.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.social.WorkInfo workInfo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::WorkInfo_IsValid(value)) {
            set_workinfo(static_cast< ::ru::mail::go::social::WorkInfo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.social.Address.Timetable timetable = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timetable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float lat = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // required float lon = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lon(), output);
  }

  // required int32 rbCode = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rbcode(), output);
  }

  // required int32 countryId = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->countryid(), output);
  }

  // required int32 cityId = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cityid(), output);
  }

  // required string city = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), static_cast<int>(this->city().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->city(), output);
  }

  // required string address = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->address(), output);
  }

  // optional string phone = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->phone(), output);
  }

  // optional string title = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->title(), output);
  }

  // required .ru.mail.go.social.WorkInfo workInfo = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->workinfo(), output);
  }

  // repeated .ru.mail.go.social.Address.Timetable timetable = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timetable_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->timetable(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float lat = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // required float lon = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lon(), target);
  }

  // required int32 rbCode = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rbcode(), target);
  }

  // required int32 countryId = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->countryid(), target);
  }

  // required int32 cityId = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cityid(), target);
  }

  // required string city = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), static_cast<int>(this->city().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // required string address = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->address(), target);
  }

  // optional string phone = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->phone(), target);
  }

  // optional string title = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Address.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->title(), target);
  }

  // required .ru.mail.go.social.WorkInfo workInfo = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->workinfo(), target);
  }

  // repeated .ru.mail.go.social.Address.Timetable timetable = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timetable_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->timetable(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.Address)
  return target;
}

size_t Address::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.Address)
  size_t total_size = 0;

  if (has_city()) {
    // required string city = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->city());
  }

  if (has_address()) {
    // required string address = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_lat()) {
    // required float lat = 1;
    total_size += 1 + 4;
  }

  if (has_lon()) {
    // required float lon = 2;
    total_size += 1 + 4;
  }

  if (has_rbcode()) {
    // required int32 rbCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rbcode());
  }

  if (has_countryid()) {
    // required int32 countryId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countryid());
  }

  if (has_cityid()) {
    // required int32 cityId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cityid());
  }

  if (has_workinfo()) {
    // required .ru.mail.go.social.WorkInfo workInfo = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->workinfo());
  }

  return total_size;
}
size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.Address)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003f3) ^ 0x000003f3) == 0) {  // All required fields are present.
    // required string city = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->city());

    // required string address = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required float lat = 1;
    total_size += 1 + 4;

    // required float lon = 2;
    total_size += 1 + 4;

    // required int32 rbCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rbcode());

    // required int32 countryId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countryid());

    // required int32 cityId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cityid());

    // required .ru.mail.go.social.WorkInfo workInfo = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->workinfo());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.social.Address.Timetable timetable = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->timetable_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timetable(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional string phone = 8;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timetable_.MergeFrom(from.timetable_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_phone();
      phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000010u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000020u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000040u) {
      rbcode_ = from.rbcode_;
    }
    if (cached_has_bits & 0x00000080u) {
      countryid_ = from.countryid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      cityid_ = from.cityid_;
    }
    if (cached_has_bits & 0x00000200u) {
      workinfo_ = from.workinfo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003f3) != 0x000003f3) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->timetable())) return false;
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  using std::swap;
  timetable_.InternalSwap(&other->timetable_);
  city_.Swap(&other->city_);
  address_.Swap(&other->address_);
  phone_.Swap(&other->phone_);
  title_.Swap(&other->title_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(rbcode_, other->rbcode_);
  swap(countryid_, other->countryid_);
  swap(cityid_, other->cityid_);
  swap(workinfo_, other->workinfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// required float lat = 1;
bool Address::has_lat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Address::set_has_lat() {
  _has_bits_[0] |= 0x00000010u;
}
void Address::clear_has_lat() {
  _has_bits_[0] &= ~0x00000010u;
}
void Address::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
float Address::lat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.lat)
  return lat_;
}
void Address::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.lat)
}

// required float lon = 2;
bool Address::has_lon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Address::set_has_lon() {
  _has_bits_[0] |= 0x00000020u;
}
void Address::clear_has_lon() {
  _has_bits_[0] &= ~0x00000020u;
}
void Address::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
float Address::lon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.lon)
  return lon_;
}
void Address::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.lon)
}

// required int32 rbCode = 3;
bool Address::has_rbcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Address::set_has_rbcode() {
  _has_bits_[0] |= 0x00000040u;
}
void Address::clear_has_rbcode() {
  _has_bits_[0] &= ~0x00000040u;
}
void Address::clear_rbcode() {
  rbcode_ = 0;
  clear_has_rbcode();
}
::google::protobuf::int32 Address::rbcode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.rbCode)
  return rbcode_;
}
void Address::set_rbcode(::google::protobuf::int32 value) {
  set_has_rbcode();
  rbcode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.rbCode)
}

// required int32 countryId = 4;
bool Address::has_countryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Address::set_has_countryid() {
  _has_bits_[0] |= 0x00000080u;
}
void Address::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000080u;
}
void Address::clear_countryid() {
  countryid_ = 0;
  clear_has_countryid();
}
::google::protobuf::int32 Address::countryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.countryId)
  return countryid_;
}
void Address::set_countryid(::google::protobuf::int32 value) {
  set_has_countryid();
  countryid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.countryId)
}

// required int32 cityId = 5;
bool Address::has_cityid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Address::set_has_cityid() {
  _has_bits_[0] |= 0x00000100u;
}
void Address::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000100u;
}
void Address::clear_cityid() {
  cityid_ = 0;
  clear_has_cityid();
}
::google::protobuf::int32 Address::cityid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.cityId)
  return cityid_;
}
void Address::set_cityid(::google::protobuf::int32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.cityId)
}

// required string city = 6;
bool Address::has_city() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Address::set_has_city() {
  _has_bits_[0] |= 0x00000001u;
}
void Address::clear_has_city() {
  _has_bits_[0] &= ~0x00000001u;
}
void Address::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.city)
  return city_.GetNoArena();
}
void Address::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.city)
}
#if LANG_CXX11
void Address::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.city)
}
#endif
void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.city)
}
void Address::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.city)
}
::std::string* Address::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.city)
}

// required string address = 7;
bool Address::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Address::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void Address::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void Address::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Address::address() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.address)
  return address_.GetNoArena();
}
void Address::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.address)
}
#if LANG_CXX11
void Address::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.address)
}
#endif
void Address::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.address)
}
void Address::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.address)
}
::std::string* Address::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address::release_address() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.address)
}

// optional string phone = 8;
bool Address::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Address::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
void Address::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
void Address::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
const ::std::string& Address::phone() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.phone)
  return phone_.GetNoArena();
}
void Address::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.phone)
}
#if LANG_CXX11
void Address::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.phone)
}
#endif
void Address::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.phone)
}
void Address::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.phone)
}
::std::string* Address::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address::release_phone() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.phone)
}

// optional string title = 9;
bool Address::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Address::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
void Address::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void Address::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Address::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.title)
  return title_.GetNoArena();
}
void Address::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.title)
}
#if LANG_CXX11
void Address::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.title)
}
#endif
void Address::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.title)
}
void Address::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.title)
}
::std::string* Address::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.title)
}

// required .ru.mail.go.social.WorkInfo workInfo = 10;
bool Address::has_workinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Address::set_has_workinfo() {
  _has_bits_[0] |= 0x00000200u;
}
void Address::clear_has_workinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
void Address::clear_workinfo() {
  workinfo_ = 0;
  clear_has_workinfo();
}
::ru::mail::go::social::WorkInfo Address::workinfo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.workInfo)
  return static_cast< ::ru::mail::go::social::WorkInfo >(workinfo_);
}
void Address::set_workinfo(::ru::mail::go::social::WorkInfo value) {
  assert(::ru::mail::go::social::WorkInfo_IsValid(value));
  set_has_workinfo();
  workinfo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.workInfo)
}

// repeated .ru.mail.go.social.Address.Timetable timetable = 11;
int Address::timetable_size() const {
  return timetable_.size();
}
void Address::clear_timetable() {
  timetable_.Clear();
}
const ::ru::mail::go::social::Address_Timetable& Address::timetable(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.timetable)
  return timetable_.Get(index);
}
::ru::mail::go::social::Address_Timetable* Address::mutable_timetable(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.timetable)
  return timetable_.Mutable(index);
}
::ru::mail::go::social::Address_Timetable* Address::add_timetable() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Address.timetable)
  return timetable_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address_Timetable >*
Address::mutable_timetable() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Address.timetable)
  return &timetable_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address_Timetable >&
Address::timetable() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Address.timetable)
  return timetable_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile::kKeyFieldNumber;
const int Profile::kNameFieldNumber;
const int Profile::kVerifiedFieldNumber;
const int Profile::kPrivateFieldNumber;
const int Profile::kLoginFieldNumber;
const int Profile::kUrlFieldNumber;
const int Profile::kCanonicalUrlFieldNumber;
const int Profile::kGroupFieldNumber;
const int Profile::kTextFieldNumber;
const int Profile::kStatusFieldNumber;
const int Profile::kFollowersFieldNumber;
const int Profile::kFollowingFieldNumber;
const int Profile::kLinksFieldNumber;
const int Profile::kExtraFieldNumber;
const int Profile::kTypeFieldNumber;
const int Profile::kSourceFieldNumber;
const int Profile::kAddressFieldNumber;
const int Profile::kLastSeenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile::Profile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.Profile)
}
Profile::Profile(const Profile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      links_(from.links_),
      extra_(from.extra_),
      address_(from.address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_login()) {
    login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_status()) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  canonicalurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_canonicalurl()) {
    canonicalurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonicalurl_);
  }
  ::memcpy(&followers_, &from.followers_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&followers_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.Profile)
}

void Profile::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonicalurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&followers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_) -
      reinterpret_cast<char*>(&followers_)) + sizeof(group_));
  type_ = 1;
  source_ = 1;
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.Profile)
  SharedDtor();
}

void Profile::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonicalurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Profile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profile& Profile::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

Profile* Profile::New(::google::protobuf::Arena* arena) const {
  Profile* n = new Profile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  extra_.Clear();
  address_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!login_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*login_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*status_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!canonicalurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*canonicalurl_.UnsafeRawStringPointer())->clear();
    }
  }
  followers_ = GOOGLE_ULONGLONG(0);
  if (cached_has_bits & 32512u) {
    ::memset(&following_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_) -
        reinterpret_cast<char*>(&following_)) + sizeof(group_));
    type_ = 1;
    source_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.Profile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Profile.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Profile.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool verified = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool private = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_private_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string login = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), static_cast<int>(this->login().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Profile.login");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Profile.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Profile.status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 followers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_followers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &followers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 following = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_following();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &following_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string links = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_links()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->links(this->links_size() - 1).data(),
            static_cast<int>(this->links(this->links_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Profile.links");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.social.KV extra = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Profile.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool group = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string canonicalUrl = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonicalurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->canonicalurl().data(), static_cast<int>(this->canonicalurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Profile.canonicalUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.Type type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::social::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.Source source = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::Source_IsValid(value)) {
            set_source(static_cast< ::ru::mail::go::social::Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.social.Address address = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_seen = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_last_seen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.Profile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.Profile)
  return false;
#undef DO_
}

void Profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required bool verified = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->verified(), output);
  }

  // required bool private = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->private_(), output);
  }

  // optional string login = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), static_cast<int>(this->login().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->login(), output);
  }

  // optional string text = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  // optional string status = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->status(), output);
  }

  // optional uint64 followers = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->followers(), output);
  }

  // optional uint64 following = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->following(), output);
  }

  // repeated string links = 10;
  for (int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->links(i).data(), static_cast<int>(this->links(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.links");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->links(i), output);
  }

  // repeated .ru.mail.go.social.KV extra = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->extra(static_cast<int>(i)), output);
  }

  // optional string url = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->url(), output);
  }

  // optional bool group = 13 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->group(), output);
  }

  // optional string canonicalUrl = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canonicalurl().data(), static_cast<int>(this->canonicalurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.canonicalUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->canonicalurl(), output);
  }

  // optional .ru.mail.go.social.Type type = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->type(), output);
  }

  // optional .ru.mail.go.social.Source source = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->source(), output);
  }

  // repeated .ru.mail.go.social.Address address = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->address_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->address(static_cast<int>(i)), output);
  }

  // optional uint64 last_seen = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->last_seen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.Profile)
}

::google::protobuf::uint8* Profile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required bool verified = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->verified(), target);
  }

  // required bool private = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->private_(), target);
  }

  // optional string login = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), static_cast<int>(this->login().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->login(), target);
  }

  // optional string text = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional string status = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->status(), target);
  }

  // optional uint64 followers = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->followers(), target);
  }

  // optional uint64 following = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->following(), target);
  }

  // repeated string links = 10;
  for (int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->links(i).data(), static_cast<int>(this->links(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.links");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->links(i), target);
  }

  // repeated .ru.mail.go.social.KV extra = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->extra(static_cast<int>(i)), deterministic, target);
  }

  // optional string url = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->url(), target);
  }

  // optional bool group = 13 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->group(), target);
  }

  // optional string canonicalUrl = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canonicalurl().data(), static_cast<int>(this->canonicalurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Profile.canonicalUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->canonicalurl(), target);
  }

  // optional .ru.mail.go.social.Type type = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->type(), target);
  }

  // optional .ru.mail.go.social.Source source = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->source(), target);
  }

  // repeated .ru.mail.go.social.Address address = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->address_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->address(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 last_seen = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->last_seen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.Profile)
  return target;
}

size_t Profile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.Profile)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_verified()) {
    // required bool verified = 3;
    total_size += 1 + 1;
  }

  if (has_private_()) {
    // required bool private = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.Profile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000c03) ^ 0x00000c03) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required bool verified = 3;
    total_size += 1 + 1;

    // required bool private = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string links = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->links_size());
  for (int i = 0, n = this->links_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->links(i));
  }

  // repeated .ru.mail.go.social.KV extra = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.social.Address address = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->address_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional string login = 5;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional string url = 12;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string canonicalUrl = 14;
    if (has_canonicalurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canonicalurl());
    }

    // optional uint64 followers = 8;
    if (has_followers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->followers());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint64 following = 9;
    if (has_following()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->following());
    }

    // optional uint64 last_seen = 18;
    if (has_last_seen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_seen());
    }

  }
  if (_has_bits_[8 / 32] & 28672u) {
    // optional bool group = 13 [deprecated = true];
    if (has_group()) {
      total_size += 1 + 1;
    }

    // optional .ru.mail.go.social.Type type = 15;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ru.mail.go.social.Source source = 16;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.Profile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.Profile)
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  extra_.MergeFrom(from.extra_);
  address_.MergeFrom(from.address_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_login();
      login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_canonicalurl();
      canonicalurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonicalurl_);
    }
    if (cached_has_bits & 0x00000080u) {
      followers_ = from.followers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      following_ = from.following_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_seen_ = from.last_seen_;
    }
    if (cached_has_bits & 0x00000400u) {
      verified_ = from.verified_;
    }
    if (cached_has_bits & 0x00000800u) {
      private__ = from.private__;
    }
    if (cached_has_bits & 0x00001000u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00002000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00004000u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c03) != 0x00000c03) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->extra())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->address())) return false;
  return true;
}

void Profile::Swap(Profile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile::InternalSwap(Profile* other) {
  using std::swap;
  links_.InternalSwap(&other->links_);
  extra_.InternalSwap(&other->extra_);
  address_.InternalSwap(&other->address_);
  key_.Swap(&other->key_);
  name_.Swap(&other->name_);
  login_.Swap(&other->login_);
  text_.Swap(&other->text_);
  status_.Swap(&other->status_);
  url_.Swap(&other->url_);
  canonicalurl_.Swap(&other->canonicalurl_);
  swap(followers_, other->followers_);
  swap(following_, other->following_);
  swap(last_seen_, other->last_seen_);
  swap(verified_, other->verified_);
  swap(private__, other->private__);
  swap(group_, other->group_);
  swap(type_, other->type_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile

// required string key = 1;
bool Profile::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Profile::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Profile::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Profile::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Profile::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.key)
  return key_.GetNoArena();
}
void Profile::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.key)
}
#if LANG_CXX11
void Profile::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.key)
}
#endif
void Profile::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.key)
}
void Profile::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.key)
}
::std::string* Profile::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.key)
}

// required string name = 2;
bool Profile::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Profile::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Profile::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Profile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Profile::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.name)
  return name_.GetNoArena();
}
void Profile::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.name)
}
#if LANG_CXX11
void Profile::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.name)
}
#endif
void Profile::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.name)
}
void Profile::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.name)
}
::std::string* Profile::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.name)
}

// required bool verified = 3;
bool Profile::has_verified() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Profile::set_has_verified() {
  _has_bits_[0] |= 0x00000400u;
}
void Profile::clear_has_verified() {
  _has_bits_[0] &= ~0x00000400u;
}
void Profile::clear_verified() {
  verified_ = false;
  clear_has_verified();
}
bool Profile::verified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.verified)
  return verified_;
}
void Profile::set_verified(bool value) {
  set_has_verified();
  verified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.verified)
}

// required bool private = 4;
bool Profile::has_private_() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Profile::set_has_private_() {
  _has_bits_[0] |= 0x00000800u;
}
void Profile::clear_has_private_() {
  _has_bits_[0] &= ~0x00000800u;
}
void Profile::clear_private_() {
  private__ = false;
  clear_has_private_();
}
bool Profile::private_() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.private)
  return private__;
}
void Profile::set_private_(bool value) {
  set_has_private_();
  private__ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.private)
}

// optional string login = 5;
bool Profile::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Profile::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
void Profile::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
void Profile::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login();
}
const ::std::string& Profile::login() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.login)
  return login_.GetNoArena();
}
void Profile::set_login(const ::std::string& value) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.login)
}
#if LANG_CXX11
void Profile::set_login(::std::string&& value) {
  set_has_login();
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.login)
}
#endif
void Profile::set_login(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.login)
}
void Profile::set_login(const char* value, size_t size) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.login)
}
::std::string* Profile::mutable_login() {
  set_has_login();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_login() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.login)
  clear_has_login();
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    set_has_login();
  } else {
    clear_has_login();
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.login)
}

// optional string url = 12;
bool Profile::has_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Profile::set_has_url() {
  _has_bits_[0] |= 0x00000020u;
}
void Profile::clear_has_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void Profile::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Profile::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.url)
  return url_.GetNoArena();
}
void Profile::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.url)
}
#if LANG_CXX11
void Profile::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.url)
}
#endif
void Profile::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.url)
}
void Profile::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.url)
}
::std::string* Profile::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.url)
}

// optional string canonicalUrl = 14;
bool Profile::has_canonicalurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Profile::set_has_canonicalurl() {
  _has_bits_[0] |= 0x00000040u;
}
void Profile::clear_has_canonicalurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void Profile::clear_canonicalurl() {
  canonicalurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonicalurl();
}
const ::std::string& Profile::canonicalurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.canonicalUrl)
  return canonicalurl_.GetNoArena();
}
void Profile::set_canonicalurl(const ::std::string& value) {
  set_has_canonicalurl();
  canonicalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.canonicalUrl)
}
#if LANG_CXX11
void Profile::set_canonicalurl(::std::string&& value) {
  set_has_canonicalurl();
  canonicalurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.canonicalUrl)
}
#endif
void Profile::set_canonicalurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canonicalurl();
  canonicalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.canonicalUrl)
}
void Profile::set_canonicalurl(const char* value, size_t size) {
  set_has_canonicalurl();
  canonicalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.canonicalUrl)
}
::std::string* Profile::mutable_canonicalurl() {
  set_has_canonicalurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.canonicalUrl)
  return canonicalurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_canonicalurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.canonicalUrl)
  clear_has_canonicalurl();
  return canonicalurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_canonicalurl(::std::string* canonicalurl) {
  if (canonicalurl != NULL) {
    set_has_canonicalurl();
  } else {
    clear_has_canonicalurl();
  }
  canonicalurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonicalurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.canonicalUrl)
}

// optional bool group = 13 [deprecated = true];
bool Profile::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Profile::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
void Profile::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
void Profile::clear_group() {
  group_ = false;
  clear_has_group();
}
bool Profile::group() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.group)
  return group_;
}
void Profile::set_group(bool value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.group)
}

// optional string text = 6;
bool Profile::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Profile::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
void Profile::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
void Profile::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Profile::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.text)
  return text_.GetNoArena();
}
void Profile::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.text)
}
#if LANG_CXX11
void Profile::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.text)
}
#endif
void Profile::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.text)
}
void Profile::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.text)
}
::std::string* Profile::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.text)
}

// optional string status = 7;
bool Profile::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Profile::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void Profile::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void Profile::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
const ::std::string& Profile::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.status)
  return status_.GetNoArena();
}
void Profile::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.status)
}
#if LANG_CXX11
void Profile::set_status(::std::string&& value) {
  set_has_status();
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.status)
}
#endif
void Profile::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.status)
}
void Profile::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.status)
}
::std::string* Profile::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.status)
}

// optional uint64 followers = 8;
bool Profile::has_followers() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Profile::set_has_followers() {
  _has_bits_[0] |= 0x00000080u;
}
void Profile::clear_has_followers() {
  _has_bits_[0] &= ~0x00000080u;
}
void Profile::clear_followers() {
  followers_ = GOOGLE_ULONGLONG(0);
  clear_has_followers();
}
::google::protobuf::uint64 Profile::followers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.followers)
  return followers_;
}
void Profile::set_followers(::google::protobuf::uint64 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.followers)
}

// optional uint64 following = 9;
bool Profile::has_following() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Profile::set_has_following() {
  _has_bits_[0] |= 0x00000100u;
}
void Profile::clear_has_following() {
  _has_bits_[0] &= ~0x00000100u;
}
void Profile::clear_following() {
  following_ = GOOGLE_ULONGLONG(0);
  clear_has_following();
}
::google::protobuf::uint64 Profile::following() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.following)
  return following_;
}
void Profile::set_following(::google::protobuf::uint64 value) {
  set_has_following();
  following_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.following)
}

// repeated string links = 10;
int Profile::links_size() const {
  return links_.size();
}
void Profile::clear_links() {
  links_.Clear();
}
const ::std::string& Profile::links(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.links)
  return links_.Get(index);
}
::std::string* Profile::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.links)
  return links_.Mutable(index);
}
void Profile::set_links(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.links)
  links_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Profile::set_links(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.links)
  links_.Mutable(index)->assign(std::move(value));
}
#endif
void Profile::set_links(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  links_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.links)
}
void Profile::set_links(int index, const char* value, size_t size) {
  links_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.links)
}
::std::string* Profile::add_links() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.Profile.links)
  return links_.Add();
}
void Profile::add_links(const ::std::string& value) {
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Profile.links)
}
#if LANG_CXX11
void Profile::add_links(::std::string&& value) {
  links_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Profile.links)
}
#endif
void Profile::add_links(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.Profile.links)
}
void Profile::add_links(const char* value, size_t size) {
  links_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.Profile.links)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Profile::links() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Profile.links)
  return links_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Profile::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Profile.links)
  return &links_;
}

// repeated .ru.mail.go.social.KV extra = 11;
int Profile::extra_size() const {
  return extra_.size();
}
void Profile::clear_extra() {
  extra_.Clear();
}
const ::ru::mail::go::social::KV& Profile::extra(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.extra)
  return extra_.Get(index);
}
::ru::mail::go::social::KV* Profile::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.extra)
  return extra_.Mutable(index);
}
::ru::mail::go::social::KV* Profile::add_extra() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Profile.extra)
  return extra_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >*
Profile::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Profile.extra)
  return &extra_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >&
Profile::extra() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Profile.extra)
  return extra_;
}

// optional .ru.mail.go.social.Type type = 15;
bool Profile::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Profile::set_has_type() {
  _has_bits_[0] |= 0x00002000u;
}
void Profile::clear_has_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void Profile::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::social::Type Profile::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.type)
  return static_cast< ::ru::mail::go::social::Type >(type_);
}
void Profile::set_type(::ru::mail::go::social::Type value) {
  assert(::ru::mail::go::social::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.type)
}

// optional .ru.mail.go.social.Source source = 16;
bool Profile::has_source() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Profile::set_has_source() {
  _has_bits_[0] |= 0x00004000u;
}
void Profile::clear_has_source() {
  _has_bits_[0] &= ~0x00004000u;
}
void Profile::clear_source() {
  source_ = 1;
  clear_has_source();
}
::ru::mail::go::social::Source Profile::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.source)
  return static_cast< ::ru::mail::go::social::Source >(source_);
}
void Profile::set_source(::ru::mail::go::social::Source value) {
  assert(::ru::mail::go::social::Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.source)
}

// repeated .ru.mail.go.social.Address address = 17;
int Profile::address_size() const {
  return address_.size();
}
void Profile::clear_address() {
  address_.Clear();
}
const ::ru::mail::go::social::Address& Profile::address(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.address)
  return address_.Get(index);
}
::ru::mail::go::social::Address* Profile::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.address)
  return address_.Mutable(index);
}
::ru::mail::go::social::Address* Profile::add_address() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Profile.address)
  return address_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address >*
Profile::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Profile.address)
  return &address_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address >&
Profile::address() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Profile.address)
  return address_;
}

// optional uint64 last_seen = 18;
bool Profile::has_last_seen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Profile::set_has_last_seen() {
  _has_bits_[0] |= 0x00000200u;
}
void Profile::clear_has_last_seen() {
  _has_bits_[0] &= ~0x00000200u;
}
void Profile::clear_last_seen() {
  last_seen_ = GOOGLE_ULONGLONG(0);
  clear_has_last_seen();
}
::google::protobuf::uint64 Profile::last_seen() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.last_seen)
  return last_seen_;
}
void Profile::set_last_seen(::google::protobuf::uint64 value) {
  set_has_last_seen();
  last_seen_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.last_seen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Post::kKeyFieldNumber;
const int Post::kAuthorIdFieldNumber;
const int Post::kRepostedFromFieldNumber;
const int Post::kPubDateFieldNumber;
const int Post::kUrlFieldNumber;
const int Post::kTitleFieldNumber;
const int Post::kTextFieldNumber;
const int Post::kLinksFieldNumber;
const int Post::kCntLikeFieldNumber;
const int Post::kCntShareFieldNumber;
const int Post::kCntViewFieldNumber;
const int Post::kCntCommentFieldNumber;
const int Post::kExtraFieldNumber;
const int Post::kTypeFieldNumber;
const int Post::kSourceFieldNumber;
const int Post::kPrivateFieldNumber;
const int Post::kAudiosFieldNumber;
const int Post::kYoulaIdFieldNumber;
const int Post::kYoulaAdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Post::Post()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.Post)
}
Post::Post(const Post& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      links_(from.links_),
      extra_(from.extra_),
      audios_(from.audios_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  author_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author_id()) {
    author_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_id_);
  }
  repostedfrom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_repostedfrom()) {
    repostedfrom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repostedfrom_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  youlaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youlaid()) {
    youlaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youlaid_);
  }
  if (from.has_youlaad()) {
    youlaad_ = new ::ru::mail::go::social::YoulaAd(*from.youlaad_);
  } else {
    youlaad_ = NULL;
  }
  ::memcpy(&pubdate_, &from.pubdate_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&pubdate_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.Post)
}

void Post::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repostedfrom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youlaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&youlaad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&private__) -
      reinterpret_cast<char*>(&youlaad_)) + sizeof(private__));
  type_ = 1;
  source_ = 1;
}

Post::~Post() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.Post)
  SharedDtor();
}

void Post::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repostedfrom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youlaid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete youlaad_;
}

void Post::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Post::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Post& Post::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

Post* Post::New(::google::protobuf::Arena* arena) const {
  Post* n = new Post;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Post::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.Post)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  extra_.Clear();
  audios_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!author_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*author_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!repostedfrom_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*repostedfrom_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!youlaid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*youlaid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(youlaad_ != NULL);
      youlaad_->::ru::mail::go::social::YoulaAd::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&pubdate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&private__) -
        reinterpret_cast<char*>(&pubdate_)) + sizeof(private__));
    type_ = 1;
    source_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Post::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.Post)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Post.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string author_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author_id().data(), static_cast<int>(this->author_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Post.author_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string repostedFrom = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repostedfrom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->repostedfrom().data(), static_cast<int>(this->repostedfrom().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Post.repostedFrom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 pubDate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pubdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pubdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Post.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Post.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cntLike = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_cntlike();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cntlike_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cntShare = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_cntshare();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cntshare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cntView = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_cntview();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cntview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string links = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_links()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->links(this->links_size() - 1).data(),
            static_cast<int>(this->links(this->links_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Post.links");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Post.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cntComment = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_cntcomment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cntcomment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.social.KV extra = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.Type type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::social::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.Source source = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::Source_IsValid(value)) {
            set_source(static_cast< ::ru::mail::go::social::Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool private = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_private_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.social.Audio audios = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youlaId = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youlaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youlaid().data(), static_cast<int>(this->youlaid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.Post.youlaId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.YoulaAd youlaAd = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youlaad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.Post)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.Post)
  return false;
#undef DO_
}

void Post::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.Post)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string author_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_id().data(), static_cast<int>(this->author_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.author_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->author_id(), output);
  }

  // optional string repostedFrom = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repostedfrom().data(), static_cast<int>(this->repostedfrom().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.repostedFrom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->repostedfrom(), output);
  }

  // required uint64 pubDate = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pubdate(), output);
  }

  // required string url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // required string text = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  // optional int64 cntLike = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->cntlike(), output);
  }

  // optional int64 cntShare = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->cntshare(), output);
  }

  // optional int64 cntView = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->cntview(), output);
  }

  // repeated string links = 10;
  for (int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->links(i).data(), static_cast<int>(this->links(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.links");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->links(i), output);
  }

  // optional string title = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->title(), output);
  }

  // optional int64 cntComment = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->cntcomment(), output);
  }

  // repeated .ru.mail.go.social.KV extra = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->extra(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.social.Type type = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->type(), output);
  }

  // optional .ru.mail.go.social.Source source = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->source(), output);
  }

  // optional bool private = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->private_(), output);
  }

  // repeated .ru.mail.go.social.Audio audios = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audios_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->audios(static_cast<int>(i)), output);
  }

  // optional string youlaId = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youlaid().data(), static_cast<int>(this->youlaid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.youlaId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->youlaid(), output);
  }

  // optional .ru.mail.go.social.YoulaAd youlaAd = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->youlaad_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.Post)
}

::google::protobuf::uint8* Post::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.Post)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string author_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_id().data(), static_cast<int>(this->author_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.author_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author_id(), target);
  }

  // optional string repostedFrom = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repostedfrom().data(), static_cast<int>(this->repostedfrom().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.repostedFrom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->repostedfrom(), target);
  }

  // required uint64 pubDate = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pubdate(), target);
  }

  // required string url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // required string text = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional int64 cntLike = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->cntlike(), target);
  }

  // optional int64 cntShare = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->cntshare(), target);
  }

  // optional int64 cntView = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->cntview(), target);
  }

  // repeated string links = 10;
  for (int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->links(i).data(), static_cast<int>(this->links(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.links");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->links(i), target);
  }

  // optional string title = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->title(), target);
  }

  // optional int64 cntComment = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->cntcomment(), target);
  }

  // repeated .ru.mail.go.social.KV extra = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->extra(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.social.Type type = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->type(), target);
  }

  // optional .ru.mail.go.social.Source source = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->source(), target);
  }

  // optional bool private = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->private_(), target);
  }

  // repeated .ru.mail.go.social.Audio audios = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audios_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->audios(static_cast<int>(i)), deterministic, target);
  }

  // optional string youlaId = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youlaid().data(), static_cast<int>(this->youlaid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.Post.youlaId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->youlaid(), target);
  }

  // optional .ru.mail.go.social.YoulaAd youlaAd = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->youlaad_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.Post)
  return target;
}

size_t Post::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.Post)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_author_id()) {
    // required string author_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author_id());
  }

  if (has_url()) {
    // required string url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_text()) {
    // required string text = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_pubdate()) {
    // required uint64 pubDate = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pubdate());
  }

  return total_size;
}
size_t Post::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.Post)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000011b) ^ 0x0000011b) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string author_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author_id());

    // required string url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string text = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required uint64 pubDate = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pubdate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string links = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->links_size());
  for (int i = 0, n = this->links_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->links(i));
  }

  // repeated .ru.mail.go.social.KV extra = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.social.Audio audios = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->audios_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audios(static_cast<int>(i)));
    }
  }

  // optional string repostedFrom = 3;
  if (has_repostedfrom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->repostedfrom());
  }

  if (_has_bits_[0 / 32] & 224u) {
    // optional string title = 11;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string youlaId = 18;
    if (has_youlaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youlaid());
    }

    // optional .ru.mail.go.social.YoulaAd youlaAd = 19;
    if (has_youlaad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youlaad_);
    }

  }
  if (_has_bits_[8 / 32] & 65024u) {
    // optional int64 cntLike = 7;
    if (has_cntlike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cntlike());
    }

    // optional int64 cntShare = 8;
    if (has_cntshare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cntshare());
    }

    // optional int64 cntView = 9;
    if (has_cntview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cntview());
    }

    // optional int64 cntComment = 12;
    if (has_cntcomment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cntcomment());
    }

    // optional bool private = 16;
    if (has_private_()) {
      total_size += 2 + 1;
    }

    // optional .ru.mail.go.social.Type type = 14;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ru.mail.go.social.Source source = 15;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.Post)
  GOOGLE_DCHECK_NE(&from, this);
  const Post* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Post>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.Post)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.Post)
    MergeFrom(*source);
  }
}

void Post::MergeFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.Post)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  extra_.MergeFrom(from.extra_);
  audios_.MergeFrom(from.audios_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_author_id();
      author_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_repostedfrom();
      repostedfrom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repostedfrom_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_youlaid();
      youlaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youlaid_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_youlaad()->::ru::mail::go::social::YoulaAd::MergeFrom(from.youlaad());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      pubdate_ = from.pubdate_;
    }
    if (cached_has_bits & 0x00000200u) {
      cntlike_ = from.cntlike_;
    }
    if (cached_has_bits & 0x00000400u) {
      cntshare_ = from.cntshare_;
    }
    if (cached_has_bits & 0x00000800u) {
      cntview_ = from.cntview_;
    }
    if (cached_has_bits & 0x00001000u) {
      cntcomment_ = from.cntcomment_;
    }
    if (cached_has_bits & 0x00002000u) {
      private__ = from.private__;
    }
    if (cached_has_bits & 0x00004000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00008000u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Post::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.Post)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Post::CopyFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.Post)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000011b) != 0x0000011b) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->extra())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->audios())) return false;
  if (has_youlaad()) {
    if (!this->youlaad_->IsInitialized()) return false;
  }
  return true;
}

void Post::Swap(Post* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Post::InternalSwap(Post* other) {
  using std::swap;
  links_.InternalSwap(&other->links_);
  extra_.InternalSwap(&other->extra_);
  audios_.InternalSwap(&other->audios_);
  key_.Swap(&other->key_);
  author_id_.Swap(&other->author_id_);
  repostedfrom_.Swap(&other->repostedfrom_);
  url_.Swap(&other->url_);
  text_.Swap(&other->text_);
  title_.Swap(&other->title_);
  youlaid_.Swap(&other->youlaid_);
  swap(youlaad_, other->youlaad_);
  swap(pubdate_, other->pubdate_);
  swap(cntlike_, other->cntlike_);
  swap(cntshare_, other->cntshare_);
  swap(cntview_, other->cntview_);
  swap(cntcomment_, other->cntcomment_);
  swap(private__, other->private__);
  swap(type_, other->type_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Post::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Post

// required string key = 1;
bool Post::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Post::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Post::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Post::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Post::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.key)
  return key_.GetNoArena();
}
void Post::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.key)
}
#if LANG_CXX11
void Post::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.key)
}
#endif
void Post::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.key)
}
void Post::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.key)
}
::std::string* Post::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.key)
}

// required string author_id = 2;
bool Post::has_author_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Post::set_has_author_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Post::clear_has_author_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Post::clear_author_id() {
  author_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author_id();
}
const ::std::string& Post::author_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.author_id)
  return author_id_.GetNoArena();
}
void Post::set_author_id(const ::std::string& value) {
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.author_id)
}
#if LANG_CXX11
void Post::set_author_id(::std::string&& value) {
  set_has_author_id();
  author_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.author_id)
}
#endif
void Post::set_author_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.author_id)
}
void Post::set_author_id(const char* value, size_t size) {
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.author_id)
}
::std::string* Post::mutable_author_id() {
  set_has_author_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.author_id)
  return author_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_author_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.author_id)
  clear_has_author_id();
  return author_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_author_id(::std::string* author_id) {
  if (author_id != NULL) {
    set_has_author_id();
  } else {
    clear_has_author_id();
  }
  author_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.author_id)
}

// optional string repostedFrom = 3;
bool Post::has_repostedfrom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Post::set_has_repostedfrom() {
  _has_bits_[0] |= 0x00000004u;
}
void Post::clear_has_repostedfrom() {
  _has_bits_[0] &= ~0x00000004u;
}
void Post::clear_repostedfrom() {
  repostedfrom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_repostedfrom();
}
const ::std::string& Post::repostedfrom() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.repostedFrom)
  return repostedfrom_.GetNoArena();
}
void Post::set_repostedfrom(const ::std::string& value) {
  set_has_repostedfrom();
  repostedfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.repostedFrom)
}
#if LANG_CXX11
void Post::set_repostedfrom(::std::string&& value) {
  set_has_repostedfrom();
  repostedfrom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.repostedFrom)
}
#endif
void Post::set_repostedfrom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_repostedfrom();
  repostedfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.repostedFrom)
}
void Post::set_repostedfrom(const char* value, size_t size) {
  set_has_repostedfrom();
  repostedfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.repostedFrom)
}
::std::string* Post::mutable_repostedfrom() {
  set_has_repostedfrom();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.repostedFrom)
  return repostedfrom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_repostedfrom() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.repostedFrom)
  clear_has_repostedfrom();
  return repostedfrom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_repostedfrom(::std::string* repostedfrom) {
  if (repostedfrom != NULL) {
    set_has_repostedfrom();
  } else {
    clear_has_repostedfrom();
  }
  repostedfrom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repostedfrom);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.repostedFrom)
}

// required uint64 pubDate = 4;
bool Post::has_pubdate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Post::set_has_pubdate() {
  _has_bits_[0] |= 0x00000100u;
}
void Post::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000100u;
}
void Post::clear_pubdate() {
  pubdate_ = GOOGLE_ULONGLONG(0);
  clear_has_pubdate();
}
::google::protobuf::uint64 Post::pubdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.pubDate)
  return pubdate_;
}
void Post::set_pubdate(::google::protobuf::uint64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.pubDate)
}

// required string url = 5;
bool Post::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Post::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
void Post::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void Post::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Post::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.url)
  return url_.GetNoArena();
}
void Post::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.url)
}
#if LANG_CXX11
void Post::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.url)
}
#endif
void Post::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.url)
}
void Post::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.url)
}
::std::string* Post::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.url)
}

// optional string title = 11;
bool Post::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Post::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
void Post::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
void Post::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Post::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.title)
  return title_.GetNoArena();
}
void Post::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.title)
}
#if LANG_CXX11
void Post::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.title)
}
#endif
void Post::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.title)
}
void Post::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.title)
}
::std::string* Post::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.title)
}

// required string text = 6;
bool Post::has_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Post::set_has_text() {
  _has_bits_[0] |= 0x00000010u;
}
void Post::clear_has_text() {
  _has_bits_[0] &= ~0x00000010u;
}
void Post::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Post::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.text)
  return text_.GetNoArena();
}
void Post::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.text)
}
#if LANG_CXX11
void Post::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.text)
}
#endif
void Post::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.text)
}
void Post::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.text)
}
::std::string* Post::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.text)
}

// repeated string links = 10;
int Post::links_size() const {
  return links_.size();
}
void Post::clear_links() {
  links_.Clear();
}
const ::std::string& Post::links(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.links)
  return links_.Get(index);
}
::std::string* Post::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.links)
  return links_.Mutable(index);
}
void Post::set_links(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.links)
  links_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Post::set_links(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.links)
  links_.Mutable(index)->assign(std::move(value));
}
#endif
void Post::set_links(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  links_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.links)
}
void Post::set_links(int index, const char* value, size_t size) {
  links_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.links)
}
::std::string* Post::add_links() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.Post.links)
  return links_.Add();
}
void Post::add_links(const ::std::string& value) {
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Post.links)
}
#if LANG_CXX11
void Post::add_links(::std::string&& value) {
  links_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Post.links)
}
#endif
void Post::add_links(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.Post.links)
}
void Post::add_links(const char* value, size_t size) {
  links_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.Post.links)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Post::links() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Post.links)
  return links_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Post::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Post.links)
  return &links_;
}

// optional int64 cntLike = 7;
bool Post::has_cntlike() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Post::set_has_cntlike() {
  _has_bits_[0] |= 0x00000200u;
}
void Post::clear_has_cntlike() {
  _has_bits_[0] &= ~0x00000200u;
}
void Post::clear_cntlike() {
  cntlike_ = GOOGLE_LONGLONG(0);
  clear_has_cntlike();
}
::google::protobuf::int64 Post::cntlike() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.cntLike)
  return cntlike_;
}
void Post::set_cntlike(::google::protobuf::int64 value) {
  set_has_cntlike();
  cntlike_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.cntLike)
}

// optional int64 cntShare = 8;
bool Post::has_cntshare() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Post::set_has_cntshare() {
  _has_bits_[0] |= 0x00000400u;
}
void Post::clear_has_cntshare() {
  _has_bits_[0] &= ~0x00000400u;
}
void Post::clear_cntshare() {
  cntshare_ = GOOGLE_LONGLONG(0);
  clear_has_cntshare();
}
::google::protobuf::int64 Post::cntshare() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.cntShare)
  return cntshare_;
}
void Post::set_cntshare(::google::protobuf::int64 value) {
  set_has_cntshare();
  cntshare_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.cntShare)
}

// optional int64 cntView = 9;
bool Post::has_cntview() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Post::set_has_cntview() {
  _has_bits_[0] |= 0x00000800u;
}
void Post::clear_has_cntview() {
  _has_bits_[0] &= ~0x00000800u;
}
void Post::clear_cntview() {
  cntview_ = GOOGLE_LONGLONG(0);
  clear_has_cntview();
}
::google::protobuf::int64 Post::cntview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.cntView)
  return cntview_;
}
void Post::set_cntview(::google::protobuf::int64 value) {
  set_has_cntview();
  cntview_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.cntView)
}

// optional int64 cntComment = 12;
bool Post::has_cntcomment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Post::set_has_cntcomment() {
  _has_bits_[0] |= 0x00001000u;
}
void Post::clear_has_cntcomment() {
  _has_bits_[0] &= ~0x00001000u;
}
void Post::clear_cntcomment() {
  cntcomment_ = GOOGLE_LONGLONG(0);
  clear_has_cntcomment();
}
::google::protobuf::int64 Post::cntcomment() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.cntComment)
  return cntcomment_;
}
void Post::set_cntcomment(::google::protobuf::int64 value) {
  set_has_cntcomment();
  cntcomment_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.cntComment)
}

// repeated .ru.mail.go.social.KV extra = 13;
int Post::extra_size() const {
  return extra_.size();
}
void Post::clear_extra() {
  extra_.Clear();
}
const ::ru::mail::go::social::KV& Post::extra(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.extra)
  return extra_.Get(index);
}
::ru::mail::go::social::KV* Post::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.extra)
  return extra_.Mutable(index);
}
::ru::mail::go::social::KV* Post::add_extra() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Post.extra)
  return extra_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >*
Post::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Post.extra)
  return &extra_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >&
Post::extra() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Post.extra)
  return extra_;
}

// optional .ru.mail.go.social.Type type = 14;
bool Post::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Post::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
void Post::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
void Post::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::social::Type Post::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.type)
  return static_cast< ::ru::mail::go::social::Type >(type_);
}
void Post::set_type(::ru::mail::go::social::Type value) {
  assert(::ru::mail::go::social::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.type)
}

// optional .ru.mail.go.social.Source source = 15;
bool Post::has_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Post::set_has_source() {
  _has_bits_[0] |= 0x00008000u;
}
void Post::clear_has_source() {
  _has_bits_[0] &= ~0x00008000u;
}
void Post::clear_source() {
  source_ = 1;
  clear_has_source();
}
::ru::mail::go::social::Source Post::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.source)
  return static_cast< ::ru::mail::go::social::Source >(source_);
}
void Post::set_source(::ru::mail::go::social::Source value) {
  assert(::ru::mail::go::social::Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.source)
}

// optional bool private = 16;
bool Post::has_private_() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Post::set_has_private_() {
  _has_bits_[0] |= 0x00002000u;
}
void Post::clear_has_private_() {
  _has_bits_[0] &= ~0x00002000u;
}
void Post::clear_private_() {
  private__ = false;
  clear_has_private_();
}
bool Post::private_() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.private)
  return private__;
}
void Post::set_private_(bool value) {
  set_has_private_();
  private__ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.private)
}

// repeated .ru.mail.go.social.Audio audios = 17;
int Post::audios_size() const {
  return audios_.size();
}
void Post::clear_audios() {
  audios_.Clear();
}
const ::ru::mail::go::social::Audio& Post::audios(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.audios)
  return audios_.Get(index);
}
::ru::mail::go::social::Audio* Post::mutable_audios(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.audios)
  return audios_.Mutable(index);
}
::ru::mail::go::social::Audio* Post::add_audios() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Post.audios)
  return audios_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Audio >*
Post::mutable_audios() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Post.audios)
  return &audios_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Audio >&
Post::audios() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Post.audios)
  return audios_;
}

// optional string youlaId = 18;
bool Post::has_youlaid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Post::set_has_youlaid() {
  _has_bits_[0] |= 0x00000040u;
}
void Post::clear_has_youlaid() {
  _has_bits_[0] &= ~0x00000040u;
}
void Post::clear_youlaid() {
  youlaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youlaid();
}
const ::std::string& Post::youlaid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.youlaId)
  return youlaid_.GetNoArena();
}
void Post::set_youlaid(const ::std::string& value) {
  set_has_youlaid();
  youlaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.youlaId)
}
#if LANG_CXX11
void Post::set_youlaid(::std::string&& value) {
  set_has_youlaid();
  youlaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.youlaId)
}
#endif
void Post::set_youlaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_youlaid();
  youlaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.youlaId)
}
void Post::set_youlaid(const char* value, size_t size) {
  set_has_youlaid();
  youlaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.youlaId)
}
::std::string* Post::mutable_youlaid() {
  set_has_youlaid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.youlaId)
  return youlaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_youlaid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.youlaId)
  clear_has_youlaid();
  return youlaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_youlaid(::std::string* youlaid) {
  if (youlaid != NULL) {
    set_has_youlaid();
  } else {
    clear_has_youlaid();
  }
  youlaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youlaid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.youlaId)
}

// optional .ru.mail.go.social.YoulaAd youlaAd = 19;
bool Post::has_youlaad() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Post::set_has_youlaad() {
  _has_bits_[0] |= 0x00000080u;
}
void Post::clear_has_youlaad() {
  _has_bits_[0] &= ~0x00000080u;
}
void Post::clear_youlaad() {
  if (youlaad_ != NULL) youlaad_->::ru::mail::go::social::YoulaAd::Clear();
  clear_has_youlaad();
}
const ::ru::mail::go::social::YoulaAd& Post::youlaad() const {
  const ::ru::mail::go::social::YoulaAd* p = youlaad_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.youlaAd)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::YoulaAd*>(
      &::ru::mail::go::social::_YoulaAd_default_instance_);
}
::ru::mail::go::social::YoulaAd* Post::mutable_youlaad() {
  set_has_youlaad();
  if (youlaad_ == NULL) {
    youlaad_ = new ::ru::mail::go::social::YoulaAd;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.youlaAd)
  return youlaad_;
}
::ru::mail::go::social::YoulaAd* Post::release_youlaad() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.youlaAd)
  clear_has_youlaad();
  ::ru::mail::go::social::YoulaAd* temp = youlaad_;
  youlaad_ = NULL;
  return temp;
}
void Post::set_allocated_youlaad(::ru::mail::go::social::YoulaAd* youlaad) {
  delete youlaad_;
  youlaad_ = youlaad;
  if (youlaad) {
    set_has_youlaad();
  } else {
    clear_has_youlaad();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.youlaAd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoCollection_Video::kTitleFieldNumber;
const int VideoCollection_Video::kUrlFieldNumber;
const int VideoCollection_Video::kDurationFieldNumber;
const int VideoCollection_Video::kPubdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoCollection_Video::VideoCollection_Video()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.VideoCollection.Video)
}
VideoCollection_Video::VideoCollection_Video(const VideoCollection_Video& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&pubdate_, &from.pubdate_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&pubdate_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.VideoCollection.Video)
}

void VideoCollection_Video::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pubdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&pubdate_)) + sizeof(duration_));
}

VideoCollection_Video::~VideoCollection_Video() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.VideoCollection.Video)
  SharedDtor();
}

void VideoCollection_Video::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoCollection_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoCollection_Video::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoCollection_Video& VideoCollection_Video::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoCollection_Video* VideoCollection_Video::New(::google::protobuf::Arena* arena) const {
  VideoCollection_Video* n = new VideoCollection_Video;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoCollection_Video::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.VideoCollection.Video)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&pubdate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&pubdate_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoCollection_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.VideoCollection.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.VideoCollection.Video.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.VideoCollection.Video.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 pubdate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pubdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pubdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.VideoCollection.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.VideoCollection.Video)
  return false;
#undef DO_
}

void VideoCollection_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.VideoCollection.Video)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.Video.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.Video.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // required int32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // required int64 pubdate = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->pubdate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.VideoCollection.Video)
}

::google::protobuf::uint8* VideoCollection_Video::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.VideoCollection.Video)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.Video.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.Video.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // required int32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration(), target);
  }

  // required int64 pubdate = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->pubdate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.VideoCollection.Video)
  return target;
}

size_t VideoCollection_Video::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.VideoCollection.Video)
  size_t total_size = 0;

  if (has_title()) {
    // required string title = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_pubdate()) {
    // required int64 pubdate = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pubdate());
  }

  if (has_duration()) {
    // required int32 duration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  return total_size;
}
size_t VideoCollection_Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.VideoCollection.Video)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string title = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required int64 pubdate = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pubdate());

    // required int32 duration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoCollection_Video::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.VideoCollection.Video)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoCollection_Video* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoCollection_Video>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.VideoCollection.Video)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.VideoCollection.Video)
    MergeFrom(*source);
  }
}

void VideoCollection_Video::MergeFrom(const VideoCollection_Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.VideoCollection.Video)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      pubdate_ = from.pubdate_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoCollection_Video::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.VideoCollection.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoCollection_Video::CopyFrom(const VideoCollection_Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.VideoCollection.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCollection_Video::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void VideoCollection_Video::Swap(VideoCollection_Video* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoCollection_Video::InternalSwap(VideoCollection_Video* other) {
  using std::swap;
  title_.Swap(&other->title_);
  url_.Swap(&other->url_);
  swap(pubdate_, other->pubdate_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoCollection_Video::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoCollection_Video

// required string title = 1;
bool VideoCollection_Video::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoCollection_Video::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoCollection_Video::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoCollection_Video::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VideoCollection_Video::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.Video.title)
  return title_.GetNoArena();
}
void VideoCollection_Video::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.Video.title)
}
#if LANG_CXX11
void VideoCollection_Video::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.Video.title)
}
#endif
void VideoCollection_Video::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.Video.title)
}
void VideoCollection_Video::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.Video.title)
}
::std::string* VideoCollection_Video::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.Video.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoCollection_Video::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.Video.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoCollection_Video::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.Video.title)
}

// required string url = 2;
bool VideoCollection_Video::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoCollection_Video::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoCollection_Video::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoCollection_Video::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& VideoCollection_Video::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.Video.url)
  return url_.GetNoArena();
}
void VideoCollection_Video::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.Video.url)
}
#if LANG_CXX11
void VideoCollection_Video::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.Video.url)
}
#endif
void VideoCollection_Video::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.Video.url)
}
void VideoCollection_Video::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.Video.url)
}
::std::string* VideoCollection_Video::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.Video.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoCollection_Video::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.Video.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoCollection_Video::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.Video.url)
}

// required int32 duration = 3;
bool VideoCollection_Video::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoCollection_Video::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoCollection_Video::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoCollection_Video::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 VideoCollection_Video::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.Video.duration)
  return duration_;
}
void VideoCollection_Video::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.Video.duration)
}

// required int64 pubdate = 4;
bool VideoCollection_Video::has_pubdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoCollection_Video::set_has_pubdate() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoCollection_Video::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoCollection_Video::clear_pubdate() {
  pubdate_ = GOOGLE_LONGLONG(0);
  clear_has_pubdate();
}
::google::protobuf::int64 VideoCollection_Video::pubdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.Video.pubdate)
  return pubdate_;
}
void VideoCollection_Video::set_pubdate(::google::protobuf::int64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.Video.pubdate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoCollection::kKeyFieldNumber;
const int VideoCollection::kAuthorIdFieldNumber;
const int VideoCollection::kPubDateFieldNumber;
const int VideoCollection::kUrlFieldNumber;
const int VideoCollection::kTitleFieldNumber;
const int VideoCollection::kCountFieldNumber;
const int VideoCollection::kVideosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoCollection::VideoCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.VideoCollection)
}
VideoCollection::VideoCollection(const VideoCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      videos_(from.videos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  author_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author_id()) {
    author_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_id_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&pubdate_, &from.pubdate_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&pubdate_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.VideoCollection)
}

void VideoCollection::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pubdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&pubdate_)) + sizeof(count_));
}

VideoCollection::~VideoCollection() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.VideoCollection)
  SharedDtor();
}

void VideoCollection::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoCollection::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoCollection& VideoCollection::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoCollection* VideoCollection::New(::google::protobuf::Arena* arena) const {
  VideoCollection* n = new VideoCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.VideoCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  videos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!author_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*author_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&pubdate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&pubdate_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.VideoCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.VideoCollection.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string author_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author_id().data(), static_cast<int>(this->author_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.VideoCollection.author_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 pubDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pubdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pubdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.VideoCollection.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.VideoCollection.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.social.VideoCollection.Video videos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.VideoCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.VideoCollection)
  return false;
#undef DO_
}

void VideoCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.VideoCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string author_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_id().data(), static_cast<int>(this->author_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.author_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->author_id(), output);
  }

  // required uint64 pubDate = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pubdate(), output);
  }

  // required string url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // required string title = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // required int32 count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // repeated .ru.mail.go.social.VideoCollection.Video videos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->videos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->videos(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.VideoCollection)
}

::google::protobuf::uint8* VideoCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.VideoCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string author_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_id().data(), static_cast<int>(this->author_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.author_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author_id(), target);
  }

  // required uint64 pubDate = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pubdate(), target);
  }

  // required string url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // required string title = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.VideoCollection.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // required int32 count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // repeated .ru.mail.go.social.VideoCollection.Video videos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->videos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->videos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.VideoCollection)
  return target;
}

size_t VideoCollection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.VideoCollection)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_author_id()) {
    // required string author_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author_id());
  }

  if (has_url()) {
    // required string url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_title()) {
    // required string title = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_pubdate()) {
    // required uint64 pubDate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pubdate());
  }

  if (has_count()) {
    // required int32 count = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
size_t VideoCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.VideoCollection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string author_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author_id());

    // required string url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string title = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required uint64 pubDate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pubdate());

    // required int32 count = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.social.VideoCollection.Video videos = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->videos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.VideoCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.VideoCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.VideoCollection)
    MergeFrom(*source);
  }
}

void VideoCollection::MergeFrom(const VideoCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.VideoCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  videos_.MergeFrom(from.videos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_author_id();
      author_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000010u) {
      pubdate_ = from.pubdate_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.VideoCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoCollection::CopyFrom(const VideoCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.VideoCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCollection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->videos())) return false;
  return true;
}

void VideoCollection::Swap(VideoCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoCollection::InternalSwap(VideoCollection* other) {
  using std::swap;
  videos_.InternalSwap(&other->videos_);
  key_.Swap(&other->key_);
  author_id_.Swap(&other->author_id_);
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  swap(pubdate_, other->pubdate_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoCollection::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoCollection

// required string key = 1;
bool VideoCollection::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoCollection::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoCollection::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoCollection::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& VideoCollection::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.key)
  return key_.GetNoArena();
}
void VideoCollection::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.key)
}
#if LANG_CXX11
void VideoCollection::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.key)
}
#endif
void VideoCollection::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.key)
}
void VideoCollection::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.key)
}
::std::string* VideoCollection::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoCollection::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoCollection::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.key)
}

// required string author_id = 2;
bool VideoCollection::has_author_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoCollection::set_has_author_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoCollection::clear_has_author_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoCollection::clear_author_id() {
  author_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author_id();
}
const ::std::string& VideoCollection::author_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.author_id)
  return author_id_.GetNoArena();
}
void VideoCollection::set_author_id(const ::std::string& value) {
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.author_id)
}
#if LANG_CXX11
void VideoCollection::set_author_id(::std::string&& value) {
  set_has_author_id();
  author_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.author_id)
}
#endif
void VideoCollection::set_author_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.author_id)
}
void VideoCollection::set_author_id(const char* value, size_t size) {
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.author_id)
}
::std::string* VideoCollection::mutable_author_id() {
  set_has_author_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.author_id)
  return author_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoCollection::release_author_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.author_id)
  clear_has_author_id();
  return author_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoCollection::set_allocated_author_id(::std::string* author_id) {
  if (author_id != NULL) {
    set_has_author_id();
  } else {
    clear_has_author_id();
  }
  author_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.author_id)
}

// required uint64 pubDate = 3;
bool VideoCollection::has_pubdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoCollection::set_has_pubdate() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoCollection::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoCollection::clear_pubdate() {
  pubdate_ = GOOGLE_ULONGLONG(0);
  clear_has_pubdate();
}
::google::protobuf::uint64 VideoCollection::pubdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.pubDate)
  return pubdate_;
}
void VideoCollection::set_pubdate(::google::protobuf::uint64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.pubDate)
}

// required string url = 4;
bool VideoCollection::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoCollection::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoCollection::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoCollection::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& VideoCollection::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.url)
  return url_.GetNoArena();
}
void VideoCollection::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.url)
}
#if LANG_CXX11
void VideoCollection::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.url)
}
#endif
void VideoCollection::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.url)
}
void VideoCollection::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.url)
}
::std::string* VideoCollection::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoCollection::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoCollection::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.url)
}

// required string title = 5;
bool VideoCollection::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoCollection::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoCollection::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoCollection::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VideoCollection::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.title)
  return title_.GetNoArena();
}
void VideoCollection::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.title)
}
#if LANG_CXX11
void VideoCollection::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.title)
}
#endif
void VideoCollection::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.title)
}
void VideoCollection::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.title)
}
::std::string* VideoCollection::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoCollection::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoCollection::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.title)
}

// required int32 count = 6;
bool VideoCollection::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VideoCollection::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
void VideoCollection::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void VideoCollection::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 VideoCollection::count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.count)
  return count_;
}
void VideoCollection::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.count)
}

// repeated .ru.mail.go.social.VideoCollection.Video videos = 7;
int VideoCollection::videos_size() const {
  return videos_.size();
}
void VideoCollection::clear_videos() {
  videos_.Clear();
}
const ::ru::mail::go::social::VideoCollection_Video& VideoCollection::videos(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.videos)
  return videos_.Get(index);
}
::ru::mail::go::social::VideoCollection_Video* VideoCollection::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.videos)
  return videos_.Mutable(index);
}
::ru::mail::go::social::VideoCollection_Video* VideoCollection::add_videos() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.VideoCollection.videos)
  return videos_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::VideoCollection_Video >*
VideoCollection::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.VideoCollection.videos)
  return &videos_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::VideoCollection_Video >&
VideoCollection::videos() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.VideoCollection.videos)
  return videos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Counters::kLikesFieldNumber;
const int Counters::kCommentsFieldNumber;
const int Counters::kSharesFieldNumber;
const int Counters::kViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Counters::Counters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.Counters)
}
Counters::Counters(const Counters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&likes_, &from.likes_,
    static_cast<size_t>(reinterpret_cast<char*>(&views_) -
    reinterpret_cast<char*>(&likes_)) + sizeof(views_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.Counters)
}

void Counters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&likes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&views_) -
      reinterpret_cast<char*>(&likes_)) + sizeof(views_));
}

Counters::~Counters() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.Counters)
  SharedDtor();
}

void Counters::SharedDtor() {
}

void Counters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Counters::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Counters& Counters::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

Counters* Counters::New(::google::protobuf::Arena* arena) const {
  Counters* n = new Counters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Counters::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&likes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&views_) -
        reinterpret_cast<char*>(&likes_)) + sizeof(views_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Counters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.Counters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 likes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 comments = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_comments();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 shares = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 views = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.Counters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.Counters)
  return false;
#undef DO_
}

void Counters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 likes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->likes(), output);
  }

  // optional int64 comments = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->comments(), output);
  }

  // optional int64 shares = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->shares(), output);
  }

  // optional int64 views = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->views(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.Counters)
}

::google::protobuf::uint8* Counters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 likes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->likes(), target);
  }

  // optional int64 comments = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->comments(), target);
  }

  // optional int64 shares = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->shares(), target);
  }

  // optional int64 views = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->views(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.Counters)
  return target;
}

size_t Counters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.Counters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 likes = 1;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->likes());
    }

    // optional int64 comments = 2;
    if (has_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comments());
    }

    // optional int64 shares = 3;
    if (has_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shares());
    }

    // optional int64 views = 4;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->views());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Counters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  const Counters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Counters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.Counters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.Counters)
    MergeFrom(*source);
  }
}

void Counters::MergeFrom(const Counters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000002u) {
      comments_ = from.comments_;
    }
    if (cached_has_bits & 0x00000004u) {
      shares_ = from.shares_;
    }
    if (cached_has_bits & 0x00000008u) {
      views_ = from.views_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Counters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Counters::CopyFrom(const Counters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counters::IsInitialized() const {
  return true;
}

void Counters::Swap(Counters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Counters::InternalSwap(Counters* other) {
  using std::swap;
  swap(likes_, other->likes_);
  swap(comments_, other->comments_);
  swap(shares_, other->shares_);
  swap(views_, other->views_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Counters::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Counters

// optional int64 likes = 1;
bool Counters::has_likes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Counters::set_has_likes() {
  _has_bits_[0] |= 0x00000001u;
}
void Counters::clear_has_likes() {
  _has_bits_[0] &= ~0x00000001u;
}
void Counters::clear_likes() {
  likes_ = GOOGLE_LONGLONG(0);
  clear_has_likes();
}
::google::protobuf::int64 Counters::likes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Counters.likes)
  return likes_;
}
void Counters::set_likes(::google::protobuf::int64 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Counters.likes)
}

// optional int64 comments = 2;
bool Counters::has_comments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Counters::set_has_comments() {
  _has_bits_[0] |= 0x00000002u;
}
void Counters::clear_has_comments() {
  _has_bits_[0] &= ~0x00000002u;
}
void Counters::clear_comments() {
  comments_ = GOOGLE_LONGLONG(0);
  clear_has_comments();
}
::google::protobuf::int64 Counters::comments() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Counters.comments)
  return comments_;
}
void Counters::set_comments(::google::protobuf::int64 value) {
  set_has_comments();
  comments_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Counters.comments)
}

// optional int64 shares = 3;
bool Counters::has_shares() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Counters::set_has_shares() {
  _has_bits_[0] |= 0x00000004u;
}
void Counters::clear_has_shares() {
  _has_bits_[0] &= ~0x00000004u;
}
void Counters::clear_shares() {
  shares_ = GOOGLE_LONGLONG(0);
  clear_has_shares();
}
::google::protobuf::int64 Counters::shares() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Counters.shares)
  return shares_;
}
void Counters::set_shares(::google::protobuf::int64 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Counters.shares)
}

// optional int64 views = 4;
bool Counters::has_views() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Counters::set_has_views() {
  _has_bits_[0] |= 0x00000008u;
}
void Counters::clear_has_views() {
  _has_bits_[0] &= ~0x00000008u;
}
void Counters::clear_views() {
  views_ = GOOGLE_LONGLONG(0);
  clear_has_views();
}
::google::protobuf::int64 Counters::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Counters.views)
  return views_;
}
void Counters::set_views(::google::protobuf::int64 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Counters.views)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgAttaches::kImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgAttaches::ImgAttaches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.ImgAttaches)
}
ImgAttaches::ImgAttaches(const ImgAttaches& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      img_(from.img_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.ImgAttaches)
}

void ImgAttaches::SharedCtor() {
  _cached_size_ = 0;
}

ImgAttaches::~ImgAttaches() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.ImgAttaches)
  SharedDtor();
}

void ImgAttaches::SharedDtor() {
}

void ImgAttaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgAttaches::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImgAttaches& ImgAttaches::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImgAttaches* ImgAttaches::New(::google::protobuf::Arena* arena) const {
  ImgAttaches* n = new ImgAttaches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgAttaches::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.ImgAttaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  img_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImgAttaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.ImgAttaches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.fetcher.fetcher_image img = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.ImgAttaches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.ImgAttaches)
  return false;
#undef DO_
}

void ImgAttaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.ImgAttaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.fetcher.fetcher_image img = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->img_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->img(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.ImgAttaches)
}

::google::protobuf::uint8* ImgAttaches::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.ImgAttaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.fetcher.fetcher_image img = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->img_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->img(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.ImgAttaches)
  return target;
}

size_t ImgAttaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.ImgAttaches)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.fetcher.fetcher_image img = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->img_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgAttaches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.ImgAttaches)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgAttaches* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgAttaches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.ImgAttaches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.ImgAttaches)
    MergeFrom(*source);
  }
}

void ImgAttaches::MergeFrom(const ImgAttaches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.ImgAttaches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  img_.MergeFrom(from.img_);
}

void ImgAttaches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.ImgAttaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgAttaches::CopyFrom(const ImgAttaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.ImgAttaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgAttaches::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->img())) return false;
  return true;
}

void ImgAttaches::Swap(ImgAttaches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgAttaches::InternalSwap(ImgAttaches* other) {
  using std::swap;
  img_.InternalSwap(&other->img_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgAttaches::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgAttaches

// repeated .gogo.fetcher.fetcher_image img = 1;
int ImgAttaches::img_size() const {
  return img_.size();
}
void ImgAttaches::clear_img() {
  img_.Clear();
}
const ::gogo::fetcher::fetcher_image& ImgAttaches::img(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ImgAttaches.img)
  return img_.Get(index);
}
::gogo::fetcher::fetcher_image* ImgAttaches::mutable_img(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ImgAttaches.img)
  return img_.Mutable(index);
}
::gogo::fetcher::fetcher_image* ImgAttaches::add_img() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ImgAttaches.img)
  return img_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
ImgAttaches::mutable_img() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ImgAttaches.img)
  return &img_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
ImgAttaches::img() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ImgAttaches.img)
  return img_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kPhotoIdFieldNumber;
const int Face::kImgFieldNumber;
const int Face::kConfidenceFieldNumber;
const int Face::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.Face)
}
Face::Face(const Face& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      v_(from.v_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_img()) {
    img_ = new ::gogo::fetcher::fetcher_image(*from.img_);
  } else {
    img_ = NULL;
  }
  ::memcpy(&photo_id_, &from.photo_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&photo_id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.Face)
}

void Face::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&img_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&img_)) + sizeof(confidence_));
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  if (this != internal_default_instance()) delete img_;
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Face& Face::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

Face* Face::New(::google::protobuf::Arena* arena) const {
  Face* n = new Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.Face)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  if (has_img()) {
    GOOGLE_DCHECK(img_ != NULL);
    img_->::gogo::fetcher::fetcher_image::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&photo_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&photo_id_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 photo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_photo_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &photo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gogo.fetcher.fetcher_image img = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float v = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_v())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_v())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.Face)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 photo_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->photo_id(), output);
  }

  // required .gogo.fetcher.fetcher_image img = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_, output);
  }

  // required float confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // repeated float v = 4 [packed = true];
  if (this->v_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _v_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->v().data(), this->v_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.Face)
}

::google::protobuf::uint8* Face::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.Face)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 photo_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->photo_id(), target);
  }

  // required .gogo.fetcher.fetcher_image img = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->img_, deterministic, target);
  }

  // required float confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // repeated float v = 4 [packed = true];
  if (this->v_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _v_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->v_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.Face)
  return target;
}

size_t Face::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.Face)
  size_t total_size = 0;

  if (has_img()) {
    // required .gogo.fetcher.fetcher_image img = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  if (has_photo_id()) {
    // required uint64 photo_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->photo_id());
  }

  if (has_confidence()) {
    // required float confidence = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.Face)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .gogo.fetcher.fetcher_image img = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);

    // required uint64 photo_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->photo_id());

    // required float confidence = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float v = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->v_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _v_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.Face)
  GOOGLE_DCHECK_NE(&from, this);
  const Face* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.Face)
    MergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.Face)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_img()->::gogo::fetcher::fetcher_image::MergeFrom(from.img());
    }
    if (cached_has_bits & 0x00000002u) {
      photo_id_ = from.photo_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_img()) {
    if (!this->img_->IsInitialized()) return false;
  }
  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  using std::swap;
  v_.InternalSwap(&other->v_);
  swap(img_, other->img_);
  swap(photo_id_, other->photo_id_);
  swap(confidence_, other->confidence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Face::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face

// required uint64 photo_id = 1;
bool Face::has_photo_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Face::set_has_photo_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Face::clear_has_photo_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Face::clear_photo_id() {
  photo_id_ = GOOGLE_ULONGLONG(0);
  clear_has_photo_id();
}
::google::protobuf::uint64 Face::photo_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Face.photo_id)
  return photo_id_;
}
void Face::set_photo_id(::google::protobuf::uint64 value) {
  set_has_photo_id();
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Face.photo_id)
}

// required .gogo.fetcher.fetcher_image img = 2;
bool Face::has_img() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Face::set_has_img() {
  _has_bits_[0] |= 0x00000001u;
}
void Face::clear_has_img() {
  _has_bits_[0] &= ~0x00000001u;
}
void Face::clear_img() {
  if (img_ != NULL) img_->::gogo::fetcher::fetcher_image::Clear();
  clear_has_img();
}
const ::gogo::fetcher::fetcher_image& Face::img() const {
  const ::gogo::fetcher::fetcher_image* p = img_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Face.img)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::fetcher_image*>(
      &::gogo::fetcher::_fetcher_image_default_instance_);
}
::gogo::fetcher::fetcher_image* Face::mutable_img() {
  set_has_img();
  if (img_ == NULL) {
    img_ = new ::gogo::fetcher::fetcher_image;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Face.img)
  return img_;
}
::gogo::fetcher::fetcher_image* Face::release_img() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Face.img)
  clear_has_img();
  ::gogo::fetcher::fetcher_image* temp = img_;
  img_ = NULL;
  return temp;
}
void Face::set_allocated_img(::gogo::fetcher::fetcher_image* img) {
  delete img_;
  img_ = img;
  if (img) {
    set_has_img();
  } else {
    clear_has_img();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Face.img)
}

// required float confidence = 3;
bool Face::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Face::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
void Face::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
void Face::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
float Face::confidence() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Face.confidence)
  return confidence_;
}
void Face::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Face.confidence)
}

// repeated float v = 4 [packed = true];
int Face::v_size() const {
  return v_.size();
}
void Face::clear_v() {
  v_.Clear();
}
float Face::v(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Face.v)
  return v_.Get(index);
}
void Face::set_v(int index, float value) {
  v_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Face.v)
}
void Face::add_v(float value) {
  v_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Face.v)
}
const ::google::protobuf::RepeatedField< float >&
Face::v() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Face.v)
  return v_;
}
::google::protobuf::RepeatedField< float >*
Face::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Face.v)
  return &v_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacesInfo::kBadFieldNumber;
const int FacesInfo::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacesInfo::FacesInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.FacesInfo)
}
FacesInfo::FacesInfo(const FacesInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bad_(from.bad_),
      faces_(from.faces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.FacesInfo)
}

void FacesInfo::SharedCtor() {
  _cached_size_ = 0;
}

FacesInfo::~FacesInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.FacesInfo)
  SharedDtor();
}

void FacesInfo::SharedDtor() {
}

void FacesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacesInfo::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacesInfo& FacesInfo::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

FacesInfo* FacesInfo::New(::google::protobuf::Arena* arena) const {
  FacesInfo* n = new FacesInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FacesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.FacesInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bad_.Clear();
  faces_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FacesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.FacesInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 bad = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_bad())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bad())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.social.Face faces = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.FacesInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.FacesInfo)
  return false;
#undef DO_
}

void FacesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.FacesInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 bad = 1;
  for (int i = 0, n = this->bad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->bad(i), output);
  }

  // repeated .ru.mail.go.social.Face faces = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->faces_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faces(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.FacesInfo)
}

::google::protobuf::uint8* FacesInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.FacesInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 bad = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->bad_, target);

  // repeated .ru.mail.go.social.Face faces = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->faces_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->faces(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.FacesInfo)
  return target;
}

size_t FacesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.FacesInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 bad = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bad_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bad_size());
    total_size += data_size;
  }

  // repeated .ru.mail.go.social.Face faces = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->faces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faces(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacesInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.FacesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FacesInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacesInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.FacesInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.FacesInfo)
    MergeFrom(*source);
  }
}

void FacesInfo::MergeFrom(const FacesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.FacesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bad_.MergeFrom(from.bad_);
  faces_.MergeFrom(from.faces_);
}

void FacesInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.FacesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacesInfo::CopyFrom(const FacesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.FacesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacesInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->faces())) return false;
  return true;
}

void FacesInfo::Swap(FacesInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacesInfo::InternalSwap(FacesInfo* other) {
  using std::swap;
  bad_.InternalSwap(&other->bad_);
  faces_.InternalSwap(&other->faces_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FacesInfo::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FacesInfo

// repeated uint64 bad = 1;
int FacesInfo::bad_size() const {
  return bad_.size();
}
void FacesInfo::clear_bad() {
  bad_.Clear();
}
::google::protobuf::uint64 FacesInfo::bad(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.FacesInfo.bad)
  return bad_.Get(index);
}
void FacesInfo::set_bad(int index, ::google::protobuf::uint64 value) {
  bad_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.FacesInfo.bad)
}
void FacesInfo::add_bad(::google::protobuf::uint64 value) {
  bad_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.FacesInfo.bad)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FacesInfo::bad() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.FacesInfo.bad)
  return bad_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FacesInfo::mutable_bad() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.FacesInfo.bad)
  return &bad_;
}

// repeated .ru.mail.go.social.Face faces = 2;
int FacesInfo::faces_size() const {
  return faces_.size();
}
void FacesInfo::clear_faces() {
  faces_.Clear();
}
const ::ru::mail::go::social::Face& FacesInfo::faces(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.FacesInfo.faces)
  return faces_.Get(index);
}
::ru::mail::go::social::Face* FacesInfo::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.FacesInfo.faces)
  return faces_.Mutable(index);
}
::ru::mail::go::social::Face* FacesInfo::add_faces() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.FacesInfo.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Face >*
FacesInfo::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.FacesInfo.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Face >&
FacesInfo::faces() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.FacesInfo.faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kTsFieldNumber;
const int PutRequest::kPostFieldNumber;
const int PutRequest::kProfileFieldNumber;
const int PutRequest::kAttachesFieldNumber;
const int PutRequest::kProfileUrlFieldNumber;
const int PutRequest::kOriginFieldNumber;
const int PutRequest::kStatusFieldNumber;
const int PutRequest::kFastbaseFieldNumber;
const int PutRequest::kCountersFieldNumber;
const int PutRequest::kLastEventAttemptFieldNumber;
const int PutRequest::kNoFetchFieldNumber;
const int PutRequest::kNoIndexFieldNumber;
const int PutRequest::kDestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  profile_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_profile_url()) {
    profile_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_url_);
  }
  if (from.has_post()) {
    post_ = new ::ru::mail::go::social::Post(*from.post_);
  } else {
    post_ = NULL;
  }
  if (from.has_profile()) {
    profile_ = new ::ru::mail::go::social::Profile(*from.profile_);
  } else {
    profile_ = NULL;
  }
  if (from.has_attaches()) {
    attaches_ = new ::ru::mail::go::social::ImgAttaches(*from.attaches_);
  } else {
    attaches_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::ru::mail::go::social::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_counters()) {
    counters_ = new ::ru::mail::go::social::Counters(*from.counters_);
  } else {
    counters_ = NULL;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&fastbase_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(fastbase_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.PutRequest)
}

void PutRequest::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&post_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_) -
      reinterpret_cast<char*>(&post_)) + sizeof(dest_));
  origin_ = 1;
  fastbase_ = 1;
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete post_;
  if (this != internal_default_instance()) delete profile_;
  if (this != internal_default_instance()) delete attaches_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete counters_;
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutRequest& PutRequest::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

PutRequest* PutRequest::New(::google::protobuf::Arena* arena) const {
  PutRequest* n = new PutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!profile_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*profile_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(post_ != NULL);
      post_->::ru::mail::go::social::Post::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(profile_ != NULL);
      profile_->::ru::mail::go::social::Profile::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(attaches_ != NULL);
      attaches_->::ru::mail::go::social::ImgAttaches::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(status_ != NULL);
      status_->::ru::mail::go::social::Status::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(counters_ != NULL);
      counters_->::ru::mail::go::social::Counters::Clear();
    }
  }
  ts_ = GOOGLE_ULONGLONG(0);
  if (cached_has_bits & 16128u) {
    ::memset(&last_event_attempt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dest_) -
        reinterpret_cast<char*>(&last_event_attempt_)) + sizeof(dest_));
    origin_ = 1;
    fastbase_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.PutRequest.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.Post post = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.Profile profile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.ImgAttaches attaches = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attaches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string profile_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->profile_url().data(), static_cast<int>(this->profile_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.PutRequest.profile_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.PutRequest.Origin origin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::PutRequest_Origin_IsValid(value)) {
            set_origin(static_cast< ::ru::mail::go::social::PutRequest_Origin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.Status status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.PutRequest.Fastbase fastbase = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::PutRequest_Fastbase_IsValid(value)) {
            set_fastbase(static_cast< ::ru::mail::go::social::PutRequest_Fastbase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.Counters counters = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_event_attempt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_last_event_attempt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_event_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool noFetch = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_nofetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nofetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool noIndex = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_noindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.PutRequest.Destination dest = 14 [default = SOCIAL];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::PutRequest_Destination_IsValid(value)) {
            set_dest(static_cast< ::ru::mail::go::social::PutRequest_Destination >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.PutRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required uint64 ts = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ts(), output);
  }

  // optional .ru.mail.go.social.Post post = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->post_, output);
  }

  // optional .ru.mail.go.social.Profile profile = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->profile_, output);
  }

  // optional .ru.mail.go.social.ImgAttaches attaches = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->attaches_, output);
  }

  // optional string profile_url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_url().data(), static_cast<int>(this->profile_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.PutRequest.profile_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->profile_url(), output);
  }

  // optional .ru.mail.go.social.PutRequest.Origin origin = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->origin(), output);
  }

  // optional .ru.mail.go.social.Status status = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->status_, output);
  }

  // optional .ru.mail.go.social.PutRequest.Fastbase fastbase = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->fastbase(), output);
  }

  // optional .ru.mail.go.social.Counters counters = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->counters_, output);
  }

  // optional int64 last_event_attempt = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_event_attempt(), output);
  }

  // optional bool noFetch = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->nofetch(), output);
  }

  // optional bool noIndex = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->noindex(), output);
  }

  // optional .ru.mail.go.social.PutRequest.Destination dest = 14 [default = SOCIAL];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->dest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.PutRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required uint64 ts = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ts(), target);
  }

  // optional .ru.mail.go.social.Post post = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->post_, deterministic, target);
  }

  // optional .ru.mail.go.social.Profile profile = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->profile_, deterministic, target);
  }

  // optional .ru.mail.go.social.ImgAttaches attaches = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->attaches_, deterministic, target);
  }

  // optional string profile_url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profile_url().data(), static_cast<int>(this->profile_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.PutRequest.profile_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->profile_url(), target);
  }

  // optional .ru.mail.go.social.PutRequest.Origin origin = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->origin(), target);
  }

  // optional .ru.mail.go.social.Status status = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->status_, deterministic, target);
  }

  // optional .ru.mail.go.social.PutRequest.Fastbase fastbase = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->fastbase(), target);
  }

  // optional .ru.mail.go.social.Counters counters = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->counters_, deterministic, target);
  }

  // optional int64 last_event_attempt = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_event_attempt(), target);
  }

  // optional bool noFetch = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->nofetch(), target);
  }

  // optional bool noIndex = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->noindex(), target);
  }

  // optional .ru.mail.go.social.PutRequest.Destination dest = 14 [default = SOCIAL];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->dest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.PutRequest)
  return target;
}

size_t PutRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.PutRequest)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_ts()) {
    // required uint64 ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());
  }

  return total_size;
}
size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.PutRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000081) ^ 0x00000081) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required uint64 ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional string profile_url = 6;
    if (has_profile_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile_url());
    }

    // optional .ru.mail.go.social.Post post = 3;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->post_);
    }

    // optional .ru.mail.go.social.Profile profile = 4;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->profile_);
    }

    // optional .ru.mail.go.social.ImgAttaches attaches = 5;
    if (has_attaches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attaches_);
    }

    // optional .ru.mail.go.social.Status status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional .ru.mail.go.social.Counters counters = 10;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->counters_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int64 last_event_attempt = 11;
    if (has_last_event_attempt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_event_attempt());
    }

    // optional bool noFetch = 12;
    if (has_nofetch()) {
      total_size += 1 + 1;
    }

    // optional bool noIndex = 13;
    if (has_noindex()) {
      total_size += 1 + 1;
    }

    // optional .ru.mail.go.social.PutRequest.Destination dest = 14 [default = SOCIAL];
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional .ru.mail.go.social.PutRequest.Origin origin = 7;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin());
    }

    // optional .ru.mail.go.social.PutRequest.Fastbase fastbase = 9;
    if (has_fastbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fastbase());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_profile_url();
      profile_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_post()->::ru::mail::go::social::Post::MergeFrom(from.post());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_profile()->::ru::mail::go::social::Profile::MergeFrom(from.profile());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_attaches()->::ru::mail::go::social::ImgAttaches::MergeFrom(from.attaches());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_status()->::ru::mail::go::social::Status::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_counters()->::ru::mail::go::social::Counters::MergeFrom(from.counters());
    }
    if (cached_has_bits & 0x00000080u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      last_event_attempt_ = from.last_event_attempt_;
    }
    if (cached_has_bits & 0x00000200u) {
      nofetch_ = from.nofetch_;
    }
    if (cached_has_bits & 0x00000400u) {
      noindex_ = from.noindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      dest_ = from.dest_;
    }
    if (cached_has_bits & 0x00001000u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00002000u) {
      fastbase_ = from.fastbase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000081) != 0x00000081) return false;
  if (has_post()) {
    if (!this->post_->IsInitialized()) return false;
  }
  if (has_profile()) {
    if (!this->profile_->IsInitialized()) return false;
  }
  if (has_attaches()) {
    if (!this->attaches_->IsInitialized()) return false;
  }
  if (has_status()) {
    if (!this->status_->IsInitialized()) return false;
  }
  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  profile_url_.Swap(&other->profile_url_);
  swap(post_, other->post_);
  swap(profile_, other->profile_);
  swap(attaches_, other->attaches_);
  swap(status_, other->status_);
  swap(counters_, other->counters_);
  swap(ts_, other->ts_);
  swap(last_event_attempt_, other->last_event_attempt_);
  swap(nofetch_, other->nofetch_);
  swap(noindex_, other->noindex_);
  swap(dest_, other->dest_);
  swap(origin_, other->origin_);
  swap(fastbase_, other->fastbase_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutRequest

// required string key = 1;
bool PutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.key)
  return key_.GetNoArena();
}
void PutRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.key)
}
#if LANG_CXX11
void PutRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.PutRequest.key)
}
#endif
void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.PutRequest.key)
}
void PutRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.PutRequest.key)
}
::std::string* PutRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.key)
}

// required uint64 ts = 2;
bool PutRequest::has_ts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PutRequest::set_has_ts() {
  _has_bits_[0] |= 0x00000080u;
}
void PutRequest::clear_has_ts() {
  _has_bits_[0] &= ~0x00000080u;
}
void PutRequest::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
::google::protobuf::uint64 PutRequest::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.ts)
  return ts_;
}
void PutRequest::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.ts)
}

// optional .ru.mail.go.social.Post post = 3;
bool PutRequest::has_post() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PutRequest::set_has_post() {
  _has_bits_[0] |= 0x00000004u;
}
void PutRequest::clear_has_post() {
  _has_bits_[0] &= ~0x00000004u;
}
void PutRequest::clear_post() {
  if (post_ != NULL) post_->::ru::mail::go::social::Post::Clear();
  clear_has_post();
}
const ::ru::mail::go::social::Post& PutRequest::post() const {
  const ::ru::mail::go::social::Post* p = post_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.post)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::Post*>(
      &::ru::mail::go::social::_Post_default_instance_);
}
::ru::mail::go::social::Post* PutRequest::mutable_post() {
  set_has_post();
  if (post_ == NULL) {
    post_ = new ::ru::mail::go::social::Post;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.post)
  return post_;
}
::ru::mail::go::social::Post* PutRequest::release_post() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.post)
  clear_has_post();
  ::ru::mail::go::social::Post* temp = post_;
  post_ = NULL;
  return temp;
}
void PutRequest::set_allocated_post(::ru::mail::go::social::Post* post) {
  delete post_;
  post_ = post;
  if (post) {
    set_has_post();
  } else {
    clear_has_post();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.post)
}

// optional .ru.mail.go.social.Profile profile = 4;
bool PutRequest::has_profile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PutRequest::set_has_profile() {
  _has_bits_[0] |= 0x00000008u;
}
void PutRequest::clear_has_profile() {
  _has_bits_[0] &= ~0x00000008u;
}
void PutRequest::clear_profile() {
  if (profile_ != NULL) profile_->::ru::mail::go::social::Profile::Clear();
  clear_has_profile();
}
const ::ru::mail::go::social::Profile& PutRequest::profile() const {
  const ::ru::mail::go::social::Profile* p = profile_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.profile)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::Profile*>(
      &::ru::mail::go::social::_Profile_default_instance_);
}
::ru::mail::go::social::Profile* PutRequest::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) {
    profile_ = new ::ru::mail::go::social::Profile;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.profile)
  return profile_;
}
::ru::mail::go::social::Profile* PutRequest::release_profile() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.profile)
  clear_has_profile();
  ::ru::mail::go::social::Profile* temp = profile_;
  profile_ = NULL;
  return temp;
}
void PutRequest::set_allocated_profile(::ru::mail::go::social::Profile* profile) {
  delete profile_;
  profile_ = profile;
  if (profile) {
    set_has_profile();
  } else {
    clear_has_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.profile)
}

// optional .ru.mail.go.social.ImgAttaches attaches = 5;
bool PutRequest::has_attaches() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PutRequest::set_has_attaches() {
  _has_bits_[0] |= 0x00000010u;
}
void PutRequest::clear_has_attaches() {
  _has_bits_[0] &= ~0x00000010u;
}
void PutRequest::clear_attaches() {
  if (attaches_ != NULL) attaches_->::ru::mail::go::social::ImgAttaches::Clear();
  clear_has_attaches();
}
const ::ru::mail::go::social::ImgAttaches& PutRequest::attaches() const {
  const ::ru::mail::go::social::ImgAttaches* p = attaches_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.attaches)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::ImgAttaches*>(
      &::ru::mail::go::social::_ImgAttaches_default_instance_);
}
::ru::mail::go::social::ImgAttaches* PutRequest::mutable_attaches() {
  set_has_attaches();
  if (attaches_ == NULL) {
    attaches_ = new ::ru::mail::go::social::ImgAttaches;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.attaches)
  return attaches_;
}
::ru::mail::go::social::ImgAttaches* PutRequest::release_attaches() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.attaches)
  clear_has_attaches();
  ::ru::mail::go::social::ImgAttaches* temp = attaches_;
  attaches_ = NULL;
  return temp;
}
void PutRequest::set_allocated_attaches(::ru::mail::go::social::ImgAttaches* attaches) {
  delete attaches_;
  attaches_ = attaches;
  if (attaches) {
    set_has_attaches();
  } else {
    clear_has_attaches();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.attaches)
}

// optional string profile_url = 6;
bool PutRequest::has_profile_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PutRequest::set_has_profile_url() {
  _has_bits_[0] |= 0x00000002u;
}
void PutRequest::clear_has_profile_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void PutRequest::clear_profile_url() {
  profile_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_profile_url();
}
const ::std::string& PutRequest::profile_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.profile_url)
  return profile_url_.GetNoArena();
}
void PutRequest::set_profile_url(const ::std::string& value) {
  set_has_profile_url();
  profile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.profile_url)
}
#if LANG_CXX11
void PutRequest::set_profile_url(::std::string&& value) {
  set_has_profile_url();
  profile_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.PutRequest.profile_url)
}
#endif
void PutRequest::set_profile_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_profile_url();
  profile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.PutRequest.profile_url)
}
void PutRequest::set_profile_url(const char* value, size_t size) {
  set_has_profile_url();
  profile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.PutRequest.profile_url)
}
::std::string* PutRequest::mutable_profile_url() {
  set_has_profile_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.profile_url)
  return profile_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_profile_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.profile_url)
  clear_has_profile_url();
  return profile_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_profile_url(::std::string* profile_url) {
  if (profile_url != NULL) {
    set_has_profile_url();
  } else {
    clear_has_profile_url();
  }
  profile_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.profile_url)
}

// optional .ru.mail.go.social.PutRequest.Origin origin = 7;
bool PutRequest::has_origin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PutRequest::set_has_origin() {
  _has_bits_[0] |= 0x00001000u;
}
void PutRequest::clear_has_origin() {
  _has_bits_[0] &= ~0x00001000u;
}
void PutRequest::clear_origin() {
  origin_ = 1;
  clear_has_origin();
}
::ru::mail::go::social::PutRequest_Origin PutRequest::origin() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.origin)
  return static_cast< ::ru::mail::go::social::PutRequest_Origin >(origin_);
}
void PutRequest::set_origin(::ru::mail::go::social::PutRequest_Origin value) {
  assert(::ru::mail::go::social::PutRequest_Origin_IsValid(value));
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.origin)
}

// optional .ru.mail.go.social.Status status = 8;
bool PutRequest::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PutRequest::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void PutRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void PutRequest::clear_status() {
  if (status_ != NULL) status_->::ru::mail::go::social::Status::Clear();
  clear_has_status();
}
const ::ru::mail::go::social::Status& PutRequest::status() const {
  const ::ru::mail::go::social::Status* p = status_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.status)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::Status*>(
      &::ru::mail::go::social::_Status_default_instance_);
}
::ru::mail::go::social::Status* PutRequest::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::ru::mail::go::social::Status;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.status)
  return status_;
}
::ru::mail::go::social::Status* PutRequest::release_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.status)
  clear_has_status();
  ::ru::mail::go::social::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void PutRequest::set_allocated_status(::ru::mail::go::social::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.status)
}

// optional .ru.mail.go.social.PutRequest.Fastbase fastbase = 9;
bool PutRequest::has_fastbase() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PutRequest::set_has_fastbase() {
  _has_bits_[0] |= 0x00002000u;
}
void PutRequest::clear_has_fastbase() {
  _has_bits_[0] &= ~0x00002000u;
}
void PutRequest::clear_fastbase() {
  fastbase_ = 1;
  clear_has_fastbase();
}
::ru::mail::go::social::PutRequest_Fastbase PutRequest::fastbase() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.fastbase)
  return static_cast< ::ru::mail::go::social::PutRequest_Fastbase >(fastbase_);
}
void PutRequest::set_fastbase(::ru::mail::go::social::PutRequest_Fastbase value) {
  assert(::ru::mail::go::social::PutRequest_Fastbase_IsValid(value));
  set_has_fastbase();
  fastbase_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.fastbase)
}

// optional .ru.mail.go.social.Counters counters = 10;
bool PutRequest::has_counters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PutRequest::set_has_counters() {
  _has_bits_[0] |= 0x00000040u;
}
void PutRequest::clear_has_counters() {
  _has_bits_[0] &= ~0x00000040u;
}
void PutRequest::clear_counters() {
  if (counters_ != NULL) counters_->::ru::mail::go::social::Counters::Clear();
  clear_has_counters();
}
const ::ru::mail::go::social::Counters& PutRequest::counters() const {
  const ::ru::mail::go::social::Counters* p = counters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.counters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::Counters*>(
      &::ru::mail::go::social::_Counters_default_instance_);
}
::ru::mail::go::social::Counters* PutRequest::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::ru::mail::go::social::Counters;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.counters)
  return counters_;
}
::ru::mail::go::social::Counters* PutRequest::release_counters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.counters)
  clear_has_counters();
  ::ru::mail::go::social::Counters* temp = counters_;
  counters_ = NULL;
  return temp;
}
void PutRequest::set_allocated_counters(::ru::mail::go::social::Counters* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.counters)
}

// optional int64 last_event_attempt = 11;
bool PutRequest::has_last_event_attempt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PutRequest::set_has_last_event_attempt() {
  _has_bits_[0] |= 0x00000100u;
}
void PutRequest::clear_has_last_event_attempt() {
  _has_bits_[0] &= ~0x00000100u;
}
void PutRequest::clear_last_event_attempt() {
  last_event_attempt_ = GOOGLE_LONGLONG(0);
  clear_has_last_event_attempt();
}
::google::protobuf::int64 PutRequest::last_event_attempt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.last_event_attempt)
  return last_event_attempt_;
}
void PutRequest::set_last_event_attempt(::google::protobuf::int64 value) {
  set_has_last_event_attempt();
  last_event_attempt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.last_event_attempt)
}

// optional bool noFetch = 12;
bool PutRequest::has_nofetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PutRequest::set_has_nofetch() {
  _has_bits_[0] |= 0x00000200u;
}
void PutRequest::clear_has_nofetch() {
  _has_bits_[0] &= ~0x00000200u;
}
void PutRequest::clear_nofetch() {
  nofetch_ = false;
  clear_has_nofetch();
}
bool PutRequest::nofetch() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.noFetch)
  return nofetch_;
}
void PutRequest::set_nofetch(bool value) {
  set_has_nofetch();
  nofetch_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.noFetch)
}

// optional bool noIndex = 13;
bool PutRequest::has_noindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PutRequest::set_has_noindex() {
  _has_bits_[0] |= 0x00000400u;
}
void PutRequest::clear_has_noindex() {
  _has_bits_[0] &= ~0x00000400u;
}
void PutRequest::clear_noindex() {
  noindex_ = false;
  clear_has_noindex();
}
bool PutRequest::noindex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.noIndex)
  return noindex_;
}
void PutRequest::set_noindex(bool value) {
  set_has_noindex();
  noindex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.noIndex)
}

// optional .ru.mail.go.social.PutRequest.Destination dest = 14 [default = SOCIAL];
bool PutRequest::has_dest() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PutRequest::set_has_dest() {
  _has_bits_[0] |= 0x00000800u;
}
void PutRequest::clear_has_dest() {
  _has_bits_[0] &= ~0x00000800u;
}
void PutRequest::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
::ru::mail::go::social::PutRequest_Destination PutRequest::dest() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.dest)
  return static_cast< ::ru::mail::go::social::PutRequest_Destination >(dest_);
}
void PutRequest::set_dest(::ru::mail::go::social::PutRequest_Destination value) {
  assert(::ru::mail::go::social::PutRequest_Destination_IsValid(value));
  set_has_dest();
  dest_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.dest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResolveRequest::kRequestFieldNumber;
const int LoginResolveRequest::kPutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResolveRequest::LoginResolveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.LoginResolveRequest)
}
LoginResolveRequest::LoginResolveRequest(const LoginResolveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      request_(from.request_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_put()) {
    put_ = new ::ru::mail::go::social::PutRequest(*from.put_);
  } else {
    put_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.LoginResolveRequest)
}

void LoginResolveRequest::SharedCtor() {
  _cached_size_ = 0;
  put_ = NULL;
}

LoginResolveRequest::~LoginResolveRequest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.LoginResolveRequest)
  SharedDtor();
}

void LoginResolveRequest::SharedDtor() {
  if (this != internal_default_instance()) delete put_;
}

void LoginResolveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResolveRequest::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginResolveRequest& LoginResolveRequest::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginResolveRequest* LoginResolveRequest::New(::google::protobuf::Arena* arena) const {
  LoginResolveRequest* n = new LoginResolveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResolveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.LoginResolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.Clear();
  if (has_put()) {
    GOOGLE_DCHECK(put_ != NULL);
    put_->::ru::mail::go::social::PutRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginResolveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.LoginResolveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.social.LoginResolveRequest.request_t request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::LoginResolveRequest_request_t_IsValid(value)) {
            add_request(static_cast< ::ru::mail::go::social::LoginResolveRequest_request_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::ru::mail::go::social::LoginResolveRequest_request_t_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_request())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.social.PutRequest put = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.LoginResolveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.LoginResolveRequest)
  return false;
#undef DO_
}

void LoginResolveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.LoginResolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.social.LoginResolveRequest.request_t request = 1;
  for (int i = 0, n = this->request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.social.PutRequest put = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->put_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.LoginResolveRequest)
}

::google::protobuf::uint8* LoginResolveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.LoginResolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.social.LoginResolveRequest.request_t request = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->request_, target);

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.social.PutRequest put = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->put_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.LoginResolveRequest)
  return target;
}

size_t LoginResolveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.LoginResolveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.social.PutRequest put = 2;
  if (has_put()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->put_);
  }
  // repeated .ru.mail.go.social.LoginResolveRequest.request_t request = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->request_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->request(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResolveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.LoginResolveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResolveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResolveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.LoginResolveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.LoginResolveRequest)
    MergeFrom(*source);
  }
}

void LoginResolveRequest::MergeFrom(const LoginResolveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.LoginResolveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_.MergeFrom(from.request_);
  if (from.has_put()) {
    mutable_put()->::ru::mail::go::social::PutRequest::MergeFrom(from.put());
  }
}

void LoginResolveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.LoginResolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResolveRequest::CopyFrom(const LoginResolveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.LoginResolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResolveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_put()) {
    if (!this->put_->IsInitialized()) return false;
  }
  return true;
}

void LoginResolveRequest::Swap(LoginResolveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResolveRequest::InternalSwap(LoginResolveRequest* other) {
  using std::swap;
  request_.InternalSwap(&other->request_);
  swap(put_, other->put_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResolveRequest::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResolveRequest

// repeated .ru.mail.go.social.LoginResolveRequest.request_t request = 1;
int LoginResolveRequest::request_size() const {
  return request_.size();
}
void LoginResolveRequest::clear_request() {
  request_.Clear();
}
::ru::mail::go::social::LoginResolveRequest_request_t LoginResolveRequest::request(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.LoginResolveRequest.request)
  return static_cast< ::ru::mail::go::social::LoginResolveRequest_request_t >(request_.Get(index));
}
void LoginResolveRequest::set_request(int index, ::ru::mail::go::social::LoginResolveRequest_request_t value) {
  assert(::ru::mail::go::social::LoginResolveRequest_request_t_IsValid(value));
  request_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.LoginResolveRequest.request)
}
void LoginResolveRequest::add_request(::ru::mail::go::social::LoginResolveRequest_request_t value) {
  assert(::ru::mail::go::social::LoginResolveRequest_request_t_IsValid(value));
  request_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.LoginResolveRequest.request)
}
const ::google::protobuf::RepeatedField<int>&
LoginResolveRequest::request() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.LoginResolveRequest.request)
  return request_;
}
::google::protobuf::RepeatedField<int>*
LoginResolveRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.LoginResolveRequest.request)
  return &request_;
}

// required .ru.mail.go.social.PutRequest put = 2;
bool LoginResolveRequest::has_put() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginResolveRequest::set_has_put() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginResolveRequest::clear_has_put() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginResolveRequest::clear_put() {
  if (put_ != NULL) put_->::ru::mail::go::social::PutRequest::Clear();
  clear_has_put();
}
const ::ru::mail::go::social::PutRequest& LoginResolveRequest::put() const {
  const ::ru::mail::go::social::PutRequest* p = put_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.LoginResolveRequest.put)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::PutRequest*>(
      &::ru::mail::go::social::_PutRequest_default_instance_);
}
::ru::mail::go::social::PutRequest* LoginResolveRequest::mutable_put() {
  set_has_put();
  if (put_ == NULL) {
    put_ = new ::ru::mail::go::social::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.LoginResolveRequest.put)
  return put_;
}
::ru::mail::go::social::PutRequest* LoginResolveRequest::release_put() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.LoginResolveRequest.put)
  clear_has_put();
  ::ru::mail::go::social::PutRequest* temp = put_;
  put_ = NULL;
  return temp;
}
void LoginResolveRequest::set_allocated_put(::ru::mail::go::social::PutRequest* put) {
  delete put_;
  put_ = put;
  if (put) {
    set_has_put();
  } else {
    clear_has_put();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.LoginResolveRequest.put)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kAliveFieldNumber;
const int Status::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alive_, &from.alive_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&alive_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.Status)
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  alive_ = false;
  type_ = 1;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    alive_ = false;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool alive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_alive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.social.Status.CheckType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::social::Status_CheckType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::social::Status_CheckType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool alive = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->alive(), output);
  }

  // required .ru.mail.go.social.Status.CheckType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool alive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->alive(), target);
  }

  // required .ru.mail.go.social.Status.CheckType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.Status)
  return target;
}

size_t Status::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.Status)
  size_t total_size = 0;

  if (has_alive()) {
    // required bool alive = 1;
    total_size += 1 + 1;
  }

  if (has_type()) {
    // required .ru.mail.go.social.Status.CheckType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool alive = 1;
    total_size += 1 + 1;

    // required .ru.mail.go.social.Status.CheckType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      alive_ = from.alive_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  swap(alive_, other->alive_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// required bool alive = 1;
bool Status::has_alive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Status::set_has_alive() {
  _has_bits_[0] |= 0x00000001u;
}
void Status::clear_has_alive() {
  _has_bits_[0] &= ~0x00000001u;
}
void Status::clear_alive() {
  alive_ = false;
  clear_has_alive();
}
bool Status::alive() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Status.alive)
  return alive_;
}
void Status::set_alive(bool value) {
  set_has_alive();
  alive_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Status.alive)
}

// required .ru.mail.go.social.Status.CheckType type = 2;
bool Status::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Status::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Status::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Status::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::social::Status_CheckType Status::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Status.type)
  return static_cast< ::ru::mail::go::social::Status_CheckType >(type_);
}
void Status::set_type(::ru::mail::go::social::Status_CheckType value) {
  assert(::ru::mail::go::social::Status_CheckType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Status.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlList::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlList::UrlList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.UrlList)
}
UrlList::UrlList(const UrlList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.UrlList)
}

void UrlList::SharedCtor() {
  _cached_size_ = 0;
}

UrlList::~UrlList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.UrlList)
  SharedDtor();
}

void UrlList::SharedDtor() {
}

void UrlList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlList::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlList& UrlList::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlList* UrlList::New(::google::protobuf::Arena* arena) const {
  UrlList* n = new UrlList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.UrlList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.UrlList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.UrlList.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.UrlList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.UrlList)
  return false;
#undef DO_
}

void UrlList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.UrlList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.UrlList.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.UrlList)
}

::google::protobuf::uint8* UrlList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.UrlList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.UrlList.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->urls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.UrlList)
  return target;
}

size_t UrlList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.UrlList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string urls = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.UrlList)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.UrlList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.UrlList)
    MergeFrom(*source);
  }
}

void UrlList::MergeFrom(const UrlList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.UrlList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
}

void UrlList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.UrlList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlList::CopyFrom(const UrlList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.UrlList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlList::IsInitialized() const {
  return true;
}

void UrlList::Swap(UrlList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlList::InternalSwap(UrlList* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlList::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlList

// repeated string urls = 1;
int UrlList::urls_size() const {
  return urls_.size();
}
void UrlList::clear_urls() {
  urls_.Clear();
}
const ::std::string& UrlList::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.UrlList.urls)
  return urls_.Get(index);
}
::std::string* UrlList::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.UrlList.urls)
  return urls_.Mutable(index);
}
void UrlList::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.UrlList.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UrlList::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.UrlList.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void UrlList::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.UrlList.urls)
}
void UrlList::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.UrlList.urls)
}
::std::string* UrlList::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.UrlList.urls)
  return urls_.Add();
}
void UrlList::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.UrlList.urls)
}
#if LANG_CXX11
void UrlList::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.UrlList.urls)
}
#endif
void UrlList::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.UrlList.urls)
}
void UrlList::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.UrlList.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlList::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.UrlList.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UrlList::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.UrlList.urls)
  return &urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GatewayRecord::kSocialIdFieldNumber;
const int GatewayRecord::kUrlFieldNumber;
const int GatewayRecord::kTargetIdFieldNumber;
const int GatewayRecord::kValue64FieldNumber;
const int GatewayRecord::kValue32FieldNumber;
const int GatewayRecord::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GatewayRecord::GatewayRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.GatewayRecord)
}
GatewayRecord::GatewayRecord(const GatewayRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  socialid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_socialid()) {
    socialid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socialid_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&value64_, &from.value64_,
    static_cast<size_t>(reinterpret_cast<char*>(&value32_) -
    reinterpret_cast<char*>(&value64_)) + sizeof(value32_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.GatewayRecord)
}

void GatewayRecord::SharedCtor() {
  _cached_size_ = 0;
  socialid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value32_) -
      reinterpret_cast<char*>(&value64_)) + sizeof(value32_));
}

GatewayRecord::~GatewayRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.GatewayRecord)
  SharedDtor();
}

void GatewayRecord::SharedDtor() {
  socialid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GatewayRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatewayRecord::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GatewayRecord& GatewayRecord::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

GatewayRecord* GatewayRecord::New(::google::protobuf::Arena* arena) const {
  GatewayRecord* n = new GatewayRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GatewayRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.GatewayRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!socialid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*socialid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&value64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value32_) -
        reinterpret_cast<char*>(&value64_)) + sizeof(value32_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GatewayRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.GatewayRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string socialId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socialid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->socialid().data(), static_cast<int>(this->socialid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.GatewayRecord.socialId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.GatewayRecord.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 targetId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_targetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value64 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_value64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value32 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_value32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.GatewayRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.GatewayRecord)
  return false;
#undef DO_
}

void GatewayRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.GatewayRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string socialId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socialid().data(), static_cast<int>(this->socialid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.GatewayRecord.socialId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->socialid(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.GatewayRecord.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional int32 targetId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetid(), output);
  }

  // optional int64 value64 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->value64(), output);
  }

  // optional int32 value32 = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value32(), output);
  }

  // optional bytes value = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.GatewayRecord)
}

::google::protobuf::uint8* GatewayRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.GatewayRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string socialId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socialid().data(), static_cast<int>(this->socialid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.GatewayRecord.socialId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->socialid(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.GatewayRecord.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional int32 targetId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetid(), target);
  }

  // optional int64 value64 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->value64(), target);
  }

  // optional int32 value32 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value32(), target);
  }

  // optional bytes value = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.GatewayRecord)
  return target;
}

size_t GatewayRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.GatewayRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string socialId = 1;
    if (has_socialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socialid());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bytes value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional int64 value64 = 4;
    if (has_value64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value64());
    }

    // optional int32 targetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 value32 = 5;
    if (has_value32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value32());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatewayRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.GatewayRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GatewayRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GatewayRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.GatewayRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.GatewayRecord)
    MergeFrom(*source);
  }
}

void GatewayRecord::MergeFrom(const GatewayRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.GatewayRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_socialid();
      socialid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socialid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000008u) {
      value64_ = from.value64_;
    }
    if (cached_has_bits & 0x00000010u) {
      targetid_ = from.targetid_;
    }
    if (cached_has_bits & 0x00000020u) {
      value32_ = from.value32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GatewayRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.GatewayRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayRecord::CopyFrom(const GatewayRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.GatewayRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayRecord::IsInitialized() const {
  return true;
}

void GatewayRecord::Swap(GatewayRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GatewayRecord::InternalSwap(GatewayRecord* other) {
  using std::swap;
  socialid_.Swap(&other->socialid_);
  url_.Swap(&other->url_);
  value_.Swap(&other->value_);
  swap(value64_, other->value64_);
  swap(targetid_, other->targetid_);
  swap(value32_, other->value32_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GatewayRecord::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GatewayRecord

// optional string socialId = 1;
bool GatewayRecord::has_socialid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GatewayRecord::set_has_socialid() {
  _has_bits_[0] |= 0x00000001u;
}
void GatewayRecord::clear_has_socialid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GatewayRecord::clear_socialid() {
  socialid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_socialid();
}
const ::std::string& GatewayRecord::socialid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.socialId)
  return socialid_.GetNoArena();
}
void GatewayRecord::set_socialid(const ::std::string& value) {
  set_has_socialid();
  socialid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.socialId)
}
#if LANG_CXX11
void GatewayRecord::set_socialid(::std::string&& value) {
  set_has_socialid();
  socialid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.GatewayRecord.socialId)
}
#endif
void GatewayRecord::set_socialid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_socialid();
  socialid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.GatewayRecord.socialId)
}
void GatewayRecord::set_socialid(const char* value, size_t size) {
  set_has_socialid();
  socialid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.GatewayRecord.socialId)
}
::std::string* GatewayRecord::mutable_socialid() {
  set_has_socialid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GatewayRecord.socialId)
  return socialid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GatewayRecord::release_socialid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.GatewayRecord.socialId)
  clear_has_socialid();
  return socialid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GatewayRecord::set_allocated_socialid(::std::string* socialid) {
  if (socialid != NULL) {
    set_has_socialid();
  } else {
    clear_has_socialid();
  }
  socialid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socialid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.GatewayRecord.socialId)
}

// optional string url = 2;
bool GatewayRecord::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GatewayRecord::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void GatewayRecord::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void GatewayRecord::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& GatewayRecord::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.url)
  return url_.GetNoArena();
}
void GatewayRecord::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.url)
}
#if LANG_CXX11
void GatewayRecord::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.GatewayRecord.url)
}
#endif
void GatewayRecord::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.GatewayRecord.url)
}
void GatewayRecord::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.GatewayRecord.url)
}
::std::string* GatewayRecord::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GatewayRecord.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GatewayRecord::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.GatewayRecord.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GatewayRecord::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.GatewayRecord.url)
}

// optional int32 targetId = 3;
bool GatewayRecord::has_targetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GatewayRecord::set_has_targetid() {
  _has_bits_[0] |= 0x00000010u;
}
void GatewayRecord::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000010u;
}
void GatewayRecord::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
::google::protobuf::int32 GatewayRecord::targetid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.targetId)
  return targetid_;
}
void GatewayRecord::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.targetId)
}

// optional int64 value64 = 4;
bool GatewayRecord::has_value64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GatewayRecord::set_has_value64() {
  _has_bits_[0] |= 0x00000008u;
}
void GatewayRecord::clear_has_value64() {
  _has_bits_[0] &= ~0x00000008u;
}
void GatewayRecord::clear_value64() {
  value64_ = GOOGLE_LONGLONG(0);
  clear_has_value64();
}
::google::protobuf::int64 GatewayRecord::value64() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.value64)
  return value64_;
}
void GatewayRecord::set_value64(::google::protobuf::int64 value) {
  set_has_value64();
  value64_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.value64)
}

// optional int32 value32 = 5;
bool GatewayRecord::has_value32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GatewayRecord::set_has_value32() {
  _has_bits_[0] |= 0x00000020u;
}
void GatewayRecord::clear_has_value32() {
  _has_bits_[0] &= ~0x00000020u;
}
void GatewayRecord::clear_value32() {
  value32_ = 0;
  clear_has_value32();
}
::google::protobuf::int32 GatewayRecord::value32() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.value32)
  return value32_;
}
void GatewayRecord::set_value32(::google::protobuf::int32 value) {
  set_has_value32();
  value32_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.value32)
}

// optional bytes value = 6;
bool GatewayRecord::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GatewayRecord::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void GatewayRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void GatewayRecord::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& GatewayRecord::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.value)
  return value_.GetNoArena();
}
void GatewayRecord::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.value)
}
#if LANG_CXX11
void GatewayRecord::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.GatewayRecord.value)
}
#endif
void GatewayRecord::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.GatewayRecord.value)
}
void GatewayRecord::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.GatewayRecord.value)
}
::std::string* GatewayRecord::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GatewayRecord.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GatewayRecord::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.GatewayRecord.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GatewayRecord::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.GatewayRecord.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileExplorerResponse_Body::kVkFriendsIdsFieldNumber;
const int ProfileExplorerResponse_Body::kVkSubGroupsIdsFieldNumber;
const int ProfileExplorerResponse_Body::kVkSubUsersIdsFieldNumber;
const int ProfileExplorerResponse_Body::kOkFriendsIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileExplorerResponse_Body::ProfileExplorerResponse_Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.ProfileExplorerResponse.Body)
}
ProfileExplorerResponse_Body::ProfileExplorerResponse_Body(const ProfileExplorerResponse_Body& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vkfriendsids_(from.vkfriendsids_),
      vksubgroupsids_(from.vksubgroupsids_),
      vksubusersids_(from.vksubusersids_),
      okfriendsids_(from.okfriendsids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.ProfileExplorerResponse.Body)
}

void ProfileExplorerResponse_Body::SharedCtor() {
  _cached_size_ = 0;
}

ProfileExplorerResponse_Body::~ProfileExplorerResponse_Body() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.ProfileExplorerResponse.Body)
  SharedDtor();
}

void ProfileExplorerResponse_Body::SharedDtor() {
}

void ProfileExplorerResponse_Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileExplorerResponse_Body::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileExplorerResponse_Body& ProfileExplorerResponse_Body::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileExplorerResponse_Body* ProfileExplorerResponse_Body::New(::google::protobuf::Arena* arena) const {
  ProfileExplorerResponse_Body* n = new ProfileExplorerResponse_Body;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileExplorerResponse_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vkfriendsids_.Clear();
  vksubgroupsids_.Clear();
  vksubusersids_.Clear();
  okfriendsids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfileExplorerResponse_Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string vkFriendsIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vkfriendsids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vkfriendsids(this->vkfriendsids_size() - 1).data(),
            static_cast<int>(this->vkfriendsids(this->vkfriendsids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string vkSubGroupsIds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vksubgroupsids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vksubgroupsids(this->vksubgroupsids_size() - 1).data(),
            static_cast<int>(this->vksubgroupsids(this->vksubgroupsids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string vkSubUsersIds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vksubusersids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vksubusersids(this->vksubusersids_size() - 1).data(),
            static_cast<int>(this->vksubusersids(this->vksubusersids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string okFriendsIds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_okfriendsids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->okfriendsids(this->okfriendsids_size() - 1).data(),
            static_cast<int>(this->okfriendsids(this->okfriendsids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.ProfileExplorerResponse.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.ProfileExplorerResponse.Body)
  return false;
#undef DO_
}

void ProfileExplorerResponse_Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string vkFriendsIds = 1;
  for (int i = 0, n = this->vkfriendsids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vkfriendsids(i).data(), static_cast<int>(this->vkfriendsids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->vkfriendsids(i), output);
  }

  // repeated string vkSubGroupsIds = 2;
  for (int i = 0, n = this->vksubgroupsids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vksubgroupsids(i).data(), static_cast<int>(this->vksubgroupsids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->vksubgroupsids(i), output);
  }

  // repeated string vkSubUsersIds = 3;
  for (int i = 0, n = this->vksubusersids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vksubusersids(i).data(), static_cast<int>(this->vksubusersids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vksubusersids(i), output);
  }

  // repeated string okFriendsIds = 4;
  for (int i = 0, n = this->okfriendsids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->okfriendsids(i).data(), static_cast<int>(this->okfriendsids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->okfriendsids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.ProfileExplorerResponse.Body)
}

::google::protobuf::uint8* ProfileExplorerResponse_Body::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string vkFriendsIds = 1;
  for (int i = 0, n = this->vkfriendsids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vkfriendsids(i).data(), static_cast<int>(this->vkfriendsids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->vkfriendsids(i), target);
  }

  // repeated string vkSubGroupsIds = 2;
  for (int i = 0, n = this->vksubgroupsids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vksubgroupsids(i).data(), static_cast<int>(this->vksubgroupsids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->vksubgroupsids(i), target);
  }

  // repeated string vkSubUsersIds = 3;
  for (int i = 0, n = this->vksubusersids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vksubusersids(i).data(), static_cast<int>(this->vksubusersids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->vksubusersids(i), target);
  }

  // repeated string okFriendsIds = 4;
  for (int i = 0, n = this->okfriendsids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->okfriendsids(i).data(), static_cast<int>(this->okfriendsids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->okfriendsids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.ProfileExplorerResponse.Body)
  return target;
}

size_t ProfileExplorerResponse_Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string vkFriendsIds = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vkfriendsids_size());
  for (int i = 0, n = this->vkfriendsids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vkfriendsids(i));
  }

  // repeated string vkSubGroupsIds = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vksubgroupsids_size());
  for (int i = 0, n = this->vksubgroupsids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vksubgroupsids(i));
  }

  // repeated string vkSubUsersIds = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vksubusersids_size());
  for (int i = 0, n = this->vksubusersids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vksubusersids(i));
  }

  // repeated string okFriendsIds = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->okfriendsids_size());
  for (int i = 0, n = this->okfriendsids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->okfriendsids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileExplorerResponse_Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileExplorerResponse_Body* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileExplorerResponse_Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.ProfileExplorerResponse.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.ProfileExplorerResponse.Body)
    MergeFrom(*source);
  }
}

void ProfileExplorerResponse_Body::MergeFrom(const ProfileExplorerResponse_Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vkfriendsids_.MergeFrom(from.vkfriendsids_);
  vksubgroupsids_.MergeFrom(from.vksubgroupsids_);
  vksubusersids_.MergeFrom(from.vksubusersids_);
  okfriendsids_.MergeFrom(from.okfriendsids_);
}

void ProfileExplorerResponse_Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileExplorerResponse_Body::CopyFrom(const ProfileExplorerResponse_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.ProfileExplorerResponse.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileExplorerResponse_Body::IsInitialized() const {
  return true;
}

void ProfileExplorerResponse_Body::Swap(ProfileExplorerResponse_Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileExplorerResponse_Body::InternalSwap(ProfileExplorerResponse_Body* other) {
  using std::swap;
  vkfriendsids_.InternalSwap(&other->vkfriendsids_);
  vksubgroupsids_.InternalSwap(&other->vksubgroupsids_);
  vksubusersids_.InternalSwap(&other->vksubusersids_);
  okfriendsids_.InternalSwap(&other->okfriendsids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileExplorerResponse_Body::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileExplorerResponse_Body

// repeated string vkFriendsIds = 1;
int ProfileExplorerResponse_Body::vkfriendsids_size() const {
  return vkfriendsids_.size();
}
void ProfileExplorerResponse_Body::clear_vkfriendsids() {
  vkfriendsids_.Clear();
}
const ::std::string& ProfileExplorerResponse_Body::vkfriendsids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return vkfriendsids_.Get(index);
}
::std::string* ProfileExplorerResponse_Body::mutable_vkfriendsids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return vkfriendsids_.Mutable(index);
}
void ProfileExplorerResponse_Body::set_vkfriendsids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  vkfriendsids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ProfileExplorerResponse_Body::set_vkfriendsids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  vkfriendsids_.Mutable(index)->assign(std::move(value));
}
#endif
void ProfileExplorerResponse_Body::set_vkfriendsids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vkfriendsids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
void ProfileExplorerResponse_Body::set_vkfriendsids(int index, const char* value, size_t size) {
  vkfriendsids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
::std::string* ProfileExplorerResponse_Body::add_vkfriendsids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return vkfriendsids_.Add();
}
void ProfileExplorerResponse_Body::add_vkfriendsids(const ::std::string& value) {
  vkfriendsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
#if LANG_CXX11
void ProfileExplorerResponse_Body::add_vkfriendsids(::std::string&& value) {
  vkfriendsids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
#endif
void ProfileExplorerResponse_Body::add_vkfriendsids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vkfriendsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
void ProfileExplorerResponse_Body::add_vkfriendsids(const char* value, size_t size) {
  vkfriendsids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileExplorerResponse_Body::vkfriendsids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return vkfriendsids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileExplorerResponse_Body::mutable_vkfriendsids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return &vkfriendsids_;
}

// repeated string vkSubGroupsIds = 2;
int ProfileExplorerResponse_Body::vksubgroupsids_size() const {
  return vksubgroupsids_.size();
}
void ProfileExplorerResponse_Body::clear_vksubgroupsids() {
  vksubgroupsids_.Clear();
}
const ::std::string& ProfileExplorerResponse_Body::vksubgroupsids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return vksubgroupsids_.Get(index);
}
::std::string* ProfileExplorerResponse_Body::mutable_vksubgroupsids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return vksubgroupsids_.Mutable(index);
}
void ProfileExplorerResponse_Body::set_vksubgroupsids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  vksubgroupsids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ProfileExplorerResponse_Body::set_vksubgroupsids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  vksubgroupsids_.Mutable(index)->assign(std::move(value));
}
#endif
void ProfileExplorerResponse_Body::set_vksubgroupsids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vksubgroupsids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
void ProfileExplorerResponse_Body::set_vksubgroupsids(int index, const char* value, size_t size) {
  vksubgroupsids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
::std::string* ProfileExplorerResponse_Body::add_vksubgroupsids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return vksubgroupsids_.Add();
}
void ProfileExplorerResponse_Body::add_vksubgroupsids(const ::std::string& value) {
  vksubgroupsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
#if LANG_CXX11
void ProfileExplorerResponse_Body::add_vksubgroupsids(::std::string&& value) {
  vksubgroupsids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
#endif
void ProfileExplorerResponse_Body::add_vksubgroupsids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vksubgroupsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
void ProfileExplorerResponse_Body::add_vksubgroupsids(const char* value, size_t size) {
  vksubgroupsids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileExplorerResponse_Body::vksubgroupsids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return vksubgroupsids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileExplorerResponse_Body::mutable_vksubgroupsids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return &vksubgroupsids_;
}

// repeated string vkSubUsersIds = 3;
int ProfileExplorerResponse_Body::vksubusersids_size() const {
  return vksubusersids_.size();
}
void ProfileExplorerResponse_Body::clear_vksubusersids() {
  vksubusersids_.Clear();
}
const ::std::string& ProfileExplorerResponse_Body::vksubusersids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return vksubusersids_.Get(index);
}
::std::string* ProfileExplorerResponse_Body::mutable_vksubusersids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return vksubusersids_.Mutable(index);
}
void ProfileExplorerResponse_Body::set_vksubusersids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  vksubusersids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ProfileExplorerResponse_Body::set_vksubusersids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  vksubusersids_.Mutable(index)->assign(std::move(value));
}
#endif
void ProfileExplorerResponse_Body::set_vksubusersids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vksubusersids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
void ProfileExplorerResponse_Body::set_vksubusersids(int index, const char* value, size_t size) {
  vksubusersids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
::std::string* ProfileExplorerResponse_Body::add_vksubusersids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return vksubusersids_.Add();
}
void ProfileExplorerResponse_Body::add_vksubusersids(const ::std::string& value) {
  vksubusersids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
#if LANG_CXX11
void ProfileExplorerResponse_Body::add_vksubusersids(::std::string&& value) {
  vksubusersids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
#endif
void ProfileExplorerResponse_Body::add_vksubusersids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vksubusersids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
void ProfileExplorerResponse_Body::add_vksubusersids(const char* value, size_t size) {
  vksubusersids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileExplorerResponse_Body::vksubusersids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return vksubusersids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileExplorerResponse_Body::mutable_vksubusersids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return &vksubusersids_;
}

// repeated string okFriendsIds = 4;
int ProfileExplorerResponse_Body::okfriendsids_size() const {
  return okfriendsids_.size();
}
void ProfileExplorerResponse_Body::clear_okfriendsids() {
  okfriendsids_.Clear();
}
const ::std::string& ProfileExplorerResponse_Body::okfriendsids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return okfriendsids_.Get(index);
}
::std::string* ProfileExplorerResponse_Body::mutable_okfriendsids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return okfriendsids_.Mutable(index);
}
void ProfileExplorerResponse_Body::set_okfriendsids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  okfriendsids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ProfileExplorerResponse_Body::set_okfriendsids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  okfriendsids_.Mutable(index)->assign(std::move(value));
}
#endif
void ProfileExplorerResponse_Body::set_okfriendsids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  okfriendsids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
void ProfileExplorerResponse_Body::set_okfriendsids(int index, const char* value, size_t size) {
  okfriendsids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
::std::string* ProfileExplorerResponse_Body::add_okfriendsids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return okfriendsids_.Add();
}
void ProfileExplorerResponse_Body::add_okfriendsids(const ::std::string& value) {
  okfriendsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
#if LANG_CXX11
void ProfileExplorerResponse_Body::add_okfriendsids(::std::string&& value) {
  okfriendsids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
#endif
void ProfileExplorerResponse_Body::add_okfriendsids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  okfriendsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
void ProfileExplorerResponse_Body::add_okfriendsids(const char* value, size_t size) {
  okfriendsids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileExplorerResponse_Body::okfriendsids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return okfriendsids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileExplorerResponse_Body::mutable_okfriendsids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return &okfriendsids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileExplorerResponse::kBodyFieldNumber;
const int ProfileExplorerResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileExplorerResponse::ProfileExplorerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.ProfileExplorerResponse)
}
ProfileExplorerResponse::ProfileExplorerResponse(const ProfileExplorerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_body()) {
    body_ = new ::ru::mail::go::social::ProfileExplorerResponse_Body(*from.body_);
  } else {
    body_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.ProfileExplorerResponse)
}

void ProfileExplorerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = NULL;
}

ProfileExplorerResponse::~ProfileExplorerResponse() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.ProfileExplorerResponse)
  SharedDtor();
}

void ProfileExplorerResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_;
}

void ProfileExplorerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileExplorerResponse::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileExplorerResponse& ProfileExplorerResponse::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileExplorerResponse* ProfileExplorerResponse::New(::google::protobuf::Arena* arena) const {
  ProfileExplorerResponse* n = new ProfileExplorerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileExplorerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.ProfileExplorerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!error_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(body_ != NULL);
      body_->::ru::mail::go::social::ProfileExplorerResponse_Body::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfileExplorerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.ProfileExplorerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.social.ProfileExplorerResponse.Body body = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.ProfileExplorerResponse.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.ProfileExplorerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.ProfileExplorerResponse)
  return false;
#undef DO_
}

void ProfileExplorerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.ProfileExplorerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.social.ProfileExplorerResponse.Body body = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->body_, output);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.ProfileExplorerResponse)
}

::google::protobuf::uint8* ProfileExplorerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.ProfileExplorerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.social.ProfileExplorerResponse.Body body = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->body_, deterministic, target);
  }

  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.ProfileExplorerResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.ProfileExplorerResponse)
  return target;
}

size_t ProfileExplorerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.ProfileExplorerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .ru.mail.go.social.ProfileExplorerResponse.Body body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->body_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileExplorerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.ProfileExplorerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileExplorerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileExplorerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.ProfileExplorerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.ProfileExplorerResponse)
    MergeFrom(*source);
  }
}

void ProfileExplorerResponse::MergeFrom(const ProfileExplorerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.ProfileExplorerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_body()->::ru::mail::go::social::ProfileExplorerResponse_Body::MergeFrom(from.body());
    }
  }
}

void ProfileExplorerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.ProfileExplorerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileExplorerResponse::CopyFrom(const ProfileExplorerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.ProfileExplorerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileExplorerResponse::IsInitialized() const {
  return true;
}

void ProfileExplorerResponse::Swap(ProfileExplorerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileExplorerResponse::InternalSwap(ProfileExplorerResponse* other) {
  using std::swap;
  error_.Swap(&other->error_);
  swap(body_, other->body_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileExplorerResponse::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileExplorerResponse

// optional .ru.mail.go.social.ProfileExplorerResponse.Body body = 1;
bool ProfileExplorerResponse::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfileExplorerResponse::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfileExplorerResponse::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfileExplorerResponse::clear_body() {
  if (body_ != NULL) body_->::ru::mail::go::social::ProfileExplorerResponse_Body::Clear();
  clear_has_body();
}
const ::ru::mail::go::social::ProfileExplorerResponse_Body& ProfileExplorerResponse::body() const {
  const ::ru::mail::go::social::ProfileExplorerResponse_Body* p = body_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.body)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::ProfileExplorerResponse_Body*>(
      &::ru::mail::go::social::_ProfileExplorerResponse_Body_default_instance_);
}
::ru::mail::go::social::ProfileExplorerResponse_Body* ProfileExplorerResponse::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    body_ = new ::ru::mail::go::social::ProfileExplorerResponse_Body;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.body)
  return body_;
}
::ru::mail::go::social::ProfileExplorerResponse_Body* ProfileExplorerResponse::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ProfileExplorerResponse.body)
  clear_has_body();
  ::ru::mail::go::social::ProfileExplorerResponse_Body* temp = body_;
  body_ = NULL;
  return temp;
}
void ProfileExplorerResponse::set_allocated_body(::ru::mail::go::social::ProfileExplorerResponse_Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ProfileExplorerResponse.body)
}

// optional string error = 2;
bool ProfileExplorerResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfileExplorerResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ProfileExplorerResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProfileExplorerResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& ProfileExplorerResponse::error() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.error)
  return error_.GetNoArena();
}
void ProfileExplorerResponse::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.error)
}
#if LANG_CXX11
void ProfileExplorerResponse::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.ProfileExplorerResponse.error)
}
#endif
void ProfileExplorerResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.error)
}
void ProfileExplorerResponse::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.error)
}
::std::string* ProfileExplorerResponse::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileExplorerResponse::release_error() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ProfileExplorerResponse.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileExplorerResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ProfileExplorerResponse.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoStats_Record::kGeoFieldNumber;
const int GeoStats_Record::kPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoStats_Record::GeoStats_Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.GeoStats.Record)
}
GeoStats_Record::GeoStats_Record(const GeoStats_Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geo()) {
    geo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geo_);
  }
  percent_ = from.percent_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.GeoStats.Record)
}

void GeoStats_Record::SharedCtor() {
  _cached_size_ = 0;
  geo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  percent_ = 0;
}

GeoStats_Record::~GeoStats_Record() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.GeoStats.Record)
  SharedDtor();
}

void GeoStats_Record::SharedDtor() {
  geo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeoStats_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoStats_Record::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoStats_Record& GeoStats_Record::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

GeoStats_Record* GeoStats_Record::New(::google::protobuf::Arena* arena) const {
  GeoStats_Record* n = new GeoStats_Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoStats_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.GeoStats.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_geo()) {
    GOOGLE_DCHECK(!geo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*geo_.UnsafeRawStringPointer())->clear();
  }
  percent_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeoStats_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.GeoStats.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geo().data(), static_cast<int>(this->geo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.GeoStats.Record.geo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.GeoStats.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.GeoStats.Record)
  return false;
#undef DO_
}

void GeoStats_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.GeoStats.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string geo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geo().data(), static_cast<int>(this->geo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.GeoStats.Record.geo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->geo(), output);
  }

  // required float percent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.GeoStats.Record)
}

::google::protobuf::uint8* GeoStats_Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.GeoStats.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string geo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geo().data(), static_cast<int>(this->geo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.GeoStats.Record.geo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geo(), target);
  }

  // required float percent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.GeoStats.Record)
  return target;
}

size_t GeoStats_Record::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.GeoStats.Record)
  size_t total_size = 0;

  if (has_geo()) {
    // required string geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geo());
  }

  if (has_percent()) {
    // required float percent = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t GeoStats_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.GeoStats.Record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geo());

    // required float percent = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoStats_Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.GeoStats.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoStats_Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoStats_Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.GeoStats.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.GeoStats.Record)
    MergeFrom(*source);
  }
}

void GeoStats_Record::MergeFrom(const GeoStats_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.GeoStats.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_geo();
      geo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geo_);
    }
    if (cached_has_bits & 0x00000002u) {
      percent_ = from.percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeoStats_Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.GeoStats.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoStats_Record::CopyFrom(const GeoStats_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.GeoStats.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoStats_Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GeoStats_Record::Swap(GeoStats_Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoStats_Record::InternalSwap(GeoStats_Record* other) {
  using std::swap;
  geo_.Swap(&other->geo_);
  swap(percent_, other->percent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoStats_Record::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoStats_Record

// required string geo = 1;
bool GeoStats_Record::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoStats_Record::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoStats_Record::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoStats_Record::clear_geo() {
  geo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geo();
}
const ::std::string& GeoStats_Record::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GeoStats.Record.geo)
  return geo_.GetNoArena();
}
void GeoStats_Record::set_geo(const ::std::string& value) {
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GeoStats.Record.geo)
}
#if LANG_CXX11
void GeoStats_Record::set_geo(::std::string&& value) {
  set_has_geo();
  geo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.GeoStats.Record.geo)
}
#endif
void GeoStats_Record::set_geo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.GeoStats.Record.geo)
}
void GeoStats_Record::set_geo(const char* value, size_t size) {
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.GeoStats.Record.geo)
}
::std::string* GeoStats_Record::mutable_geo() {
  set_has_geo();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GeoStats.Record.geo)
  return geo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GeoStats_Record::release_geo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.GeoStats.Record.geo)
  clear_has_geo();
  return geo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GeoStats_Record::set_allocated_geo(::std::string* geo) {
  if (geo != NULL) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  geo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geo);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.GeoStats.Record.geo)
}

// required float percent = 2;
bool GeoStats_Record::has_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeoStats_Record::set_has_percent() {
  _has_bits_[0] |= 0x00000002u;
}
void GeoStats_Record::clear_has_percent() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeoStats_Record::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
float GeoStats_Record::percent() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GeoStats.Record.percent)
  return percent_;
}
void GeoStats_Record::set_percent(float value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GeoStats.Record.percent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoStats::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoStats::GeoStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.GeoStats)
}
GeoStats::GeoStats(const GeoStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.GeoStats)
}

void GeoStats::SharedCtor() {
  _cached_size_ = 0;
}

GeoStats::~GeoStats() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.GeoStats)
  SharedDtor();
}

void GeoStats::SharedDtor() {
}

void GeoStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoStats::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoStats& GeoStats::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

GeoStats* GeoStats::New(::google::protobuf::Arena* arena) const {
  GeoStats* n = new GeoStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.GeoStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeoStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.GeoStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.social.GeoStats.Record records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.GeoStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.GeoStats)
  return false;
#undef DO_
}

void GeoStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.GeoStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.social.GeoStats.Record records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.GeoStats)
}

::google::protobuf::uint8* GeoStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.GeoStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.social.GeoStats.Record records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.GeoStats)
  return target;
}

size_t GeoStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.GeoStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.social.GeoStats.Record records = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.GeoStats)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.GeoStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.GeoStats)
    MergeFrom(*source);
  }
}

void GeoStats::MergeFrom(const GeoStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.GeoStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void GeoStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.GeoStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoStats::CopyFrom(const GeoStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.GeoStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoStats::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void GeoStats::Swap(GeoStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoStats::InternalSwap(GeoStats* other) {
  using std::swap;
  records_.InternalSwap(&other->records_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoStats::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoStats

// repeated .ru.mail.go.social.GeoStats.Record records = 1;
int GeoStats::records_size() const {
  return records_.size();
}
void GeoStats::clear_records() {
  records_.Clear();
}
const ::ru::mail::go::social::GeoStats_Record& GeoStats::records(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GeoStats.records)
  return records_.Get(index);
}
::ru::mail::go::social::GeoStats_Record* GeoStats::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GeoStats.records)
  return records_.Mutable(index);
}
::ru::mail::go::social::GeoStats_Record* GeoStats::add_records() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.GeoStats.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::GeoStats_Record >*
GeoStats::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.GeoStats.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::GeoStats_Record >&
GeoStats::records() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.GeoStats.records)
  return records_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConverterState::kPutRequestFieldNumber;
const int ConverterState::kFastTextsFieldNumber;
const int ConverterState::kNumzonesFieldNumber;
const int ConverterState::kGeoStatsFieldNumber;
const int ConverterState::kNeuropornFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConverterState::ConverterState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.ConverterState)
}
ConverterState::ConverterState(const ConverterState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_putrequest()) {
    putrequest_ = new ::ru::mail::go::social::PutRequest(*from.putrequest_);
  } else {
    putrequest_ = NULL;
  }
  if (from.has_fasttexts()) {
    fasttexts_ = new ::gogo::storage::spider_document_detail(*from.fasttexts_);
  } else {
    fasttexts_ = NULL;
  }
  if (from.has_numzones()) {
    numzones_ = new ::gogo::storage::spider_document_detail(*from.numzones_);
  } else {
    numzones_ = NULL;
  }
  if (from.has_geostats()) {
    geostats_ = new ::ru::mail::go::social::GeoStats(*from.geostats_);
  } else {
    geostats_ = NULL;
  }
  neuroporn_ = from.neuroporn_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.ConverterState)
}

void ConverterState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&putrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neuroporn_) -
      reinterpret_cast<char*>(&putrequest_)) + sizeof(neuroporn_));
}

ConverterState::~ConverterState() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.ConverterState)
  SharedDtor();
}

void ConverterState::SharedDtor() {
  if (this != internal_default_instance()) delete putrequest_;
  if (this != internal_default_instance()) delete fasttexts_;
  if (this != internal_default_instance()) delete numzones_;
  if (this != internal_default_instance()) delete geostats_;
}

void ConverterState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConverterState::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConverterState& ConverterState::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConverterState* ConverterState::New(::google::protobuf::Arena* arena) const {
  ConverterState* n = new ConverterState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConverterState::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.ConverterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(putrequest_ != NULL);
      putrequest_->::ru::mail::go::social::PutRequest::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fasttexts_ != NULL);
      fasttexts_->::gogo::storage::spider_document_detail::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(numzones_ != NULL);
      numzones_->::gogo::storage::spider_document_detail::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(geostats_ != NULL);
      geostats_->::ru::mail::go::social::GeoStats::Clear();
    }
  }
  neuroporn_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConverterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.ConverterState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.social.PutRequest putRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_putrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.storage.spider_document_detail fastTexts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fasttexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.storage.spider_document_detail numzones = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_numzones()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.GeoStats geoStats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geostats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 neuroporn = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_neuroporn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neuroporn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.ConverterState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.ConverterState)
  return false;
#undef DO_
}

void ConverterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.ConverterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.social.PutRequest putRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->putrequest_, output);
  }

  // optional .gogo.storage.spider_document_detail fastTexts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fasttexts_, output);
  }

  // optional .gogo.storage.spider_document_detail numzones = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->numzones_, output);
  }

  // optional .ru.mail.go.social.GeoStats geoStats = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->geostats_, output);
  }

  // optional int32 neuroporn = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->neuroporn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.ConverterState)
}

::google::protobuf::uint8* ConverterState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.ConverterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.social.PutRequest putRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->putrequest_, deterministic, target);
  }

  // optional .gogo.storage.spider_document_detail fastTexts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fasttexts_, deterministic, target);
  }

  // optional .gogo.storage.spider_document_detail numzones = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->numzones_, deterministic, target);
  }

  // optional .ru.mail.go.social.GeoStats geoStats = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->geostats_, deterministic, target);
  }

  // optional int32 neuroporn = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->neuroporn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.ConverterState)
  return target;
}

size_t ConverterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.ConverterState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.social.PutRequest putRequest = 1;
  if (has_putrequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->putrequest_);
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional .gogo.storage.spider_document_detail fastTexts = 2;
    if (has_fasttexts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fasttexts_);
    }

    // optional .gogo.storage.spider_document_detail numzones = 3;
    if (has_numzones()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->numzones_);
    }

    // optional .ru.mail.go.social.GeoStats geoStats = 4;
    if (has_geostats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geostats_);
    }

    // optional int32 neuroporn = 5;
    if (has_neuroporn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neuroporn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConverterState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.ConverterState)
  GOOGLE_DCHECK_NE(&from, this);
  const ConverterState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConverterState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.ConverterState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.ConverterState)
    MergeFrom(*source);
  }
}

void ConverterState::MergeFrom(const ConverterState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.ConverterState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_putrequest()->::ru::mail::go::social::PutRequest::MergeFrom(from.putrequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fasttexts()->::gogo::storage::spider_document_detail::MergeFrom(from.fasttexts());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_numzones()->::gogo::storage::spider_document_detail::MergeFrom(from.numzones());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_geostats()->::ru::mail::go::social::GeoStats::MergeFrom(from.geostats());
    }
    if (cached_has_bits & 0x00000010u) {
      neuroporn_ = from.neuroporn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConverterState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.ConverterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConverterState::CopyFrom(const ConverterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.ConverterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConverterState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_putrequest()) {
    if (!this->putrequest_->IsInitialized()) return false;
  }
  if (has_fasttexts()) {
    if (!this->fasttexts_->IsInitialized()) return false;
  }
  if (has_numzones()) {
    if (!this->numzones_->IsInitialized()) return false;
  }
  if (has_geostats()) {
    if (!this->geostats_->IsInitialized()) return false;
  }
  return true;
}

void ConverterState::Swap(ConverterState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConverterState::InternalSwap(ConverterState* other) {
  using std::swap;
  swap(putrequest_, other->putrequest_);
  swap(fasttexts_, other->fasttexts_);
  swap(numzones_, other->numzones_);
  swap(geostats_, other->geostats_);
  swap(neuroporn_, other->neuroporn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConverterState::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConverterState

// required .ru.mail.go.social.PutRequest putRequest = 1;
bool ConverterState::has_putrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConverterState::set_has_putrequest() {
  _has_bits_[0] |= 0x00000001u;
}
void ConverterState::clear_has_putrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConverterState::clear_putrequest() {
  if (putrequest_ != NULL) putrequest_->::ru::mail::go::social::PutRequest::Clear();
  clear_has_putrequest();
}
const ::ru::mail::go::social::PutRequest& ConverterState::putrequest() const {
  const ::ru::mail::go::social::PutRequest* p = putrequest_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.putRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::PutRequest*>(
      &::ru::mail::go::social::_PutRequest_default_instance_);
}
::ru::mail::go::social::PutRequest* ConverterState::mutable_putrequest() {
  set_has_putrequest();
  if (putrequest_ == NULL) {
    putrequest_ = new ::ru::mail::go::social::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ConverterState.putRequest)
  return putrequest_;
}
::ru::mail::go::social::PutRequest* ConverterState::release_putrequest() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ConverterState.putRequest)
  clear_has_putrequest();
  ::ru::mail::go::social::PutRequest* temp = putrequest_;
  putrequest_ = NULL;
  return temp;
}
void ConverterState::set_allocated_putrequest(::ru::mail::go::social::PutRequest* putrequest) {
  delete putrequest_;
  putrequest_ = putrequest;
  if (putrequest) {
    set_has_putrequest();
  } else {
    clear_has_putrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ConverterState.putRequest)
}

// optional .gogo.storage.spider_document_detail fastTexts = 2;
bool ConverterState::has_fasttexts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConverterState::set_has_fasttexts() {
  _has_bits_[0] |= 0x00000002u;
}
void ConverterState::clear_has_fasttexts() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConverterState::clear_fasttexts() {
  if (fasttexts_ != NULL) fasttexts_->::gogo::storage::spider_document_detail::Clear();
  clear_has_fasttexts();
}
const ::gogo::storage::spider_document_detail& ConverterState::fasttexts() const {
  const ::gogo::storage::spider_document_detail* p = fasttexts_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.fastTexts)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::storage::spider_document_detail*>(
      &::gogo::storage::_spider_document_detail_default_instance_);
}
::gogo::storage::spider_document_detail* ConverterState::mutable_fasttexts() {
  set_has_fasttexts();
  if (fasttexts_ == NULL) {
    fasttexts_ = new ::gogo::storage::spider_document_detail;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ConverterState.fastTexts)
  return fasttexts_;
}
::gogo::storage::spider_document_detail* ConverterState::release_fasttexts() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ConverterState.fastTexts)
  clear_has_fasttexts();
  ::gogo::storage::spider_document_detail* temp = fasttexts_;
  fasttexts_ = NULL;
  return temp;
}
void ConverterState::set_allocated_fasttexts(::gogo::storage::spider_document_detail* fasttexts) {
  delete fasttexts_;
  fasttexts_ = fasttexts;
  if (fasttexts) {
    set_has_fasttexts();
  } else {
    clear_has_fasttexts();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ConverterState.fastTexts)
}

// optional .gogo.storage.spider_document_detail numzones = 3;
bool ConverterState::has_numzones() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConverterState::set_has_numzones() {
  _has_bits_[0] |= 0x00000004u;
}
void ConverterState::clear_has_numzones() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConverterState::clear_numzones() {
  if (numzones_ != NULL) numzones_->::gogo::storage::spider_document_detail::Clear();
  clear_has_numzones();
}
const ::gogo::storage::spider_document_detail& ConverterState::numzones() const {
  const ::gogo::storage::spider_document_detail* p = numzones_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.numzones)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::storage::spider_document_detail*>(
      &::gogo::storage::_spider_document_detail_default_instance_);
}
::gogo::storage::spider_document_detail* ConverterState::mutable_numzones() {
  set_has_numzones();
  if (numzones_ == NULL) {
    numzones_ = new ::gogo::storage::spider_document_detail;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ConverterState.numzones)
  return numzones_;
}
::gogo::storage::spider_document_detail* ConverterState::release_numzones() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ConverterState.numzones)
  clear_has_numzones();
  ::gogo::storage::spider_document_detail* temp = numzones_;
  numzones_ = NULL;
  return temp;
}
void ConverterState::set_allocated_numzones(::gogo::storage::spider_document_detail* numzones) {
  delete numzones_;
  numzones_ = numzones;
  if (numzones) {
    set_has_numzones();
  } else {
    clear_has_numzones();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ConverterState.numzones)
}

// optional .ru.mail.go.social.GeoStats geoStats = 4;
bool ConverterState::has_geostats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConverterState::set_has_geostats() {
  _has_bits_[0] |= 0x00000008u;
}
void ConverterState::clear_has_geostats() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConverterState::clear_geostats() {
  if (geostats_ != NULL) geostats_->::ru::mail::go::social::GeoStats::Clear();
  clear_has_geostats();
}
const ::ru::mail::go::social::GeoStats& ConverterState::geostats() const {
  const ::ru::mail::go::social::GeoStats* p = geostats_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.geoStats)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::GeoStats*>(
      &::ru::mail::go::social::_GeoStats_default_instance_);
}
::ru::mail::go::social::GeoStats* ConverterState::mutable_geostats() {
  set_has_geostats();
  if (geostats_ == NULL) {
    geostats_ = new ::ru::mail::go::social::GeoStats;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ConverterState.geoStats)
  return geostats_;
}
::ru::mail::go::social::GeoStats* ConverterState::release_geostats() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ConverterState.geoStats)
  clear_has_geostats();
  ::ru::mail::go::social::GeoStats* temp = geostats_;
  geostats_ = NULL;
  return temp;
}
void ConverterState::set_allocated_geostats(::ru::mail::go::social::GeoStats* geostats) {
  delete geostats_;
  geostats_ = geostats;
  if (geostats) {
    set_has_geostats();
  } else {
    clear_has_geostats();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ConverterState.geoStats)
}

// optional int32 neuroporn = 5;
bool ConverterState::has_neuroporn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConverterState::set_has_neuroporn() {
  _has_bits_[0] |= 0x00000010u;
}
void ConverterState::clear_has_neuroporn() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConverterState::clear_neuroporn() {
  neuroporn_ = 0;
  clear_has_neuroporn();
}
::google::protobuf::int32 ConverterState::neuroporn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.neuroporn)
  return neuroporn_;
}
void ConverterState::set_neuroporn(::google::protobuf::int32 value) {
  set_has_neuroporn();
  neuroporn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ConverterState.neuroporn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YoulaAd::kProductIdFieldNumber;
const int YoulaAd::kTsFieldNumber;
const int YoulaAd::kIsArchivedFieldNumber;
const int YoulaAd::kIsBlockedFieldNumber;
const int YoulaAd::kIsDeletedFieldNumber;
const int YoulaAd::kIsSoldFieldNumber;
const int YoulaAd::kPriceFieldNumber;
const int YoulaAd::kPriceOrigFieldNumber;
const int YoulaAd::kNameFieldNumber;
const int YoulaAd::kDescFieldNumber;
const int YoulaAd::kLatFieldNumber;
const int YoulaAd::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YoulaAd::YoulaAd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.YoulaAd)
}
YoulaAd::YoulaAd(const YoulaAd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.YoulaAd)
}

void YoulaAd::SharedCtor() {
  _cached_size_ = 0;
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(lon_));
}

YoulaAd::~YoulaAd() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.YoulaAd)
  SharedDtor();
}

void YoulaAd::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void YoulaAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YoulaAd::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YoulaAd& YoulaAd::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

YoulaAd* YoulaAd::New(::google::protobuf::Arena* arena) const {
  YoulaAd* n = new YoulaAd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YoulaAd::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.YoulaAd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!productid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*productid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issold_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(issold_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lon_) -
        reinterpret_cast<char*>(&price_)) + sizeof(lon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YoulaAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.YoulaAd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string productId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), static_cast<int>(this->productid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.YoulaAd.productId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isArchived = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_isarchived();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isarchived_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isBlocked = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_isblocked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblocked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isDeleted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_isdeleted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdeleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isSold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_issold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 priceOrig = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_priceorig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priceorig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.YoulaAd.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string desc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.social.YoulaAd.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lat = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lon = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.YoulaAd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.YoulaAd)
  return false;
#undef DO_
}

void YoulaAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.YoulaAd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.YoulaAd.productId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // required uint64 ts = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ts(), output);
  }

  // required bool isArchived = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isarchived(), output);
  }

  // required bool isBlocked = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isblocked(), output);
  }

  // required bool isDeleted = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdeleted(), output);
  }

  // required bool isSold = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issold(), output);
  }

  // required int32 price = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price(), output);
  }

  // required int32 priceOrig = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->priceorig(), output);
  }

  // required string name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.YoulaAd.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  // required string desc = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.YoulaAd.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->desc(), output);
  }

  // required float lat = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lat(), output);
  }

  // required float lon = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.YoulaAd)
}

::google::protobuf::uint8* YoulaAd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.YoulaAd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.YoulaAd.productId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // required uint64 ts = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ts(), target);
  }

  // required bool isArchived = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isarchived(), target);
  }

  // required bool isBlocked = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isblocked(), target);
  }

  // required bool isDeleted = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdeleted(), target);
  }

  // required bool isSold = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issold(), target);
  }

  // required int32 price = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price(), target);
  }

  // required int32 priceOrig = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->priceorig(), target);
  }

  // required string name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.YoulaAd.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // required string desc = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.social.YoulaAd.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->desc(), target);
  }

  // required float lat = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lat(), target);
  }

  // required float lon = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.YoulaAd)
  return target;
}

size_t YoulaAd::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.social.YoulaAd)
  size_t total_size = 0;

  if (has_productid()) {
    // required string productId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (has_name()) {
    // required string name = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_desc()) {
    // required string desc = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  if (has_ts()) {
    // required uint64 ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());
  }

  if (has_isarchived()) {
    // required bool isArchived = 3;
    total_size += 1 + 1;
  }

  if (has_isblocked()) {
    // required bool isBlocked = 4;
    total_size += 1 + 1;
  }

  if (has_isdeleted()) {
    // required bool isDeleted = 5;
    total_size += 1 + 1;
  }

  if (has_issold()) {
    // required bool isSold = 6;
    total_size += 1 + 1;
  }

  if (has_price()) {
    // required int32 price = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  if (has_priceorig()) {
    // required int32 priceOrig = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priceorig());
  }

  if (has_lat()) {
    // required float lat = 11;
    total_size += 1 + 4;
  }

  if (has_lon()) {
    // required float lon = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t YoulaAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.YoulaAd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required string productId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

    // required string name = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string desc = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());

    // required uint64 ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());

    // required bool isArchived = 3;
    total_size += 1 + 1;

    // required bool isBlocked = 4;
    total_size += 1 + 1;

    // required bool isDeleted = 5;
    total_size += 1 + 1;

    // required bool isSold = 6;
    total_size += 1 + 1;

    // required int32 price = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());

    // required int32 priceOrig = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priceorig());

    // required float lat = 11;
    total_size += 1 + 4;

    // required float lon = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoulaAd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.YoulaAd)
  GOOGLE_DCHECK_NE(&from, this);
  const YoulaAd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YoulaAd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.YoulaAd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.YoulaAd)
    MergeFrom(*source);
  }
}

void YoulaAd::MergeFrom(const YoulaAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.YoulaAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000008u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000010u) {
      isarchived_ = from.isarchived_;
    }
    if (cached_has_bits & 0x00000020u) {
      isblocked_ = from.isblocked_;
    }
    if (cached_has_bits & 0x00000040u) {
      isdeleted_ = from.isdeleted_;
    }
    if (cached_has_bits & 0x00000080u) {
      issold_ = from.issold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000200u) {
      priceorig_ = from.priceorig_;
    }
    if (cached_has_bits & 0x00000400u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000800u) {
      lon_ = from.lon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YoulaAd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.YoulaAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoulaAd::CopyFrom(const YoulaAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.YoulaAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoulaAd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void YoulaAd::Swap(YoulaAd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YoulaAd::InternalSwap(YoulaAd* other) {
  using std::swap;
  productid_.Swap(&other->productid_);
  name_.Swap(&other->name_);
  desc_.Swap(&other->desc_);
  swap(ts_, other->ts_);
  swap(isarchived_, other->isarchived_);
  swap(isblocked_, other->isblocked_);
  swap(isdeleted_, other->isdeleted_);
  swap(issold_, other->issold_);
  swap(price_, other->price_);
  swap(priceorig_, other->priceorig_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YoulaAd::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YoulaAd

// required string productId = 1;
bool YoulaAd::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YoulaAd::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
void YoulaAd::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
void YoulaAd::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
const ::std::string& YoulaAd::productid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.productId)
  return productid_.GetNoArena();
}
void YoulaAd::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.productId)
}
#if LANG_CXX11
void YoulaAd::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.YoulaAd.productId)
}
#endif
void YoulaAd::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.YoulaAd.productId)
}
void YoulaAd::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.YoulaAd.productId)
}
::std::string* YoulaAd::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaAd.productId)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YoulaAd::release_productid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaAd.productId)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YoulaAd::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaAd.productId)
}

// required uint64 ts = 2;
bool YoulaAd::has_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YoulaAd::set_has_ts() {
  _has_bits_[0] |= 0x00000008u;
}
void YoulaAd::clear_has_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
void YoulaAd::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
::google::protobuf::uint64 YoulaAd::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.ts)
  return ts_;
}
void YoulaAd::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.ts)
}

// required bool isArchived = 3;
bool YoulaAd::has_isarchived() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YoulaAd::set_has_isarchived() {
  _has_bits_[0] |= 0x00000010u;
}
void YoulaAd::clear_has_isarchived() {
  _has_bits_[0] &= ~0x00000010u;
}
void YoulaAd::clear_isarchived() {
  isarchived_ = false;
  clear_has_isarchived();
}
bool YoulaAd::isarchived() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.isArchived)
  return isarchived_;
}
void YoulaAd::set_isarchived(bool value) {
  set_has_isarchived();
  isarchived_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.isArchived)
}

// required bool isBlocked = 4;
bool YoulaAd::has_isblocked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YoulaAd::set_has_isblocked() {
  _has_bits_[0] |= 0x00000020u;
}
void YoulaAd::clear_has_isblocked() {
  _has_bits_[0] &= ~0x00000020u;
}
void YoulaAd::clear_isblocked() {
  isblocked_ = false;
  clear_has_isblocked();
}
bool YoulaAd::isblocked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.isBlocked)
  return isblocked_;
}
void YoulaAd::set_isblocked(bool value) {
  set_has_isblocked();
  isblocked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.isBlocked)
}

// required bool isDeleted = 5;
bool YoulaAd::has_isdeleted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YoulaAd::set_has_isdeleted() {
  _has_bits_[0] |= 0x00000040u;
}
void YoulaAd::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x00000040u;
}
void YoulaAd::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
bool YoulaAd::isdeleted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.isDeleted)
  return isdeleted_;
}
void YoulaAd::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.isDeleted)
}

// required bool isSold = 6;
bool YoulaAd::has_issold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YoulaAd::set_has_issold() {
  _has_bits_[0] |= 0x00000080u;
}
void YoulaAd::clear_has_issold() {
  _has_bits_[0] &= ~0x00000080u;
}
void YoulaAd::clear_issold() {
  issold_ = false;
  clear_has_issold();
}
bool YoulaAd::issold() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.isSold)
  return issold_;
}
void YoulaAd::set_issold(bool value) {
  set_has_issold();
  issold_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.isSold)
}

// required int32 price = 7;
bool YoulaAd::has_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void YoulaAd::set_has_price() {
  _has_bits_[0] |= 0x00000100u;
}
void YoulaAd::clear_has_price() {
  _has_bits_[0] &= ~0x00000100u;
}
void YoulaAd::clear_price() {
  price_ = 0;
  clear_has_price();
}
::google::protobuf::int32 YoulaAd::price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.price)
  return price_;
}
void YoulaAd::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.price)
}

// required int32 priceOrig = 8;
bool YoulaAd::has_priceorig() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void YoulaAd::set_has_priceorig() {
  _has_bits_[0] |= 0x00000200u;
}
void YoulaAd::clear_has_priceorig() {
  _has_bits_[0] &= ~0x00000200u;
}
void YoulaAd::clear_priceorig() {
  priceorig_ = 0;
  clear_has_priceorig();
}
::google::protobuf::int32 YoulaAd::priceorig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.priceOrig)
  return priceorig_;
}
void YoulaAd::set_priceorig(::google::protobuf::int32 value) {
  set_has_priceorig();
  priceorig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.priceOrig)
}

// required string name = 9;
bool YoulaAd::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YoulaAd::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void YoulaAd::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void YoulaAd::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& YoulaAd::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.name)
  return name_.GetNoArena();
}
void YoulaAd::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.name)
}
#if LANG_CXX11
void YoulaAd::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.YoulaAd.name)
}
#endif
void YoulaAd::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.YoulaAd.name)
}
void YoulaAd::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.YoulaAd.name)
}
::std::string* YoulaAd::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaAd.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YoulaAd::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaAd.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YoulaAd::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaAd.name)
}

// required string desc = 10;
bool YoulaAd::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YoulaAd::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void YoulaAd::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void YoulaAd::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& YoulaAd::desc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.desc)
  return desc_.GetNoArena();
}
void YoulaAd::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.desc)
}
#if LANG_CXX11
void YoulaAd::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.YoulaAd.desc)
}
#endif
void YoulaAd::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.YoulaAd.desc)
}
void YoulaAd::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.YoulaAd.desc)
}
::std::string* YoulaAd::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaAd.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YoulaAd::release_desc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaAd.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YoulaAd::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaAd.desc)
}

// required float lat = 11;
bool YoulaAd::has_lat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void YoulaAd::set_has_lat() {
  _has_bits_[0] |= 0x00000400u;
}
void YoulaAd::clear_has_lat() {
  _has_bits_[0] &= ~0x00000400u;
}
void YoulaAd::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
float YoulaAd::lat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.lat)
  return lat_;
}
void YoulaAd::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.lat)
}

// required float lon = 12;
bool YoulaAd::has_lon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void YoulaAd::set_has_lon() {
  _has_bits_[0] |= 0x00000800u;
}
void YoulaAd::clear_has_lon() {
  _has_bits_[0] &= ~0x00000800u;
}
void YoulaAd::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
float YoulaAd::lon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.lon)
  return lon_;
}
void YoulaAd::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.lon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YoulaWithPutRequest::kYoulaAdFieldNumber;
const int YoulaWithPutRequest::kPutRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YoulaWithPutRequest::YoulaWithPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.YoulaWithPutRequest)
}
YoulaWithPutRequest::YoulaWithPutRequest(const YoulaWithPutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_youlaad()) {
    youlaad_ = new ::ru::mail::go::social::YoulaAd(*from.youlaad_);
  } else {
    youlaad_ = NULL;
  }
  if (from.has_putrequest()) {
    putrequest_ = new ::ru::mail::go::social::PutRequest(*from.putrequest_);
  } else {
    putrequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.YoulaWithPutRequest)
}

void YoulaWithPutRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&youlaad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&putrequest_) -
      reinterpret_cast<char*>(&youlaad_)) + sizeof(putrequest_));
}

YoulaWithPutRequest::~YoulaWithPutRequest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.YoulaWithPutRequest)
  SharedDtor();
}

void YoulaWithPutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete youlaad_;
  if (this != internal_default_instance()) delete putrequest_;
}

void YoulaWithPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YoulaWithPutRequest::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YoulaWithPutRequest& YoulaWithPutRequest::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

YoulaWithPutRequest* YoulaWithPutRequest::New(::google::protobuf::Arena* arena) const {
  YoulaWithPutRequest* n = new YoulaWithPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YoulaWithPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.YoulaWithPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(youlaad_ != NULL);
      youlaad_->::ru::mail::go::social::YoulaAd::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(putrequest_ != NULL);
      putrequest_->::ru::mail::go::social::PutRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YoulaWithPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.YoulaWithPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.social.YoulaAd youlaAd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youlaad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.social.PutRequest putRequest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_putrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.YoulaWithPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.YoulaWithPutRequest)
  return false;
#undef DO_
}

void YoulaWithPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.YoulaWithPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.social.YoulaAd youlaAd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->youlaad_, output);
  }

  // optional .ru.mail.go.social.PutRequest putRequest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->putrequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.YoulaWithPutRequest)
}

::google::protobuf::uint8* YoulaWithPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.YoulaWithPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.social.YoulaAd youlaAd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->youlaad_, deterministic, target);
  }

  // optional .ru.mail.go.social.PutRequest putRequest = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->putrequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.YoulaWithPutRequest)
  return target;
}

size_t YoulaWithPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.YoulaWithPutRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ru.mail.go.social.YoulaAd youlaAd = 1;
    if (has_youlaad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youlaad_);
    }

    // optional .ru.mail.go.social.PutRequest putRequest = 2;
    if (has_putrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->putrequest_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoulaWithPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.YoulaWithPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const YoulaWithPutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YoulaWithPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.YoulaWithPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.YoulaWithPutRequest)
    MergeFrom(*source);
  }
}

void YoulaWithPutRequest::MergeFrom(const YoulaWithPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.YoulaWithPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_youlaad()->::ru::mail::go::social::YoulaAd::MergeFrom(from.youlaad());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_putrequest()->::ru::mail::go::social::PutRequest::MergeFrom(from.putrequest());
    }
  }
}

void YoulaWithPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.YoulaWithPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoulaWithPutRequest::CopyFrom(const YoulaWithPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.YoulaWithPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoulaWithPutRequest::IsInitialized() const {
  if (has_youlaad()) {
    if (!this->youlaad_->IsInitialized()) return false;
  }
  if (has_putrequest()) {
    if (!this->putrequest_->IsInitialized()) return false;
  }
  return true;
}

void YoulaWithPutRequest::Swap(YoulaWithPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YoulaWithPutRequest::InternalSwap(YoulaWithPutRequest* other) {
  using std::swap;
  swap(youlaad_, other->youlaad_);
  swap(putrequest_, other->putrequest_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YoulaWithPutRequest::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YoulaWithPutRequest

// optional .ru.mail.go.social.YoulaAd youlaAd = 1;
bool YoulaWithPutRequest::has_youlaad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YoulaWithPutRequest::set_has_youlaad() {
  _has_bits_[0] |= 0x00000001u;
}
void YoulaWithPutRequest::clear_has_youlaad() {
  _has_bits_[0] &= ~0x00000001u;
}
void YoulaWithPutRequest::clear_youlaad() {
  if (youlaad_ != NULL) youlaad_->::ru::mail::go::social::YoulaAd::Clear();
  clear_has_youlaad();
}
const ::ru::mail::go::social::YoulaAd& YoulaWithPutRequest::youlaad() const {
  const ::ru::mail::go::social::YoulaAd* p = youlaad_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaWithPutRequest.youlaAd)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::YoulaAd*>(
      &::ru::mail::go::social::_YoulaAd_default_instance_);
}
::ru::mail::go::social::YoulaAd* YoulaWithPutRequest::mutable_youlaad() {
  set_has_youlaad();
  if (youlaad_ == NULL) {
    youlaad_ = new ::ru::mail::go::social::YoulaAd;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaWithPutRequest.youlaAd)
  return youlaad_;
}
::ru::mail::go::social::YoulaAd* YoulaWithPutRequest::release_youlaad() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaWithPutRequest.youlaAd)
  clear_has_youlaad();
  ::ru::mail::go::social::YoulaAd* temp = youlaad_;
  youlaad_ = NULL;
  return temp;
}
void YoulaWithPutRequest::set_allocated_youlaad(::ru::mail::go::social::YoulaAd* youlaad) {
  delete youlaad_;
  youlaad_ = youlaad;
  if (youlaad) {
    set_has_youlaad();
  } else {
    clear_has_youlaad();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaWithPutRequest.youlaAd)
}

// optional .ru.mail.go.social.PutRequest putRequest = 2;
bool YoulaWithPutRequest::has_putrequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YoulaWithPutRequest::set_has_putrequest() {
  _has_bits_[0] |= 0x00000002u;
}
void YoulaWithPutRequest::clear_has_putrequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void YoulaWithPutRequest::clear_putrequest() {
  if (putrequest_ != NULL) putrequest_->::ru::mail::go::social::PutRequest::Clear();
  clear_has_putrequest();
}
const ::ru::mail::go::social::PutRequest& YoulaWithPutRequest::putrequest() const {
  const ::ru::mail::go::social::PutRequest* p = putrequest_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaWithPutRequest.putRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::PutRequest*>(
      &::ru::mail::go::social::_PutRequest_default_instance_);
}
::ru::mail::go::social::PutRequest* YoulaWithPutRequest::mutable_putrequest() {
  set_has_putrequest();
  if (putrequest_ == NULL) {
    putrequest_ = new ::ru::mail::go::social::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaWithPutRequest.putRequest)
  return putrequest_;
}
::ru::mail::go::social::PutRequest* YoulaWithPutRequest::release_putrequest() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaWithPutRequest.putRequest)
  clear_has_putrequest();
  ::ru::mail::go::social::PutRequest* temp = putrequest_;
  putrequest_ = NULL;
  return temp;
}
void YoulaWithPutRequest::set_allocated_putrequest(::ru::mail::go::social::PutRequest* putrequest) {
  delete putrequest_;
  putrequest_ = putrequest;
  if (putrequest) {
    set_has_putrequest();
  } else {
    clear_has_putrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaWithPutRequest.putRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequestList::kPutRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequestList::PutRequestList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.social.PutRequestList)
}
PutRequestList::PutRequestList(const PutRequestList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      putrequest_(from.putrequest_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.social.PutRequestList)
}

void PutRequestList::SharedCtor() {
  _cached_size_ = 0;
}

PutRequestList::~PutRequestList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.social.PutRequestList)
  SharedDtor();
}

void PutRequestList::SharedDtor() {
}

void PutRequestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequestList::descriptor() {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutRequestList& PutRequestList::default_instance() {
  protobuf_social_2eproto::InitDefaults();
  return *internal_default_instance();
}

PutRequestList* PutRequestList::New(::google::protobuf::Arena* arena) const {
  PutRequestList* n = new PutRequestList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequestList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.social.PutRequestList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  putrequest_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PutRequestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.social.PutRequestList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.social.PutRequest putRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_putrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.social.PutRequestList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.social.PutRequestList)
  return false;
#undef DO_
}

void PutRequestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.social.PutRequestList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.social.PutRequest putRequest = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->putrequest_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->putrequest(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.social.PutRequestList)
}

::google::protobuf::uint8* PutRequestList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.social.PutRequestList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.social.PutRequest putRequest = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->putrequest_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->putrequest(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.social.PutRequestList)
  return target;
}

size_t PutRequestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.social.PutRequestList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.social.PutRequest putRequest = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->putrequest_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->putrequest(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequestList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.social.PutRequestList)
  GOOGLE_DCHECK_NE(&from, this);
  const PutRequestList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequestList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.social.PutRequestList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.social.PutRequestList)
    MergeFrom(*source);
  }
}

void PutRequestList::MergeFrom(const PutRequestList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.social.PutRequestList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  putrequest_.MergeFrom(from.putrequest_);
}

void PutRequestList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.social.PutRequestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequestList::CopyFrom(const PutRequestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.social.PutRequestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequestList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->putrequest())) return false;
  return true;
}

void PutRequestList::Swap(PutRequestList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequestList::InternalSwap(PutRequestList* other) {
  using std::swap;
  putrequest_.InternalSwap(&other->putrequest_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequestList::GetMetadata() const {
  protobuf_social_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutRequestList

// repeated .ru.mail.go.social.PutRequest putRequest = 1;
int PutRequestList::putrequest_size() const {
  return putrequest_.size();
}
void PutRequestList::clear_putrequest() {
  putrequest_.Clear();
}
const ::ru::mail::go::social::PutRequest& PutRequestList::putrequest(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequestList.putRequest)
  return putrequest_.Get(index);
}
::ru::mail::go::social::PutRequest* PutRequestList::mutable_putrequest(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequestList.putRequest)
  return putrequest_.Mutable(index);
}
::ru::mail::go::social::PutRequest* PutRequestList::add_putrequest() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.PutRequestList.putRequest)
  return putrequest_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::PutRequest >*
PutRequestList::mutable_putrequest() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.PutRequestList.putRequest)
  return &putrequest_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::PutRequest >&
PutRequestList::putrequest() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.PutRequestList.putRequest)
  return putrequest_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace social
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
