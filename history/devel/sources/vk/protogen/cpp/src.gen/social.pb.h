// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: social.proto

#ifndef PROTOBUF_social_2eproto__INCLUDED
#define PROTOBUF_social_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "content_storage.pb.h"
#include "fetcher_storage.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace social {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Address_Timetable;
class Address_TimetableDefaultTypeInternal;
extern Address_TimetableDefaultTypeInternal _Address_Timetable_default_instance_;
class Audio;
class AudioDefaultTypeInternal;
extern AudioDefaultTypeInternal _Audio_default_instance_;
class ConverterState;
class ConverterStateDefaultTypeInternal;
extern ConverterStateDefaultTypeInternal _ConverterState_default_instance_;
class Counters;
class CountersDefaultTypeInternal;
extern CountersDefaultTypeInternal _Counters_default_instance_;
class Face;
class FaceDefaultTypeInternal;
extern FaceDefaultTypeInternal _Face_default_instance_;
class FacesInfo;
class FacesInfoDefaultTypeInternal;
extern FacesInfoDefaultTypeInternal _FacesInfo_default_instance_;
class GatewayRecord;
class GatewayRecordDefaultTypeInternal;
extern GatewayRecordDefaultTypeInternal _GatewayRecord_default_instance_;
class GeoStats;
class GeoStatsDefaultTypeInternal;
extern GeoStatsDefaultTypeInternal _GeoStats_default_instance_;
class GeoStats_Record;
class GeoStats_RecordDefaultTypeInternal;
extern GeoStats_RecordDefaultTypeInternal _GeoStats_Record_default_instance_;
class ImgAttaches;
class ImgAttachesDefaultTypeInternal;
extern ImgAttachesDefaultTypeInternal _ImgAttaches_default_instance_;
class KV;
class KVDefaultTypeInternal;
extern KVDefaultTypeInternal _KV_default_instance_;
class LoginResolveRequest;
class LoginResolveRequestDefaultTypeInternal;
extern LoginResolveRequestDefaultTypeInternal _LoginResolveRequest_default_instance_;
class Post;
class PostDefaultTypeInternal;
extern PostDefaultTypeInternal _Post_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class ProfileExplorerResponse;
class ProfileExplorerResponseDefaultTypeInternal;
extern ProfileExplorerResponseDefaultTypeInternal _ProfileExplorerResponse_default_instance_;
class ProfileExplorerResponse_Body;
class ProfileExplorerResponse_BodyDefaultTypeInternal;
extern ProfileExplorerResponse_BodyDefaultTypeInternal _ProfileExplorerResponse_Body_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutRequestList;
class PutRequestListDefaultTypeInternal;
extern PutRequestListDefaultTypeInternal _PutRequestList_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class UrlList;
class UrlListDefaultTypeInternal;
extern UrlListDefaultTypeInternal _UrlList_default_instance_;
class VideoCollection;
class VideoCollectionDefaultTypeInternal;
extern VideoCollectionDefaultTypeInternal _VideoCollection_default_instance_;
class VideoCollection_Video;
class VideoCollection_VideoDefaultTypeInternal;
extern VideoCollection_VideoDefaultTypeInternal _VideoCollection_Video_default_instance_;
class YoulaAd;
class YoulaAdDefaultTypeInternal;
extern YoulaAdDefaultTypeInternal _YoulaAd_default_instance_;
class YoulaWithPutRequest;
class YoulaWithPutRequestDefaultTypeInternal;
extern YoulaWithPutRequestDefaultTypeInternal _YoulaWithPutRequest_default_instance_;
}  // namespace social
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace social {

namespace protobuf_social_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_social_2eproto

enum PutRequest_Origin {
  PutRequest_Origin_wpII = 1,
  PutRequest_Origin_message = 2,
  PutRequest_Origin_longread = 3,
  PutRequest_Origin_userActivity = 4
};
bool PutRequest_Origin_IsValid(int value);
const PutRequest_Origin PutRequest_Origin_Origin_MIN = PutRequest_Origin_wpII;
const PutRequest_Origin PutRequest_Origin_Origin_MAX = PutRequest_Origin_userActivity;
const int PutRequest_Origin_Origin_ARRAYSIZE = PutRequest_Origin_Origin_MAX + 1;

const ::google::protobuf::EnumDescriptor* PutRequest_Origin_descriptor();
inline const ::std::string& PutRequest_Origin_Name(PutRequest_Origin value) {
  return ::google::protobuf::internal::NameOfEnum(
    PutRequest_Origin_descriptor(), value);
}
inline bool PutRequest_Origin_Parse(
    const ::std::string& name, PutRequest_Origin* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PutRequest_Origin>(
    PutRequest_Origin_descriptor(), name, value);
}
enum PutRequest_Fastbase {
  PutRequest_Fastbase_PROD = 1,
  PutRequest_Fastbase_RM_TTL = 2,
  PutRequest_Fastbase_RM_KAFKA = 3
};
bool PutRequest_Fastbase_IsValid(int value);
const PutRequest_Fastbase PutRequest_Fastbase_Fastbase_MIN = PutRequest_Fastbase_PROD;
const PutRequest_Fastbase PutRequest_Fastbase_Fastbase_MAX = PutRequest_Fastbase_RM_KAFKA;
const int PutRequest_Fastbase_Fastbase_ARRAYSIZE = PutRequest_Fastbase_Fastbase_MAX + 1;

const ::google::protobuf::EnumDescriptor* PutRequest_Fastbase_descriptor();
inline const ::std::string& PutRequest_Fastbase_Name(PutRequest_Fastbase value) {
  return ::google::protobuf::internal::NameOfEnum(
    PutRequest_Fastbase_descriptor(), value);
}
inline bool PutRequest_Fastbase_Parse(
    const ::std::string& name, PutRequest_Fastbase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PutRequest_Fastbase>(
    PutRequest_Fastbase_descriptor(), name, value);
}
enum PutRequest_Destination {
  PutRequest_Destination_SOCIAL = 0,
  PutRequest_Destination_FACES = 1
};
bool PutRequest_Destination_IsValid(int value);
const PutRequest_Destination PutRequest_Destination_Destination_MIN = PutRequest_Destination_SOCIAL;
const PutRequest_Destination PutRequest_Destination_Destination_MAX = PutRequest_Destination_FACES;
const int PutRequest_Destination_Destination_ARRAYSIZE = PutRequest_Destination_Destination_MAX + 1;

const ::google::protobuf::EnumDescriptor* PutRequest_Destination_descriptor();
inline const ::std::string& PutRequest_Destination_Name(PutRequest_Destination value) {
  return ::google::protobuf::internal::NameOfEnum(
    PutRequest_Destination_descriptor(), value);
}
inline bool PutRequest_Destination_Parse(
    const ::std::string& name, PutRequest_Destination* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PutRequest_Destination>(
    PutRequest_Destination_descriptor(), name, value);
}
enum LoginResolveRequest_request_t {
  LoginResolveRequest_request_t_key_primary = 0,
  LoginResolveRequest_request_t_reposted_from_primary = 1
};
bool LoginResolveRequest_request_t_IsValid(int value);
const LoginResolveRequest_request_t LoginResolveRequest_request_t_request_t_MIN = LoginResolveRequest_request_t_key_primary;
const LoginResolveRequest_request_t LoginResolveRequest_request_t_request_t_MAX = LoginResolveRequest_request_t_reposted_from_primary;
const int LoginResolveRequest_request_t_request_t_ARRAYSIZE = LoginResolveRequest_request_t_request_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginResolveRequest_request_t_descriptor();
inline const ::std::string& LoginResolveRequest_request_t_Name(LoginResolveRequest_request_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginResolveRequest_request_t_descriptor(), value);
}
inline bool LoginResolveRequest_request_t_Parse(
    const ::std::string& name, LoginResolveRequest_request_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginResolveRequest_request_t>(
    LoginResolveRequest_request_t_descriptor(), name, value);
}
enum Status_CheckType {
  Status_CheckType_IMPORT = 1,
  Status_CheckType_VK_MESSAGES = 2,
  Status_CheckType_API_FETCH = 3,
  Status_CheckType_RB_IMPORT = 4,
  Status_CheckType_OWNER_DELETED = 5,
  Status_CheckType_OK_USER_ACTIVITY = 6,
  Status_CheckType_YOULA_NOT_ACTUAL = 7
};
bool Status_CheckType_IsValid(int value);
const Status_CheckType Status_CheckType_CheckType_MIN = Status_CheckType_IMPORT;
const Status_CheckType Status_CheckType_CheckType_MAX = Status_CheckType_YOULA_NOT_ACTUAL;
const int Status_CheckType_CheckType_ARRAYSIZE = Status_CheckType_CheckType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_CheckType_descriptor();
inline const ::std::string& Status_CheckType_Name(Status_CheckType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_CheckType_descriptor(), value);
}
inline bool Status_CheckType_Parse(
    const ::std::string& name, Status_CheckType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_CheckType>(
    Status_CheckType_descriptor(), name, value);
}
enum Type {
  profile = 1,
  group = 2,
  post = 3,
  longread = 4,
  video = 5,
  topic_offset = 6,
  topic_post = 7
};
bool Type_IsValid(int value);
const Type Type_MIN = profile;
const Type Type_MAX = topic_post;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Source {
  vk = 1,
  fb = 2,
  ok = 3,
  ig = 4
};
bool Source_IsValid(int value);
const Source Source_MIN = vk;
const Source Source_MAX = ig;
const int Source_ARRAYSIZE = Source_MAX + 1;

const ::google::protobuf::EnumDescriptor* Source_descriptor();
inline const ::std::string& Source_Name(Source value) {
  return ::google::protobuf::internal::NameOfEnum(
    Source_descriptor(), value);
}
inline bool Source_Parse(
    const ::std::string& name, Source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Source>(
    Source_descriptor(), name, value);
}
enum WorkInfo {
  unknown = 0,
  temporaryClosed = 1,
  alwaysOpened = 2,
  foreverClosed = 3,
  timetable = 4
};
bool WorkInfo_IsValid(int value);
const WorkInfo WorkInfo_MIN = unknown;
const WorkInfo WorkInfo_MAX = timetable;
const int WorkInfo_ARRAYSIZE = WorkInfo_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkInfo_descriptor();
inline const ::std::string& WorkInfo_Name(WorkInfo value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkInfo_descriptor(), value);
}
inline bool WorkInfo_Parse(
    const ::std::string& name, WorkInfo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkInfo>(
    WorkInfo_descriptor(), name, value);
}
enum OkVideoCollectionsProvider {
  VIDEOMORE = 1,
  ODKL_COMPILATION = 2,
  VSP = 3,
  START_FILM = 4,
  X_MEDIA_DIGITAL = 5,
  RIDE_THE_PLANET = 6,
  MISCELLANEOUS = 7,
  PLADFORM = 8
};
bool OkVideoCollectionsProvider_IsValid(int value);
const OkVideoCollectionsProvider OkVideoCollectionsProvider_MIN = VIDEOMORE;
const OkVideoCollectionsProvider OkVideoCollectionsProvider_MAX = PLADFORM;
const int OkVideoCollectionsProvider_ARRAYSIZE = OkVideoCollectionsProvider_MAX + 1;

const ::google::protobuf::EnumDescriptor* OkVideoCollectionsProvider_descriptor();
inline const ::std::string& OkVideoCollectionsProvider_Name(OkVideoCollectionsProvider value) {
  return ::google::protobuf::internal::NameOfEnum(
    OkVideoCollectionsProvider_descriptor(), value);
}
inline bool OkVideoCollectionsProvider_Parse(
    const ::std::string& name, OkVideoCollectionsProvider* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OkVideoCollectionsProvider>(
    OkVideoCollectionsProvider_descriptor(), name, value);
}
// ===================================================================

class KV : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.KV) */ {
 public:
  KV();
  virtual ~KV();

  KV(const KV& from);

  inline KV& operator=(const KV& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KV(KV&& from) noexcept
    : KV() {
    *this = ::std::move(from);
  }

  inline KV& operator=(KV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KV& default_instance();

  static inline const KV* internal_default_instance() {
    return reinterpret_cast<const KV*>(
               &_KV_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(KV* other);
  friend void swap(KV& a, KV& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KV* New() const PROTOBUF_FINAL { return New(NULL); }

  KV* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KV& from);
  void MergeFrom(const KV& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KV* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.KV)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Audio : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.Audio) */ {
 public:
  Audio();
  virtual ~Audio();

  Audio(const Audio& from);

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Audio(Audio&& from) noexcept
    : Audio() {
    *this = ::std::move(from);
  }

  inline Audio& operator=(Audio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Audio& default_instance();

  static inline const Audio* internal_default_instance() {
    return reinterpret_cast<const Audio*>(
               &_Audio_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Audio* other);
  friend void swap(Audio& a, Audio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Audio* New() const PROTOBUF_FINAL { return New(NULL); }

  Audio* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Audio& from);
  void MergeFrom(const Audio& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Audio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string author = 1;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // required string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.Audio)
 private:
  void set_has_author();
  void clear_has_author();
  void set_has_title();
  void clear_has_title();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address_Timetable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.Address.Timetable) */ {
 public:
  Address_Timetable();
  virtual ~Address_Timetable();

  Address_Timetable(const Address_Timetable& from);

  inline Address_Timetable& operator=(const Address_Timetable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address_Timetable(Address_Timetable&& from) noexcept
    : Address_Timetable() {
    *this = ::std::move(from);
  }

  inline Address_Timetable& operator=(Address_Timetable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address_Timetable& default_instance();

  static inline const Address_Timetable* internal_default_instance() {
    return reinterpret_cast<const Address_Timetable*>(
               &_Address_Timetable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Address_Timetable* other);
  friend void swap(Address_Timetable& a, Address_Timetable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address_Timetable* New() const PROTOBUF_FINAL { return New(NULL); }

  Address_Timetable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Address_Timetable& from);
  void MergeFrom(const Address_Timetable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Address_Timetable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string day = 1;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 1;
  const ::std::string& day() const;
  void set_day(const ::std::string& value);
  #if LANG_CXX11
  void set_day(::std::string&& value);
  #endif
  void set_day(const char* value);
  void set_day(const char* value, size_t size);
  ::std::string* mutable_day();
  ::std::string* release_day();
  void set_allocated_day(::std::string* day);

  // required int32 openTime = 2;
  bool has_opentime() const;
  void clear_opentime();
  static const int kOpenTimeFieldNumber = 2;
  ::google::protobuf::int32 opentime() const;
  void set_opentime(::google::protobuf::int32 value);

  // required int32 closeTime = 3;
  bool has_closetime() const;
  void clear_closetime();
  static const int kCloseTimeFieldNumber = 3;
  ::google::protobuf::int32 closetime() const;
  void set_closetime(::google::protobuf::int32 value);

  // required int32 breakOpenTime = 4;
  bool has_breakopentime() const;
  void clear_breakopentime();
  static const int kBreakOpenTimeFieldNumber = 4;
  ::google::protobuf::int32 breakopentime() const;
  void set_breakopentime(::google::protobuf::int32 value);

  // required int32 breakCloseTime = 5;
  bool has_breakclosetime() const;
  void clear_breakclosetime();
  static const int kBreakCloseTimeFieldNumber = 5;
  ::google::protobuf::int32 breakclosetime() const;
  void set_breakclosetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.Address.Timetable)
 private:
  void set_has_day();
  void clear_has_day();
  void set_has_opentime();
  void clear_has_opentime();
  void set_has_closetime();
  void clear_has_closetime();
  void set_has_breakopentime();
  void clear_has_breakopentime();
  void set_has_breakclosetime();
  void clear_has_breakclosetime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr day_;
  ::google::protobuf::int32 opentime_;
  ::google::protobuf::int32 closetime_;
  ::google::protobuf::int32 breakopentime_;
  ::google::protobuf::int32 breakclosetime_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const PROTOBUF_FINAL { return New(NULL); }

  Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Address_Timetable Timetable;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.social.Address.Timetable timetable = 11;
  int timetable_size() const;
  void clear_timetable();
  static const int kTimetableFieldNumber = 11;
  const ::ru::mail::go::social::Address_Timetable& timetable(int index) const;
  ::ru::mail::go::social::Address_Timetable* mutable_timetable(int index);
  ::ru::mail::go::social::Address_Timetable* add_timetable();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address_Timetable >*
      mutable_timetable();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address_Timetable >&
      timetable() const;

  // required string city = 6;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 6;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // required string address = 7;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 7;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string phone = 8;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 8;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // optional string title = 9;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 9;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required float lat = 1;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  float lat() const;
  void set_lat(float value);

  // required float lon = 2;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  float lon() const;
  void set_lon(float value);

  // required int32 rbCode = 3;
  bool has_rbcode() const;
  void clear_rbcode();
  static const int kRbCodeFieldNumber = 3;
  ::google::protobuf::int32 rbcode() const;
  void set_rbcode(::google::protobuf::int32 value);

  // required int32 countryId = 4;
  bool has_countryid() const;
  void clear_countryid();
  static const int kCountryIdFieldNumber = 4;
  ::google::protobuf::int32 countryid() const;
  void set_countryid(::google::protobuf::int32 value);

  // required int32 cityId = 5;
  bool has_cityid() const;
  void clear_cityid();
  static const int kCityIdFieldNumber = 5;
  ::google::protobuf::int32 cityid() const;
  void set_cityid(::google::protobuf::int32 value);

  // required .ru.mail.go.social.WorkInfo workInfo = 10;
  bool has_workinfo() const;
  void clear_workinfo();
  static const int kWorkInfoFieldNumber = 10;
  ::ru::mail::go::social::WorkInfo workinfo() const;
  void set_workinfo(::ru::mail::go::social::WorkInfo value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.Address)
 private:
  void set_has_lat();
  void clear_has_lat();
  void set_has_lon();
  void clear_has_lon();
  void set_has_rbcode();
  void clear_has_rbcode();
  void set_has_countryid();
  void clear_has_countryid();
  void set_has_cityid();
  void clear_has_cityid();
  void set_has_city();
  void clear_has_city();
  void set_has_address();
  void clear_has_address();
  void set_has_phone();
  void clear_has_phone();
  void set_has_title();
  void clear_has_title();
  void set_has_workinfo();
  void clear_has_workinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address_Timetable > timetable_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  float lat_;
  float lon_;
  ::google::protobuf::int32 rbcode_;
  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 cityid_;
  int workinfo_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.Profile) */ {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile& default_instance();

  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Profile* other);
  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const PROTOBUF_FINAL { return New(NULL); }

  Profile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string links = 10;
  int links_size() const;
  void clear_links();
  static const int kLinksFieldNumber = 10;
  const ::std::string& links(int index) const;
  ::std::string* mutable_links(int index);
  void set_links(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_links(int index, ::std::string&& value);
  #endif
  void set_links(int index, const char* value);
  void set_links(int index, const char* value, size_t size);
  ::std::string* add_links();
  void add_links(const ::std::string& value);
  #if LANG_CXX11
  void add_links(::std::string&& value);
  #endif
  void add_links(const char* value);
  void add_links(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& links() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_links();

  // repeated .ru.mail.go.social.KV extra = 11;
  int extra_size() const;
  void clear_extra();
  static const int kExtraFieldNumber = 11;
  const ::ru::mail::go::social::KV& extra(int index) const;
  ::ru::mail::go::social::KV* mutable_extra(int index);
  ::ru::mail::go::social::KV* add_extra();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >*
      mutable_extra();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >&
      extra() const;

  // repeated .ru.mail.go.social.Address address = 17;
  int address_size() const;
  void clear_address();
  static const int kAddressFieldNumber = 17;
  const ::ru::mail::go::social::Address& address(int index) const;
  ::ru::mail::go::social::Address* mutable_address(int index);
  ::ru::mail::go::social::Address* add_address();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address >*
      mutable_address();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address >&
      address() const;

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string login = 5;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 5;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  #if LANG_CXX11
  void set_login(::std::string&& value);
  #endif
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // optional string text = 6;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 6;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string url = 12;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 12;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string canonicalUrl = 14;
  bool has_canonicalurl() const;
  void clear_canonicalurl();
  static const int kCanonicalUrlFieldNumber = 14;
  const ::std::string& canonicalurl() const;
  void set_canonicalurl(const ::std::string& value);
  #if LANG_CXX11
  void set_canonicalurl(::std::string&& value);
  #endif
  void set_canonicalurl(const char* value);
  void set_canonicalurl(const char* value, size_t size);
  ::std::string* mutable_canonicalurl();
  ::std::string* release_canonicalurl();
  void set_allocated_canonicalurl(::std::string* canonicalurl);

  // optional uint64 followers = 8;
  bool has_followers() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 8;
  ::google::protobuf::uint64 followers() const;
  void set_followers(::google::protobuf::uint64 value);

  // optional uint64 following = 9;
  bool has_following() const;
  void clear_following();
  static const int kFollowingFieldNumber = 9;
  ::google::protobuf::uint64 following() const;
  void set_following(::google::protobuf::uint64 value);

  // optional uint64 last_seen = 18;
  bool has_last_seen() const;
  void clear_last_seen();
  static const int kLastSeenFieldNumber = 18;
  ::google::protobuf::uint64 last_seen() const;
  void set_last_seen(::google::protobuf::uint64 value);

  // required bool verified = 3;
  bool has_verified() const;
  void clear_verified();
  static const int kVerifiedFieldNumber = 3;
  bool verified() const;
  void set_verified(bool value);

  // required bool private = 4;
  bool has_private_() const;
  void clear_private_();
  static const int kPrivateFieldNumber = 4;
  bool private_() const;
  void set_private_(bool value);

  // optional bool group = 13 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_group() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_group();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kGroupFieldNumber = 13;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool group() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_group(bool value);

  // optional .ru.mail.go.social.Type type = 15;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 15;
  ::ru::mail::go::social::Type type() const;
  void set_type(::ru::mail::go::social::Type value);

  // optional .ru.mail.go.social.Source source = 16;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 16;
  ::ru::mail::go::social::Source source() const;
  void set_source(::ru::mail::go::social::Source value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.Profile)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_name();
  void clear_has_name();
  void set_has_verified();
  void clear_has_verified();
  void set_has_private_();
  void clear_has_private_();
  void set_has_login();
  void clear_has_login();
  void set_has_url();
  void clear_has_url();
  void set_has_canonicalurl();
  void clear_has_canonicalurl();
  void set_has_group();
  void clear_has_group();
  void set_has_text();
  void clear_has_text();
  void set_has_status();
  void clear_has_status();
  void set_has_followers();
  void clear_has_followers();
  void set_has_following();
  void clear_has_following();
  void set_has_type();
  void clear_has_type();
  void set_has_source();
  void clear_has_source();
  void set_has_last_seen();
  void clear_has_last_seen();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> links_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV > extra_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address > address_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr canonicalurl_;
  ::google::protobuf::uint64 followers_;
  ::google::protobuf::uint64 following_;
  ::google::protobuf::uint64 last_seen_;
  bool verified_;
  bool private__;
  bool group_;
  int type_;
  int source_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Post : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.Post) */ {
 public:
  Post();
  virtual ~Post();

  Post(const Post& from);

  inline Post& operator=(const Post& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Post(Post&& from) noexcept
    : Post() {
    *this = ::std::move(from);
  }

  inline Post& operator=(Post&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Post& default_instance();

  static inline const Post* internal_default_instance() {
    return reinterpret_cast<const Post*>(
               &_Post_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Post* other);
  friend void swap(Post& a, Post& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Post* New() const PROTOBUF_FINAL { return New(NULL); }

  Post* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Post& from);
  void MergeFrom(const Post& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Post* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string links = 10;
  int links_size() const;
  void clear_links();
  static const int kLinksFieldNumber = 10;
  const ::std::string& links(int index) const;
  ::std::string* mutable_links(int index);
  void set_links(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_links(int index, ::std::string&& value);
  #endif
  void set_links(int index, const char* value);
  void set_links(int index, const char* value, size_t size);
  ::std::string* add_links();
  void add_links(const ::std::string& value);
  #if LANG_CXX11
  void add_links(::std::string&& value);
  #endif
  void add_links(const char* value);
  void add_links(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& links() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_links();

  // repeated .ru.mail.go.social.KV extra = 13;
  int extra_size() const;
  void clear_extra();
  static const int kExtraFieldNumber = 13;
  const ::ru::mail::go::social::KV& extra(int index) const;
  ::ru::mail::go::social::KV* mutable_extra(int index);
  ::ru::mail::go::social::KV* add_extra();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >*
      mutable_extra();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >&
      extra() const;

  // repeated .ru.mail.go.social.Audio audios = 17;
  int audios_size() const;
  void clear_audios();
  static const int kAudiosFieldNumber = 17;
  const ::ru::mail::go::social::Audio& audios(int index) const;
  ::ru::mail::go::social::Audio* mutable_audios(int index);
  ::ru::mail::go::social::Audio* add_audios();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Audio >*
      mutable_audios();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Audio >&
      audios() const;

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string author_id = 2;
  bool has_author_id() const;
  void clear_author_id();
  static const int kAuthorIdFieldNumber = 2;
  const ::std::string& author_id() const;
  void set_author_id(const ::std::string& value);
  #if LANG_CXX11
  void set_author_id(::std::string&& value);
  #endif
  void set_author_id(const char* value);
  void set_author_id(const char* value, size_t size);
  ::std::string* mutable_author_id();
  ::std::string* release_author_id();
  void set_allocated_author_id(::std::string* author_id);

  // optional string repostedFrom = 3;
  bool has_repostedfrom() const;
  void clear_repostedfrom();
  static const int kRepostedFromFieldNumber = 3;
  const ::std::string& repostedfrom() const;
  void set_repostedfrom(const ::std::string& value);
  #if LANG_CXX11
  void set_repostedfrom(::std::string&& value);
  #endif
  void set_repostedfrom(const char* value);
  void set_repostedfrom(const char* value, size_t size);
  ::std::string* mutable_repostedfrom();
  ::std::string* release_repostedfrom();
  void set_allocated_repostedfrom(::std::string* repostedfrom);

  // required string url = 5;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 5;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string text = 6;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 6;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string title = 11;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 11;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string youlaId = 18;
  bool has_youlaid() const;
  void clear_youlaid();
  static const int kYoulaIdFieldNumber = 18;
  const ::std::string& youlaid() const;
  void set_youlaid(const ::std::string& value);
  #if LANG_CXX11
  void set_youlaid(::std::string&& value);
  #endif
  void set_youlaid(const char* value);
  void set_youlaid(const char* value, size_t size);
  ::std::string* mutable_youlaid();
  ::std::string* release_youlaid();
  void set_allocated_youlaid(::std::string* youlaid);

  // optional .ru.mail.go.social.YoulaAd youlaAd = 19;
  bool has_youlaad() const;
  void clear_youlaad();
  static const int kYoulaAdFieldNumber = 19;
  const ::ru::mail::go::social::YoulaAd& youlaad() const;
  ::ru::mail::go::social::YoulaAd* mutable_youlaad();
  ::ru::mail::go::social::YoulaAd* release_youlaad();
  void set_allocated_youlaad(::ru::mail::go::social::YoulaAd* youlaad);

  // required uint64 pubDate = 4;
  bool has_pubdate() const;
  void clear_pubdate();
  static const int kPubDateFieldNumber = 4;
  ::google::protobuf::uint64 pubdate() const;
  void set_pubdate(::google::protobuf::uint64 value);

  // optional int64 cntLike = 7;
  bool has_cntlike() const;
  void clear_cntlike();
  static const int kCntLikeFieldNumber = 7;
  ::google::protobuf::int64 cntlike() const;
  void set_cntlike(::google::protobuf::int64 value);

  // optional int64 cntShare = 8;
  bool has_cntshare() const;
  void clear_cntshare();
  static const int kCntShareFieldNumber = 8;
  ::google::protobuf::int64 cntshare() const;
  void set_cntshare(::google::protobuf::int64 value);

  // optional int64 cntView = 9;
  bool has_cntview() const;
  void clear_cntview();
  static const int kCntViewFieldNumber = 9;
  ::google::protobuf::int64 cntview() const;
  void set_cntview(::google::protobuf::int64 value);

  // optional int64 cntComment = 12;
  bool has_cntcomment() const;
  void clear_cntcomment();
  static const int kCntCommentFieldNumber = 12;
  ::google::protobuf::int64 cntcomment() const;
  void set_cntcomment(::google::protobuf::int64 value);

  // optional bool private = 16;
  bool has_private_() const;
  void clear_private_();
  static const int kPrivateFieldNumber = 16;
  bool private_() const;
  void set_private_(bool value);

  // optional .ru.mail.go.social.Type type = 14;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 14;
  ::ru::mail::go::social::Type type() const;
  void set_type(::ru::mail::go::social::Type value);

  // optional .ru.mail.go.social.Source source = 15;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 15;
  ::ru::mail::go::social::Source source() const;
  void set_source(::ru::mail::go::social::Source value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.Post)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_author_id();
  void clear_has_author_id();
  void set_has_repostedfrom();
  void clear_has_repostedfrom();
  void set_has_pubdate();
  void clear_has_pubdate();
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();
  void set_has_text();
  void clear_has_text();
  void set_has_cntlike();
  void clear_has_cntlike();
  void set_has_cntshare();
  void clear_has_cntshare();
  void set_has_cntview();
  void clear_has_cntview();
  void set_has_cntcomment();
  void clear_has_cntcomment();
  void set_has_type();
  void clear_has_type();
  void set_has_source();
  void clear_has_source();
  void set_has_private_();
  void clear_has_private_();
  void set_has_youlaid();
  void clear_has_youlaid();
  void set_has_youlaad();
  void clear_has_youlaad();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> links_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV > extra_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Audio > audios_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr author_id_;
  ::google::protobuf::internal::ArenaStringPtr repostedfrom_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr youlaid_;
  ::ru::mail::go::social::YoulaAd* youlaad_;
  ::google::protobuf::uint64 pubdate_;
  ::google::protobuf::int64 cntlike_;
  ::google::protobuf::int64 cntshare_;
  ::google::protobuf::int64 cntview_;
  ::google::protobuf::int64 cntcomment_;
  bool private__;
  int type_;
  int source_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoCollection_Video : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.VideoCollection.Video) */ {
 public:
  VideoCollection_Video();
  virtual ~VideoCollection_Video();

  VideoCollection_Video(const VideoCollection_Video& from);

  inline VideoCollection_Video& operator=(const VideoCollection_Video& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoCollection_Video(VideoCollection_Video&& from) noexcept
    : VideoCollection_Video() {
    *this = ::std::move(from);
  }

  inline VideoCollection_Video& operator=(VideoCollection_Video&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoCollection_Video& default_instance();

  static inline const VideoCollection_Video* internal_default_instance() {
    return reinterpret_cast<const VideoCollection_Video*>(
               &_VideoCollection_Video_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VideoCollection_Video* other);
  friend void swap(VideoCollection_Video& a, VideoCollection_Video& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoCollection_Video* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoCollection_Video* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoCollection_Video& from);
  void MergeFrom(const VideoCollection_Video& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoCollection_Video* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required int64 pubdate = 4;
  bool has_pubdate() const;
  void clear_pubdate();
  static const int kPubdateFieldNumber = 4;
  ::google::protobuf::int64 pubdate() const;
  void set_pubdate(::google::protobuf::int64 value);

  // required int32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.VideoCollection.Video)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_url();
  void clear_has_url();
  void set_has_duration();
  void clear_has_duration();
  void set_has_pubdate();
  void clear_has_pubdate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int64 pubdate_;
  ::google::protobuf::int32 duration_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.VideoCollection) */ {
 public:
  VideoCollection();
  virtual ~VideoCollection();

  VideoCollection(const VideoCollection& from);

  inline VideoCollection& operator=(const VideoCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoCollection(VideoCollection&& from) noexcept
    : VideoCollection() {
    *this = ::std::move(from);
  }

  inline VideoCollection& operator=(VideoCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoCollection& default_instance();

  static inline const VideoCollection* internal_default_instance() {
    return reinterpret_cast<const VideoCollection*>(
               &_VideoCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VideoCollection* other);
  friend void swap(VideoCollection& a, VideoCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoCollection& from);
  void MergeFrom(const VideoCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VideoCollection_Video Video;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.social.VideoCollection.Video videos = 7;
  int videos_size() const;
  void clear_videos();
  static const int kVideosFieldNumber = 7;
  const ::ru::mail::go::social::VideoCollection_Video& videos(int index) const;
  ::ru::mail::go::social::VideoCollection_Video* mutable_videos(int index);
  ::ru::mail::go::social::VideoCollection_Video* add_videos();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::VideoCollection_Video >*
      mutable_videos();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::VideoCollection_Video >&
      videos() const;

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string author_id = 2;
  bool has_author_id() const;
  void clear_author_id();
  static const int kAuthorIdFieldNumber = 2;
  const ::std::string& author_id() const;
  void set_author_id(const ::std::string& value);
  #if LANG_CXX11
  void set_author_id(::std::string&& value);
  #endif
  void set_author_id(const char* value);
  void set_author_id(const char* value, size_t size);
  ::std::string* mutable_author_id();
  ::std::string* release_author_id();
  void set_allocated_author_id(::std::string* author_id);

  // required string url = 4;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 4;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string title = 5;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required uint64 pubDate = 3;
  bool has_pubdate() const;
  void clear_pubdate();
  static const int kPubDateFieldNumber = 3;
  ::google::protobuf::uint64 pubdate() const;
  void set_pubdate(::google::protobuf::uint64 value);

  // required int32 count = 6;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.VideoCollection)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_author_id();
  void clear_has_author_id();
  void set_has_pubdate();
  void clear_has_pubdate();
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::VideoCollection_Video > videos_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr author_id_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::uint64 pubdate_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Counters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.Counters) */ {
 public:
  Counters();
  virtual ~Counters();

  Counters(const Counters& from);

  inline Counters& operator=(const Counters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Counters(Counters&& from) noexcept
    : Counters() {
    *this = ::std::move(from);
  }

  inline Counters& operator=(Counters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Counters& default_instance();

  static inline const Counters* internal_default_instance() {
    return reinterpret_cast<const Counters*>(
               &_Counters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Counters* other);
  friend void swap(Counters& a, Counters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Counters* New() const PROTOBUF_FINAL { return New(NULL); }

  Counters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Counters& from);
  void MergeFrom(const Counters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Counters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 likes = 1;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 1;
  ::google::protobuf::int64 likes() const;
  void set_likes(::google::protobuf::int64 value);

  // optional int64 comments = 2;
  bool has_comments() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 2;
  ::google::protobuf::int64 comments() const;
  void set_comments(::google::protobuf::int64 value);

  // optional int64 shares = 3;
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 3;
  ::google::protobuf::int64 shares() const;
  void set_shares(::google::protobuf::int64 value);

  // optional int64 views = 4;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 4;
  ::google::protobuf::int64 views() const;
  void set_views(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.Counters)
 private:
  void set_has_likes();
  void clear_has_likes();
  void set_has_comments();
  void clear_has_comments();
  void set_has_shares();
  void clear_has_shares();
  void set_has_views();
  void clear_has_views();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 likes_;
  ::google::protobuf::int64 comments_;
  ::google::protobuf::int64 shares_;
  ::google::protobuf::int64 views_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImgAttaches : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.ImgAttaches) */ {
 public:
  ImgAttaches();
  virtual ~ImgAttaches();

  ImgAttaches(const ImgAttaches& from);

  inline ImgAttaches& operator=(const ImgAttaches& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImgAttaches(ImgAttaches&& from) noexcept
    : ImgAttaches() {
    *this = ::std::move(from);
  }

  inline ImgAttaches& operator=(ImgAttaches&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImgAttaches& default_instance();

  static inline const ImgAttaches* internal_default_instance() {
    return reinterpret_cast<const ImgAttaches*>(
               &_ImgAttaches_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ImgAttaches* other);
  friend void swap(ImgAttaches& a, ImgAttaches& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImgAttaches* New() const PROTOBUF_FINAL { return New(NULL); }

  ImgAttaches* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImgAttaches& from);
  void MergeFrom(const ImgAttaches& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImgAttaches* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.fetcher.fetcher_image img = 1;
  int img_size() const;
  void clear_img();
  static const int kImgFieldNumber = 1;
  const ::gogo::fetcher::fetcher_image& img(int index) const;
  ::gogo::fetcher::fetcher_image* mutable_img(int index);
  ::gogo::fetcher::fetcher_image* add_img();
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
      mutable_img();
  const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
      img() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.ImgAttaches)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image > img_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Face : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.Face) */ {
 public:
  Face();
  virtual ~Face();

  Face(const Face& from);

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Face(Face&& from) noexcept
    : Face() {
    *this = ::std::move(from);
  }

  inline Face& operator=(Face&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Face& default_instance();

  static inline const Face* internal_default_instance() {
    return reinterpret_cast<const Face*>(
               &_Face_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Face* other);
  friend void swap(Face& a, Face& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Face* New() const PROTOBUF_FINAL { return New(NULL); }

  Face* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Face* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float v = 4 [packed = true];
  int v_size() const;
  void clear_v();
  static const int kVFieldNumber = 4;
  float v(int index) const;
  void set_v(int index, float value);
  void add_v(float value);
  const ::google::protobuf::RepeatedField< float >&
      v() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_v();

  // required .gogo.fetcher.fetcher_image img = 2;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 2;
  const ::gogo::fetcher::fetcher_image& img() const;
  ::gogo::fetcher::fetcher_image* mutable_img();
  ::gogo::fetcher::fetcher_image* release_img();
  void set_allocated_img(::gogo::fetcher::fetcher_image* img);

  // required uint64 photo_id = 1;
  bool has_photo_id() const;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 1;
  ::google::protobuf::uint64 photo_id() const;
  void set_photo_id(::google::protobuf::uint64 value);

  // required float confidence = 3;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.Face)
 private:
  void set_has_photo_id();
  void clear_has_photo_id();
  void set_has_img();
  void clear_has_img();
  void set_has_confidence();
  void clear_has_confidence();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > v_;
  mutable int _v_cached_byte_size_;
  ::gogo::fetcher::fetcher_image* img_;
  ::google::protobuf::uint64 photo_id_;
  float confidence_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FacesInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.FacesInfo) */ {
 public:
  FacesInfo();
  virtual ~FacesInfo();

  FacesInfo(const FacesInfo& from);

  inline FacesInfo& operator=(const FacesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FacesInfo(FacesInfo&& from) noexcept
    : FacesInfo() {
    *this = ::std::move(from);
  }

  inline FacesInfo& operator=(FacesInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FacesInfo& default_instance();

  static inline const FacesInfo* internal_default_instance() {
    return reinterpret_cast<const FacesInfo*>(
               &_FacesInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(FacesInfo* other);
  friend void swap(FacesInfo& a, FacesInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FacesInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FacesInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FacesInfo& from);
  void MergeFrom(const FacesInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FacesInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bad = 1;
  int bad_size() const;
  void clear_bad();
  static const int kBadFieldNumber = 1;
  ::google::protobuf::uint64 bad(int index) const;
  void set_bad(int index, ::google::protobuf::uint64 value);
  void add_bad(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bad();

  // repeated .ru.mail.go.social.Face faces = 2;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 2;
  const ::ru::mail::go::social::Face& faces(int index) const;
  ::ru::mail::go::social::Face* mutable_faces(int index);
  ::ru::mail::go::social::Face* add_faces();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Face >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Face >&
      faces() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.FacesInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bad_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Face > faces_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PutRequest_Origin Origin;
  static const Origin wpII =
    PutRequest_Origin_wpII;
  static const Origin message =
    PutRequest_Origin_message;
  static const Origin longread =
    PutRequest_Origin_longread;
  static const Origin userActivity =
    PutRequest_Origin_userActivity;
  static inline bool Origin_IsValid(int value) {
    return PutRequest_Origin_IsValid(value);
  }
  static const Origin Origin_MIN =
    PutRequest_Origin_Origin_MIN;
  static const Origin Origin_MAX =
    PutRequest_Origin_Origin_MAX;
  static const int Origin_ARRAYSIZE =
    PutRequest_Origin_Origin_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Origin_descriptor() {
    return PutRequest_Origin_descriptor();
  }
  static inline const ::std::string& Origin_Name(Origin value) {
    return PutRequest_Origin_Name(value);
  }
  static inline bool Origin_Parse(const ::std::string& name,
      Origin* value) {
    return PutRequest_Origin_Parse(name, value);
  }

  typedef PutRequest_Fastbase Fastbase;
  static const Fastbase PROD =
    PutRequest_Fastbase_PROD;
  static const Fastbase RM_TTL =
    PutRequest_Fastbase_RM_TTL;
  static const Fastbase RM_KAFKA =
    PutRequest_Fastbase_RM_KAFKA;
  static inline bool Fastbase_IsValid(int value) {
    return PutRequest_Fastbase_IsValid(value);
  }
  static const Fastbase Fastbase_MIN =
    PutRequest_Fastbase_Fastbase_MIN;
  static const Fastbase Fastbase_MAX =
    PutRequest_Fastbase_Fastbase_MAX;
  static const int Fastbase_ARRAYSIZE =
    PutRequest_Fastbase_Fastbase_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Fastbase_descriptor() {
    return PutRequest_Fastbase_descriptor();
  }
  static inline const ::std::string& Fastbase_Name(Fastbase value) {
    return PutRequest_Fastbase_Name(value);
  }
  static inline bool Fastbase_Parse(const ::std::string& name,
      Fastbase* value) {
    return PutRequest_Fastbase_Parse(name, value);
  }

  typedef PutRequest_Destination Destination;
  static const Destination SOCIAL =
    PutRequest_Destination_SOCIAL;
  static const Destination FACES =
    PutRequest_Destination_FACES;
  static inline bool Destination_IsValid(int value) {
    return PutRequest_Destination_IsValid(value);
  }
  static const Destination Destination_MIN =
    PutRequest_Destination_Destination_MIN;
  static const Destination Destination_MAX =
    PutRequest_Destination_Destination_MAX;
  static const int Destination_ARRAYSIZE =
    PutRequest_Destination_Destination_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Destination_descriptor() {
    return PutRequest_Destination_descriptor();
  }
  static inline const ::std::string& Destination_Name(Destination value) {
    return PutRequest_Destination_Name(value);
  }
  static inline bool Destination_Parse(const ::std::string& name,
      Destination* value) {
    return PutRequest_Destination_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string profile_url = 6;
  bool has_profile_url() const;
  void clear_profile_url();
  static const int kProfileUrlFieldNumber = 6;
  const ::std::string& profile_url() const;
  void set_profile_url(const ::std::string& value);
  #if LANG_CXX11
  void set_profile_url(::std::string&& value);
  #endif
  void set_profile_url(const char* value);
  void set_profile_url(const char* value, size_t size);
  ::std::string* mutable_profile_url();
  ::std::string* release_profile_url();
  void set_allocated_profile_url(::std::string* profile_url);

  // optional .ru.mail.go.social.Post post = 3;
  bool has_post() const;
  void clear_post();
  static const int kPostFieldNumber = 3;
  const ::ru::mail::go::social::Post& post() const;
  ::ru::mail::go::social::Post* mutable_post();
  ::ru::mail::go::social::Post* release_post();
  void set_allocated_post(::ru::mail::go::social::Post* post);

  // optional .ru.mail.go.social.Profile profile = 4;
  bool has_profile() const;
  void clear_profile();
  static const int kProfileFieldNumber = 4;
  const ::ru::mail::go::social::Profile& profile() const;
  ::ru::mail::go::social::Profile* mutable_profile();
  ::ru::mail::go::social::Profile* release_profile();
  void set_allocated_profile(::ru::mail::go::social::Profile* profile);

  // optional .ru.mail.go.social.ImgAttaches attaches = 5;
  bool has_attaches() const;
  void clear_attaches();
  static const int kAttachesFieldNumber = 5;
  const ::ru::mail::go::social::ImgAttaches& attaches() const;
  ::ru::mail::go::social::ImgAttaches* mutable_attaches();
  ::ru::mail::go::social::ImgAttaches* release_attaches();
  void set_allocated_attaches(::ru::mail::go::social::ImgAttaches* attaches);

  // optional .ru.mail.go.social.Status status = 8;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 8;
  const ::ru::mail::go::social::Status& status() const;
  ::ru::mail::go::social::Status* mutable_status();
  ::ru::mail::go::social::Status* release_status();
  void set_allocated_status(::ru::mail::go::social::Status* status);

  // optional .ru.mail.go.social.Counters counters = 10;
  bool has_counters() const;
  void clear_counters();
  static const int kCountersFieldNumber = 10;
  const ::ru::mail::go::social::Counters& counters() const;
  ::ru::mail::go::social::Counters* mutable_counters();
  ::ru::mail::go::social::Counters* release_counters();
  void set_allocated_counters(::ru::mail::go::social::Counters* counters);

  // required uint64 ts = 2;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // optional int64 last_event_attempt = 11;
  bool has_last_event_attempt() const;
  void clear_last_event_attempt();
  static const int kLastEventAttemptFieldNumber = 11;
  ::google::protobuf::int64 last_event_attempt() const;
  void set_last_event_attempt(::google::protobuf::int64 value);

  // optional bool noFetch = 12;
  bool has_nofetch() const;
  void clear_nofetch();
  static const int kNoFetchFieldNumber = 12;
  bool nofetch() const;
  void set_nofetch(bool value);

  // optional bool noIndex = 13;
  bool has_noindex() const;
  void clear_noindex();
  static const int kNoIndexFieldNumber = 13;
  bool noindex() const;
  void set_noindex(bool value);

  // optional .ru.mail.go.social.PutRequest.Destination dest = 14 [default = SOCIAL];
  bool has_dest() const;
  void clear_dest();
  static const int kDestFieldNumber = 14;
  ::ru::mail::go::social::PutRequest_Destination dest() const;
  void set_dest(::ru::mail::go::social::PutRequest_Destination value);

  // optional .ru.mail.go.social.PutRequest.Origin origin = 7;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 7;
  ::ru::mail::go::social::PutRequest_Origin origin() const;
  void set_origin(::ru::mail::go::social::PutRequest_Origin value);

  // optional .ru.mail.go.social.PutRequest.Fastbase fastbase = 9;
  bool has_fastbase() const;
  void clear_fastbase();
  static const int kFastbaseFieldNumber = 9;
  ::ru::mail::go::social::PutRequest_Fastbase fastbase() const;
  void set_fastbase(::ru::mail::go::social::PutRequest_Fastbase value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.PutRequest)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_ts();
  void clear_has_ts();
  void set_has_post();
  void clear_has_post();
  void set_has_profile();
  void clear_has_profile();
  void set_has_attaches();
  void clear_has_attaches();
  void set_has_profile_url();
  void clear_has_profile_url();
  void set_has_origin();
  void clear_has_origin();
  void set_has_status();
  void clear_has_status();
  void set_has_fastbase();
  void clear_has_fastbase();
  void set_has_counters();
  void clear_has_counters();
  void set_has_last_event_attempt();
  void clear_has_last_event_attempt();
  void set_has_nofetch();
  void clear_has_nofetch();
  void set_has_noindex();
  void clear_has_noindex();
  void set_has_dest();
  void clear_has_dest();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr profile_url_;
  ::ru::mail::go::social::Post* post_;
  ::ru::mail::go::social::Profile* profile_;
  ::ru::mail::go::social::ImgAttaches* attaches_;
  ::ru::mail::go::social::Status* status_;
  ::ru::mail::go::social::Counters* counters_;
  ::google::protobuf::uint64 ts_;
  ::google::protobuf::int64 last_event_attempt_;
  bool nofetch_;
  bool noindex_;
  int dest_;
  int origin_;
  int fastbase_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginResolveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.LoginResolveRequest) */ {
 public:
  LoginResolveRequest();
  virtual ~LoginResolveRequest();

  LoginResolveRequest(const LoginResolveRequest& from);

  inline LoginResolveRequest& operator=(const LoginResolveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResolveRequest(LoginResolveRequest&& from) noexcept
    : LoginResolveRequest() {
    *this = ::std::move(from);
  }

  inline LoginResolveRequest& operator=(LoginResolveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResolveRequest& default_instance();

  static inline const LoginResolveRequest* internal_default_instance() {
    return reinterpret_cast<const LoginResolveRequest*>(
               &_LoginResolveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(LoginResolveRequest* other);
  friend void swap(LoginResolveRequest& a, LoginResolveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResolveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResolveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginResolveRequest& from);
  void MergeFrom(const LoginResolveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginResolveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LoginResolveRequest_request_t request_t;
  static const request_t key_primary =
    LoginResolveRequest_request_t_key_primary;
  static const request_t reposted_from_primary =
    LoginResolveRequest_request_t_reposted_from_primary;
  static inline bool request_t_IsValid(int value) {
    return LoginResolveRequest_request_t_IsValid(value);
  }
  static const request_t request_t_MIN =
    LoginResolveRequest_request_t_request_t_MIN;
  static const request_t request_t_MAX =
    LoginResolveRequest_request_t_request_t_MAX;
  static const int request_t_ARRAYSIZE =
    LoginResolveRequest_request_t_request_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  request_t_descriptor() {
    return LoginResolveRequest_request_t_descriptor();
  }
  static inline const ::std::string& request_t_Name(request_t value) {
    return LoginResolveRequest_request_t_Name(value);
  }
  static inline bool request_t_Parse(const ::std::string& name,
      request_t* value) {
    return LoginResolveRequest_request_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.social.LoginResolveRequest.request_t request = 1;
  int request_size() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  ::ru::mail::go::social::LoginResolveRequest_request_t request(int index) const;
  void set_request(int index, ::ru::mail::go::social::LoginResolveRequest_request_t value);
  void add_request(::ru::mail::go::social::LoginResolveRequest_request_t value);
  const ::google::protobuf::RepeatedField<int>& request() const;
  ::google::protobuf::RepeatedField<int>* mutable_request();

  // required .ru.mail.go.social.PutRequest put = 2;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 2;
  const ::ru::mail::go::social::PutRequest& put() const;
  ::ru::mail::go::social::PutRequest* mutable_put();
  ::ru::mail::go::social::PutRequest* release_put();
  void set_allocated_put(::ru::mail::go::social::PutRequest* put);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.LoginResolveRequest)
 private:
  void set_has_put();
  void clear_has_put();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> request_;
  ::ru::mail::go::social::PutRequest* put_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const PROTOBUF_FINAL { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Status_CheckType CheckType;
  static const CheckType IMPORT =
    Status_CheckType_IMPORT;
  static const CheckType VK_MESSAGES =
    Status_CheckType_VK_MESSAGES;
  static const CheckType API_FETCH =
    Status_CheckType_API_FETCH;
  static const CheckType RB_IMPORT =
    Status_CheckType_RB_IMPORT;
  static const CheckType OWNER_DELETED =
    Status_CheckType_OWNER_DELETED;
  static const CheckType OK_USER_ACTIVITY =
    Status_CheckType_OK_USER_ACTIVITY;
  static const CheckType YOULA_NOT_ACTUAL =
    Status_CheckType_YOULA_NOT_ACTUAL;
  static inline bool CheckType_IsValid(int value) {
    return Status_CheckType_IsValid(value);
  }
  static const CheckType CheckType_MIN =
    Status_CheckType_CheckType_MIN;
  static const CheckType CheckType_MAX =
    Status_CheckType_CheckType_MAX;
  static const int CheckType_ARRAYSIZE =
    Status_CheckType_CheckType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CheckType_descriptor() {
    return Status_CheckType_descriptor();
  }
  static inline const ::std::string& CheckType_Name(CheckType value) {
    return Status_CheckType_Name(value);
  }
  static inline bool CheckType_Parse(const ::std::string& name,
      CheckType* value) {
    return Status_CheckType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bool alive = 1;
  bool has_alive() const;
  void clear_alive();
  static const int kAliveFieldNumber = 1;
  bool alive() const;
  void set_alive(bool value);

  // required .ru.mail.go.social.Status.CheckType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ru::mail::go::social::Status_CheckType type() const;
  void set_type(::ru::mail::go::social::Status_CheckType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.Status)
 private:
  void set_has_alive();
  void clear_has_alive();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool alive_;
  int type_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UrlList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.UrlList) */ {
 public:
  UrlList();
  virtual ~UrlList();

  UrlList(const UrlList& from);

  inline UrlList& operator=(const UrlList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UrlList(UrlList&& from) noexcept
    : UrlList() {
    *this = ::std::move(from);
  }

  inline UrlList& operator=(UrlList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UrlList& default_instance();

  static inline const UrlList* internal_default_instance() {
    return reinterpret_cast<const UrlList*>(
               &_UrlList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UrlList* other);
  friend void swap(UrlList& a, UrlList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UrlList* New() const PROTOBUF_FINAL { return New(NULL); }

  UrlList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UrlList& from);
  void MergeFrom(const UrlList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UrlList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string urls = 1;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 1;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_urls(int index, ::std::string&& value);
  #endif
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_urls(::std::string&& value);
  #endif
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.UrlList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GatewayRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.GatewayRecord) */ {
 public:
  GatewayRecord();
  virtual ~GatewayRecord();

  GatewayRecord(const GatewayRecord& from);

  inline GatewayRecord& operator=(const GatewayRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GatewayRecord(GatewayRecord&& from) noexcept
    : GatewayRecord() {
    *this = ::std::move(from);
  }

  inline GatewayRecord& operator=(GatewayRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GatewayRecord& default_instance();

  static inline const GatewayRecord* internal_default_instance() {
    return reinterpret_cast<const GatewayRecord*>(
               &_GatewayRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GatewayRecord* other);
  friend void swap(GatewayRecord& a, GatewayRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GatewayRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  GatewayRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GatewayRecord& from);
  void MergeFrom(const GatewayRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GatewayRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string socialId = 1;
  bool has_socialid() const;
  void clear_socialid();
  static const int kSocialIdFieldNumber = 1;
  const ::std::string& socialid() const;
  void set_socialid(const ::std::string& value);
  #if LANG_CXX11
  void set_socialid(::std::string&& value);
  #endif
  void set_socialid(const char* value);
  void set_socialid(const char* value, size_t size);
  ::std::string* mutable_socialid();
  ::std::string* release_socialid();
  void set_allocated_socialid(::std::string* socialid);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional bytes value = 6;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional int64 value64 = 4;
  bool has_value64() const;
  void clear_value64();
  static const int kValue64FieldNumber = 4;
  ::google::protobuf::int64 value64() const;
  void set_value64(::google::protobuf::int64 value);

  // optional int32 targetId = 3;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // optional int32 value32 = 5;
  bool has_value32() const;
  void clear_value32();
  static const int kValue32FieldNumber = 5;
  ::google::protobuf::int32 value32() const;
  void set_value32(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.GatewayRecord)
 private:
  void set_has_socialid();
  void clear_has_socialid();
  void set_has_url();
  void clear_has_url();
  void set_has_targetid();
  void clear_has_targetid();
  void set_has_value64();
  void clear_has_value64();
  void set_has_value32();
  void clear_has_value32();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr socialid_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int64 value64_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 value32_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileExplorerResponse_Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.ProfileExplorerResponse.Body) */ {
 public:
  ProfileExplorerResponse_Body();
  virtual ~ProfileExplorerResponse_Body();

  ProfileExplorerResponse_Body(const ProfileExplorerResponse_Body& from);

  inline ProfileExplorerResponse_Body& operator=(const ProfileExplorerResponse_Body& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileExplorerResponse_Body(ProfileExplorerResponse_Body&& from) noexcept
    : ProfileExplorerResponse_Body() {
    *this = ::std::move(from);
  }

  inline ProfileExplorerResponse_Body& operator=(ProfileExplorerResponse_Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileExplorerResponse_Body& default_instance();

  static inline const ProfileExplorerResponse_Body* internal_default_instance() {
    return reinterpret_cast<const ProfileExplorerResponse_Body*>(
               &_ProfileExplorerResponse_Body_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ProfileExplorerResponse_Body* other);
  friend void swap(ProfileExplorerResponse_Body& a, ProfileExplorerResponse_Body& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileExplorerResponse_Body* New() const PROTOBUF_FINAL { return New(NULL); }

  ProfileExplorerResponse_Body* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProfileExplorerResponse_Body& from);
  void MergeFrom(const ProfileExplorerResponse_Body& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProfileExplorerResponse_Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string vkFriendsIds = 1;
  int vkfriendsids_size() const;
  void clear_vkfriendsids();
  static const int kVkFriendsIdsFieldNumber = 1;
  const ::std::string& vkfriendsids(int index) const;
  ::std::string* mutable_vkfriendsids(int index);
  void set_vkfriendsids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vkfriendsids(int index, ::std::string&& value);
  #endif
  void set_vkfriendsids(int index, const char* value);
  void set_vkfriendsids(int index, const char* value, size_t size);
  ::std::string* add_vkfriendsids();
  void add_vkfriendsids(const ::std::string& value);
  #if LANG_CXX11
  void add_vkfriendsids(::std::string&& value);
  #endif
  void add_vkfriendsids(const char* value);
  void add_vkfriendsids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& vkfriendsids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vkfriendsids();

  // repeated string vkSubGroupsIds = 2;
  int vksubgroupsids_size() const;
  void clear_vksubgroupsids();
  static const int kVkSubGroupsIdsFieldNumber = 2;
  const ::std::string& vksubgroupsids(int index) const;
  ::std::string* mutable_vksubgroupsids(int index);
  void set_vksubgroupsids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vksubgroupsids(int index, ::std::string&& value);
  #endif
  void set_vksubgroupsids(int index, const char* value);
  void set_vksubgroupsids(int index, const char* value, size_t size);
  ::std::string* add_vksubgroupsids();
  void add_vksubgroupsids(const ::std::string& value);
  #if LANG_CXX11
  void add_vksubgroupsids(::std::string&& value);
  #endif
  void add_vksubgroupsids(const char* value);
  void add_vksubgroupsids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& vksubgroupsids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vksubgroupsids();

  // repeated string vkSubUsersIds = 3;
  int vksubusersids_size() const;
  void clear_vksubusersids();
  static const int kVkSubUsersIdsFieldNumber = 3;
  const ::std::string& vksubusersids(int index) const;
  ::std::string* mutable_vksubusersids(int index);
  void set_vksubusersids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vksubusersids(int index, ::std::string&& value);
  #endif
  void set_vksubusersids(int index, const char* value);
  void set_vksubusersids(int index, const char* value, size_t size);
  ::std::string* add_vksubusersids();
  void add_vksubusersids(const ::std::string& value);
  #if LANG_CXX11
  void add_vksubusersids(::std::string&& value);
  #endif
  void add_vksubusersids(const char* value);
  void add_vksubusersids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& vksubusersids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vksubusersids();

  // repeated string okFriendsIds = 4;
  int okfriendsids_size() const;
  void clear_okfriendsids();
  static const int kOkFriendsIdsFieldNumber = 4;
  const ::std::string& okfriendsids(int index) const;
  ::std::string* mutable_okfriendsids(int index);
  void set_okfriendsids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_okfriendsids(int index, ::std::string&& value);
  #endif
  void set_okfriendsids(int index, const char* value);
  void set_okfriendsids(int index, const char* value, size_t size);
  ::std::string* add_okfriendsids();
  void add_okfriendsids(const ::std::string& value);
  #if LANG_CXX11
  void add_okfriendsids(::std::string&& value);
  #endif
  void add_okfriendsids(const char* value);
  void add_okfriendsids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& okfriendsids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_okfriendsids();

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.ProfileExplorerResponse.Body)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vkfriendsids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vksubgroupsids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vksubusersids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> okfriendsids_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileExplorerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.ProfileExplorerResponse) */ {
 public:
  ProfileExplorerResponse();
  virtual ~ProfileExplorerResponse();

  ProfileExplorerResponse(const ProfileExplorerResponse& from);

  inline ProfileExplorerResponse& operator=(const ProfileExplorerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileExplorerResponse(ProfileExplorerResponse&& from) noexcept
    : ProfileExplorerResponse() {
    *this = ::std::move(from);
  }

  inline ProfileExplorerResponse& operator=(ProfileExplorerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileExplorerResponse& default_instance();

  static inline const ProfileExplorerResponse* internal_default_instance() {
    return reinterpret_cast<const ProfileExplorerResponse*>(
               &_ProfileExplorerResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ProfileExplorerResponse* other);
  friend void swap(ProfileExplorerResponse& a, ProfileExplorerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileExplorerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ProfileExplorerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProfileExplorerResponse& from);
  void MergeFrom(const ProfileExplorerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProfileExplorerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProfileExplorerResponse_Body Body;

  // accessors -------------------------------------------------------

  // optional string error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // optional .ru.mail.go.social.ProfileExplorerResponse.Body body = 1;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 1;
  const ::ru::mail::go::social::ProfileExplorerResponse_Body& body() const;
  ::ru::mail::go::social::ProfileExplorerResponse_Body* mutable_body();
  ::ru::mail::go::social::ProfileExplorerResponse_Body* release_body();
  void set_allocated_body(::ru::mail::go::social::ProfileExplorerResponse_Body* body);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.ProfileExplorerResponse)
 private:
  void set_has_body();
  void clear_has_body();
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::ru::mail::go::social::ProfileExplorerResponse_Body* body_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeoStats_Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.GeoStats.Record) */ {
 public:
  GeoStats_Record();
  virtual ~GeoStats_Record();

  GeoStats_Record(const GeoStats_Record& from);

  inline GeoStats_Record& operator=(const GeoStats_Record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoStats_Record(GeoStats_Record&& from) noexcept
    : GeoStats_Record() {
    *this = ::std::move(from);
  }

  inline GeoStats_Record& operator=(GeoStats_Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoStats_Record& default_instance();

  static inline const GeoStats_Record* internal_default_instance() {
    return reinterpret_cast<const GeoStats_Record*>(
               &_GeoStats_Record_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GeoStats_Record* other);
  friend void swap(GeoStats_Record& a, GeoStats_Record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoStats_Record* New() const PROTOBUF_FINAL { return New(NULL); }

  GeoStats_Record* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeoStats_Record& from);
  void MergeFrom(const GeoStats_Record& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeoStats_Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string geo = 1;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 1;
  const ::std::string& geo() const;
  void set_geo(const ::std::string& value);
  #if LANG_CXX11
  void set_geo(::std::string&& value);
  #endif
  void set_geo(const char* value);
  void set_geo(const char* value, size_t size);
  ::std::string* mutable_geo();
  ::std::string* release_geo();
  void set_allocated_geo(::std::string* geo);

  // required float percent = 2;
  bool has_percent() const;
  void clear_percent();
  static const int kPercentFieldNumber = 2;
  float percent() const;
  void set_percent(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.GeoStats.Record)
 private:
  void set_has_geo();
  void clear_has_geo();
  void set_has_percent();
  void clear_has_percent();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr geo_;
  float percent_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeoStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.GeoStats) */ {
 public:
  GeoStats();
  virtual ~GeoStats();

  GeoStats(const GeoStats& from);

  inline GeoStats& operator=(const GeoStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoStats(GeoStats&& from) noexcept
    : GeoStats() {
    *this = ::std::move(from);
  }

  inline GeoStats& operator=(GeoStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoStats& default_instance();

  static inline const GeoStats* internal_default_instance() {
    return reinterpret_cast<const GeoStats*>(
               &_GeoStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GeoStats* other);
  friend void swap(GeoStats& a, GeoStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoStats* New() const PROTOBUF_FINAL { return New(NULL); }

  GeoStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeoStats& from);
  void MergeFrom(const GeoStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeoStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GeoStats_Record Record;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.social.GeoStats.Record records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::ru::mail::go::social::GeoStats_Record& records(int index) const;
  ::ru::mail::go::social::GeoStats_Record* mutable_records(int index);
  ::ru::mail::go::social::GeoStats_Record* add_records();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::GeoStats_Record >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::GeoStats_Record >&
      records() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.GeoStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::GeoStats_Record > records_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConverterState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.ConverterState) */ {
 public:
  ConverterState();
  virtual ~ConverterState();

  ConverterState(const ConverterState& from);

  inline ConverterState& operator=(const ConverterState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverterState(ConverterState&& from) noexcept
    : ConverterState() {
    *this = ::std::move(from);
  }

  inline ConverterState& operator=(ConverterState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverterState& default_instance();

  static inline const ConverterState* internal_default_instance() {
    return reinterpret_cast<const ConverterState*>(
               &_ConverterState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(ConverterState* other);
  friend void swap(ConverterState& a, ConverterState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverterState* New() const PROTOBUF_FINAL { return New(NULL); }

  ConverterState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConverterState& from);
  void MergeFrom(const ConverterState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConverterState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ru.mail.go.social.PutRequest putRequest = 1;
  bool has_putrequest() const;
  void clear_putrequest();
  static const int kPutRequestFieldNumber = 1;
  const ::ru::mail::go::social::PutRequest& putrequest() const;
  ::ru::mail::go::social::PutRequest* mutable_putrequest();
  ::ru::mail::go::social::PutRequest* release_putrequest();
  void set_allocated_putrequest(::ru::mail::go::social::PutRequest* putrequest);

  // optional .gogo.storage.spider_document_detail fastTexts = 2;
  bool has_fasttexts() const;
  void clear_fasttexts();
  static const int kFastTextsFieldNumber = 2;
  const ::gogo::storage::spider_document_detail& fasttexts() const;
  ::gogo::storage::spider_document_detail* mutable_fasttexts();
  ::gogo::storage::spider_document_detail* release_fasttexts();
  void set_allocated_fasttexts(::gogo::storage::spider_document_detail* fasttexts);

  // optional .gogo.storage.spider_document_detail numzones = 3;
  bool has_numzones() const;
  void clear_numzones();
  static const int kNumzonesFieldNumber = 3;
  const ::gogo::storage::spider_document_detail& numzones() const;
  ::gogo::storage::spider_document_detail* mutable_numzones();
  ::gogo::storage::spider_document_detail* release_numzones();
  void set_allocated_numzones(::gogo::storage::spider_document_detail* numzones);

  // optional .ru.mail.go.social.GeoStats geoStats = 4;
  bool has_geostats() const;
  void clear_geostats();
  static const int kGeoStatsFieldNumber = 4;
  const ::ru::mail::go::social::GeoStats& geostats() const;
  ::ru::mail::go::social::GeoStats* mutable_geostats();
  ::ru::mail::go::social::GeoStats* release_geostats();
  void set_allocated_geostats(::ru::mail::go::social::GeoStats* geostats);

  // optional int32 neuroporn = 5;
  bool has_neuroporn() const;
  void clear_neuroporn();
  static const int kNeuropornFieldNumber = 5;
  ::google::protobuf::int32 neuroporn() const;
  void set_neuroporn(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.ConverterState)
 private:
  void set_has_putrequest();
  void clear_has_putrequest();
  void set_has_fasttexts();
  void clear_has_fasttexts();
  void set_has_numzones();
  void clear_has_numzones();
  void set_has_geostats();
  void clear_has_geostats();
  void set_has_neuroporn();
  void clear_has_neuroporn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::social::PutRequest* putrequest_;
  ::gogo::storage::spider_document_detail* fasttexts_;
  ::gogo::storage::spider_document_detail* numzones_;
  ::ru::mail::go::social::GeoStats* geostats_;
  ::google::protobuf::int32 neuroporn_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YoulaAd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.YoulaAd) */ {
 public:
  YoulaAd();
  virtual ~YoulaAd();

  YoulaAd(const YoulaAd& from);

  inline YoulaAd& operator=(const YoulaAd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YoulaAd(YoulaAd&& from) noexcept
    : YoulaAd() {
    *this = ::std::move(from);
  }

  inline YoulaAd& operator=(YoulaAd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoulaAd& default_instance();

  static inline const YoulaAd* internal_default_instance() {
    return reinterpret_cast<const YoulaAd*>(
               &_YoulaAd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(YoulaAd* other);
  friend void swap(YoulaAd& a, YoulaAd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YoulaAd* New() const PROTOBUF_FINAL { return New(NULL); }

  YoulaAd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YoulaAd& from);
  void MergeFrom(const YoulaAd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YoulaAd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string productId = 1;
  bool has_productid() const;
  void clear_productid();
  static const int kProductIdFieldNumber = 1;
  const ::std::string& productid() const;
  void set_productid(const ::std::string& value);
  #if LANG_CXX11
  void set_productid(::std::string&& value);
  #endif
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  ::std::string* mutable_productid();
  ::std::string* release_productid();
  void set_allocated_productid(::std::string* productid);

  // required string name = 9;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 9;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string desc = 10;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 10;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required uint64 ts = 2;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // required bool isArchived = 3;
  bool has_isarchived() const;
  void clear_isarchived();
  static const int kIsArchivedFieldNumber = 3;
  bool isarchived() const;
  void set_isarchived(bool value);

  // required bool isBlocked = 4;
  bool has_isblocked() const;
  void clear_isblocked();
  static const int kIsBlockedFieldNumber = 4;
  bool isblocked() const;
  void set_isblocked(bool value);

  // required bool isDeleted = 5;
  bool has_isdeleted() const;
  void clear_isdeleted();
  static const int kIsDeletedFieldNumber = 5;
  bool isdeleted() const;
  void set_isdeleted(bool value);

  // required bool isSold = 6;
  bool has_issold() const;
  void clear_issold();
  static const int kIsSoldFieldNumber = 6;
  bool issold() const;
  void set_issold(bool value);

  // required int32 price = 7;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // required int32 priceOrig = 8;
  bool has_priceorig() const;
  void clear_priceorig();
  static const int kPriceOrigFieldNumber = 8;
  ::google::protobuf::int32 priceorig() const;
  void set_priceorig(::google::protobuf::int32 value);

  // required float lat = 11;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 11;
  float lat() const;
  void set_lat(float value);

  // required float lon = 12;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 12;
  float lon() const;
  void set_lon(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.YoulaAd)
 private:
  void set_has_productid();
  void clear_has_productid();
  void set_has_ts();
  void clear_has_ts();
  void set_has_isarchived();
  void clear_has_isarchived();
  void set_has_isblocked();
  void clear_has_isblocked();
  void set_has_isdeleted();
  void clear_has_isdeleted();
  void set_has_issold();
  void clear_has_issold();
  void set_has_price();
  void clear_has_price();
  void set_has_priceorig();
  void clear_has_priceorig();
  void set_has_name();
  void clear_has_name();
  void set_has_desc();
  void clear_has_desc();
  void set_has_lat();
  void clear_has_lat();
  void set_has_lon();
  void clear_has_lon();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr productid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::uint64 ts_;
  bool isarchived_;
  bool isblocked_;
  bool isdeleted_;
  bool issold_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 priceorig_;
  float lat_;
  float lon_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YoulaWithPutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.YoulaWithPutRequest) */ {
 public:
  YoulaWithPutRequest();
  virtual ~YoulaWithPutRequest();

  YoulaWithPutRequest(const YoulaWithPutRequest& from);

  inline YoulaWithPutRequest& operator=(const YoulaWithPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YoulaWithPutRequest(YoulaWithPutRequest&& from) noexcept
    : YoulaWithPutRequest() {
    *this = ::std::move(from);
  }

  inline YoulaWithPutRequest& operator=(YoulaWithPutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoulaWithPutRequest& default_instance();

  static inline const YoulaWithPutRequest* internal_default_instance() {
    return reinterpret_cast<const YoulaWithPutRequest*>(
               &_YoulaWithPutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(YoulaWithPutRequest* other);
  friend void swap(YoulaWithPutRequest& a, YoulaWithPutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YoulaWithPutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  YoulaWithPutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YoulaWithPutRequest& from);
  void MergeFrom(const YoulaWithPutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YoulaWithPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.social.YoulaAd youlaAd = 1;
  bool has_youlaad() const;
  void clear_youlaad();
  static const int kYoulaAdFieldNumber = 1;
  const ::ru::mail::go::social::YoulaAd& youlaad() const;
  ::ru::mail::go::social::YoulaAd* mutable_youlaad();
  ::ru::mail::go::social::YoulaAd* release_youlaad();
  void set_allocated_youlaad(::ru::mail::go::social::YoulaAd* youlaad);

  // optional .ru.mail.go.social.PutRequest putRequest = 2;
  bool has_putrequest() const;
  void clear_putrequest();
  static const int kPutRequestFieldNumber = 2;
  const ::ru::mail::go::social::PutRequest& putrequest() const;
  ::ru::mail::go::social::PutRequest* mutable_putrequest();
  ::ru::mail::go::social::PutRequest* release_putrequest();
  void set_allocated_putrequest(::ru::mail::go::social::PutRequest* putrequest);

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.YoulaWithPutRequest)
 private:
  void set_has_youlaad();
  void clear_has_youlaad();
  void set_has_putrequest();
  void clear_has_putrequest();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::social::YoulaAd* youlaad_;
  ::ru::mail::go::social::PutRequest* putrequest_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutRequestList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.social.PutRequestList) */ {
 public:
  PutRequestList();
  virtual ~PutRequestList();

  PutRequestList(const PutRequestList& from);

  inline PutRequestList& operator=(const PutRequestList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequestList(PutRequestList&& from) noexcept
    : PutRequestList() {
    *this = ::std::move(from);
  }

  inline PutRequestList& operator=(PutRequestList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequestList& default_instance();

  static inline const PutRequestList* internal_default_instance() {
    return reinterpret_cast<const PutRequestList*>(
               &_PutRequestList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(PutRequestList* other);
  friend void swap(PutRequestList& a, PutRequestList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequestList* New() const PROTOBUF_FINAL { return New(NULL); }

  PutRequestList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutRequestList& from);
  void MergeFrom(const PutRequestList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutRequestList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.social.PutRequest putRequest = 1;
  int putrequest_size() const;
  void clear_putrequest();
  static const int kPutRequestFieldNumber = 1;
  const ::ru::mail::go::social::PutRequest& putrequest(int index) const;
  ::ru::mail::go::social::PutRequest* mutable_putrequest(int index);
  ::ru::mail::go::social::PutRequest* add_putrequest();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::PutRequest >*
      mutable_putrequest();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::PutRequest >&
      putrequest() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.social.PutRequestList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::PutRequest > putrequest_;
  friend struct protobuf_social_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KV

// required string key = 1;
inline bool KV::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KV::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KV::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KV::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& KV::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.KV.key)
  return key_.GetNoArena();
}
inline void KV::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.KV.key)
}
#if LANG_CXX11
inline void KV::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.KV.key)
}
#endif
inline void KV::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.KV.key)
}
inline void KV::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.KV.key)
}
inline ::std::string* KV::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.KV.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KV::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.KV.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KV::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.KV.key)
}

// required string value = 2;
inline bool KV::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KV::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KV::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KV::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& KV::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.KV.value)
  return value_.GetNoArena();
}
inline void KV::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.KV.value)
}
#if LANG_CXX11
inline void KV::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.KV.value)
}
#endif
inline void KV::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.KV.value)
}
inline void KV::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.KV.value)
}
inline ::std::string* KV::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.KV.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KV::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.KV.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KV::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.KV.value)
}

// -------------------------------------------------------------------

// Audio

// required string author = 1;
inline bool Audio::has_author() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Audio::set_has_author() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Audio::clear_has_author() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Audio::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
inline const ::std::string& Audio::author() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Audio.author)
  return author_.GetNoArena();
}
inline void Audio::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Audio.author)
}
#if LANG_CXX11
inline void Audio::set_author(::std::string&& value) {
  set_has_author();
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Audio.author)
}
#endif
inline void Audio::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Audio.author)
}
inline void Audio::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Audio.author)
}
inline ::std::string* Audio::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Audio.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Audio::release_author() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Audio.author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Audio::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Audio.author)
}

// required string title = 2;
inline bool Audio::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Audio::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Audio::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Audio::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Audio::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Audio.title)
  return title_.GetNoArena();
}
inline void Audio::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Audio.title)
}
#if LANG_CXX11
inline void Audio::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Audio.title)
}
#endif
inline void Audio::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Audio.title)
}
inline void Audio::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Audio.title)
}
inline ::std::string* Audio::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Audio.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Audio::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Audio.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Audio::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Audio.title)
}

// -------------------------------------------------------------------

// Address_Timetable

// required string day = 1;
inline bool Address_Timetable::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address_Timetable::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address_Timetable::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address_Timetable::clear_day() {
  day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_day();
}
inline const ::std::string& Address_Timetable::day() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.day)
  return day_.GetNoArena();
}
inline void Address_Timetable::set_day(const ::std::string& value) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.day)
}
#if LANG_CXX11
inline void Address_Timetable::set_day(::std::string&& value) {
  set_has_day();
  day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.Timetable.day)
}
#endif
inline void Address_Timetable::set_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.Timetable.day)
}
inline void Address_Timetable::set_day(const char* value, size_t size) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.Timetable.day)
}
inline ::std::string* Address_Timetable::mutable_day() {
  set_has_day();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.Timetable.day)
  return day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address_Timetable::release_day() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.Timetable.day)
  clear_has_day();
  return day_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address_Timetable::set_allocated_day(::std::string* day) {
  if (day != NULL) {
    set_has_day();
  } else {
    clear_has_day();
  }
  day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), day);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.Timetable.day)
}

// required int32 openTime = 2;
inline bool Address_Timetable::has_opentime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address_Timetable::set_has_opentime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address_Timetable::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address_Timetable::clear_opentime() {
  opentime_ = 0;
  clear_has_opentime();
}
inline ::google::protobuf::int32 Address_Timetable::opentime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.openTime)
  return opentime_;
}
inline void Address_Timetable::set_opentime(::google::protobuf::int32 value) {
  set_has_opentime();
  opentime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.openTime)
}

// required int32 closeTime = 3;
inline bool Address_Timetable::has_closetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Address_Timetable::set_has_closetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Address_Timetable::clear_has_closetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Address_Timetable::clear_closetime() {
  closetime_ = 0;
  clear_has_closetime();
}
inline ::google::protobuf::int32 Address_Timetable::closetime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.closeTime)
  return closetime_;
}
inline void Address_Timetable::set_closetime(::google::protobuf::int32 value) {
  set_has_closetime();
  closetime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.closeTime)
}

// required int32 breakOpenTime = 4;
inline bool Address_Timetable::has_breakopentime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Address_Timetable::set_has_breakopentime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Address_Timetable::clear_has_breakopentime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Address_Timetable::clear_breakopentime() {
  breakopentime_ = 0;
  clear_has_breakopentime();
}
inline ::google::protobuf::int32 Address_Timetable::breakopentime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.breakOpenTime)
  return breakopentime_;
}
inline void Address_Timetable::set_breakopentime(::google::protobuf::int32 value) {
  set_has_breakopentime();
  breakopentime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.breakOpenTime)
}

// required int32 breakCloseTime = 5;
inline bool Address_Timetable::has_breakclosetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Address_Timetable::set_has_breakclosetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Address_Timetable::clear_has_breakclosetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Address_Timetable::clear_breakclosetime() {
  breakclosetime_ = 0;
  clear_has_breakclosetime();
}
inline ::google::protobuf::int32 Address_Timetable::breakclosetime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.Timetable.breakCloseTime)
  return breakclosetime_;
}
inline void Address_Timetable::set_breakclosetime(::google::protobuf::int32 value) {
  set_has_breakclosetime();
  breakclosetime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.Timetable.breakCloseTime)
}

// -------------------------------------------------------------------

// Address

// required float lat = 1;
inline bool Address::has_lat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Address::set_has_lat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Address::clear_has_lat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Address::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline float Address::lat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.lat)
  return lat_;
}
inline void Address::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.lat)
}

// required float lon = 2;
inline bool Address::has_lon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Address::set_has_lon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Address::clear_has_lon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Address::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline float Address::lon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.lon)
  return lon_;
}
inline void Address::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.lon)
}

// required int32 rbCode = 3;
inline bool Address::has_rbcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Address::set_has_rbcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Address::clear_has_rbcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Address::clear_rbcode() {
  rbcode_ = 0;
  clear_has_rbcode();
}
inline ::google::protobuf::int32 Address::rbcode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.rbCode)
  return rbcode_;
}
inline void Address::set_rbcode(::google::protobuf::int32 value) {
  set_has_rbcode();
  rbcode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.rbCode)
}

// required int32 countryId = 4;
inline bool Address::has_countryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Address::set_has_countryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Address::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Address::clear_countryid() {
  countryid_ = 0;
  clear_has_countryid();
}
inline ::google::protobuf::int32 Address::countryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.countryId)
  return countryid_;
}
inline void Address::set_countryid(::google::protobuf::int32 value) {
  set_has_countryid();
  countryid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.countryId)
}

// required int32 cityId = 5;
inline bool Address::has_cityid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Address::set_has_cityid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Address::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Address::clear_cityid() {
  cityid_ = 0;
  clear_has_cityid();
}
inline ::google::protobuf::int32 Address::cityid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.cityId)
  return cityid_;
}
inline void Address::set_cityid(::google::protobuf::int32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.cityId)
}

// required string city = 6;
inline bool Address::has_city() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::set_has_city() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address::clear_has_city() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.city)
  return city_.GetNoArena();
}
inline void Address::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.city)
}
#if LANG_CXX11
inline void Address::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.city)
}
#endif
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.city)
}
inline void Address::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.city)
}
inline ::std::string* Address::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.city)
}

// required string address = 7;
inline bool Address::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Address::address() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.address)
  return address_.GetNoArena();
}
inline void Address::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.address)
}
#if LANG_CXX11
inline void Address::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.address)
}
#endif
inline void Address::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.address)
}
inline void Address::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.address)
}
inline ::std::string* Address::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_address() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.address)
}

// optional string phone = 8;
inline bool Address::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Address::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Address::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Address::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
inline const ::std::string& Address::phone() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.phone)
  return phone_.GetNoArena();
}
inline void Address::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.phone)
}
#if LANG_CXX11
inline void Address::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.phone)
}
#endif
inline void Address::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.phone)
}
inline void Address::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.phone)
}
inline ::std::string* Address::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_phone() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.phone)
}

// optional string title = 9;
inline bool Address::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Address::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Address::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Address::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Address::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.title)
  return title_.GetNoArena();
}
inline void Address::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.title)
}
#if LANG_CXX11
inline void Address::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Address.title)
}
#endif
inline void Address::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Address.title)
}
inline void Address::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Address.title)
}
inline ::std::string* Address::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Address.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Address.title)
}

// required .ru.mail.go.social.WorkInfo workInfo = 10;
inline bool Address::has_workinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Address::set_has_workinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Address::clear_has_workinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Address::clear_workinfo() {
  workinfo_ = 0;
  clear_has_workinfo();
}
inline ::ru::mail::go::social::WorkInfo Address::workinfo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.workInfo)
  return static_cast< ::ru::mail::go::social::WorkInfo >(workinfo_);
}
inline void Address::set_workinfo(::ru::mail::go::social::WorkInfo value) {
  assert(::ru::mail::go::social::WorkInfo_IsValid(value));
  set_has_workinfo();
  workinfo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Address.workInfo)
}

// repeated .ru.mail.go.social.Address.Timetable timetable = 11;
inline int Address::timetable_size() const {
  return timetable_.size();
}
inline void Address::clear_timetable() {
  timetable_.Clear();
}
inline const ::ru::mail::go::social::Address_Timetable& Address::timetable(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Address.timetable)
  return timetable_.Get(index);
}
inline ::ru::mail::go::social::Address_Timetable* Address::mutable_timetable(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Address.timetable)
  return timetable_.Mutable(index);
}
inline ::ru::mail::go::social::Address_Timetable* Address::add_timetable() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Address.timetable)
  return timetable_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address_Timetable >*
Address::mutable_timetable() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Address.timetable)
  return &timetable_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address_Timetable >&
Address::timetable() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Address.timetable)
  return timetable_;
}

// -------------------------------------------------------------------

// Profile

// required string key = 1;
inline bool Profile::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Profile::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.key)
  return key_.GetNoArena();
}
inline void Profile::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.key)
}
#if LANG_CXX11
inline void Profile::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.key)
}
#endif
inline void Profile::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.key)
}
inline void Profile::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.key)
}
inline ::std::string* Profile::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.key)
}

// required string name = 2;
inline bool Profile::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Profile::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.name)
  return name_.GetNoArena();
}
inline void Profile::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.name)
}
#if LANG_CXX11
inline void Profile::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.name)
}
#endif
inline void Profile::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.name)
}
inline void Profile::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.name)
}
inline ::std::string* Profile::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.name)
}

// required bool verified = 3;
inline bool Profile::has_verified() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Profile::set_has_verified() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Profile::clear_has_verified() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Profile::clear_verified() {
  verified_ = false;
  clear_has_verified();
}
inline bool Profile::verified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.verified)
  return verified_;
}
inline void Profile::set_verified(bool value) {
  set_has_verified();
  verified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.verified)
}

// required bool private = 4;
inline bool Profile::has_private_() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Profile::set_has_private_() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Profile::clear_has_private_() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Profile::clear_private_() {
  private__ = false;
  clear_has_private_();
}
inline bool Profile::private_() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.private)
  return private__;
}
inline void Profile::set_private_(bool value) {
  set_has_private_();
  private__ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.private)
}

// optional string login = 5;
inline bool Profile::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profile::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profile::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profile::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login();
}
inline const ::std::string& Profile::login() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.login)
  return login_.GetNoArena();
}
inline void Profile::set_login(const ::std::string& value) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.login)
}
#if LANG_CXX11
inline void Profile::set_login(::std::string&& value) {
  set_has_login();
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.login)
}
#endif
inline void Profile::set_login(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.login)
}
inline void Profile::set_login(const char* value, size_t size) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.login)
}
inline ::std::string* Profile::mutable_login() {
  set_has_login();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_login() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.login)
  clear_has_login();
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    set_has_login();
  } else {
    clear_has_login();
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.login)
}

// optional string url = 12;
inline bool Profile::has_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Profile::set_has_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Profile::clear_has_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Profile::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Profile::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.url)
  return url_.GetNoArena();
}
inline void Profile::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.url)
}
#if LANG_CXX11
inline void Profile::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.url)
}
#endif
inline void Profile::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.url)
}
inline void Profile::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.url)
}
inline ::std::string* Profile::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.url)
}

// optional string canonicalUrl = 14;
inline bool Profile::has_canonicalurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Profile::set_has_canonicalurl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Profile::clear_has_canonicalurl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Profile::clear_canonicalurl() {
  canonicalurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonicalurl();
}
inline const ::std::string& Profile::canonicalurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.canonicalUrl)
  return canonicalurl_.GetNoArena();
}
inline void Profile::set_canonicalurl(const ::std::string& value) {
  set_has_canonicalurl();
  canonicalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.canonicalUrl)
}
#if LANG_CXX11
inline void Profile::set_canonicalurl(::std::string&& value) {
  set_has_canonicalurl();
  canonicalurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.canonicalUrl)
}
#endif
inline void Profile::set_canonicalurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canonicalurl();
  canonicalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.canonicalUrl)
}
inline void Profile::set_canonicalurl(const char* value, size_t size) {
  set_has_canonicalurl();
  canonicalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.canonicalUrl)
}
inline ::std::string* Profile::mutable_canonicalurl() {
  set_has_canonicalurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.canonicalUrl)
  return canonicalurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_canonicalurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.canonicalUrl)
  clear_has_canonicalurl();
  return canonicalurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_canonicalurl(::std::string* canonicalurl) {
  if (canonicalurl != NULL) {
    set_has_canonicalurl();
  } else {
    clear_has_canonicalurl();
  }
  canonicalurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonicalurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.canonicalUrl)
}

// optional bool group = 13 [deprecated = true];
inline bool Profile::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Profile::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Profile::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Profile::clear_group() {
  group_ = false;
  clear_has_group();
}
inline bool Profile::group() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.group)
  return group_;
}
inline void Profile::set_group(bool value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.group)
}

// optional string text = 6;
inline bool Profile::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Profile::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Profile::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Profile::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Profile::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.text)
  return text_.GetNoArena();
}
inline void Profile::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.text)
}
#if LANG_CXX11
inline void Profile::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.text)
}
#endif
inline void Profile::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.text)
}
inline void Profile::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.text)
}
inline ::std::string* Profile::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.text)
}

// optional string status = 7;
inline bool Profile::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Profile::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Profile::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Profile::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
inline const ::std::string& Profile::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.status)
  return status_.GetNoArena();
}
inline void Profile::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.status)
}
#if LANG_CXX11
inline void Profile::set_status(::std::string&& value) {
  set_has_status();
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Profile.status)
}
#endif
inline void Profile::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.status)
}
inline void Profile::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.status)
}
inline ::std::string* Profile::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Profile.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Profile.status)
}

// optional uint64 followers = 8;
inline bool Profile::has_followers() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Profile::set_has_followers() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Profile::clear_has_followers() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Profile::clear_followers() {
  followers_ = GOOGLE_ULONGLONG(0);
  clear_has_followers();
}
inline ::google::protobuf::uint64 Profile::followers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.followers)
  return followers_;
}
inline void Profile::set_followers(::google::protobuf::uint64 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.followers)
}

// optional uint64 following = 9;
inline bool Profile::has_following() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Profile::set_has_following() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Profile::clear_has_following() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Profile::clear_following() {
  following_ = GOOGLE_ULONGLONG(0);
  clear_has_following();
}
inline ::google::protobuf::uint64 Profile::following() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.following)
  return following_;
}
inline void Profile::set_following(::google::protobuf::uint64 value) {
  set_has_following();
  following_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.following)
}

// repeated string links = 10;
inline int Profile::links_size() const {
  return links_.size();
}
inline void Profile::clear_links() {
  links_.Clear();
}
inline const ::std::string& Profile::links(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.links)
  return links_.Get(index);
}
inline ::std::string* Profile::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.links)
  return links_.Mutable(index);
}
inline void Profile::set_links(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.links)
  links_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Profile::set_links(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.links)
  links_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Profile::set_links(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  links_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Profile.links)
}
inline void Profile::set_links(int index, const char* value, size_t size) {
  links_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Profile.links)
}
inline ::std::string* Profile::add_links() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.Profile.links)
  return links_.Add();
}
inline void Profile::add_links(const ::std::string& value) {
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Profile.links)
}
#if LANG_CXX11
inline void Profile::add_links(::std::string&& value) {
  links_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Profile.links)
}
#endif
inline void Profile::add_links(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.Profile.links)
}
inline void Profile::add_links(const char* value, size_t size) {
  links_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.Profile.links)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Profile::links() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Profile.links)
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Profile::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Profile.links)
  return &links_;
}

// repeated .ru.mail.go.social.KV extra = 11;
inline int Profile::extra_size() const {
  return extra_.size();
}
inline void Profile::clear_extra() {
  extra_.Clear();
}
inline const ::ru::mail::go::social::KV& Profile::extra(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.extra)
  return extra_.Get(index);
}
inline ::ru::mail::go::social::KV* Profile::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.extra)
  return extra_.Mutable(index);
}
inline ::ru::mail::go::social::KV* Profile::add_extra() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Profile.extra)
  return extra_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >*
Profile::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Profile.extra)
  return &extra_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >&
Profile::extra() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Profile.extra)
  return extra_;
}

// optional .ru.mail.go.social.Type type = 15;
inline bool Profile::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Profile::set_has_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Profile::clear_has_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Profile::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::social::Type Profile::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.type)
  return static_cast< ::ru::mail::go::social::Type >(type_);
}
inline void Profile::set_type(::ru::mail::go::social::Type value) {
  assert(::ru::mail::go::social::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.type)
}

// optional .ru.mail.go.social.Source source = 16;
inline bool Profile::has_source() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Profile::set_has_source() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Profile::clear_has_source() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Profile::clear_source() {
  source_ = 1;
  clear_has_source();
}
inline ::ru::mail::go::social::Source Profile::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.source)
  return static_cast< ::ru::mail::go::social::Source >(source_);
}
inline void Profile::set_source(::ru::mail::go::social::Source value) {
  assert(::ru::mail::go::social::Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.source)
}

// repeated .ru.mail.go.social.Address address = 17;
inline int Profile::address_size() const {
  return address_.size();
}
inline void Profile::clear_address() {
  address_.Clear();
}
inline const ::ru::mail::go::social::Address& Profile::address(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.address)
  return address_.Get(index);
}
inline ::ru::mail::go::social::Address* Profile::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Profile.address)
  return address_.Mutable(index);
}
inline ::ru::mail::go::social::Address* Profile::add_address() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Profile.address)
  return address_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address >*
Profile::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Profile.address)
  return &address_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Address >&
Profile::address() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Profile.address)
  return address_;
}

// optional uint64 last_seen = 18;
inline bool Profile::has_last_seen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Profile::set_has_last_seen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Profile::clear_has_last_seen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Profile::clear_last_seen() {
  last_seen_ = GOOGLE_ULONGLONG(0);
  clear_has_last_seen();
}
inline ::google::protobuf::uint64 Profile::last_seen() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Profile.last_seen)
  return last_seen_;
}
inline void Profile::set_last_seen(::google::protobuf::uint64 value) {
  set_has_last_seen();
  last_seen_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Profile.last_seen)
}

// -------------------------------------------------------------------

// Post

// required string key = 1;
inline bool Post::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Post::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Post::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Post::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Post::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.key)
  return key_.GetNoArena();
}
inline void Post::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.key)
}
#if LANG_CXX11
inline void Post::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.key)
}
#endif
inline void Post::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.key)
}
inline void Post::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.key)
}
inline ::std::string* Post::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.key)
}

// required string author_id = 2;
inline bool Post::has_author_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Post::set_has_author_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Post::clear_has_author_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Post::clear_author_id() {
  author_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author_id();
}
inline const ::std::string& Post::author_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.author_id)
  return author_id_.GetNoArena();
}
inline void Post::set_author_id(const ::std::string& value) {
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.author_id)
}
#if LANG_CXX11
inline void Post::set_author_id(::std::string&& value) {
  set_has_author_id();
  author_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.author_id)
}
#endif
inline void Post::set_author_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.author_id)
}
inline void Post::set_author_id(const char* value, size_t size) {
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.author_id)
}
inline ::std::string* Post::mutable_author_id() {
  set_has_author_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.author_id)
  return author_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_author_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.author_id)
  clear_has_author_id();
  return author_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_author_id(::std::string* author_id) {
  if (author_id != NULL) {
    set_has_author_id();
  } else {
    clear_has_author_id();
  }
  author_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.author_id)
}

// optional string repostedFrom = 3;
inline bool Post::has_repostedfrom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Post::set_has_repostedfrom() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Post::clear_has_repostedfrom() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Post::clear_repostedfrom() {
  repostedfrom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_repostedfrom();
}
inline const ::std::string& Post::repostedfrom() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.repostedFrom)
  return repostedfrom_.GetNoArena();
}
inline void Post::set_repostedfrom(const ::std::string& value) {
  set_has_repostedfrom();
  repostedfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.repostedFrom)
}
#if LANG_CXX11
inline void Post::set_repostedfrom(::std::string&& value) {
  set_has_repostedfrom();
  repostedfrom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.repostedFrom)
}
#endif
inline void Post::set_repostedfrom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_repostedfrom();
  repostedfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.repostedFrom)
}
inline void Post::set_repostedfrom(const char* value, size_t size) {
  set_has_repostedfrom();
  repostedfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.repostedFrom)
}
inline ::std::string* Post::mutable_repostedfrom() {
  set_has_repostedfrom();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.repostedFrom)
  return repostedfrom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_repostedfrom() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.repostedFrom)
  clear_has_repostedfrom();
  return repostedfrom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_repostedfrom(::std::string* repostedfrom) {
  if (repostedfrom != NULL) {
    set_has_repostedfrom();
  } else {
    clear_has_repostedfrom();
  }
  repostedfrom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repostedfrom);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.repostedFrom)
}

// required uint64 pubDate = 4;
inline bool Post::has_pubdate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Post::set_has_pubdate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Post::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Post::clear_pubdate() {
  pubdate_ = GOOGLE_ULONGLONG(0);
  clear_has_pubdate();
}
inline ::google::protobuf::uint64 Post::pubdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.pubDate)
  return pubdate_;
}
inline void Post::set_pubdate(::google::protobuf::uint64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.pubDate)
}

// required string url = 5;
inline bool Post::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Post::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Post::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Post::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Post::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.url)
  return url_.GetNoArena();
}
inline void Post::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.url)
}
#if LANG_CXX11
inline void Post::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.url)
}
#endif
inline void Post::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.url)
}
inline void Post::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.url)
}
inline ::std::string* Post::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.url)
}

// optional string title = 11;
inline bool Post::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Post::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Post::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Post::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Post::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.title)
  return title_.GetNoArena();
}
inline void Post::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.title)
}
#if LANG_CXX11
inline void Post::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.title)
}
#endif
inline void Post::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.title)
}
inline void Post::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.title)
}
inline ::std::string* Post::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.title)
}

// required string text = 6;
inline bool Post::has_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Post::set_has_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Post::clear_has_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Post::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Post::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.text)
  return text_.GetNoArena();
}
inline void Post::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.text)
}
#if LANG_CXX11
inline void Post::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.text)
}
#endif
inline void Post::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.text)
}
inline void Post::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.text)
}
inline ::std::string* Post::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.text)
}

// repeated string links = 10;
inline int Post::links_size() const {
  return links_.size();
}
inline void Post::clear_links() {
  links_.Clear();
}
inline const ::std::string& Post::links(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.links)
  return links_.Get(index);
}
inline ::std::string* Post::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.links)
  return links_.Mutable(index);
}
inline void Post::set_links(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.links)
  links_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Post::set_links(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.links)
  links_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Post::set_links(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  links_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.links)
}
inline void Post::set_links(int index, const char* value, size_t size) {
  links_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.links)
}
inline ::std::string* Post::add_links() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.Post.links)
  return links_.Add();
}
inline void Post::add_links(const ::std::string& value) {
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Post.links)
}
#if LANG_CXX11
inline void Post::add_links(::std::string&& value) {
  links_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Post.links)
}
#endif
inline void Post::add_links(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.Post.links)
}
inline void Post::add_links(const char* value, size_t size) {
  links_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.Post.links)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Post::links() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Post.links)
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Post::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Post.links)
  return &links_;
}

// optional int64 cntLike = 7;
inline bool Post::has_cntlike() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Post::set_has_cntlike() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Post::clear_has_cntlike() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Post::clear_cntlike() {
  cntlike_ = GOOGLE_LONGLONG(0);
  clear_has_cntlike();
}
inline ::google::protobuf::int64 Post::cntlike() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.cntLike)
  return cntlike_;
}
inline void Post::set_cntlike(::google::protobuf::int64 value) {
  set_has_cntlike();
  cntlike_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.cntLike)
}

// optional int64 cntShare = 8;
inline bool Post::has_cntshare() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Post::set_has_cntshare() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Post::clear_has_cntshare() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Post::clear_cntshare() {
  cntshare_ = GOOGLE_LONGLONG(0);
  clear_has_cntshare();
}
inline ::google::protobuf::int64 Post::cntshare() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.cntShare)
  return cntshare_;
}
inline void Post::set_cntshare(::google::protobuf::int64 value) {
  set_has_cntshare();
  cntshare_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.cntShare)
}

// optional int64 cntView = 9;
inline bool Post::has_cntview() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Post::set_has_cntview() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Post::clear_has_cntview() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Post::clear_cntview() {
  cntview_ = GOOGLE_LONGLONG(0);
  clear_has_cntview();
}
inline ::google::protobuf::int64 Post::cntview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.cntView)
  return cntview_;
}
inline void Post::set_cntview(::google::protobuf::int64 value) {
  set_has_cntview();
  cntview_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.cntView)
}

// optional int64 cntComment = 12;
inline bool Post::has_cntcomment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Post::set_has_cntcomment() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Post::clear_has_cntcomment() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Post::clear_cntcomment() {
  cntcomment_ = GOOGLE_LONGLONG(0);
  clear_has_cntcomment();
}
inline ::google::protobuf::int64 Post::cntcomment() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.cntComment)
  return cntcomment_;
}
inline void Post::set_cntcomment(::google::protobuf::int64 value) {
  set_has_cntcomment();
  cntcomment_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.cntComment)
}

// repeated .ru.mail.go.social.KV extra = 13;
inline int Post::extra_size() const {
  return extra_.size();
}
inline void Post::clear_extra() {
  extra_.Clear();
}
inline const ::ru::mail::go::social::KV& Post::extra(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.extra)
  return extra_.Get(index);
}
inline ::ru::mail::go::social::KV* Post::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.extra)
  return extra_.Mutable(index);
}
inline ::ru::mail::go::social::KV* Post::add_extra() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Post.extra)
  return extra_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >*
Post::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Post.extra)
  return &extra_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::KV >&
Post::extra() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Post.extra)
  return extra_;
}

// optional .ru.mail.go.social.Type type = 14;
inline bool Post::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Post::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Post::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Post::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::social::Type Post::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.type)
  return static_cast< ::ru::mail::go::social::Type >(type_);
}
inline void Post::set_type(::ru::mail::go::social::Type value) {
  assert(::ru::mail::go::social::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.type)
}

// optional .ru.mail.go.social.Source source = 15;
inline bool Post::has_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Post::set_has_source() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Post::clear_has_source() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Post::clear_source() {
  source_ = 1;
  clear_has_source();
}
inline ::ru::mail::go::social::Source Post::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.source)
  return static_cast< ::ru::mail::go::social::Source >(source_);
}
inline void Post::set_source(::ru::mail::go::social::Source value) {
  assert(::ru::mail::go::social::Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.source)
}

// optional bool private = 16;
inline bool Post::has_private_() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Post::set_has_private_() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Post::clear_has_private_() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Post::clear_private_() {
  private__ = false;
  clear_has_private_();
}
inline bool Post::private_() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.private)
  return private__;
}
inline void Post::set_private_(bool value) {
  set_has_private_();
  private__ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.private)
}

// repeated .ru.mail.go.social.Audio audios = 17;
inline int Post::audios_size() const {
  return audios_.size();
}
inline void Post::clear_audios() {
  audios_.Clear();
}
inline const ::ru::mail::go::social::Audio& Post::audios(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.audios)
  return audios_.Get(index);
}
inline ::ru::mail::go::social::Audio* Post::mutable_audios(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.audios)
  return audios_.Mutable(index);
}
inline ::ru::mail::go::social::Audio* Post::add_audios() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Post.audios)
  return audios_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Audio >*
Post::mutable_audios() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Post.audios)
  return &audios_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Audio >&
Post::audios() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Post.audios)
  return audios_;
}

// optional string youlaId = 18;
inline bool Post::has_youlaid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Post::set_has_youlaid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Post::clear_has_youlaid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Post::clear_youlaid() {
  youlaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youlaid();
}
inline const ::std::string& Post::youlaid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.youlaId)
  return youlaid_.GetNoArena();
}
inline void Post::set_youlaid(const ::std::string& value) {
  set_has_youlaid();
  youlaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Post.youlaId)
}
#if LANG_CXX11
inline void Post::set_youlaid(::std::string&& value) {
  set_has_youlaid();
  youlaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.Post.youlaId)
}
#endif
inline void Post::set_youlaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_youlaid();
  youlaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.Post.youlaId)
}
inline void Post::set_youlaid(const char* value, size_t size) {
  set_has_youlaid();
  youlaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.Post.youlaId)
}
inline ::std::string* Post::mutable_youlaid() {
  set_has_youlaid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.youlaId)
  return youlaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_youlaid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.youlaId)
  clear_has_youlaid();
  return youlaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_youlaid(::std::string* youlaid) {
  if (youlaid != NULL) {
    set_has_youlaid();
  } else {
    clear_has_youlaid();
  }
  youlaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youlaid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.youlaId)
}

// optional .ru.mail.go.social.YoulaAd youlaAd = 19;
inline bool Post::has_youlaad() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Post::set_has_youlaad() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Post::clear_has_youlaad() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Post::clear_youlaad() {
  if (youlaad_ != NULL) youlaad_->::ru::mail::go::social::YoulaAd::Clear();
  clear_has_youlaad();
}
inline const ::ru::mail::go::social::YoulaAd& Post::youlaad() const {
  const ::ru::mail::go::social::YoulaAd* p = youlaad_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Post.youlaAd)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::YoulaAd*>(
      &::ru::mail::go::social::_YoulaAd_default_instance_);
}
inline ::ru::mail::go::social::YoulaAd* Post::mutable_youlaad() {
  set_has_youlaad();
  if (youlaad_ == NULL) {
    youlaad_ = new ::ru::mail::go::social::YoulaAd;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Post.youlaAd)
  return youlaad_;
}
inline ::ru::mail::go::social::YoulaAd* Post::release_youlaad() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Post.youlaAd)
  clear_has_youlaad();
  ::ru::mail::go::social::YoulaAd* temp = youlaad_;
  youlaad_ = NULL;
  return temp;
}
inline void Post::set_allocated_youlaad(::ru::mail::go::social::YoulaAd* youlaad) {
  delete youlaad_;
  youlaad_ = youlaad;
  if (youlaad) {
    set_has_youlaad();
  } else {
    clear_has_youlaad();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Post.youlaAd)
}

// -------------------------------------------------------------------

// VideoCollection_Video

// required string title = 1;
inline bool VideoCollection_Video::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoCollection_Video::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoCollection_Video::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoCollection_Video::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VideoCollection_Video::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.Video.title)
  return title_.GetNoArena();
}
inline void VideoCollection_Video::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.Video.title)
}
#if LANG_CXX11
inline void VideoCollection_Video::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.Video.title)
}
#endif
inline void VideoCollection_Video::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.Video.title)
}
inline void VideoCollection_Video::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.Video.title)
}
inline ::std::string* VideoCollection_Video::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.Video.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCollection_Video::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.Video.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCollection_Video::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.Video.title)
}

// required string url = 2;
inline bool VideoCollection_Video::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoCollection_Video::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoCollection_Video::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoCollection_Video::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& VideoCollection_Video::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.Video.url)
  return url_.GetNoArena();
}
inline void VideoCollection_Video::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.Video.url)
}
#if LANG_CXX11
inline void VideoCollection_Video::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.Video.url)
}
#endif
inline void VideoCollection_Video::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.Video.url)
}
inline void VideoCollection_Video::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.Video.url)
}
inline ::std::string* VideoCollection_Video::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.Video.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCollection_Video::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.Video.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCollection_Video::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.Video.url)
}

// required int32 duration = 3;
inline bool VideoCollection_Video::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoCollection_Video::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoCollection_Video::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoCollection_Video::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 VideoCollection_Video::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.Video.duration)
  return duration_;
}
inline void VideoCollection_Video::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.Video.duration)
}

// required int64 pubdate = 4;
inline bool VideoCollection_Video::has_pubdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoCollection_Video::set_has_pubdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoCollection_Video::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoCollection_Video::clear_pubdate() {
  pubdate_ = GOOGLE_LONGLONG(0);
  clear_has_pubdate();
}
inline ::google::protobuf::int64 VideoCollection_Video::pubdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.Video.pubdate)
  return pubdate_;
}
inline void VideoCollection_Video::set_pubdate(::google::protobuf::int64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.Video.pubdate)
}

// -------------------------------------------------------------------

// VideoCollection

// required string key = 1;
inline bool VideoCollection::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoCollection::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoCollection::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoCollection::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& VideoCollection::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.key)
  return key_.GetNoArena();
}
inline void VideoCollection::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.key)
}
#if LANG_CXX11
inline void VideoCollection::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.key)
}
#endif
inline void VideoCollection::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.key)
}
inline void VideoCollection::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.key)
}
inline ::std::string* VideoCollection::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCollection::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCollection::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.key)
}

// required string author_id = 2;
inline bool VideoCollection::has_author_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoCollection::set_has_author_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoCollection::clear_has_author_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoCollection::clear_author_id() {
  author_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author_id();
}
inline const ::std::string& VideoCollection::author_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.author_id)
  return author_id_.GetNoArena();
}
inline void VideoCollection::set_author_id(const ::std::string& value) {
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.author_id)
}
#if LANG_CXX11
inline void VideoCollection::set_author_id(::std::string&& value) {
  set_has_author_id();
  author_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.author_id)
}
#endif
inline void VideoCollection::set_author_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.author_id)
}
inline void VideoCollection::set_author_id(const char* value, size_t size) {
  set_has_author_id();
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.author_id)
}
inline ::std::string* VideoCollection::mutable_author_id() {
  set_has_author_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.author_id)
  return author_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCollection::release_author_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.author_id)
  clear_has_author_id();
  return author_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCollection::set_allocated_author_id(::std::string* author_id) {
  if (author_id != NULL) {
    set_has_author_id();
  } else {
    clear_has_author_id();
  }
  author_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.author_id)
}

// required uint64 pubDate = 3;
inline bool VideoCollection::has_pubdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoCollection::set_has_pubdate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoCollection::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoCollection::clear_pubdate() {
  pubdate_ = GOOGLE_ULONGLONG(0);
  clear_has_pubdate();
}
inline ::google::protobuf::uint64 VideoCollection::pubdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.pubDate)
  return pubdate_;
}
inline void VideoCollection::set_pubdate(::google::protobuf::uint64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.pubDate)
}

// required string url = 4;
inline bool VideoCollection::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoCollection::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoCollection::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoCollection::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& VideoCollection::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.url)
  return url_.GetNoArena();
}
inline void VideoCollection::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.url)
}
#if LANG_CXX11
inline void VideoCollection::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.url)
}
#endif
inline void VideoCollection::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.url)
}
inline void VideoCollection::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.url)
}
inline ::std::string* VideoCollection::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCollection::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCollection::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.url)
}

// required string title = 5;
inline bool VideoCollection::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoCollection::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoCollection::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoCollection::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VideoCollection::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.title)
  return title_.GetNoArena();
}
inline void VideoCollection::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.title)
}
#if LANG_CXX11
inline void VideoCollection::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.VideoCollection.title)
}
#endif
inline void VideoCollection::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.VideoCollection.title)
}
inline void VideoCollection::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.VideoCollection.title)
}
inline ::std::string* VideoCollection::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoCollection::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.VideoCollection.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoCollection::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.VideoCollection.title)
}

// required int32 count = 6;
inline bool VideoCollection::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoCollection::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoCollection::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoCollection::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 VideoCollection::count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.count)
  return count_;
}
inline void VideoCollection::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.VideoCollection.count)
}

// repeated .ru.mail.go.social.VideoCollection.Video videos = 7;
inline int VideoCollection::videos_size() const {
  return videos_.size();
}
inline void VideoCollection::clear_videos() {
  videos_.Clear();
}
inline const ::ru::mail::go::social::VideoCollection_Video& VideoCollection::videos(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.VideoCollection.videos)
  return videos_.Get(index);
}
inline ::ru::mail::go::social::VideoCollection_Video* VideoCollection::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.VideoCollection.videos)
  return videos_.Mutable(index);
}
inline ::ru::mail::go::social::VideoCollection_Video* VideoCollection::add_videos() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.VideoCollection.videos)
  return videos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::VideoCollection_Video >*
VideoCollection::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.VideoCollection.videos)
  return &videos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::VideoCollection_Video >&
VideoCollection::videos() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.VideoCollection.videos)
  return videos_;
}

// -------------------------------------------------------------------

// Counters

// optional int64 likes = 1;
inline bool Counters::has_likes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Counters::set_has_likes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Counters::clear_has_likes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Counters::clear_likes() {
  likes_ = GOOGLE_LONGLONG(0);
  clear_has_likes();
}
inline ::google::protobuf::int64 Counters::likes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Counters.likes)
  return likes_;
}
inline void Counters::set_likes(::google::protobuf::int64 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Counters.likes)
}

// optional int64 comments = 2;
inline bool Counters::has_comments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Counters::set_has_comments() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Counters::clear_has_comments() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Counters::clear_comments() {
  comments_ = GOOGLE_LONGLONG(0);
  clear_has_comments();
}
inline ::google::protobuf::int64 Counters::comments() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Counters.comments)
  return comments_;
}
inline void Counters::set_comments(::google::protobuf::int64 value) {
  set_has_comments();
  comments_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Counters.comments)
}

// optional int64 shares = 3;
inline bool Counters::has_shares() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Counters::set_has_shares() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Counters::clear_has_shares() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Counters::clear_shares() {
  shares_ = GOOGLE_LONGLONG(0);
  clear_has_shares();
}
inline ::google::protobuf::int64 Counters::shares() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Counters.shares)
  return shares_;
}
inline void Counters::set_shares(::google::protobuf::int64 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Counters.shares)
}

// optional int64 views = 4;
inline bool Counters::has_views() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Counters::set_has_views() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Counters::clear_has_views() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Counters::clear_views() {
  views_ = GOOGLE_LONGLONG(0);
  clear_has_views();
}
inline ::google::protobuf::int64 Counters::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Counters.views)
  return views_;
}
inline void Counters::set_views(::google::protobuf::int64 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Counters.views)
}

// -------------------------------------------------------------------

// ImgAttaches

// repeated .gogo.fetcher.fetcher_image img = 1;
inline int ImgAttaches::img_size() const {
  return img_.size();
}
inline void ImgAttaches::clear_img() {
  img_.Clear();
}
inline const ::gogo::fetcher::fetcher_image& ImgAttaches::img(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ImgAttaches.img)
  return img_.Get(index);
}
inline ::gogo::fetcher::fetcher_image* ImgAttaches::mutable_img(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ImgAttaches.img)
  return img_.Mutable(index);
}
inline ::gogo::fetcher::fetcher_image* ImgAttaches::add_img() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ImgAttaches.img)
  return img_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >*
ImgAttaches::mutable_img() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ImgAttaches.img)
  return &img_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::fetcher::fetcher_image >&
ImgAttaches::img() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ImgAttaches.img)
  return img_;
}

// -------------------------------------------------------------------

// Face

// required uint64 photo_id = 1;
inline bool Face::has_photo_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Face::set_has_photo_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Face::clear_has_photo_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Face::clear_photo_id() {
  photo_id_ = GOOGLE_ULONGLONG(0);
  clear_has_photo_id();
}
inline ::google::protobuf::uint64 Face::photo_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Face.photo_id)
  return photo_id_;
}
inline void Face::set_photo_id(::google::protobuf::uint64 value) {
  set_has_photo_id();
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Face.photo_id)
}

// required .gogo.fetcher.fetcher_image img = 2;
inline bool Face::has_img() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Face::set_has_img() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Face::clear_has_img() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Face::clear_img() {
  if (img_ != NULL) img_->::gogo::fetcher::fetcher_image::Clear();
  clear_has_img();
}
inline const ::gogo::fetcher::fetcher_image& Face::img() const {
  const ::gogo::fetcher::fetcher_image* p = img_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Face.img)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::fetcher::fetcher_image*>(
      &::gogo::fetcher::_fetcher_image_default_instance_);
}
inline ::gogo::fetcher::fetcher_image* Face::mutable_img() {
  set_has_img();
  if (img_ == NULL) {
    img_ = new ::gogo::fetcher::fetcher_image;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.Face.img)
  return img_;
}
inline ::gogo::fetcher::fetcher_image* Face::release_img() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.Face.img)
  clear_has_img();
  ::gogo::fetcher::fetcher_image* temp = img_;
  img_ = NULL;
  return temp;
}
inline void Face::set_allocated_img(::gogo::fetcher::fetcher_image* img) {
  delete img_;
  img_ = img;
  if (img) {
    set_has_img();
  } else {
    clear_has_img();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.Face.img)
}

// required float confidence = 3;
inline bool Face::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Face::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Face::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Face::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float Face::confidence() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Face.confidence)
  return confidence_;
}
inline void Face::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Face.confidence)
}

// repeated float v = 4 [packed = true];
inline int Face::v_size() const {
  return v_.size();
}
inline void Face::clear_v() {
  v_.Clear();
}
inline float Face::v(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Face.v)
  return v_.Get(index);
}
inline void Face::set_v(int index, float value) {
  v_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Face.v)
}
inline void Face::add_v(float value) {
  v_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.Face.v)
}
inline const ::google::protobuf::RepeatedField< float >&
Face::v() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.Face.v)
  return v_;
}
inline ::google::protobuf::RepeatedField< float >*
Face::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.Face.v)
  return &v_;
}

// -------------------------------------------------------------------

// FacesInfo

// repeated uint64 bad = 1;
inline int FacesInfo::bad_size() const {
  return bad_.size();
}
inline void FacesInfo::clear_bad() {
  bad_.Clear();
}
inline ::google::protobuf::uint64 FacesInfo::bad(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.FacesInfo.bad)
  return bad_.Get(index);
}
inline void FacesInfo::set_bad(int index, ::google::protobuf::uint64 value) {
  bad_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.FacesInfo.bad)
}
inline void FacesInfo::add_bad(::google::protobuf::uint64 value) {
  bad_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.FacesInfo.bad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FacesInfo::bad() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.FacesInfo.bad)
  return bad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FacesInfo::mutable_bad() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.FacesInfo.bad)
  return &bad_;
}

// repeated .ru.mail.go.social.Face faces = 2;
inline int FacesInfo::faces_size() const {
  return faces_.size();
}
inline void FacesInfo::clear_faces() {
  faces_.Clear();
}
inline const ::ru::mail::go::social::Face& FacesInfo::faces(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.FacesInfo.faces)
  return faces_.Get(index);
}
inline ::ru::mail::go::social::Face* FacesInfo::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.FacesInfo.faces)
  return faces_.Mutable(index);
}
inline ::ru::mail::go::social::Face* FacesInfo::add_faces() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.FacesInfo.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Face >*
FacesInfo::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.FacesInfo.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::Face >&
FacesInfo::faces() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.FacesInfo.faces)
  return faces_;
}

// -------------------------------------------------------------------

// PutRequest

// required string key = 1;
inline bool PutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.key)
  return key_.GetNoArena();
}
inline void PutRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.key)
}
#if LANG_CXX11
inline void PutRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.PutRequest.key)
}
#endif
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.PutRequest.key)
}
inline void PutRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.PutRequest.key)
}
inline ::std::string* PutRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.key)
}

// required uint64 ts = 2;
inline bool PutRequest::has_ts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PutRequest::set_has_ts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PutRequest::clear_has_ts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PutRequest::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::uint64 PutRequest::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.ts)
  return ts_;
}
inline void PutRequest::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.ts)
}

// optional .ru.mail.go.social.Post post = 3;
inline bool PutRequest::has_post() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutRequest::set_has_post() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutRequest::clear_has_post() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutRequest::clear_post() {
  if (post_ != NULL) post_->::ru::mail::go::social::Post::Clear();
  clear_has_post();
}
inline const ::ru::mail::go::social::Post& PutRequest::post() const {
  const ::ru::mail::go::social::Post* p = post_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.post)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::Post*>(
      &::ru::mail::go::social::_Post_default_instance_);
}
inline ::ru::mail::go::social::Post* PutRequest::mutable_post() {
  set_has_post();
  if (post_ == NULL) {
    post_ = new ::ru::mail::go::social::Post;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.post)
  return post_;
}
inline ::ru::mail::go::social::Post* PutRequest::release_post() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.post)
  clear_has_post();
  ::ru::mail::go::social::Post* temp = post_;
  post_ = NULL;
  return temp;
}
inline void PutRequest::set_allocated_post(::ru::mail::go::social::Post* post) {
  delete post_;
  post_ = post;
  if (post) {
    set_has_post();
  } else {
    clear_has_post();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.post)
}

// optional .ru.mail.go.social.Profile profile = 4;
inline bool PutRequest::has_profile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PutRequest::set_has_profile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PutRequest::clear_has_profile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PutRequest::clear_profile() {
  if (profile_ != NULL) profile_->::ru::mail::go::social::Profile::Clear();
  clear_has_profile();
}
inline const ::ru::mail::go::social::Profile& PutRequest::profile() const {
  const ::ru::mail::go::social::Profile* p = profile_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.profile)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::Profile*>(
      &::ru::mail::go::social::_Profile_default_instance_);
}
inline ::ru::mail::go::social::Profile* PutRequest::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) {
    profile_ = new ::ru::mail::go::social::Profile;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.profile)
  return profile_;
}
inline ::ru::mail::go::social::Profile* PutRequest::release_profile() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.profile)
  clear_has_profile();
  ::ru::mail::go::social::Profile* temp = profile_;
  profile_ = NULL;
  return temp;
}
inline void PutRequest::set_allocated_profile(::ru::mail::go::social::Profile* profile) {
  delete profile_;
  profile_ = profile;
  if (profile) {
    set_has_profile();
  } else {
    clear_has_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.profile)
}

// optional .ru.mail.go.social.ImgAttaches attaches = 5;
inline bool PutRequest::has_attaches() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PutRequest::set_has_attaches() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PutRequest::clear_has_attaches() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PutRequest::clear_attaches() {
  if (attaches_ != NULL) attaches_->::ru::mail::go::social::ImgAttaches::Clear();
  clear_has_attaches();
}
inline const ::ru::mail::go::social::ImgAttaches& PutRequest::attaches() const {
  const ::ru::mail::go::social::ImgAttaches* p = attaches_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.attaches)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::ImgAttaches*>(
      &::ru::mail::go::social::_ImgAttaches_default_instance_);
}
inline ::ru::mail::go::social::ImgAttaches* PutRequest::mutable_attaches() {
  set_has_attaches();
  if (attaches_ == NULL) {
    attaches_ = new ::ru::mail::go::social::ImgAttaches;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.attaches)
  return attaches_;
}
inline ::ru::mail::go::social::ImgAttaches* PutRequest::release_attaches() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.attaches)
  clear_has_attaches();
  ::ru::mail::go::social::ImgAttaches* temp = attaches_;
  attaches_ = NULL;
  return temp;
}
inline void PutRequest::set_allocated_attaches(::ru::mail::go::social::ImgAttaches* attaches) {
  delete attaches_;
  attaches_ = attaches;
  if (attaches) {
    set_has_attaches();
  } else {
    clear_has_attaches();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.attaches)
}

// optional string profile_url = 6;
inline bool PutRequest::has_profile_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutRequest::set_has_profile_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutRequest::clear_has_profile_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutRequest::clear_profile_url() {
  profile_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_profile_url();
}
inline const ::std::string& PutRequest::profile_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.profile_url)
  return profile_url_.GetNoArena();
}
inline void PutRequest::set_profile_url(const ::std::string& value) {
  set_has_profile_url();
  profile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.profile_url)
}
#if LANG_CXX11
inline void PutRequest::set_profile_url(::std::string&& value) {
  set_has_profile_url();
  profile_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.PutRequest.profile_url)
}
#endif
inline void PutRequest::set_profile_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_profile_url();
  profile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.PutRequest.profile_url)
}
inline void PutRequest::set_profile_url(const char* value, size_t size) {
  set_has_profile_url();
  profile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.PutRequest.profile_url)
}
inline ::std::string* PutRequest::mutable_profile_url() {
  set_has_profile_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.profile_url)
  return profile_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_profile_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.profile_url)
  clear_has_profile_url();
  return profile_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_profile_url(::std::string* profile_url) {
  if (profile_url != NULL) {
    set_has_profile_url();
  } else {
    clear_has_profile_url();
  }
  profile_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.profile_url)
}

// optional .ru.mail.go.social.PutRequest.Origin origin = 7;
inline bool PutRequest::has_origin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PutRequest::set_has_origin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PutRequest::clear_has_origin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PutRequest::clear_origin() {
  origin_ = 1;
  clear_has_origin();
}
inline ::ru::mail::go::social::PutRequest_Origin PutRequest::origin() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.origin)
  return static_cast< ::ru::mail::go::social::PutRequest_Origin >(origin_);
}
inline void PutRequest::set_origin(::ru::mail::go::social::PutRequest_Origin value) {
  assert(::ru::mail::go::social::PutRequest_Origin_IsValid(value));
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.origin)
}

// optional .ru.mail.go.social.Status status = 8;
inline bool PutRequest::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PutRequest::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PutRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PutRequest::clear_status() {
  if (status_ != NULL) status_->::ru::mail::go::social::Status::Clear();
  clear_has_status();
}
inline const ::ru::mail::go::social::Status& PutRequest::status() const {
  const ::ru::mail::go::social::Status* p = status_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.status)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::Status*>(
      &::ru::mail::go::social::_Status_default_instance_);
}
inline ::ru::mail::go::social::Status* PutRequest::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::ru::mail::go::social::Status;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.status)
  return status_;
}
inline ::ru::mail::go::social::Status* PutRequest::release_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.status)
  clear_has_status();
  ::ru::mail::go::social::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void PutRequest::set_allocated_status(::ru::mail::go::social::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.status)
}

// optional .ru.mail.go.social.PutRequest.Fastbase fastbase = 9;
inline bool PutRequest::has_fastbase() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PutRequest::set_has_fastbase() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PutRequest::clear_has_fastbase() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PutRequest::clear_fastbase() {
  fastbase_ = 1;
  clear_has_fastbase();
}
inline ::ru::mail::go::social::PutRequest_Fastbase PutRequest::fastbase() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.fastbase)
  return static_cast< ::ru::mail::go::social::PutRequest_Fastbase >(fastbase_);
}
inline void PutRequest::set_fastbase(::ru::mail::go::social::PutRequest_Fastbase value) {
  assert(::ru::mail::go::social::PutRequest_Fastbase_IsValid(value));
  set_has_fastbase();
  fastbase_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.fastbase)
}

// optional .ru.mail.go.social.Counters counters = 10;
inline bool PutRequest::has_counters() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PutRequest::set_has_counters() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PutRequest::clear_has_counters() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PutRequest::clear_counters() {
  if (counters_ != NULL) counters_->::ru::mail::go::social::Counters::Clear();
  clear_has_counters();
}
inline const ::ru::mail::go::social::Counters& PutRequest::counters() const {
  const ::ru::mail::go::social::Counters* p = counters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.counters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::Counters*>(
      &::ru::mail::go::social::_Counters_default_instance_);
}
inline ::ru::mail::go::social::Counters* PutRequest::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::ru::mail::go::social::Counters;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequest.counters)
  return counters_;
}
inline ::ru::mail::go::social::Counters* PutRequest::release_counters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.PutRequest.counters)
  clear_has_counters();
  ::ru::mail::go::social::Counters* temp = counters_;
  counters_ = NULL;
  return temp;
}
inline void PutRequest::set_allocated_counters(::ru::mail::go::social::Counters* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.PutRequest.counters)
}

// optional int64 last_event_attempt = 11;
inline bool PutRequest::has_last_event_attempt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PutRequest::set_has_last_event_attempt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PutRequest::clear_has_last_event_attempt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PutRequest::clear_last_event_attempt() {
  last_event_attempt_ = GOOGLE_LONGLONG(0);
  clear_has_last_event_attempt();
}
inline ::google::protobuf::int64 PutRequest::last_event_attempt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.last_event_attempt)
  return last_event_attempt_;
}
inline void PutRequest::set_last_event_attempt(::google::protobuf::int64 value) {
  set_has_last_event_attempt();
  last_event_attempt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.last_event_attempt)
}

// optional bool noFetch = 12;
inline bool PutRequest::has_nofetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PutRequest::set_has_nofetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PutRequest::clear_has_nofetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PutRequest::clear_nofetch() {
  nofetch_ = false;
  clear_has_nofetch();
}
inline bool PutRequest::nofetch() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.noFetch)
  return nofetch_;
}
inline void PutRequest::set_nofetch(bool value) {
  set_has_nofetch();
  nofetch_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.noFetch)
}

// optional bool noIndex = 13;
inline bool PutRequest::has_noindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PutRequest::set_has_noindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PutRequest::clear_has_noindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PutRequest::clear_noindex() {
  noindex_ = false;
  clear_has_noindex();
}
inline bool PutRequest::noindex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.noIndex)
  return noindex_;
}
inline void PutRequest::set_noindex(bool value) {
  set_has_noindex();
  noindex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.noIndex)
}

// optional .ru.mail.go.social.PutRequest.Destination dest = 14 [default = SOCIAL];
inline bool PutRequest::has_dest() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PutRequest::set_has_dest() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PutRequest::clear_has_dest() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PutRequest::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::ru::mail::go::social::PutRequest_Destination PutRequest::dest() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequest.dest)
  return static_cast< ::ru::mail::go::social::PutRequest_Destination >(dest_);
}
inline void PutRequest::set_dest(::ru::mail::go::social::PutRequest_Destination value) {
  assert(::ru::mail::go::social::PutRequest_Destination_IsValid(value));
  set_has_dest();
  dest_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.PutRequest.dest)
}

// -------------------------------------------------------------------

// LoginResolveRequest

// repeated .ru.mail.go.social.LoginResolveRequest.request_t request = 1;
inline int LoginResolveRequest::request_size() const {
  return request_.size();
}
inline void LoginResolveRequest::clear_request() {
  request_.Clear();
}
inline ::ru::mail::go::social::LoginResolveRequest_request_t LoginResolveRequest::request(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.LoginResolveRequest.request)
  return static_cast< ::ru::mail::go::social::LoginResolveRequest_request_t >(request_.Get(index));
}
inline void LoginResolveRequest::set_request(int index, ::ru::mail::go::social::LoginResolveRequest_request_t value) {
  assert(::ru::mail::go::social::LoginResolveRequest_request_t_IsValid(value));
  request_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.LoginResolveRequest.request)
}
inline void LoginResolveRequest::add_request(::ru::mail::go::social::LoginResolveRequest_request_t value) {
  assert(::ru::mail::go::social::LoginResolveRequest_request_t_IsValid(value));
  request_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.LoginResolveRequest.request)
}
inline const ::google::protobuf::RepeatedField<int>&
LoginResolveRequest::request() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.LoginResolveRequest.request)
  return request_;
}
inline ::google::protobuf::RepeatedField<int>*
LoginResolveRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.LoginResolveRequest.request)
  return &request_;
}

// required .ru.mail.go.social.PutRequest put = 2;
inline bool LoginResolveRequest::has_put() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResolveRequest::set_has_put() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResolveRequest::clear_has_put() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResolveRequest::clear_put() {
  if (put_ != NULL) put_->::ru::mail::go::social::PutRequest::Clear();
  clear_has_put();
}
inline const ::ru::mail::go::social::PutRequest& LoginResolveRequest::put() const {
  const ::ru::mail::go::social::PutRequest* p = put_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.LoginResolveRequest.put)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::PutRequest*>(
      &::ru::mail::go::social::_PutRequest_default_instance_);
}
inline ::ru::mail::go::social::PutRequest* LoginResolveRequest::mutable_put() {
  set_has_put();
  if (put_ == NULL) {
    put_ = new ::ru::mail::go::social::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.LoginResolveRequest.put)
  return put_;
}
inline ::ru::mail::go::social::PutRequest* LoginResolveRequest::release_put() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.LoginResolveRequest.put)
  clear_has_put();
  ::ru::mail::go::social::PutRequest* temp = put_;
  put_ = NULL;
  return temp;
}
inline void LoginResolveRequest::set_allocated_put(::ru::mail::go::social::PutRequest* put) {
  delete put_;
  put_ = put;
  if (put) {
    set_has_put();
  } else {
    clear_has_put();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.LoginResolveRequest.put)
}

// -------------------------------------------------------------------

// Status

// required bool alive = 1;
inline bool Status::has_alive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_alive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_alive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_alive() {
  alive_ = false;
  clear_has_alive();
}
inline bool Status::alive() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Status.alive)
  return alive_;
}
inline void Status::set_alive(bool value) {
  set_has_alive();
  alive_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Status.alive)
}

// required .ru.mail.go.social.Status.CheckType type = 2;
inline bool Status::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::social::Status_CheckType Status::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.Status.type)
  return static_cast< ::ru::mail::go::social::Status_CheckType >(type_);
}
inline void Status::set_type(::ru::mail::go::social::Status_CheckType value) {
  assert(::ru::mail::go::social::Status_CheckType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.Status.type)
}

// -------------------------------------------------------------------

// UrlList

// repeated string urls = 1;
inline int UrlList::urls_size() const {
  return urls_.size();
}
inline void UrlList::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& UrlList::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.UrlList.urls)
  return urls_.Get(index);
}
inline ::std::string* UrlList::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.UrlList.urls)
  return urls_.Mutable(index);
}
inline void UrlList::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.UrlList.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UrlList::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.UrlList.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UrlList::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.UrlList.urls)
}
inline void UrlList::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.UrlList.urls)
}
inline ::std::string* UrlList::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.UrlList.urls)
  return urls_.Add();
}
inline void UrlList::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.UrlList.urls)
}
#if LANG_CXX11
inline void UrlList::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.UrlList.urls)
}
#endif
inline void UrlList::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.UrlList.urls)
}
inline void UrlList::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.UrlList.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlList::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.UrlList.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UrlList::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.UrlList.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// GatewayRecord

// optional string socialId = 1;
inline bool GatewayRecord::has_socialid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatewayRecord::set_has_socialid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatewayRecord::clear_has_socialid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatewayRecord::clear_socialid() {
  socialid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_socialid();
}
inline const ::std::string& GatewayRecord::socialid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.socialId)
  return socialid_.GetNoArena();
}
inline void GatewayRecord::set_socialid(const ::std::string& value) {
  set_has_socialid();
  socialid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.socialId)
}
#if LANG_CXX11
inline void GatewayRecord::set_socialid(::std::string&& value) {
  set_has_socialid();
  socialid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.GatewayRecord.socialId)
}
#endif
inline void GatewayRecord::set_socialid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_socialid();
  socialid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.GatewayRecord.socialId)
}
inline void GatewayRecord::set_socialid(const char* value, size_t size) {
  set_has_socialid();
  socialid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.GatewayRecord.socialId)
}
inline ::std::string* GatewayRecord::mutable_socialid() {
  set_has_socialid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GatewayRecord.socialId)
  return socialid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatewayRecord::release_socialid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.GatewayRecord.socialId)
  clear_has_socialid();
  return socialid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatewayRecord::set_allocated_socialid(::std::string* socialid) {
  if (socialid != NULL) {
    set_has_socialid();
  } else {
    clear_has_socialid();
  }
  socialid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socialid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.GatewayRecord.socialId)
}

// optional string url = 2;
inline bool GatewayRecord::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatewayRecord::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatewayRecord::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatewayRecord::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& GatewayRecord::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.url)
  return url_.GetNoArena();
}
inline void GatewayRecord::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.url)
}
#if LANG_CXX11
inline void GatewayRecord::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.GatewayRecord.url)
}
#endif
inline void GatewayRecord::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.GatewayRecord.url)
}
inline void GatewayRecord::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.GatewayRecord.url)
}
inline ::std::string* GatewayRecord::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GatewayRecord.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatewayRecord::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.GatewayRecord.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatewayRecord::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.GatewayRecord.url)
}

// optional int32 targetId = 3;
inline bool GatewayRecord::has_targetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GatewayRecord::set_has_targetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GatewayRecord::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GatewayRecord::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 GatewayRecord::targetid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.targetId)
  return targetid_;
}
inline void GatewayRecord::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.targetId)
}

// optional int64 value64 = 4;
inline bool GatewayRecord::has_value64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GatewayRecord::set_has_value64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GatewayRecord::clear_has_value64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GatewayRecord::clear_value64() {
  value64_ = GOOGLE_LONGLONG(0);
  clear_has_value64();
}
inline ::google::protobuf::int64 GatewayRecord::value64() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.value64)
  return value64_;
}
inline void GatewayRecord::set_value64(::google::protobuf::int64 value) {
  set_has_value64();
  value64_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.value64)
}

// optional int32 value32 = 5;
inline bool GatewayRecord::has_value32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GatewayRecord::set_has_value32() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GatewayRecord::clear_has_value32() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GatewayRecord::clear_value32() {
  value32_ = 0;
  clear_has_value32();
}
inline ::google::protobuf::int32 GatewayRecord::value32() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.value32)
  return value32_;
}
inline void GatewayRecord::set_value32(::google::protobuf::int32 value) {
  set_has_value32();
  value32_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.value32)
}

// optional bytes value = 6;
inline bool GatewayRecord::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GatewayRecord::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GatewayRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GatewayRecord::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& GatewayRecord::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GatewayRecord.value)
  return value_.GetNoArena();
}
inline void GatewayRecord::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GatewayRecord.value)
}
#if LANG_CXX11
inline void GatewayRecord::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.GatewayRecord.value)
}
#endif
inline void GatewayRecord::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.GatewayRecord.value)
}
inline void GatewayRecord::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.GatewayRecord.value)
}
inline ::std::string* GatewayRecord::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GatewayRecord.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatewayRecord::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.GatewayRecord.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatewayRecord::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.GatewayRecord.value)
}

// -------------------------------------------------------------------

// ProfileExplorerResponse_Body

// repeated string vkFriendsIds = 1;
inline int ProfileExplorerResponse_Body::vkfriendsids_size() const {
  return vkfriendsids_.size();
}
inline void ProfileExplorerResponse_Body::clear_vkfriendsids() {
  vkfriendsids_.Clear();
}
inline const ::std::string& ProfileExplorerResponse_Body::vkfriendsids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return vkfriendsids_.Get(index);
}
inline ::std::string* ProfileExplorerResponse_Body::mutable_vkfriendsids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return vkfriendsids_.Mutable(index);
}
inline void ProfileExplorerResponse_Body::set_vkfriendsids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  vkfriendsids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProfileExplorerResponse_Body::set_vkfriendsids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  vkfriendsids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProfileExplorerResponse_Body::set_vkfriendsids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vkfriendsids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
inline void ProfileExplorerResponse_Body::set_vkfriendsids(int index, const char* value, size_t size) {
  vkfriendsids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
inline ::std::string* ProfileExplorerResponse_Body::add_vkfriendsids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return vkfriendsids_.Add();
}
inline void ProfileExplorerResponse_Body::add_vkfriendsids(const ::std::string& value) {
  vkfriendsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
#if LANG_CXX11
inline void ProfileExplorerResponse_Body::add_vkfriendsids(::std::string&& value) {
  vkfriendsids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
#endif
inline void ProfileExplorerResponse_Body::add_vkfriendsids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vkfriendsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
inline void ProfileExplorerResponse_Body::add_vkfriendsids(const char* value, size_t size) {
  vkfriendsids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileExplorerResponse_Body::vkfriendsids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return vkfriendsids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileExplorerResponse_Body::mutable_vkfriendsids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkFriendsIds)
  return &vkfriendsids_;
}

// repeated string vkSubGroupsIds = 2;
inline int ProfileExplorerResponse_Body::vksubgroupsids_size() const {
  return vksubgroupsids_.size();
}
inline void ProfileExplorerResponse_Body::clear_vksubgroupsids() {
  vksubgroupsids_.Clear();
}
inline const ::std::string& ProfileExplorerResponse_Body::vksubgroupsids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return vksubgroupsids_.Get(index);
}
inline ::std::string* ProfileExplorerResponse_Body::mutable_vksubgroupsids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return vksubgroupsids_.Mutable(index);
}
inline void ProfileExplorerResponse_Body::set_vksubgroupsids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  vksubgroupsids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProfileExplorerResponse_Body::set_vksubgroupsids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  vksubgroupsids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProfileExplorerResponse_Body::set_vksubgroupsids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vksubgroupsids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
inline void ProfileExplorerResponse_Body::set_vksubgroupsids(int index, const char* value, size_t size) {
  vksubgroupsids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
inline ::std::string* ProfileExplorerResponse_Body::add_vksubgroupsids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return vksubgroupsids_.Add();
}
inline void ProfileExplorerResponse_Body::add_vksubgroupsids(const ::std::string& value) {
  vksubgroupsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
#if LANG_CXX11
inline void ProfileExplorerResponse_Body::add_vksubgroupsids(::std::string&& value) {
  vksubgroupsids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
#endif
inline void ProfileExplorerResponse_Body::add_vksubgroupsids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vksubgroupsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
inline void ProfileExplorerResponse_Body::add_vksubgroupsids(const char* value, size_t size) {
  vksubgroupsids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileExplorerResponse_Body::vksubgroupsids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return vksubgroupsids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileExplorerResponse_Body::mutable_vksubgroupsids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubGroupsIds)
  return &vksubgroupsids_;
}

// repeated string vkSubUsersIds = 3;
inline int ProfileExplorerResponse_Body::vksubusersids_size() const {
  return vksubusersids_.size();
}
inline void ProfileExplorerResponse_Body::clear_vksubusersids() {
  vksubusersids_.Clear();
}
inline const ::std::string& ProfileExplorerResponse_Body::vksubusersids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return vksubusersids_.Get(index);
}
inline ::std::string* ProfileExplorerResponse_Body::mutable_vksubusersids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return vksubusersids_.Mutable(index);
}
inline void ProfileExplorerResponse_Body::set_vksubusersids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  vksubusersids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProfileExplorerResponse_Body::set_vksubusersids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  vksubusersids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProfileExplorerResponse_Body::set_vksubusersids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vksubusersids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
inline void ProfileExplorerResponse_Body::set_vksubusersids(int index, const char* value, size_t size) {
  vksubusersids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
inline ::std::string* ProfileExplorerResponse_Body::add_vksubusersids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return vksubusersids_.Add();
}
inline void ProfileExplorerResponse_Body::add_vksubusersids(const ::std::string& value) {
  vksubusersids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
#if LANG_CXX11
inline void ProfileExplorerResponse_Body::add_vksubusersids(::std::string&& value) {
  vksubusersids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
#endif
inline void ProfileExplorerResponse_Body::add_vksubusersids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vksubusersids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
inline void ProfileExplorerResponse_Body::add_vksubusersids(const char* value, size_t size) {
  vksubusersids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileExplorerResponse_Body::vksubusersids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return vksubusersids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileExplorerResponse_Body::mutable_vksubusersids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ProfileExplorerResponse.Body.vkSubUsersIds)
  return &vksubusersids_;
}

// repeated string okFriendsIds = 4;
inline int ProfileExplorerResponse_Body::okfriendsids_size() const {
  return okfriendsids_.size();
}
inline void ProfileExplorerResponse_Body::clear_okfriendsids() {
  okfriendsids_.Clear();
}
inline const ::std::string& ProfileExplorerResponse_Body::okfriendsids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return okfriendsids_.Get(index);
}
inline ::std::string* ProfileExplorerResponse_Body::mutable_okfriendsids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return okfriendsids_.Mutable(index);
}
inline void ProfileExplorerResponse_Body::set_okfriendsids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  okfriendsids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProfileExplorerResponse_Body::set_okfriendsids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  okfriendsids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProfileExplorerResponse_Body::set_okfriendsids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  okfriendsids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
inline void ProfileExplorerResponse_Body::set_okfriendsids(int index, const char* value, size_t size) {
  okfriendsids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
inline ::std::string* ProfileExplorerResponse_Body::add_okfriendsids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return okfriendsids_.Add();
}
inline void ProfileExplorerResponse_Body::add_okfriendsids(const ::std::string& value) {
  okfriendsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
#if LANG_CXX11
inline void ProfileExplorerResponse_Body::add_okfriendsids(::std::string&& value) {
  okfriendsids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
#endif
inline void ProfileExplorerResponse_Body::add_okfriendsids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  okfriendsids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
inline void ProfileExplorerResponse_Body::add_okfriendsids(const char* value, size_t size) {
  okfriendsids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileExplorerResponse_Body::okfriendsids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return okfriendsids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileExplorerResponse_Body::mutable_okfriendsids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.ProfileExplorerResponse.Body.okFriendsIds)
  return &okfriendsids_;
}

// -------------------------------------------------------------------

// ProfileExplorerResponse

// optional .ru.mail.go.social.ProfileExplorerResponse.Body body = 1;
inline bool ProfileExplorerResponse::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfileExplorerResponse::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfileExplorerResponse::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfileExplorerResponse::clear_body() {
  if (body_ != NULL) body_->::ru::mail::go::social::ProfileExplorerResponse_Body::Clear();
  clear_has_body();
}
inline const ::ru::mail::go::social::ProfileExplorerResponse_Body& ProfileExplorerResponse::body() const {
  const ::ru::mail::go::social::ProfileExplorerResponse_Body* p = body_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.body)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::ProfileExplorerResponse_Body*>(
      &::ru::mail::go::social::_ProfileExplorerResponse_Body_default_instance_);
}
inline ::ru::mail::go::social::ProfileExplorerResponse_Body* ProfileExplorerResponse::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    body_ = new ::ru::mail::go::social::ProfileExplorerResponse_Body;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.body)
  return body_;
}
inline ::ru::mail::go::social::ProfileExplorerResponse_Body* ProfileExplorerResponse::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ProfileExplorerResponse.body)
  clear_has_body();
  ::ru::mail::go::social::ProfileExplorerResponse_Body* temp = body_;
  body_ = NULL;
  return temp;
}
inline void ProfileExplorerResponse::set_allocated_body(::ru::mail::go::social::ProfileExplorerResponse_Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ProfileExplorerResponse.body)
}

// optional string error = 2;
inline bool ProfileExplorerResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfileExplorerResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfileExplorerResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfileExplorerResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
inline const ::std::string& ProfileExplorerResponse::error() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ProfileExplorerResponse.error)
  return error_.GetNoArena();
}
inline void ProfileExplorerResponse::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ProfileExplorerResponse.error)
}
#if LANG_CXX11
inline void ProfileExplorerResponse::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.ProfileExplorerResponse.error)
}
#endif
inline void ProfileExplorerResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.ProfileExplorerResponse.error)
}
inline void ProfileExplorerResponse::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.ProfileExplorerResponse.error)
}
inline ::std::string* ProfileExplorerResponse::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ProfileExplorerResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileExplorerResponse::release_error() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ProfileExplorerResponse.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileExplorerResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ProfileExplorerResponse.error)
}

// -------------------------------------------------------------------

// GeoStats_Record

// required string geo = 1;
inline bool GeoStats_Record::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoStats_Record::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoStats_Record::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoStats_Record::clear_geo() {
  geo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geo();
}
inline const ::std::string& GeoStats_Record::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GeoStats.Record.geo)
  return geo_.GetNoArena();
}
inline void GeoStats_Record::set_geo(const ::std::string& value) {
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GeoStats.Record.geo)
}
#if LANG_CXX11
inline void GeoStats_Record::set_geo(::std::string&& value) {
  set_has_geo();
  geo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.GeoStats.Record.geo)
}
#endif
inline void GeoStats_Record::set_geo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.GeoStats.Record.geo)
}
inline void GeoStats_Record::set_geo(const char* value, size_t size) {
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.GeoStats.Record.geo)
}
inline ::std::string* GeoStats_Record::mutable_geo() {
  set_has_geo();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GeoStats.Record.geo)
  return geo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoStats_Record::release_geo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.GeoStats.Record.geo)
  clear_has_geo();
  return geo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoStats_Record::set_allocated_geo(::std::string* geo) {
  if (geo != NULL) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  geo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geo);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.GeoStats.Record.geo)
}

// required float percent = 2;
inline bool GeoStats_Record::has_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoStats_Record::set_has_percent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoStats_Record::clear_has_percent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoStats_Record::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline float GeoStats_Record::percent() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GeoStats.Record.percent)
  return percent_;
}
inline void GeoStats_Record::set_percent(float value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.GeoStats.Record.percent)
}

// -------------------------------------------------------------------

// GeoStats

// repeated .ru.mail.go.social.GeoStats.Record records = 1;
inline int GeoStats::records_size() const {
  return records_.size();
}
inline void GeoStats::clear_records() {
  records_.Clear();
}
inline const ::ru::mail::go::social::GeoStats_Record& GeoStats::records(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.GeoStats.records)
  return records_.Get(index);
}
inline ::ru::mail::go::social::GeoStats_Record* GeoStats::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.GeoStats.records)
  return records_.Mutable(index);
}
inline ::ru::mail::go::social::GeoStats_Record* GeoStats::add_records() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.GeoStats.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::GeoStats_Record >*
GeoStats::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.GeoStats.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::GeoStats_Record >&
GeoStats::records() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.GeoStats.records)
  return records_;
}

// -------------------------------------------------------------------

// ConverterState

// required .ru.mail.go.social.PutRequest putRequest = 1;
inline bool ConverterState::has_putrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConverterState::set_has_putrequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConverterState::clear_has_putrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConverterState::clear_putrequest() {
  if (putrequest_ != NULL) putrequest_->::ru::mail::go::social::PutRequest::Clear();
  clear_has_putrequest();
}
inline const ::ru::mail::go::social::PutRequest& ConverterState::putrequest() const {
  const ::ru::mail::go::social::PutRequest* p = putrequest_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.putRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::PutRequest*>(
      &::ru::mail::go::social::_PutRequest_default_instance_);
}
inline ::ru::mail::go::social::PutRequest* ConverterState::mutable_putrequest() {
  set_has_putrequest();
  if (putrequest_ == NULL) {
    putrequest_ = new ::ru::mail::go::social::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ConverterState.putRequest)
  return putrequest_;
}
inline ::ru::mail::go::social::PutRequest* ConverterState::release_putrequest() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ConverterState.putRequest)
  clear_has_putrequest();
  ::ru::mail::go::social::PutRequest* temp = putrequest_;
  putrequest_ = NULL;
  return temp;
}
inline void ConverterState::set_allocated_putrequest(::ru::mail::go::social::PutRequest* putrequest) {
  delete putrequest_;
  putrequest_ = putrequest;
  if (putrequest) {
    set_has_putrequest();
  } else {
    clear_has_putrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ConverterState.putRequest)
}

// optional .gogo.storage.spider_document_detail fastTexts = 2;
inline bool ConverterState::has_fasttexts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConverterState::set_has_fasttexts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConverterState::clear_has_fasttexts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConverterState::clear_fasttexts() {
  if (fasttexts_ != NULL) fasttexts_->::gogo::storage::spider_document_detail::Clear();
  clear_has_fasttexts();
}
inline const ::gogo::storage::spider_document_detail& ConverterState::fasttexts() const {
  const ::gogo::storage::spider_document_detail* p = fasttexts_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.fastTexts)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::storage::spider_document_detail*>(
      &::gogo::storage::_spider_document_detail_default_instance_);
}
inline ::gogo::storage::spider_document_detail* ConverterState::mutable_fasttexts() {
  set_has_fasttexts();
  if (fasttexts_ == NULL) {
    fasttexts_ = new ::gogo::storage::spider_document_detail;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ConverterState.fastTexts)
  return fasttexts_;
}
inline ::gogo::storage::spider_document_detail* ConverterState::release_fasttexts() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ConverterState.fastTexts)
  clear_has_fasttexts();
  ::gogo::storage::spider_document_detail* temp = fasttexts_;
  fasttexts_ = NULL;
  return temp;
}
inline void ConverterState::set_allocated_fasttexts(::gogo::storage::spider_document_detail* fasttexts) {
  delete fasttexts_;
  fasttexts_ = fasttexts;
  if (fasttexts) {
    set_has_fasttexts();
  } else {
    clear_has_fasttexts();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ConverterState.fastTexts)
}

// optional .gogo.storage.spider_document_detail numzones = 3;
inline bool ConverterState::has_numzones() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConverterState::set_has_numzones() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConverterState::clear_has_numzones() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConverterState::clear_numzones() {
  if (numzones_ != NULL) numzones_->::gogo::storage::spider_document_detail::Clear();
  clear_has_numzones();
}
inline const ::gogo::storage::spider_document_detail& ConverterState::numzones() const {
  const ::gogo::storage::spider_document_detail* p = numzones_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.numzones)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::storage::spider_document_detail*>(
      &::gogo::storage::_spider_document_detail_default_instance_);
}
inline ::gogo::storage::spider_document_detail* ConverterState::mutable_numzones() {
  set_has_numzones();
  if (numzones_ == NULL) {
    numzones_ = new ::gogo::storage::spider_document_detail;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ConverterState.numzones)
  return numzones_;
}
inline ::gogo::storage::spider_document_detail* ConverterState::release_numzones() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ConverterState.numzones)
  clear_has_numzones();
  ::gogo::storage::spider_document_detail* temp = numzones_;
  numzones_ = NULL;
  return temp;
}
inline void ConverterState::set_allocated_numzones(::gogo::storage::spider_document_detail* numzones) {
  delete numzones_;
  numzones_ = numzones;
  if (numzones) {
    set_has_numzones();
  } else {
    clear_has_numzones();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ConverterState.numzones)
}

// optional .ru.mail.go.social.GeoStats geoStats = 4;
inline bool ConverterState::has_geostats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConverterState::set_has_geostats() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConverterState::clear_has_geostats() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConverterState::clear_geostats() {
  if (geostats_ != NULL) geostats_->::ru::mail::go::social::GeoStats::Clear();
  clear_has_geostats();
}
inline const ::ru::mail::go::social::GeoStats& ConverterState::geostats() const {
  const ::ru::mail::go::social::GeoStats* p = geostats_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.geoStats)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::GeoStats*>(
      &::ru::mail::go::social::_GeoStats_default_instance_);
}
inline ::ru::mail::go::social::GeoStats* ConverterState::mutable_geostats() {
  set_has_geostats();
  if (geostats_ == NULL) {
    geostats_ = new ::ru::mail::go::social::GeoStats;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.ConverterState.geoStats)
  return geostats_;
}
inline ::ru::mail::go::social::GeoStats* ConverterState::release_geostats() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.ConverterState.geoStats)
  clear_has_geostats();
  ::ru::mail::go::social::GeoStats* temp = geostats_;
  geostats_ = NULL;
  return temp;
}
inline void ConverterState::set_allocated_geostats(::ru::mail::go::social::GeoStats* geostats) {
  delete geostats_;
  geostats_ = geostats;
  if (geostats) {
    set_has_geostats();
  } else {
    clear_has_geostats();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.ConverterState.geoStats)
}

// optional int32 neuroporn = 5;
inline bool ConverterState::has_neuroporn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConverterState::set_has_neuroporn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConverterState::clear_has_neuroporn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConverterState::clear_neuroporn() {
  neuroporn_ = 0;
  clear_has_neuroporn();
}
inline ::google::protobuf::int32 ConverterState::neuroporn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.ConverterState.neuroporn)
  return neuroporn_;
}
inline void ConverterState::set_neuroporn(::google::protobuf::int32 value) {
  set_has_neuroporn();
  neuroporn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.ConverterState.neuroporn)
}

// -------------------------------------------------------------------

// YoulaAd

// required string productId = 1;
inline bool YoulaAd::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoulaAd::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoulaAd::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoulaAd::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_productid();
}
inline const ::std::string& YoulaAd::productid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.productId)
  return productid_.GetNoArena();
}
inline void YoulaAd::set_productid(const ::std::string& value) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.productId)
}
#if LANG_CXX11
inline void YoulaAd::set_productid(::std::string&& value) {
  set_has_productid();
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.YoulaAd.productId)
}
#endif
inline void YoulaAd::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.YoulaAd.productId)
}
inline void YoulaAd::set_productid(const char* value, size_t size) {
  set_has_productid();
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.YoulaAd.productId)
}
inline ::std::string* YoulaAd::mutable_productid() {
  set_has_productid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaAd.productId)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YoulaAd::release_productid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaAd.productId)
  clear_has_productid();
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YoulaAd::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    set_has_productid();
  } else {
    clear_has_productid();
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaAd.productId)
}

// required uint64 ts = 2;
inline bool YoulaAd::has_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YoulaAd::set_has_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YoulaAd::clear_has_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YoulaAd::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::uint64 YoulaAd::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.ts)
  return ts_;
}
inline void YoulaAd::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.ts)
}

// required bool isArchived = 3;
inline bool YoulaAd::has_isarchived() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YoulaAd::set_has_isarchived() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YoulaAd::clear_has_isarchived() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YoulaAd::clear_isarchived() {
  isarchived_ = false;
  clear_has_isarchived();
}
inline bool YoulaAd::isarchived() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.isArchived)
  return isarchived_;
}
inline void YoulaAd::set_isarchived(bool value) {
  set_has_isarchived();
  isarchived_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.isArchived)
}

// required bool isBlocked = 4;
inline bool YoulaAd::has_isblocked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YoulaAd::set_has_isblocked() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YoulaAd::clear_has_isblocked() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YoulaAd::clear_isblocked() {
  isblocked_ = false;
  clear_has_isblocked();
}
inline bool YoulaAd::isblocked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.isBlocked)
  return isblocked_;
}
inline void YoulaAd::set_isblocked(bool value) {
  set_has_isblocked();
  isblocked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.isBlocked)
}

// required bool isDeleted = 5;
inline bool YoulaAd::has_isdeleted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YoulaAd::set_has_isdeleted() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YoulaAd::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YoulaAd::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
inline bool YoulaAd::isdeleted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.isDeleted)
  return isdeleted_;
}
inline void YoulaAd::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.isDeleted)
}

// required bool isSold = 6;
inline bool YoulaAd::has_issold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YoulaAd::set_has_issold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YoulaAd::clear_has_issold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YoulaAd::clear_issold() {
  issold_ = false;
  clear_has_issold();
}
inline bool YoulaAd::issold() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.isSold)
  return issold_;
}
inline void YoulaAd::set_issold(bool value) {
  set_has_issold();
  issold_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.isSold)
}

// required int32 price = 7;
inline bool YoulaAd::has_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YoulaAd::set_has_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YoulaAd::clear_has_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YoulaAd::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 YoulaAd::price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.price)
  return price_;
}
inline void YoulaAd::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.price)
}

// required int32 priceOrig = 8;
inline bool YoulaAd::has_priceorig() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void YoulaAd::set_has_priceorig() {
  _has_bits_[0] |= 0x00000200u;
}
inline void YoulaAd::clear_has_priceorig() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void YoulaAd::clear_priceorig() {
  priceorig_ = 0;
  clear_has_priceorig();
}
inline ::google::protobuf::int32 YoulaAd::priceorig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.priceOrig)
  return priceorig_;
}
inline void YoulaAd::set_priceorig(::google::protobuf::int32 value) {
  set_has_priceorig();
  priceorig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.priceOrig)
}

// required string name = 9;
inline bool YoulaAd::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoulaAd::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoulaAd::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoulaAd::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& YoulaAd::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.name)
  return name_.GetNoArena();
}
inline void YoulaAd::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.name)
}
#if LANG_CXX11
inline void YoulaAd::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.YoulaAd.name)
}
#endif
inline void YoulaAd::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.YoulaAd.name)
}
inline void YoulaAd::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.YoulaAd.name)
}
inline ::std::string* YoulaAd::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaAd.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YoulaAd::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaAd.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YoulaAd::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaAd.name)
}

// required string desc = 10;
inline bool YoulaAd::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YoulaAd::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YoulaAd::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YoulaAd::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& YoulaAd::desc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.desc)
  return desc_.GetNoArena();
}
inline void YoulaAd::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.desc)
}
#if LANG_CXX11
inline void YoulaAd::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.social.YoulaAd.desc)
}
#endif
inline void YoulaAd::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.social.YoulaAd.desc)
}
inline void YoulaAd::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.social.YoulaAd.desc)
}
inline ::std::string* YoulaAd::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaAd.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YoulaAd::release_desc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaAd.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YoulaAd::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaAd.desc)
}

// required float lat = 11;
inline bool YoulaAd::has_lat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void YoulaAd::set_has_lat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void YoulaAd::clear_has_lat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void YoulaAd::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline float YoulaAd::lat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.lat)
  return lat_;
}
inline void YoulaAd::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.lat)
}

// required float lon = 12;
inline bool YoulaAd::has_lon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void YoulaAd::set_has_lon() {
  _has_bits_[0] |= 0x00000800u;
}
inline void YoulaAd::clear_has_lon() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void YoulaAd::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline float YoulaAd::lon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaAd.lon)
  return lon_;
}
inline void YoulaAd::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.social.YoulaAd.lon)
}

// -------------------------------------------------------------------

// YoulaWithPutRequest

// optional .ru.mail.go.social.YoulaAd youlaAd = 1;
inline bool YoulaWithPutRequest::has_youlaad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoulaWithPutRequest::set_has_youlaad() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoulaWithPutRequest::clear_has_youlaad() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoulaWithPutRequest::clear_youlaad() {
  if (youlaad_ != NULL) youlaad_->::ru::mail::go::social::YoulaAd::Clear();
  clear_has_youlaad();
}
inline const ::ru::mail::go::social::YoulaAd& YoulaWithPutRequest::youlaad() const {
  const ::ru::mail::go::social::YoulaAd* p = youlaad_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaWithPutRequest.youlaAd)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::YoulaAd*>(
      &::ru::mail::go::social::_YoulaAd_default_instance_);
}
inline ::ru::mail::go::social::YoulaAd* YoulaWithPutRequest::mutable_youlaad() {
  set_has_youlaad();
  if (youlaad_ == NULL) {
    youlaad_ = new ::ru::mail::go::social::YoulaAd;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaWithPutRequest.youlaAd)
  return youlaad_;
}
inline ::ru::mail::go::social::YoulaAd* YoulaWithPutRequest::release_youlaad() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaWithPutRequest.youlaAd)
  clear_has_youlaad();
  ::ru::mail::go::social::YoulaAd* temp = youlaad_;
  youlaad_ = NULL;
  return temp;
}
inline void YoulaWithPutRequest::set_allocated_youlaad(::ru::mail::go::social::YoulaAd* youlaad) {
  delete youlaad_;
  youlaad_ = youlaad;
  if (youlaad) {
    set_has_youlaad();
  } else {
    clear_has_youlaad();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaWithPutRequest.youlaAd)
}

// optional .ru.mail.go.social.PutRequest putRequest = 2;
inline bool YoulaWithPutRequest::has_putrequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoulaWithPutRequest::set_has_putrequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoulaWithPutRequest::clear_has_putrequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoulaWithPutRequest::clear_putrequest() {
  if (putrequest_ != NULL) putrequest_->::ru::mail::go::social::PutRequest::Clear();
  clear_has_putrequest();
}
inline const ::ru::mail::go::social::PutRequest& YoulaWithPutRequest::putrequest() const {
  const ::ru::mail::go::social::PutRequest* p = putrequest_;
  // @@protoc_insertion_point(field_get:ru.mail.go.social.YoulaWithPutRequest.putRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::social::PutRequest*>(
      &::ru::mail::go::social::_PutRequest_default_instance_);
}
inline ::ru::mail::go::social::PutRequest* YoulaWithPutRequest::mutable_putrequest() {
  set_has_putrequest();
  if (putrequest_ == NULL) {
    putrequest_ = new ::ru::mail::go::social::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.YoulaWithPutRequest.putRequest)
  return putrequest_;
}
inline ::ru::mail::go::social::PutRequest* YoulaWithPutRequest::release_putrequest() {
  // @@protoc_insertion_point(field_release:ru.mail.go.social.YoulaWithPutRequest.putRequest)
  clear_has_putrequest();
  ::ru::mail::go::social::PutRequest* temp = putrequest_;
  putrequest_ = NULL;
  return temp;
}
inline void YoulaWithPutRequest::set_allocated_putrequest(::ru::mail::go::social::PutRequest* putrequest) {
  delete putrequest_;
  putrequest_ = putrequest;
  if (putrequest) {
    set_has_putrequest();
  } else {
    clear_has_putrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.social.YoulaWithPutRequest.putRequest)
}

// -------------------------------------------------------------------

// PutRequestList

// repeated .ru.mail.go.social.PutRequest putRequest = 1;
inline int PutRequestList::putrequest_size() const {
  return putrequest_.size();
}
inline void PutRequestList::clear_putrequest() {
  putrequest_.Clear();
}
inline const ::ru::mail::go::social::PutRequest& PutRequestList::putrequest(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.social.PutRequestList.putRequest)
  return putrequest_.Get(index);
}
inline ::ru::mail::go::social::PutRequest* PutRequestList::mutable_putrequest(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.social.PutRequestList.putRequest)
  return putrequest_.Mutable(index);
}
inline ::ru::mail::go::social::PutRequest* PutRequestList::add_putrequest() {
  // @@protoc_insertion_point(field_add:ru.mail.go.social.PutRequestList.putRequest)
  return putrequest_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::PutRequest >*
PutRequestList::mutable_putrequest() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.social.PutRequestList.putRequest)
  return &putrequest_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::social::PutRequest >&
PutRequestList::putrequest() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.social.PutRequestList.putRequest)
  return putrequest_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace social
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::social::PutRequest_Origin> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::PutRequest_Origin>() {
  return ::ru::mail::go::social::PutRequest_Origin_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::social::PutRequest_Fastbase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::PutRequest_Fastbase>() {
  return ::ru::mail::go::social::PutRequest_Fastbase_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::social::PutRequest_Destination> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::PutRequest_Destination>() {
  return ::ru::mail::go::social::PutRequest_Destination_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::social::LoginResolveRequest_request_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::LoginResolveRequest_request_t>() {
  return ::ru::mail::go::social::LoginResolveRequest_request_t_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::social::Status_CheckType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::Status_CheckType>() {
  return ::ru::mail::go::social::Status_CheckType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::social::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::Type>() {
  return ::ru::mail::go::social::Type_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::social::Source> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::Source>() {
  return ::ru::mail::go::social::Source_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::social::WorkInfo> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::WorkInfo>() {
  return ::ru::mail::go::social::WorkInfo_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::social::OkVideoCollectionsProvider> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::social::OkVideoCollectionsProvider>() {
  return ::ru::mail::go::social::OkVideoCollectionsProvider_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_social_2eproto__INCLUDED
