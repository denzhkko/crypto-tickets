// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: social_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "social_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace social {
namespace meta {
class LayoutStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LayoutState>
     _instance;
} _LayoutState_default_instance_;
class SocialStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SocialState>
     _instance;
} _SocialState_default_instance_;

namespace protobuf_social_5fmeta_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, last_used_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, porno_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, used_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, used_texts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, last_shown_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutState, fast_posts_remains_),
  0,
  4,
  5,
  1,
  ~0u,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialState, last_used_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialState, porno_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialState, last_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialState, used_texts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialState, last_source_),
  0,
  1,
  2,
  ~0u,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(LayoutState)},
  { 21, 31, sizeof(SocialState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LayoutState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SocialState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "social_meta.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LayoutState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LayoutState_default_instance_);_SocialState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SocialState_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021social_meta.proto\022\013social.meta\"\327\001\n\013Lay"
      "outState\022\r\n\005index\030\001 \002(\r\022%\n\004type\030\002 \002(\0162\027."
      "social.meta.LayoutType\022\031\n\rlast_used_idx\030"
      "\003 \002(\005:\002-1\022\023\n\013porno_query\030\004 \002(\010\022\021\n\tused_u"
      "rls\030\005 \003(\005\022\022\n\nused_texts\030\006 \003(\004\022\031\n\016last_sh"
      "own_idx\030\007 \002(\005:\0010\022 \n\022fast_posts_remains\030\010"
      " \001(\010:\004true\"\202\001\n\013SocialState\022\030\n\rlast_used_"
      "idx\030\001 \002(\005:\0010\022\032\n\013porno_query\030\002 \002(\010:\005false"
      "\022\021\n\006last_n\030\003 \002(\005:\0010\022\022\n\nused_texts\030\004 \003(\004\022"
      "\026\n\013last_source\030\005 \001(\005:\0010*A\n\nLayoutType\022\t\n"
      "\005POSTS\020\001\022\021\n\rPROFILES_ONLY\020\002\022\025\n\021PROFILES_"
      "CAROUSEL\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "social_meta.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_social_5fmeta_2eproto

const ::google::protobuf::EnumDescriptor* LayoutType_descriptor() {
  protobuf_social_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_5fmeta_2eproto::file_level_enum_descriptors[0];
}
bool LayoutType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayoutState::kIndexFieldNumber;
const int LayoutState::kTypeFieldNumber;
const int LayoutState::kLastUsedIdxFieldNumber;
const int LayoutState::kPornoQueryFieldNumber;
const int LayoutState::kUsedUrlsFieldNumber;
const int LayoutState::kUsedTextsFieldNumber;
const int LayoutState::kLastShownIdxFieldNumber;
const int LayoutState::kFastPostsRemainsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayoutState::LayoutState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_5fmeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:social.meta.LayoutState)
}
LayoutState::LayoutState(const LayoutState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      used_urls_(from.used_urls_),
      used_texts_(from.used_texts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_used_idx_) -
    reinterpret_cast<char*>(&index_)) + sizeof(last_used_idx_));
  // @@protoc_insertion_point(copy_constructor:social.meta.LayoutState)
}

void LayoutState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_shown_idx_) -
      reinterpret_cast<char*>(&index_)) + sizeof(last_shown_idx_));
  fast_posts_remains_ = true;
  type_ = 1;
  last_used_idx_ = -1;
}

LayoutState::~LayoutState() {
  // @@protoc_insertion_point(destructor:social.meta.LayoutState)
  SharedDtor();
}

void LayoutState::SharedDtor() {
}

void LayoutState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayoutState::descriptor() {
  protobuf_social_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LayoutState& LayoutState::default_instance() {
  protobuf_social_5fmeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

LayoutState* LayoutState::New(::google::protobuf::Arena* arena) const {
  LayoutState* n = new LayoutState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayoutState::Clear() {
// @@protoc_insertion_point(message_clear_start:social.meta.LayoutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  used_urls_.Clear();
  used_texts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_shown_idx_) -
        reinterpret_cast<char*>(&index_)) + sizeof(last_shown_idx_));
    fast_posts_remains_ = true;
    type_ = 1;
    last_used_idx_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LayoutState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:social.meta.LayoutState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .social.meta.LayoutType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::social::meta::LayoutType_IsValid(value)) {
            set_type(static_cast< ::social::meta::LayoutType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 last_used_idx = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_used_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_used_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool porno_query = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_porno_query();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &porno_query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 used_urls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_used_urls())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_used_urls())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 used_texts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48u, input, this->mutable_used_texts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_used_texts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 last_shown_idx = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_last_shown_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_shown_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fast_posts_remains = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fast_posts_remains();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fast_posts_remains_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:social.meta.LayoutState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:social.meta.LayoutState)
  return false;
#undef DO_
}

void LayoutState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:social.meta.LayoutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required .social.meta.LayoutType type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 last_used_idx = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_used_idx(), output);
  }

  // required bool porno_query = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->porno_query(), output);
  }

  // repeated int32 used_urls = 5;
  for (int i = 0, n = this->used_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->used_urls(i), output);
  }

  // repeated uint64 used_texts = 6;
  for (int i = 0, n = this->used_texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->used_texts(i), output);
  }

  // required int32 last_shown_idx = 7 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->last_shown_idx(), output);
  }

  // optional bool fast_posts_remains = 8 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fast_posts_remains(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:social.meta.LayoutState)
}

::google::protobuf::uint8* LayoutState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:social.meta.LayoutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required .social.meta.LayoutType type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 last_used_idx = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_used_idx(), target);
  }

  // required bool porno_query = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->porno_query(), target);
  }

  // repeated int32 used_urls = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->used_urls_, target);

  // repeated uint64 used_texts = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(6, this->used_texts_, target);

  // required int32 last_shown_idx = 7 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->last_shown_idx(), target);
  }

  // optional bool fast_posts_remains = 8 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fast_posts_remains(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social.meta.LayoutState)
  return target;
}

size_t LayoutState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:social.meta.LayoutState)
  size_t total_size = 0;

  if (has_index()) {
    // required uint32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  if (has_porno_query()) {
    // required bool porno_query = 4;
    total_size += 1 + 1;
  }

  if (has_last_shown_idx()) {
    // required int32 last_shown_idx = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_shown_idx());
  }

  if (has_type()) {
    // required .social.meta.LayoutType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_last_used_idx()) {
    // required int32 last_used_idx = 3 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_used_idx());
  }

  return total_size;
}
size_t LayoutState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social.meta.LayoutState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required uint32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

    // required bool porno_query = 4;
    total_size += 1 + 1;

    // required int32 last_shown_idx = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_shown_idx());

    // required .social.meta.LayoutType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required int32 last_used_idx = 3 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_used_idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 used_urls = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->used_urls_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->used_urls_size());
    total_size += data_size;
  }

  // repeated uint64 used_texts = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->used_texts_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->used_texts_size());
    total_size += data_size;
  }

  // optional bool fast_posts_remains = 8 [default = true];
  if (has_fast_posts_remains()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayoutState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:social.meta.LayoutState)
  GOOGLE_DCHECK_NE(&from, this);
  const LayoutState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayoutState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:social.meta.LayoutState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:social.meta.LayoutState)
    MergeFrom(*source);
  }
}

void LayoutState::MergeFrom(const LayoutState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social.meta.LayoutState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  used_urls_.MergeFrom(from.used_urls_);
  used_texts_.MergeFrom(from.used_texts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      porno_query_ = from.porno_query_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_shown_idx_ = from.last_shown_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      fast_posts_remains_ = from.fast_posts_remains_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_used_idx_ = from.last_used_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LayoutState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:social.meta.LayoutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutState::CopyFrom(const LayoutState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social.meta.LayoutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  return true;
}

void LayoutState::Swap(LayoutState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayoutState::InternalSwap(LayoutState* other) {
  using std::swap;
  used_urls_.InternalSwap(&other->used_urls_);
  used_texts_.InternalSwap(&other->used_texts_);
  swap(index_, other->index_);
  swap(porno_query_, other->porno_query_);
  swap(last_shown_idx_, other->last_shown_idx_);
  swap(fast_posts_remains_, other->fast_posts_remains_);
  swap(type_, other->type_);
  swap(last_used_idx_, other->last_used_idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayoutState::GetMetadata() const {
  protobuf_social_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayoutState

// required uint32 index = 1;
bool LayoutState::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayoutState::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void LayoutState::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayoutState::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 LayoutState::index() const {
  // @@protoc_insertion_point(field_get:social.meta.LayoutState.index)
  return index_;
}
void LayoutState::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:social.meta.LayoutState.index)
}

// required .social.meta.LayoutType type = 2;
bool LayoutState::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayoutState::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void LayoutState::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayoutState::clear_type() {
  type_ = 1;
  clear_has_type();
}
::social::meta::LayoutType LayoutState::type() const {
  // @@protoc_insertion_point(field_get:social.meta.LayoutState.type)
  return static_cast< ::social::meta::LayoutType >(type_);
}
void LayoutState::set_type(::social::meta::LayoutType value) {
  assert(::social::meta::LayoutType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:social.meta.LayoutState.type)
}

// required int32 last_used_idx = 3 [default = -1];
bool LayoutState::has_last_used_idx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LayoutState::set_has_last_used_idx() {
  _has_bits_[0] |= 0x00000020u;
}
void LayoutState::clear_has_last_used_idx() {
  _has_bits_[0] &= ~0x00000020u;
}
void LayoutState::clear_last_used_idx() {
  last_used_idx_ = -1;
  clear_has_last_used_idx();
}
::google::protobuf::int32 LayoutState::last_used_idx() const {
  // @@protoc_insertion_point(field_get:social.meta.LayoutState.last_used_idx)
  return last_used_idx_;
}
void LayoutState::set_last_used_idx(::google::protobuf::int32 value) {
  set_has_last_used_idx();
  last_used_idx_ = value;
  // @@protoc_insertion_point(field_set:social.meta.LayoutState.last_used_idx)
}

// required bool porno_query = 4;
bool LayoutState::has_porno_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayoutState::set_has_porno_query() {
  _has_bits_[0] |= 0x00000002u;
}
void LayoutState::clear_has_porno_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayoutState::clear_porno_query() {
  porno_query_ = false;
  clear_has_porno_query();
}
bool LayoutState::porno_query() const {
  // @@protoc_insertion_point(field_get:social.meta.LayoutState.porno_query)
  return porno_query_;
}
void LayoutState::set_porno_query(bool value) {
  set_has_porno_query();
  porno_query_ = value;
  // @@protoc_insertion_point(field_set:social.meta.LayoutState.porno_query)
}

// repeated int32 used_urls = 5;
int LayoutState::used_urls_size() const {
  return used_urls_.size();
}
void LayoutState::clear_used_urls() {
  used_urls_.Clear();
}
::google::protobuf::int32 LayoutState::used_urls(int index) const {
  // @@protoc_insertion_point(field_get:social.meta.LayoutState.used_urls)
  return used_urls_.Get(index);
}
void LayoutState::set_used_urls(int index, ::google::protobuf::int32 value) {
  used_urls_.Set(index, value);
  // @@protoc_insertion_point(field_set:social.meta.LayoutState.used_urls)
}
void LayoutState::add_used_urls(::google::protobuf::int32 value) {
  used_urls_.Add(value);
  // @@protoc_insertion_point(field_add:social.meta.LayoutState.used_urls)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LayoutState::used_urls() const {
  // @@protoc_insertion_point(field_list:social.meta.LayoutState.used_urls)
  return used_urls_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LayoutState::mutable_used_urls() {
  // @@protoc_insertion_point(field_mutable_list:social.meta.LayoutState.used_urls)
  return &used_urls_;
}

// repeated uint64 used_texts = 6;
int LayoutState::used_texts_size() const {
  return used_texts_.size();
}
void LayoutState::clear_used_texts() {
  used_texts_.Clear();
}
::google::protobuf::uint64 LayoutState::used_texts(int index) const {
  // @@protoc_insertion_point(field_get:social.meta.LayoutState.used_texts)
  return used_texts_.Get(index);
}
void LayoutState::set_used_texts(int index, ::google::protobuf::uint64 value) {
  used_texts_.Set(index, value);
  // @@protoc_insertion_point(field_set:social.meta.LayoutState.used_texts)
}
void LayoutState::add_used_texts(::google::protobuf::uint64 value) {
  used_texts_.Add(value);
  // @@protoc_insertion_point(field_add:social.meta.LayoutState.used_texts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LayoutState::used_texts() const {
  // @@protoc_insertion_point(field_list:social.meta.LayoutState.used_texts)
  return used_texts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LayoutState::mutable_used_texts() {
  // @@protoc_insertion_point(field_mutable_list:social.meta.LayoutState.used_texts)
  return &used_texts_;
}

// required int32 last_shown_idx = 7 [default = 0];
bool LayoutState::has_last_shown_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LayoutState::set_has_last_shown_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void LayoutState::clear_has_last_shown_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void LayoutState::clear_last_shown_idx() {
  last_shown_idx_ = 0;
  clear_has_last_shown_idx();
}
::google::protobuf::int32 LayoutState::last_shown_idx() const {
  // @@protoc_insertion_point(field_get:social.meta.LayoutState.last_shown_idx)
  return last_shown_idx_;
}
void LayoutState::set_last_shown_idx(::google::protobuf::int32 value) {
  set_has_last_shown_idx();
  last_shown_idx_ = value;
  // @@protoc_insertion_point(field_set:social.meta.LayoutState.last_shown_idx)
}

// optional bool fast_posts_remains = 8 [default = true];
bool LayoutState::has_fast_posts_remains() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LayoutState::set_has_fast_posts_remains() {
  _has_bits_[0] |= 0x00000008u;
}
void LayoutState::clear_has_fast_posts_remains() {
  _has_bits_[0] &= ~0x00000008u;
}
void LayoutState::clear_fast_posts_remains() {
  fast_posts_remains_ = true;
  clear_has_fast_posts_remains();
}
bool LayoutState::fast_posts_remains() const {
  // @@protoc_insertion_point(field_get:social.meta.LayoutState.fast_posts_remains)
  return fast_posts_remains_;
}
void LayoutState::set_fast_posts_remains(bool value) {
  set_has_fast_posts_remains();
  fast_posts_remains_ = value;
  // @@protoc_insertion_point(field_set:social.meta.LayoutState.fast_posts_remains)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocialState::kLastUsedIdxFieldNumber;
const int SocialState::kPornoQueryFieldNumber;
const int SocialState::kLastNFieldNumber;
const int SocialState::kUsedTextsFieldNumber;
const int SocialState::kLastSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocialState::SocialState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_social_5fmeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:social.meta.SocialState)
}
SocialState::SocialState(const SocialState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      used_texts_(from.used_texts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_used_idx_, &from.last_used_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_source_) -
    reinterpret_cast<char*>(&last_used_idx_)) + sizeof(last_source_));
  // @@protoc_insertion_point(copy_constructor:social.meta.SocialState)
}

void SocialState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_used_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_source_) -
      reinterpret_cast<char*>(&last_used_idx_)) + sizeof(last_source_));
}

SocialState::~SocialState() {
  // @@protoc_insertion_point(destructor:social.meta.SocialState)
  SharedDtor();
}

void SocialState::SharedDtor() {
}

void SocialState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialState::descriptor() {
  protobuf_social_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocialState& SocialState::default_instance() {
  protobuf_social_5fmeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

SocialState* SocialState::New(::google::protobuf::Arena* arena) const {
  SocialState* n = new SocialState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SocialState::Clear() {
// @@protoc_insertion_point(message_clear_start:social.meta.SocialState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  used_texts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&last_used_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_source_) -
        reinterpret_cast<char*>(&last_used_idx_)) + sizeof(last_source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SocialState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:social.meta.SocialState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 last_used_idx = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_used_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_used_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool porno_query = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_porno_query();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &porno_query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 last_n = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_n();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 used_texts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_used_texts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_used_texts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_source = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_last_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:social.meta.SocialState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:social.meta.SocialState)
  return false;
#undef DO_
}

void SocialState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:social.meta.SocialState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 last_used_idx = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->last_used_idx(), output);
  }

  // required bool porno_query = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->porno_query(), output);
  }

  // required int32 last_n = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_n(), output);
  }

  // repeated uint64 used_texts = 4;
  for (int i = 0, n = this->used_texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->used_texts(i), output);
  }

  // optional int32 last_source = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->last_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:social.meta.SocialState)
}

::google::protobuf::uint8* SocialState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:social.meta.SocialState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 last_used_idx = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->last_used_idx(), target);
  }

  // required bool porno_query = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->porno_query(), target);
  }

  // required int32 last_n = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_n(), target);
  }

  // repeated uint64 used_texts = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->used_texts_, target);

  // optional int32 last_source = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->last_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social.meta.SocialState)
  return target;
}

size_t SocialState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:social.meta.SocialState)
  size_t total_size = 0;

  if (has_last_used_idx()) {
    // required int32 last_used_idx = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_used_idx());
  }

  if (has_porno_query()) {
    // required bool porno_query = 2 [default = false];
    total_size += 1 + 1;
  }

  if (has_last_n()) {
    // required int32 last_n = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_n());
  }

  return total_size;
}
size_t SocialState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social.meta.SocialState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 last_used_idx = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_used_idx());

    // required bool porno_query = 2 [default = false];
    total_size += 1 + 1;

    // required int32 last_n = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_n());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint64 used_texts = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->used_texts_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->used_texts_size());
    total_size += data_size;
  }

  // optional int32 last_source = 5 [default = 0];
  if (has_last_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:social.meta.SocialState)
  GOOGLE_DCHECK_NE(&from, this);
  const SocialState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocialState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:social.meta.SocialState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:social.meta.SocialState)
    MergeFrom(*source);
  }
}

void SocialState::MergeFrom(const SocialState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social.meta.SocialState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  used_texts_.MergeFrom(from.used_texts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      last_used_idx_ = from.last_used_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      porno_query_ = from.porno_query_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_n_ = from.last_n_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_source_ = from.last_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SocialState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:social.meta.SocialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialState::CopyFrom(const SocialState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social.meta.SocialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SocialState::Swap(SocialState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocialState::InternalSwap(SocialState* other) {
  using std::swap;
  used_texts_.InternalSwap(&other->used_texts_);
  swap(last_used_idx_, other->last_used_idx_);
  swap(porno_query_, other->porno_query_);
  swap(last_n_, other->last_n_);
  swap(last_source_, other->last_source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SocialState::GetMetadata() const {
  protobuf_social_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_social_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SocialState

// required int32 last_used_idx = 1 [default = 0];
bool SocialState::has_last_used_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SocialState::set_has_last_used_idx() {
  _has_bits_[0] |= 0x00000001u;
}
void SocialState::clear_has_last_used_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
void SocialState::clear_last_used_idx() {
  last_used_idx_ = 0;
  clear_has_last_used_idx();
}
::google::protobuf::int32 SocialState::last_used_idx() const {
  // @@protoc_insertion_point(field_get:social.meta.SocialState.last_used_idx)
  return last_used_idx_;
}
void SocialState::set_last_used_idx(::google::protobuf::int32 value) {
  set_has_last_used_idx();
  last_used_idx_ = value;
  // @@protoc_insertion_point(field_set:social.meta.SocialState.last_used_idx)
}

// required bool porno_query = 2 [default = false];
bool SocialState::has_porno_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SocialState::set_has_porno_query() {
  _has_bits_[0] |= 0x00000002u;
}
void SocialState::clear_has_porno_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void SocialState::clear_porno_query() {
  porno_query_ = false;
  clear_has_porno_query();
}
bool SocialState::porno_query() const {
  // @@protoc_insertion_point(field_get:social.meta.SocialState.porno_query)
  return porno_query_;
}
void SocialState::set_porno_query(bool value) {
  set_has_porno_query();
  porno_query_ = value;
  // @@protoc_insertion_point(field_set:social.meta.SocialState.porno_query)
}

// required int32 last_n = 3 [default = 0];
bool SocialState::has_last_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SocialState::set_has_last_n() {
  _has_bits_[0] |= 0x00000004u;
}
void SocialState::clear_has_last_n() {
  _has_bits_[0] &= ~0x00000004u;
}
void SocialState::clear_last_n() {
  last_n_ = 0;
  clear_has_last_n();
}
::google::protobuf::int32 SocialState::last_n() const {
  // @@protoc_insertion_point(field_get:social.meta.SocialState.last_n)
  return last_n_;
}
void SocialState::set_last_n(::google::protobuf::int32 value) {
  set_has_last_n();
  last_n_ = value;
  // @@protoc_insertion_point(field_set:social.meta.SocialState.last_n)
}

// repeated uint64 used_texts = 4;
int SocialState::used_texts_size() const {
  return used_texts_.size();
}
void SocialState::clear_used_texts() {
  used_texts_.Clear();
}
::google::protobuf::uint64 SocialState::used_texts(int index) const {
  // @@protoc_insertion_point(field_get:social.meta.SocialState.used_texts)
  return used_texts_.Get(index);
}
void SocialState::set_used_texts(int index, ::google::protobuf::uint64 value) {
  used_texts_.Set(index, value);
  // @@protoc_insertion_point(field_set:social.meta.SocialState.used_texts)
}
void SocialState::add_used_texts(::google::protobuf::uint64 value) {
  used_texts_.Add(value);
  // @@protoc_insertion_point(field_add:social.meta.SocialState.used_texts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SocialState::used_texts() const {
  // @@protoc_insertion_point(field_list:social.meta.SocialState.used_texts)
  return used_texts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SocialState::mutable_used_texts() {
  // @@protoc_insertion_point(field_mutable_list:social.meta.SocialState.used_texts)
  return &used_texts_;
}

// optional int32 last_source = 5 [default = 0];
bool SocialState::has_last_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SocialState::set_has_last_source() {
  _has_bits_[0] |= 0x00000008u;
}
void SocialState::clear_has_last_source() {
  _has_bits_[0] &= ~0x00000008u;
}
void SocialState::clear_last_source() {
  last_source_ = 0;
  clear_has_last_source();
}
::google::protobuf::int32 SocialState::last_source() const {
  // @@protoc_insertion_point(field_get:social.meta.SocialState.last_source)
  return last_source_;
}
void SocialState::set_last_source(::google::protobuf::int32 value) {
  set_has_last_source();
  last_source_ = value;
  // @@protoc_insertion_point(field_set:social.meta.SocialState.last_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace social

// @@protoc_insertion_point(global_scope)
