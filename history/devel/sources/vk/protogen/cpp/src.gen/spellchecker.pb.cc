// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spellchecker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spellchecker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace chell_specker {
class VersionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VersionInfo>
     _instance;
} _VersionInfo_default_instance_;
class SpcInterleavingInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpcInterleavingInfo>
     _instance;
} _SpcInterleavingInfo_default_instance_;
class ConfidencePackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConfidencePack>
     _instance;
} _ConfidencePack_default_instance_;
class FixConfidencePackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FixConfidencePack>
     _instance;
} _FixConfidencePack_default_instance_;
class SpcWnfInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpcWnfInfo>
     _instance;
} _SpcWnfInfo_default_instance_;
class SpcReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpcReply>
     _instance;
} _SpcReply_default_instance_;
class SpcCommentItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpcCommentItem>
     _instance;
} _SpcCommentItem_default_instance_;
class SpcCommentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpcComment>
     _instance;
} _SpcComment_default_instance_;
class SpcResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpcResponse>
     _instance;
} _SpcResponse_default_instance_;

namespace protobuf_spellchecker_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, release_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, patch_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, db_tag_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcInterleavingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcInterleavingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcInterleavingInfo, exp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcInterleavingInfo, interleaving_type_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePack, word_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePack, split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePack, join_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidencePack, layout_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixConfidencePack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixConfidencePack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixConfidencePack, low_fix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixConfidencePack, high_fix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixConfidencePack, high_auto_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcWnfInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcWnfInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcWnfInfo, wnf_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcWnfInfo, wnf_report_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, autoreplace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, fixed_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, orig_highlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, fixed_highlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, fix_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, auto_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, interleaving_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, fix_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, porno_fixed_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, fix_confidence_pack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, transliter_fixed_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, version_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, iteration_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcReply, wnf_info_),
  12,
  0,
  1,
  2,
  10,
  11,
  6,
  3,
  4,
  7,
  5,
  8,
  13,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcCommentItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcCommentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcCommentItem, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcCommentItem, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcComment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcComment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcComment, data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcResponse, reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcResponse, comment_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(VersionInfo)},
  { 15, 22, sizeof(SpcInterleavingInfo)},
  { 24, 33, sizeof(ConfidencePack)},
  { 37, 45, sizeof(FixConfidencePack)},
  { 48, 55, sizeof(SpcWnfInfo)},
  { 57, 76, sizeof(SpcReply)},
  { 90, 97, sizeof(SpcCommentItem)},
  { 99, 105, sizeof(SpcComment)},
  { 106, 113, sizeof(SpcResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VersionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpcInterleavingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfidencePack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FixConfidencePack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpcWnfInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpcReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpcCommentItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpcComment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpcResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "spellchecker.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VersionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VersionInfo_default_instance_);_SpcInterleavingInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpcInterleavingInfo_default_instance_);_ConfidencePack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConfidencePack_default_instance_);_FixConfidencePack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FixConfidencePack_default_instance_);_SpcWnfInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpcWnfInfo_default_instance_);_SpcReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpcReply_default_instance_);_SpcCommentItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpcCommentItem_default_instance_);_SpcComment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpcComment_default_instance_);_SpcResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpcResponse_default_instance_);_FixConfidencePack_default_instance_._instance.get_mutable()->low_fix_ = const_cast< ::gogo::chell_specker::ConfidencePack*>(
      ::gogo::chell_specker::ConfidencePack::internal_default_instance());
  _FixConfidencePack_default_instance_._instance.get_mutable()->high_fix_ = const_cast< ::gogo::chell_specker::ConfidencePack*>(
      ::gogo::chell_specker::ConfidencePack::internal_default_instance());
  _FixConfidencePack_default_instance_._instance.get_mutable()->high_auto_ = const_cast< ::gogo::chell_specker::ConfidencePack*>(
      ::gogo::chell_specker::ConfidencePack::internal_default_instance());
  _SpcReply_default_instance_._instance.get_mutable()->interleaving_info_ = const_cast< ::gogo::chell_specker::SpcInterleavingInfo*>(
      ::gogo::chell_specker::SpcInterleavingInfo::internal_default_instance());
  _SpcReply_default_instance_._instance.get_mutable()->fix_confidence_pack_ = const_cast< ::gogo::chell_specker::FixConfidencePack*>(
      ::gogo::chell_specker::FixConfidencePack::internal_default_instance());
  _SpcReply_default_instance_._instance.get_mutable()->version_info_ = const_cast< ::gogo::chell_specker::VersionInfo*>(
      ::gogo::chell_specker::VersionInfo::internal_default_instance());
  _SpcReply_default_instance_._instance.get_mutable()->wnf_info_ = const_cast< ::gogo::chell_specker::SpcWnfInfo*>(
      ::gogo::chell_specker::SpcWnfInfo::internal_default_instance());
  _SpcResponse_default_instance_._instance.get_mutable()->reply_ = const_cast< ::gogo::chell_specker::SpcReply*>(
      ::gogo::chell_specker::SpcReply::internal_default_instance());
  _SpcResponse_default_instance_._instance.get_mutable()->comment_ = const_cast< ::gogo::chell_specker::SpcComment*>(
      ::gogo::chell_specker::SpcComment::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022spellchecker.proto\022\022gogo.chell_specker"
      "\"f\n\013VersionInfo\022\020\n\010revision\030\001 \001(\t\022\014\n\004pat"
      "h\030\002 \001(\t\022\023\n\013release_tag\030\003 \001(\t\022\022\n\npatch_in"
      "fo\030\004 \001(\t\022\016\n\006db_tag\030\005 \001(\t\"@\n\023SpcInterleav"
      "ingInfo\022\016\n\006exp_id\030\001 \002(\r\022\031\n\021interleaving_"
      "type\030\002 \002(\t\"K\n\016ConfidencePack\022\014\n\004word\030\001 \002"
      "(\001\022\r\n\005split\030\002 \002(\001\022\014\n\004join\030\003 \002(\001\022\016\n\006layou"
      "t\030\004 \002(\001\"\265\001\n\021FixConfidencePack\0223\n\007low_fix"
      "\030\001 \002(\0132\".gogo.chell_specker.ConfidencePa"
      "ck\0224\n\010high_fix\030\002 \002(\0132\".gogo.chell_specke"
      "r.ConfidencePack\0225\n\thigh_auto\030\003 \002(\0132\".go"
      "go.chell_specker.ConfidencePack\"1\n\nSpcWn"
      "fInfo\022\017\n\007wnf_tag\030\001 \001(\t\022\022\n\nwnf_report\030\002 \001"
      "(\t\"\355\003\n\010SpcReply\022\023\n\013autoreplace\030\001 \002(\010\022\023\n\013"
      "fixed_query\030\002 \002(\t\022\026\n\016orig_highlight\030\003 \001("
      "\t\022\027\n\017fixed_highlight\030\004 \001(\t\022\026\n\016fix_confid"
      "ence\030\005 \001(\001\022\027\n\017auto_confidence\030\006 \001(\001\022B\n\021i"
      "nterleaving_info\030\007 \001(\0132\'.gogo.chell_spec"
      "ker.SpcInterleavingInfo\022\020\n\010fix_tags\030\010 \001("
      "\t\022\031\n\021porno_fixed_query\030\t \001(\t\022B\n\023fix_conf"
      "idence_pack\030\n \001(\0132%.gogo.chell_specker.F"
      "ixConfidencePack\022\036\n\026transliter_fixed_que"
      "ry\030\013 \001(\t\0225\n\014version_info\030\r \001(\0132\037.gogo.ch"
      "ell_specker.VersionInfo\022\027\n\017iteration_cou"
      "nt\030\016 \001(\005\0220\n\010wnf_info\030\017 \001(\0132\036.gogo.chell_"
      "specker.SpcWnfInfo\",\n\016SpcCommentItem\022\013\n\003"
      "key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\">\n\nSpcComment\0220"
      "\n\004data\030\001 \003(\0132\".gogo.chell_specker.SpcCom"
      "mentItem\"k\n\013SpcResponse\022+\n\005reply\030\001 \002(\0132\034"
      ".gogo.chell_specker.SpcReply\022/\n\007comment\030"
      "\002 \001(\0132\036.gogo.chell_specker.SpcComment"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spellchecker.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_spellchecker_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VersionInfo::kRevisionFieldNumber;
const int VersionInfo::kPathFieldNumber;
const int VersionInfo::kReleaseTagFieldNumber;
const int VersionInfo::kPatchInfoFieldNumber;
const int VersionInfo::kDbTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionInfo::VersionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.VersionInfo)
}
VersionInfo::VersionInfo(const VersionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_revision()) {
    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  release_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_release_tag()) {
    release_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_tag_);
  }
  patch_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_patch_info()) {
    patch_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.patch_info_);
  }
  db_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_tag()) {
    db_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_tag_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.VersionInfo)
}

void VersionInfo::SharedCtor() {
  _cached_size_ = 0;
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  release_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patch_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VersionInfo::~VersionInfo() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.VersionInfo)
  SharedDtor();
}

void VersionInfo::SharedDtor() {
  revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  release_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patch_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionInfo::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VersionInfo& VersionInfo::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

VersionInfo* VersionInfo::New(::google::protobuf::Arena* arena) const {
  VersionInfo* n = new VersionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.VersionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!revision_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*revision_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!release_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*release_tag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!patch_info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*patch_info_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!db_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*db_tag_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.VersionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string revision = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revision().data(), static_cast<int>(this->revision().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.VersionInfo.revision");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.VersionInfo.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string release_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->release_tag().data(), static_cast<int>(this->release_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.VersionInfo.release_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string patch_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patch_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patch_info().data(), static_cast<int>(this->patch_info().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.VersionInfo.patch_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_tag().data(), static_cast<int>(this->db_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.VersionInfo.db_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.VersionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.VersionInfo)
  return false;
#undef DO_
}

void VersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.VersionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string revision = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revision().data(), static_cast<int>(this->revision().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->revision(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional string release_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->release_tag().data(), static_cast<int>(this->release_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.release_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->release_tag(), output);
  }

  // optional string patch_info = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patch_info().data(), static_cast<int>(this->patch_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.patch_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->patch_info(), output);
  }

  // optional string db_tag = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_tag().data(), static_cast<int>(this->db_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.db_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->db_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.VersionInfo)
}

::google::protobuf::uint8* VersionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.VersionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string revision = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revision().data(), static_cast<int>(this->revision().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->revision(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string release_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->release_tag().data(), static_cast<int>(this->release_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.release_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->release_tag(), target);
  }

  // optional string patch_info = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patch_info().data(), static_cast<int>(this->patch_info().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.patch_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->patch_info(), target);
  }

  // optional string db_tag = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_tag().data(), static_cast<int>(this->db_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.VersionInfo.db_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->db_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.VersionInfo)
  return target;
}

size_t VersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.VersionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string revision = 1;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revision());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string release_tag = 3;
    if (has_release_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release_tag());
    }

    // optional string patch_info = 4;
    if (has_patch_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patch_info());
    }

    // optional string db_tag = 5;
    if (has_db_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_tag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.VersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.VersionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.VersionInfo)
    MergeFrom(*source);
  }
}

void VersionInfo::MergeFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.VersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_revision();
      revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_release_tag();
      release_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_tag_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_patch_info();
      patch_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.patch_info_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_db_tag();
      db_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_tag_);
    }
  }
}

void VersionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  return true;
}

void VersionInfo::Swap(VersionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionInfo::InternalSwap(VersionInfo* other) {
  using std::swap;
  revision_.Swap(&other->revision_);
  path_.Swap(&other->path_);
  release_tag_.Swap(&other->release_tag_);
  patch_info_.Swap(&other->patch_info_);
  db_tag_.Swap(&other->db_tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VersionInfo::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionInfo

// optional string revision = 1;
bool VersionInfo::has_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VersionInfo::set_has_revision() {
  _has_bits_[0] |= 0x00000001u;
}
void VersionInfo::clear_has_revision() {
  _has_bits_[0] &= ~0x00000001u;
}
void VersionInfo::clear_revision() {
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_revision();
}
const ::std::string& VersionInfo::revision() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.VersionInfo.revision)
  return revision_.GetNoArena();
}
void VersionInfo::set_revision(const ::std::string& value) {
  set_has_revision();
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.VersionInfo.revision)
}
#if LANG_CXX11
void VersionInfo::set_revision(::std::string&& value) {
  set_has_revision();
  revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.VersionInfo.revision)
}
#endif
void VersionInfo::set_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_revision();
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.VersionInfo.revision)
}
void VersionInfo::set_revision(const char* value, size_t size) {
  set_has_revision();
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.VersionInfo.revision)
}
::std::string* VersionInfo::mutable_revision() {
  set_has_revision();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.VersionInfo.revision)
  return revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionInfo::release_revision() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.VersionInfo.revision)
  clear_has_revision();
  return revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionInfo::set_allocated_revision(::std::string* revision) {
  if (revision != NULL) {
    set_has_revision();
  } else {
    clear_has_revision();
  }
  revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revision);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.VersionInfo.revision)
}

// optional string path = 2;
bool VersionInfo::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VersionInfo::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
void VersionInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void VersionInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& VersionInfo::path() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.VersionInfo.path)
  return path_.GetNoArena();
}
void VersionInfo::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.VersionInfo.path)
}
#if LANG_CXX11
void VersionInfo::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.VersionInfo.path)
}
#endif
void VersionInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.VersionInfo.path)
}
void VersionInfo::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.VersionInfo.path)
}
::std::string* VersionInfo::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.VersionInfo.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionInfo::release_path() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.VersionInfo.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionInfo::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.VersionInfo.path)
}

// optional string release_tag = 3;
bool VersionInfo::has_release_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VersionInfo::set_has_release_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void VersionInfo::clear_has_release_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void VersionInfo::clear_release_tag() {
  release_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_release_tag();
}
const ::std::string& VersionInfo::release_tag() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.VersionInfo.release_tag)
  return release_tag_.GetNoArena();
}
void VersionInfo::set_release_tag(const ::std::string& value) {
  set_has_release_tag();
  release_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.VersionInfo.release_tag)
}
#if LANG_CXX11
void VersionInfo::set_release_tag(::std::string&& value) {
  set_has_release_tag();
  release_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.VersionInfo.release_tag)
}
#endif
void VersionInfo::set_release_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_release_tag();
  release_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.VersionInfo.release_tag)
}
void VersionInfo::set_release_tag(const char* value, size_t size) {
  set_has_release_tag();
  release_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.VersionInfo.release_tag)
}
::std::string* VersionInfo::mutable_release_tag() {
  set_has_release_tag();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.VersionInfo.release_tag)
  return release_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionInfo::release_release_tag() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.VersionInfo.release_tag)
  clear_has_release_tag();
  return release_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionInfo::set_allocated_release_tag(::std::string* release_tag) {
  if (release_tag != NULL) {
    set_has_release_tag();
  } else {
    clear_has_release_tag();
  }
  release_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), release_tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.VersionInfo.release_tag)
}

// optional string patch_info = 4;
bool VersionInfo::has_patch_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VersionInfo::set_has_patch_info() {
  _has_bits_[0] |= 0x00000008u;
}
void VersionInfo::clear_has_patch_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void VersionInfo::clear_patch_info() {
  patch_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_patch_info();
}
const ::std::string& VersionInfo::patch_info() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.VersionInfo.patch_info)
  return patch_info_.GetNoArena();
}
void VersionInfo::set_patch_info(const ::std::string& value) {
  set_has_patch_info();
  patch_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.VersionInfo.patch_info)
}
#if LANG_CXX11
void VersionInfo::set_patch_info(::std::string&& value) {
  set_has_patch_info();
  patch_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.VersionInfo.patch_info)
}
#endif
void VersionInfo::set_patch_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_patch_info();
  patch_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.VersionInfo.patch_info)
}
void VersionInfo::set_patch_info(const char* value, size_t size) {
  set_has_patch_info();
  patch_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.VersionInfo.patch_info)
}
::std::string* VersionInfo::mutable_patch_info() {
  set_has_patch_info();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.VersionInfo.patch_info)
  return patch_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionInfo::release_patch_info() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.VersionInfo.patch_info)
  clear_has_patch_info();
  return patch_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionInfo::set_allocated_patch_info(::std::string* patch_info) {
  if (patch_info != NULL) {
    set_has_patch_info();
  } else {
    clear_has_patch_info();
  }
  patch_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), patch_info);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.VersionInfo.patch_info)
}

// optional string db_tag = 5;
bool VersionInfo::has_db_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VersionInfo::set_has_db_tag() {
  _has_bits_[0] |= 0x00000010u;
}
void VersionInfo::clear_has_db_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
void VersionInfo::clear_db_tag() {
  db_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_tag();
}
const ::std::string& VersionInfo::db_tag() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.VersionInfo.db_tag)
  return db_tag_.GetNoArena();
}
void VersionInfo::set_db_tag(const ::std::string& value) {
  set_has_db_tag();
  db_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.VersionInfo.db_tag)
}
#if LANG_CXX11
void VersionInfo::set_db_tag(::std::string&& value) {
  set_has_db_tag();
  db_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.VersionInfo.db_tag)
}
#endif
void VersionInfo::set_db_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_tag();
  db_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.VersionInfo.db_tag)
}
void VersionInfo::set_db_tag(const char* value, size_t size) {
  set_has_db_tag();
  db_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.VersionInfo.db_tag)
}
::std::string* VersionInfo::mutable_db_tag() {
  set_has_db_tag();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.VersionInfo.db_tag)
  return db_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionInfo::release_db_tag() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.VersionInfo.db_tag)
  clear_has_db_tag();
  return db_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionInfo::set_allocated_db_tag(::std::string* db_tag) {
  if (db_tag != NULL) {
    set_has_db_tag();
  } else {
    clear_has_db_tag();
  }
  db_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.VersionInfo.db_tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpcInterleavingInfo::kExpIdFieldNumber;
const int SpcInterleavingInfo::kInterleavingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpcInterleavingInfo::SpcInterleavingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.SpcInterleavingInfo)
}
SpcInterleavingInfo::SpcInterleavingInfo(const SpcInterleavingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interleaving_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_interleaving_type()) {
    interleaving_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interleaving_type_);
  }
  exp_id_ = from.exp_id_;
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.SpcInterleavingInfo)
}

void SpcInterleavingInfo::SharedCtor() {
  _cached_size_ = 0;
  interleaving_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_id_ = 0u;
}

SpcInterleavingInfo::~SpcInterleavingInfo() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.SpcInterleavingInfo)
  SharedDtor();
}

void SpcInterleavingInfo::SharedDtor() {
  interleaving_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpcInterleavingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpcInterleavingInfo::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpcInterleavingInfo& SpcInterleavingInfo::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpcInterleavingInfo* SpcInterleavingInfo::New(::google::protobuf::Arena* arena) const {
  SpcInterleavingInfo* n = new SpcInterleavingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpcInterleavingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.SpcInterleavingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_interleaving_type()) {
    GOOGLE_DCHECK(!interleaving_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*interleaving_type_.UnsafeRawStringPointer())->clear();
  }
  exp_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpcInterleavingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.SpcInterleavingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exp_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_exp_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string interleaving_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interleaving_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interleaving_type().data(), static_cast<int>(this->interleaving_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcInterleavingInfo.interleaving_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.SpcInterleavingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.SpcInterleavingInfo)
  return false;
#undef DO_
}

void SpcInterleavingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.SpcInterleavingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 exp_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp_id(), output);
  }

  // required string interleaving_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interleaving_type().data(), static_cast<int>(this->interleaving_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcInterleavingInfo.interleaving_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interleaving_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.SpcInterleavingInfo)
}

::google::protobuf::uint8* SpcInterleavingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.SpcInterleavingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 exp_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp_id(), target);
  }

  // required string interleaving_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interleaving_type().data(), static_cast<int>(this->interleaving_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcInterleavingInfo.interleaving_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interleaving_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.SpcInterleavingInfo)
  return target;
}

size_t SpcInterleavingInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.chell_specker.SpcInterleavingInfo)
  size_t total_size = 0;

  if (has_interleaving_type()) {
    // required string interleaving_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interleaving_type());
  }

  if (has_exp_id()) {
    // required uint32 exp_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp_id());
  }

  return total_size;
}
size_t SpcInterleavingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.SpcInterleavingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string interleaving_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interleaving_type());

    // required uint32 exp_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpcInterleavingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.SpcInterleavingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcInterleavingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpcInterleavingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.SpcInterleavingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.SpcInterleavingInfo)
    MergeFrom(*source);
  }
}

void SpcInterleavingInfo::MergeFrom(const SpcInterleavingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.SpcInterleavingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_interleaving_type();
      interleaving_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interleaving_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      exp_id_ = from.exp_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpcInterleavingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.SpcInterleavingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcInterleavingInfo::CopyFrom(const SpcInterleavingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.SpcInterleavingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcInterleavingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SpcInterleavingInfo::Swap(SpcInterleavingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpcInterleavingInfo::InternalSwap(SpcInterleavingInfo* other) {
  using std::swap;
  interleaving_type_.Swap(&other->interleaving_type_);
  swap(exp_id_, other->exp_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpcInterleavingInfo::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpcInterleavingInfo

// required uint32 exp_id = 1;
bool SpcInterleavingInfo::has_exp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpcInterleavingInfo::set_has_exp_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SpcInterleavingInfo::clear_has_exp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpcInterleavingInfo::clear_exp_id() {
  exp_id_ = 0u;
  clear_has_exp_id();
}
::google::protobuf::uint32 SpcInterleavingInfo::exp_id() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcInterleavingInfo.exp_id)
  return exp_id_;
}
void SpcInterleavingInfo::set_exp_id(::google::protobuf::uint32 value) {
  set_has_exp_id();
  exp_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcInterleavingInfo.exp_id)
}

// required string interleaving_type = 2;
bool SpcInterleavingInfo::has_interleaving_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpcInterleavingInfo::set_has_interleaving_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SpcInterleavingInfo::clear_has_interleaving_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpcInterleavingInfo::clear_interleaving_type() {
  interleaving_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_interleaving_type();
}
const ::std::string& SpcInterleavingInfo::interleaving_type() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcInterleavingInfo.interleaving_type)
  return interleaving_type_.GetNoArena();
}
void SpcInterleavingInfo::set_interleaving_type(const ::std::string& value) {
  set_has_interleaving_type();
  interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcInterleavingInfo.interleaving_type)
}
#if LANG_CXX11
void SpcInterleavingInfo::set_interleaving_type(::std::string&& value) {
  set_has_interleaving_type();
  interleaving_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcInterleavingInfo.interleaving_type)
}
#endif
void SpcInterleavingInfo::set_interleaving_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_interleaving_type();
  interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcInterleavingInfo.interleaving_type)
}
void SpcInterleavingInfo::set_interleaving_type(const char* value, size_t size) {
  set_has_interleaving_type();
  interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcInterleavingInfo.interleaving_type)
}
::std::string* SpcInterleavingInfo::mutable_interleaving_type() {
  set_has_interleaving_type();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcInterleavingInfo.interleaving_type)
  return interleaving_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcInterleavingInfo::release_interleaving_type() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcInterleavingInfo.interleaving_type)
  clear_has_interleaving_type();
  return interleaving_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcInterleavingInfo::set_allocated_interleaving_type(::std::string* interleaving_type) {
  if (interleaving_type != NULL) {
    set_has_interleaving_type();
  } else {
    clear_has_interleaving_type();
  }
  interleaving_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interleaving_type);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcInterleavingInfo.interleaving_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfidencePack::kWordFieldNumber;
const int ConfidencePack::kSplitFieldNumber;
const int ConfidencePack::kJoinFieldNumber;
const int ConfidencePack::kLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfidencePack::ConfidencePack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.ConfidencePack)
}
ConfidencePack::ConfidencePack(const ConfidencePack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&word_, &from.word_,
    static_cast<size_t>(reinterpret_cast<char*>(&layout_) -
    reinterpret_cast<char*>(&word_)) + sizeof(layout_));
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.ConfidencePack)
}

void ConfidencePack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&word_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layout_) -
      reinterpret_cast<char*>(&word_)) + sizeof(layout_));
}

ConfidencePack::~ConfidencePack() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.ConfidencePack)
  SharedDtor();
}

void ConfidencePack::SharedDtor() {
}

void ConfidencePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfidencePack::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfidencePack& ConfidencePack::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfidencePack* ConfidencePack::New(::google::protobuf::Arena* arena) const {
  ConfidencePack* n = new ConfidencePack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfidencePack::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.ConfidencePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&word_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layout_) -
        reinterpret_cast<char*>(&word_)) + sizeof(layout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfidencePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.ConfidencePack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double word = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_word();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &word_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double split = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_split();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double join = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_join();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &join_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double layout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_layout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.ConfidencePack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.ConfidencePack)
  return false;
#undef DO_
}

void ConfidencePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.ConfidencePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double word = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->word(), output);
  }

  // required double split = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->split(), output);
  }

  // required double join = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->join(), output);
  }

  // required double layout = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.ConfidencePack)
}

::google::protobuf::uint8* ConfidencePack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.ConfidencePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double word = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->word(), target);
  }

  // required double split = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->split(), target);
  }

  // required double join = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->join(), target);
  }

  // required double layout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.ConfidencePack)
  return target;
}

size_t ConfidencePack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.chell_specker.ConfidencePack)
  size_t total_size = 0;

  if (has_word()) {
    // required double word = 1;
    total_size += 1 + 8;
  }

  if (has_split()) {
    // required double split = 2;
    total_size += 1 + 8;
  }

  if (has_join()) {
    // required double join = 3;
    total_size += 1 + 8;
  }

  if (has_layout()) {
    // required double layout = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ConfidencePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.ConfidencePack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double word = 1;
    total_size += 1 + 8;

    // required double split = 2;
    total_size += 1 + 8;

    // required double join = 3;
    total_size += 1 + 8;

    // required double layout = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfidencePack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.ConfidencePack)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfidencePack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfidencePack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.ConfidencePack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.ConfidencePack)
    MergeFrom(*source);
  }
}

void ConfidencePack::MergeFrom(const ConfidencePack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.ConfidencePack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      word_ = from.word_;
    }
    if (cached_has_bits & 0x00000002u) {
      split_ = from.split_;
    }
    if (cached_has_bits & 0x00000004u) {
      join_ = from.join_;
    }
    if (cached_has_bits & 0x00000008u) {
      layout_ = from.layout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfidencePack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.ConfidencePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfidencePack::CopyFrom(const ConfidencePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.ConfidencePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfidencePack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfidencePack::Swap(ConfidencePack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfidencePack::InternalSwap(ConfidencePack* other) {
  using std::swap;
  swap(word_, other->word_);
  swap(split_, other->split_);
  swap(join_, other->join_);
  swap(layout_, other->layout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfidencePack::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfidencePack

// required double word = 1;
bool ConfidencePack::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfidencePack::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfidencePack::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfidencePack::clear_word() {
  word_ = 0;
  clear_has_word();
}
double ConfidencePack::word() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.ConfidencePack.word)
  return word_;
}
void ConfidencePack::set_word(double value) {
  set_has_word();
  word_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.ConfidencePack.word)
}

// required double split = 2;
bool ConfidencePack::has_split() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfidencePack::set_has_split() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfidencePack::clear_has_split() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfidencePack::clear_split() {
  split_ = 0;
  clear_has_split();
}
double ConfidencePack::split() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.ConfidencePack.split)
  return split_;
}
void ConfidencePack::set_split(double value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.ConfidencePack.split)
}

// required double join = 3;
bool ConfidencePack::has_join() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfidencePack::set_has_join() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfidencePack::clear_has_join() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfidencePack::clear_join() {
  join_ = 0;
  clear_has_join();
}
double ConfidencePack::join() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.ConfidencePack.join)
  return join_;
}
void ConfidencePack::set_join(double value) {
  set_has_join();
  join_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.ConfidencePack.join)
}

// required double layout = 4;
bool ConfidencePack::has_layout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfidencePack::set_has_layout() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfidencePack::clear_has_layout() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfidencePack::clear_layout() {
  layout_ = 0;
  clear_has_layout();
}
double ConfidencePack::layout() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.ConfidencePack.layout)
  return layout_;
}
void ConfidencePack::set_layout(double value) {
  set_has_layout();
  layout_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.ConfidencePack.layout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixConfidencePack::kLowFixFieldNumber;
const int FixConfidencePack::kHighFixFieldNumber;
const int FixConfidencePack::kHighAutoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixConfidencePack::FixConfidencePack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.FixConfidencePack)
}
FixConfidencePack::FixConfidencePack(const FixConfidencePack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_low_fix()) {
    low_fix_ = new ::gogo::chell_specker::ConfidencePack(*from.low_fix_);
  } else {
    low_fix_ = NULL;
  }
  if (from.has_high_fix()) {
    high_fix_ = new ::gogo::chell_specker::ConfidencePack(*from.high_fix_);
  } else {
    high_fix_ = NULL;
  }
  if (from.has_high_auto()) {
    high_auto_ = new ::gogo::chell_specker::ConfidencePack(*from.high_auto_);
  } else {
    high_auto_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.FixConfidencePack)
}

void FixConfidencePack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&low_fix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_auto_) -
      reinterpret_cast<char*>(&low_fix_)) + sizeof(high_auto_));
}

FixConfidencePack::~FixConfidencePack() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.FixConfidencePack)
  SharedDtor();
}

void FixConfidencePack::SharedDtor() {
  if (this != internal_default_instance()) delete low_fix_;
  if (this != internal_default_instance()) delete high_fix_;
  if (this != internal_default_instance()) delete high_auto_;
}

void FixConfidencePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixConfidencePack::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixConfidencePack& FixConfidencePack::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

FixConfidencePack* FixConfidencePack::New(::google::protobuf::Arena* arena) const {
  FixConfidencePack* n = new FixConfidencePack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixConfidencePack::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.FixConfidencePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(low_fix_ != NULL);
      low_fix_->::gogo::chell_specker::ConfidencePack::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(high_fix_ != NULL);
      high_fix_->::gogo::chell_specker::ConfidencePack::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(high_auto_ != NULL);
      high_auto_->::gogo::chell_specker::ConfidencePack::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FixConfidencePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.FixConfidencePack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gogo.chell_specker.ConfidencePack low_fix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_fix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gogo.chell_specker.ConfidencePack high_fix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_fix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gogo.chell_specker.ConfidencePack high_auto = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_auto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.FixConfidencePack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.FixConfidencePack)
  return false;
#undef DO_
}

void FixConfidencePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.FixConfidencePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gogo.chell_specker.ConfidencePack low_fix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->low_fix_, output);
  }

  // required .gogo.chell_specker.ConfidencePack high_fix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->high_fix_, output);
  }

  // required .gogo.chell_specker.ConfidencePack high_auto = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->high_auto_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.FixConfidencePack)
}

::google::protobuf::uint8* FixConfidencePack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.FixConfidencePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gogo.chell_specker.ConfidencePack low_fix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->low_fix_, deterministic, target);
  }

  // required .gogo.chell_specker.ConfidencePack high_fix = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->high_fix_, deterministic, target);
  }

  // required .gogo.chell_specker.ConfidencePack high_auto = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->high_auto_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.FixConfidencePack)
  return target;
}

size_t FixConfidencePack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.chell_specker.FixConfidencePack)
  size_t total_size = 0;

  if (has_low_fix()) {
    // required .gogo.chell_specker.ConfidencePack low_fix = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->low_fix_);
  }

  if (has_high_fix()) {
    // required .gogo.chell_specker.ConfidencePack high_fix = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->high_fix_);
  }

  if (has_high_auto()) {
    // required .gogo.chell_specker.ConfidencePack high_auto = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->high_auto_);
  }

  return total_size;
}
size_t FixConfidencePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.FixConfidencePack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .gogo.chell_specker.ConfidencePack low_fix = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->low_fix_);

    // required .gogo.chell_specker.ConfidencePack high_fix = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->high_fix_);

    // required .gogo.chell_specker.ConfidencePack high_auto = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->high_auto_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixConfidencePack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.FixConfidencePack)
  GOOGLE_DCHECK_NE(&from, this);
  const FixConfidencePack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixConfidencePack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.FixConfidencePack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.FixConfidencePack)
    MergeFrom(*source);
  }
}

void FixConfidencePack::MergeFrom(const FixConfidencePack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.FixConfidencePack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_low_fix()->::gogo::chell_specker::ConfidencePack::MergeFrom(from.low_fix());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_high_fix()->::gogo::chell_specker::ConfidencePack::MergeFrom(from.high_fix());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_high_auto()->::gogo::chell_specker::ConfidencePack::MergeFrom(from.high_auto());
    }
  }
}

void FixConfidencePack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.FixConfidencePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixConfidencePack::CopyFrom(const FixConfidencePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.FixConfidencePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixConfidencePack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_low_fix()) {
    if (!this->low_fix_->IsInitialized()) return false;
  }
  if (has_high_fix()) {
    if (!this->high_fix_->IsInitialized()) return false;
  }
  if (has_high_auto()) {
    if (!this->high_auto_->IsInitialized()) return false;
  }
  return true;
}

void FixConfidencePack::Swap(FixConfidencePack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixConfidencePack::InternalSwap(FixConfidencePack* other) {
  using std::swap;
  swap(low_fix_, other->low_fix_);
  swap(high_fix_, other->high_fix_);
  swap(high_auto_, other->high_auto_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixConfidencePack::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixConfidencePack

// required .gogo.chell_specker.ConfidencePack low_fix = 1;
bool FixConfidencePack::has_low_fix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FixConfidencePack::set_has_low_fix() {
  _has_bits_[0] |= 0x00000001u;
}
void FixConfidencePack::clear_has_low_fix() {
  _has_bits_[0] &= ~0x00000001u;
}
void FixConfidencePack::clear_low_fix() {
  if (low_fix_ != NULL) low_fix_->::gogo::chell_specker::ConfidencePack::Clear();
  clear_has_low_fix();
}
const ::gogo::chell_specker::ConfidencePack& FixConfidencePack::low_fix() const {
  const ::gogo::chell_specker::ConfidencePack* p = low_fix_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.FixConfidencePack.low_fix)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::ConfidencePack*>(
      &::gogo::chell_specker::_ConfidencePack_default_instance_);
}
::gogo::chell_specker::ConfidencePack* FixConfidencePack::mutable_low_fix() {
  set_has_low_fix();
  if (low_fix_ == NULL) {
    low_fix_ = new ::gogo::chell_specker::ConfidencePack;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.FixConfidencePack.low_fix)
  return low_fix_;
}
::gogo::chell_specker::ConfidencePack* FixConfidencePack::release_low_fix() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.FixConfidencePack.low_fix)
  clear_has_low_fix();
  ::gogo::chell_specker::ConfidencePack* temp = low_fix_;
  low_fix_ = NULL;
  return temp;
}
void FixConfidencePack::set_allocated_low_fix(::gogo::chell_specker::ConfidencePack* low_fix) {
  delete low_fix_;
  low_fix_ = low_fix;
  if (low_fix) {
    set_has_low_fix();
  } else {
    clear_has_low_fix();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.FixConfidencePack.low_fix)
}

// required .gogo.chell_specker.ConfidencePack high_fix = 2;
bool FixConfidencePack::has_high_fix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FixConfidencePack::set_has_high_fix() {
  _has_bits_[0] |= 0x00000002u;
}
void FixConfidencePack::clear_has_high_fix() {
  _has_bits_[0] &= ~0x00000002u;
}
void FixConfidencePack::clear_high_fix() {
  if (high_fix_ != NULL) high_fix_->::gogo::chell_specker::ConfidencePack::Clear();
  clear_has_high_fix();
}
const ::gogo::chell_specker::ConfidencePack& FixConfidencePack::high_fix() const {
  const ::gogo::chell_specker::ConfidencePack* p = high_fix_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.FixConfidencePack.high_fix)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::ConfidencePack*>(
      &::gogo::chell_specker::_ConfidencePack_default_instance_);
}
::gogo::chell_specker::ConfidencePack* FixConfidencePack::mutable_high_fix() {
  set_has_high_fix();
  if (high_fix_ == NULL) {
    high_fix_ = new ::gogo::chell_specker::ConfidencePack;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.FixConfidencePack.high_fix)
  return high_fix_;
}
::gogo::chell_specker::ConfidencePack* FixConfidencePack::release_high_fix() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.FixConfidencePack.high_fix)
  clear_has_high_fix();
  ::gogo::chell_specker::ConfidencePack* temp = high_fix_;
  high_fix_ = NULL;
  return temp;
}
void FixConfidencePack::set_allocated_high_fix(::gogo::chell_specker::ConfidencePack* high_fix) {
  delete high_fix_;
  high_fix_ = high_fix;
  if (high_fix) {
    set_has_high_fix();
  } else {
    clear_has_high_fix();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.FixConfidencePack.high_fix)
}

// required .gogo.chell_specker.ConfidencePack high_auto = 3;
bool FixConfidencePack::has_high_auto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FixConfidencePack::set_has_high_auto() {
  _has_bits_[0] |= 0x00000004u;
}
void FixConfidencePack::clear_has_high_auto() {
  _has_bits_[0] &= ~0x00000004u;
}
void FixConfidencePack::clear_high_auto() {
  if (high_auto_ != NULL) high_auto_->::gogo::chell_specker::ConfidencePack::Clear();
  clear_has_high_auto();
}
const ::gogo::chell_specker::ConfidencePack& FixConfidencePack::high_auto() const {
  const ::gogo::chell_specker::ConfidencePack* p = high_auto_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.FixConfidencePack.high_auto)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::ConfidencePack*>(
      &::gogo::chell_specker::_ConfidencePack_default_instance_);
}
::gogo::chell_specker::ConfidencePack* FixConfidencePack::mutable_high_auto() {
  set_has_high_auto();
  if (high_auto_ == NULL) {
    high_auto_ = new ::gogo::chell_specker::ConfidencePack;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.FixConfidencePack.high_auto)
  return high_auto_;
}
::gogo::chell_specker::ConfidencePack* FixConfidencePack::release_high_auto() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.FixConfidencePack.high_auto)
  clear_has_high_auto();
  ::gogo::chell_specker::ConfidencePack* temp = high_auto_;
  high_auto_ = NULL;
  return temp;
}
void FixConfidencePack::set_allocated_high_auto(::gogo::chell_specker::ConfidencePack* high_auto) {
  delete high_auto_;
  high_auto_ = high_auto;
  if (high_auto) {
    set_has_high_auto();
  } else {
    clear_has_high_auto();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.FixConfidencePack.high_auto)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpcWnfInfo::kWnfTagFieldNumber;
const int SpcWnfInfo::kWnfReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpcWnfInfo::SpcWnfInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.SpcWnfInfo)
}
SpcWnfInfo::SpcWnfInfo(const SpcWnfInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wnf_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wnf_tag()) {
    wnf_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wnf_tag_);
  }
  wnf_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wnf_report()) {
    wnf_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wnf_report_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.SpcWnfInfo)
}

void SpcWnfInfo::SharedCtor() {
  _cached_size_ = 0;
  wnf_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wnf_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SpcWnfInfo::~SpcWnfInfo() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.SpcWnfInfo)
  SharedDtor();
}

void SpcWnfInfo::SharedDtor() {
  wnf_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wnf_report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpcWnfInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpcWnfInfo::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpcWnfInfo& SpcWnfInfo::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpcWnfInfo* SpcWnfInfo::New(::google::protobuf::Arena* arena) const {
  SpcWnfInfo* n = new SpcWnfInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpcWnfInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.SpcWnfInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!wnf_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wnf_tag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!wnf_report_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wnf_report_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpcWnfInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.SpcWnfInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wnf_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wnf_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wnf_tag().data(), static_cast<int>(this->wnf_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcWnfInfo.wnf_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wnf_report = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wnf_report()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wnf_report().data(), static_cast<int>(this->wnf_report().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcWnfInfo.wnf_report");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.SpcWnfInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.SpcWnfInfo)
  return false;
#undef DO_
}

void SpcWnfInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.SpcWnfInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wnf_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wnf_tag().data(), static_cast<int>(this->wnf_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcWnfInfo.wnf_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wnf_tag(), output);
  }

  // optional string wnf_report = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wnf_report().data(), static_cast<int>(this->wnf_report().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcWnfInfo.wnf_report");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wnf_report(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.SpcWnfInfo)
}

::google::protobuf::uint8* SpcWnfInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.SpcWnfInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wnf_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wnf_tag().data(), static_cast<int>(this->wnf_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcWnfInfo.wnf_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wnf_tag(), target);
  }

  // optional string wnf_report = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wnf_report().data(), static_cast<int>(this->wnf_report().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcWnfInfo.wnf_report");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wnf_report(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.SpcWnfInfo)
  return target;
}

size_t SpcWnfInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.SpcWnfInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string wnf_tag = 1;
    if (has_wnf_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wnf_tag());
    }

    // optional string wnf_report = 2;
    if (has_wnf_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wnf_report());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpcWnfInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.SpcWnfInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcWnfInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpcWnfInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.SpcWnfInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.SpcWnfInfo)
    MergeFrom(*source);
  }
}

void SpcWnfInfo::MergeFrom(const SpcWnfInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.SpcWnfInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wnf_tag();
      wnf_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wnf_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_wnf_report();
      wnf_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wnf_report_);
    }
  }
}

void SpcWnfInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.SpcWnfInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcWnfInfo::CopyFrom(const SpcWnfInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.SpcWnfInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcWnfInfo::IsInitialized() const {
  return true;
}

void SpcWnfInfo::Swap(SpcWnfInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpcWnfInfo::InternalSwap(SpcWnfInfo* other) {
  using std::swap;
  wnf_tag_.Swap(&other->wnf_tag_);
  wnf_report_.Swap(&other->wnf_report_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpcWnfInfo::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpcWnfInfo

// optional string wnf_tag = 1;
bool SpcWnfInfo::has_wnf_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpcWnfInfo::set_has_wnf_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void SpcWnfInfo::clear_has_wnf_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpcWnfInfo::clear_wnf_tag() {
  wnf_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wnf_tag();
}
const ::std::string& SpcWnfInfo::wnf_tag() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcWnfInfo.wnf_tag)
  return wnf_tag_.GetNoArena();
}
void SpcWnfInfo::set_wnf_tag(const ::std::string& value) {
  set_has_wnf_tag();
  wnf_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcWnfInfo.wnf_tag)
}
#if LANG_CXX11
void SpcWnfInfo::set_wnf_tag(::std::string&& value) {
  set_has_wnf_tag();
  wnf_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcWnfInfo.wnf_tag)
}
#endif
void SpcWnfInfo::set_wnf_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wnf_tag();
  wnf_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcWnfInfo.wnf_tag)
}
void SpcWnfInfo::set_wnf_tag(const char* value, size_t size) {
  set_has_wnf_tag();
  wnf_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcWnfInfo.wnf_tag)
}
::std::string* SpcWnfInfo::mutable_wnf_tag() {
  set_has_wnf_tag();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcWnfInfo.wnf_tag)
  return wnf_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcWnfInfo::release_wnf_tag() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcWnfInfo.wnf_tag)
  clear_has_wnf_tag();
  return wnf_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcWnfInfo::set_allocated_wnf_tag(::std::string* wnf_tag) {
  if (wnf_tag != NULL) {
    set_has_wnf_tag();
  } else {
    clear_has_wnf_tag();
  }
  wnf_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wnf_tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcWnfInfo.wnf_tag)
}

// optional string wnf_report = 2;
bool SpcWnfInfo::has_wnf_report() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpcWnfInfo::set_has_wnf_report() {
  _has_bits_[0] |= 0x00000002u;
}
void SpcWnfInfo::clear_has_wnf_report() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpcWnfInfo::clear_wnf_report() {
  wnf_report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wnf_report();
}
const ::std::string& SpcWnfInfo::wnf_report() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcWnfInfo.wnf_report)
  return wnf_report_.GetNoArena();
}
void SpcWnfInfo::set_wnf_report(const ::std::string& value) {
  set_has_wnf_report();
  wnf_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcWnfInfo.wnf_report)
}
#if LANG_CXX11
void SpcWnfInfo::set_wnf_report(::std::string&& value) {
  set_has_wnf_report();
  wnf_report_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcWnfInfo.wnf_report)
}
#endif
void SpcWnfInfo::set_wnf_report(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wnf_report();
  wnf_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcWnfInfo.wnf_report)
}
void SpcWnfInfo::set_wnf_report(const char* value, size_t size) {
  set_has_wnf_report();
  wnf_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcWnfInfo.wnf_report)
}
::std::string* SpcWnfInfo::mutable_wnf_report() {
  set_has_wnf_report();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcWnfInfo.wnf_report)
  return wnf_report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcWnfInfo::release_wnf_report() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcWnfInfo.wnf_report)
  clear_has_wnf_report();
  return wnf_report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcWnfInfo::set_allocated_wnf_report(::std::string* wnf_report) {
  if (wnf_report != NULL) {
    set_has_wnf_report();
  } else {
    clear_has_wnf_report();
  }
  wnf_report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wnf_report);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcWnfInfo.wnf_report)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpcReply::kAutoreplaceFieldNumber;
const int SpcReply::kFixedQueryFieldNumber;
const int SpcReply::kOrigHighlightFieldNumber;
const int SpcReply::kFixedHighlightFieldNumber;
const int SpcReply::kFixConfidenceFieldNumber;
const int SpcReply::kAutoConfidenceFieldNumber;
const int SpcReply::kInterleavingInfoFieldNumber;
const int SpcReply::kFixTagsFieldNumber;
const int SpcReply::kPornoFixedQueryFieldNumber;
const int SpcReply::kFixConfidencePackFieldNumber;
const int SpcReply::kTransliterFixedQueryFieldNumber;
const int SpcReply::kVersionInfoFieldNumber;
const int SpcReply::kIterationCountFieldNumber;
const int SpcReply::kWnfInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpcReply::SpcReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.SpcReply)
}
SpcReply::SpcReply(const SpcReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fixed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fixed_query()) {
    fixed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fixed_query_);
  }
  orig_highlight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orig_highlight()) {
    orig_highlight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_highlight_);
  }
  fixed_highlight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fixed_highlight()) {
    fixed_highlight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fixed_highlight_);
  }
  fix_tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fix_tags()) {
    fix_tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fix_tags_);
  }
  porno_fixed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_porno_fixed_query()) {
    porno_fixed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.porno_fixed_query_);
  }
  transliter_fixed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transliter_fixed_query()) {
    transliter_fixed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transliter_fixed_query_);
  }
  if (from.has_interleaving_info()) {
    interleaving_info_ = new ::gogo::chell_specker::SpcInterleavingInfo(*from.interleaving_info_);
  } else {
    interleaving_info_ = NULL;
  }
  if (from.has_fix_confidence_pack()) {
    fix_confidence_pack_ = new ::gogo::chell_specker::FixConfidencePack(*from.fix_confidence_pack_);
  } else {
    fix_confidence_pack_ = NULL;
  }
  if (from.has_version_info()) {
    version_info_ = new ::gogo::chell_specker::VersionInfo(*from.version_info_);
  } else {
    version_info_ = NULL;
  }
  if (from.has_wnf_info()) {
    wnf_info_ = new ::gogo::chell_specker::SpcWnfInfo(*from.wnf_info_);
  } else {
    wnf_info_ = NULL;
  }
  ::memcpy(&fix_confidence_, &from.fix_confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&iteration_count_) -
    reinterpret_cast<char*>(&fix_confidence_)) + sizeof(iteration_count_));
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.SpcReply)
}

void SpcReply::SharedCtor() {
  _cached_size_ = 0;
  fixed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_highlight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fixed_highlight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fix_tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  porno_fixed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transliter_fixed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&interleaving_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iteration_count_) -
      reinterpret_cast<char*>(&interleaving_info_)) + sizeof(iteration_count_));
}

SpcReply::~SpcReply() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.SpcReply)
  SharedDtor();
}

void SpcReply::SharedDtor() {
  fixed_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_highlight_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fixed_highlight_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fix_tags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  porno_fixed_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transliter_fixed_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interleaving_info_;
  if (this != internal_default_instance()) delete fix_confidence_pack_;
  if (this != internal_default_instance()) delete version_info_;
  if (this != internal_default_instance()) delete wnf_info_;
}

void SpcReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpcReply::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpcReply& SpcReply::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpcReply* SpcReply::New(::google::protobuf::Arena* arena) const {
  SpcReply* n = new SpcReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpcReply::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.SpcReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!fixed_query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fixed_query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!orig_highlight_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*orig_highlight_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!fixed_highlight_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fixed_highlight_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!fix_tags_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fix_tags_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!porno_fixed_query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*porno_fixed_query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!transliter_fixed_query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transliter_fixed_query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(interleaving_info_ != NULL);
      interleaving_info_->::gogo::chell_specker::SpcInterleavingInfo::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(fix_confidence_pack_ != NULL);
      fix_confidence_pack_->::gogo::chell_specker::FixConfidencePack::Clear();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(version_info_ != NULL);
      version_info_->::gogo::chell_specker::VersionInfo::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(wnf_info_ != NULL);
      wnf_info_->::gogo::chell_specker::SpcWnfInfo::Clear();
    }
  }
  if (cached_has_bits & 15360u) {
    ::memset(&fix_confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iteration_count_) -
        reinterpret_cast<char*>(&fix_confidence_)) + sizeof(iteration_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpcReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.SpcReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool autoreplace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_autoreplace();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoreplace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fixed_query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fixed_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fixed_query().data(), static_cast<int>(this->fixed_query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcReply.fixed_query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orig_highlight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_highlight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_highlight().data(), static_cast<int>(this->orig_highlight().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcReply.orig_highlight");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fixed_highlight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fixed_highlight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fixed_highlight().data(), static_cast<int>(this->fixed_highlight().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcReply.fixed_highlight");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fix_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_fix_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fix_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double auto_confidence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_auto_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &auto_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.chell_specker.SpcInterleavingInfo interleaving_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interleaving_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fix_tags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fix_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fix_tags().data(), static_cast<int>(this->fix_tags().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcReply.fix_tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string porno_fixed_query = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_porno_fixed_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->porno_fixed_query().data(), static_cast<int>(this->porno_fixed_query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcReply.porno_fixed_query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.chell_specker.FixConfidencePack fix_confidence_pack = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fix_confidence_pack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string transliter_fixed_query = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transliter_fixed_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transliter_fixed_query().data(), static_cast<int>(this->transliter_fixed_query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcReply.transliter_fixed_query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.chell_specker.VersionInfo version_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iteration_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_iteration_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iteration_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.chell_specker.SpcWnfInfo wnf_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wnf_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.SpcReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.SpcReply)
  return false;
#undef DO_
}

void SpcReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.SpcReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool autoreplace = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->autoreplace(), output);
  }

  // required string fixed_query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fixed_query().data(), static_cast<int>(this->fixed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.fixed_query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fixed_query(), output);
  }

  // optional string orig_highlight = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_highlight().data(), static_cast<int>(this->orig_highlight().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.orig_highlight");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orig_highlight(), output);
  }

  // optional string fixed_highlight = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fixed_highlight().data(), static_cast<int>(this->fixed_highlight().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.fixed_highlight");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fixed_highlight(), output);
  }

  // optional double fix_confidence = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fix_confidence(), output);
  }

  // optional double auto_confidence = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->auto_confidence(), output);
  }

  // optional .gogo.chell_specker.SpcInterleavingInfo interleaving_info = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->interleaving_info_, output);
  }

  // optional string fix_tags = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fix_tags().data(), static_cast<int>(this->fix_tags().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.fix_tags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->fix_tags(), output);
  }

  // optional string porno_fixed_query = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->porno_fixed_query().data(), static_cast<int>(this->porno_fixed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.porno_fixed_query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->porno_fixed_query(), output);
  }

  // optional .gogo.chell_specker.FixConfidencePack fix_confidence_pack = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->fix_confidence_pack_, output);
  }

  // optional string transliter_fixed_query = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transliter_fixed_query().data(), static_cast<int>(this->transliter_fixed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.transliter_fixed_query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->transliter_fixed_query(), output);
  }

  // optional .gogo.chell_specker.VersionInfo version_info = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->version_info_, output);
  }

  // optional int32 iteration_count = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->iteration_count(), output);
  }

  // optional .gogo.chell_specker.SpcWnfInfo wnf_info = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->wnf_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.SpcReply)
}

::google::protobuf::uint8* SpcReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.SpcReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool autoreplace = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->autoreplace(), target);
  }

  // required string fixed_query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fixed_query().data(), static_cast<int>(this->fixed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.fixed_query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fixed_query(), target);
  }

  // optional string orig_highlight = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_highlight().data(), static_cast<int>(this->orig_highlight().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.orig_highlight");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orig_highlight(), target);
  }

  // optional string fixed_highlight = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fixed_highlight().data(), static_cast<int>(this->fixed_highlight().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.fixed_highlight");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fixed_highlight(), target);
  }

  // optional double fix_confidence = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fix_confidence(), target);
  }

  // optional double auto_confidence = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->auto_confidence(), target);
  }

  // optional .gogo.chell_specker.SpcInterleavingInfo interleaving_info = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->interleaving_info_, deterministic, target);
  }

  // optional string fix_tags = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fix_tags().data(), static_cast<int>(this->fix_tags().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.fix_tags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fix_tags(), target);
  }

  // optional string porno_fixed_query = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->porno_fixed_query().data(), static_cast<int>(this->porno_fixed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.porno_fixed_query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->porno_fixed_query(), target);
  }

  // optional .gogo.chell_specker.FixConfidencePack fix_confidence_pack = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->fix_confidence_pack_, deterministic, target);
  }

  // optional string transliter_fixed_query = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transliter_fixed_query().data(), static_cast<int>(this->transliter_fixed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcReply.transliter_fixed_query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->transliter_fixed_query(), target);
  }

  // optional .gogo.chell_specker.VersionInfo version_info = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->version_info_, deterministic, target);
  }

  // optional int32 iteration_count = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->iteration_count(), target);
  }

  // optional .gogo.chell_specker.SpcWnfInfo wnf_info = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->wnf_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.SpcReply)
  return target;
}

size_t SpcReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.chell_specker.SpcReply)
  size_t total_size = 0;

  if (has_fixed_query()) {
    // required string fixed_query = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fixed_query());
  }

  if (has_autoreplace()) {
    // required bool autoreplace = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SpcReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.SpcReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001001) ^ 0x00001001) == 0) {  // All required fields are present.
    // required string fixed_query = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fixed_query());

    // required bool autoreplace = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional string orig_highlight = 3;
    if (has_orig_highlight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_highlight());
    }

    // optional string fixed_highlight = 4;
    if (has_fixed_highlight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fixed_highlight());
    }

    // optional string fix_tags = 8;
    if (has_fix_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fix_tags());
    }

    // optional string porno_fixed_query = 9;
    if (has_porno_fixed_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->porno_fixed_query());
    }

    // optional string transliter_fixed_query = 11;
    if (has_transliter_fixed_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transliter_fixed_query());
    }

    // optional .gogo.chell_specker.SpcInterleavingInfo interleaving_info = 7;
    if (has_interleaving_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interleaving_info_);
    }

    // optional .gogo.chell_specker.FixConfidencePack fix_confidence_pack = 10;
    if (has_fix_confidence_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fix_confidence_pack_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .gogo.chell_specker.VersionInfo version_info = 13;
    if (has_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_info_);
    }

    // optional .gogo.chell_specker.SpcWnfInfo wnf_info = 15;
    if (has_wnf_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wnf_info_);
    }

    // optional double fix_confidence = 5;
    if (has_fix_confidence()) {
      total_size += 1 + 8;
    }

    // optional double auto_confidence = 6;
    if (has_auto_confidence()) {
      total_size += 1 + 8;
    }

  }
  // optional int32 iteration_count = 14;
  if (has_iteration_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iteration_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpcReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.SpcReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpcReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.SpcReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.SpcReply)
    MergeFrom(*source);
  }
}

void SpcReply::MergeFrom(const SpcReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.SpcReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fixed_query();
      fixed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fixed_query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_orig_highlight();
      orig_highlight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_highlight_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fixed_highlight();
      fixed_highlight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fixed_highlight_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_fix_tags();
      fix_tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fix_tags_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_porno_fixed_query();
      porno_fixed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.porno_fixed_query_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_transliter_fixed_query();
      transliter_fixed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transliter_fixed_query_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_interleaving_info()->::gogo::chell_specker::SpcInterleavingInfo::MergeFrom(from.interleaving_info());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_fix_confidence_pack()->::gogo::chell_specker::FixConfidencePack::MergeFrom(from.fix_confidence_pack());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_version_info()->::gogo::chell_specker::VersionInfo::MergeFrom(from.version_info());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_wnf_info()->::gogo::chell_specker::SpcWnfInfo::MergeFrom(from.wnf_info());
    }
    if (cached_has_bits & 0x00000400u) {
      fix_confidence_ = from.fix_confidence_;
    }
    if (cached_has_bits & 0x00000800u) {
      auto_confidence_ = from.auto_confidence_;
    }
    if (cached_has_bits & 0x00001000u) {
      autoreplace_ = from.autoreplace_;
    }
    if (cached_has_bits & 0x00002000u) {
      iteration_count_ = from.iteration_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpcReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.SpcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcReply::CopyFrom(const SpcReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.SpcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001001) != 0x00001001) return false;
  if (has_interleaving_info()) {
    if (!this->interleaving_info_->IsInitialized()) return false;
  }
  if (has_fix_confidence_pack()) {
    if (!this->fix_confidence_pack_->IsInitialized()) return false;
  }
  return true;
}

void SpcReply::Swap(SpcReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpcReply::InternalSwap(SpcReply* other) {
  using std::swap;
  fixed_query_.Swap(&other->fixed_query_);
  orig_highlight_.Swap(&other->orig_highlight_);
  fixed_highlight_.Swap(&other->fixed_highlight_);
  fix_tags_.Swap(&other->fix_tags_);
  porno_fixed_query_.Swap(&other->porno_fixed_query_);
  transliter_fixed_query_.Swap(&other->transliter_fixed_query_);
  swap(interleaving_info_, other->interleaving_info_);
  swap(fix_confidence_pack_, other->fix_confidence_pack_);
  swap(version_info_, other->version_info_);
  swap(wnf_info_, other->wnf_info_);
  swap(fix_confidence_, other->fix_confidence_);
  swap(auto_confidence_, other->auto_confidence_);
  swap(autoreplace_, other->autoreplace_);
  swap(iteration_count_, other->iteration_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpcReply::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpcReply

// required bool autoreplace = 1;
bool SpcReply::has_autoreplace() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SpcReply::set_has_autoreplace() {
  _has_bits_[0] |= 0x00001000u;
}
void SpcReply::clear_has_autoreplace() {
  _has_bits_[0] &= ~0x00001000u;
}
void SpcReply::clear_autoreplace() {
  autoreplace_ = false;
  clear_has_autoreplace();
}
bool SpcReply::autoreplace() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.autoreplace)
  return autoreplace_;
}
void SpcReply::set_autoreplace(bool value) {
  set_has_autoreplace();
  autoreplace_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.autoreplace)
}

// required string fixed_query = 2;
bool SpcReply::has_fixed_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpcReply::set_has_fixed_query() {
  _has_bits_[0] |= 0x00000001u;
}
void SpcReply::clear_has_fixed_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpcReply::clear_fixed_query() {
  fixed_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fixed_query();
}
const ::std::string& SpcReply::fixed_query() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.fixed_query)
  return fixed_query_.GetNoArena();
}
void SpcReply::set_fixed_query(const ::std::string& value) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.fixed_query)
}
#if LANG_CXX11
void SpcReply::set_fixed_query(::std::string&& value) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcReply.fixed_query)
}
#endif
void SpcReply::set_fixed_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcReply.fixed_query)
}
void SpcReply::set_fixed_query(const char* value, size_t size) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcReply.fixed_query)
}
::std::string* SpcReply::mutable_fixed_query() {
  set_has_fixed_query();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.fixed_query)
  return fixed_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcReply::release_fixed_query() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.fixed_query)
  clear_has_fixed_query();
  return fixed_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcReply::set_allocated_fixed_query(::std::string* fixed_query) {
  if (fixed_query != NULL) {
    set_has_fixed_query();
  } else {
    clear_has_fixed_query();
  }
  fixed_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fixed_query);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.fixed_query)
}

// optional string orig_highlight = 3;
bool SpcReply::has_orig_highlight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpcReply::set_has_orig_highlight() {
  _has_bits_[0] |= 0x00000002u;
}
void SpcReply::clear_has_orig_highlight() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpcReply::clear_orig_highlight() {
  orig_highlight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orig_highlight();
}
const ::std::string& SpcReply::orig_highlight() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.orig_highlight)
  return orig_highlight_.GetNoArena();
}
void SpcReply::set_orig_highlight(const ::std::string& value) {
  set_has_orig_highlight();
  orig_highlight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.orig_highlight)
}
#if LANG_CXX11
void SpcReply::set_orig_highlight(::std::string&& value) {
  set_has_orig_highlight();
  orig_highlight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcReply.orig_highlight)
}
#endif
void SpcReply::set_orig_highlight(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orig_highlight();
  orig_highlight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcReply.orig_highlight)
}
void SpcReply::set_orig_highlight(const char* value, size_t size) {
  set_has_orig_highlight();
  orig_highlight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcReply.orig_highlight)
}
::std::string* SpcReply::mutable_orig_highlight() {
  set_has_orig_highlight();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.orig_highlight)
  return orig_highlight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcReply::release_orig_highlight() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.orig_highlight)
  clear_has_orig_highlight();
  return orig_highlight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcReply::set_allocated_orig_highlight(::std::string* orig_highlight) {
  if (orig_highlight != NULL) {
    set_has_orig_highlight();
  } else {
    clear_has_orig_highlight();
  }
  orig_highlight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orig_highlight);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.orig_highlight)
}

// optional string fixed_highlight = 4;
bool SpcReply::has_fixed_highlight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpcReply::set_has_fixed_highlight() {
  _has_bits_[0] |= 0x00000004u;
}
void SpcReply::clear_has_fixed_highlight() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpcReply::clear_fixed_highlight() {
  fixed_highlight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fixed_highlight();
}
const ::std::string& SpcReply::fixed_highlight() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.fixed_highlight)
  return fixed_highlight_.GetNoArena();
}
void SpcReply::set_fixed_highlight(const ::std::string& value) {
  set_has_fixed_highlight();
  fixed_highlight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.fixed_highlight)
}
#if LANG_CXX11
void SpcReply::set_fixed_highlight(::std::string&& value) {
  set_has_fixed_highlight();
  fixed_highlight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcReply.fixed_highlight)
}
#endif
void SpcReply::set_fixed_highlight(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fixed_highlight();
  fixed_highlight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcReply.fixed_highlight)
}
void SpcReply::set_fixed_highlight(const char* value, size_t size) {
  set_has_fixed_highlight();
  fixed_highlight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcReply.fixed_highlight)
}
::std::string* SpcReply::mutable_fixed_highlight() {
  set_has_fixed_highlight();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.fixed_highlight)
  return fixed_highlight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcReply::release_fixed_highlight() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.fixed_highlight)
  clear_has_fixed_highlight();
  return fixed_highlight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcReply::set_allocated_fixed_highlight(::std::string* fixed_highlight) {
  if (fixed_highlight != NULL) {
    set_has_fixed_highlight();
  } else {
    clear_has_fixed_highlight();
  }
  fixed_highlight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fixed_highlight);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.fixed_highlight)
}

// optional double fix_confidence = 5;
bool SpcReply::has_fix_confidence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SpcReply::set_has_fix_confidence() {
  _has_bits_[0] |= 0x00000400u;
}
void SpcReply::clear_has_fix_confidence() {
  _has_bits_[0] &= ~0x00000400u;
}
void SpcReply::clear_fix_confidence() {
  fix_confidence_ = 0;
  clear_has_fix_confidence();
}
double SpcReply::fix_confidence() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.fix_confidence)
  return fix_confidence_;
}
void SpcReply::set_fix_confidence(double value) {
  set_has_fix_confidence();
  fix_confidence_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.fix_confidence)
}

// optional double auto_confidence = 6;
bool SpcReply::has_auto_confidence() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SpcReply::set_has_auto_confidence() {
  _has_bits_[0] |= 0x00000800u;
}
void SpcReply::clear_has_auto_confidence() {
  _has_bits_[0] &= ~0x00000800u;
}
void SpcReply::clear_auto_confidence() {
  auto_confidence_ = 0;
  clear_has_auto_confidence();
}
double SpcReply::auto_confidence() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.auto_confidence)
  return auto_confidence_;
}
void SpcReply::set_auto_confidence(double value) {
  set_has_auto_confidence();
  auto_confidence_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.auto_confidence)
}

// optional .gogo.chell_specker.SpcInterleavingInfo interleaving_info = 7;
bool SpcReply::has_interleaving_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SpcReply::set_has_interleaving_info() {
  _has_bits_[0] |= 0x00000040u;
}
void SpcReply::clear_has_interleaving_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void SpcReply::clear_interleaving_info() {
  if (interleaving_info_ != NULL) interleaving_info_->::gogo::chell_specker::SpcInterleavingInfo::Clear();
  clear_has_interleaving_info();
}
const ::gogo::chell_specker::SpcInterleavingInfo& SpcReply::interleaving_info() const {
  const ::gogo::chell_specker::SpcInterleavingInfo* p = interleaving_info_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.interleaving_info)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::SpcInterleavingInfo*>(
      &::gogo::chell_specker::_SpcInterleavingInfo_default_instance_);
}
::gogo::chell_specker::SpcInterleavingInfo* SpcReply::mutable_interleaving_info() {
  set_has_interleaving_info();
  if (interleaving_info_ == NULL) {
    interleaving_info_ = new ::gogo::chell_specker::SpcInterleavingInfo;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.interleaving_info)
  return interleaving_info_;
}
::gogo::chell_specker::SpcInterleavingInfo* SpcReply::release_interleaving_info() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.interleaving_info)
  clear_has_interleaving_info();
  ::gogo::chell_specker::SpcInterleavingInfo* temp = interleaving_info_;
  interleaving_info_ = NULL;
  return temp;
}
void SpcReply::set_allocated_interleaving_info(::gogo::chell_specker::SpcInterleavingInfo* interleaving_info) {
  delete interleaving_info_;
  interleaving_info_ = interleaving_info;
  if (interleaving_info) {
    set_has_interleaving_info();
  } else {
    clear_has_interleaving_info();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.interleaving_info)
}

// optional string fix_tags = 8;
bool SpcReply::has_fix_tags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpcReply::set_has_fix_tags() {
  _has_bits_[0] |= 0x00000008u;
}
void SpcReply::clear_has_fix_tags() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpcReply::clear_fix_tags() {
  fix_tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fix_tags();
}
const ::std::string& SpcReply::fix_tags() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.fix_tags)
  return fix_tags_.GetNoArena();
}
void SpcReply::set_fix_tags(const ::std::string& value) {
  set_has_fix_tags();
  fix_tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.fix_tags)
}
#if LANG_CXX11
void SpcReply::set_fix_tags(::std::string&& value) {
  set_has_fix_tags();
  fix_tags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcReply.fix_tags)
}
#endif
void SpcReply::set_fix_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fix_tags();
  fix_tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcReply.fix_tags)
}
void SpcReply::set_fix_tags(const char* value, size_t size) {
  set_has_fix_tags();
  fix_tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcReply.fix_tags)
}
::std::string* SpcReply::mutable_fix_tags() {
  set_has_fix_tags();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.fix_tags)
  return fix_tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcReply::release_fix_tags() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.fix_tags)
  clear_has_fix_tags();
  return fix_tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcReply::set_allocated_fix_tags(::std::string* fix_tags) {
  if (fix_tags != NULL) {
    set_has_fix_tags();
  } else {
    clear_has_fix_tags();
  }
  fix_tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fix_tags);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.fix_tags)
}

// optional string porno_fixed_query = 9;
bool SpcReply::has_porno_fixed_query() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpcReply::set_has_porno_fixed_query() {
  _has_bits_[0] |= 0x00000010u;
}
void SpcReply::clear_has_porno_fixed_query() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpcReply::clear_porno_fixed_query() {
  porno_fixed_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_porno_fixed_query();
}
const ::std::string& SpcReply::porno_fixed_query() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.porno_fixed_query)
  return porno_fixed_query_.GetNoArena();
}
void SpcReply::set_porno_fixed_query(const ::std::string& value) {
  set_has_porno_fixed_query();
  porno_fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.porno_fixed_query)
}
#if LANG_CXX11
void SpcReply::set_porno_fixed_query(::std::string&& value) {
  set_has_porno_fixed_query();
  porno_fixed_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcReply.porno_fixed_query)
}
#endif
void SpcReply::set_porno_fixed_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_porno_fixed_query();
  porno_fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcReply.porno_fixed_query)
}
void SpcReply::set_porno_fixed_query(const char* value, size_t size) {
  set_has_porno_fixed_query();
  porno_fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcReply.porno_fixed_query)
}
::std::string* SpcReply::mutable_porno_fixed_query() {
  set_has_porno_fixed_query();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.porno_fixed_query)
  return porno_fixed_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcReply::release_porno_fixed_query() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.porno_fixed_query)
  clear_has_porno_fixed_query();
  return porno_fixed_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcReply::set_allocated_porno_fixed_query(::std::string* porno_fixed_query) {
  if (porno_fixed_query != NULL) {
    set_has_porno_fixed_query();
  } else {
    clear_has_porno_fixed_query();
  }
  porno_fixed_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), porno_fixed_query);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.porno_fixed_query)
}

// optional .gogo.chell_specker.FixConfidencePack fix_confidence_pack = 10;
bool SpcReply::has_fix_confidence_pack() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SpcReply::set_has_fix_confidence_pack() {
  _has_bits_[0] |= 0x00000080u;
}
void SpcReply::clear_has_fix_confidence_pack() {
  _has_bits_[0] &= ~0x00000080u;
}
void SpcReply::clear_fix_confidence_pack() {
  if (fix_confidence_pack_ != NULL) fix_confidence_pack_->::gogo::chell_specker::FixConfidencePack::Clear();
  clear_has_fix_confidence_pack();
}
const ::gogo::chell_specker::FixConfidencePack& SpcReply::fix_confidence_pack() const {
  const ::gogo::chell_specker::FixConfidencePack* p = fix_confidence_pack_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.fix_confidence_pack)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::FixConfidencePack*>(
      &::gogo::chell_specker::_FixConfidencePack_default_instance_);
}
::gogo::chell_specker::FixConfidencePack* SpcReply::mutable_fix_confidence_pack() {
  set_has_fix_confidence_pack();
  if (fix_confidence_pack_ == NULL) {
    fix_confidence_pack_ = new ::gogo::chell_specker::FixConfidencePack;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.fix_confidence_pack)
  return fix_confidence_pack_;
}
::gogo::chell_specker::FixConfidencePack* SpcReply::release_fix_confidence_pack() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.fix_confidence_pack)
  clear_has_fix_confidence_pack();
  ::gogo::chell_specker::FixConfidencePack* temp = fix_confidence_pack_;
  fix_confidence_pack_ = NULL;
  return temp;
}
void SpcReply::set_allocated_fix_confidence_pack(::gogo::chell_specker::FixConfidencePack* fix_confidence_pack) {
  delete fix_confidence_pack_;
  fix_confidence_pack_ = fix_confidence_pack;
  if (fix_confidence_pack) {
    set_has_fix_confidence_pack();
  } else {
    clear_has_fix_confidence_pack();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.fix_confidence_pack)
}

// optional string transliter_fixed_query = 11;
bool SpcReply::has_transliter_fixed_query() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpcReply::set_has_transliter_fixed_query() {
  _has_bits_[0] |= 0x00000020u;
}
void SpcReply::clear_has_transliter_fixed_query() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpcReply::clear_transliter_fixed_query() {
  transliter_fixed_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transliter_fixed_query();
}
const ::std::string& SpcReply::transliter_fixed_query() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.transliter_fixed_query)
  return transliter_fixed_query_.GetNoArena();
}
void SpcReply::set_transliter_fixed_query(const ::std::string& value) {
  set_has_transliter_fixed_query();
  transliter_fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.transliter_fixed_query)
}
#if LANG_CXX11
void SpcReply::set_transliter_fixed_query(::std::string&& value) {
  set_has_transliter_fixed_query();
  transliter_fixed_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcReply.transliter_fixed_query)
}
#endif
void SpcReply::set_transliter_fixed_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transliter_fixed_query();
  transliter_fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcReply.transliter_fixed_query)
}
void SpcReply::set_transliter_fixed_query(const char* value, size_t size) {
  set_has_transliter_fixed_query();
  transliter_fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcReply.transliter_fixed_query)
}
::std::string* SpcReply::mutable_transliter_fixed_query() {
  set_has_transliter_fixed_query();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.transliter_fixed_query)
  return transliter_fixed_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcReply::release_transliter_fixed_query() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.transliter_fixed_query)
  clear_has_transliter_fixed_query();
  return transliter_fixed_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcReply::set_allocated_transliter_fixed_query(::std::string* transliter_fixed_query) {
  if (transliter_fixed_query != NULL) {
    set_has_transliter_fixed_query();
  } else {
    clear_has_transliter_fixed_query();
  }
  transliter_fixed_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transliter_fixed_query);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.transliter_fixed_query)
}

// optional .gogo.chell_specker.VersionInfo version_info = 13;
bool SpcReply::has_version_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SpcReply::set_has_version_info() {
  _has_bits_[0] |= 0x00000100u;
}
void SpcReply::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000100u;
}
void SpcReply::clear_version_info() {
  if (version_info_ != NULL) version_info_->::gogo::chell_specker::VersionInfo::Clear();
  clear_has_version_info();
}
const ::gogo::chell_specker::VersionInfo& SpcReply::version_info() const {
  const ::gogo::chell_specker::VersionInfo* p = version_info_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.version_info)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::VersionInfo*>(
      &::gogo::chell_specker::_VersionInfo_default_instance_);
}
::gogo::chell_specker::VersionInfo* SpcReply::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == NULL) {
    version_info_ = new ::gogo::chell_specker::VersionInfo;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.version_info)
  return version_info_;
}
::gogo::chell_specker::VersionInfo* SpcReply::release_version_info() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.version_info)
  clear_has_version_info();
  ::gogo::chell_specker::VersionInfo* temp = version_info_;
  version_info_ = NULL;
  return temp;
}
void SpcReply::set_allocated_version_info(::gogo::chell_specker::VersionInfo* version_info) {
  delete version_info_;
  version_info_ = version_info;
  if (version_info) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.version_info)
}

// optional int32 iteration_count = 14;
bool SpcReply::has_iteration_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SpcReply::set_has_iteration_count() {
  _has_bits_[0] |= 0x00002000u;
}
void SpcReply::clear_has_iteration_count() {
  _has_bits_[0] &= ~0x00002000u;
}
void SpcReply::clear_iteration_count() {
  iteration_count_ = 0;
  clear_has_iteration_count();
}
::google::protobuf::int32 SpcReply::iteration_count() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.iteration_count)
  return iteration_count_;
}
void SpcReply::set_iteration_count(::google::protobuf::int32 value) {
  set_has_iteration_count();
  iteration_count_ = value;
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcReply.iteration_count)
}

// optional .gogo.chell_specker.SpcWnfInfo wnf_info = 15;
bool SpcReply::has_wnf_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SpcReply::set_has_wnf_info() {
  _has_bits_[0] |= 0x00000200u;
}
void SpcReply::clear_has_wnf_info() {
  _has_bits_[0] &= ~0x00000200u;
}
void SpcReply::clear_wnf_info() {
  if (wnf_info_ != NULL) wnf_info_->::gogo::chell_specker::SpcWnfInfo::Clear();
  clear_has_wnf_info();
}
const ::gogo::chell_specker::SpcWnfInfo& SpcReply::wnf_info() const {
  const ::gogo::chell_specker::SpcWnfInfo* p = wnf_info_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcReply.wnf_info)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::SpcWnfInfo*>(
      &::gogo::chell_specker::_SpcWnfInfo_default_instance_);
}
::gogo::chell_specker::SpcWnfInfo* SpcReply::mutable_wnf_info() {
  set_has_wnf_info();
  if (wnf_info_ == NULL) {
    wnf_info_ = new ::gogo::chell_specker::SpcWnfInfo;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcReply.wnf_info)
  return wnf_info_;
}
::gogo::chell_specker::SpcWnfInfo* SpcReply::release_wnf_info() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcReply.wnf_info)
  clear_has_wnf_info();
  ::gogo::chell_specker::SpcWnfInfo* temp = wnf_info_;
  wnf_info_ = NULL;
  return temp;
}
void SpcReply::set_allocated_wnf_info(::gogo::chell_specker::SpcWnfInfo* wnf_info) {
  delete wnf_info_;
  wnf_info_ = wnf_info;
  if (wnf_info) {
    set_has_wnf_info();
  } else {
    clear_has_wnf_info();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcReply.wnf_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpcCommentItem::kKeyFieldNumber;
const int SpcCommentItem::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpcCommentItem::SpcCommentItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.SpcCommentItem)
}
SpcCommentItem::SpcCommentItem(const SpcCommentItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.SpcCommentItem)
}

void SpcCommentItem::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SpcCommentItem::~SpcCommentItem() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.SpcCommentItem)
  SharedDtor();
}

void SpcCommentItem::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpcCommentItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpcCommentItem::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpcCommentItem& SpcCommentItem::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpcCommentItem* SpcCommentItem::New(::google::protobuf::Arena* arena) const {
  SpcCommentItem* n = new SpcCommentItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpcCommentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.SpcCommentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpcCommentItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.SpcCommentItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcCommentItem.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.chell_specker.SpcCommentItem.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.SpcCommentItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.SpcCommentItem)
  return false;
#undef DO_
}

void SpcCommentItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.SpcCommentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcCommentItem.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcCommentItem.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.SpcCommentItem)
}

::google::protobuf::uint8* SpcCommentItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.SpcCommentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcCommentItem.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.chell_specker.SpcCommentItem.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.SpcCommentItem)
  return target;
}

size_t SpcCommentItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.chell_specker.SpcCommentItem)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t SpcCommentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.SpcCommentItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpcCommentItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.SpcCommentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcCommentItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpcCommentItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.SpcCommentItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.SpcCommentItem)
    MergeFrom(*source);
  }
}

void SpcCommentItem::MergeFrom(const SpcCommentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.SpcCommentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void SpcCommentItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.SpcCommentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcCommentItem::CopyFrom(const SpcCommentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.SpcCommentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcCommentItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SpcCommentItem::Swap(SpcCommentItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpcCommentItem::InternalSwap(SpcCommentItem* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpcCommentItem::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpcCommentItem

// required string key = 1;
bool SpcCommentItem::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpcCommentItem::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void SpcCommentItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpcCommentItem::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& SpcCommentItem::key() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcCommentItem.key)
  return key_.GetNoArena();
}
void SpcCommentItem::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcCommentItem.key)
}
#if LANG_CXX11
void SpcCommentItem::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcCommentItem.key)
}
#endif
void SpcCommentItem::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcCommentItem.key)
}
void SpcCommentItem::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcCommentItem.key)
}
::std::string* SpcCommentItem::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcCommentItem.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcCommentItem::release_key() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcCommentItem.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcCommentItem::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcCommentItem.key)
}

// required string value = 2;
bool SpcCommentItem::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpcCommentItem::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void SpcCommentItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpcCommentItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& SpcCommentItem::value() const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcCommentItem.value)
  return value_.GetNoArena();
}
void SpcCommentItem::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.chell_specker.SpcCommentItem.value)
}
#if LANG_CXX11
void SpcCommentItem::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.chell_specker.SpcCommentItem.value)
}
#endif
void SpcCommentItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.chell_specker.SpcCommentItem.value)
}
void SpcCommentItem::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.chell_specker.SpcCommentItem.value)
}
::std::string* SpcCommentItem::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcCommentItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcCommentItem::release_value() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcCommentItem.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcCommentItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcCommentItem.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpcComment::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpcComment::SpcComment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.SpcComment)
}
SpcComment::SpcComment(const SpcComment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.SpcComment)
}

void SpcComment::SharedCtor() {
  _cached_size_ = 0;
}

SpcComment::~SpcComment() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.SpcComment)
  SharedDtor();
}

void SpcComment::SharedDtor() {
}

void SpcComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpcComment::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpcComment& SpcComment::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpcComment* SpcComment::New(::google::protobuf::Arena* arena) const {
  SpcComment* n = new SpcComment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpcComment::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.SpcComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpcComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.SpcComment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.chell_specker.SpcCommentItem data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.SpcComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.SpcComment)
  return false;
#undef DO_
}

void SpcComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.SpcComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.chell_specker.SpcCommentItem data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.SpcComment)
}

::google::protobuf::uint8* SpcComment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.SpcComment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.chell_specker.SpcCommentItem data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.SpcComment)
  return target;
}

size_t SpcComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.SpcComment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.chell_specker.SpcCommentItem data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpcComment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.SpcComment)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcComment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpcComment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.SpcComment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.SpcComment)
    MergeFrom(*source);
  }
}

void SpcComment::MergeFrom(const SpcComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.SpcComment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void SpcComment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.SpcComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcComment::CopyFrom(const SpcComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.SpcComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcComment::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void SpcComment::Swap(SpcComment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpcComment::InternalSwap(SpcComment* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpcComment::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpcComment

// repeated .gogo.chell_specker.SpcCommentItem data = 1;
int SpcComment::data_size() const {
  return data_.size();
}
void SpcComment::clear_data() {
  data_.Clear();
}
const ::gogo::chell_specker::SpcCommentItem& SpcComment::data(int index) const {
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcComment.data)
  return data_.Get(index);
}
::gogo::chell_specker::SpcCommentItem* SpcComment::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcComment.data)
  return data_.Mutable(index);
}
::gogo::chell_specker::SpcCommentItem* SpcComment::add_data() {
  // @@protoc_insertion_point(field_add:gogo.chell_specker.SpcComment.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::chell_specker::SpcCommentItem >*
SpcComment::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gogo.chell_specker.SpcComment.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::chell_specker::SpcCommentItem >&
SpcComment::data() const {
  // @@protoc_insertion_point(field_list:gogo.chell_specker.SpcComment.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpcResponse::kReplyFieldNumber;
const int SpcResponse::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpcResponse::SpcResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_spellchecker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.chell_specker.SpcResponse)
}
SpcResponse::SpcResponse(const SpcResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reply()) {
    reply_ = new ::gogo::chell_specker::SpcReply(*from.reply_);
  } else {
    reply_ = NULL;
  }
  if (from.has_comment()) {
    comment_ = new ::gogo::chell_specker::SpcComment(*from.comment_);
  } else {
    comment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gogo.chell_specker.SpcResponse)
}

void SpcResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comment_) -
      reinterpret_cast<char*>(&reply_)) + sizeof(comment_));
}

SpcResponse::~SpcResponse() {
  // @@protoc_insertion_point(destructor:gogo.chell_specker.SpcResponse)
  SharedDtor();
}

void SpcResponse::SharedDtor() {
  if (this != internal_default_instance()) delete reply_;
  if (this != internal_default_instance()) delete comment_;
}

void SpcResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpcResponse::descriptor() {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpcResponse& SpcResponse::default_instance() {
  protobuf_spellchecker_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpcResponse* SpcResponse::New(::google::protobuf::Arena* arena) const {
  SpcResponse* n = new SpcResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.chell_specker.SpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(reply_ != NULL);
      reply_->::gogo::chell_specker::SpcReply::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(comment_ != NULL);
      comment_->::gogo::chell_specker::SpcComment::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.chell_specker.SpcResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gogo.chell_specker.SpcReply reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.chell_specker.SpcComment comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.chell_specker.SpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.chell_specker.SpcResponse)
  return false;
#undef DO_
}

void SpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.chell_specker.SpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gogo.chell_specker.SpcReply reply = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->reply_, output);
  }

  // optional .gogo.chell_specker.SpcComment comment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->comment_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.chell_specker.SpcResponse)
}

::google::protobuf::uint8* SpcResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.chell_specker.SpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gogo.chell_specker.SpcReply reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->reply_, deterministic, target);
  }

  // optional .gogo.chell_specker.SpcComment comment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->comment_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.chell_specker.SpcResponse)
  return target;
}

size_t SpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.chell_specker.SpcResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gogo.chell_specker.SpcReply reply = 1;
  if (has_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reply_);
  }
  // optional .gogo.chell_specker.SpcComment comment = 2;
  if (has_comment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.chell_specker.SpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpcResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.chell_specker.SpcResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.chell_specker.SpcResponse)
    MergeFrom(*source);
  }
}

void SpcResponse::MergeFrom(const SpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.chell_specker.SpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reply()->::gogo::chell_specker::SpcReply::MergeFrom(from.reply());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_comment()->::gogo::chell_specker::SpcComment::MergeFrom(from.comment());
    }
  }
}

void SpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.chell_specker.SpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcResponse::CopyFrom(const SpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.chell_specker.SpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_reply()) {
    if (!this->reply_->IsInitialized()) return false;
  }
  if (has_comment()) {
    if (!this->comment_->IsInitialized()) return false;
  }
  return true;
}

void SpcResponse::Swap(SpcResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpcResponse::InternalSwap(SpcResponse* other) {
  using std::swap;
  swap(reply_, other->reply_);
  swap(comment_, other->comment_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpcResponse::GetMetadata() const {
  protobuf_spellchecker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spellchecker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpcResponse

// required .gogo.chell_specker.SpcReply reply = 1;
bool SpcResponse::has_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpcResponse::set_has_reply() {
  _has_bits_[0] |= 0x00000001u;
}
void SpcResponse::clear_has_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpcResponse::clear_reply() {
  if (reply_ != NULL) reply_->::gogo::chell_specker::SpcReply::Clear();
  clear_has_reply();
}
const ::gogo::chell_specker::SpcReply& SpcResponse::reply() const {
  const ::gogo::chell_specker::SpcReply* p = reply_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcResponse.reply)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::SpcReply*>(
      &::gogo::chell_specker::_SpcReply_default_instance_);
}
::gogo::chell_specker::SpcReply* SpcResponse::mutable_reply() {
  set_has_reply();
  if (reply_ == NULL) {
    reply_ = new ::gogo::chell_specker::SpcReply;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcResponse.reply)
  return reply_;
}
::gogo::chell_specker::SpcReply* SpcResponse::release_reply() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcResponse.reply)
  clear_has_reply();
  ::gogo::chell_specker::SpcReply* temp = reply_;
  reply_ = NULL;
  return temp;
}
void SpcResponse::set_allocated_reply(::gogo::chell_specker::SpcReply* reply) {
  delete reply_;
  reply_ = reply;
  if (reply) {
    set_has_reply();
  } else {
    clear_has_reply();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcResponse.reply)
}

// optional .gogo.chell_specker.SpcComment comment = 2;
bool SpcResponse::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpcResponse::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
void SpcResponse::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpcResponse::clear_comment() {
  if (comment_ != NULL) comment_->::gogo::chell_specker::SpcComment::Clear();
  clear_has_comment();
}
const ::gogo::chell_specker::SpcComment& SpcResponse::comment() const {
  const ::gogo::chell_specker::SpcComment* p = comment_;
  // @@protoc_insertion_point(field_get:gogo.chell_specker.SpcResponse.comment)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::chell_specker::SpcComment*>(
      &::gogo::chell_specker::_SpcComment_default_instance_);
}
::gogo::chell_specker::SpcComment* SpcResponse::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) {
    comment_ = new ::gogo::chell_specker::SpcComment;
  }
  // @@protoc_insertion_point(field_mutable:gogo.chell_specker.SpcResponse.comment)
  return comment_;
}
::gogo::chell_specker::SpcComment* SpcResponse::release_comment() {
  // @@protoc_insertion_point(field_release:gogo.chell_specker.SpcResponse.comment)
  clear_has_comment();
  ::gogo::chell_specker::SpcComment* temp = comment_;
  comment_ = NULL;
  return temp;
}
void SpcResponse::set_allocated_comment(::gogo::chell_specker::SpcComment* comment) {
  delete comment_;
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.chell_specker.SpcResponse.comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chell_specker
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
