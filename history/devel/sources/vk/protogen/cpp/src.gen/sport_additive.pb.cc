// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sport_additive.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sport_additive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sport {
class ImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageInfo>
     _instance;
} _ImageInfo_default_instance_;
class StreamInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StreamInfo>
     _instance;
} _StreamInfo_default_instance_;

namespace protobuf_sport_5fadditive_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, width_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, source_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, stream_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, preview_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, team1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, team2_),
  0,
  1,
  8,
  2,
  3,
  4,
  7,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(ImageInfo)},
  { 11, 25, sizeof(StreamInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sport_additive.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageInfo_default_instance_);_StreamInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StreamInfo_default_instance_);_StreamInfo_default_instance_._instance.get_mutable()->preview_image_ = const_cast< ::sport::ImageInfo*>(
      ::sport::ImageInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024sport_additive.proto\022\005sport\"7\n\tImageIn"
      "fo\022\013\n\003url\030\001 \002(\t\022\016\n\006height\030\002 \002(\r\022\r\n\005width"
      "\030\003 \002(\r\"\273\001\n\nStreamInfo\022\n\n\002id\030\001 \001(\t\022\r\n\005tit"
      "le\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\004\022\020\n\010platform\030"
      "\004 \001(\t\022\022\n\nsource_url\030\005 \001(\t\022\022\n\nstream_url\030"
      "\006 \001(\t\022\'\n\rpreview_image\030\007 \001(\0132\020.sport.Ima"
      "geInfo\022\r\n\005team1\030\010 \001(\t\022\r\n\005team2\030\t \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 276);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sport_additive.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sport_5fadditive_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageInfo::kUrlFieldNumber;
const int ImageInfo::kHeightFieldNumber;
const int ImageInfo::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageInfo::ImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sport_5fadditive_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sport.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:sport.ImageInfo)
}

void ImageInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:sport.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageInfo::descriptor() {
  protobuf_sport_5fadditive_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sport_5fadditive_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageInfo& ImageInfo::default_instance() {
  protobuf_sport_5fadditive_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageInfo* ImageInfo::New(::google::protobuf::Arena* arena) const {
  ImageInfo* n = new ImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sport.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&height_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sport.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sport.ImageInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sport.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sport.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sport.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.ImageInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sport.ImageInfo)
}

::google::protobuf::uint8* ImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sport.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.ImageInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sport.ImageInfo)
  return target;
}

size_t ImageInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sport.ImageInfo)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_width()) {
    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  return total_size;
}
size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sport.ImageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sport.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sport.ImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sport.ImageInfo)
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sport.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sport.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sport.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageInfo::GetMetadata() const {
  protobuf_sport_5fadditive_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sport_5fadditive_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageInfo

// required string url = 1;
bool ImageInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ImageInfo::url() const {
  // @@protoc_insertion_point(field_get:sport.ImageInfo.url)
  return url_.GetNoArena();
}
void ImageInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sport.ImageInfo.url)
}
#if LANG_CXX11
void ImageInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sport.ImageInfo.url)
}
#endif
void ImageInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sport.ImageInfo.url)
}
void ImageInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sport.ImageInfo.url)
}
::std::string* ImageInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:sport.ImageInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_url() {
  // @@protoc_insertion_point(field_release:sport.ImageInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sport.ImageInfo.url)
}

// required uint32 height = 2;
bool ImageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageInfo::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageInfo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 ImageInfo::height() const {
  // @@protoc_insertion_point(field_get:sport.ImageInfo.height)
  return height_;
}
void ImageInfo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:sport.ImageInfo.height)
}

// required uint32 width = 3;
bool ImageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageInfo::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageInfo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 ImageInfo::width() const {
  // @@protoc_insertion_point(field_get:sport.ImageInfo.width)
  return width_;
}
void ImageInfo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:sport.ImageInfo.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamInfo::kIdFieldNumber;
const int StreamInfo::kTitleFieldNumber;
const int StreamInfo::kTimestampFieldNumber;
const int StreamInfo::kPlatformFieldNumber;
const int StreamInfo::kSourceUrlFieldNumber;
const int StreamInfo::kStreamUrlFieldNumber;
const int StreamInfo::kPreviewImageFieldNumber;
const int StreamInfo::kTeam1FieldNumber;
const int StreamInfo::kTeam2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamInfo::StreamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sport_5fadditive_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sport.StreamInfo)
}
StreamInfo::StreamInfo(const StreamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  source_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_url()) {
    source_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_url_);
  }
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_url()) {
    stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
  }
  team1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team1()) {
    team1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_);
  }
  team2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team2()) {
    team2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_);
  }
  if (from.has_preview_image()) {
    preview_image_ = new ::sport::ImageInfo(*from.preview_image_);
  } else {
    preview_image_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:sport.StreamInfo)
}

void StreamInfo::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&preview_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&preview_image_)) + sizeof(timestamp_));
}

StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:sport.StreamInfo)
  SharedDtor();
}

void StreamInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete preview_image_;
}

void StreamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamInfo::descriptor() {
  protobuf_sport_5fadditive_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sport_5fadditive_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamInfo& StreamInfo::default_instance() {
  protobuf_sport_5fadditive_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamInfo* StreamInfo::New(::google::protobuf::Arena* arena) const {
  StreamInfo* n = new StreamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sport.StreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!platform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platform_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!source_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!stream_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stream_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!team1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team1_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!team2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team2_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(preview_image_ != NULL);
      preview_image_->::sport::ImageInfo::Clear();
    }
  }
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sport.StreamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sport.StreamInfo.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sport.StreamInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string platform = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sport.StreamInfo.platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_url().data(), static_cast<int>(this->source_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sport.StreamInfo.source_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_url().data(), static_cast<int>(this->stream_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sport.StreamInfo.stream_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sport.ImageInfo preview_image = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preview_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team1().data(), static_cast<int>(this->team1().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sport.StreamInfo.team1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team2().data(), static_cast<int>(this->team2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sport.StreamInfo.team2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sport.StreamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sport.StreamInfo)
  return false;
#undef DO_
}

void StreamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sport.StreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional string platform = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->platform(), output);
  }

  // optional string source_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_url().data(), static_cast<int>(this->source_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.source_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_url(), output);
  }

  // optional string stream_url = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), static_cast<int>(this->stream_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.stream_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->stream_url(), output);
  }

  // optional .sport.ImageInfo preview_image = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->preview_image_, output);
  }

  // optional string team1 = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1().data(), static_cast<int>(this->team1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.team1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->team1(), output);
  }

  // optional string team2 = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2().data(), static_cast<int>(this->team2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.team2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->team2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sport.StreamInfo)
}

::google::protobuf::uint8* StreamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sport.StreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional string platform = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }

  // optional string source_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_url().data(), static_cast<int>(this->source_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.source_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_url(), target);
  }

  // optional string stream_url = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), static_cast<int>(this->stream_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.stream_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stream_url(), target);
  }

  // optional .sport.ImageInfo preview_image = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->preview_image_, deterministic, target);
  }

  // optional string team1 = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1().data(), static_cast<int>(this->team1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.team1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->team1(), target);
  }

  // optional string team2 = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2().data(), static_cast<int>(this->team2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sport.StreamInfo.team2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->team2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sport.StreamInfo)
  return target;
}

size_t StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sport.StreamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string platform = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string source_url = 5;
    if (has_source_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_url());
    }

    // optional string stream_url = 6;
    if (has_stream_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_url());
    }

    // optional string team1 = 8;
    if (has_team1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team1());
    }

    // optional string team2 = 9;
    if (has_team2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team2());
    }

    // optional .sport.ImageInfo preview_image = 7;
    if (has_preview_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preview_image_);
    }

  }
  // optional uint64 timestamp = 3;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sport.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sport.StreamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sport.StreamInfo)
    MergeFrom(*source);
  }
}

void StreamInfo::MergeFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sport.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_source_url();
      source_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_stream_url();
      stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_team1();
      team1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_team2();
      team2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_preview_image()->::sport::ImageInfo::MergeFrom(from.preview_image());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp(from.timestamp());
  }
}

void StreamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sport.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sport.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  if (has_preview_image()) {
    if (!this->preview_image_->IsInitialized()) return false;
  }
  return true;
}

void StreamInfo::Swap(StreamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamInfo::InternalSwap(StreamInfo* other) {
  using std::swap;
  id_.Swap(&other->id_);
  title_.Swap(&other->title_);
  platform_.Swap(&other->platform_);
  source_url_.Swap(&other->source_url_);
  stream_url_.Swap(&other->stream_url_);
  team1_.Swap(&other->team1_);
  team2_.Swap(&other->team2_);
  swap(preview_image_, other->preview_image_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamInfo::GetMetadata() const {
  protobuf_sport_5fadditive_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sport_5fadditive_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamInfo

// optional string id = 1;
bool StreamInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& StreamInfo::id() const {
  // @@protoc_insertion_point(field_get:sport.StreamInfo.id)
  return id_.GetNoArena();
}
void StreamInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sport.StreamInfo.id)
}
#if LANG_CXX11
void StreamInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sport.StreamInfo.id)
}
#endif
void StreamInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sport.StreamInfo.id)
}
void StreamInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sport.StreamInfo.id)
}
::std::string* StreamInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:sport.StreamInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamInfo::release_id() {
  // @@protoc_insertion_point(field_release:sport.StreamInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sport.StreamInfo.id)
}

// optional string title = 2;
bool StreamInfo::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamInfo::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& StreamInfo::title() const {
  // @@protoc_insertion_point(field_get:sport.StreamInfo.title)
  return title_.GetNoArena();
}
void StreamInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sport.StreamInfo.title)
}
#if LANG_CXX11
void StreamInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sport.StreamInfo.title)
}
#endif
void StreamInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sport.StreamInfo.title)
}
void StreamInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sport.StreamInfo.title)
}
::std::string* StreamInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:sport.StreamInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamInfo::release_title() {
  // @@protoc_insertion_point(field_release:sport.StreamInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sport.StreamInfo.title)
}

// optional uint64 timestamp = 3;
bool StreamInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StreamInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
void StreamInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void StreamInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 StreamInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:sport.StreamInfo.timestamp)
  return timestamp_;
}
void StreamInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sport.StreamInfo.timestamp)
}

// optional string platform = 4;
bool StreamInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreamInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
void StreamInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreamInfo::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
const ::std::string& StreamInfo::platform() const {
  // @@protoc_insertion_point(field_get:sport.StreamInfo.platform)
  return platform_.GetNoArena();
}
void StreamInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sport.StreamInfo.platform)
}
#if LANG_CXX11
void StreamInfo::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sport.StreamInfo.platform)
}
#endif
void StreamInfo::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sport.StreamInfo.platform)
}
void StreamInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sport.StreamInfo.platform)
}
::std::string* StreamInfo::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:sport.StreamInfo.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamInfo::release_platform() {
  // @@protoc_insertion_point(field_release:sport.StreamInfo.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamInfo::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:sport.StreamInfo.platform)
}

// optional string source_url = 5;
bool StreamInfo::has_source_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StreamInfo::set_has_source_url() {
  _has_bits_[0] |= 0x00000008u;
}
void StreamInfo::clear_has_source_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void StreamInfo::clear_source_url() {
  source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_url();
}
const ::std::string& StreamInfo::source_url() const {
  // @@protoc_insertion_point(field_get:sport.StreamInfo.source_url)
  return source_url_.GetNoArena();
}
void StreamInfo::set_source_url(const ::std::string& value) {
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sport.StreamInfo.source_url)
}
#if LANG_CXX11
void StreamInfo::set_source_url(::std::string&& value) {
  set_has_source_url();
  source_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sport.StreamInfo.source_url)
}
#endif
void StreamInfo::set_source_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sport.StreamInfo.source_url)
}
void StreamInfo::set_source_url(const char* value, size_t size) {
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sport.StreamInfo.source_url)
}
::std::string* StreamInfo::mutable_source_url() {
  set_has_source_url();
  // @@protoc_insertion_point(field_mutable:sport.StreamInfo.source_url)
  return source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamInfo::release_source_url() {
  // @@protoc_insertion_point(field_release:sport.StreamInfo.source_url)
  clear_has_source_url();
  return source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamInfo::set_allocated_source_url(::std::string* source_url) {
  if (source_url != NULL) {
    set_has_source_url();
  } else {
    clear_has_source_url();
  }
  source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_url);
  // @@protoc_insertion_point(field_set_allocated:sport.StreamInfo.source_url)
}

// optional string stream_url = 6;
bool StreamInfo::has_stream_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StreamInfo::set_has_stream_url() {
  _has_bits_[0] |= 0x00000010u;
}
void StreamInfo::clear_has_stream_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void StreamInfo::clear_stream_url() {
  stream_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_url();
}
const ::std::string& StreamInfo::stream_url() const {
  // @@protoc_insertion_point(field_get:sport.StreamInfo.stream_url)
  return stream_url_.GetNoArena();
}
void StreamInfo::set_stream_url(const ::std::string& value) {
  set_has_stream_url();
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sport.StreamInfo.stream_url)
}
#if LANG_CXX11
void StreamInfo::set_stream_url(::std::string&& value) {
  set_has_stream_url();
  stream_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sport.StreamInfo.stream_url)
}
#endif
void StreamInfo::set_stream_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stream_url();
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sport.StreamInfo.stream_url)
}
void StreamInfo::set_stream_url(const char* value, size_t size) {
  set_has_stream_url();
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sport.StreamInfo.stream_url)
}
::std::string* StreamInfo::mutable_stream_url() {
  set_has_stream_url();
  // @@protoc_insertion_point(field_mutable:sport.StreamInfo.stream_url)
  return stream_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamInfo::release_stream_url() {
  // @@protoc_insertion_point(field_release:sport.StreamInfo.stream_url)
  clear_has_stream_url();
  return stream_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamInfo::set_allocated_stream_url(::std::string* stream_url) {
  if (stream_url != NULL) {
    set_has_stream_url();
  } else {
    clear_has_stream_url();
  }
  stream_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_url);
  // @@protoc_insertion_point(field_set_allocated:sport.StreamInfo.stream_url)
}

// optional .sport.ImageInfo preview_image = 7;
bool StreamInfo::has_preview_image() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StreamInfo::set_has_preview_image() {
  _has_bits_[0] |= 0x00000080u;
}
void StreamInfo::clear_has_preview_image() {
  _has_bits_[0] &= ~0x00000080u;
}
void StreamInfo::clear_preview_image() {
  if (preview_image_ != NULL) preview_image_->::sport::ImageInfo::Clear();
  clear_has_preview_image();
}
const ::sport::ImageInfo& StreamInfo::preview_image() const {
  const ::sport::ImageInfo* p = preview_image_;
  // @@protoc_insertion_point(field_get:sport.StreamInfo.preview_image)
  return p != NULL ? *p : *reinterpret_cast<const ::sport::ImageInfo*>(
      &::sport::_ImageInfo_default_instance_);
}
::sport::ImageInfo* StreamInfo::mutable_preview_image() {
  set_has_preview_image();
  if (preview_image_ == NULL) {
    preview_image_ = new ::sport::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:sport.StreamInfo.preview_image)
  return preview_image_;
}
::sport::ImageInfo* StreamInfo::release_preview_image() {
  // @@protoc_insertion_point(field_release:sport.StreamInfo.preview_image)
  clear_has_preview_image();
  ::sport::ImageInfo* temp = preview_image_;
  preview_image_ = NULL;
  return temp;
}
void StreamInfo::set_allocated_preview_image(::sport::ImageInfo* preview_image) {
  delete preview_image_;
  preview_image_ = preview_image;
  if (preview_image) {
    set_has_preview_image();
  } else {
    clear_has_preview_image();
  }
  // @@protoc_insertion_point(field_set_allocated:sport.StreamInfo.preview_image)
}

// optional string team1 = 8;
bool StreamInfo::has_team1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StreamInfo::set_has_team1() {
  _has_bits_[0] |= 0x00000020u;
}
void StreamInfo::clear_has_team1() {
  _has_bits_[0] &= ~0x00000020u;
}
void StreamInfo::clear_team1() {
  team1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team1();
}
const ::std::string& StreamInfo::team1() const {
  // @@protoc_insertion_point(field_get:sport.StreamInfo.team1)
  return team1_.GetNoArena();
}
void StreamInfo::set_team1(const ::std::string& value) {
  set_has_team1();
  team1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sport.StreamInfo.team1)
}
#if LANG_CXX11
void StreamInfo::set_team1(::std::string&& value) {
  set_has_team1();
  team1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sport.StreamInfo.team1)
}
#endif
void StreamInfo::set_team1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team1();
  team1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sport.StreamInfo.team1)
}
void StreamInfo::set_team1(const char* value, size_t size) {
  set_has_team1();
  team1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sport.StreamInfo.team1)
}
::std::string* StreamInfo::mutable_team1() {
  set_has_team1();
  // @@protoc_insertion_point(field_mutable:sport.StreamInfo.team1)
  return team1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamInfo::release_team1() {
  // @@protoc_insertion_point(field_release:sport.StreamInfo.team1)
  clear_has_team1();
  return team1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamInfo::set_allocated_team1(::std::string* team1) {
  if (team1 != NULL) {
    set_has_team1();
  } else {
    clear_has_team1();
  }
  team1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team1);
  // @@protoc_insertion_point(field_set_allocated:sport.StreamInfo.team1)
}

// optional string team2 = 9;
bool StreamInfo::has_team2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StreamInfo::set_has_team2() {
  _has_bits_[0] |= 0x00000040u;
}
void StreamInfo::clear_has_team2() {
  _has_bits_[0] &= ~0x00000040u;
}
void StreamInfo::clear_team2() {
  team2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team2();
}
const ::std::string& StreamInfo::team2() const {
  // @@protoc_insertion_point(field_get:sport.StreamInfo.team2)
  return team2_.GetNoArena();
}
void StreamInfo::set_team2(const ::std::string& value) {
  set_has_team2();
  team2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sport.StreamInfo.team2)
}
#if LANG_CXX11
void StreamInfo::set_team2(::std::string&& value) {
  set_has_team2();
  team2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sport.StreamInfo.team2)
}
#endif
void StreamInfo::set_team2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team2();
  team2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sport.StreamInfo.team2)
}
void StreamInfo::set_team2(const char* value, size_t size) {
  set_has_team2();
  team2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sport.StreamInfo.team2)
}
::std::string* StreamInfo::mutable_team2() {
  set_has_team2();
  // @@protoc_insertion_point(field_mutable:sport.StreamInfo.team2)
  return team2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamInfo::release_team2() {
  // @@protoc_insertion_point(field_release:sport.StreamInfo.team2)
  clear_has_team2();
  return team2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamInfo::set_allocated_team2(::std::string* team2) {
  if (team2 != NULL) {
    set_has_team2();
  } else {
    clear_has_team2();
  }
  team2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team2);
  // @@protoc_insertion_point(field_set_allocated:sport.StreamInfo.team2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sport

// @@protoc_insertion_point(global_scope)
