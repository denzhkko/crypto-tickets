// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stage0_cache.proto

#ifndef PROTOBUF_stage0_5fcache_2eproto__INCLUDED
#define PROTOBUF_stage0_5fcache_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "search_result.pb.h"
#include "backends_quality.pb.h"
// @@protoc_insertion_point(includes)
class BackendId;
class BackendIdDefaultTypeInternal;
extern BackendIdDefaultTypeInternal _BackendId_default_instance_;
class DocInfo;
class DocInfoDefaultTypeInternal;
extern DocInfoDefaultTypeInternal _DocInfo_default_instance_;
class Stage0Info;
class Stage0InfoDefaultTypeInternal;
extern Stage0InfoDefaultTypeInternal _Stage0Info_default_instance_;
class click_rank;
class click_rankDefaultTypeInternal;
extern click_rankDefaultTypeInternal _click_rank_default_instance_;
class resultHdr;
class resultHdrDefaultTypeInternal;
extern resultHdrDefaultTypeInternal _resultHdr_default_instance_;
class serp_quality_features;
class serp_quality_featuresDefaultTypeInternal;
extern serp_quality_featuresDefaultTypeInternal _serp_quality_features_default_instance_;
class stage0;
class stage0DefaultTypeInternal;
extern stage0DefaultTypeInternal _stage0_default_instance_;

namespace protobuf_stage0_5fcache_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_stage0_5fcache_2eproto

// ===================================================================

class BackendId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BackendId) */ {
 public:
  BackendId();
  virtual ~BackendId();

  BackendId(const BackendId& from);

  inline BackendId& operator=(const BackendId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackendId(BackendId&& from) noexcept
    : BackendId() {
    *this = ::std::move(from);
  }

  inline BackendId& operator=(BackendId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackendId& default_instance();

  static inline const BackendId* internal_default_instance() {
    return reinterpret_cast<const BackendId*>(
               &_BackendId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BackendId* other);
  friend void swap(BackendId& a, BackendId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackendId* New() const PROTOBUF_FINAL { return New(NULL); }

  BackendId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackendId& from);
  void MergeFrom(const BackendId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackendId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 backend = 1;
  bool has_backend() const;
  void clear_backend();
  static const int kBackendFieldNumber = 1;
  ::google::protobuf::int32 backend() const;
  void set_backend(::google::protobuf::int32 value);

  // required uint32 replica = 2;
  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 2;
  ::google::protobuf::uint32 replica() const;
  void set_replica(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BackendId)
 private:
  void set_has_backend();
  void clear_has_backend();
  void set_has_replica();
  void clear_has_replica();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 backend_;
  ::google::protobuf::uint32 replica_;
  friend struct protobuf_stage0_5fcache_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class click_rank : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:click_rank) */ {
 public:
  click_rank();
  virtual ~click_rank();

  click_rank(const click_rank& from);

  inline click_rank& operator=(const click_rank& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  click_rank(click_rank&& from) noexcept
    : click_rank() {
    *this = ::std::move(from);
  }

  inline click_rank& operator=(click_rank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const click_rank& default_instance();

  static inline const click_rank* internal_default_instance() {
    return reinterpret_cast<const click_rank*>(
               &_click_rank_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(click_rank* other);
  friend void swap(click_rank& a, click_rank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline click_rank* New() const PROTOBUF_FINAL { return New(NULL); }

  click_rank* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const click_rank& from);
  void MergeFrom(const click_rank& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(click_rank* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double rank = 1;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  double rank() const;
  void set_rank(double value);

  // required double attractive = 2;
  bool has_attractive() const;
  void clear_attractive();
  static const int kAttractiveFieldNumber = 2;
  double attractive() const;
  void set_attractive(double value);

  // required double satisfaction = 3;
  bool has_satisfaction() const;
  void clear_satisfaction();
  static const int kSatisfactionFieldNumber = 3;
  double satisfaction() const;
  void set_satisfaction(double value);

  // required double sessions = 4;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 4;
  double sessions() const;
  void set_sessions(double value);

  // @@protoc_insertion_point(class_scope:click_rank)
 private:
  void set_has_rank();
  void clear_has_rank();
  void set_has_attractive();
  void clear_has_attractive();
  void set_has_satisfaction();
  void clear_has_satisfaction();
  void set_has_sessions();
  void clear_has_sessions();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double rank_;
  double attractive_;
  double satisfaction_;
  double sessions_;
  friend struct protobuf_stage0_5fcache_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class serp_quality_features : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serp_quality_features) */ {
 public:
  serp_quality_features();
  virtual ~serp_quality_features();

  serp_quality_features(const serp_quality_features& from);

  inline serp_quality_features& operator=(const serp_quality_features& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  serp_quality_features(serp_quality_features&& from) noexcept
    : serp_quality_features() {
    *this = ::std::move(from);
  }

  inline serp_quality_features& operator=(serp_quality_features&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const serp_quality_features& default_instance();

  static inline const serp_quality_features* internal_default_instance() {
    return reinterpret_cast<const serp_quality_features*>(
               &_serp_quality_features_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(serp_quality_features* other);
  friend void swap(serp_quality_features& a, serp_quality_features& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline serp_quality_features* New() const PROTOBUF_FINAL { return New(NULL); }

  serp_quality_features* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const serp_quality_features& from);
  void MergeFrom(const serp_quality_features& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(serp_quality_features* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float pair_passages_rank = 1;
  bool has_pair_passages_rank() const;
  void clear_pair_passages_rank();
  static const int kPairPassagesRankFieldNumber = 1;
  float pair_passages_rank() const;
  void set_pair_passages_rank(float value);

  // required float text_rank = 2;
  bool has_text_rank() const;
  void clear_text_rank();
  static const int kTextRankFieldNumber = 2;
  float text_rank() const;
  void set_text_rank(float value);

  // optional float sq_model_rank = 3;
  bool has_sq_model_rank() const;
  void clear_sq_model_rank();
  static const int kSqModelRankFieldNumber = 3;
  float sq_model_rank() const;
  void set_sq_model_rank(float value);

  // @@protoc_insertion_point(class_scope:serp_quality_features)
 private:
  void set_has_pair_passages_rank();
  void clear_has_pair_passages_rank();
  void set_has_text_rank();
  void clear_has_text_rank();
  void set_has_sq_model_rank();
  void clear_has_sq_model_rank();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float pair_passages_rank_;
  float text_rank_;
  float sq_model_rank_;
  friend struct protobuf_stage0_5fcache_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class stage0 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stage0) */ {
 public:
  stage0();
  virtual ~stage0();

  stage0(const stage0& from);

  inline stage0& operator=(const stage0& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  stage0(stage0&& from) noexcept
    : stage0() {
    *this = ::std::move(from);
  }

  inline stage0& operator=(stage0&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stage0& default_instance();

  static inline const stage0* internal_default_instance() {
    return reinterpret_cast<const stage0*>(
               &_stage0_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(stage0* other);
  friend void swap(stage0& a, stage0& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline stage0* New() const PROTOBUF_FINAL { return New(NULL); }

  stage0* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const stage0& from);
  void MergeFrom(const stage0& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(stage0* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snip_hl = 6;
  bool has_snip_hl() const;
  void clear_snip_hl();
  static const int kSnipHlFieldNumber = 6;
  const ::std::string& snip_hl() const;
  void set_snip_hl(const ::std::string& value);
  #if LANG_CXX11
  void set_snip_hl(::std::string&& value);
  #endif
  void set_snip_hl(const char* value);
  void set_snip_hl(const char* value, size_t size);
  ::std::string* mutable_snip_hl();
  ::std::string* release_snip_hl();
  void set_allocated_snip_hl(::std::string* snip_hl);

  // required string rank_trace_feat = 7;
  bool has_rank_trace_feat() const;
  void clear_rank_trace_feat();
  static const int kRankTraceFeatFieldNumber = 7;
  const ::std::string& rank_trace_feat() const;
  void set_rank_trace_feat(const ::std::string& value);
  #if LANG_CXX11
  void set_rank_trace_feat(::std::string&& value);
  #endif
  void set_rank_trace_feat(const char* value);
  void set_rank_trace_feat(const char* value, size_t size);
  ::std::string* mutable_rank_trace_feat();
  ::std::string* release_rank_trace_feat();
  void set_allocated_rank_trace_feat(::std::string* rank_trace_feat);

  // required string doc_trace = 17;
  bool has_doc_trace() const;
  void clear_doc_trace();
  static const int kDocTraceFieldNumber = 17;
  const ::std::string& doc_trace() const;
  void set_doc_trace(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_trace(::std::string&& value);
  #endif
  void set_doc_trace(const char* value);
  void set_doc_trace(const char* value, size_t size);
  ::std::string* mutable_doc_trace();
  ::std::string* release_doc_trace();
  void set_allocated_doc_trace(::std::string* doc_trace);

  // required .click_rank cr = 14;
  bool has_cr() const;
  void clear_cr();
  static const int kCrFieldNumber = 14;
  const ::click_rank& cr() const;
  ::click_rank* mutable_cr();
  ::click_rank* release_cr();
  void set_allocated_cr(::click_rank* cr);

  // required .serp_quality_features sfq = 15;
  bool has_sfq() const;
  void clear_sfq();
  static const int kSfqFieldNumber = 15;
  const ::serp_quality_features& sfq() const;
  ::serp_quality_features* mutable_sfq();
  ::serp_quality_features* release_sfq();
  void set_allocated_sfq(::serp_quality_features* sfq);

  // required double weight = 2;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 2;
  double weight() const;
  void set_weight(double value);

  // required uint32 docid = 1;
  bool has_docid() const;
  void clear_docid();
  static const int kDocidFieldNumber = 1;
  ::google::protobuf::uint32 docid() const;
  void set_docid(::google::protobuf::uint32 value);

  // required uint32 crc1 = 3;
  bool has_crc1() const;
  void clear_crc1();
  static const int kCrc1FieldNumber = 3;
  ::google::protobuf::uint32 crc1() const;
  void set_crc1(::google::protobuf::uint32 value);

  // required uint32 crc2 = 4;
  bool has_crc2() const;
  void clear_crc2();
  static const int kCrc2FieldNumber = 4;
  ::google::protobuf::uint32 crc2() const;
  void set_crc2(::google::protobuf::uint32 value);

  // required uint32 crc3 = 5;
  bool has_crc3() const;
  void clear_crc3();
  static const int kCrc3FieldNumber = 5;
  ::google::protobuf::uint32 crc3() const;
  void set_crc3(::google::protobuf::uint32 value);

  // optional uint64 special_crc = 8;
  bool has_special_crc() const;
  void clear_special_crc();
  static const int kSpecialCrcFieldNumber = 8;
  ::google::protobuf::uint64 special_crc() const;
  void set_special_crc(::google::protobuf::uint64 value);

  // optional uint32 required_position = 9;
  bool has_required_position() const;
  void clear_required_position();
  static const int kRequiredPositionFieldNumber = 9;
  ::google::protobuf::uint32 required_position() const;
  void set_required_position(::google::protobuf::uint32 value);

  // required .gogo.sr.domain_group_type domain_group = 12;
  bool has_domain_group() const;
  void clear_domain_group();
  static const int kDomainGroupFieldNumber = 12;
  ::gogo::sr::domain_group_type domain_group() const;
  void set_domain_group(::gogo::sr::domain_group_type value);

  // required bool is_navig = 10;
  bool has_is_navig() const;
  void clear_is_navig();
  static const int kIsNavigFieldNumber = 10;
  bool is_navig() const;
  void set_is_navig(bool value);

  // required bool parsed_content = 11;
  bool has_parsed_content() const;
  void clear_parsed_content();
  static const int kParsedContentFieldNumber = 11;
  bool parsed_content() const;
  void set_parsed_content(bool value);

  // required bool is_mergable = 13;
  bool has_is_mergable() const;
  void clear_is_mergable();
  static const int kIsMergableFieldNumber = 13;
  bool is_mergable() const;
  void set_is_mergable(bool value);

  // optional bool could_be_a_group_leader = 18;
  bool has_could_be_a_group_leader() const;
  void clear_could_be_a_group_leader();
  static const int kCouldBeAGroupLeaderFieldNumber = 18;
  bool could_be_a_group_leader() const;
  void set_could_be_a_group_leader(bool value);

  // optional fixed32 full_domain_hash = 19;
  bool has_full_domain_hash() const;
  void clear_full_domain_hash();
  static const int kFullDomainHashFieldNumber = 19;
  ::google::protobuf::uint32 full_domain_hash() const;
  void set_full_domain_hash(::google::protobuf::uint32 value);

  // optional uint64 crc5 = 16;
  bool has_crc5() const;
  void clear_crc5();
  static const int kCrc5FieldNumber = 16;
  ::google::protobuf::uint64 crc5() const;
  void set_crc5(::google::protobuf::uint64 value);

  // optional uint32 features_hash = 20;
  bool has_features_hash() const;
  void clear_features_hash();
  static const int kFeaturesHashFieldNumber = 20;
  ::google::protobuf::uint32 features_hash() const;
  void set_features_hash(::google::protobuf::uint32 value);

  // optional bool req_pos_mergable = 21;
  bool has_req_pos_mergable() const;
  void clear_req_pos_mergable();
  static const int kReqPosMergableFieldNumber = 21;
  bool req_pos_mergable() const;
  void set_req_pos_mergable(bool value);

  // @@protoc_insertion_point(class_scope:stage0)
 private:
  void set_has_docid();
  void clear_has_docid();
  void set_has_weight();
  void clear_has_weight();
  void set_has_crc1();
  void clear_has_crc1();
  void set_has_crc2();
  void clear_has_crc2();
  void set_has_crc3();
  void clear_has_crc3();
  void set_has_snip_hl();
  void clear_has_snip_hl();
  void set_has_rank_trace_feat();
  void clear_has_rank_trace_feat();
  void set_has_special_crc();
  void clear_has_special_crc();
  void set_has_required_position();
  void clear_has_required_position();
  void set_has_is_navig();
  void clear_has_is_navig();
  void set_has_parsed_content();
  void clear_has_parsed_content();
  void set_has_domain_group();
  void clear_has_domain_group();
  void set_has_is_mergable();
  void clear_has_is_mergable();
  void set_has_cr();
  void clear_has_cr();
  void set_has_sfq();
  void clear_has_sfq();
  void set_has_crc5();
  void clear_has_crc5();
  void set_has_doc_trace();
  void clear_has_doc_trace();
  void set_has_could_be_a_group_leader();
  void clear_has_could_be_a_group_leader();
  void set_has_full_domain_hash();
  void clear_has_full_domain_hash();
  void set_has_features_hash();
  void clear_has_features_hash();
  void set_has_req_pos_mergable();
  void clear_has_req_pos_mergable();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr snip_hl_;
  ::google::protobuf::internal::ArenaStringPtr rank_trace_feat_;
  ::google::protobuf::internal::ArenaStringPtr doc_trace_;
  ::click_rank* cr_;
  ::serp_quality_features* sfq_;
  double weight_;
  ::google::protobuf::uint32 docid_;
  ::google::protobuf::uint32 crc1_;
  ::google::protobuf::uint32 crc2_;
  ::google::protobuf::uint32 crc3_;
  ::google::protobuf::uint64 special_crc_;
  ::google::protobuf::uint32 required_position_;
  int domain_group_;
  bool is_navig_;
  bool parsed_content_;
  bool is_mergable_;
  bool could_be_a_group_leader_;
  ::google::protobuf::uint32 full_domain_hash_;
  ::google::protobuf::uint64 crc5_;
  ::google::protobuf::uint32 features_hash_;
  bool req_pos_mergable_;
  friend struct protobuf_stage0_5fcache_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class resultHdr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resultHdr) */ {
 public:
  resultHdr();
  virtual ~resultHdr();

  resultHdr(const resultHdr& from);

  inline resultHdr& operator=(const resultHdr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  resultHdr(resultHdr&& from) noexcept
    : resultHdr() {
    *this = ::std::move(from);
  }

  inline resultHdr& operator=(resultHdr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const resultHdr& default_instance();

  static inline const resultHdr* internal_default_instance() {
    return reinterpret_cast<const resultHdr*>(
               &_resultHdr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(resultHdr* other);
  friend void swap(resultHdr& a, resultHdr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline resultHdr* New() const PROTOBUF_FINAL { return New(NULL); }

  resultHdr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const resultHdr& from);
  void MergeFrom(const resultHdr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(resultHdr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string error_mesage = 2;
  bool has_error_mesage() const;
  void clear_error_mesage();
  static const int kErrorMesageFieldNumber = 2;
  const ::std::string& error_mesage() const;
  void set_error_mesage(const ::std::string& value);
  #if LANG_CXX11
  void set_error_mesage(::std::string&& value);
  #endif
  void set_error_mesage(const char* value);
  void set_error_mesage(const char* value, size_t size);
  ::std::string* mutable_error_mesage();
  ::std::string* release_error_mesage();
  void set_allocated_error_mesage(::std::string* error_mesage);

  // required string sm_through = 10;
  bool has_sm_through() const;
  void clear_sm_through();
  static const int kSmThroughFieldNumber = 10;
  const ::std::string& sm_through() const;
  void set_sm_through(const ::std::string& value);
  #if LANG_CXX11
  void set_sm_through(::std::string&& value);
  #endif
  void set_sm_through(const char* value);
  void set_sm_through(const char* value, size_t size);
  ::std::string* mutable_sm_through();
  ::std::string* release_sm_through();
  void set_allocated_sm_through(::std::string* sm_through);

  // required string searcher_version = 11;
  bool has_searcher_version() const;
  void clear_searcher_version();
  static const int kSearcherVersionFieldNumber = 11;
  const ::std::string& searcher_version() const;
  void set_searcher_version(const ::std::string& value);
  #if LANG_CXX11
  void set_searcher_version(::std::string&& value);
  #endif
  void set_searcher_version(const char* value);
  void set_searcher_version(const char* value, size_t size);
  ::std::string* mutable_searcher_version();
  ::std::string* release_searcher_version();
  void set_allocated_searcher_version(::std::string* searcher_version);

  // required string microbases = 12;
  bool has_microbases() const;
  void clear_microbases();
  static const int kMicrobasesFieldNumber = 12;
  const ::std::string& microbases() const;
  void set_microbases(const ::std::string& value);
  #if LANG_CXX11
  void set_microbases(::std::string&& value);
  #endif
  void set_microbases(const char* value);
  void set_microbases(const char* value, size_t size);
  ::std::string* mutable_microbases();
  ::std::string* release_microbases();
  void set_allocated_microbases(::std::string* microbases);

  // required string experiment_interleaving_type = 15;
  bool has_experiment_interleaving_type() const;
  void clear_experiment_interleaving_type();
  static const int kExperimentInterleavingTypeFieldNumber = 15;
  const ::std::string& experiment_interleaving_type() const;
  void set_experiment_interleaving_type(const ::std::string& value);
  #if LANG_CXX11
  void set_experiment_interleaving_type(::std::string&& value);
  #endif
  void set_experiment_interleaving_type(const char* value);
  void set_experiment_interleaving_type(const char* value, size_t size);
  ::std::string* mutable_experiment_interleaving_type();
  ::std::string* release_experiment_interleaving_type();
  void set_allocated_experiment_interleaving_type(::std::string* experiment_interleaving_type);

  // required string experiment_essr_source_type = 16;
  bool has_experiment_essr_source_type() const;
  void clear_experiment_essr_source_type();
  static const int kExperimentEssrSourceTypeFieldNumber = 16;
  const ::std::string& experiment_essr_source_type() const;
  void set_experiment_essr_source_type(const ::std::string& value);
  #if LANG_CXX11
  void set_experiment_essr_source_type(::std::string&& value);
  #endif
  void set_experiment_essr_source_type(const char* value);
  void set_experiment_essr_source_type(const char* value, size_t size);
  ::std::string* mutable_experiment_essr_source_type();
  ::std::string* release_experiment_essr_source_type();
  void set_allocated_experiment_essr_source_type(::std::string* experiment_essr_source_type);

  // required bytes trait_holder_and_webstat = 17;
  bool has_trait_holder_and_webstat() const;
  void clear_trait_holder_and_webstat();
  static const int kTraitHolderAndWebstatFieldNumber = 17;
  const ::std::string& trait_holder_and_webstat() const;
  void set_trait_holder_and_webstat(const ::std::string& value);
  #if LANG_CXX11
  void set_trait_holder_and_webstat(::std::string&& value);
  #endif
  void set_trait_holder_and_webstat(const char* value);
  void set_trait_holder_and_webstat(const void* value, size_t size);
  ::std::string* mutable_trait_holder_and_webstat();
  ::std::string* release_trait_holder_and_webstat();
  void set_allocated_trait_holder_and_webstat(::std::string* trait_holder_and_webstat);

  // optional .backends_quality.pb.BackendsQuality backends_quality = 19;
  bool has_backends_quality() const;
  void clear_backends_quality();
  static const int kBackendsQualityFieldNumber = 19;
  const ::backends_quality::pb::BackendsQuality& backends_quality() const;
  ::backends_quality::pb::BackendsQuality* mutable_backends_quality();
  ::backends_quality::pb::BackendsQuality* release_backends_quality();
  void set_allocated_backends_quality(::backends_quality::pb::BackendsQuality* backends_quality);

  // required uint32 error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::uint32 error() const;
  void set_error(::google::protobuf::uint32 value);

  // required uint32 ndocs_groups = 3;
  bool has_ndocs_groups() const;
  void clear_ndocs_groups();
  static const int kNdocsGroupsFieldNumber = 3;
  ::google::protobuf::uint32 ndocs_groups() const;
  void set_ndocs_groups(::google::protobuf::uint32 value);

  // required uint64 m3 = 5;
  bool has_m3() const;
  void clear_m3();
  static const int kM3FieldNumber = 5;
  ::google::protobuf::uint64 m3() const;
  void set_m3(::google::protobuf::uint64 value);

  // required uint64 m4 = 6;
  bool has_m4() const;
  void clear_m4();
  static const int kM4FieldNumber = 6;
  ::google::protobuf::uint64 m4() const;
  void set_m4(::google::protobuf::uint64 value);

  // required uint32 ndocs_total = 4;
  bool has_ndocs_total() const;
  void clear_ndocs_total();
  static const int kNdocsTotalFieldNumber = 4;
  ::google::protobuf::uint32 ndocs_total() const;
  void set_ndocs_total(::google::protobuf::uint32 value);

  // required uint32 last_index = 8;
  bool has_last_index() const;
  void clear_last_index();
  static const int kLastIndexFieldNumber = 8;
  ::google::protobuf::uint32 last_index() const;
  void set_last_index(::google::protobuf::uint32 value);

  // required uint64 m5 = 7;
  bool has_m5() const;
  void clear_m5();
  static const int kM5FieldNumber = 7;
  ::google::protobuf::uint64 m5() const;
  void set_m5(::google::protobuf::uint64 value);

  // required uint32 max_docs_count = 9;
  bool has_max_docs_count() const;
  void clear_max_docs_count();
  static const int kMaxDocsCountFieldNumber = 9;
  ::google::protobuf::uint32 max_docs_count() const;
  void set_max_docs_count(::google::protobuf::uint32 value);

  // required uint32 version_hash = 13;
  bool has_version_hash() const;
  void clear_version_hash();
  static const int kVersionHashFieldNumber = 13;
  ::google::protobuf::uint32 version_hash() const;
  void set_version_hash(::google::protobuf::uint32 value);

  // required uint32 experiment_id = 14;
  bool has_experiment_id() const;
  void clear_experiment_id();
  static const int kExperimentIdFieldNumber = 14;
  ::google::protobuf::uint32 experiment_id() const;
  void set_experiment_id(::google::protobuf::uint32 value);

  // optional bool domain_group_ooo = 18;
  bool has_domain_group_ooo() const;
  void clear_domain_group_ooo();
  static const int kDomainGroupOooFieldNumber = 18;
  bool domain_group_ooo() const;
  void set_domain_group_ooo(bool value);

  // @@protoc_insertion_point(class_scope:resultHdr)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_error_mesage();
  void clear_has_error_mesage();
  void set_has_ndocs_groups();
  void clear_has_ndocs_groups();
  void set_has_ndocs_total();
  void clear_has_ndocs_total();
  void set_has_m3();
  void clear_has_m3();
  void set_has_m4();
  void clear_has_m4();
  void set_has_m5();
  void clear_has_m5();
  void set_has_last_index();
  void clear_has_last_index();
  void set_has_max_docs_count();
  void clear_has_max_docs_count();
  void set_has_sm_through();
  void clear_has_sm_through();
  void set_has_searcher_version();
  void clear_has_searcher_version();
  void set_has_microbases();
  void clear_has_microbases();
  void set_has_version_hash();
  void clear_has_version_hash();
  void set_has_experiment_id();
  void clear_has_experiment_id();
  void set_has_experiment_interleaving_type();
  void clear_has_experiment_interleaving_type();
  void set_has_experiment_essr_source_type();
  void clear_has_experiment_essr_source_type();
  void set_has_trait_holder_and_webstat();
  void clear_has_trait_holder_and_webstat();
  void set_has_domain_group_ooo();
  void clear_has_domain_group_ooo();
  void set_has_backends_quality();
  void clear_has_backends_quality();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_mesage_;
  ::google::protobuf::internal::ArenaStringPtr sm_through_;
  ::google::protobuf::internal::ArenaStringPtr searcher_version_;
  ::google::protobuf::internal::ArenaStringPtr microbases_;
  ::google::protobuf::internal::ArenaStringPtr experiment_interleaving_type_;
  ::google::protobuf::internal::ArenaStringPtr experiment_essr_source_type_;
  ::google::protobuf::internal::ArenaStringPtr trait_holder_and_webstat_;
  ::backends_quality::pb::BackendsQuality* backends_quality_;
  ::google::protobuf::uint32 error_;
  ::google::protobuf::uint32 ndocs_groups_;
  ::google::protobuf::uint64 m3_;
  ::google::protobuf::uint64 m4_;
  ::google::protobuf::uint32 ndocs_total_;
  ::google::protobuf::uint32 last_index_;
  ::google::protobuf::uint64 m5_;
  ::google::protobuf::uint32 max_docs_count_;
  ::google::protobuf::uint32 version_hash_;
  ::google::protobuf::uint32 experiment_id_;
  bool domain_group_ooo_;
  friend struct protobuf_stage0_5fcache_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DocInfo) */ {
 public:
  DocInfo();
  virtual ~DocInfo();

  DocInfo(const DocInfo& from);

  inline DocInfo& operator=(const DocInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocInfo(DocInfo&& from) noexcept
    : DocInfo() {
    *this = ::std::move(from);
  }

  inline DocInfo& operator=(DocInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocInfo& default_instance();

  static inline const DocInfo* internal_default_instance() {
    return reinterpret_cast<const DocInfo*>(
               &_DocInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DocInfo* other);
  friend void swap(DocInfo& a, DocInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DocInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocInfo& from);
  void MergeFrom(const DocInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .stage0 docs = 3;
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 3;
  const ::stage0& docs(int index) const;
  ::stage0* mutable_docs(int index);
  ::stage0* add_docs();
  ::google::protobuf::RepeatedPtrField< ::stage0 >*
      mutable_docs();
  const ::google::protobuf::RepeatedPtrField< ::stage0 >&
      docs() const;

  // required .BackendId backend_id = 1;
  bool has_backend_id() const;
  void clear_backend_id();
  static const int kBackendIdFieldNumber = 1;
  const ::BackendId& backend_id() const;
  ::BackendId* mutable_backend_id();
  ::BackendId* release_backend_id();
  void set_allocated_backend_id(::BackendId* backend_id);

  // required .resultHdr hdr = 2;
  bool has_hdr() const;
  void clear_hdr();
  static const int kHdrFieldNumber = 2;
  const ::resultHdr& hdr() const;
  ::resultHdr* mutable_hdr();
  ::resultHdr* release_hdr();
  void set_allocated_hdr(::resultHdr* hdr);

  // @@protoc_insertion_point(class_scope:DocInfo)
 private:
  void set_has_backend_id();
  void clear_has_backend_id();
  void set_has_hdr();
  void clear_has_hdr();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::stage0 > docs_;
  ::BackendId* backend_id_;
  ::resultHdr* hdr_;
  friend struct protobuf_stage0_5fcache_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stage0Info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Stage0Info) */ {
 public:
  Stage0Info();
  virtual ~Stage0Info();

  Stage0Info(const Stage0Info& from);

  inline Stage0Info& operator=(const Stage0Info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stage0Info(Stage0Info&& from) noexcept
    : Stage0Info() {
    *this = ::std::move(from);
  }

  inline Stage0Info& operator=(Stage0Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stage0Info& default_instance();

  static inline const Stage0Info* internal_default_instance() {
    return reinterpret_cast<const Stage0Info*>(
               &_Stage0Info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Stage0Info* other);
  friend void swap(Stage0Info& a, Stage0Info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stage0Info* New() const PROTOBUF_FINAL { return New(NULL); }

  Stage0Info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Stage0Info& from);
  void MergeFrom(const Stage0Info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Stage0Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DocInfo docs = 1;
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 1;
  const ::DocInfo& docs(int index) const;
  ::DocInfo* mutable_docs(int index);
  ::DocInfo* add_docs();
  ::google::protobuf::RepeatedPtrField< ::DocInfo >*
      mutable_docs();
  const ::google::protobuf::RepeatedPtrField< ::DocInfo >&
      docs() const;

  // optional uint32 backends_list_hash = 2;
  bool has_backends_list_hash() const;
  void clear_backends_list_hash();
  static const int kBackendsListHashFieldNumber = 2;
  ::google::protobuf::uint32 backends_list_hash() const;
  void set_backends_list_hash(::google::protobuf::uint32 value);

  // optional uint32 sm_revision_hash = 3;
  bool has_sm_revision_hash() const;
  void clear_sm_revision_hash();
  static const int kSmRevisionHashFieldNumber = 3;
  ::google::protobuf::uint32 sm_revision_hash() const;
  void set_sm_revision_hash(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Stage0Info)
 private:
  void set_has_backends_list_hash();
  void clear_has_backends_list_hash();
  void set_has_sm_revision_hash();
  void clear_has_sm_revision_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DocInfo > docs_;
  ::google::protobuf::uint32 backends_list_hash_;
  ::google::protobuf::uint32 sm_revision_hash_;
  friend struct protobuf_stage0_5fcache_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BackendId

// required sint32 backend = 1;
inline bool BackendId::has_backend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackendId::set_has_backend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackendId::clear_has_backend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackendId::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::google::protobuf::int32 BackendId::backend() const {
  // @@protoc_insertion_point(field_get:BackendId.backend)
  return backend_;
}
inline void BackendId::set_backend(::google::protobuf::int32 value) {
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:BackendId.backend)
}

// required uint32 replica = 2;
inline bool BackendId::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackendId::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackendId::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackendId::clear_replica() {
  replica_ = 0u;
  clear_has_replica();
}
inline ::google::protobuf::uint32 BackendId::replica() const {
  // @@protoc_insertion_point(field_get:BackendId.replica)
  return replica_;
}
inline void BackendId::set_replica(::google::protobuf::uint32 value) {
  set_has_replica();
  replica_ = value;
  // @@protoc_insertion_point(field_set:BackendId.replica)
}

// -------------------------------------------------------------------

// click_rank

// required double rank = 1;
inline bool click_rank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void click_rank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void click_rank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void click_rank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline double click_rank::rank() const {
  // @@protoc_insertion_point(field_get:click_rank.rank)
  return rank_;
}
inline void click_rank::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:click_rank.rank)
}

// required double attractive = 2;
inline bool click_rank::has_attractive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void click_rank::set_has_attractive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void click_rank::clear_has_attractive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void click_rank::clear_attractive() {
  attractive_ = 0;
  clear_has_attractive();
}
inline double click_rank::attractive() const {
  // @@protoc_insertion_point(field_get:click_rank.attractive)
  return attractive_;
}
inline void click_rank::set_attractive(double value) {
  set_has_attractive();
  attractive_ = value;
  // @@protoc_insertion_point(field_set:click_rank.attractive)
}

// required double satisfaction = 3;
inline bool click_rank::has_satisfaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void click_rank::set_has_satisfaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void click_rank::clear_has_satisfaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void click_rank::clear_satisfaction() {
  satisfaction_ = 0;
  clear_has_satisfaction();
}
inline double click_rank::satisfaction() const {
  // @@protoc_insertion_point(field_get:click_rank.satisfaction)
  return satisfaction_;
}
inline void click_rank::set_satisfaction(double value) {
  set_has_satisfaction();
  satisfaction_ = value;
  // @@protoc_insertion_point(field_set:click_rank.satisfaction)
}

// required double sessions = 4;
inline bool click_rank::has_sessions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void click_rank::set_has_sessions() {
  _has_bits_[0] |= 0x00000008u;
}
inline void click_rank::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void click_rank::clear_sessions() {
  sessions_ = 0;
  clear_has_sessions();
}
inline double click_rank::sessions() const {
  // @@protoc_insertion_point(field_get:click_rank.sessions)
  return sessions_;
}
inline void click_rank::set_sessions(double value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:click_rank.sessions)
}

// -------------------------------------------------------------------

// serp_quality_features

// required float pair_passages_rank = 1;
inline bool serp_quality_features::has_pair_passages_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void serp_quality_features::set_has_pair_passages_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void serp_quality_features::clear_has_pair_passages_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void serp_quality_features::clear_pair_passages_rank() {
  pair_passages_rank_ = 0;
  clear_has_pair_passages_rank();
}
inline float serp_quality_features::pair_passages_rank() const {
  // @@protoc_insertion_point(field_get:serp_quality_features.pair_passages_rank)
  return pair_passages_rank_;
}
inline void serp_quality_features::set_pair_passages_rank(float value) {
  set_has_pair_passages_rank();
  pair_passages_rank_ = value;
  // @@protoc_insertion_point(field_set:serp_quality_features.pair_passages_rank)
}

// required float text_rank = 2;
inline bool serp_quality_features::has_text_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void serp_quality_features::set_has_text_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void serp_quality_features::clear_has_text_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void serp_quality_features::clear_text_rank() {
  text_rank_ = 0;
  clear_has_text_rank();
}
inline float serp_quality_features::text_rank() const {
  // @@protoc_insertion_point(field_get:serp_quality_features.text_rank)
  return text_rank_;
}
inline void serp_quality_features::set_text_rank(float value) {
  set_has_text_rank();
  text_rank_ = value;
  // @@protoc_insertion_point(field_set:serp_quality_features.text_rank)
}

// optional float sq_model_rank = 3;
inline bool serp_quality_features::has_sq_model_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void serp_quality_features::set_has_sq_model_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void serp_quality_features::clear_has_sq_model_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void serp_quality_features::clear_sq_model_rank() {
  sq_model_rank_ = 0;
  clear_has_sq_model_rank();
}
inline float serp_quality_features::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:serp_quality_features.sq_model_rank)
  return sq_model_rank_;
}
inline void serp_quality_features::set_sq_model_rank(float value) {
  set_has_sq_model_rank();
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:serp_quality_features.sq_model_rank)
}

// -------------------------------------------------------------------

// stage0

// required uint32 docid = 1;
inline bool stage0::has_docid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stage0::set_has_docid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stage0::clear_has_docid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stage0::clear_docid() {
  docid_ = 0u;
  clear_has_docid();
}
inline ::google::protobuf::uint32 stage0::docid() const {
  // @@protoc_insertion_point(field_get:stage0.docid)
  return docid_;
}
inline void stage0::set_docid(::google::protobuf::uint32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:stage0.docid)
}

// required double weight = 2;
inline bool stage0::has_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stage0::set_has_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stage0::clear_has_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stage0::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline double stage0::weight() const {
  // @@protoc_insertion_point(field_get:stage0.weight)
  return weight_;
}
inline void stage0::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:stage0.weight)
}

// required uint32 crc1 = 3;
inline bool stage0::has_crc1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stage0::set_has_crc1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stage0::clear_has_crc1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stage0::clear_crc1() {
  crc1_ = 0u;
  clear_has_crc1();
}
inline ::google::protobuf::uint32 stage0::crc1() const {
  // @@protoc_insertion_point(field_get:stage0.crc1)
  return crc1_;
}
inline void stage0::set_crc1(::google::protobuf::uint32 value) {
  set_has_crc1();
  crc1_ = value;
  // @@protoc_insertion_point(field_set:stage0.crc1)
}

// required uint32 crc2 = 4;
inline bool stage0::has_crc2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stage0::set_has_crc2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stage0::clear_has_crc2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stage0::clear_crc2() {
  crc2_ = 0u;
  clear_has_crc2();
}
inline ::google::protobuf::uint32 stage0::crc2() const {
  // @@protoc_insertion_point(field_get:stage0.crc2)
  return crc2_;
}
inline void stage0::set_crc2(::google::protobuf::uint32 value) {
  set_has_crc2();
  crc2_ = value;
  // @@protoc_insertion_point(field_set:stage0.crc2)
}

// required uint32 crc3 = 5;
inline bool stage0::has_crc3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stage0::set_has_crc3() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stage0::clear_has_crc3() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stage0::clear_crc3() {
  crc3_ = 0u;
  clear_has_crc3();
}
inline ::google::protobuf::uint32 stage0::crc3() const {
  // @@protoc_insertion_point(field_get:stage0.crc3)
  return crc3_;
}
inline void stage0::set_crc3(::google::protobuf::uint32 value) {
  set_has_crc3();
  crc3_ = value;
  // @@protoc_insertion_point(field_set:stage0.crc3)
}

// required string snip_hl = 6;
inline bool stage0::has_snip_hl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stage0::set_has_snip_hl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stage0::clear_has_snip_hl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stage0::clear_snip_hl() {
  snip_hl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snip_hl();
}
inline const ::std::string& stage0::snip_hl() const {
  // @@protoc_insertion_point(field_get:stage0.snip_hl)
  return snip_hl_.GetNoArena();
}
inline void stage0::set_snip_hl(const ::std::string& value) {
  set_has_snip_hl();
  snip_hl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stage0.snip_hl)
}
#if LANG_CXX11
inline void stage0::set_snip_hl(::std::string&& value) {
  set_has_snip_hl();
  snip_hl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stage0.snip_hl)
}
#endif
inline void stage0::set_snip_hl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snip_hl();
  snip_hl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stage0.snip_hl)
}
inline void stage0::set_snip_hl(const char* value, size_t size) {
  set_has_snip_hl();
  snip_hl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stage0.snip_hl)
}
inline ::std::string* stage0::mutable_snip_hl() {
  set_has_snip_hl();
  // @@protoc_insertion_point(field_mutable:stage0.snip_hl)
  return snip_hl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stage0::release_snip_hl() {
  // @@protoc_insertion_point(field_release:stage0.snip_hl)
  clear_has_snip_hl();
  return snip_hl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stage0::set_allocated_snip_hl(::std::string* snip_hl) {
  if (snip_hl != NULL) {
    set_has_snip_hl();
  } else {
    clear_has_snip_hl();
  }
  snip_hl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snip_hl);
  // @@protoc_insertion_point(field_set_allocated:stage0.snip_hl)
}

// required string rank_trace_feat = 7;
inline bool stage0::has_rank_trace_feat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stage0::set_has_rank_trace_feat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stage0::clear_has_rank_trace_feat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stage0::clear_rank_trace_feat() {
  rank_trace_feat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rank_trace_feat();
}
inline const ::std::string& stage0::rank_trace_feat() const {
  // @@protoc_insertion_point(field_get:stage0.rank_trace_feat)
  return rank_trace_feat_.GetNoArena();
}
inline void stage0::set_rank_trace_feat(const ::std::string& value) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stage0.rank_trace_feat)
}
#if LANG_CXX11
inline void stage0::set_rank_trace_feat(::std::string&& value) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stage0.rank_trace_feat)
}
#endif
inline void stage0::set_rank_trace_feat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stage0.rank_trace_feat)
}
inline void stage0::set_rank_trace_feat(const char* value, size_t size) {
  set_has_rank_trace_feat();
  rank_trace_feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stage0.rank_trace_feat)
}
inline ::std::string* stage0::mutable_rank_trace_feat() {
  set_has_rank_trace_feat();
  // @@protoc_insertion_point(field_mutable:stage0.rank_trace_feat)
  return rank_trace_feat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stage0::release_rank_trace_feat() {
  // @@protoc_insertion_point(field_release:stage0.rank_trace_feat)
  clear_has_rank_trace_feat();
  return rank_trace_feat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stage0::set_allocated_rank_trace_feat(::std::string* rank_trace_feat) {
  if (rank_trace_feat != NULL) {
    set_has_rank_trace_feat();
  } else {
    clear_has_rank_trace_feat();
  }
  rank_trace_feat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rank_trace_feat);
  // @@protoc_insertion_point(field_set_allocated:stage0.rank_trace_feat)
}

// optional uint64 special_crc = 8;
inline bool stage0::has_special_crc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stage0::set_has_special_crc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stage0::clear_has_special_crc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stage0::clear_special_crc() {
  special_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_special_crc();
}
inline ::google::protobuf::uint64 stage0::special_crc() const {
  // @@protoc_insertion_point(field_get:stage0.special_crc)
  return special_crc_;
}
inline void stage0::set_special_crc(::google::protobuf::uint64 value) {
  set_has_special_crc();
  special_crc_ = value;
  // @@protoc_insertion_point(field_set:stage0.special_crc)
}

// optional uint32 required_position = 9;
inline bool stage0::has_required_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stage0::set_has_required_position() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stage0::clear_has_required_position() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stage0::clear_required_position() {
  required_position_ = 0u;
  clear_has_required_position();
}
inline ::google::protobuf::uint32 stage0::required_position() const {
  // @@protoc_insertion_point(field_get:stage0.required_position)
  return required_position_;
}
inline void stage0::set_required_position(::google::protobuf::uint32 value) {
  set_has_required_position();
  required_position_ = value;
  // @@protoc_insertion_point(field_set:stage0.required_position)
}

// required bool is_navig = 10;
inline bool stage0::has_is_navig() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stage0::set_has_is_navig() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stage0::clear_has_is_navig() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stage0::clear_is_navig() {
  is_navig_ = false;
  clear_has_is_navig();
}
inline bool stage0::is_navig() const {
  // @@protoc_insertion_point(field_get:stage0.is_navig)
  return is_navig_;
}
inline void stage0::set_is_navig(bool value) {
  set_has_is_navig();
  is_navig_ = value;
  // @@protoc_insertion_point(field_set:stage0.is_navig)
}

// required bool parsed_content = 11;
inline bool stage0::has_parsed_content() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stage0::set_has_parsed_content() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stage0::clear_has_parsed_content() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stage0::clear_parsed_content() {
  parsed_content_ = false;
  clear_has_parsed_content();
}
inline bool stage0::parsed_content() const {
  // @@protoc_insertion_point(field_get:stage0.parsed_content)
  return parsed_content_;
}
inline void stage0::set_parsed_content(bool value) {
  set_has_parsed_content();
  parsed_content_ = value;
  // @@protoc_insertion_point(field_set:stage0.parsed_content)
}

// required .gogo.sr.domain_group_type domain_group = 12;
inline bool stage0::has_domain_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stage0::set_has_domain_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stage0::clear_has_domain_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stage0::clear_domain_group() {
  domain_group_ = 0;
  clear_has_domain_group();
}
inline ::gogo::sr::domain_group_type stage0::domain_group() const {
  // @@protoc_insertion_point(field_get:stage0.domain_group)
  return static_cast< ::gogo::sr::domain_group_type >(domain_group_);
}
inline void stage0::set_domain_group(::gogo::sr::domain_group_type value) {
  assert(::gogo::sr::domain_group_type_IsValid(value));
  set_has_domain_group();
  domain_group_ = value;
  // @@protoc_insertion_point(field_set:stage0.domain_group)
}

// required bool is_mergable = 13;
inline bool stage0::has_is_mergable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stage0::set_has_is_mergable() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stage0::clear_has_is_mergable() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stage0::clear_is_mergable() {
  is_mergable_ = false;
  clear_has_is_mergable();
}
inline bool stage0::is_mergable() const {
  // @@protoc_insertion_point(field_get:stage0.is_mergable)
  return is_mergable_;
}
inline void stage0::set_is_mergable(bool value) {
  set_has_is_mergable();
  is_mergable_ = value;
  // @@protoc_insertion_point(field_set:stage0.is_mergable)
}

// required .click_rank cr = 14;
inline bool stage0::has_cr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stage0::set_has_cr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stage0::clear_has_cr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stage0::clear_cr() {
  if (cr_ != NULL) cr_->::click_rank::Clear();
  clear_has_cr();
}
inline const ::click_rank& stage0::cr() const {
  const ::click_rank* p = cr_;
  // @@protoc_insertion_point(field_get:stage0.cr)
  return p != NULL ? *p : *reinterpret_cast<const ::click_rank*>(
      &::_click_rank_default_instance_);
}
inline ::click_rank* stage0::mutable_cr() {
  set_has_cr();
  if (cr_ == NULL) {
    cr_ = new ::click_rank;
  }
  // @@protoc_insertion_point(field_mutable:stage0.cr)
  return cr_;
}
inline ::click_rank* stage0::release_cr() {
  // @@protoc_insertion_point(field_release:stage0.cr)
  clear_has_cr();
  ::click_rank* temp = cr_;
  cr_ = NULL;
  return temp;
}
inline void stage0::set_allocated_cr(::click_rank* cr) {
  delete cr_;
  cr_ = cr;
  if (cr) {
    set_has_cr();
  } else {
    clear_has_cr();
  }
  // @@protoc_insertion_point(field_set_allocated:stage0.cr)
}

// required .serp_quality_features sfq = 15;
inline bool stage0::has_sfq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stage0::set_has_sfq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stage0::clear_has_sfq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stage0::clear_sfq() {
  if (sfq_ != NULL) sfq_->::serp_quality_features::Clear();
  clear_has_sfq();
}
inline const ::serp_quality_features& stage0::sfq() const {
  const ::serp_quality_features* p = sfq_;
  // @@protoc_insertion_point(field_get:stage0.sfq)
  return p != NULL ? *p : *reinterpret_cast<const ::serp_quality_features*>(
      &::_serp_quality_features_default_instance_);
}
inline ::serp_quality_features* stage0::mutable_sfq() {
  set_has_sfq();
  if (sfq_ == NULL) {
    sfq_ = new ::serp_quality_features;
  }
  // @@protoc_insertion_point(field_mutable:stage0.sfq)
  return sfq_;
}
inline ::serp_quality_features* stage0::release_sfq() {
  // @@protoc_insertion_point(field_release:stage0.sfq)
  clear_has_sfq();
  ::serp_quality_features* temp = sfq_;
  sfq_ = NULL;
  return temp;
}
inline void stage0::set_allocated_sfq(::serp_quality_features* sfq) {
  delete sfq_;
  sfq_ = sfq;
  if (sfq) {
    set_has_sfq();
  } else {
    clear_has_sfq();
  }
  // @@protoc_insertion_point(field_set_allocated:stage0.sfq)
}

// optional uint64 crc5 = 16;
inline bool stage0::has_crc5() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stage0::set_has_crc5() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stage0::clear_has_crc5() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stage0::clear_crc5() {
  crc5_ = GOOGLE_ULONGLONG(0);
  clear_has_crc5();
}
inline ::google::protobuf::uint64 stage0::crc5() const {
  // @@protoc_insertion_point(field_get:stage0.crc5)
  return crc5_;
}
inline void stage0::set_crc5(::google::protobuf::uint64 value) {
  set_has_crc5();
  crc5_ = value;
  // @@protoc_insertion_point(field_set:stage0.crc5)
}

// required string doc_trace = 17;
inline bool stage0::has_doc_trace() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stage0::set_has_doc_trace() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stage0::clear_has_doc_trace() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stage0::clear_doc_trace() {
  doc_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_trace();
}
inline const ::std::string& stage0::doc_trace() const {
  // @@protoc_insertion_point(field_get:stage0.doc_trace)
  return doc_trace_.GetNoArena();
}
inline void stage0::set_doc_trace(const ::std::string& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stage0.doc_trace)
}
#if LANG_CXX11
inline void stage0::set_doc_trace(::std::string&& value) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stage0.doc_trace)
}
#endif
inline void stage0::set_doc_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stage0.doc_trace)
}
inline void stage0::set_doc_trace(const char* value, size_t size) {
  set_has_doc_trace();
  doc_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stage0.doc_trace)
}
inline ::std::string* stage0::mutable_doc_trace() {
  set_has_doc_trace();
  // @@protoc_insertion_point(field_mutable:stage0.doc_trace)
  return doc_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stage0::release_doc_trace() {
  // @@protoc_insertion_point(field_release:stage0.doc_trace)
  clear_has_doc_trace();
  return doc_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stage0::set_allocated_doc_trace(::std::string* doc_trace) {
  if (doc_trace != NULL) {
    set_has_doc_trace();
  } else {
    clear_has_doc_trace();
  }
  doc_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_trace);
  // @@protoc_insertion_point(field_set_allocated:stage0.doc_trace)
}

// optional bool could_be_a_group_leader = 18;
inline bool stage0::has_could_be_a_group_leader() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stage0::set_has_could_be_a_group_leader() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stage0::clear_has_could_be_a_group_leader() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stage0::clear_could_be_a_group_leader() {
  could_be_a_group_leader_ = false;
  clear_has_could_be_a_group_leader();
}
inline bool stage0::could_be_a_group_leader() const {
  // @@protoc_insertion_point(field_get:stage0.could_be_a_group_leader)
  return could_be_a_group_leader_;
}
inline void stage0::set_could_be_a_group_leader(bool value) {
  set_has_could_be_a_group_leader();
  could_be_a_group_leader_ = value;
  // @@protoc_insertion_point(field_set:stage0.could_be_a_group_leader)
}

// optional fixed32 full_domain_hash = 19;
inline bool stage0::has_full_domain_hash() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stage0::set_has_full_domain_hash() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stage0::clear_has_full_domain_hash() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stage0::clear_full_domain_hash() {
  full_domain_hash_ = 0u;
  clear_has_full_domain_hash();
}
inline ::google::protobuf::uint32 stage0::full_domain_hash() const {
  // @@protoc_insertion_point(field_get:stage0.full_domain_hash)
  return full_domain_hash_;
}
inline void stage0::set_full_domain_hash(::google::protobuf::uint32 value) {
  set_has_full_domain_hash();
  full_domain_hash_ = value;
  // @@protoc_insertion_point(field_set:stage0.full_domain_hash)
}

// optional uint32 features_hash = 20;
inline bool stage0::has_features_hash() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stage0::set_has_features_hash() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stage0::clear_has_features_hash() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stage0::clear_features_hash() {
  features_hash_ = 0u;
  clear_has_features_hash();
}
inline ::google::protobuf::uint32 stage0::features_hash() const {
  // @@protoc_insertion_point(field_get:stage0.features_hash)
  return features_hash_;
}
inline void stage0::set_features_hash(::google::protobuf::uint32 value) {
  set_has_features_hash();
  features_hash_ = value;
  // @@protoc_insertion_point(field_set:stage0.features_hash)
}

// optional bool req_pos_mergable = 21;
inline bool stage0::has_req_pos_mergable() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stage0::set_has_req_pos_mergable() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stage0::clear_has_req_pos_mergable() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stage0::clear_req_pos_mergable() {
  req_pos_mergable_ = false;
  clear_has_req_pos_mergable();
}
inline bool stage0::req_pos_mergable() const {
  // @@protoc_insertion_point(field_get:stage0.req_pos_mergable)
  return req_pos_mergable_;
}
inline void stage0::set_req_pos_mergable(bool value) {
  set_has_req_pos_mergable();
  req_pos_mergable_ = value;
  // @@protoc_insertion_point(field_set:stage0.req_pos_mergable)
}

// -------------------------------------------------------------------

// resultHdr

// required uint32 error = 1;
inline bool resultHdr::has_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void resultHdr::set_has_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void resultHdr::clear_has_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void resultHdr::clear_error() {
  error_ = 0u;
  clear_has_error();
}
inline ::google::protobuf::uint32 resultHdr::error() const {
  // @@protoc_insertion_point(field_get:resultHdr.error)
  return error_;
}
inline void resultHdr::set_error(::google::protobuf::uint32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.error)
}

// required string error_mesage = 2;
inline bool resultHdr::has_error_mesage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void resultHdr::set_has_error_mesage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void resultHdr::clear_has_error_mesage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void resultHdr::clear_error_mesage() {
  error_mesage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_mesage();
}
inline const ::std::string& resultHdr::error_mesage() const {
  // @@protoc_insertion_point(field_get:resultHdr.error_mesage)
  return error_mesage_.GetNoArena();
}
inline void resultHdr::set_error_mesage(const ::std::string& value) {
  set_has_error_mesage();
  error_mesage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.error_mesage)
}
#if LANG_CXX11
inline void resultHdr::set_error_mesage(::std::string&& value) {
  set_has_error_mesage();
  error_mesage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.error_mesage)
}
#endif
inline void resultHdr::set_error_mesage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_mesage();
  error_mesage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.error_mesage)
}
inline void resultHdr::set_error_mesage(const char* value, size_t size) {
  set_has_error_mesage();
  error_mesage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.error_mesage)
}
inline ::std::string* resultHdr::mutable_error_mesage() {
  set_has_error_mesage();
  // @@protoc_insertion_point(field_mutable:resultHdr.error_mesage)
  return error_mesage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resultHdr::release_error_mesage() {
  // @@protoc_insertion_point(field_release:resultHdr.error_mesage)
  clear_has_error_mesage();
  return error_mesage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resultHdr::set_allocated_error_mesage(::std::string* error_mesage) {
  if (error_mesage != NULL) {
    set_has_error_mesage();
  } else {
    clear_has_error_mesage();
  }
  error_mesage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_mesage);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.error_mesage)
}

// required uint32 ndocs_groups = 3;
inline bool resultHdr::has_ndocs_groups() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void resultHdr::set_has_ndocs_groups() {
  _has_bits_[0] |= 0x00000200u;
}
inline void resultHdr::clear_has_ndocs_groups() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void resultHdr::clear_ndocs_groups() {
  ndocs_groups_ = 0u;
  clear_has_ndocs_groups();
}
inline ::google::protobuf::uint32 resultHdr::ndocs_groups() const {
  // @@protoc_insertion_point(field_get:resultHdr.ndocs_groups)
  return ndocs_groups_;
}
inline void resultHdr::set_ndocs_groups(::google::protobuf::uint32 value) {
  set_has_ndocs_groups();
  ndocs_groups_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.ndocs_groups)
}

// required uint32 ndocs_total = 4;
inline bool resultHdr::has_ndocs_total() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void resultHdr::set_has_ndocs_total() {
  _has_bits_[0] |= 0x00001000u;
}
inline void resultHdr::clear_has_ndocs_total() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void resultHdr::clear_ndocs_total() {
  ndocs_total_ = 0u;
  clear_has_ndocs_total();
}
inline ::google::protobuf::uint32 resultHdr::ndocs_total() const {
  // @@protoc_insertion_point(field_get:resultHdr.ndocs_total)
  return ndocs_total_;
}
inline void resultHdr::set_ndocs_total(::google::protobuf::uint32 value) {
  set_has_ndocs_total();
  ndocs_total_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.ndocs_total)
}

// required uint64 m3 = 5;
inline bool resultHdr::has_m3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void resultHdr::set_has_m3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void resultHdr::clear_has_m3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void resultHdr::clear_m3() {
  m3_ = GOOGLE_ULONGLONG(0);
  clear_has_m3();
}
inline ::google::protobuf::uint64 resultHdr::m3() const {
  // @@protoc_insertion_point(field_get:resultHdr.m3)
  return m3_;
}
inline void resultHdr::set_m3(::google::protobuf::uint64 value) {
  set_has_m3();
  m3_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.m3)
}

// required uint64 m4 = 6;
inline bool resultHdr::has_m4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void resultHdr::set_has_m4() {
  _has_bits_[0] |= 0x00000800u;
}
inline void resultHdr::clear_has_m4() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void resultHdr::clear_m4() {
  m4_ = GOOGLE_ULONGLONG(0);
  clear_has_m4();
}
inline ::google::protobuf::uint64 resultHdr::m4() const {
  // @@protoc_insertion_point(field_get:resultHdr.m4)
  return m4_;
}
inline void resultHdr::set_m4(::google::protobuf::uint64 value) {
  set_has_m4();
  m4_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.m4)
}

// required uint64 m5 = 7;
inline bool resultHdr::has_m5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void resultHdr::set_has_m5() {
  _has_bits_[0] |= 0x00004000u;
}
inline void resultHdr::clear_has_m5() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void resultHdr::clear_m5() {
  m5_ = GOOGLE_ULONGLONG(0);
  clear_has_m5();
}
inline ::google::protobuf::uint64 resultHdr::m5() const {
  // @@protoc_insertion_point(field_get:resultHdr.m5)
  return m5_;
}
inline void resultHdr::set_m5(::google::protobuf::uint64 value) {
  set_has_m5();
  m5_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.m5)
}

// required uint32 last_index = 8;
inline bool resultHdr::has_last_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void resultHdr::set_has_last_index() {
  _has_bits_[0] |= 0x00002000u;
}
inline void resultHdr::clear_has_last_index() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void resultHdr::clear_last_index() {
  last_index_ = 0u;
  clear_has_last_index();
}
inline ::google::protobuf::uint32 resultHdr::last_index() const {
  // @@protoc_insertion_point(field_get:resultHdr.last_index)
  return last_index_;
}
inline void resultHdr::set_last_index(::google::protobuf::uint32 value) {
  set_has_last_index();
  last_index_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.last_index)
}

// required uint32 max_docs_count = 9;
inline bool resultHdr::has_max_docs_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void resultHdr::set_has_max_docs_count() {
  _has_bits_[0] |= 0x00008000u;
}
inline void resultHdr::clear_has_max_docs_count() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void resultHdr::clear_max_docs_count() {
  max_docs_count_ = 0u;
  clear_has_max_docs_count();
}
inline ::google::protobuf::uint32 resultHdr::max_docs_count() const {
  // @@protoc_insertion_point(field_get:resultHdr.max_docs_count)
  return max_docs_count_;
}
inline void resultHdr::set_max_docs_count(::google::protobuf::uint32 value) {
  set_has_max_docs_count();
  max_docs_count_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.max_docs_count)
}

// required string sm_through = 10;
inline bool resultHdr::has_sm_through() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void resultHdr::set_has_sm_through() {
  _has_bits_[0] |= 0x00000002u;
}
inline void resultHdr::clear_has_sm_through() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void resultHdr::clear_sm_through() {
  sm_through_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sm_through();
}
inline const ::std::string& resultHdr::sm_through() const {
  // @@protoc_insertion_point(field_get:resultHdr.sm_through)
  return sm_through_.GetNoArena();
}
inline void resultHdr::set_sm_through(const ::std::string& value) {
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.sm_through)
}
#if LANG_CXX11
inline void resultHdr::set_sm_through(::std::string&& value) {
  set_has_sm_through();
  sm_through_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.sm_through)
}
#endif
inline void resultHdr::set_sm_through(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.sm_through)
}
inline void resultHdr::set_sm_through(const char* value, size_t size) {
  set_has_sm_through();
  sm_through_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.sm_through)
}
inline ::std::string* resultHdr::mutable_sm_through() {
  set_has_sm_through();
  // @@protoc_insertion_point(field_mutable:resultHdr.sm_through)
  return sm_through_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resultHdr::release_sm_through() {
  // @@protoc_insertion_point(field_release:resultHdr.sm_through)
  clear_has_sm_through();
  return sm_through_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resultHdr::set_allocated_sm_through(::std::string* sm_through) {
  if (sm_through != NULL) {
    set_has_sm_through();
  } else {
    clear_has_sm_through();
  }
  sm_through_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sm_through);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.sm_through)
}

// required string searcher_version = 11;
inline bool resultHdr::has_searcher_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void resultHdr::set_has_searcher_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void resultHdr::clear_has_searcher_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void resultHdr::clear_searcher_version() {
  searcher_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searcher_version();
}
inline const ::std::string& resultHdr::searcher_version() const {
  // @@protoc_insertion_point(field_get:resultHdr.searcher_version)
  return searcher_version_.GetNoArena();
}
inline void resultHdr::set_searcher_version(const ::std::string& value) {
  set_has_searcher_version();
  searcher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.searcher_version)
}
#if LANG_CXX11
inline void resultHdr::set_searcher_version(::std::string&& value) {
  set_has_searcher_version();
  searcher_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.searcher_version)
}
#endif
inline void resultHdr::set_searcher_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searcher_version();
  searcher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.searcher_version)
}
inline void resultHdr::set_searcher_version(const char* value, size_t size) {
  set_has_searcher_version();
  searcher_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.searcher_version)
}
inline ::std::string* resultHdr::mutable_searcher_version() {
  set_has_searcher_version();
  // @@protoc_insertion_point(field_mutable:resultHdr.searcher_version)
  return searcher_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resultHdr::release_searcher_version() {
  // @@protoc_insertion_point(field_release:resultHdr.searcher_version)
  clear_has_searcher_version();
  return searcher_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resultHdr::set_allocated_searcher_version(::std::string* searcher_version) {
  if (searcher_version != NULL) {
    set_has_searcher_version();
  } else {
    clear_has_searcher_version();
  }
  searcher_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searcher_version);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.searcher_version)
}

// required string microbases = 12;
inline bool resultHdr::has_microbases() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void resultHdr::set_has_microbases() {
  _has_bits_[0] |= 0x00000008u;
}
inline void resultHdr::clear_has_microbases() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void resultHdr::clear_microbases() {
  microbases_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_microbases();
}
inline const ::std::string& resultHdr::microbases() const {
  // @@protoc_insertion_point(field_get:resultHdr.microbases)
  return microbases_.GetNoArena();
}
inline void resultHdr::set_microbases(const ::std::string& value) {
  set_has_microbases();
  microbases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.microbases)
}
#if LANG_CXX11
inline void resultHdr::set_microbases(::std::string&& value) {
  set_has_microbases();
  microbases_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.microbases)
}
#endif
inline void resultHdr::set_microbases(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_microbases();
  microbases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.microbases)
}
inline void resultHdr::set_microbases(const char* value, size_t size) {
  set_has_microbases();
  microbases_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.microbases)
}
inline ::std::string* resultHdr::mutable_microbases() {
  set_has_microbases();
  // @@protoc_insertion_point(field_mutable:resultHdr.microbases)
  return microbases_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resultHdr::release_microbases() {
  // @@protoc_insertion_point(field_release:resultHdr.microbases)
  clear_has_microbases();
  return microbases_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resultHdr::set_allocated_microbases(::std::string* microbases) {
  if (microbases != NULL) {
    set_has_microbases();
  } else {
    clear_has_microbases();
  }
  microbases_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microbases);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.microbases)
}

// required uint32 version_hash = 13;
inline bool resultHdr::has_version_hash() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void resultHdr::set_has_version_hash() {
  _has_bits_[0] |= 0x00010000u;
}
inline void resultHdr::clear_has_version_hash() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void resultHdr::clear_version_hash() {
  version_hash_ = 0u;
  clear_has_version_hash();
}
inline ::google::protobuf::uint32 resultHdr::version_hash() const {
  // @@protoc_insertion_point(field_get:resultHdr.version_hash)
  return version_hash_;
}
inline void resultHdr::set_version_hash(::google::protobuf::uint32 value) {
  set_has_version_hash();
  version_hash_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.version_hash)
}

// required uint32 experiment_id = 14;
inline bool resultHdr::has_experiment_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void resultHdr::set_has_experiment_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void resultHdr::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void resultHdr::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
inline ::google::protobuf::uint32 resultHdr::experiment_id() const {
  // @@protoc_insertion_point(field_get:resultHdr.experiment_id)
  return experiment_id_;
}
inline void resultHdr::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.experiment_id)
}

// required string experiment_interleaving_type = 15;
inline bool resultHdr::has_experiment_interleaving_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void resultHdr::set_has_experiment_interleaving_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void resultHdr::clear_has_experiment_interleaving_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void resultHdr::clear_experiment_interleaving_type() {
  experiment_interleaving_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experiment_interleaving_type();
}
inline const ::std::string& resultHdr::experiment_interleaving_type() const {
  // @@protoc_insertion_point(field_get:resultHdr.experiment_interleaving_type)
  return experiment_interleaving_type_.GetNoArena();
}
inline void resultHdr::set_experiment_interleaving_type(const ::std::string& value) {
  set_has_experiment_interleaving_type();
  experiment_interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.experiment_interleaving_type)
}
#if LANG_CXX11
inline void resultHdr::set_experiment_interleaving_type(::std::string&& value) {
  set_has_experiment_interleaving_type();
  experiment_interleaving_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.experiment_interleaving_type)
}
#endif
inline void resultHdr::set_experiment_interleaving_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experiment_interleaving_type();
  experiment_interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.experiment_interleaving_type)
}
inline void resultHdr::set_experiment_interleaving_type(const char* value, size_t size) {
  set_has_experiment_interleaving_type();
  experiment_interleaving_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.experiment_interleaving_type)
}
inline ::std::string* resultHdr::mutable_experiment_interleaving_type() {
  set_has_experiment_interleaving_type();
  // @@protoc_insertion_point(field_mutable:resultHdr.experiment_interleaving_type)
  return experiment_interleaving_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resultHdr::release_experiment_interleaving_type() {
  // @@protoc_insertion_point(field_release:resultHdr.experiment_interleaving_type)
  clear_has_experiment_interleaving_type();
  return experiment_interleaving_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resultHdr::set_allocated_experiment_interleaving_type(::std::string* experiment_interleaving_type) {
  if (experiment_interleaving_type != NULL) {
    set_has_experiment_interleaving_type();
  } else {
    clear_has_experiment_interleaving_type();
  }
  experiment_interleaving_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experiment_interleaving_type);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.experiment_interleaving_type)
}

// required string experiment_essr_source_type = 16;
inline bool resultHdr::has_experiment_essr_source_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void resultHdr::set_has_experiment_essr_source_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void resultHdr::clear_has_experiment_essr_source_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void resultHdr::clear_experiment_essr_source_type() {
  experiment_essr_source_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experiment_essr_source_type();
}
inline const ::std::string& resultHdr::experiment_essr_source_type() const {
  // @@protoc_insertion_point(field_get:resultHdr.experiment_essr_source_type)
  return experiment_essr_source_type_.GetNoArena();
}
inline void resultHdr::set_experiment_essr_source_type(const ::std::string& value) {
  set_has_experiment_essr_source_type();
  experiment_essr_source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.experiment_essr_source_type)
}
#if LANG_CXX11
inline void resultHdr::set_experiment_essr_source_type(::std::string&& value) {
  set_has_experiment_essr_source_type();
  experiment_essr_source_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.experiment_essr_source_type)
}
#endif
inline void resultHdr::set_experiment_essr_source_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experiment_essr_source_type();
  experiment_essr_source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.experiment_essr_source_type)
}
inline void resultHdr::set_experiment_essr_source_type(const char* value, size_t size) {
  set_has_experiment_essr_source_type();
  experiment_essr_source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.experiment_essr_source_type)
}
inline ::std::string* resultHdr::mutable_experiment_essr_source_type() {
  set_has_experiment_essr_source_type();
  // @@protoc_insertion_point(field_mutable:resultHdr.experiment_essr_source_type)
  return experiment_essr_source_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resultHdr::release_experiment_essr_source_type() {
  // @@protoc_insertion_point(field_release:resultHdr.experiment_essr_source_type)
  clear_has_experiment_essr_source_type();
  return experiment_essr_source_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resultHdr::set_allocated_experiment_essr_source_type(::std::string* experiment_essr_source_type) {
  if (experiment_essr_source_type != NULL) {
    set_has_experiment_essr_source_type();
  } else {
    clear_has_experiment_essr_source_type();
  }
  experiment_essr_source_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experiment_essr_source_type);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.experiment_essr_source_type)
}

// required bytes trait_holder_and_webstat = 17;
inline bool resultHdr::has_trait_holder_and_webstat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void resultHdr::set_has_trait_holder_and_webstat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void resultHdr::clear_has_trait_holder_and_webstat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void resultHdr::clear_trait_holder_and_webstat() {
  trait_holder_and_webstat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trait_holder_and_webstat();
}
inline const ::std::string& resultHdr::trait_holder_and_webstat() const {
  // @@protoc_insertion_point(field_get:resultHdr.trait_holder_and_webstat)
  return trait_holder_and_webstat_.GetNoArena();
}
inline void resultHdr::set_trait_holder_and_webstat(const ::std::string& value) {
  set_has_trait_holder_and_webstat();
  trait_holder_and_webstat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resultHdr.trait_holder_and_webstat)
}
#if LANG_CXX11
inline void resultHdr::set_trait_holder_and_webstat(::std::string&& value) {
  set_has_trait_holder_and_webstat();
  trait_holder_and_webstat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resultHdr.trait_holder_and_webstat)
}
#endif
inline void resultHdr::set_trait_holder_and_webstat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trait_holder_and_webstat();
  trait_holder_and_webstat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resultHdr.trait_holder_and_webstat)
}
inline void resultHdr::set_trait_holder_and_webstat(const void* value, size_t size) {
  set_has_trait_holder_and_webstat();
  trait_holder_and_webstat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resultHdr.trait_holder_and_webstat)
}
inline ::std::string* resultHdr::mutable_trait_holder_and_webstat() {
  set_has_trait_holder_and_webstat();
  // @@protoc_insertion_point(field_mutable:resultHdr.trait_holder_and_webstat)
  return trait_holder_and_webstat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resultHdr::release_trait_holder_and_webstat() {
  // @@protoc_insertion_point(field_release:resultHdr.trait_holder_and_webstat)
  clear_has_trait_holder_and_webstat();
  return trait_holder_and_webstat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resultHdr::set_allocated_trait_holder_and_webstat(::std::string* trait_holder_and_webstat) {
  if (trait_holder_and_webstat != NULL) {
    set_has_trait_holder_and_webstat();
  } else {
    clear_has_trait_holder_and_webstat();
  }
  trait_holder_and_webstat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trait_holder_and_webstat);
  // @@protoc_insertion_point(field_set_allocated:resultHdr.trait_holder_and_webstat)
}

// optional bool domain_group_ooo = 18;
inline bool resultHdr::has_domain_group_ooo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void resultHdr::set_has_domain_group_ooo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void resultHdr::clear_has_domain_group_ooo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void resultHdr::clear_domain_group_ooo() {
  domain_group_ooo_ = false;
  clear_has_domain_group_ooo();
}
inline bool resultHdr::domain_group_ooo() const {
  // @@protoc_insertion_point(field_get:resultHdr.domain_group_ooo)
  return domain_group_ooo_;
}
inline void resultHdr::set_domain_group_ooo(bool value) {
  set_has_domain_group_ooo();
  domain_group_ooo_ = value;
  // @@protoc_insertion_point(field_set:resultHdr.domain_group_ooo)
}

// optional .backends_quality.pb.BackendsQuality backends_quality = 19;
inline bool resultHdr::has_backends_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void resultHdr::set_has_backends_quality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void resultHdr::clear_has_backends_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void resultHdr::clear_backends_quality() {
  if (backends_quality_ != NULL) backends_quality_->::backends_quality::pb::BackendsQuality::Clear();
  clear_has_backends_quality();
}
inline const ::backends_quality::pb::BackendsQuality& resultHdr::backends_quality() const {
  const ::backends_quality::pb::BackendsQuality* p = backends_quality_;
  // @@protoc_insertion_point(field_get:resultHdr.backends_quality)
  return p != NULL ? *p : *reinterpret_cast<const ::backends_quality::pb::BackendsQuality*>(
      &::backends_quality::pb::_BackendsQuality_default_instance_);
}
inline ::backends_quality::pb::BackendsQuality* resultHdr::mutable_backends_quality() {
  set_has_backends_quality();
  if (backends_quality_ == NULL) {
    backends_quality_ = new ::backends_quality::pb::BackendsQuality;
  }
  // @@protoc_insertion_point(field_mutable:resultHdr.backends_quality)
  return backends_quality_;
}
inline ::backends_quality::pb::BackendsQuality* resultHdr::release_backends_quality() {
  // @@protoc_insertion_point(field_release:resultHdr.backends_quality)
  clear_has_backends_quality();
  ::backends_quality::pb::BackendsQuality* temp = backends_quality_;
  backends_quality_ = NULL;
  return temp;
}
inline void resultHdr::set_allocated_backends_quality(::backends_quality::pb::BackendsQuality* backends_quality) {
  delete backends_quality_;
  backends_quality_ = backends_quality;
  if (backends_quality) {
    set_has_backends_quality();
  } else {
    clear_has_backends_quality();
  }
  // @@protoc_insertion_point(field_set_allocated:resultHdr.backends_quality)
}

// -------------------------------------------------------------------

// DocInfo

// required .BackendId backend_id = 1;
inline bool DocInfo::has_backend_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocInfo::set_has_backend_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocInfo::clear_has_backend_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocInfo::clear_backend_id() {
  if (backend_id_ != NULL) backend_id_->::BackendId::Clear();
  clear_has_backend_id();
}
inline const ::BackendId& DocInfo::backend_id() const {
  const ::BackendId* p = backend_id_;
  // @@protoc_insertion_point(field_get:DocInfo.backend_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BackendId*>(
      &::_BackendId_default_instance_);
}
inline ::BackendId* DocInfo::mutable_backend_id() {
  set_has_backend_id();
  if (backend_id_ == NULL) {
    backend_id_ = new ::BackendId;
  }
  // @@protoc_insertion_point(field_mutable:DocInfo.backend_id)
  return backend_id_;
}
inline ::BackendId* DocInfo::release_backend_id() {
  // @@protoc_insertion_point(field_release:DocInfo.backend_id)
  clear_has_backend_id();
  ::BackendId* temp = backend_id_;
  backend_id_ = NULL;
  return temp;
}
inline void DocInfo::set_allocated_backend_id(::BackendId* backend_id) {
  delete backend_id_;
  backend_id_ = backend_id;
  if (backend_id) {
    set_has_backend_id();
  } else {
    clear_has_backend_id();
  }
  // @@protoc_insertion_point(field_set_allocated:DocInfo.backend_id)
}

// required .resultHdr hdr = 2;
inline bool DocInfo::has_hdr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocInfo::set_has_hdr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocInfo::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocInfo::clear_hdr() {
  if (hdr_ != NULL) hdr_->::resultHdr::Clear();
  clear_has_hdr();
}
inline const ::resultHdr& DocInfo::hdr() const {
  const ::resultHdr* p = hdr_;
  // @@protoc_insertion_point(field_get:DocInfo.hdr)
  return p != NULL ? *p : *reinterpret_cast<const ::resultHdr*>(
      &::_resultHdr_default_instance_);
}
inline ::resultHdr* DocInfo::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::resultHdr;
  }
  // @@protoc_insertion_point(field_mutable:DocInfo.hdr)
  return hdr_;
}
inline ::resultHdr* DocInfo::release_hdr() {
  // @@protoc_insertion_point(field_release:DocInfo.hdr)
  clear_has_hdr();
  ::resultHdr* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
inline void DocInfo::set_allocated_hdr(::resultHdr* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:DocInfo.hdr)
}

// repeated .stage0 docs = 3;
inline int DocInfo::docs_size() const {
  return docs_.size();
}
inline void DocInfo::clear_docs() {
  docs_.Clear();
}
inline const ::stage0& DocInfo::docs(int index) const {
  // @@protoc_insertion_point(field_get:DocInfo.docs)
  return docs_.Get(index);
}
inline ::stage0* DocInfo::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:DocInfo.docs)
  return docs_.Mutable(index);
}
inline ::stage0* DocInfo::add_docs() {
  // @@protoc_insertion_point(field_add:DocInfo.docs)
  return docs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::stage0 >*
DocInfo::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:DocInfo.docs)
  return &docs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::stage0 >&
DocInfo::docs() const {
  // @@protoc_insertion_point(field_list:DocInfo.docs)
  return docs_;
}

// -------------------------------------------------------------------

// Stage0Info

// repeated .DocInfo docs = 1;
inline int Stage0Info::docs_size() const {
  return docs_.size();
}
inline void Stage0Info::clear_docs() {
  docs_.Clear();
}
inline const ::DocInfo& Stage0Info::docs(int index) const {
  // @@protoc_insertion_point(field_get:Stage0Info.docs)
  return docs_.Get(index);
}
inline ::DocInfo* Stage0Info::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:Stage0Info.docs)
  return docs_.Mutable(index);
}
inline ::DocInfo* Stage0Info::add_docs() {
  // @@protoc_insertion_point(field_add:Stage0Info.docs)
  return docs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DocInfo >*
Stage0Info::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:Stage0Info.docs)
  return &docs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DocInfo >&
Stage0Info::docs() const {
  // @@protoc_insertion_point(field_list:Stage0Info.docs)
  return docs_;
}

// optional uint32 backends_list_hash = 2;
inline bool Stage0Info::has_backends_list_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stage0Info::set_has_backends_list_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stage0Info::clear_has_backends_list_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stage0Info::clear_backends_list_hash() {
  backends_list_hash_ = 0u;
  clear_has_backends_list_hash();
}
inline ::google::protobuf::uint32 Stage0Info::backends_list_hash() const {
  // @@protoc_insertion_point(field_get:Stage0Info.backends_list_hash)
  return backends_list_hash_;
}
inline void Stage0Info::set_backends_list_hash(::google::protobuf::uint32 value) {
  set_has_backends_list_hash();
  backends_list_hash_ = value;
  // @@protoc_insertion_point(field_set:Stage0Info.backends_list_hash)
}

// optional uint32 sm_revision_hash = 3;
inline bool Stage0Info::has_sm_revision_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stage0Info::set_has_sm_revision_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stage0Info::clear_has_sm_revision_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stage0Info::clear_sm_revision_hash() {
  sm_revision_hash_ = 0u;
  clear_has_sm_revision_hash();
}
inline ::google::protobuf::uint32 Stage0Info::sm_revision_hash() const {
  // @@protoc_insertion_point(field_get:Stage0Info.sm_revision_hash)
  return sm_revision_hash_;
}
inline void Stage0Info::set_sm_revision_hash(::google::protobuf::uint32 value) {
  set_has_sm_revision_hash();
  sm_revision_hash_ = value;
  // @@protoc_insertion_point(field_set:Stage0Info.sm_revision_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stage0_5fcache_2eproto__INCLUDED
