// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stepan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stepan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stepan {
namespace pb {
class CosmoCacheCursorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoCacheCursor>
     _instance;
} _CosmoCacheCursor_default_instance_;
class SearchCursorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SearchCursor>
     _instance;
} _SearchCursor_default_instance_;
class UserSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserSettings>
     _instance;
} _UserSettings_default_instance_;
class StepanPpnInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StepanPpnInfo>
     _instance;
} _StepanPpnInfo_default_instance_;
class SessionStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SessionState>
     _instance;
} _SessionState_default_instance_;
class ExternalIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExternalId>
     _instance;
} _ExternalId_default_instance_;
class SocdemInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SocdemInfo>
     _instance;
} _SocdemInfo_default_instance_;
class UserAccountDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserAccount>
     _instance;
} _UserAccount_default_instance_;

namespace protobuf_stepan_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCacheCursor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCacheCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCacheCursor, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCacheCursor, record_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCursor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCursor, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchCursor, pos_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSettings, selected_category_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSettings, bookmarked_doc_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSettings, excluded_source_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSettings, included_source_ids_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPpnInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPpnInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPpnInfo, scroll_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPpnInfo, db_update_ts_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, cosmo_cache_cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, search_cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, user_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, last_queried_categories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, bookmark_list_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, promo_nut_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, last_query_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, stepan_ppn_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, reco_session_id_),
  6,
  2,
  3,
  4,
  8,
  10,
  9,
  7,
  0,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalId, id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemInfo, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemInfo, birthday_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccount, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccount, user_creds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccount, user_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccount, socdem_info_),
  2,
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(CosmoCacheCursor)},
  { 9, 16, sizeof(SearchCursor)},
  { 18, 27, sizeof(UserSettings)},
  { 31, 38, sizeof(StepanPpnInfo)},
  { 40, 56, sizeof(SessionState)},
  { 67, 74, sizeof(ExternalId)},
  { 76, 83, sizeof(SocdemInfo)},
  { 85, 94, sizeof(UserAccount)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoCacheCursor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchCursor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StepanPpnInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExternalId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SocdemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserAccount_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "stepan.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CosmoCacheCursor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoCacheCursor_default_instance_);_SearchCursor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SearchCursor_default_instance_);_UserSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserSettings_default_instance_);_StepanPpnInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StepanPpnInfo_default_instance_);_SessionState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SessionState_default_instance_);_ExternalId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExternalId_default_instance_);_SocdemInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SocdemInfo_default_instance_);_UserAccount_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserAccount_default_instance_);_SessionState_default_instance_._instance.get_mutable()->cosmo_cache_cursor_ = const_cast< ::stepan::pb::CosmoCacheCursor*>(
      ::stepan::pb::CosmoCacheCursor::internal_default_instance());
  _SessionState_default_instance_._instance.get_mutable()->search_cursor_ = const_cast< ::stepan::pb::SearchCursor*>(
      ::stepan::pb::SearchCursor::internal_default_instance());
  _SessionState_default_instance_._instance.get_mutable()->user_settings_ = const_cast< ::stepan::pb::UserSettings*>(
      ::stepan::pb::UserSettings::internal_default_instance());
  _SessionState_default_instance_._instance.get_mutable()->stepan_ppn_info_ = const_cast< ::stepan::pb::StepanPpnInfo*>(
      ::stepan::pb::StepanPpnInfo::internal_default_instance());
  _UserAccount_default_instance_._instance.get_mutable()->user_settings_ = const_cast< ::stepan::pb::UserSettings*>(
      ::stepan::pb::UserSettings::internal_default_instance());
  _UserAccount_default_instance_._instance.get_mutable()->socdem_info_ = const_cast< ::stepan::pb::SocdemInfo*>(
      ::stepan::pb::SocdemInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014stepan.proto\022\tstepan.pb\"2\n\020CosmoCacheC"
      "ursor\022\013\n\003pos\030\001 \002(\005\022\021\n\trecord_id\030\002 \002(\t\"*\n"
      "\014SearchCursor\022\r\n\005query\030\001 \002(\t\022\013\n\003pos\030\002 \002("
      "\005\"\223\001\n\014UserSettings\022!\n\025selected_category_"
      "ids\030\001 \003(\004B\002\020\001\022\036\n\022bookmarked_doc_ids\030\002 \003("
      "\004B\002\020\001\022\037\n\023excluded_source_ids\030\003 \003(\004B\002\020\001\022\037"
      "\n\023included_source_ids\030\004 \003(\004B\002\020\001\"D\n\rStepa"
      "nPpnInfo\022\032\n\017scroll_position\030\001 \002(\005:\0010\022\027\n\014"
      "db_update_ts\030\002 \002(\004:\0010\"\213\003\n\014SessionState\022\017"
      "\n\007user_id\030\001 \002(\004\0227\n\022cosmo_cache_cursor\030\002 "
      "\001(\0132\033.stepan.pb.CosmoCacheCursor\022.\n\rsear"
      "ch_cursor\030\003 \001(\0132\027.stepan.pb.SearchCursor"
      "\022.\n\ruser_settings\030\004 \001(\0132\027.stepan.pb.User"
      "Settings\022\020\n\005flags\030\005 \001(\005:\0010\022\"\n\027last_queri"
      "ed_categories\030d \001(\004:\0010\022\034\n\021bookmark_list_"
      "pos\030e \001(\005:\0010\022\030\n\rpromo_nut_pos\030f \001(\005:\0010\022\027"
      "\n\017last_query_hash\030g \001(\t\0221\n\017stepan_ppn_in"
      "fo\030h \001(\0132\030.stepan.pb.StepanPpnInfo\022\027\n\017re"
      "co_session_id\030i \001(\t\"&\n\nExternalId\022\014\n\004typ"
      "e\030\001 \002(\005\022\n\n\002id\030\002 \002(\t\".\n\nSocdemInfo\022\016\n\006gen"
      "der\030\001 \001(\010\022\020\n\010birthday\030\002 \001(\003\"\245\001\n\013UserAcco"
      "unt\022\017\n\007user_id\030\001 \002(\004\022)\n\nuser_creds\030\002 \003(\013"
      "2\025.stepan.pb.ExternalId\022.\n\ruser_settings"
      "\030\003 \001(\0132\027.stepan.pb.UserSettings\022*\n\013socde"
      "m_info\030\004 \001(\0132\025.stepan.pb.SocdemInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 995);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stepan.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_stepan_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoCacheCursor::kPosFieldNumber;
const int CosmoCacheCursor::kRecordIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoCacheCursor::CosmoCacheCursor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stepan.pb.CosmoCacheCursor)
}
CosmoCacheCursor::CosmoCacheCursor(const CosmoCacheCursor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_id()) {
    record_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_id_);
  }
  pos_ = from.pos_;
  // @@protoc_insertion_point(copy_constructor:stepan.pb.CosmoCacheCursor)
}

void CosmoCacheCursor::SharedCtor() {
  _cached_size_ = 0;
  record_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0;
}

CosmoCacheCursor::~CosmoCacheCursor() {
  // @@protoc_insertion_point(destructor:stepan.pb.CosmoCacheCursor)
  SharedDtor();
}

void CosmoCacheCursor::SharedDtor() {
  record_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosmoCacheCursor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoCacheCursor::descriptor() {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoCacheCursor& CosmoCacheCursor::default_instance() {
  protobuf_stepan_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoCacheCursor* CosmoCacheCursor::New(::google::protobuf::Arena* arena) const {
  CosmoCacheCursor* n = new CosmoCacheCursor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoCacheCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:stepan.pb.CosmoCacheCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_record_id()) {
    GOOGLE_DCHECK(!record_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*record_id_.UnsafeRawStringPointer())->clear();
  }
  pos_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosmoCacheCursor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stepan.pb.CosmoCacheCursor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string record_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->record_id().data(), static_cast<int>(this->record_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stepan.pb.CosmoCacheCursor.record_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stepan.pb.CosmoCacheCursor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stepan.pb.CosmoCacheCursor)
  return false;
#undef DO_
}

void CosmoCacheCursor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stepan.pb.CosmoCacheCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pos = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required string record_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_id().data(), static_cast<int>(this->record_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.CosmoCacheCursor.record_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->record_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stepan.pb.CosmoCacheCursor)
}

::google::protobuf::uint8* CosmoCacheCursor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stepan.pb.CosmoCacheCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pos = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required string record_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_id().data(), static_cast<int>(this->record_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.CosmoCacheCursor.record_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->record_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stepan.pb.CosmoCacheCursor)
  return target;
}

size_t CosmoCacheCursor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:stepan.pb.CosmoCacheCursor)
  size_t total_size = 0;

  if (has_record_id()) {
    // required string record_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record_id());
  }

  if (has_pos()) {
    // required int32 pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  return total_size;
}
size_t CosmoCacheCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stepan.pb.CosmoCacheCursor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string record_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record_id());

    // required int32 pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoCacheCursor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stepan.pb.CosmoCacheCursor)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoCacheCursor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoCacheCursor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stepan.pb.CosmoCacheCursor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stepan.pb.CosmoCacheCursor)
    MergeFrom(*source);
  }
}

void CosmoCacheCursor::MergeFrom(const CosmoCacheCursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stepan.pb.CosmoCacheCursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_id();
      record_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      pos_ = from.pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CosmoCacheCursor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stepan.pb.CosmoCacheCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoCacheCursor::CopyFrom(const CosmoCacheCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stepan.pb.CosmoCacheCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoCacheCursor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CosmoCacheCursor::Swap(CosmoCacheCursor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoCacheCursor::InternalSwap(CosmoCacheCursor* other) {
  using std::swap;
  record_id_.Swap(&other->record_id_);
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoCacheCursor::GetMetadata() const {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoCacheCursor

// required int32 pos = 1;
bool CosmoCacheCursor::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CosmoCacheCursor::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void CosmoCacheCursor::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void CosmoCacheCursor::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
::google::protobuf::int32 CosmoCacheCursor::pos() const {
  // @@protoc_insertion_point(field_get:stepan.pb.CosmoCacheCursor.pos)
  return pos_;
}
void CosmoCacheCursor::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.CosmoCacheCursor.pos)
}

// required string record_id = 2;
bool CosmoCacheCursor::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CosmoCacheCursor::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CosmoCacheCursor::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CosmoCacheCursor::clear_record_id() {
  record_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_id();
}
const ::std::string& CosmoCacheCursor::record_id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.CosmoCacheCursor.record_id)
  return record_id_.GetNoArena();
}
void CosmoCacheCursor::set_record_id(const ::std::string& value) {
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.CosmoCacheCursor.record_id)
}
#if LANG_CXX11
void CosmoCacheCursor::set_record_id(::std::string&& value) {
  set_has_record_id();
  record_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.CosmoCacheCursor.record_id)
}
#endif
void CosmoCacheCursor::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.CosmoCacheCursor.record_id)
}
void CosmoCacheCursor::set_record_id(const char* value, size_t size) {
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.CosmoCacheCursor.record_id)
}
::std::string* CosmoCacheCursor::mutable_record_id() {
  set_has_record_id();
  // @@protoc_insertion_point(field_mutable:stepan.pb.CosmoCacheCursor.record_id)
  return record_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmoCacheCursor::release_record_id() {
  // @@protoc_insertion_point(field_release:stepan.pb.CosmoCacheCursor.record_id)
  clear_has_record_id();
  return record_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmoCacheCursor::set_allocated_record_id(::std::string* record_id) {
  if (record_id != NULL) {
    set_has_record_id();
  } else {
    clear_has_record_id();
  }
  record_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_id);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.CosmoCacheCursor.record_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchCursor::kQueryFieldNumber;
const int SearchCursor::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchCursor::SearchCursor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stepan.pb.SearchCursor)
}
SearchCursor::SearchCursor(const SearchCursor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  pos_ = from.pos_;
  // @@protoc_insertion_point(copy_constructor:stepan.pb.SearchCursor)
}

void SearchCursor::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0;
}

SearchCursor::~SearchCursor() {
  // @@protoc_insertion_point(destructor:stepan.pb.SearchCursor)
  SharedDtor();
}

void SearchCursor::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchCursor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchCursor::descriptor() {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchCursor& SearchCursor::default_instance() {
  protobuf_stepan_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchCursor* SearchCursor::New(::google::protobuf::Arena* arena) const {
  SearchCursor* n = new SearchCursor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:stepan.pb.SearchCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_query()) {
    GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_.UnsafeRawStringPointer())->clear();
  }
  pos_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchCursor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stepan.pb.SearchCursor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stepan.pb.SearchCursor.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stepan.pb.SearchCursor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stepan.pb.SearchCursor)
  return false;
#undef DO_
}

void SearchCursor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stepan.pb.SearchCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.SearchCursor.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // required int32 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stepan.pb.SearchCursor)
}

::google::protobuf::uint8* SearchCursor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stepan.pb.SearchCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.SearchCursor.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required int32 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stepan.pb.SearchCursor)
  return target;
}

size_t SearchCursor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:stepan.pb.SearchCursor)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_pos()) {
    // required int32 pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  return total_size;
}
size_t SearchCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stepan.pb.SearchCursor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required int32 pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchCursor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stepan.pb.SearchCursor)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchCursor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchCursor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stepan.pb.SearchCursor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stepan.pb.SearchCursor)
    MergeFrom(*source);
  }
}

void SearchCursor::MergeFrom(const SearchCursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stepan.pb.SearchCursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      pos_ = from.pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchCursor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stepan.pb.SearchCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchCursor::CopyFrom(const SearchCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stepan.pb.SearchCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchCursor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SearchCursor::Swap(SearchCursor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchCursor::InternalSwap(SearchCursor* other) {
  using std::swap;
  query_.Swap(&other->query_);
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchCursor::GetMetadata() const {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchCursor

// required string query = 1;
bool SearchCursor::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchCursor::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchCursor::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchCursor::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& SearchCursor::query() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SearchCursor.query)
  return query_.GetNoArena();
}
void SearchCursor::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.SearchCursor.query)
}
#if LANG_CXX11
void SearchCursor::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.SearchCursor.query)
}
#endif
void SearchCursor::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.SearchCursor.query)
}
void SearchCursor::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.SearchCursor.query)
}
::std::string* SearchCursor::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:stepan.pb.SearchCursor.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchCursor::release_query() {
  // @@protoc_insertion_point(field_release:stepan.pb.SearchCursor.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchCursor::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SearchCursor.query)
}

// required int32 pos = 2;
bool SearchCursor::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchCursor::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchCursor::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchCursor::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
::google::protobuf::int32 SearchCursor::pos() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SearchCursor.pos)
  return pos_;
}
void SearchCursor::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SearchCursor.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSettings::kSelectedCategoryIdsFieldNumber;
const int UserSettings::kBookmarkedDocIdsFieldNumber;
const int UserSettings::kExcludedSourceIdsFieldNumber;
const int UserSettings::kIncludedSourceIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSettings::UserSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stepan.pb.UserSettings)
}
UserSettings::UserSettings(const UserSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      selected_category_ids_(from.selected_category_ids_),
      bookmarked_doc_ids_(from.bookmarked_doc_ids_),
      excluded_source_ids_(from.excluded_source_ids_),
      included_source_ids_(from.included_source_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stepan.pb.UserSettings)
}

void UserSettings::SharedCtor() {
  _cached_size_ = 0;
}

UserSettings::~UserSettings() {
  // @@protoc_insertion_point(destructor:stepan.pb.UserSettings)
  SharedDtor();
}

void UserSettings::SharedDtor() {
}

void UserSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSettings::descriptor() {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserSettings& UserSettings::default_instance() {
  protobuf_stepan_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserSettings* UserSettings::New(::google::protobuf::Arena* arena) const {
  UserSettings* n = new UserSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:stepan.pb.UserSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_category_ids_.Clear();
  bookmarked_doc_ids_.Clear();
  excluded_source_ids_.Clear();
  included_source_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stepan.pb.UserSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 selected_category_ids = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_selected_category_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_selected_category_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bookmarked_doc_ids = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bookmarked_doc_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_bookmarked_doc_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 excluded_source_ids = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_excluded_source_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_excluded_source_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 included_source_ids = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_included_source_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34u, input, this->mutable_included_source_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stepan.pb.UserSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stepan.pb.UserSettings)
  return false;
#undef DO_
}

void UserSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stepan.pb.UserSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 selected_category_ids = 1 [packed = true];
  if (this->selected_category_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _selected_category_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->selected_category_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->selected_category_ids(i), output);
  }

  // repeated uint64 bookmarked_doc_ids = 2 [packed = true];
  if (this->bookmarked_doc_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bookmarked_doc_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->bookmarked_doc_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->bookmarked_doc_ids(i), output);
  }

  // repeated uint64 excluded_source_ids = 3 [packed = true];
  if (this->excluded_source_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _excluded_source_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->excluded_source_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->excluded_source_ids(i), output);
  }

  // repeated uint64 included_source_ids = 4 [packed = true];
  if (this->included_source_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _included_source_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->included_source_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->included_source_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stepan.pb.UserSettings)
}

::google::protobuf::uint8* UserSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stepan.pb.UserSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 selected_category_ids = 1 [packed = true];
  if (this->selected_category_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _selected_category_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->selected_category_ids_, target);
  }

  // repeated uint64 bookmarked_doc_ids = 2 [packed = true];
  if (this->bookmarked_doc_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _bookmarked_doc_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->bookmarked_doc_ids_, target);
  }

  // repeated uint64 excluded_source_ids = 3 [packed = true];
  if (this->excluded_source_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _excluded_source_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->excluded_source_ids_, target);
  }

  // repeated uint64 included_source_ids = 4 [packed = true];
  if (this->included_source_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _included_source_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->included_source_ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stepan.pb.UserSettings)
  return target;
}

size_t UserSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stepan.pb.UserSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 selected_category_ids = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->selected_category_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _selected_category_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 bookmarked_doc_ids = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bookmarked_doc_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bookmarked_doc_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 excluded_source_ids = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->excluded_source_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_source_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 included_source_ids = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->included_source_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _included_source_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stepan.pb.UserSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stepan.pb.UserSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stepan.pb.UserSettings)
    MergeFrom(*source);
  }
}

void UserSettings::MergeFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stepan.pb.UserSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_category_ids_.MergeFrom(from.selected_category_ids_);
  bookmarked_doc_ids_.MergeFrom(from.bookmarked_doc_ids_);
  excluded_source_ids_.MergeFrom(from.excluded_source_ids_);
  included_source_ids_.MergeFrom(from.included_source_ids_);
}

void UserSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stepan.pb.UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSettings::CopyFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stepan.pb.UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettings::IsInitialized() const {
  return true;
}

void UserSettings::Swap(UserSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserSettings::InternalSwap(UserSettings* other) {
  using std::swap;
  selected_category_ids_.InternalSwap(&other->selected_category_ids_);
  bookmarked_doc_ids_.InternalSwap(&other->bookmarked_doc_ids_);
  excluded_source_ids_.InternalSwap(&other->excluded_source_ids_);
  included_source_ids_.InternalSwap(&other->included_source_ids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserSettings::GetMetadata() const {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserSettings

// repeated uint64 selected_category_ids = 1 [packed = true];
int UserSettings::selected_category_ids_size() const {
  return selected_category_ids_.size();
}
void UserSettings::clear_selected_category_ids() {
  selected_category_ids_.Clear();
}
::google::protobuf::uint64 UserSettings::selected_category_ids(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserSettings.selected_category_ids)
  return selected_category_ids_.Get(index);
}
void UserSettings::set_selected_category_ids(int index, ::google::protobuf::uint64 value) {
  selected_category_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stepan.pb.UserSettings.selected_category_ids)
}
void UserSettings::add_selected_category_ids(::google::protobuf::uint64 value) {
  selected_category_ids_.Add(value);
  // @@protoc_insertion_point(field_add:stepan.pb.UserSettings.selected_category_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserSettings::selected_category_ids() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserSettings.selected_category_ids)
  return selected_category_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserSettings::mutable_selected_category_ids() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserSettings.selected_category_ids)
  return &selected_category_ids_;
}

// repeated uint64 bookmarked_doc_ids = 2 [packed = true];
int UserSettings::bookmarked_doc_ids_size() const {
  return bookmarked_doc_ids_.size();
}
void UserSettings::clear_bookmarked_doc_ids() {
  bookmarked_doc_ids_.Clear();
}
::google::protobuf::uint64 UserSettings::bookmarked_doc_ids(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserSettings.bookmarked_doc_ids)
  return bookmarked_doc_ids_.Get(index);
}
void UserSettings::set_bookmarked_doc_ids(int index, ::google::protobuf::uint64 value) {
  bookmarked_doc_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stepan.pb.UserSettings.bookmarked_doc_ids)
}
void UserSettings::add_bookmarked_doc_ids(::google::protobuf::uint64 value) {
  bookmarked_doc_ids_.Add(value);
  // @@protoc_insertion_point(field_add:stepan.pb.UserSettings.bookmarked_doc_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserSettings::bookmarked_doc_ids() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserSettings.bookmarked_doc_ids)
  return bookmarked_doc_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserSettings::mutable_bookmarked_doc_ids() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserSettings.bookmarked_doc_ids)
  return &bookmarked_doc_ids_;
}

// repeated uint64 excluded_source_ids = 3 [packed = true];
int UserSettings::excluded_source_ids_size() const {
  return excluded_source_ids_.size();
}
void UserSettings::clear_excluded_source_ids() {
  excluded_source_ids_.Clear();
}
::google::protobuf::uint64 UserSettings::excluded_source_ids(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserSettings.excluded_source_ids)
  return excluded_source_ids_.Get(index);
}
void UserSettings::set_excluded_source_ids(int index, ::google::protobuf::uint64 value) {
  excluded_source_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stepan.pb.UserSettings.excluded_source_ids)
}
void UserSettings::add_excluded_source_ids(::google::protobuf::uint64 value) {
  excluded_source_ids_.Add(value);
  // @@protoc_insertion_point(field_add:stepan.pb.UserSettings.excluded_source_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserSettings::excluded_source_ids() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserSettings.excluded_source_ids)
  return excluded_source_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserSettings::mutable_excluded_source_ids() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserSettings.excluded_source_ids)
  return &excluded_source_ids_;
}

// repeated uint64 included_source_ids = 4 [packed = true];
int UserSettings::included_source_ids_size() const {
  return included_source_ids_.size();
}
void UserSettings::clear_included_source_ids() {
  included_source_ids_.Clear();
}
::google::protobuf::uint64 UserSettings::included_source_ids(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserSettings.included_source_ids)
  return included_source_ids_.Get(index);
}
void UserSettings::set_included_source_ids(int index, ::google::protobuf::uint64 value) {
  included_source_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stepan.pb.UserSettings.included_source_ids)
}
void UserSettings::add_included_source_ids(::google::protobuf::uint64 value) {
  included_source_ids_.Add(value);
  // @@protoc_insertion_point(field_add:stepan.pb.UserSettings.included_source_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserSettings::included_source_ids() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserSettings.included_source_ids)
  return included_source_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserSettings::mutable_included_source_ids() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserSettings.included_source_ids)
  return &included_source_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepanPpnInfo::kScrollPositionFieldNumber;
const int StepanPpnInfo::kDbUpdateTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepanPpnInfo::StepanPpnInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stepan.pb.StepanPpnInfo)
}
StepanPpnInfo::StepanPpnInfo(const StepanPpnInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&db_update_ts_, &from.db_update_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&scroll_position_) -
    reinterpret_cast<char*>(&db_update_ts_)) + sizeof(scroll_position_));
  // @@protoc_insertion_point(copy_constructor:stepan.pb.StepanPpnInfo)
}

void StepanPpnInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&db_update_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scroll_position_) -
      reinterpret_cast<char*>(&db_update_ts_)) + sizeof(scroll_position_));
}

StepanPpnInfo::~StepanPpnInfo() {
  // @@protoc_insertion_point(destructor:stepan.pb.StepanPpnInfo)
  SharedDtor();
}

void StepanPpnInfo::SharedDtor() {
}

void StepanPpnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepanPpnInfo::descriptor() {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepanPpnInfo& StepanPpnInfo::default_instance() {
  protobuf_stepan_2eproto::InitDefaults();
  return *internal_default_instance();
}

StepanPpnInfo* StepanPpnInfo::New(::google::protobuf::Arena* arena) const {
  StepanPpnInfo* n = new StepanPpnInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StepanPpnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stepan.pb.StepanPpnInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&db_update_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scroll_position_) -
        reinterpret_cast<char*>(&db_update_ts_)) + sizeof(scroll_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StepanPpnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stepan.pb.StepanPpnInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scroll_position = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_scroll_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scroll_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 db_update_ts = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_db_update_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_update_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stepan.pb.StepanPpnInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stepan.pb.StepanPpnInfo)
  return false;
#undef DO_
}

void StepanPpnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stepan.pb.StepanPpnInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 scroll_position = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scroll_position(), output);
  }

  // required uint64 db_update_ts = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_update_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stepan.pb.StepanPpnInfo)
}

::google::protobuf::uint8* StepanPpnInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stepan.pb.StepanPpnInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 scroll_position = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scroll_position(), target);
  }

  // required uint64 db_update_ts = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_update_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stepan.pb.StepanPpnInfo)
  return target;
}

size_t StepanPpnInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:stepan.pb.StepanPpnInfo)
  size_t total_size = 0;

  if (has_db_update_ts()) {
    // required uint64 db_update_ts = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_update_ts());
  }

  if (has_scroll_position()) {
    // required int32 scroll_position = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scroll_position());
  }

  return total_size;
}
size_t StepanPpnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stepan.pb.StepanPpnInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 db_update_ts = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_update_ts());

    // required int32 scroll_position = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scroll_position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepanPpnInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stepan.pb.StepanPpnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StepanPpnInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepanPpnInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stepan.pb.StepanPpnInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stepan.pb.StepanPpnInfo)
    MergeFrom(*source);
  }
}

void StepanPpnInfo::MergeFrom(const StepanPpnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stepan.pb.StepanPpnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      db_update_ts_ = from.db_update_ts_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_position_ = from.scroll_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StepanPpnInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stepan.pb.StepanPpnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepanPpnInfo::CopyFrom(const StepanPpnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stepan.pb.StepanPpnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepanPpnInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StepanPpnInfo::Swap(StepanPpnInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepanPpnInfo::InternalSwap(StepanPpnInfo* other) {
  using std::swap;
  swap(db_update_ts_, other->db_update_ts_);
  swap(scroll_position_, other->scroll_position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StepanPpnInfo::GetMetadata() const {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StepanPpnInfo

// required int32 scroll_position = 1 [default = 0];
bool StepanPpnInfo::has_scroll_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StepanPpnInfo::set_has_scroll_position() {
  _has_bits_[0] |= 0x00000002u;
}
void StepanPpnInfo::clear_has_scroll_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void StepanPpnInfo::clear_scroll_position() {
  scroll_position_ = 0;
  clear_has_scroll_position();
}
::google::protobuf::int32 StepanPpnInfo::scroll_position() const {
  // @@protoc_insertion_point(field_get:stepan.pb.StepanPpnInfo.scroll_position)
  return scroll_position_;
}
void StepanPpnInfo::set_scroll_position(::google::protobuf::int32 value) {
  set_has_scroll_position();
  scroll_position_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.StepanPpnInfo.scroll_position)
}

// required uint64 db_update_ts = 2 [default = 0];
bool StepanPpnInfo::has_db_update_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StepanPpnInfo::set_has_db_update_ts() {
  _has_bits_[0] |= 0x00000001u;
}
void StepanPpnInfo::clear_has_db_update_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
void StepanPpnInfo::clear_db_update_ts() {
  db_update_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_db_update_ts();
}
::google::protobuf::uint64 StepanPpnInfo::db_update_ts() const {
  // @@protoc_insertion_point(field_get:stepan.pb.StepanPpnInfo.db_update_ts)
  return db_update_ts_;
}
void StepanPpnInfo::set_db_update_ts(::google::protobuf::uint64 value) {
  set_has_db_update_ts();
  db_update_ts_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.StepanPpnInfo.db_update_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionState::kUserIdFieldNumber;
const int SessionState::kCosmoCacheCursorFieldNumber;
const int SessionState::kSearchCursorFieldNumber;
const int SessionState::kUserSettingsFieldNumber;
const int SessionState::kFlagsFieldNumber;
const int SessionState::kLastQueriedCategoriesFieldNumber;
const int SessionState::kBookmarkListPosFieldNumber;
const int SessionState::kPromoNutPosFieldNumber;
const int SessionState::kLastQueryHashFieldNumber;
const int SessionState::kStepanPpnInfoFieldNumber;
const int SessionState::kRecoSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionState::SessionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stepan.pb.SessionState)
}
SessionState::SessionState(const SessionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_query_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_query_hash()) {
    last_query_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_query_hash_);
  }
  reco_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reco_session_id()) {
    reco_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reco_session_id_);
  }
  if (from.has_cosmo_cache_cursor()) {
    cosmo_cache_cursor_ = new ::stepan::pb::CosmoCacheCursor(*from.cosmo_cache_cursor_);
  } else {
    cosmo_cache_cursor_ = NULL;
  }
  if (from.has_search_cursor()) {
    search_cursor_ = new ::stepan::pb::SearchCursor(*from.search_cursor_);
  } else {
    search_cursor_ = NULL;
  }
  if (from.has_user_settings()) {
    user_settings_ = new ::stepan::pb::UserSettings(*from.user_settings_);
  } else {
    user_settings_ = NULL;
  }
  if (from.has_stepan_ppn_info()) {
    stepan_ppn_info_ = new ::stepan::pb::StepanPpnInfo(*from.stepan_ppn_info_);
  } else {
    stepan_ppn_info_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_queried_categories_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(last_queried_categories_));
  // @@protoc_insertion_point(copy_constructor:stepan.pb.SessionState)
}

void SessionState::SharedCtor() {
  _cached_size_ = 0;
  last_query_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reco_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cosmo_cache_cursor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_queried_categories_) -
      reinterpret_cast<char*>(&cosmo_cache_cursor_)) + sizeof(last_queried_categories_));
}

SessionState::~SessionState() {
  // @@protoc_insertion_point(destructor:stepan.pb.SessionState)
  SharedDtor();
}

void SessionState::SharedDtor() {
  last_query_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reco_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cosmo_cache_cursor_;
  if (this != internal_default_instance()) delete search_cursor_;
  if (this != internal_default_instance()) delete user_settings_;
  if (this != internal_default_instance()) delete stepan_ppn_info_;
}

void SessionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionState::descriptor() {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionState& SessionState::default_instance() {
  protobuf_stepan_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionState* SessionState::New(::google::protobuf::Arena* arena) const {
  SessionState* n = new SessionState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:stepan.pb.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!last_query_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*last_query_hash_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!reco_session_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reco_session_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cosmo_cache_cursor_ != NULL);
      cosmo_cache_cursor_->::stepan::pb::CosmoCacheCursor::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(search_cursor_ != NULL);
      search_cursor_->::stepan::pb::SearchCursor::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(user_settings_ != NULL);
      user_settings_->::stepan::pb::UserSettings::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(stepan_ppn_info_ != NULL);
      stepan_ppn_info_->::stepan::pb::StepanPpnInfo::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&promo_nut_pos_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(promo_nut_pos_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_queried_categories_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(last_queried_categories_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stepan.pb.SessionState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .stepan.pb.CosmoCacheCursor cosmo_cache_cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cosmo_cache_cursor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .stepan.pb.SearchCursor search_cursor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_cursor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .stepan.pb.UserSettings user_settings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_queried_categories = 100 [default = 0];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_last_queried_categories();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_queried_categories_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bookmark_list_pos = 101 [default = 0];
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {
          set_has_bookmark_list_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bookmark_list_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 promo_nut_pos = 102 [default = 0];
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 816 & 0xFF */)) {
          set_has_promo_nut_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &promo_nut_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_query_hash = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_query_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_query_hash().data(), static_cast<int>(this->last_query_hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stepan.pb.SessionState.last_query_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .stepan.pb.StepanPpnInfo stepan_ppn_info = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stepan_ppn_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reco_session_id = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reco_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reco_session_id().data(), static_cast<int>(this->reco_session_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stepan.pb.SessionState.reco_session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stepan.pb.SessionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stepan.pb.SessionState)
  return false;
#undef DO_
}

void SessionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stepan.pb.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .stepan.pb.CosmoCacheCursor cosmo_cache_cursor = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cosmo_cache_cursor_, output);
  }

  // optional .stepan.pb.SearchCursor search_cursor = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->search_cursor_, output);
  }

  // optional .stepan.pb.UserSettings user_settings = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->user_settings_, output);
  }

  // optional int32 flags = 5 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flags(), output);
  }

  // optional uint64 last_queried_categories = 100 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(100, this->last_queried_categories(), output);
  }

  // optional int32 bookmark_list_pos = 101 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->bookmark_list_pos(), output);
  }

  // optional int32 promo_nut_pos = 102 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->promo_nut_pos(), output);
  }

  // optional string last_query_hash = 103;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_query_hash().data(), static_cast<int>(this->last_query_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.SessionState.last_query_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      103, this->last_query_hash(), output);
  }

  // optional .stepan.pb.StepanPpnInfo stepan_ppn_info = 104;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->stepan_ppn_info_, output);
  }

  // optional string reco_session_id = 105;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reco_session_id().data(), static_cast<int>(this->reco_session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.SessionState.reco_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      105, this->reco_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stepan.pb.SessionState)
}

::google::protobuf::uint8* SessionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stepan.pb.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .stepan.pb.CosmoCacheCursor cosmo_cache_cursor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cosmo_cache_cursor_, deterministic, target);
  }

  // optional .stepan.pb.SearchCursor search_cursor = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->search_cursor_, deterministic, target);
  }

  // optional .stepan.pb.UserSettings user_settings = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->user_settings_, deterministic, target);
  }

  // optional int32 flags = 5 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flags(), target);
  }

  // optional uint64 last_queried_categories = 100 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(100, this->last_queried_categories(), target);
  }

  // optional int32 bookmark_list_pos = 101 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(101, this->bookmark_list_pos(), target);
  }

  // optional int32 promo_nut_pos = 102 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(102, this->promo_nut_pos(), target);
  }

  // optional string last_query_hash = 103;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_query_hash().data(), static_cast<int>(this->last_query_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.SessionState.last_query_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->last_query_hash(), target);
  }

  // optional .stepan.pb.StepanPpnInfo stepan_ppn_info = 104;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *this->stepan_ppn_info_, deterministic, target);
  }

  // optional string reco_session_id = 105;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reco_session_id().data(), static_cast<int>(this->reco_session_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.SessionState.reco_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        105, this->reco_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stepan.pb.SessionState)
  return target;
}

size_t SessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stepan.pb.SessionState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string last_query_hash = 103;
    if (has_last_query_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_query_hash());
    }

    // optional string reco_session_id = 105;
    if (has_reco_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reco_session_id());
    }

    // optional .stepan.pb.CosmoCacheCursor cosmo_cache_cursor = 2;
    if (has_cosmo_cache_cursor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cosmo_cache_cursor_);
    }

    // optional .stepan.pb.SearchCursor search_cursor = 3;
    if (has_search_cursor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->search_cursor_);
    }

    // optional .stepan.pb.UserSettings user_settings = 4;
    if (has_user_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_settings_);
    }

    // optional .stepan.pb.StepanPpnInfo stepan_ppn_info = 104;
    if (has_stepan_ppn_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stepan_ppn_info_);
    }

  }
  // optional int32 promo_nut_pos = 102 [default = 0];
  if (has_promo_nut_pos()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->promo_nut_pos());
  }

  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 flags = 5 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional int32 bookmark_list_pos = 101 [default = 0];
    if (has_bookmark_list_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bookmark_list_pos());
    }

    // optional uint64 last_queried_categories = 100 [default = 0];
    if (has_last_queried_categories()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_queried_categories());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stepan.pb.SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stepan.pb.SessionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stepan.pb.SessionState)
    MergeFrom(*source);
  }
}

void SessionState::MergeFrom(const SessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stepan.pb.SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_query_hash();
      last_query_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_query_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_reco_session_id();
      reco_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reco_session_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cosmo_cache_cursor()->::stepan::pb::CosmoCacheCursor::MergeFrom(from.cosmo_cache_cursor());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_search_cursor()->::stepan::pb::SearchCursor::MergeFrom(from.search_cursor());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_user_settings()->::stepan::pb::UserSettings::MergeFrom(from.user_settings());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_stepan_ppn_info()->::stepan::pb::StepanPpnInfo::MergeFrom(from.stepan_ppn_info());
    }
    if (cached_has_bits & 0x00000040u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      promo_nut_pos_ = from.promo_nut_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      bookmark_list_pos_ = from.bookmark_list_pos_;
    }
    if (cached_has_bits & 0x00000400u) {
      last_queried_categories_ = from.last_queried_categories_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stepan.pb.SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionState::CopyFrom(const SessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stepan.pb.SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (has_cosmo_cache_cursor()) {
    if (!this->cosmo_cache_cursor_->IsInitialized()) return false;
  }
  if (has_search_cursor()) {
    if (!this->search_cursor_->IsInitialized()) return false;
  }
  if (has_stepan_ppn_info()) {
    if (!this->stepan_ppn_info_->IsInitialized()) return false;
  }
  return true;
}

void SessionState::Swap(SessionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionState::InternalSwap(SessionState* other) {
  using std::swap;
  last_query_hash_.Swap(&other->last_query_hash_);
  reco_session_id_.Swap(&other->reco_session_id_);
  swap(cosmo_cache_cursor_, other->cosmo_cache_cursor_);
  swap(search_cursor_, other->search_cursor_);
  swap(user_settings_, other->user_settings_);
  swap(stepan_ppn_info_, other->stepan_ppn_info_);
  swap(user_id_, other->user_id_);
  swap(promo_nut_pos_, other->promo_nut_pos_);
  swap(flags_, other->flags_);
  swap(bookmark_list_pos_, other->bookmark_list_pos_);
  swap(last_queried_categories_, other->last_queried_categories_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionState::GetMetadata() const {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionState

// required uint64 user_id = 1;
bool SessionState::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SessionState::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
void SessionState::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void SessionState::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 SessionState::user_id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.user_id)
  return user_id_;
}
void SessionState::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.user_id)
}

// optional .stepan.pb.CosmoCacheCursor cosmo_cache_cursor = 2;
bool SessionState::has_cosmo_cache_cursor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionState::set_has_cosmo_cache_cursor() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionState::clear_has_cosmo_cache_cursor() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionState::clear_cosmo_cache_cursor() {
  if (cosmo_cache_cursor_ != NULL) cosmo_cache_cursor_->::stepan::pb::CosmoCacheCursor::Clear();
  clear_has_cosmo_cache_cursor();
}
const ::stepan::pb::CosmoCacheCursor& SessionState::cosmo_cache_cursor() const {
  const ::stepan::pb::CosmoCacheCursor* p = cosmo_cache_cursor_;
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.cosmo_cache_cursor)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::CosmoCacheCursor*>(
      &::stepan::pb::_CosmoCacheCursor_default_instance_);
}
::stepan::pb::CosmoCacheCursor* SessionState::mutable_cosmo_cache_cursor() {
  set_has_cosmo_cache_cursor();
  if (cosmo_cache_cursor_ == NULL) {
    cosmo_cache_cursor_ = new ::stepan::pb::CosmoCacheCursor;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.cosmo_cache_cursor)
  return cosmo_cache_cursor_;
}
::stepan::pb::CosmoCacheCursor* SessionState::release_cosmo_cache_cursor() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.cosmo_cache_cursor)
  clear_has_cosmo_cache_cursor();
  ::stepan::pb::CosmoCacheCursor* temp = cosmo_cache_cursor_;
  cosmo_cache_cursor_ = NULL;
  return temp;
}
void SessionState::set_allocated_cosmo_cache_cursor(::stepan::pb::CosmoCacheCursor* cosmo_cache_cursor) {
  delete cosmo_cache_cursor_;
  cosmo_cache_cursor_ = cosmo_cache_cursor;
  if (cosmo_cache_cursor) {
    set_has_cosmo_cache_cursor();
  } else {
    clear_has_cosmo_cache_cursor();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.cosmo_cache_cursor)
}

// optional .stepan.pb.SearchCursor search_cursor = 3;
bool SessionState::has_search_cursor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionState::set_has_search_cursor() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionState::clear_has_search_cursor() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionState::clear_search_cursor() {
  if (search_cursor_ != NULL) search_cursor_->::stepan::pb::SearchCursor::Clear();
  clear_has_search_cursor();
}
const ::stepan::pb::SearchCursor& SessionState::search_cursor() const {
  const ::stepan::pb::SearchCursor* p = search_cursor_;
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.search_cursor)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::SearchCursor*>(
      &::stepan::pb::_SearchCursor_default_instance_);
}
::stepan::pb::SearchCursor* SessionState::mutable_search_cursor() {
  set_has_search_cursor();
  if (search_cursor_ == NULL) {
    search_cursor_ = new ::stepan::pb::SearchCursor;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.search_cursor)
  return search_cursor_;
}
::stepan::pb::SearchCursor* SessionState::release_search_cursor() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.search_cursor)
  clear_has_search_cursor();
  ::stepan::pb::SearchCursor* temp = search_cursor_;
  search_cursor_ = NULL;
  return temp;
}
void SessionState::set_allocated_search_cursor(::stepan::pb::SearchCursor* search_cursor) {
  delete search_cursor_;
  search_cursor_ = search_cursor;
  if (search_cursor) {
    set_has_search_cursor();
  } else {
    clear_has_search_cursor();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.search_cursor)
}

// optional .stepan.pb.UserSettings user_settings = 4;
bool SessionState::has_user_settings() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SessionState::set_has_user_settings() {
  _has_bits_[0] |= 0x00000010u;
}
void SessionState::clear_has_user_settings() {
  _has_bits_[0] &= ~0x00000010u;
}
void SessionState::clear_user_settings() {
  if (user_settings_ != NULL) user_settings_->::stepan::pb::UserSettings::Clear();
  clear_has_user_settings();
}
const ::stepan::pb::UserSettings& SessionState::user_settings() const {
  const ::stepan::pb::UserSettings* p = user_settings_;
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.user_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::UserSettings*>(
      &::stepan::pb::_UserSettings_default_instance_);
}
::stepan::pb::UserSettings* SessionState::mutable_user_settings() {
  set_has_user_settings();
  if (user_settings_ == NULL) {
    user_settings_ = new ::stepan::pb::UserSettings;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.user_settings)
  return user_settings_;
}
::stepan::pb::UserSettings* SessionState::release_user_settings() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.user_settings)
  clear_has_user_settings();
  ::stepan::pb::UserSettings* temp = user_settings_;
  user_settings_ = NULL;
  return temp;
}
void SessionState::set_allocated_user_settings(::stepan::pb::UserSettings* user_settings) {
  delete user_settings_;
  user_settings_ = user_settings;
  if (user_settings) {
    set_has_user_settings();
  } else {
    clear_has_user_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.user_settings)
}

// optional int32 flags = 5 [default = 0];
bool SessionState::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SessionState::set_has_flags() {
  _has_bits_[0] |= 0x00000100u;
}
void SessionState::clear_has_flags() {
  _has_bits_[0] &= ~0x00000100u;
}
void SessionState::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::google::protobuf::int32 SessionState::flags() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.flags)
  return flags_;
}
void SessionState::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.flags)
}

// optional uint64 last_queried_categories = 100 [default = 0];
bool SessionState::has_last_queried_categories() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SessionState::set_has_last_queried_categories() {
  _has_bits_[0] |= 0x00000400u;
}
void SessionState::clear_has_last_queried_categories() {
  _has_bits_[0] &= ~0x00000400u;
}
void SessionState::clear_last_queried_categories() {
  last_queried_categories_ = GOOGLE_ULONGLONG(0);
  clear_has_last_queried_categories();
}
::google::protobuf::uint64 SessionState::last_queried_categories() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.last_queried_categories)
  return last_queried_categories_;
}
void SessionState::set_last_queried_categories(::google::protobuf::uint64 value) {
  set_has_last_queried_categories();
  last_queried_categories_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.last_queried_categories)
}

// optional int32 bookmark_list_pos = 101 [default = 0];
bool SessionState::has_bookmark_list_pos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SessionState::set_has_bookmark_list_pos() {
  _has_bits_[0] |= 0x00000200u;
}
void SessionState::clear_has_bookmark_list_pos() {
  _has_bits_[0] &= ~0x00000200u;
}
void SessionState::clear_bookmark_list_pos() {
  bookmark_list_pos_ = 0;
  clear_has_bookmark_list_pos();
}
::google::protobuf::int32 SessionState::bookmark_list_pos() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.bookmark_list_pos)
  return bookmark_list_pos_;
}
void SessionState::set_bookmark_list_pos(::google::protobuf::int32 value) {
  set_has_bookmark_list_pos();
  bookmark_list_pos_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.bookmark_list_pos)
}

// optional int32 promo_nut_pos = 102 [default = 0];
bool SessionState::has_promo_nut_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SessionState::set_has_promo_nut_pos() {
  _has_bits_[0] |= 0x00000080u;
}
void SessionState::clear_has_promo_nut_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
void SessionState::clear_promo_nut_pos() {
  promo_nut_pos_ = 0;
  clear_has_promo_nut_pos();
}
::google::protobuf::int32 SessionState::promo_nut_pos() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.promo_nut_pos)
  return promo_nut_pos_;
}
void SessionState::set_promo_nut_pos(::google::protobuf::int32 value) {
  set_has_promo_nut_pos();
  promo_nut_pos_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.promo_nut_pos)
}

// optional string last_query_hash = 103;
bool SessionState::has_last_query_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionState::set_has_last_query_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionState::clear_has_last_query_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionState::clear_last_query_hash() {
  last_query_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_query_hash();
}
const ::std::string& SessionState::last_query_hash() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.last_query_hash)
  return last_query_hash_.GetNoArena();
}
void SessionState::set_last_query_hash(const ::std::string& value) {
  set_has_last_query_hash();
  last_query_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.last_query_hash)
}
#if LANG_CXX11
void SessionState::set_last_query_hash(::std::string&& value) {
  set_has_last_query_hash();
  last_query_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.SessionState.last_query_hash)
}
#endif
void SessionState::set_last_query_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_query_hash();
  last_query_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.SessionState.last_query_hash)
}
void SessionState::set_last_query_hash(const char* value, size_t size) {
  set_has_last_query_hash();
  last_query_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.SessionState.last_query_hash)
}
::std::string* SessionState::mutable_last_query_hash() {
  set_has_last_query_hash();
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.last_query_hash)
  return last_query_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionState::release_last_query_hash() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.last_query_hash)
  clear_has_last_query_hash();
  return last_query_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionState::set_allocated_last_query_hash(::std::string* last_query_hash) {
  if (last_query_hash != NULL) {
    set_has_last_query_hash();
  } else {
    clear_has_last_query_hash();
  }
  last_query_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_query_hash);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.last_query_hash)
}

// optional .stepan.pb.StepanPpnInfo stepan_ppn_info = 104;
bool SessionState::has_stepan_ppn_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SessionState::set_has_stepan_ppn_info() {
  _has_bits_[0] |= 0x00000020u;
}
void SessionState::clear_has_stepan_ppn_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void SessionState::clear_stepan_ppn_info() {
  if (stepan_ppn_info_ != NULL) stepan_ppn_info_->::stepan::pb::StepanPpnInfo::Clear();
  clear_has_stepan_ppn_info();
}
const ::stepan::pb::StepanPpnInfo& SessionState::stepan_ppn_info() const {
  const ::stepan::pb::StepanPpnInfo* p = stepan_ppn_info_;
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.stepan_ppn_info)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::StepanPpnInfo*>(
      &::stepan::pb::_StepanPpnInfo_default_instance_);
}
::stepan::pb::StepanPpnInfo* SessionState::mutable_stepan_ppn_info() {
  set_has_stepan_ppn_info();
  if (stepan_ppn_info_ == NULL) {
    stepan_ppn_info_ = new ::stepan::pb::StepanPpnInfo;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.stepan_ppn_info)
  return stepan_ppn_info_;
}
::stepan::pb::StepanPpnInfo* SessionState::release_stepan_ppn_info() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.stepan_ppn_info)
  clear_has_stepan_ppn_info();
  ::stepan::pb::StepanPpnInfo* temp = stepan_ppn_info_;
  stepan_ppn_info_ = NULL;
  return temp;
}
void SessionState::set_allocated_stepan_ppn_info(::stepan::pb::StepanPpnInfo* stepan_ppn_info) {
  delete stepan_ppn_info_;
  stepan_ppn_info_ = stepan_ppn_info;
  if (stepan_ppn_info) {
    set_has_stepan_ppn_info();
  } else {
    clear_has_stepan_ppn_info();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.stepan_ppn_info)
}

// optional string reco_session_id = 105;
bool SessionState::has_reco_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionState::set_has_reco_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionState::clear_has_reco_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionState::clear_reco_session_id() {
  reco_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reco_session_id();
}
const ::std::string& SessionState::reco_session_id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.reco_session_id)
  return reco_session_id_.GetNoArena();
}
void SessionState::set_reco_session_id(const ::std::string& value) {
  set_has_reco_session_id();
  reco_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.reco_session_id)
}
#if LANG_CXX11
void SessionState::set_reco_session_id(::std::string&& value) {
  set_has_reco_session_id();
  reco_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.SessionState.reco_session_id)
}
#endif
void SessionState::set_reco_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reco_session_id();
  reco_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.SessionState.reco_session_id)
}
void SessionState::set_reco_session_id(const char* value, size_t size) {
  set_has_reco_session_id();
  reco_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.SessionState.reco_session_id)
}
::std::string* SessionState::mutable_reco_session_id() {
  set_has_reco_session_id();
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.reco_session_id)
  return reco_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionState::release_reco_session_id() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.reco_session_id)
  clear_has_reco_session_id();
  return reco_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionState::set_allocated_reco_session_id(::std::string* reco_session_id) {
  if (reco_session_id != NULL) {
    set_has_reco_session_id();
  } else {
    clear_has_reco_session_id();
  }
  reco_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reco_session_id);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.reco_session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalId::kTypeFieldNumber;
const int ExternalId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalId::ExternalId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stepan.pb.ExternalId)
}
ExternalId::ExternalId(const ExternalId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:stepan.pb.ExternalId)
}

void ExternalId::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

ExternalId::~ExternalId() {
  // @@protoc_insertion_point(destructor:stepan.pb.ExternalId)
  SharedDtor();
}

void ExternalId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExternalId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalId::descriptor() {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExternalId& ExternalId::default_instance() {
  protobuf_stepan_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExternalId* ExternalId::New(::google::protobuf::Arena* arena) const {
  ExternalId* n = new ExternalId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternalId::Clear() {
// @@protoc_insertion_point(message_clear_start:stepan.pb.ExternalId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExternalId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stepan.pb.ExternalId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stepan.pb.ExternalId.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stepan.pb.ExternalId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stepan.pb.ExternalId)
  return false;
#undef DO_
}

void ExternalId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stepan.pb.ExternalId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.ExternalId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stepan.pb.ExternalId)
}

::google::protobuf::uint8* ExternalId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stepan.pb.ExternalId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stepan.pb.ExternalId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stepan.pb.ExternalId)
  return target;
}

size_t ExternalId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:stepan.pb.ExternalId)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ExternalId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stepan.pb.ExternalId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stepan.pb.ExternalId)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternalId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stepan.pb.ExternalId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stepan.pb.ExternalId)
    MergeFrom(*source);
  }
}

void ExternalId::MergeFrom(const ExternalId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stepan.pb.ExternalId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExternalId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stepan.pb.ExternalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalId::CopyFrom(const ExternalId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stepan.pb.ExternalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ExternalId::Swap(ExternalId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalId::InternalSwap(ExternalId* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternalId::GetMetadata() const {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternalId

// required int32 type = 1;
bool ExternalId::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExternalId::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ExternalId::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExternalId::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 ExternalId::type() const {
  // @@protoc_insertion_point(field_get:stepan.pb.ExternalId.type)
  return type_;
}
void ExternalId::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.ExternalId.type)
}

// required string id = 2;
bool ExternalId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExternalId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ExternalId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExternalId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ExternalId::id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.ExternalId.id)
  return id_.GetNoArena();
}
void ExternalId::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.ExternalId.id)
}
#if LANG_CXX11
void ExternalId::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.ExternalId.id)
}
#endif
void ExternalId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.ExternalId.id)
}
void ExternalId::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.ExternalId.id)
}
::std::string* ExternalId::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:stepan.pb.ExternalId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExternalId::release_id() {
  // @@protoc_insertion_point(field_release:stepan.pb.ExternalId.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExternalId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.ExternalId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocdemInfo::kGenderFieldNumber;
const int SocdemInfo::kBirthdayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocdemInfo::SocdemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stepan.pb.SocdemInfo)
}
SocdemInfo::SocdemInfo(const SocdemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&birthday_, &from.birthday_,
    static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&birthday_)) + sizeof(gender_));
  // @@protoc_insertion_point(copy_constructor:stepan.pb.SocdemInfo)
}

void SocdemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&birthday_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gender_) -
      reinterpret_cast<char*>(&birthday_)) + sizeof(gender_));
}

SocdemInfo::~SocdemInfo() {
  // @@protoc_insertion_point(destructor:stepan.pb.SocdemInfo)
  SharedDtor();
}

void SocdemInfo::SharedDtor() {
}

void SocdemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocdemInfo::descriptor() {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocdemInfo& SocdemInfo::default_instance() {
  protobuf_stepan_2eproto::InitDefaults();
  return *internal_default_instance();
}

SocdemInfo* SocdemInfo::New(::google::protobuf::Arena* arena) const {
  SocdemInfo* n = new SocdemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SocdemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stepan.pb.SocdemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&birthday_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gender_) -
        reinterpret_cast<char*>(&birthday_)) + sizeof(gender_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SocdemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stepan.pb.SocdemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool gender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 birthday = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_birthday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &birthday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stepan.pb.SocdemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stepan.pb.SocdemInfo)
  return false;
#undef DO_
}

void SocdemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stepan.pb.SocdemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool gender = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gender(), output);
  }

  // optional int64 birthday = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->birthday(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stepan.pb.SocdemInfo)
}

::google::protobuf::uint8* SocdemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stepan.pb.SocdemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool gender = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gender(), target);
  }

  // optional int64 birthday = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->birthday(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stepan.pb.SocdemInfo)
  return target;
}

size_t SocdemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stepan.pb.SocdemInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 birthday = 2;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->birthday());
    }

    // optional bool gender = 1;
    if (has_gender()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocdemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stepan.pb.SocdemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SocdemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocdemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stepan.pb.SocdemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stepan.pb.SocdemInfo)
    MergeFrom(*source);
  }
}

void SocdemInfo::MergeFrom(const SocdemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stepan.pb.SocdemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      birthday_ = from.birthday_;
    }
    if (cached_has_bits & 0x00000002u) {
      gender_ = from.gender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SocdemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stepan.pb.SocdemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocdemInfo::CopyFrom(const SocdemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stepan.pb.SocdemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocdemInfo::IsInitialized() const {
  return true;
}

void SocdemInfo::Swap(SocdemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocdemInfo::InternalSwap(SocdemInfo* other) {
  using std::swap;
  swap(birthday_, other->birthday_);
  swap(gender_, other->gender_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SocdemInfo::GetMetadata() const {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SocdemInfo

// optional bool gender = 1;
bool SocdemInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SocdemInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000002u;
}
void SocdemInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
void SocdemInfo::clear_gender() {
  gender_ = false;
  clear_has_gender();
}
bool SocdemInfo::gender() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SocdemInfo.gender)
  return gender_;
}
void SocdemInfo::set_gender(bool value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SocdemInfo.gender)
}

// optional int64 birthday = 2;
bool SocdemInfo::has_birthday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SocdemInfo::set_has_birthday() {
  _has_bits_[0] |= 0x00000001u;
}
void SocdemInfo::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000001u;
}
void SocdemInfo::clear_birthday() {
  birthday_ = GOOGLE_LONGLONG(0);
  clear_has_birthday();
}
::google::protobuf::int64 SocdemInfo::birthday() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SocdemInfo.birthday)
  return birthday_;
}
void SocdemInfo::set_birthday(::google::protobuf::int64 value) {
  set_has_birthday();
  birthday_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SocdemInfo.birthday)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserAccount::kUserIdFieldNumber;
const int UserAccount::kUserCredsFieldNumber;
const int UserAccount::kUserSettingsFieldNumber;
const int UserAccount::kSocdemInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserAccount::UserAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:stepan.pb.UserAccount)
}
UserAccount::UserAccount(const UserAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_creds_(from.user_creds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_settings()) {
    user_settings_ = new ::stepan::pb::UserSettings(*from.user_settings_);
  } else {
    user_settings_ = NULL;
  }
  if (from.has_socdem_info()) {
    socdem_info_ = new ::stepan::pb::SocdemInfo(*from.socdem_info_);
  } else {
    socdem_info_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:stepan.pb.UserAccount)
}

void UserAccount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&user_settings_)) + sizeof(user_id_));
}

UserAccount::~UserAccount() {
  // @@protoc_insertion_point(destructor:stepan.pb.UserAccount)
  SharedDtor();
}

void UserAccount::SharedDtor() {
  if (this != internal_default_instance()) delete user_settings_;
  if (this != internal_default_instance()) delete socdem_info_;
}

void UserAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAccount::descriptor() {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserAccount& UserAccount::default_instance() {
  protobuf_stepan_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserAccount* UserAccount::New(::google::protobuf::Arena* arena) const {
  UserAccount* n = new UserAccount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:stepan.pb.UserAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_creds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_settings_ != NULL);
      user_settings_->::stepan::pb::UserSettings::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(socdem_info_ != NULL);
      socdem_info_->::stepan::pb::SocdemInfo::Clear();
    }
  }
  user_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stepan.pb.UserAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .stepan.pb.ExternalId user_creds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_creds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .stepan.pb.UserSettings user_settings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .stepan.pb.SocdemInfo socdem_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socdem_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stepan.pb.UserAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stepan.pb.UserAccount)
  return false;
#undef DO_
}

void UserAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stepan.pb.UserAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .stepan.pb.ExternalId user_creds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_creds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_creds(static_cast<int>(i)), output);
  }

  // optional .stepan.pb.UserSettings user_settings = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->user_settings_, output);
  }

  // optional .stepan.pb.SocdemInfo socdem_info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->socdem_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stepan.pb.UserAccount)
}

::google::protobuf::uint8* UserAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stepan.pb.UserAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .stepan.pb.ExternalId user_creds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_creds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->user_creds(static_cast<int>(i)), deterministic, target);
  }

  // optional .stepan.pb.UserSettings user_settings = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->user_settings_, deterministic, target);
  }

  // optional .stepan.pb.SocdemInfo socdem_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->socdem_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stepan.pb.UserAccount)
  return target;
}

size_t UserAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stepan.pb.UserAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }
  // repeated .stepan.pb.ExternalId user_creds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->user_creds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_creds(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .stepan.pb.UserSettings user_settings = 3;
    if (has_user_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_settings_);
    }

    // optional .stepan.pb.SocdemInfo socdem_info = 4;
    if (has_socdem_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socdem_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stepan.pb.UserAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stepan.pb.UserAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stepan.pb.UserAccount)
    MergeFrom(*source);
  }
}

void UserAccount::MergeFrom(const UserAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stepan.pb.UserAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_creds_.MergeFrom(from.user_creds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_settings()->::stepan::pb::UserSettings::MergeFrom(from.user_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_socdem_info()->::stepan::pb::SocdemInfo::MergeFrom(from.socdem_info());
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stepan.pb.UserAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAccount::CopyFrom(const UserAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stepan.pb.UserAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->user_creds())) return false;
  return true;
}

void UserAccount::Swap(UserAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserAccount::InternalSwap(UserAccount* other) {
  using std::swap;
  user_creds_.InternalSwap(&other->user_creds_);
  swap(user_settings_, other->user_settings_);
  swap(socdem_info_, other->socdem_info_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserAccount::GetMetadata() const {
  protobuf_stepan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserAccount

// required uint64 user_id = 1;
bool UserAccount::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserAccount::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UserAccount::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserAccount::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 UserAccount::user_id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserAccount.user_id)
  return user_id_;
}
void UserAccount::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.UserAccount.user_id)
}

// repeated .stepan.pb.ExternalId user_creds = 2;
int UserAccount::user_creds_size() const {
  return user_creds_.size();
}
void UserAccount::clear_user_creds() {
  user_creds_.Clear();
}
const ::stepan::pb::ExternalId& UserAccount::user_creds(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserAccount.user_creds)
  return user_creds_.Get(index);
}
::stepan::pb::ExternalId* UserAccount::mutable_user_creds(int index) {
  // @@protoc_insertion_point(field_mutable:stepan.pb.UserAccount.user_creds)
  return user_creds_.Mutable(index);
}
::stepan::pb::ExternalId* UserAccount::add_user_creds() {
  // @@protoc_insertion_point(field_add:stepan.pb.UserAccount.user_creds)
  return user_creds_.Add();
}
::google::protobuf::RepeatedPtrField< ::stepan::pb::ExternalId >*
UserAccount::mutable_user_creds() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserAccount.user_creds)
  return &user_creds_;
}
const ::google::protobuf::RepeatedPtrField< ::stepan::pb::ExternalId >&
UserAccount::user_creds() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserAccount.user_creds)
  return user_creds_;
}

// optional .stepan.pb.UserSettings user_settings = 3;
bool UserAccount::has_user_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserAccount::set_has_user_settings() {
  _has_bits_[0] |= 0x00000001u;
}
void UserAccount::clear_has_user_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserAccount::clear_user_settings() {
  if (user_settings_ != NULL) user_settings_->::stepan::pb::UserSettings::Clear();
  clear_has_user_settings();
}
const ::stepan::pb::UserSettings& UserAccount::user_settings() const {
  const ::stepan::pb::UserSettings* p = user_settings_;
  // @@protoc_insertion_point(field_get:stepan.pb.UserAccount.user_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::UserSettings*>(
      &::stepan::pb::_UserSettings_default_instance_);
}
::stepan::pb::UserSettings* UserAccount::mutable_user_settings() {
  set_has_user_settings();
  if (user_settings_ == NULL) {
    user_settings_ = new ::stepan::pb::UserSettings;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.UserAccount.user_settings)
  return user_settings_;
}
::stepan::pb::UserSettings* UserAccount::release_user_settings() {
  // @@protoc_insertion_point(field_release:stepan.pb.UserAccount.user_settings)
  clear_has_user_settings();
  ::stepan::pb::UserSettings* temp = user_settings_;
  user_settings_ = NULL;
  return temp;
}
void UserAccount::set_allocated_user_settings(::stepan::pb::UserSettings* user_settings) {
  delete user_settings_;
  user_settings_ = user_settings;
  if (user_settings) {
    set_has_user_settings();
  } else {
    clear_has_user_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.UserAccount.user_settings)
}

// optional .stepan.pb.SocdemInfo socdem_info = 4;
bool UserAccount::has_socdem_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserAccount::set_has_socdem_info() {
  _has_bits_[0] |= 0x00000002u;
}
void UserAccount::clear_has_socdem_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserAccount::clear_socdem_info() {
  if (socdem_info_ != NULL) socdem_info_->::stepan::pb::SocdemInfo::Clear();
  clear_has_socdem_info();
}
const ::stepan::pb::SocdemInfo& UserAccount::socdem_info() const {
  const ::stepan::pb::SocdemInfo* p = socdem_info_;
  // @@protoc_insertion_point(field_get:stepan.pb.UserAccount.socdem_info)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::SocdemInfo*>(
      &::stepan::pb::_SocdemInfo_default_instance_);
}
::stepan::pb::SocdemInfo* UserAccount::mutable_socdem_info() {
  set_has_socdem_info();
  if (socdem_info_ == NULL) {
    socdem_info_ = new ::stepan::pb::SocdemInfo;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.UserAccount.socdem_info)
  return socdem_info_;
}
::stepan::pb::SocdemInfo* UserAccount::release_socdem_info() {
  // @@protoc_insertion_point(field_release:stepan.pb.UserAccount.socdem_info)
  clear_has_socdem_info();
  ::stepan::pb::SocdemInfo* temp = socdem_info_;
  socdem_info_ = NULL;
  return temp;
}
void UserAccount::set_allocated_socdem_info(::stepan::pb::SocdemInfo* socdem_info) {
  delete socdem_info_;
  socdem_info_ = socdem_info;
  if (socdem_info) {
    set_has_socdem_info();
  } else {
    clear_has_socdem_info();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.UserAccount.socdem_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace stepan

// @@protoc_insertion_point(global_scope)
