// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stepan.proto

#ifndef PROTOBUF_stepan_2eproto__INCLUDED
#define PROTOBUF_stepan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace stepan {
namespace pb {
class CosmoCacheCursor;
class CosmoCacheCursorDefaultTypeInternal;
extern CosmoCacheCursorDefaultTypeInternal _CosmoCacheCursor_default_instance_;
class ExternalId;
class ExternalIdDefaultTypeInternal;
extern ExternalIdDefaultTypeInternal _ExternalId_default_instance_;
class SearchCursor;
class SearchCursorDefaultTypeInternal;
extern SearchCursorDefaultTypeInternal _SearchCursor_default_instance_;
class SessionState;
class SessionStateDefaultTypeInternal;
extern SessionStateDefaultTypeInternal _SessionState_default_instance_;
class SocdemInfo;
class SocdemInfoDefaultTypeInternal;
extern SocdemInfoDefaultTypeInternal _SocdemInfo_default_instance_;
class StepanPpnInfo;
class StepanPpnInfoDefaultTypeInternal;
extern StepanPpnInfoDefaultTypeInternal _StepanPpnInfo_default_instance_;
class UserAccount;
class UserAccountDefaultTypeInternal;
extern UserAccountDefaultTypeInternal _UserAccount_default_instance_;
class UserSettings;
class UserSettingsDefaultTypeInternal;
extern UserSettingsDefaultTypeInternal _UserSettings_default_instance_;
}  // namespace pb
}  // namespace stepan

namespace stepan {
namespace pb {

namespace protobuf_stepan_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_stepan_2eproto

// ===================================================================

class CosmoCacheCursor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stepan.pb.CosmoCacheCursor) */ {
 public:
  CosmoCacheCursor();
  virtual ~CosmoCacheCursor();

  CosmoCacheCursor(const CosmoCacheCursor& from);

  inline CosmoCacheCursor& operator=(const CosmoCacheCursor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosmoCacheCursor(CosmoCacheCursor&& from) noexcept
    : CosmoCacheCursor() {
    *this = ::std::move(from);
  }

  inline CosmoCacheCursor& operator=(CosmoCacheCursor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmoCacheCursor& default_instance();

  static inline const CosmoCacheCursor* internal_default_instance() {
    return reinterpret_cast<const CosmoCacheCursor*>(
               &_CosmoCacheCursor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CosmoCacheCursor* other);
  friend void swap(CosmoCacheCursor& a, CosmoCacheCursor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosmoCacheCursor* New() const PROTOBUF_FINAL { return New(NULL); }

  CosmoCacheCursor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CosmoCacheCursor& from);
  void MergeFrom(const CosmoCacheCursor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CosmoCacheCursor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string record_id = 2;
  bool has_record_id() const;
  void clear_record_id();
  static const int kRecordIdFieldNumber = 2;
  const ::std::string& record_id() const;
  void set_record_id(const ::std::string& value);
  #if LANG_CXX11
  void set_record_id(::std::string&& value);
  #endif
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  ::std::string* mutable_record_id();
  ::std::string* release_record_id();
  void set_allocated_record_id(::std::string* record_id);

  // required int32 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stepan.pb.CosmoCacheCursor)
 private:
  void set_has_pos();
  void clear_has_pos();
  void set_has_record_id();
  void clear_has_record_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr record_id_;
  ::google::protobuf::int32 pos_;
  friend struct protobuf_stepan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchCursor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stepan.pb.SearchCursor) */ {
 public:
  SearchCursor();
  virtual ~SearchCursor();

  SearchCursor(const SearchCursor& from);

  inline SearchCursor& operator=(const SearchCursor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchCursor(SearchCursor&& from) noexcept
    : SearchCursor() {
    *this = ::std::move(from);
  }

  inline SearchCursor& operator=(SearchCursor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchCursor& default_instance();

  static inline const SearchCursor* internal_default_instance() {
    return reinterpret_cast<const SearchCursor*>(
               &_SearchCursor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SearchCursor* other);
  friend void swap(SearchCursor& a, SearchCursor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchCursor* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchCursor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchCursor& from);
  void MergeFrom(const SearchCursor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchCursor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required int32 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stepan.pb.SearchCursor)
 private:
  void set_has_query();
  void clear_has_query();
  void set_has_pos();
  void clear_has_pos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 pos_;
  friend struct protobuf_stepan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stepan.pb.UserSettings) */ {
 public:
  UserSettings();
  virtual ~UserSettings();

  UserSettings(const UserSettings& from);

  inline UserSettings& operator=(const UserSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSettings(UserSettings&& from) noexcept
    : UserSettings() {
    *this = ::std::move(from);
  }

  inline UserSettings& operator=(UserSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSettings& default_instance();

  static inline const UserSettings* internal_default_instance() {
    return reinterpret_cast<const UserSettings*>(
               &_UserSettings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserSettings* other);
  friend void swap(UserSettings& a, UserSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  UserSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserSettings& from);
  void MergeFrom(const UserSettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 selected_category_ids = 1 [packed = true];
  int selected_category_ids_size() const;
  void clear_selected_category_ids();
  static const int kSelectedCategoryIdsFieldNumber = 1;
  ::google::protobuf::uint64 selected_category_ids(int index) const;
  void set_selected_category_ids(int index, ::google::protobuf::uint64 value);
  void add_selected_category_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      selected_category_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_selected_category_ids();

  // repeated uint64 bookmarked_doc_ids = 2 [packed = true];
  int bookmarked_doc_ids_size() const;
  void clear_bookmarked_doc_ids();
  static const int kBookmarkedDocIdsFieldNumber = 2;
  ::google::protobuf::uint64 bookmarked_doc_ids(int index) const;
  void set_bookmarked_doc_ids(int index, ::google::protobuf::uint64 value);
  void add_bookmarked_doc_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bookmarked_doc_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bookmarked_doc_ids();

  // repeated uint64 excluded_source_ids = 3 [packed = true];
  int excluded_source_ids_size() const;
  void clear_excluded_source_ids();
  static const int kExcludedSourceIdsFieldNumber = 3;
  ::google::protobuf::uint64 excluded_source_ids(int index) const;
  void set_excluded_source_ids(int index, ::google::protobuf::uint64 value);
  void add_excluded_source_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      excluded_source_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_excluded_source_ids();

  // repeated uint64 included_source_ids = 4 [packed = true];
  int included_source_ids_size() const;
  void clear_included_source_ids();
  static const int kIncludedSourceIdsFieldNumber = 4;
  ::google::protobuf::uint64 included_source_ids(int index) const;
  void set_included_source_ids(int index, ::google::protobuf::uint64 value);
  void add_included_source_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      included_source_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_included_source_ids();

  // @@protoc_insertion_point(class_scope:stepan.pb.UserSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > selected_category_ids_;
  mutable int _selected_category_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bookmarked_doc_ids_;
  mutable int _bookmarked_doc_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > excluded_source_ids_;
  mutable int _excluded_source_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > included_source_ids_;
  mutable int _included_source_ids_cached_byte_size_;
  friend struct protobuf_stepan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StepanPpnInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stepan.pb.StepanPpnInfo) */ {
 public:
  StepanPpnInfo();
  virtual ~StepanPpnInfo();

  StepanPpnInfo(const StepanPpnInfo& from);

  inline StepanPpnInfo& operator=(const StepanPpnInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StepanPpnInfo(StepanPpnInfo&& from) noexcept
    : StepanPpnInfo() {
    *this = ::std::move(from);
  }

  inline StepanPpnInfo& operator=(StepanPpnInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StepanPpnInfo& default_instance();

  static inline const StepanPpnInfo* internal_default_instance() {
    return reinterpret_cast<const StepanPpnInfo*>(
               &_StepanPpnInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StepanPpnInfo* other);
  friend void swap(StepanPpnInfo& a, StepanPpnInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StepanPpnInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  StepanPpnInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StepanPpnInfo& from);
  void MergeFrom(const StepanPpnInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StepanPpnInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 db_update_ts = 2 [default = 0];
  bool has_db_update_ts() const;
  void clear_db_update_ts();
  static const int kDbUpdateTsFieldNumber = 2;
  ::google::protobuf::uint64 db_update_ts() const;
  void set_db_update_ts(::google::protobuf::uint64 value);

  // required int32 scroll_position = 1 [default = 0];
  bool has_scroll_position() const;
  void clear_scroll_position();
  static const int kScrollPositionFieldNumber = 1;
  ::google::protobuf::int32 scroll_position() const;
  void set_scroll_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stepan.pb.StepanPpnInfo)
 private:
  void set_has_scroll_position();
  void clear_has_scroll_position();
  void set_has_db_update_ts();
  void clear_has_db_update_ts();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 db_update_ts_;
  ::google::protobuf::int32 scroll_position_;
  friend struct protobuf_stepan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stepan.pb.SessionState) */ {
 public:
  SessionState();
  virtual ~SessionState();

  SessionState(const SessionState& from);

  inline SessionState& operator=(const SessionState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionState(SessionState&& from) noexcept
    : SessionState() {
    *this = ::std::move(from);
  }

  inline SessionState& operator=(SessionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionState& default_instance();

  static inline const SessionState* internal_default_instance() {
    return reinterpret_cast<const SessionState*>(
               &_SessionState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SessionState* other);
  friend void swap(SessionState& a, SessionState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionState* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionState& from);
  void MergeFrom(const SessionState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string last_query_hash = 103;
  bool has_last_query_hash() const;
  void clear_last_query_hash();
  static const int kLastQueryHashFieldNumber = 103;
  const ::std::string& last_query_hash() const;
  void set_last_query_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_last_query_hash(::std::string&& value);
  #endif
  void set_last_query_hash(const char* value);
  void set_last_query_hash(const char* value, size_t size);
  ::std::string* mutable_last_query_hash();
  ::std::string* release_last_query_hash();
  void set_allocated_last_query_hash(::std::string* last_query_hash);

  // optional string reco_session_id = 105;
  bool has_reco_session_id() const;
  void clear_reco_session_id();
  static const int kRecoSessionIdFieldNumber = 105;
  const ::std::string& reco_session_id() const;
  void set_reco_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_reco_session_id(::std::string&& value);
  #endif
  void set_reco_session_id(const char* value);
  void set_reco_session_id(const char* value, size_t size);
  ::std::string* mutable_reco_session_id();
  ::std::string* release_reco_session_id();
  void set_allocated_reco_session_id(::std::string* reco_session_id);

  // optional .stepan.pb.CosmoCacheCursor cosmo_cache_cursor = 2;
  bool has_cosmo_cache_cursor() const;
  void clear_cosmo_cache_cursor();
  static const int kCosmoCacheCursorFieldNumber = 2;
  const ::stepan::pb::CosmoCacheCursor& cosmo_cache_cursor() const;
  ::stepan::pb::CosmoCacheCursor* mutable_cosmo_cache_cursor();
  ::stepan::pb::CosmoCacheCursor* release_cosmo_cache_cursor();
  void set_allocated_cosmo_cache_cursor(::stepan::pb::CosmoCacheCursor* cosmo_cache_cursor);

  // optional .stepan.pb.SearchCursor search_cursor = 3;
  bool has_search_cursor() const;
  void clear_search_cursor();
  static const int kSearchCursorFieldNumber = 3;
  const ::stepan::pb::SearchCursor& search_cursor() const;
  ::stepan::pb::SearchCursor* mutable_search_cursor();
  ::stepan::pb::SearchCursor* release_search_cursor();
  void set_allocated_search_cursor(::stepan::pb::SearchCursor* search_cursor);

  // optional .stepan.pb.UserSettings user_settings = 4;
  bool has_user_settings() const;
  void clear_user_settings();
  static const int kUserSettingsFieldNumber = 4;
  const ::stepan::pb::UserSettings& user_settings() const;
  ::stepan::pb::UserSettings* mutable_user_settings();
  ::stepan::pb::UserSettings* release_user_settings();
  void set_allocated_user_settings(::stepan::pb::UserSettings* user_settings);

  // optional .stepan.pb.StepanPpnInfo stepan_ppn_info = 104;
  bool has_stepan_ppn_info() const;
  void clear_stepan_ppn_info();
  static const int kStepanPpnInfoFieldNumber = 104;
  const ::stepan::pb::StepanPpnInfo& stepan_ppn_info() const;
  ::stepan::pb::StepanPpnInfo* mutable_stepan_ppn_info();
  ::stepan::pb::StepanPpnInfo* release_stepan_ppn_info();
  void set_allocated_stepan_ppn_info(::stepan::pb::StepanPpnInfo* stepan_ppn_info);

  // required uint64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional int32 promo_nut_pos = 102 [default = 0];
  bool has_promo_nut_pos() const;
  void clear_promo_nut_pos();
  static const int kPromoNutPosFieldNumber = 102;
  ::google::protobuf::int32 promo_nut_pos() const;
  void set_promo_nut_pos(::google::protobuf::int32 value);

  // optional int32 flags = 5 [default = 0];
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 5;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // optional int32 bookmark_list_pos = 101 [default = 0];
  bool has_bookmark_list_pos() const;
  void clear_bookmark_list_pos();
  static const int kBookmarkListPosFieldNumber = 101;
  ::google::protobuf::int32 bookmark_list_pos() const;
  void set_bookmark_list_pos(::google::protobuf::int32 value);

  // optional uint64 last_queried_categories = 100 [default = 0];
  bool has_last_queried_categories() const;
  void clear_last_queried_categories();
  static const int kLastQueriedCategoriesFieldNumber = 100;
  ::google::protobuf::uint64 last_queried_categories() const;
  void set_last_queried_categories(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:stepan.pb.SessionState)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_cosmo_cache_cursor();
  void clear_has_cosmo_cache_cursor();
  void set_has_search_cursor();
  void clear_has_search_cursor();
  void set_has_user_settings();
  void clear_has_user_settings();
  void set_has_flags();
  void clear_has_flags();
  void set_has_last_queried_categories();
  void clear_has_last_queried_categories();
  void set_has_bookmark_list_pos();
  void clear_has_bookmark_list_pos();
  void set_has_promo_nut_pos();
  void clear_has_promo_nut_pos();
  void set_has_last_query_hash();
  void clear_has_last_query_hash();
  void set_has_stepan_ppn_info();
  void clear_has_stepan_ppn_info();
  void set_has_reco_session_id();
  void clear_has_reco_session_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr last_query_hash_;
  ::google::protobuf::internal::ArenaStringPtr reco_session_id_;
  ::stepan::pb::CosmoCacheCursor* cosmo_cache_cursor_;
  ::stepan::pb::SearchCursor* search_cursor_;
  ::stepan::pb::UserSettings* user_settings_;
  ::stepan::pb::StepanPpnInfo* stepan_ppn_info_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int32 promo_nut_pos_;
  ::google::protobuf::int32 flags_;
  ::google::protobuf::int32 bookmark_list_pos_;
  ::google::protobuf::uint64 last_queried_categories_;
  friend struct protobuf_stepan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExternalId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stepan.pb.ExternalId) */ {
 public:
  ExternalId();
  virtual ~ExternalId();

  ExternalId(const ExternalId& from);

  inline ExternalId& operator=(const ExternalId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalId(ExternalId&& from) noexcept
    : ExternalId() {
    *this = ::std::move(from);
  }

  inline ExternalId& operator=(ExternalId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalId& default_instance();

  static inline const ExternalId* internal_default_instance() {
    return reinterpret_cast<const ExternalId*>(
               &_ExternalId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ExternalId* other);
  friend void swap(ExternalId& a, ExternalId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalId* New() const PROTOBUF_FINAL { return New(NULL); }

  ExternalId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExternalId& from);
  void MergeFrom(const ExternalId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExternalId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stepan.pb.ExternalId)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_stepan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SocdemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stepan.pb.SocdemInfo) */ {
 public:
  SocdemInfo();
  virtual ~SocdemInfo();

  SocdemInfo(const SocdemInfo& from);

  inline SocdemInfo& operator=(const SocdemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SocdemInfo(SocdemInfo&& from) noexcept
    : SocdemInfo() {
    *this = ::std::move(from);
  }

  inline SocdemInfo& operator=(SocdemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SocdemInfo& default_instance();

  static inline const SocdemInfo* internal_default_instance() {
    return reinterpret_cast<const SocdemInfo*>(
               &_SocdemInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SocdemInfo* other);
  friend void swap(SocdemInfo& a, SocdemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SocdemInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SocdemInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SocdemInfo& from);
  void MergeFrom(const SocdemInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SocdemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 birthday = 2;
  bool has_birthday() const;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 2;
  ::google::protobuf::int64 birthday() const;
  void set_birthday(::google::protobuf::int64 value);

  // optional bool gender = 1;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 1;
  bool gender() const;
  void set_gender(bool value);

  // @@protoc_insertion_point(class_scope:stepan.pb.SocdemInfo)
 private:
  void set_has_gender();
  void clear_has_gender();
  void set_has_birthday();
  void clear_has_birthday();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 birthday_;
  bool gender_;
  friend struct protobuf_stepan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stepan.pb.UserAccount) */ {
 public:
  UserAccount();
  virtual ~UserAccount();

  UserAccount(const UserAccount& from);

  inline UserAccount& operator=(const UserAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAccount(UserAccount&& from) noexcept
    : UserAccount() {
    *this = ::std::move(from);
  }

  inline UserAccount& operator=(UserAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAccount& default_instance();

  static inline const UserAccount* internal_default_instance() {
    return reinterpret_cast<const UserAccount*>(
               &_UserAccount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UserAccount* other);
  friend void swap(UserAccount& a, UserAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAccount* New() const PROTOBUF_FINAL { return New(NULL); }

  UserAccount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserAccount& from);
  void MergeFrom(const UserAccount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .stepan.pb.ExternalId user_creds = 2;
  int user_creds_size() const;
  void clear_user_creds();
  static const int kUserCredsFieldNumber = 2;
  const ::stepan::pb::ExternalId& user_creds(int index) const;
  ::stepan::pb::ExternalId* mutable_user_creds(int index);
  ::stepan::pb::ExternalId* add_user_creds();
  ::google::protobuf::RepeatedPtrField< ::stepan::pb::ExternalId >*
      mutable_user_creds();
  const ::google::protobuf::RepeatedPtrField< ::stepan::pb::ExternalId >&
      user_creds() const;

  // optional .stepan.pb.UserSettings user_settings = 3;
  bool has_user_settings() const;
  void clear_user_settings();
  static const int kUserSettingsFieldNumber = 3;
  const ::stepan::pb::UserSettings& user_settings() const;
  ::stepan::pb::UserSettings* mutable_user_settings();
  ::stepan::pb::UserSettings* release_user_settings();
  void set_allocated_user_settings(::stepan::pb::UserSettings* user_settings);

  // optional .stepan.pb.SocdemInfo socdem_info = 4;
  bool has_socdem_info() const;
  void clear_socdem_info();
  static const int kSocdemInfoFieldNumber = 4;
  const ::stepan::pb::SocdemInfo& socdem_info() const;
  ::stepan::pb::SocdemInfo* mutable_socdem_info();
  ::stepan::pb::SocdemInfo* release_socdem_info();
  void set_allocated_socdem_info(::stepan::pb::SocdemInfo* socdem_info);

  // required uint64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:stepan.pb.UserAccount)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_user_settings();
  void clear_has_user_settings();
  void set_has_socdem_info();
  void clear_has_socdem_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::stepan::pb::ExternalId > user_creds_;
  ::stepan::pb::UserSettings* user_settings_;
  ::stepan::pb::SocdemInfo* socdem_info_;
  ::google::protobuf::uint64 user_id_;
  friend struct protobuf_stepan_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CosmoCacheCursor

// required int32 pos = 1;
inline bool CosmoCacheCursor::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CosmoCacheCursor::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CosmoCacheCursor::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CosmoCacheCursor::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 CosmoCacheCursor::pos() const {
  // @@protoc_insertion_point(field_get:stepan.pb.CosmoCacheCursor.pos)
  return pos_;
}
inline void CosmoCacheCursor::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.CosmoCacheCursor.pos)
}

// required string record_id = 2;
inline bool CosmoCacheCursor::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CosmoCacheCursor::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CosmoCacheCursor::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CosmoCacheCursor::clear_record_id() {
  record_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_id();
}
inline const ::std::string& CosmoCacheCursor::record_id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.CosmoCacheCursor.record_id)
  return record_id_.GetNoArena();
}
inline void CosmoCacheCursor::set_record_id(const ::std::string& value) {
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.CosmoCacheCursor.record_id)
}
#if LANG_CXX11
inline void CosmoCacheCursor::set_record_id(::std::string&& value) {
  set_has_record_id();
  record_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.CosmoCacheCursor.record_id)
}
#endif
inline void CosmoCacheCursor::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.CosmoCacheCursor.record_id)
}
inline void CosmoCacheCursor::set_record_id(const char* value, size_t size) {
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.CosmoCacheCursor.record_id)
}
inline ::std::string* CosmoCacheCursor::mutable_record_id() {
  set_has_record_id();
  // @@protoc_insertion_point(field_mutable:stepan.pb.CosmoCacheCursor.record_id)
  return record_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmoCacheCursor::release_record_id() {
  // @@protoc_insertion_point(field_release:stepan.pb.CosmoCacheCursor.record_id)
  clear_has_record_id();
  return record_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmoCacheCursor::set_allocated_record_id(::std::string* record_id) {
  if (record_id != NULL) {
    set_has_record_id();
  } else {
    clear_has_record_id();
  }
  record_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_id);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.CosmoCacheCursor.record_id)
}

// -------------------------------------------------------------------

// SearchCursor

// required string query = 1;
inline bool SearchCursor::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchCursor::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchCursor::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchCursor::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& SearchCursor::query() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SearchCursor.query)
  return query_.GetNoArena();
}
inline void SearchCursor::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.SearchCursor.query)
}
#if LANG_CXX11
inline void SearchCursor::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.SearchCursor.query)
}
#endif
inline void SearchCursor::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.SearchCursor.query)
}
inline void SearchCursor::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.SearchCursor.query)
}
inline ::std::string* SearchCursor::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:stepan.pb.SearchCursor.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchCursor::release_query() {
  // @@protoc_insertion_point(field_release:stepan.pb.SearchCursor.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchCursor::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SearchCursor.query)
}

// required int32 pos = 2;
inline bool SearchCursor::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchCursor::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchCursor::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchCursor::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 SearchCursor::pos() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SearchCursor.pos)
  return pos_;
}
inline void SearchCursor::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SearchCursor.pos)
}

// -------------------------------------------------------------------

// UserSettings

// repeated uint64 selected_category_ids = 1 [packed = true];
inline int UserSettings::selected_category_ids_size() const {
  return selected_category_ids_.size();
}
inline void UserSettings::clear_selected_category_ids() {
  selected_category_ids_.Clear();
}
inline ::google::protobuf::uint64 UserSettings::selected_category_ids(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserSettings.selected_category_ids)
  return selected_category_ids_.Get(index);
}
inline void UserSettings::set_selected_category_ids(int index, ::google::protobuf::uint64 value) {
  selected_category_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stepan.pb.UserSettings.selected_category_ids)
}
inline void UserSettings::add_selected_category_ids(::google::protobuf::uint64 value) {
  selected_category_ids_.Add(value);
  // @@protoc_insertion_point(field_add:stepan.pb.UserSettings.selected_category_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserSettings::selected_category_ids() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserSettings.selected_category_ids)
  return selected_category_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserSettings::mutable_selected_category_ids() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserSettings.selected_category_ids)
  return &selected_category_ids_;
}

// repeated uint64 bookmarked_doc_ids = 2 [packed = true];
inline int UserSettings::bookmarked_doc_ids_size() const {
  return bookmarked_doc_ids_.size();
}
inline void UserSettings::clear_bookmarked_doc_ids() {
  bookmarked_doc_ids_.Clear();
}
inline ::google::protobuf::uint64 UserSettings::bookmarked_doc_ids(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserSettings.bookmarked_doc_ids)
  return bookmarked_doc_ids_.Get(index);
}
inline void UserSettings::set_bookmarked_doc_ids(int index, ::google::protobuf::uint64 value) {
  bookmarked_doc_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stepan.pb.UserSettings.bookmarked_doc_ids)
}
inline void UserSettings::add_bookmarked_doc_ids(::google::protobuf::uint64 value) {
  bookmarked_doc_ids_.Add(value);
  // @@protoc_insertion_point(field_add:stepan.pb.UserSettings.bookmarked_doc_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserSettings::bookmarked_doc_ids() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserSettings.bookmarked_doc_ids)
  return bookmarked_doc_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserSettings::mutable_bookmarked_doc_ids() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserSettings.bookmarked_doc_ids)
  return &bookmarked_doc_ids_;
}

// repeated uint64 excluded_source_ids = 3 [packed = true];
inline int UserSettings::excluded_source_ids_size() const {
  return excluded_source_ids_.size();
}
inline void UserSettings::clear_excluded_source_ids() {
  excluded_source_ids_.Clear();
}
inline ::google::protobuf::uint64 UserSettings::excluded_source_ids(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserSettings.excluded_source_ids)
  return excluded_source_ids_.Get(index);
}
inline void UserSettings::set_excluded_source_ids(int index, ::google::protobuf::uint64 value) {
  excluded_source_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stepan.pb.UserSettings.excluded_source_ids)
}
inline void UserSettings::add_excluded_source_ids(::google::protobuf::uint64 value) {
  excluded_source_ids_.Add(value);
  // @@protoc_insertion_point(field_add:stepan.pb.UserSettings.excluded_source_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserSettings::excluded_source_ids() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserSettings.excluded_source_ids)
  return excluded_source_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserSettings::mutable_excluded_source_ids() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserSettings.excluded_source_ids)
  return &excluded_source_ids_;
}

// repeated uint64 included_source_ids = 4 [packed = true];
inline int UserSettings::included_source_ids_size() const {
  return included_source_ids_.size();
}
inline void UserSettings::clear_included_source_ids() {
  included_source_ids_.Clear();
}
inline ::google::protobuf::uint64 UserSettings::included_source_ids(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserSettings.included_source_ids)
  return included_source_ids_.Get(index);
}
inline void UserSettings::set_included_source_ids(int index, ::google::protobuf::uint64 value) {
  included_source_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stepan.pb.UserSettings.included_source_ids)
}
inline void UserSettings::add_included_source_ids(::google::protobuf::uint64 value) {
  included_source_ids_.Add(value);
  // @@protoc_insertion_point(field_add:stepan.pb.UserSettings.included_source_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserSettings::included_source_ids() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserSettings.included_source_ids)
  return included_source_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserSettings::mutable_included_source_ids() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserSettings.included_source_ids)
  return &included_source_ids_;
}

// -------------------------------------------------------------------

// StepanPpnInfo

// required int32 scroll_position = 1 [default = 0];
inline bool StepanPpnInfo::has_scroll_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StepanPpnInfo::set_has_scroll_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StepanPpnInfo::clear_has_scroll_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StepanPpnInfo::clear_scroll_position() {
  scroll_position_ = 0;
  clear_has_scroll_position();
}
inline ::google::protobuf::int32 StepanPpnInfo::scroll_position() const {
  // @@protoc_insertion_point(field_get:stepan.pb.StepanPpnInfo.scroll_position)
  return scroll_position_;
}
inline void StepanPpnInfo::set_scroll_position(::google::protobuf::int32 value) {
  set_has_scroll_position();
  scroll_position_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.StepanPpnInfo.scroll_position)
}

// required uint64 db_update_ts = 2 [default = 0];
inline bool StepanPpnInfo::has_db_update_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StepanPpnInfo::set_has_db_update_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StepanPpnInfo::clear_has_db_update_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StepanPpnInfo::clear_db_update_ts() {
  db_update_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_db_update_ts();
}
inline ::google::protobuf::uint64 StepanPpnInfo::db_update_ts() const {
  // @@protoc_insertion_point(field_get:stepan.pb.StepanPpnInfo.db_update_ts)
  return db_update_ts_;
}
inline void StepanPpnInfo::set_db_update_ts(::google::protobuf::uint64 value) {
  set_has_db_update_ts();
  db_update_ts_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.StepanPpnInfo.db_update_ts)
}

// -------------------------------------------------------------------

// SessionState

// required uint64 user_id = 1;
inline bool SessionState::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SessionState::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SessionState::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SessionState::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 SessionState::user_id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.user_id)
  return user_id_;
}
inline void SessionState::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.user_id)
}

// optional .stepan.pb.CosmoCacheCursor cosmo_cache_cursor = 2;
inline bool SessionState::has_cosmo_cache_cursor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionState::set_has_cosmo_cache_cursor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionState::clear_has_cosmo_cache_cursor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionState::clear_cosmo_cache_cursor() {
  if (cosmo_cache_cursor_ != NULL) cosmo_cache_cursor_->::stepan::pb::CosmoCacheCursor::Clear();
  clear_has_cosmo_cache_cursor();
}
inline const ::stepan::pb::CosmoCacheCursor& SessionState::cosmo_cache_cursor() const {
  const ::stepan::pb::CosmoCacheCursor* p = cosmo_cache_cursor_;
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.cosmo_cache_cursor)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::CosmoCacheCursor*>(
      &::stepan::pb::_CosmoCacheCursor_default_instance_);
}
inline ::stepan::pb::CosmoCacheCursor* SessionState::mutable_cosmo_cache_cursor() {
  set_has_cosmo_cache_cursor();
  if (cosmo_cache_cursor_ == NULL) {
    cosmo_cache_cursor_ = new ::stepan::pb::CosmoCacheCursor;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.cosmo_cache_cursor)
  return cosmo_cache_cursor_;
}
inline ::stepan::pb::CosmoCacheCursor* SessionState::release_cosmo_cache_cursor() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.cosmo_cache_cursor)
  clear_has_cosmo_cache_cursor();
  ::stepan::pb::CosmoCacheCursor* temp = cosmo_cache_cursor_;
  cosmo_cache_cursor_ = NULL;
  return temp;
}
inline void SessionState::set_allocated_cosmo_cache_cursor(::stepan::pb::CosmoCacheCursor* cosmo_cache_cursor) {
  delete cosmo_cache_cursor_;
  cosmo_cache_cursor_ = cosmo_cache_cursor;
  if (cosmo_cache_cursor) {
    set_has_cosmo_cache_cursor();
  } else {
    clear_has_cosmo_cache_cursor();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.cosmo_cache_cursor)
}

// optional .stepan.pb.SearchCursor search_cursor = 3;
inline bool SessionState::has_search_cursor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionState::set_has_search_cursor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionState::clear_has_search_cursor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionState::clear_search_cursor() {
  if (search_cursor_ != NULL) search_cursor_->::stepan::pb::SearchCursor::Clear();
  clear_has_search_cursor();
}
inline const ::stepan::pb::SearchCursor& SessionState::search_cursor() const {
  const ::stepan::pb::SearchCursor* p = search_cursor_;
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.search_cursor)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::SearchCursor*>(
      &::stepan::pb::_SearchCursor_default_instance_);
}
inline ::stepan::pb::SearchCursor* SessionState::mutable_search_cursor() {
  set_has_search_cursor();
  if (search_cursor_ == NULL) {
    search_cursor_ = new ::stepan::pb::SearchCursor;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.search_cursor)
  return search_cursor_;
}
inline ::stepan::pb::SearchCursor* SessionState::release_search_cursor() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.search_cursor)
  clear_has_search_cursor();
  ::stepan::pb::SearchCursor* temp = search_cursor_;
  search_cursor_ = NULL;
  return temp;
}
inline void SessionState::set_allocated_search_cursor(::stepan::pb::SearchCursor* search_cursor) {
  delete search_cursor_;
  search_cursor_ = search_cursor;
  if (search_cursor) {
    set_has_search_cursor();
  } else {
    clear_has_search_cursor();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.search_cursor)
}

// optional .stepan.pb.UserSettings user_settings = 4;
inline bool SessionState::has_user_settings() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionState::set_has_user_settings() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionState::clear_has_user_settings() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionState::clear_user_settings() {
  if (user_settings_ != NULL) user_settings_->::stepan::pb::UserSettings::Clear();
  clear_has_user_settings();
}
inline const ::stepan::pb::UserSettings& SessionState::user_settings() const {
  const ::stepan::pb::UserSettings* p = user_settings_;
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.user_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::UserSettings*>(
      &::stepan::pb::_UserSettings_default_instance_);
}
inline ::stepan::pb::UserSettings* SessionState::mutable_user_settings() {
  set_has_user_settings();
  if (user_settings_ == NULL) {
    user_settings_ = new ::stepan::pb::UserSettings;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.user_settings)
  return user_settings_;
}
inline ::stepan::pb::UserSettings* SessionState::release_user_settings() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.user_settings)
  clear_has_user_settings();
  ::stepan::pb::UserSettings* temp = user_settings_;
  user_settings_ = NULL;
  return temp;
}
inline void SessionState::set_allocated_user_settings(::stepan::pb::UserSettings* user_settings) {
  delete user_settings_;
  user_settings_ = user_settings;
  if (user_settings) {
    set_has_user_settings();
  } else {
    clear_has_user_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.user_settings)
}

// optional int32 flags = 5 [default = 0];
inline bool SessionState::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SessionState::set_has_flags() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SessionState::clear_has_flags() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SessionState::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 SessionState::flags() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.flags)
  return flags_;
}
inline void SessionState::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.flags)
}

// optional uint64 last_queried_categories = 100 [default = 0];
inline bool SessionState::has_last_queried_categories() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SessionState::set_has_last_queried_categories() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SessionState::clear_has_last_queried_categories() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SessionState::clear_last_queried_categories() {
  last_queried_categories_ = GOOGLE_ULONGLONG(0);
  clear_has_last_queried_categories();
}
inline ::google::protobuf::uint64 SessionState::last_queried_categories() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.last_queried_categories)
  return last_queried_categories_;
}
inline void SessionState::set_last_queried_categories(::google::protobuf::uint64 value) {
  set_has_last_queried_categories();
  last_queried_categories_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.last_queried_categories)
}

// optional int32 bookmark_list_pos = 101 [default = 0];
inline bool SessionState::has_bookmark_list_pos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SessionState::set_has_bookmark_list_pos() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SessionState::clear_has_bookmark_list_pos() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SessionState::clear_bookmark_list_pos() {
  bookmark_list_pos_ = 0;
  clear_has_bookmark_list_pos();
}
inline ::google::protobuf::int32 SessionState::bookmark_list_pos() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.bookmark_list_pos)
  return bookmark_list_pos_;
}
inline void SessionState::set_bookmark_list_pos(::google::protobuf::int32 value) {
  set_has_bookmark_list_pos();
  bookmark_list_pos_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.bookmark_list_pos)
}

// optional int32 promo_nut_pos = 102 [default = 0];
inline bool SessionState::has_promo_nut_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SessionState::set_has_promo_nut_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SessionState::clear_has_promo_nut_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SessionState::clear_promo_nut_pos() {
  promo_nut_pos_ = 0;
  clear_has_promo_nut_pos();
}
inline ::google::protobuf::int32 SessionState::promo_nut_pos() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.promo_nut_pos)
  return promo_nut_pos_;
}
inline void SessionState::set_promo_nut_pos(::google::protobuf::int32 value) {
  set_has_promo_nut_pos();
  promo_nut_pos_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.promo_nut_pos)
}

// optional string last_query_hash = 103;
inline bool SessionState::has_last_query_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionState::set_has_last_query_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionState::clear_has_last_query_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionState::clear_last_query_hash() {
  last_query_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_query_hash();
}
inline const ::std::string& SessionState::last_query_hash() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.last_query_hash)
  return last_query_hash_.GetNoArena();
}
inline void SessionState::set_last_query_hash(const ::std::string& value) {
  set_has_last_query_hash();
  last_query_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.last_query_hash)
}
#if LANG_CXX11
inline void SessionState::set_last_query_hash(::std::string&& value) {
  set_has_last_query_hash();
  last_query_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.SessionState.last_query_hash)
}
#endif
inline void SessionState::set_last_query_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_query_hash();
  last_query_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.SessionState.last_query_hash)
}
inline void SessionState::set_last_query_hash(const char* value, size_t size) {
  set_has_last_query_hash();
  last_query_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.SessionState.last_query_hash)
}
inline ::std::string* SessionState::mutable_last_query_hash() {
  set_has_last_query_hash();
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.last_query_hash)
  return last_query_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionState::release_last_query_hash() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.last_query_hash)
  clear_has_last_query_hash();
  return last_query_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_allocated_last_query_hash(::std::string* last_query_hash) {
  if (last_query_hash != NULL) {
    set_has_last_query_hash();
  } else {
    clear_has_last_query_hash();
  }
  last_query_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_query_hash);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.last_query_hash)
}

// optional .stepan.pb.StepanPpnInfo stepan_ppn_info = 104;
inline bool SessionState::has_stepan_ppn_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionState::set_has_stepan_ppn_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SessionState::clear_has_stepan_ppn_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SessionState::clear_stepan_ppn_info() {
  if (stepan_ppn_info_ != NULL) stepan_ppn_info_->::stepan::pb::StepanPpnInfo::Clear();
  clear_has_stepan_ppn_info();
}
inline const ::stepan::pb::StepanPpnInfo& SessionState::stepan_ppn_info() const {
  const ::stepan::pb::StepanPpnInfo* p = stepan_ppn_info_;
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.stepan_ppn_info)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::StepanPpnInfo*>(
      &::stepan::pb::_StepanPpnInfo_default_instance_);
}
inline ::stepan::pb::StepanPpnInfo* SessionState::mutable_stepan_ppn_info() {
  set_has_stepan_ppn_info();
  if (stepan_ppn_info_ == NULL) {
    stepan_ppn_info_ = new ::stepan::pb::StepanPpnInfo;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.stepan_ppn_info)
  return stepan_ppn_info_;
}
inline ::stepan::pb::StepanPpnInfo* SessionState::release_stepan_ppn_info() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.stepan_ppn_info)
  clear_has_stepan_ppn_info();
  ::stepan::pb::StepanPpnInfo* temp = stepan_ppn_info_;
  stepan_ppn_info_ = NULL;
  return temp;
}
inline void SessionState::set_allocated_stepan_ppn_info(::stepan::pb::StepanPpnInfo* stepan_ppn_info) {
  delete stepan_ppn_info_;
  stepan_ppn_info_ = stepan_ppn_info;
  if (stepan_ppn_info) {
    set_has_stepan_ppn_info();
  } else {
    clear_has_stepan_ppn_info();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.stepan_ppn_info)
}

// optional string reco_session_id = 105;
inline bool SessionState::has_reco_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionState::set_has_reco_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionState::clear_has_reco_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionState::clear_reco_session_id() {
  reco_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reco_session_id();
}
inline const ::std::string& SessionState::reco_session_id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SessionState.reco_session_id)
  return reco_session_id_.GetNoArena();
}
inline void SessionState::set_reco_session_id(const ::std::string& value) {
  set_has_reco_session_id();
  reco_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.SessionState.reco_session_id)
}
#if LANG_CXX11
inline void SessionState::set_reco_session_id(::std::string&& value) {
  set_has_reco_session_id();
  reco_session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.SessionState.reco_session_id)
}
#endif
inline void SessionState::set_reco_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reco_session_id();
  reco_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.SessionState.reco_session_id)
}
inline void SessionState::set_reco_session_id(const char* value, size_t size) {
  set_has_reco_session_id();
  reco_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.SessionState.reco_session_id)
}
inline ::std::string* SessionState::mutable_reco_session_id() {
  set_has_reco_session_id();
  // @@protoc_insertion_point(field_mutable:stepan.pb.SessionState.reco_session_id)
  return reco_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionState::release_reco_session_id() {
  // @@protoc_insertion_point(field_release:stepan.pb.SessionState.reco_session_id)
  clear_has_reco_session_id();
  return reco_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_allocated_reco_session_id(::std::string* reco_session_id) {
  if (reco_session_id != NULL) {
    set_has_reco_session_id();
  } else {
    clear_has_reco_session_id();
  }
  reco_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reco_session_id);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.SessionState.reco_session_id)
}

// -------------------------------------------------------------------

// ExternalId

// required int32 type = 1;
inline bool ExternalId::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternalId::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExternalId::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExternalId::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ExternalId::type() const {
  // @@protoc_insertion_point(field_get:stepan.pb.ExternalId.type)
  return type_;
}
inline void ExternalId::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.ExternalId.type)
}

// required string id = 2;
inline bool ExternalId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ExternalId::id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.ExternalId.id)
  return id_.GetNoArena();
}
inline void ExternalId::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stepan.pb.ExternalId.id)
}
#if LANG_CXX11
inline void ExternalId::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stepan.pb.ExternalId.id)
}
#endif
inline void ExternalId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stepan.pb.ExternalId.id)
}
inline void ExternalId::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stepan.pb.ExternalId.id)
}
inline ::std::string* ExternalId::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:stepan.pb.ExternalId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalId::release_id() {
  // @@protoc_insertion_point(field_release:stepan.pb.ExternalId.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.ExternalId.id)
}

// -------------------------------------------------------------------

// SocdemInfo

// optional bool gender = 1;
inline bool SocdemInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SocdemInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SocdemInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SocdemInfo::clear_gender() {
  gender_ = false;
  clear_has_gender();
}
inline bool SocdemInfo::gender() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SocdemInfo.gender)
  return gender_;
}
inline void SocdemInfo::set_gender(bool value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SocdemInfo.gender)
}

// optional int64 birthday = 2;
inline bool SocdemInfo::has_birthday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocdemInfo::set_has_birthday() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SocdemInfo::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SocdemInfo::clear_birthday() {
  birthday_ = GOOGLE_LONGLONG(0);
  clear_has_birthday();
}
inline ::google::protobuf::int64 SocdemInfo::birthday() const {
  // @@protoc_insertion_point(field_get:stepan.pb.SocdemInfo.birthday)
  return birthday_;
}
inline void SocdemInfo::set_birthday(::google::protobuf::int64 value) {
  set_has_birthday();
  birthday_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.SocdemInfo.birthday)
}

// -------------------------------------------------------------------

// UserAccount

// required uint64 user_id = 1;
inline bool UserAccount::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserAccount::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserAccount::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserAccount::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UserAccount::user_id() const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserAccount.user_id)
  return user_id_;
}
inline void UserAccount::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:stepan.pb.UserAccount.user_id)
}

// repeated .stepan.pb.ExternalId user_creds = 2;
inline int UserAccount::user_creds_size() const {
  return user_creds_.size();
}
inline void UserAccount::clear_user_creds() {
  user_creds_.Clear();
}
inline const ::stepan::pb::ExternalId& UserAccount::user_creds(int index) const {
  // @@protoc_insertion_point(field_get:stepan.pb.UserAccount.user_creds)
  return user_creds_.Get(index);
}
inline ::stepan::pb::ExternalId* UserAccount::mutable_user_creds(int index) {
  // @@protoc_insertion_point(field_mutable:stepan.pb.UserAccount.user_creds)
  return user_creds_.Mutable(index);
}
inline ::stepan::pb::ExternalId* UserAccount::add_user_creds() {
  // @@protoc_insertion_point(field_add:stepan.pb.UserAccount.user_creds)
  return user_creds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::stepan::pb::ExternalId >*
UserAccount::mutable_user_creds() {
  // @@protoc_insertion_point(field_mutable_list:stepan.pb.UserAccount.user_creds)
  return &user_creds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::stepan::pb::ExternalId >&
UserAccount::user_creds() const {
  // @@protoc_insertion_point(field_list:stepan.pb.UserAccount.user_creds)
  return user_creds_;
}

// optional .stepan.pb.UserSettings user_settings = 3;
inline bool UserAccount::has_user_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAccount::set_has_user_settings() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAccount::clear_has_user_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAccount::clear_user_settings() {
  if (user_settings_ != NULL) user_settings_->::stepan::pb::UserSettings::Clear();
  clear_has_user_settings();
}
inline const ::stepan::pb::UserSettings& UserAccount::user_settings() const {
  const ::stepan::pb::UserSettings* p = user_settings_;
  // @@protoc_insertion_point(field_get:stepan.pb.UserAccount.user_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::UserSettings*>(
      &::stepan::pb::_UserSettings_default_instance_);
}
inline ::stepan::pb::UserSettings* UserAccount::mutable_user_settings() {
  set_has_user_settings();
  if (user_settings_ == NULL) {
    user_settings_ = new ::stepan::pb::UserSettings;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.UserAccount.user_settings)
  return user_settings_;
}
inline ::stepan::pb::UserSettings* UserAccount::release_user_settings() {
  // @@protoc_insertion_point(field_release:stepan.pb.UserAccount.user_settings)
  clear_has_user_settings();
  ::stepan::pb::UserSettings* temp = user_settings_;
  user_settings_ = NULL;
  return temp;
}
inline void UserAccount::set_allocated_user_settings(::stepan::pb::UserSettings* user_settings) {
  delete user_settings_;
  user_settings_ = user_settings;
  if (user_settings) {
    set_has_user_settings();
  } else {
    clear_has_user_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.UserAccount.user_settings)
}

// optional .stepan.pb.SocdemInfo socdem_info = 4;
inline bool UserAccount::has_socdem_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAccount::set_has_socdem_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAccount::clear_has_socdem_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAccount::clear_socdem_info() {
  if (socdem_info_ != NULL) socdem_info_->::stepan::pb::SocdemInfo::Clear();
  clear_has_socdem_info();
}
inline const ::stepan::pb::SocdemInfo& UserAccount::socdem_info() const {
  const ::stepan::pb::SocdemInfo* p = socdem_info_;
  // @@protoc_insertion_point(field_get:stepan.pb.UserAccount.socdem_info)
  return p != NULL ? *p : *reinterpret_cast<const ::stepan::pb::SocdemInfo*>(
      &::stepan::pb::_SocdemInfo_default_instance_);
}
inline ::stepan::pb::SocdemInfo* UserAccount::mutable_socdem_info() {
  set_has_socdem_info();
  if (socdem_info_ == NULL) {
    socdem_info_ = new ::stepan::pb::SocdemInfo;
  }
  // @@protoc_insertion_point(field_mutable:stepan.pb.UserAccount.socdem_info)
  return socdem_info_;
}
inline ::stepan::pb::SocdemInfo* UserAccount::release_socdem_info() {
  // @@protoc_insertion_point(field_release:stepan.pb.UserAccount.socdem_info)
  clear_has_socdem_info();
  ::stepan::pb::SocdemInfo* temp = socdem_info_;
  socdem_info_ = NULL;
  return temp;
}
inline void UserAccount::set_allocated_socdem_info(::stepan::pb::SocdemInfo* socdem_info) {
  delete socdem_info_;
  socdem_info_ = socdem_info;
  if (socdem_info) {
    set_has_socdem_info();
  } else {
    clear_has_socdem_info();
  }
  // @@protoc_insertion_point(field_set_allocated:stepan.pb.UserAccount.socdem_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace stepan

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stepan_2eproto__INCLUDED
