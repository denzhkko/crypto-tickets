// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stepan_pixel_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stepan_pixel_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmo {
namespace pb {
class StepanPixelMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StepanPixelMetaInfo>
     _instance;
} _StepanPixelMetaInfo_default_instance_;

namespace protobuf_stepan_5fpixel_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPixelMetaInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPixelMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPixelMetaInfo, metrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPixelMetaInfo, document_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepanPixelMetaInfo, interleaving_info_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(StepanPixelMetaInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_StepanPixelMetaInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "stepan_pixel_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cosmo::pb::protobuf_cosmo_5fresult_2eproto::InitDefaults();
  _StepanPixelMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StepanPixelMetaInfo_default_instance_);_StepanPixelMetaInfo_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::cosmo::pb::Metrics*>(
      ::cosmo::pb::Metrics::internal_default_instance());
  _StepanPixelMetaInfo_default_instance_._instance.get_mutable()->document_info_ = const_cast< ::cosmo::pb::DocumentInfo*>(
      ::cosmo::pb::DocumentInfo::internal_default_instance());
  _StepanPixelMetaInfo_default_instance_._instance.get_mutable()->interleaving_info_ = const_cast< ::cosmo::pb::InterleavingInfo*>(
      ::cosmo::pb::InterleavingInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027stepan_pixel_info.proto\022\010cosmo.pb\032\022cos"
      "mo_result.proto\"\237\001\n\023StepanPixelMetaInfo\022"
      "\"\n\007metrics\030\001 \001(\0132\021.cosmo.pb.Metrics\022-\n\rd"
      "ocument_info\030\002 \001(\0132\026.cosmo.pb.DocumentIn"
      "fo\0225\n\021interleaving_info\030\003 \001(\0132\032.cosmo.pb"
      ".InterleavingInfoB\032B\030StepanPixelMetaInfo"
      "Proto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stepan_pixel_info.proto", &protobuf_RegisterTypes);
  ::cosmo::pb::protobuf_cosmo_5fresult_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_stepan_5fpixel_5finfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepanPixelMetaInfo::kMetricsFieldNumber;
const int StepanPixelMetaInfo::kDocumentInfoFieldNumber;
const int StepanPixelMetaInfo::kInterleavingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepanPixelMetaInfo::StepanPixelMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stepan_5fpixel_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.StepanPixelMetaInfo)
}
StepanPixelMetaInfo::StepanPixelMetaInfo(const StepanPixelMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metrics()) {
    metrics_ = new ::cosmo::pb::Metrics(*from.metrics_);
  } else {
    metrics_ = NULL;
  }
  if (from.has_document_info()) {
    document_info_ = new ::cosmo::pb::DocumentInfo(*from.document_info_);
  } else {
    document_info_ = NULL;
  }
  if (from.has_interleaving_info()) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo(*from.interleaving_info_);
  } else {
    interleaving_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.StepanPixelMetaInfo)
}

void StepanPixelMetaInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&metrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interleaving_info_) -
      reinterpret_cast<char*>(&metrics_)) + sizeof(interleaving_info_));
}

StepanPixelMetaInfo::~StepanPixelMetaInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.StepanPixelMetaInfo)
  SharedDtor();
}

void StepanPixelMetaInfo::SharedDtor() {
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete document_info_;
  if (this != internal_default_instance()) delete interleaving_info_;
}

void StepanPixelMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepanPixelMetaInfo::descriptor() {
  protobuf_stepan_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepanPixelMetaInfo& StepanPixelMetaInfo::default_instance() {
  protobuf_stepan_5fpixel_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

StepanPixelMetaInfo* StepanPixelMetaInfo::New(::google::protobuf::Arena* arena) const {
  StepanPixelMetaInfo* n = new StepanPixelMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StepanPixelMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.StepanPixelMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metrics_ != NULL);
      metrics_->::cosmo::pb::Metrics::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(document_info_ != NULL);
      document_info_->::cosmo::pb::DocumentInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(interleaving_info_ != NULL);
      interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StepanPixelMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.StepanPixelMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.Metrics metrics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentInfo document_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interleaving_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.StepanPixelMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.StepanPixelMetaInfo)
  return false;
#undef DO_
}

void StepanPixelMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.StepanPixelMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.Metrics metrics = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metrics_, output);
  }

  // optional .cosmo.pb.DocumentInfo document_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->document_info_, output);
  }

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->interleaving_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.StepanPixelMetaInfo)
}

::google::protobuf::uint8* StepanPixelMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.StepanPixelMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.Metrics metrics = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->metrics_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentInfo document_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->document_info_, deterministic, target);
  }

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->interleaving_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.StepanPixelMetaInfo)
  return target;
}

size_t StepanPixelMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.StepanPixelMetaInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .cosmo.pb.Metrics metrics = 1;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metrics_);
    }

    // optional .cosmo.pb.DocumentInfo document_info = 2;
    if (has_document_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_info_);
    }

    // optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
    if (has_interleaving_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interleaving_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepanPixelMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.StepanPixelMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StepanPixelMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepanPixelMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.StepanPixelMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.StepanPixelMetaInfo)
    MergeFrom(*source);
  }
}

void StepanPixelMetaInfo::MergeFrom(const StepanPixelMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.StepanPixelMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_metrics()->::cosmo::pb::Metrics::MergeFrom(from.metrics());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_document_info()->::cosmo::pb::DocumentInfo::MergeFrom(from.document_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_interleaving_info()->::cosmo::pb::InterleavingInfo::MergeFrom(from.interleaving_info());
    }
  }
}

void StepanPixelMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.StepanPixelMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepanPixelMetaInfo::CopyFrom(const StepanPixelMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.StepanPixelMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepanPixelMetaInfo::IsInitialized() const {
  if (has_metrics()) {
    if (!this->metrics_->IsInitialized()) return false;
  }
  if (has_interleaving_info()) {
    if (!this->interleaving_info_->IsInitialized()) return false;
  }
  return true;
}

void StepanPixelMetaInfo::Swap(StepanPixelMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StepanPixelMetaInfo::InternalSwap(StepanPixelMetaInfo* other) {
  using std::swap;
  swap(metrics_, other->metrics_);
  swap(document_info_, other->document_info_);
  swap(interleaving_info_, other->interleaving_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StepanPixelMetaInfo::GetMetadata() const {
  protobuf_stepan_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stepan_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StepanPixelMetaInfo

// optional .cosmo.pb.Metrics metrics = 1;
bool StepanPixelMetaInfo::has_metrics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StepanPixelMetaInfo::set_has_metrics() {
  _has_bits_[0] |= 0x00000001u;
}
void StepanPixelMetaInfo::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000001u;
}
void StepanPixelMetaInfo::clear_metrics() {
  if (metrics_ != NULL) metrics_->::cosmo::pb::Metrics::Clear();
  clear_has_metrics();
}
const ::cosmo::pb::Metrics& StepanPixelMetaInfo::metrics() const {
  const ::cosmo::pb::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StepanPixelMetaInfo.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics*>(
      &::cosmo::pb::_Metrics_default_instance_);
}
::cosmo::pb::Metrics* StepanPixelMetaInfo::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::cosmo::pb::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StepanPixelMetaInfo.metrics)
  return metrics_;
}
::cosmo::pb::Metrics* StepanPixelMetaInfo::release_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StepanPixelMetaInfo.metrics)
  clear_has_metrics();
  ::cosmo::pb::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
void StepanPixelMetaInfo::set_allocated_metrics(::cosmo::pb::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StepanPixelMetaInfo.metrics)
}

// optional .cosmo.pb.DocumentInfo document_info = 2;
bool StepanPixelMetaInfo::has_document_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StepanPixelMetaInfo::set_has_document_info() {
  _has_bits_[0] |= 0x00000002u;
}
void StepanPixelMetaInfo::clear_has_document_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void StepanPixelMetaInfo::clear_document_info() {
  if (document_info_ != NULL) document_info_->::cosmo::pb::DocumentInfo::Clear();
  clear_has_document_info();
}
const ::cosmo::pb::DocumentInfo& StepanPixelMetaInfo::document_info() const {
  const ::cosmo::pb::DocumentInfo* p = document_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StepanPixelMetaInfo.document_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentInfo*>(
      &::cosmo::pb::_DocumentInfo_default_instance_);
}
::cosmo::pb::DocumentInfo* StepanPixelMetaInfo::mutable_document_info() {
  set_has_document_info();
  if (document_info_ == NULL) {
    document_info_ = new ::cosmo::pb::DocumentInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StepanPixelMetaInfo.document_info)
  return document_info_;
}
::cosmo::pb::DocumentInfo* StepanPixelMetaInfo::release_document_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StepanPixelMetaInfo.document_info)
  clear_has_document_info();
  ::cosmo::pb::DocumentInfo* temp = document_info_;
  document_info_ = NULL;
  return temp;
}
void StepanPixelMetaInfo::set_allocated_document_info(::cosmo::pb::DocumentInfo* document_info) {
  delete document_info_;
  document_info_ = document_info;
  if (document_info) {
    set_has_document_info();
  } else {
    clear_has_document_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StepanPixelMetaInfo.document_info)
}

// optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
bool StepanPixelMetaInfo::has_interleaving_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StepanPixelMetaInfo::set_has_interleaving_info() {
  _has_bits_[0] |= 0x00000004u;
}
void StepanPixelMetaInfo::clear_has_interleaving_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void StepanPixelMetaInfo::clear_interleaving_info() {
  if (interleaving_info_ != NULL) interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
  clear_has_interleaving_info();
}
const ::cosmo::pb::InterleavingInfo& StepanPixelMetaInfo::interleaving_info() const {
  const ::cosmo::pb::InterleavingInfo* p = interleaving_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StepanPixelMetaInfo.interleaving_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::InterleavingInfo*>(
      &::cosmo::pb::_InterleavingInfo_default_instance_);
}
::cosmo::pb::InterleavingInfo* StepanPixelMetaInfo::mutable_interleaving_info() {
  set_has_interleaving_info();
  if (interleaving_info_ == NULL) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StepanPixelMetaInfo.interleaving_info)
  return interleaving_info_;
}
::cosmo::pb::InterleavingInfo* StepanPixelMetaInfo::release_interleaving_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StepanPixelMetaInfo.interleaving_info)
  clear_has_interleaving_info();
  ::cosmo::pb::InterleavingInfo* temp = interleaving_info_;
  interleaving_info_ = NULL;
  return temp;
}
void StepanPixelMetaInfo::set_allocated_interleaving_info(::cosmo::pb::InterleavingInfo* interleaving_info) {
  delete interleaving_info_;
  interleaving_info_ = interleaving_info;
  if (interleaving_info) {
    set_has_interleaving_info();
  } else {
    clear_has_interleaving_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StepanPixelMetaInfo.interleaving_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)
