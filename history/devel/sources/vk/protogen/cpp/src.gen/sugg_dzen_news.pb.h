// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sugg_dzen_news.proto

#ifndef PROTOBUF_sugg_5fdzen_5fnews_2eproto__INCLUDED
#define PROTOBUF_sugg_5fdzen_5fnews_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace pb {
namespace suggests {
class DzenNewsQuery;
class DzenNewsQueryDefaultTypeInternal;
extern DzenNewsQueryDefaultTypeInternal _DzenNewsQuery_default_instance_;
class DzenNewsQuery_Group;
class DzenNewsQuery_GroupDefaultTypeInternal;
extern DzenNewsQuery_GroupDefaultTypeInternal _DzenNewsQuery_Group_default_instance_;
class DzenNewsQuery_Variant;
class DzenNewsQuery_VariantDefaultTypeInternal;
extern DzenNewsQuery_VariantDefaultTypeInternal _DzenNewsQuery_Variant_default_instance_;
}  // namespace suggests
}  // namespace pb

namespace pb {
namespace suggests {

namespace protobuf_sugg_5fdzen_5fnews_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sugg_5fdzen_5fnews_2eproto

// ===================================================================

class DzenNewsQuery_Variant : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.DzenNewsQuery.Variant) */ {
 public:
  DzenNewsQuery_Variant();
  virtual ~DzenNewsQuery_Variant();

  DzenNewsQuery_Variant(const DzenNewsQuery_Variant& from);

  inline DzenNewsQuery_Variant& operator=(const DzenNewsQuery_Variant& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DzenNewsQuery_Variant(DzenNewsQuery_Variant&& from) noexcept
    : DzenNewsQuery_Variant() {
    *this = ::std::move(from);
  }

  inline DzenNewsQuery_Variant& operator=(DzenNewsQuery_Variant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DzenNewsQuery_Variant& default_instance();

  static inline const DzenNewsQuery_Variant* internal_default_instance() {
    return reinterpret_cast<const DzenNewsQuery_Variant*>(
               &_DzenNewsQuery_Variant_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DzenNewsQuery_Variant* other);
  friend void swap(DzenNewsQuery_Variant& a, DzenNewsQuery_Variant& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DzenNewsQuery_Variant* New() const PROTOBUF_FINAL { return New(NULL); }

  DzenNewsQuery_Variant* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DzenNewsQuery_Variant& from);
  void MergeFrom(const DzenNewsQuery_Variant& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DzenNewsQuery_Variant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1 [(.gogo.json) = {
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 frequency = 2 [(.gogo.json) = {
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // uint32 flags = 3 [(.gogo.json) = {
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.DzenNewsQuery.Variant)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 frequency_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fdzen_5fnews_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DzenNewsQuery_Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.DzenNewsQuery.Group) */ {
 public:
  DzenNewsQuery_Group();
  virtual ~DzenNewsQuery_Group();

  DzenNewsQuery_Group(const DzenNewsQuery_Group& from);

  inline DzenNewsQuery_Group& operator=(const DzenNewsQuery_Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DzenNewsQuery_Group(DzenNewsQuery_Group&& from) noexcept
    : DzenNewsQuery_Group() {
    *this = ::std::move(from);
  }

  inline DzenNewsQuery_Group& operator=(DzenNewsQuery_Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DzenNewsQuery_Group& default_instance();

  static inline const DzenNewsQuery_Group* internal_default_instance() {
    return reinterpret_cast<const DzenNewsQuery_Group*>(
               &_DzenNewsQuery_Group_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DzenNewsQuery_Group* other);
  friend void swap(DzenNewsQuery_Group& a, DzenNewsQuery_Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DzenNewsQuery_Group* New() const PROTOBUF_FINAL { return New(NULL); }

  DzenNewsQuery_Group* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DzenNewsQuery_Group& from);
  void MergeFrom(const DzenNewsQuery_Group& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DzenNewsQuery_Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogo.json) = {
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 frequency = 2 [(.gogo.json) = {
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.DzenNewsQuery.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 frequency_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fdzen_5fnews_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DzenNewsQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.DzenNewsQuery) */ {
 public:
  DzenNewsQuery();
  virtual ~DzenNewsQuery();

  DzenNewsQuery(const DzenNewsQuery& from);

  inline DzenNewsQuery& operator=(const DzenNewsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DzenNewsQuery(DzenNewsQuery&& from) noexcept
    : DzenNewsQuery() {
    *this = ::std::move(from);
  }

  inline DzenNewsQuery& operator=(DzenNewsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DzenNewsQuery& default_instance();

  static inline const DzenNewsQuery* internal_default_instance() {
    return reinterpret_cast<const DzenNewsQuery*>(
               &_DzenNewsQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DzenNewsQuery* other);
  friend void swap(DzenNewsQuery& a, DzenNewsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DzenNewsQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DzenNewsQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DzenNewsQuery& from);
  void MergeFrom(const DzenNewsQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DzenNewsQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DzenNewsQuery_Variant Variant;
  typedef DzenNewsQuery_Group Group;

  // accessors -------------------------------------------------------

  // repeated .pb.suggests.DzenNewsQuery.Variant variants = 4 [(.gogo.json) = {
  int variants_size() const;
  void clear_variants();
  static const int kVariantsFieldNumber = 4;
  const ::pb::suggests::DzenNewsQuery_Variant& variants(int index) const;
  ::pb::suggests::DzenNewsQuery_Variant* mutable_variants(int index);
  ::pb::suggests::DzenNewsQuery_Variant* add_variants();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Variant >*
      mutable_variants();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Variant >&
      variants() const;

  // repeated .pb.suggests.DzenNewsQuery.Group groups = 5 [(.gogo.json) = {
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 5;
  const ::pb::suggests::DzenNewsQuery_Group& groups(int index) const;
  ::pb::suggests::DzenNewsQuery_Group* mutable_groups(int index);
  ::pb::suggests::DzenNewsQuery_Group* add_groups();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Group >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Group >&
      groups() const;

  // string query = 1 [(.gogo.json) = {
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // double freshness = 3 [(.gogo.json) = {
  void clear_freshness();
  static const int kFreshnessFieldNumber = 3;
  double freshness() const;
  void set_freshness(double value);

  // uint32 frequency = 2 [(.gogo.json) = {
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.DzenNewsQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Variant > variants_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Group > groups_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  double freshness_;
  ::google::protobuf::uint32 frequency_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fdzen_5fnews_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DzenNewsQuery_Variant

// string text = 1 [(.gogo.json) = {
inline void DzenNewsQuery_Variant::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DzenNewsQuery_Variant::text() const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.Variant.text)
  return text_.GetNoArena();
}
inline void DzenNewsQuery_Variant::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.DzenNewsQuery.Variant.text)
}
#if LANG_CXX11
inline void DzenNewsQuery_Variant::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.DzenNewsQuery.Variant.text)
}
#endif
inline void DzenNewsQuery_Variant::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.DzenNewsQuery.Variant.text)
}
inline void DzenNewsQuery_Variant::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.DzenNewsQuery.Variant.text)
}
inline ::std::string* DzenNewsQuery_Variant::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.DzenNewsQuery.Variant.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenNewsQuery_Variant::release_text() {
  // @@protoc_insertion_point(field_release:pb.suggests.DzenNewsQuery.Variant.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenNewsQuery_Variant::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.DzenNewsQuery.Variant.text)
}

// uint32 frequency = 2 [(.gogo.json) = {
inline void DzenNewsQuery_Variant::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 DzenNewsQuery_Variant::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.Variant.frequency)
  return frequency_;
}
inline void DzenNewsQuery_Variant::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.DzenNewsQuery.Variant.frequency)
}

// uint32 flags = 3 [(.gogo.json) = {
inline void DzenNewsQuery_Variant::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 DzenNewsQuery_Variant::flags() const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.Variant.flags)
  return flags_;
}
inline void DzenNewsQuery_Variant::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.DzenNewsQuery.Variant.flags)
}

// -------------------------------------------------------------------

// DzenNewsQuery_Group

// string id = 1 [(.gogo.json) = {
inline void DzenNewsQuery_Group::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DzenNewsQuery_Group::id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.Group.id)
  return id_.GetNoArena();
}
inline void DzenNewsQuery_Group::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.DzenNewsQuery.Group.id)
}
#if LANG_CXX11
inline void DzenNewsQuery_Group::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.DzenNewsQuery.Group.id)
}
#endif
inline void DzenNewsQuery_Group::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.DzenNewsQuery.Group.id)
}
inline void DzenNewsQuery_Group::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.DzenNewsQuery.Group.id)
}
inline ::std::string* DzenNewsQuery_Group::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.DzenNewsQuery.Group.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenNewsQuery_Group::release_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.DzenNewsQuery.Group.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenNewsQuery_Group::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.DzenNewsQuery.Group.id)
}

// uint32 frequency = 2 [(.gogo.json) = {
inline void DzenNewsQuery_Group::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 DzenNewsQuery_Group::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.Group.frequency)
  return frequency_;
}
inline void DzenNewsQuery_Group::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.DzenNewsQuery.Group.frequency)
}

// -------------------------------------------------------------------

// DzenNewsQuery

// string query = 1 [(.gogo.json) = {
inline void DzenNewsQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DzenNewsQuery::query() const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.query)
  return query_.GetNoArena();
}
inline void DzenNewsQuery::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.DzenNewsQuery.query)
}
#if LANG_CXX11
inline void DzenNewsQuery::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.DzenNewsQuery.query)
}
#endif
inline void DzenNewsQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.DzenNewsQuery.query)
}
inline void DzenNewsQuery::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.DzenNewsQuery.query)
}
inline ::std::string* DzenNewsQuery::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.DzenNewsQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenNewsQuery::release_query() {
  // @@protoc_insertion_point(field_release:pb.suggests.DzenNewsQuery.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenNewsQuery::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.DzenNewsQuery.query)
}

// uint32 frequency = 2 [(.gogo.json) = {
inline void DzenNewsQuery::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 DzenNewsQuery::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.frequency)
  return frequency_;
}
inline void DzenNewsQuery::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.DzenNewsQuery.frequency)
}

// double freshness = 3 [(.gogo.json) = {
inline void DzenNewsQuery::clear_freshness() {
  freshness_ = 0;
}
inline double DzenNewsQuery::freshness() const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.freshness)
  return freshness_;
}
inline void DzenNewsQuery::set_freshness(double value) {
  
  freshness_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.DzenNewsQuery.freshness)
}

// repeated .pb.suggests.DzenNewsQuery.Variant variants = 4 [(.gogo.json) = {
inline int DzenNewsQuery::variants_size() const {
  return variants_.size();
}
inline void DzenNewsQuery::clear_variants() {
  variants_.Clear();
}
inline const ::pb::suggests::DzenNewsQuery_Variant& DzenNewsQuery::variants(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.variants)
  return variants_.Get(index);
}
inline ::pb::suggests::DzenNewsQuery_Variant* DzenNewsQuery::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.DzenNewsQuery.variants)
  return variants_.Mutable(index);
}
inline ::pb::suggests::DzenNewsQuery_Variant* DzenNewsQuery::add_variants() {
  // @@protoc_insertion_point(field_add:pb.suggests.DzenNewsQuery.variants)
  return variants_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Variant >*
DzenNewsQuery::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.DzenNewsQuery.variants)
  return &variants_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Variant >&
DzenNewsQuery::variants() const {
  // @@protoc_insertion_point(field_list:pb.suggests.DzenNewsQuery.variants)
  return variants_;
}

// repeated .pb.suggests.DzenNewsQuery.Group groups = 5 [(.gogo.json) = {
inline int DzenNewsQuery::groups_size() const {
  return groups_.size();
}
inline void DzenNewsQuery::clear_groups() {
  groups_.Clear();
}
inline const ::pb::suggests::DzenNewsQuery_Group& DzenNewsQuery::groups(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.DzenNewsQuery.groups)
  return groups_.Get(index);
}
inline ::pb::suggests::DzenNewsQuery_Group* DzenNewsQuery::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.DzenNewsQuery.groups)
  return groups_.Mutable(index);
}
inline ::pb::suggests::DzenNewsQuery_Group* DzenNewsQuery::add_groups() {
  // @@protoc_insertion_point(field_add:pb.suggests.DzenNewsQuery.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Group >*
DzenNewsQuery::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.DzenNewsQuery.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::DzenNewsQuery_Group >&
DzenNewsQuery::groups() const {
  // @@protoc_insertion_point(field_list:pb.suggests.DzenNewsQuery.groups)
  return groups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace suggests
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sugg_5fdzen_5fnews_2eproto__INCLUDED
