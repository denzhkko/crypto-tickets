// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sugg_vk_music.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sugg_vk_music.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace suggests {
class NavigVkMusicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NavigVkMusic>
     _instance;
} _NavigVkMusic_default_instance_;
class IndexNavigVkMusicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexNavigVkMusic>
     _instance;
} _IndexNavigVkMusic_default_instance_;
class IndexQuery_VariantDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexQuery_Variant>
     _instance;
} _IndexQuery_Variant_default_instance_;
class IndexQuery_NavigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexQuery_Navig>
     _instance;
} _IndexQuery_Navig_default_instance_;
class IndexQuery_UserClusterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexQuery_UserCluster>
     _instance;
} _IndexQuery_UserCluster_default_instance_;
class IndexQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexQuery>
     _instance;
} _IndexQuery_default_instance_;
class ResponseQuery_MatchedPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuery_MatchedPair>
     _instance;
} _ResponseQuery_MatchedPair_default_instance_;
class ResponseQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuery>
     _instance;
} _ResponseQuery_default_instance_;
class ResponseNavigVkMusicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseNavigVkMusic>
     _instance;
} _ResponseNavigVkMusic_default_instance_;
class ResponseVkMusic_TermsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseVkMusic_Terms>
     _instance;
} _ResponseVkMusic_Terms_default_instance_;
class ResponseVkMusicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseVkMusic>
     _instance;
} _ResponseVkMusic_default_instance_;
class ClusterInfoVkMusic_CentroidDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClusterInfoVkMusic_Centroid>
     _instance;
} _ClusterInfoVkMusic_Centroid_default_instance_;
class ClusterInfoVkMusicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClusterInfoVkMusic>
     _instance;
} _ClusterInfoVkMusic_default_instance_;
class ClusterInfosVkMusicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClusterInfosVkMusic>
     _instance;
} _ClusterInfosVkMusic_default_instance_;
class QueryEmbeddingVkMusicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryEmbeddingVkMusic>
     _instance;
} _QueryEmbeddingVkMusic_default_instance_;

namespace protobuf_sugg_5fvk_5fmusic_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigVkMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigVkMusic, nid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigVkMusic, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigVkMusic, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexNavigVkMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexNavigVkMusic, navig_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexNavigVkMusic, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexNavigVkMusic, vk_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexNavigVkMusic, vk_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Variant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Variant, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Variant, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Variant, flags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Navig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Navig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Navig, frequency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_UserCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_UserCluster, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_UserCluster, frequency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, variants_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, navigs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, user_clusters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery_MatchedPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery_MatchedPair, begin_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery_MatchedPair, end_pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, text_marked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, matched_ranges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNavigVkMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNavigVkMusic, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNavigVkMusic, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVkMusic_Terms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVkMusic_Terms, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVkMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVkMusic, queries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVkMusic, navigs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVkMusic, history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVkMusic, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVkMusic, terms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoVkMusic_Centroid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoVkMusic_Centroid, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoVkMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoVkMusic, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoVkMusic, centroid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfosVkMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfosVkMusic, clusters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEmbeddingVkMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEmbeddingVkMusic, components_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(NavigVkMusic)},
  { 8, -1, sizeof(IndexNavigVkMusic)},
  { 17, -1, sizeof(IndexQuery_Variant)},
  { 25, -1, sizeof(IndexQuery_Navig)},
  { 32, -1, sizeof(IndexQuery_UserCluster)},
  { 39, -1, sizeof(IndexQuery)},
  { 49, -1, sizeof(ResponseQuery_MatchedPair)},
  { 56, -1, sizeof(ResponseQuery)},
  { 64, -1, sizeof(ResponseNavigVkMusic)},
  { 71, -1, sizeof(ResponseVkMusic_Terms)},
  { 77, -1, sizeof(ResponseVkMusic)},
  { 87, -1, sizeof(ClusterInfoVkMusic_Centroid)},
  { 93, -1, sizeof(ClusterInfoVkMusic)},
  { 100, -1, sizeof(ClusterInfosVkMusic)},
  { 106, -1, sizeof(QueryEmbeddingVkMusic)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavigVkMusic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexNavigVkMusic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexQuery_Variant_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexQuery_Navig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexQuery_UserCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseQuery_MatchedPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseNavigVkMusic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseVkMusic_Terms_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseVkMusic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterInfoVkMusic_Centroid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterInfoVkMusic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterInfosVkMusic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryEmbeddingVkMusic_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sugg_vk_music.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gogo::protobuf_options_2eproto::InitDefaults();
  _NavigVkMusic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NavigVkMusic_default_instance_);_IndexNavigVkMusic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexNavigVkMusic_default_instance_);_IndexQuery_Variant_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexQuery_Variant_default_instance_);_IndexQuery_Navig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexQuery_Navig_default_instance_);_IndexQuery_UserCluster_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexQuery_UserCluster_default_instance_);_IndexQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexQuery_default_instance_);_ResponseQuery_MatchedPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseQuery_MatchedPair_default_instance_);_ResponseQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseQuery_default_instance_);_ResponseNavigVkMusic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseNavigVkMusic_default_instance_);_ResponseVkMusic_Terms_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseVkMusic_Terms_default_instance_);_ResponseVkMusic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseVkMusic_default_instance_);_ClusterInfoVkMusic_Centroid_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClusterInfoVkMusic_Centroid_default_instance_);_ClusterInfoVkMusic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClusterInfoVkMusic_default_instance_);_ClusterInfosVkMusic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClusterInfosVkMusic_default_instance_);_QueryEmbeddingVkMusic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryEmbeddingVkMusic_default_instance_);_ResponseVkMusic_default_instance_._instance.get_mutable()->terms_ = const_cast< ::pb::suggests::ResponseVkMusic_Terms*>(
      ::pb::suggests::ResponseVkMusic_Terms::internal_default_instance());
  _ClusterInfoVkMusic_default_instance_._instance.get_mutable()->centroid_ = const_cast< ::pb::suggests::ClusterInfoVkMusic_Centroid*>(
      ::pb::suggests::ClusterInfoVkMusic_Centroid::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023sugg_vk_music.proto\022\013pb.suggests\032\ropti"
      "ons.proto\"T\n\014NavigVkMusic\022\013\n\003nid\030\001 \001(\004\022+"
      "\n\004type\030\002 \001(\0162\035.pb.suggests.NavigVkMusicT"
      "ype\022\n\n\002id\030\003 \001(\t\"\257\001\n\021IndexNavigVkMusic\022 \n"
      "\010navig_id\030\001 \001(\tB\016\222\265\030\n\n\010navig_id\022\035\n\tfrequ"
      "ency\030\002 \001(\rB\n\222\265\030\006\n\004freq\022=\n\007vk_type\030\003 \001(\0162"
      "\035.pb.suggests.NavigVkMusicTypeB\r\222\265\030\t\n\007vk"
      "_type\022\032\n\005vk_id\030\004 \001(\tB\013\222\265\030\007\n\005vk_id\"\203\004\n\nIn"
      "dexQuery\022\030\n\004text\030\001 \001(\tB\n\222\265\030\006\n\004text\022\035\n\tfr"
      "equency\030\002 \001(\rB\n\222\265\030\006\n\004freq\022A\n\010variants\030\003 "
      "\003(\0132\037.pb.suggests.IndexQuery.VariantB\016\222\265"
      "\030\n\n\010variants\022;\n\006navigs\030\004 \003(\0132\035.pb.sugges"
      "ts.IndexQuery.NavigB\014\222\265\030\010\n\006navigs\022O\n\ruse"
      "r_clusters\030\005 \003(\0132#.pb.suggests.IndexQuer"
      "y.UserClusterB\023\222\265\030\017\n\ruser_clusters\032^\n\007Va"
      "riant\022\030\n\004text\030\001 \001(\tB\n\222\265\030\006\n\004text\022\035\n\tfrequ"
      "ency\030\002 \001(\rB\n\222\265\030\006\n\004freq\022\032\n\005flags\030\003 \001(\rB\013\222"
      "\265\030\007\n\005flags\032<\n\005Navig\022\024\n\002id\030\001 \001(\tB\010\222\265\030\004\n\002i"
      "d\022\035\n\tfrequency\030\002 \001(\rB\n\222\265\030\006\n\004freq\032M\n\013User"
      "Cluster\022\037\n\ncluster_id\030\001 \001(\rB\013\222\265\030\007\n\005cl_id"
      "\022\035\n\tfrequency\030\002 \001(\001B\n\222\265\030\006\n\004freq\"\220\002\n\rResp"
      "onseQuery\022\"\n\004text\030\001 \001(\tB\024\222\265\030\006\n\004text\202\265\030\006\n"
      "\004Text\0225\n\013text_marked\030\002 \001(\tB \222\265\030\014\n\ntextMa"
      "rked\202\265\030\014\n\nTextMarked\022S\n\016matched_ranges\030\003"
      " \003(\0132&.pb.suggests.ResponseQuery.Matched"
      "PairB\023\222\265\030\017\n\rmatchedRanges\032O\n\013MatchedPair"
      "\022 \n\tbegin_pos\030\001 \001(\rB\r\222\265\030\003\n\001l\222\265\030\002\020\001\022\036\n\007en"
      "d_pos\030\002 \001(\rB\r\222\265\030\003\n\001r\222\265\030\002\020\001\"w\n\024ResponseNa"
      "vigVkMusic\022A\n\004type\030\001 \001(\0162\035.pb.suggests.N"
      "avigVkMusicTypeB\024\222\265\030\006\n\004type\202\265\030\006\n\004Type\022\034\n"
      "\002id\030\002 \001(\tB\020\222\265\030\004\n\002id\202\265\030\004\n\002Id\"\214\003\n\017Response"
      "VkMusic\022P\n\007queries\030\001 \003(\0132\032.pb.suggests.R"
      "esponseQueryB#\222\265\030\007\n\005items\202\265\030\007\n\005Query\202\265\030\t"
      "\022\007Queries\022V\n\006navigs\030\002 \003(\0132!.pb.suggests."
      "ResponseNavigVkMusicB#\222\265\030\010\n\006navigs\202\265\030\007\n\005"
      "Navig\202\265\030\010\022\006Navigs\022R\n\007history\030\003 \003(\0132\032.pb."
      "suggests.ResponseQueryB%\222\265\030\t\n\007history\202\265\030"
      "\007\n\005Query\202\265\030\t\022\007History\022\026\n\003qid\030\004 \001(\tB\t\222\265\030\005"
      "\n\003qid\022>\n\005terms\030\005 \001(\0132\".pb.suggests.Respo"
      "nseVkMusic.TermsB\013\222\265\030\007\n\005terms\032#\n\005Terms\022\032"
      "\n\005query\030\001 \001(\tB\013\222\265\030\007\n\005query\"\265\001\n\022ClusterIn"
      "foVkMusic\022$\n\ncluster_id\030\001 \001(\rB\020\222\265\030\014\n\nclu"
      "sterIdx\022O\n\010centroid\030\002 \001(\0132(.pb.suggests."
      "ClusterInfoVkMusic.CentroidB\023\222\265\030\017\n\rclust"
      "erCenter\032(\n\010Centroid\022\034\n\006values\030\001 \003(\002B\014\222\265"
      "\030\010\n\006values\"H\n\023ClusterInfosVkMusic\0221\n\010clu"
      "sters\030\001 \003(\0132\037.pb.suggests.ClusterInfoVkM"
      "usic\"+\n\025QueryEmbeddingVkMusic\022\022\n\ncompone"
      "nts\030\001 \003(\002*O\n\020NavigVkMusicType\022\013\n\007Unknown"
      "\020\000\022\n\n\006Artist\020\001\022\t\n\005Track\020\002\022\t\n\005Album\020\003\022\014\n\010"
      "Playlist\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2018);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sugg_vk_music.proto", &protobuf_RegisterTypes);
  ::gogo::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sugg_5fvk_5fmusic_2eproto

const ::google::protobuf::EnumDescriptor* NavigVkMusicType_descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_enum_descriptors[0];
}
bool NavigVkMusicType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigVkMusic::kNidFieldNumber;
const int NavigVkMusic::kTypeFieldNumber;
const int NavigVkMusic::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigVkMusic::NavigVkMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.NavigVkMusic)
}
NavigVkMusic::NavigVkMusic(const NavigVkMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&nid_, &from.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&nid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.NavigVkMusic)
}

void NavigVkMusic::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(type_));
  _cached_size_ = 0;
}

NavigVkMusic::~NavigVkMusic() {
  // @@protoc_insertion_point(destructor:pb.suggests.NavigVkMusic)
  SharedDtor();
}

void NavigVkMusic::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NavigVkMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigVkMusic::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigVkMusic& NavigVkMusic::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavigVkMusic* NavigVkMusic::New(::google::protobuf::Arena* arena) const {
  NavigVkMusic* n = new NavigVkMusic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigVkMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.NavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&nid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool NavigVkMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.NavigVkMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 nid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.suggests.NavigVkMusicType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::suggests::NavigVkMusicType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.NavigVkMusic.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.NavigVkMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.NavigVkMusic)
  return false;
#undef DO_
}

void NavigVkMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.NavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nid = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nid(), output);
  }

  // .pb.suggests.NavigVkMusicType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.NavigVkMusic.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.NavigVkMusic)
}

::google::protobuf::uint8* NavigVkMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.NavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nid = 1;
  if (this->nid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nid(), target);
  }

  // .pb.suggests.NavigVkMusicType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.NavigVkMusic.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.NavigVkMusic)
  return target;
}

size_t NavigVkMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.NavigVkMusic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // uint64 nid = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nid());
  }

  // .pb.suggests.NavigVkMusicType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigVkMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.NavigVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigVkMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigVkMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.NavigVkMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.NavigVkMusic)
    MergeFrom(*source);
  }
}

void NavigVkMusic::MergeFrom(const NavigVkMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.NavigVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void NavigVkMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.NavigVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigVkMusic::CopyFrom(const NavigVkMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.NavigVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigVkMusic::IsInitialized() const {
  return true;
}

void NavigVkMusic::Swap(NavigVkMusic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigVkMusic::InternalSwap(NavigVkMusic* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(nid_, other->nid_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigVkMusic::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigVkMusic

// uint64 nid = 1;
void NavigVkMusic::clear_nid() {
  nid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NavigVkMusic::nid() const {
  // @@protoc_insertion_point(field_get:pb.suggests.NavigVkMusic.nid)
  return nid_;
}
void NavigVkMusic::set_nid(::google::protobuf::uint64 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.NavigVkMusic.nid)
}

// .pb.suggests.NavigVkMusicType type = 2;
void NavigVkMusic::clear_type() {
  type_ = 0;
}
::pb::suggests::NavigVkMusicType NavigVkMusic::type() const {
  // @@protoc_insertion_point(field_get:pb.suggests.NavigVkMusic.type)
  return static_cast< ::pb::suggests::NavigVkMusicType >(type_);
}
void NavigVkMusic::set_type(::pb::suggests::NavigVkMusicType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.NavigVkMusic.type)
}

// string id = 3;
void NavigVkMusic::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NavigVkMusic::id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.NavigVkMusic.id)
  return id_.GetNoArena();
}
void NavigVkMusic::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.NavigVkMusic.id)
}
#if LANG_CXX11
void NavigVkMusic::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.NavigVkMusic.id)
}
#endif
void NavigVkMusic::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.NavigVkMusic.id)
}
void NavigVkMusic::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.NavigVkMusic.id)
}
::std::string* NavigVkMusic::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.NavigVkMusic.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NavigVkMusic::release_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.NavigVkMusic.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NavigVkMusic::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.NavigVkMusic.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexNavigVkMusic::kNavigIdFieldNumber;
const int IndexNavigVkMusic::kFrequencyFieldNumber;
const int IndexNavigVkMusic::kVkTypeFieldNumber;
const int IndexNavigVkMusic::kVkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexNavigVkMusic::IndexNavigVkMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.IndexNavigVkMusic)
}
IndexNavigVkMusic::IndexNavigVkMusic(const IndexNavigVkMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  navig_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.navig_id().size() > 0) {
    navig_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.navig_id_);
  }
  vk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vk_id().size() > 0) {
    vk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk_id_);
  }
  ::memcpy(&frequency_, &from.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&vk_type_) -
    reinterpret_cast<char*>(&frequency_)) + sizeof(vk_type_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.IndexNavigVkMusic)
}

void IndexNavigVkMusic::SharedCtor() {
  navig_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vk_type_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(vk_type_));
  _cached_size_ = 0;
}

IndexNavigVkMusic::~IndexNavigVkMusic() {
  // @@protoc_insertion_point(destructor:pb.suggests.IndexNavigVkMusic)
  SharedDtor();
}

void IndexNavigVkMusic::SharedDtor() {
  navig_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IndexNavigVkMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexNavigVkMusic::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexNavigVkMusic& IndexNavigVkMusic::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexNavigVkMusic* IndexNavigVkMusic::New(::google::protobuf::Arena* arena) const {
  IndexNavigVkMusic* n = new IndexNavigVkMusic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexNavigVkMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.IndexNavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  navig_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vk_type_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(vk_type_));
  _internal_metadata_.Clear();
}

bool IndexNavigVkMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.IndexNavigVkMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string navig_id = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_navig_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->navig_id().data(), static_cast<int>(this->navig_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.IndexNavigVkMusic.navig_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frequency = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.suggests.NavigVkMusicType vk_type = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vk_type(static_cast< ::pb::suggests::NavigVkMusicType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vk_id = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vk_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vk_id().data(), static_cast<int>(this->vk_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.IndexNavigVkMusic.vk_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.IndexNavigVkMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.IndexNavigVkMusic)
  return false;
#undef DO_
}

void IndexNavigVkMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.IndexNavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string navig_id = 1 [(.gogo.json) = {
  if (this->navig_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->navig_id().data(), static_cast<int>(this->navig_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexNavigVkMusic.navig_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->navig_id(), output);
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frequency(), output);
  }

  // .pb.suggests.NavigVkMusicType vk_type = 3 [(.gogo.json) = {
  if (this->vk_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->vk_type(), output);
  }

  // string vk_id = 4 [(.gogo.json) = {
  if (this->vk_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vk_id().data(), static_cast<int>(this->vk_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexNavigVkMusic.vk_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vk_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.IndexNavigVkMusic)
}

::google::protobuf::uint8* IndexNavigVkMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.IndexNavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string navig_id = 1 [(.gogo.json) = {
  if (this->navig_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->navig_id().data(), static_cast<int>(this->navig_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexNavigVkMusic.navig_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->navig_id(), target);
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frequency(), target);
  }

  // .pb.suggests.NavigVkMusicType vk_type = 3 [(.gogo.json) = {
  if (this->vk_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->vk_type(), target);
  }

  // string vk_id = 4 [(.gogo.json) = {
  if (this->vk_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vk_id().data(), static_cast<int>(this->vk_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexNavigVkMusic.vk_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vk_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.IndexNavigVkMusic)
  return target;
}

size_t IndexNavigVkMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.IndexNavigVkMusic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string navig_id = 1 [(.gogo.json) = {
  if (this->navig_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->navig_id());
  }

  // string vk_id = 4 [(.gogo.json) = {
  if (this->vk_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vk_id());
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frequency());
  }

  // .pb.suggests.NavigVkMusicType vk_type = 3 [(.gogo.json) = {
  if (this->vk_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vk_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexNavigVkMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.IndexNavigVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexNavigVkMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexNavigVkMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.IndexNavigVkMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.IndexNavigVkMusic)
    MergeFrom(*source);
  }
}

void IndexNavigVkMusic::MergeFrom(const IndexNavigVkMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.IndexNavigVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.navig_id().size() > 0) {

    navig_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.navig_id_);
  }
  if (from.vk_id().size() > 0) {

    vk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk_id_);
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.vk_type() != 0) {
    set_vk_type(from.vk_type());
  }
}

void IndexNavigVkMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.IndexNavigVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexNavigVkMusic::CopyFrom(const IndexNavigVkMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.IndexNavigVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexNavigVkMusic::IsInitialized() const {
  return true;
}

void IndexNavigVkMusic::Swap(IndexNavigVkMusic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexNavigVkMusic::InternalSwap(IndexNavigVkMusic* other) {
  using std::swap;
  navig_id_.Swap(&other->navig_id_);
  vk_id_.Swap(&other->vk_id_);
  swap(frequency_, other->frequency_);
  swap(vk_type_, other->vk_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexNavigVkMusic::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexNavigVkMusic

// string navig_id = 1 [(.gogo.json) = {
void IndexNavigVkMusic::clear_navig_id() {
  navig_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IndexNavigVkMusic::navig_id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexNavigVkMusic.navig_id)
  return navig_id_.GetNoArena();
}
void IndexNavigVkMusic::set_navig_id(const ::std::string& value) {
  
  navig_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexNavigVkMusic.navig_id)
}
#if LANG_CXX11
void IndexNavigVkMusic::set_navig_id(::std::string&& value) {
  
  navig_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexNavigVkMusic.navig_id)
}
#endif
void IndexNavigVkMusic::set_navig_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  navig_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexNavigVkMusic.navig_id)
}
void IndexNavigVkMusic::set_navig_id(const char* value, size_t size) {
  
  navig_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexNavigVkMusic.navig_id)
}
::std::string* IndexNavigVkMusic::mutable_navig_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexNavigVkMusic.navig_id)
  return navig_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IndexNavigVkMusic::release_navig_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexNavigVkMusic.navig_id)
  
  return navig_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IndexNavigVkMusic::set_allocated_navig_id(::std::string* navig_id) {
  if (navig_id != NULL) {
    
  } else {
    
  }
  navig_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), navig_id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexNavigVkMusic.navig_id)
}

// uint32 frequency = 2 [(.gogo.json) = {
void IndexNavigVkMusic::clear_frequency() {
  frequency_ = 0u;
}
::google::protobuf::uint32 IndexNavigVkMusic::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexNavigVkMusic.frequency)
  return frequency_;
}
void IndexNavigVkMusic::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexNavigVkMusic.frequency)
}

// .pb.suggests.NavigVkMusicType vk_type = 3 [(.gogo.json) = {
void IndexNavigVkMusic::clear_vk_type() {
  vk_type_ = 0;
}
::pb::suggests::NavigVkMusicType IndexNavigVkMusic::vk_type() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexNavigVkMusic.vk_type)
  return static_cast< ::pb::suggests::NavigVkMusicType >(vk_type_);
}
void IndexNavigVkMusic::set_vk_type(::pb::suggests::NavigVkMusicType value) {
  
  vk_type_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexNavigVkMusic.vk_type)
}

// string vk_id = 4 [(.gogo.json) = {
void IndexNavigVkMusic::clear_vk_id() {
  vk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IndexNavigVkMusic::vk_id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexNavigVkMusic.vk_id)
  return vk_id_.GetNoArena();
}
void IndexNavigVkMusic::set_vk_id(const ::std::string& value) {
  
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexNavigVkMusic.vk_id)
}
#if LANG_CXX11
void IndexNavigVkMusic::set_vk_id(::std::string&& value) {
  
  vk_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexNavigVkMusic.vk_id)
}
#endif
void IndexNavigVkMusic::set_vk_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexNavigVkMusic.vk_id)
}
void IndexNavigVkMusic::set_vk_id(const char* value, size_t size) {
  
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexNavigVkMusic.vk_id)
}
::std::string* IndexNavigVkMusic::mutable_vk_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexNavigVkMusic.vk_id)
  return vk_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IndexNavigVkMusic::release_vk_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexNavigVkMusic.vk_id)
  
  return vk_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IndexNavigVkMusic::set_allocated_vk_id(::std::string* vk_id) {
  if (vk_id != NULL) {
    
  } else {
    
  }
  vk_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vk_id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexNavigVkMusic.vk_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexQuery_Variant::kTextFieldNumber;
const int IndexQuery_Variant::kFrequencyFieldNumber;
const int IndexQuery_Variant::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexQuery_Variant::IndexQuery_Variant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.IndexQuery.Variant)
}
IndexQuery_Variant::IndexQuery_Variant(const IndexQuery_Variant& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&frequency_, &from.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&frequency_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.IndexQuery.Variant)
}

void IndexQuery_Variant::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(flags_));
  _cached_size_ = 0;
}

IndexQuery_Variant::~IndexQuery_Variant() {
  // @@protoc_insertion_point(destructor:pb.suggests.IndexQuery.Variant)
  SharedDtor();
}

void IndexQuery_Variant::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IndexQuery_Variant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery_Variant::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexQuery_Variant& IndexQuery_Variant::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexQuery_Variant* IndexQuery_Variant::New(::google::protobuf::Arena* arena) const {
  IndexQuery_Variant* n = new IndexQuery_Variant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexQuery_Variant::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.IndexQuery.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

bool IndexQuery_Variant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.IndexQuery.Variant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.IndexQuery.Variant.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frequency = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.IndexQuery.Variant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.IndexQuery.Variant)
  return false;
#undef DO_
}

void IndexQuery_Variant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.IndexQuery.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1 [(.gogo.json) = {
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexQuery.Variant.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frequency(), output);
  }

  // uint32 flags = 3 [(.gogo.json) = {
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.IndexQuery.Variant)
}

::google::protobuf::uint8* IndexQuery_Variant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.IndexQuery.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1 [(.gogo.json) = {
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexQuery.Variant.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frequency(), target);
  }

  // uint32 flags = 3 [(.gogo.json) = {
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.IndexQuery.Variant)
  return target;
}

size_t IndexQuery_Variant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.IndexQuery.Variant)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string text = 1 [(.gogo.json) = {
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frequency());
  }

  // uint32 flags = 3 [(.gogo.json) = {
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery_Variant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.IndexQuery.Variant)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexQuery_Variant* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexQuery_Variant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.IndexQuery.Variant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.IndexQuery.Variant)
    MergeFrom(*source);
  }
}

void IndexQuery_Variant::MergeFrom(const IndexQuery_Variant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.IndexQuery.Variant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void IndexQuery_Variant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.IndexQuery.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery_Variant::CopyFrom(const IndexQuery_Variant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.IndexQuery.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery_Variant::IsInitialized() const {
  return true;
}

void IndexQuery_Variant::Swap(IndexQuery_Variant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexQuery_Variant::InternalSwap(IndexQuery_Variant* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(frequency_, other->frequency_);
  swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexQuery_Variant::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexQuery_Variant

// string text = 1 [(.gogo.json) = {
void IndexQuery_Variant::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IndexQuery_Variant::text() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Variant.text)
  return text_.GetNoArena();
}
void IndexQuery_Variant::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Variant.text)
}
#if LANG_CXX11
void IndexQuery_Variant::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexQuery.Variant.text)
}
#endif
void IndexQuery_Variant::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexQuery.Variant.text)
}
void IndexQuery_Variant::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexQuery.Variant.text)
}
::std::string* IndexQuery_Variant::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.Variant.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IndexQuery_Variant::release_text() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexQuery.Variant.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IndexQuery_Variant::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexQuery.Variant.text)
}

// uint32 frequency = 2 [(.gogo.json) = {
void IndexQuery_Variant::clear_frequency() {
  frequency_ = 0u;
}
::google::protobuf::uint32 IndexQuery_Variant::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Variant.frequency)
  return frequency_;
}
void IndexQuery_Variant::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Variant.frequency)
}

// uint32 flags = 3 [(.gogo.json) = {
void IndexQuery_Variant::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 IndexQuery_Variant::flags() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Variant.flags)
  return flags_;
}
void IndexQuery_Variant::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Variant.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexQuery_Navig::kIdFieldNumber;
const int IndexQuery_Navig::kFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexQuery_Navig::IndexQuery_Navig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.IndexQuery.Navig)
}
IndexQuery_Navig::IndexQuery_Navig(const IndexQuery_Navig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  frequency_ = from.frequency_;
  // @@protoc_insertion_point(copy_constructor:pb.suggests.IndexQuery.Navig)
}

void IndexQuery_Navig::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_ = 0u;
  _cached_size_ = 0;
}

IndexQuery_Navig::~IndexQuery_Navig() {
  // @@protoc_insertion_point(destructor:pb.suggests.IndexQuery.Navig)
  SharedDtor();
}

void IndexQuery_Navig::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IndexQuery_Navig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery_Navig::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexQuery_Navig& IndexQuery_Navig::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexQuery_Navig* IndexQuery_Navig::New(::google::protobuf::Arena* arena) const {
  IndexQuery_Navig* n = new IndexQuery_Navig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexQuery_Navig::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.IndexQuery.Navig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_ = 0u;
  _internal_metadata_.Clear();
}

bool IndexQuery_Navig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.IndexQuery.Navig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.IndexQuery.Navig.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frequency = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.IndexQuery.Navig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.IndexQuery.Navig)
  return false;
#undef DO_
}

void IndexQuery_Navig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.IndexQuery.Navig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.json) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexQuery.Navig.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frequency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.IndexQuery.Navig)
}

::google::protobuf::uint8* IndexQuery_Navig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.IndexQuery.Navig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.json) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexQuery.Navig.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frequency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.IndexQuery.Navig)
  return target;
}

size_t IndexQuery_Navig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.IndexQuery.Navig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.gogo.json) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery_Navig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.IndexQuery.Navig)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexQuery_Navig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexQuery_Navig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.IndexQuery.Navig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.IndexQuery.Navig)
    MergeFrom(*source);
  }
}

void IndexQuery_Navig::MergeFrom(const IndexQuery_Navig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.IndexQuery.Navig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void IndexQuery_Navig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.IndexQuery.Navig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery_Navig::CopyFrom(const IndexQuery_Navig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.IndexQuery.Navig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery_Navig::IsInitialized() const {
  return true;
}

void IndexQuery_Navig::Swap(IndexQuery_Navig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexQuery_Navig::InternalSwap(IndexQuery_Navig* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(frequency_, other->frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexQuery_Navig::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexQuery_Navig

// string id = 1 [(.gogo.json) = {
void IndexQuery_Navig::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IndexQuery_Navig::id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Navig.id)
  return id_.GetNoArena();
}
void IndexQuery_Navig::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Navig.id)
}
#if LANG_CXX11
void IndexQuery_Navig::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexQuery.Navig.id)
}
#endif
void IndexQuery_Navig::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexQuery.Navig.id)
}
void IndexQuery_Navig::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexQuery.Navig.id)
}
::std::string* IndexQuery_Navig::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.Navig.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IndexQuery_Navig::release_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexQuery.Navig.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IndexQuery_Navig::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexQuery.Navig.id)
}

// uint32 frequency = 2 [(.gogo.json) = {
void IndexQuery_Navig::clear_frequency() {
  frequency_ = 0u;
}
::google::protobuf::uint32 IndexQuery_Navig::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Navig.frequency)
  return frequency_;
}
void IndexQuery_Navig::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Navig.frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexQuery_UserCluster::kClusterIdFieldNumber;
const int IndexQuery_UserCluster::kFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexQuery_UserCluster::IndexQuery_UserCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.IndexQuery.UserCluster)
}
IndexQuery_UserCluster::IndexQuery_UserCluster(const IndexQuery_UserCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frequency_, &from.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&cluster_id_) -
    reinterpret_cast<char*>(&frequency_)) + sizeof(cluster_id_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.IndexQuery.UserCluster)
}

void IndexQuery_UserCluster::SharedCtor() {
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(cluster_id_));
  _cached_size_ = 0;
}

IndexQuery_UserCluster::~IndexQuery_UserCluster() {
  // @@protoc_insertion_point(destructor:pb.suggests.IndexQuery.UserCluster)
  SharedDtor();
}

void IndexQuery_UserCluster::SharedDtor() {
}

void IndexQuery_UserCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery_UserCluster::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexQuery_UserCluster& IndexQuery_UserCluster::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexQuery_UserCluster* IndexQuery_UserCluster::New(::google::protobuf::Arena* arena) const {
  IndexQuery_UserCluster* n = new IndexQuery_UserCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexQuery_UserCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.IndexQuery.UserCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(cluster_id_));
  _internal_metadata_.Clear();
}

bool IndexQuery_UserCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.IndexQuery.UserCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cluster_id = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frequency = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.IndexQuery.UserCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.IndexQuery.UserCluster)
  return false;
#undef DO_
}

void IndexQuery_UserCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.IndexQuery.UserCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cluster_id = 1 [(.gogo.json) = {
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cluster_id(), output);
  }

  // double frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frequency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.IndexQuery.UserCluster)
}

::google::protobuf::uint8* IndexQuery_UserCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.IndexQuery.UserCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cluster_id = 1 [(.gogo.json) = {
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cluster_id(), target);
  }

  // double frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frequency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.IndexQuery.UserCluster)
  return target;
}

size_t IndexQuery_UserCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.IndexQuery.UserCluster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    total_size += 1 + 8;
  }

  // uint32 cluster_id = 1 [(.gogo.json) = {
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery_UserCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.IndexQuery.UserCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexQuery_UserCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexQuery_UserCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.IndexQuery.UserCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.IndexQuery.UserCluster)
    MergeFrom(*source);
  }
}

void IndexQuery_UserCluster::MergeFrom(const IndexQuery_UserCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.IndexQuery.UserCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void IndexQuery_UserCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.IndexQuery.UserCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery_UserCluster::CopyFrom(const IndexQuery_UserCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.IndexQuery.UserCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery_UserCluster::IsInitialized() const {
  return true;
}

void IndexQuery_UserCluster::Swap(IndexQuery_UserCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexQuery_UserCluster::InternalSwap(IndexQuery_UserCluster* other) {
  using std::swap;
  swap(frequency_, other->frequency_);
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexQuery_UserCluster::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexQuery_UserCluster

// uint32 cluster_id = 1 [(.gogo.json) = {
void IndexQuery_UserCluster::clear_cluster_id() {
  cluster_id_ = 0u;
}
::google::protobuf::uint32 IndexQuery_UserCluster::cluster_id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.UserCluster.cluster_id)
  return cluster_id_;
}
void IndexQuery_UserCluster::set_cluster_id(::google::protobuf::uint32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.UserCluster.cluster_id)
}

// double frequency = 2 [(.gogo.json) = {
void IndexQuery_UserCluster::clear_frequency() {
  frequency_ = 0;
}
double IndexQuery_UserCluster::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.UserCluster.frequency)
  return frequency_;
}
void IndexQuery_UserCluster::set_frequency(double value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.UserCluster.frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexQuery::kTextFieldNumber;
const int IndexQuery::kFrequencyFieldNumber;
const int IndexQuery::kVariantsFieldNumber;
const int IndexQuery::kNavigsFieldNumber;
const int IndexQuery::kUserClustersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexQuery::IndexQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.IndexQuery)
}
IndexQuery::IndexQuery(const IndexQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variants_(from.variants_),
      navigs_(from.navigs_),
      user_clusters_(from.user_clusters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  frequency_ = from.frequency_;
  // @@protoc_insertion_point(copy_constructor:pb.suggests.IndexQuery)
}

void IndexQuery::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_ = 0u;
  _cached_size_ = 0;
}

IndexQuery::~IndexQuery() {
  // @@protoc_insertion_point(destructor:pb.suggests.IndexQuery)
  SharedDtor();
}

void IndexQuery::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IndexQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexQuery& IndexQuery::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexQuery* IndexQuery::New(::google::protobuf::Arena* arena) const {
  IndexQuery* n = new IndexQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.IndexQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variants_.Clear();
  navigs_.Clear();
  user_clusters_.Clear();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_ = 0u;
  _internal_metadata_.Clear();
}

bool IndexQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.IndexQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.IndexQuery.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frequency = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.suggests.IndexQuery.Variant variants = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.suggests.IndexQuery.Navig navigs = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navigs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.suggests.IndexQuery.UserCluster user_clusters = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.IndexQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.IndexQuery)
  return false;
#undef DO_
}

void IndexQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.IndexQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1 [(.gogo.json) = {
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexQuery.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frequency(), output);
  }

  // repeated .pb.suggests.IndexQuery.Variant variants = 3 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->variants(static_cast<int>(i)), output);
  }

  // repeated .pb.suggests.IndexQuery.Navig navigs = 4 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->navigs(static_cast<int>(i)), output);
  }

  // repeated .pb.suggests.IndexQuery.UserCluster user_clusters = 5 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user_clusters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.IndexQuery)
}

::google::protobuf::uint8* IndexQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.IndexQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1 [(.gogo.json) = {
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.IndexQuery.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frequency(), target);
  }

  // repeated .pb.suggests.IndexQuery.Variant variants = 3 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->variants(static_cast<int>(i)), deterministic, target);
  }

  // repeated .pb.suggests.IndexQuery.Navig navigs = 4 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->navigs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .pb.suggests.IndexQuery.UserCluster user_clusters = 5 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_clusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->user_clusters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.IndexQuery)
  return target;
}

size_t IndexQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.IndexQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.suggests.IndexQuery.Variant variants = 3 [(.gogo.json) = {
  {
    unsigned int count = static_cast<unsigned int>(this->variants_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variants(static_cast<int>(i)));
    }
  }

  // repeated .pb.suggests.IndexQuery.Navig navigs = 4 [(.gogo.json) = {
  {
    unsigned int count = static_cast<unsigned int>(this->navigs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->navigs(static_cast<int>(i)));
    }
  }

  // repeated .pb.suggests.IndexQuery.UserCluster user_clusters = 5 [(.gogo.json) = {
  {
    unsigned int count = static_cast<unsigned int>(this->user_clusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_clusters(static_cast<int>(i)));
    }
  }

  // string text = 1 [(.gogo.json) = {
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // uint32 frequency = 2 [(.gogo.json) = {
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.IndexQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.IndexQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.IndexQuery)
    MergeFrom(*source);
  }
}

void IndexQuery::MergeFrom(const IndexQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.IndexQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variants_.MergeFrom(from.variants_);
  navigs_.MergeFrom(from.navigs_);
  user_clusters_.MergeFrom(from.user_clusters_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void IndexQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.IndexQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery::CopyFrom(const IndexQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.IndexQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery::IsInitialized() const {
  return true;
}

void IndexQuery::Swap(IndexQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexQuery::InternalSwap(IndexQuery* other) {
  using std::swap;
  variants_.InternalSwap(&other->variants_);
  navigs_.InternalSwap(&other->navigs_);
  user_clusters_.InternalSwap(&other->user_clusters_);
  text_.Swap(&other->text_);
  swap(frequency_, other->frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexQuery::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexQuery

// string text = 1 [(.gogo.json) = {
void IndexQuery::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IndexQuery::text() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.text)
  return text_.GetNoArena();
}
void IndexQuery::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.text)
}
#if LANG_CXX11
void IndexQuery::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexQuery.text)
}
#endif
void IndexQuery::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexQuery.text)
}
void IndexQuery::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexQuery.text)
}
::std::string* IndexQuery::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IndexQuery::release_text() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexQuery.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IndexQuery::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexQuery.text)
}

// uint32 frequency = 2 [(.gogo.json) = {
void IndexQuery::clear_frequency() {
  frequency_ = 0u;
}
::google::protobuf::uint32 IndexQuery::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.frequency)
  return frequency_;
}
void IndexQuery::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.frequency)
}

// repeated .pb.suggests.IndexQuery.Variant variants = 3 [(.gogo.json) = {
int IndexQuery::variants_size() const {
  return variants_.size();
}
void IndexQuery::clear_variants() {
  variants_.Clear();
}
const ::pb::suggests::IndexQuery_Variant& IndexQuery::variants(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.variants)
  return variants_.Get(index);
}
::pb::suggests::IndexQuery_Variant* IndexQuery::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.variants)
  return variants_.Mutable(index);
}
::pb::suggests::IndexQuery_Variant* IndexQuery::add_variants() {
  // @@protoc_insertion_point(field_add:pb.suggests.IndexQuery.variants)
  return variants_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Variant >*
IndexQuery::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.IndexQuery.variants)
  return &variants_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Variant >&
IndexQuery::variants() const {
  // @@protoc_insertion_point(field_list:pb.suggests.IndexQuery.variants)
  return variants_;
}

// repeated .pb.suggests.IndexQuery.Navig navigs = 4 [(.gogo.json) = {
int IndexQuery::navigs_size() const {
  return navigs_.size();
}
void IndexQuery::clear_navigs() {
  navigs_.Clear();
}
const ::pb::suggests::IndexQuery_Navig& IndexQuery::navigs(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.navigs)
  return navigs_.Get(index);
}
::pb::suggests::IndexQuery_Navig* IndexQuery::mutable_navigs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.navigs)
  return navigs_.Mutable(index);
}
::pb::suggests::IndexQuery_Navig* IndexQuery::add_navigs() {
  // @@protoc_insertion_point(field_add:pb.suggests.IndexQuery.navigs)
  return navigs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Navig >*
IndexQuery::mutable_navigs() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.IndexQuery.navigs)
  return &navigs_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Navig >&
IndexQuery::navigs() const {
  // @@protoc_insertion_point(field_list:pb.suggests.IndexQuery.navigs)
  return navigs_;
}

// repeated .pb.suggests.IndexQuery.UserCluster user_clusters = 5 [(.gogo.json) = {
int IndexQuery::user_clusters_size() const {
  return user_clusters_.size();
}
void IndexQuery::clear_user_clusters() {
  user_clusters_.Clear();
}
const ::pb::suggests::IndexQuery_UserCluster& IndexQuery::user_clusters(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.user_clusters)
  return user_clusters_.Get(index);
}
::pb::suggests::IndexQuery_UserCluster* IndexQuery::mutable_user_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.user_clusters)
  return user_clusters_.Mutable(index);
}
::pb::suggests::IndexQuery_UserCluster* IndexQuery::add_user_clusters() {
  // @@protoc_insertion_point(field_add:pb.suggests.IndexQuery.user_clusters)
  return user_clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_UserCluster >*
IndexQuery::mutable_user_clusters() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.IndexQuery.user_clusters)
  return &user_clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_UserCluster >&
IndexQuery::user_clusters() const {
  // @@protoc_insertion_point(field_list:pb.suggests.IndexQuery.user_clusters)
  return user_clusters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQuery_MatchedPair::kBeginPosFieldNumber;
const int ResponseQuery_MatchedPair::kEndPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuery_MatchedPair::ResponseQuery_MatchedPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.ResponseQuery.MatchedPair)
}
ResponseQuery_MatchedPair::ResponseQuery_MatchedPair(const ResponseQuery_MatchedPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_pos_, &from.begin_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_pos_) -
    reinterpret_cast<char*>(&begin_pos_)) + sizeof(end_pos_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.ResponseQuery.MatchedPair)
}

void ResponseQuery_MatchedPair::SharedCtor() {
  ::memset(&begin_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_pos_) -
      reinterpret_cast<char*>(&begin_pos_)) + sizeof(end_pos_));
  _cached_size_ = 0;
}

ResponseQuery_MatchedPair::~ResponseQuery_MatchedPair() {
  // @@protoc_insertion_point(destructor:pb.suggests.ResponseQuery.MatchedPair)
  SharedDtor();
}

void ResponseQuery_MatchedPair::SharedDtor() {
}

void ResponseQuery_MatchedPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuery_MatchedPair::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQuery_MatchedPair& ResponseQuery_MatchedPair::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseQuery_MatchedPair* ResponseQuery_MatchedPair::New(::google::protobuf::Arena* arena) const {
  ResponseQuery_MatchedPair* n = new ResponseQuery_MatchedPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuery_MatchedPair::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.ResponseQuery.MatchedPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_pos_) -
      reinterpret_cast<char*>(&begin_pos_)) + sizeof(end_pos_));
  _internal_metadata_.Clear();
}

bool ResponseQuery_MatchedPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.ResponseQuery.MatchedPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 begin_pos = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_pos = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.ResponseQuery.MatchedPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.ResponseQuery.MatchedPair)
  return false;
#undef DO_
}

void ResponseQuery_MatchedPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.ResponseQuery.MatchedPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 begin_pos = 1 [(.gogo.json) = {
  if (this->begin_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begin_pos(), output);
  }

  // uint32 end_pos = 2 [(.gogo.json) = {
  if (this->end_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.ResponseQuery.MatchedPair)
}

::google::protobuf::uint8* ResponseQuery_MatchedPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.ResponseQuery.MatchedPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 begin_pos = 1 [(.gogo.json) = {
  if (this->begin_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begin_pos(), target);
  }

  // uint32 end_pos = 2 [(.gogo.json) = {
  if (this->end_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_pos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.ResponseQuery.MatchedPair)
  return target;
}

size_t ResponseQuery_MatchedPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.ResponseQuery.MatchedPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 begin_pos = 1 [(.gogo.json) = {
  if (this->begin_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_pos());
  }

  // uint32 end_pos = 2 [(.gogo.json) = {
  if (this->end_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuery_MatchedPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.ResponseQuery.MatchedPair)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQuery_MatchedPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuery_MatchedPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.ResponseQuery.MatchedPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.ResponseQuery.MatchedPair)
    MergeFrom(*source);
  }
}

void ResponseQuery_MatchedPair::MergeFrom(const ResponseQuery_MatchedPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.ResponseQuery.MatchedPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin_pos() != 0) {
    set_begin_pos(from.begin_pos());
  }
  if (from.end_pos() != 0) {
    set_end_pos(from.end_pos());
  }
}

void ResponseQuery_MatchedPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.ResponseQuery.MatchedPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuery_MatchedPair::CopyFrom(const ResponseQuery_MatchedPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.ResponseQuery.MatchedPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery_MatchedPair::IsInitialized() const {
  return true;
}

void ResponseQuery_MatchedPair::Swap(ResponseQuery_MatchedPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuery_MatchedPair::InternalSwap(ResponseQuery_MatchedPair* other) {
  using std::swap;
  swap(begin_pos_, other->begin_pos_);
  swap(end_pos_, other->end_pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuery_MatchedPair::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQuery_MatchedPair

// uint32 begin_pos = 1 [(.gogo.json) = {
void ResponseQuery_MatchedPair::clear_begin_pos() {
  begin_pos_ = 0u;
}
::google::protobuf::uint32 ResponseQuery_MatchedPair::begin_pos() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.MatchedPair.begin_pos)
  return begin_pos_;
}
void ResponseQuery_MatchedPair::set_begin_pos(::google::protobuf::uint32 value) {
  
  begin_pos_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseQuery.MatchedPair.begin_pos)
}

// uint32 end_pos = 2 [(.gogo.json) = {
void ResponseQuery_MatchedPair::clear_end_pos() {
  end_pos_ = 0u;
}
::google::protobuf::uint32 ResponseQuery_MatchedPair::end_pos() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.MatchedPair.end_pos)
  return end_pos_;
}
void ResponseQuery_MatchedPair::set_end_pos(::google::protobuf::uint32 value) {
  
  end_pos_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseQuery.MatchedPair.end_pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQuery::kTextFieldNumber;
const int ResponseQuery::kTextMarkedFieldNumber;
const int ResponseQuery::kMatchedRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuery::ResponseQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.ResponseQuery)
}
ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      matched_ranges_(from.matched_ranges_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  text_marked_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text_marked().size() > 0) {
    text_marked_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_marked_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.suggests.ResponseQuery)
}

void ResponseQuery::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_marked_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:pb.suggests.ResponseQuery)
  SharedDtor();
}

void ResponseQuery::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_marked_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuery::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQuery& ResponseQuery::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseQuery* ResponseQuery::New(::google::protobuf::Arena* arena) const {
  ResponseQuery* n = new ResponseQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matched_ranges_.Clear();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_marked_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ResponseQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.ResponseQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.ResponseQuery.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text_marked = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_marked()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_marked().data(), static_cast<int>(this->text_marked().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.ResponseQuery.text_marked"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.suggests.ResponseQuery.MatchedPair matched_ranges = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matched_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.ResponseQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.ResponseQuery)
  return false;
#undef DO_
}

void ResponseQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1 [(.gogo.xml) = {
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseQuery.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // string text_marked = 2 [(.gogo.xml) = {
  if (this->text_marked().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_marked().data(), static_cast<int>(this->text_marked().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseQuery.text_marked");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text_marked(), output);
  }

  // repeated .pb.suggests.ResponseQuery.MatchedPair matched_ranges = 3 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matched_ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matched_ranges(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.ResponseQuery)
}

::google::protobuf::uint8* ResponseQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1 [(.gogo.xml) = {
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseQuery.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // string text_marked = 2 [(.gogo.xml) = {
  if (this->text_marked().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_marked().data(), static_cast<int>(this->text_marked().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseQuery.text_marked");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text_marked(), target);
  }

  // repeated .pb.suggests.ResponseQuery.MatchedPair matched_ranges = 3 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matched_ranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->matched_ranges(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.ResponseQuery)
  return target;
}

size_t ResponseQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.ResponseQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.suggests.ResponseQuery.MatchedPair matched_ranges = 3 [(.gogo.json) = {
  {
    unsigned int count = static_cast<unsigned int>(this->matched_ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matched_ranges(static_cast<int>(i)));
    }
  }

  // string text = 1 [(.gogo.xml) = {
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string text_marked = 2 [(.gogo.xml) = {
  if (this->text_marked().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_marked());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.ResponseQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.ResponseQuery)
    MergeFrom(*source);
  }
}

void ResponseQuery::MergeFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matched_ranges_.MergeFrom(from.matched_ranges_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.text_marked().size() > 0) {

    text_marked_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_marked_);
  }
}

void ResponseQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {
  return true;
}

void ResponseQuery::Swap(ResponseQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuery::InternalSwap(ResponseQuery* other) {
  using std::swap;
  matched_ranges_.InternalSwap(&other->matched_ranges_);
  text_.Swap(&other->text_);
  text_marked_.Swap(&other->text_marked_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuery::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQuery

// string text = 1 [(.gogo.xml) = {
void ResponseQuery::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseQuery::text() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.text)
  return text_.GetNoArena();
}
void ResponseQuery::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseQuery.text)
}
#if LANG_CXX11
void ResponseQuery::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseQuery.text)
}
#endif
void ResponseQuery::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseQuery.text)
}
void ResponseQuery::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseQuery.text)
}
::std::string* ResponseQuery::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseQuery.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseQuery::release_text() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseQuery.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseQuery::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseQuery.text)
}

// string text_marked = 2 [(.gogo.xml) = {
void ResponseQuery::clear_text_marked() {
  text_marked_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseQuery::text_marked() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.text_marked)
  return text_marked_.GetNoArena();
}
void ResponseQuery::set_text_marked(const ::std::string& value) {
  
  text_marked_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseQuery.text_marked)
}
#if LANG_CXX11
void ResponseQuery::set_text_marked(::std::string&& value) {
  
  text_marked_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseQuery.text_marked)
}
#endif
void ResponseQuery::set_text_marked(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_marked_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseQuery.text_marked)
}
void ResponseQuery::set_text_marked(const char* value, size_t size) {
  
  text_marked_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseQuery.text_marked)
}
::std::string* ResponseQuery::mutable_text_marked() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseQuery.text_marked)
  return text_marked_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseQuery::release_text_marked() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseQuery.text_marked)
  
  return text_marked_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseQuery::set_allocated_text_marked(::std::string* text_marked) {
  if (text_marked != NULL) {
    
  } else {
    
  }
  text_marked_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_marked);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseQuery.text_marked)
}

// repeated .pb.suggests.ResponseQuery.MatchedPair matched_ranges = 3 [(.gogo.json) = {
int ResponseQuery::matched_ranges_size() const {
  return matched_ranges_.size();
}
void ResponseQuery::clear_matched_ranges() {
  matched_ranges_.Clear();
}
const ::pb::suggests::ResponseQuery_MatchedPair& ResponseQuery::matched_ranges(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.matched_ranges)
  return matched_ranges_.Get(index);
}
::pb::suggests::ResponseQuery_MatchedPair* ResponseQuery::mutable_matched_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseQuery.matched_ranges)
  return matched_ranges_.Mutable(index);
}
::pb::suggests::ResponseQuery_MatchedPair* ResponseQuery::add_matched_ranges() {
  // @@protoc_insertion_point(field_add:pb.suggests.ResponseQuery.matched_ranges)
  return matched_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery_MatchedPair >*
ResponseQuery::mutable_matched_ranges() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ResponseQuery.matched_ranges)
  return &matched_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery_MatchedPair >&
ResponseQuery::matched_ranges() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ResponseQuery.matched_ranges)
  return matched_ranges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseNavigVkMusic::kTypeFieldNumber;
const int ResponseNavigVkMusic::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseNavigVkMusic::ResponseNavigVkMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.ResponseNavigVkMusic)
}
ResponseNavigVkMusic::ResponseNavigVkMusic(const ResponseNavigVkMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb.suggests.ResponseNavigVkMusic)
}

void ResponseNavigVkMusic::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

ResponseNavigVkMusic::~ResponseNavigVkMusic() {
  // @@protoc_insertion_point(destructor:pb.suggests.ResponseNavigVkMusic)
  SharedDtor();
}

void ResponseNavigVkMusic::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseNavigVkMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseNavigVkMusic::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseNavigVkMusic& ResponseNavigVkMusic::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseNavigVkMusic* ResponseNavigVkMusic::New(::google::protobuf::Arena* arena) const {
  ResponseNavigVkMusic* n = new ResponseNavigVkMusic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseNavigVkMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.ResponseNavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ResponseNavigVkMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.ResponseNavigVkMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.suggests.NavigVkMusicType type = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::suggests::NavigVkMusicType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.ResponseNavigVkMusic.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.ResponseNavigVkMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.ResponseNavigVkMusic)
  return false;
#undef DO_
}

void ResponseNavigVkMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.ResponseNavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.suggests.NavigVkMusicType type = 1 [(.gogo.xml) = {
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string id = 2 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseNavigVkMusic.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.ResponseNavigVkMusic)
}

::google::protobuf::uint8* ResponseNavigVkMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.ResponseNavigVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.suggests.NavigVkMusicType type = 1 [(.gogo.xml) = {
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string id = 2 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseNavigVkMusic.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.ResponseNavigVkMusic)
  return target;
}

size_t ResponseNavigVkMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.ResponseNavigVkMusic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 2 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .pb.suggests.NavigVkMusicType type = 1 [(.gogo.xml) = {
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseNavigVkMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.ResponseNavigVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseNavigVkMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseNavigVkMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.ResponseNavigVkMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.ResponseNavigVkMusic)
    MergeFrom(*source);
  }
}

void ResponseNavigVkMusic::MergeFrom(const ResponseNavigVkMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.ResponseNavigVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ResponseNavigVkMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.ResponseNavigVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseNavigVkMusic::CopyFrom(const ResponseNavigVkMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.ResponseNavigVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseNavigVkMusic::IsInitialized() const {
  return true;
}

void ResponseNavigVkMusic::Swap(ResponseNavigVkMusic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseNavigVkMusic::InternalSwap(ResponseNavigVkMusic* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseNavigVkMusic::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseNavigVkMusic

// .pb.suggests.NavigVkMusicType type = 1 [(.gogo.xml) = {
void ResponseNavigVkMusic::clear_type() {
  type_ = 0;
}
::pb::suggests::NavigVkMusicType ResponseNavigVkMusic::type() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseNavigVkMusic.type)
  return static_cast< ::pb::suggests::NavigVkMusicType >(type_);
}
void ResponseNavigVkMusic::set_type(::pb::suggests::NavigVkMusicType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseNavigVkMusic.type)
}

// string id = 2 [(.gogo.xml) = {
void ResponseNavigVkMusic::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseNavigVkMusic::id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseNavigVkMusic.id)
  return id_.GetNoArena();
}
void ResponseNavigVkMusic::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseNavigVkMusic.id)
}
#if LANG_CXX11
void ResponseNavigVkMusic::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseNavigVkMusic.id)
}
#endif
void ResponseNavigVkMusic::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseNavigVkMusic.id)
}
void ResponseNavigVkMusic::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseNavigVkMusic.id)
}
::std::string* ResponseNavigVkMusic::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseNavigVkMusic.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseNavigVkMusic::release_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseNavigVkMusic.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseNavigVkMusic::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseNavigVkMusic.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseVkMusic_Terms::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseVkMusic_Terms::ResponseVkMusic_Terms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.ResponseVkMusic.Terms)
}
ResponseVkMusic_Terms::ResponseVkMusic_Terms(const ResponseVkMusic_Terms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.suggests.ResponseVkMusic.Terms)
}

void ResponseVkMusic_Terms::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseVkMusic_Terms::~ResponseVkMusic_Terms() {
  // @@protoc_insertion_point(destructor:pb.suggests.ResponseVkMusic.Terms)
  SharedDtor();
}

void ResponseVkMusic_Terms::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseVkMusic_Terms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseVkMusic_Terms::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseVkMusic_Terms& ResponseVkMusic_Terms::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseVkMusic_Terms* ResponseVkMusic_Terms::New(::google::protobuf::Arena* arena) const {
  ResponseVkMusic_Terms* n = new ResponseVkMusic_Terms;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseVkMusic_Terms::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.ResponseVkMusic.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ResponseVkMusic_Terms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.ResponseVkMusic.Terms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.ResponseVkMusic.Terms.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.ResponseVkMusic.Terms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.ResponseVkMusic.Terms)
  return false;
#undef DO_
}

void ResponseVkMusic_Terms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.ResponseVkMusic.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseVkMusic.Terms.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.ResponseVkMusic.Terms)
}

::google::protobuf::uint8* ResponseVkMusic_Terms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.ResponseVkMusic.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseVkMusic.Terms.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.ResponseVkMusic.Terms)
  return target;
}

size_t ResponseVkMusic_Terms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.ResponseVkMusic.Terms)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseVkMusic_Terms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.ResponseVkMusic.Terms)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseVkMusic_Terms* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseVkMusic_Terms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.ResponseVkMusic.Terms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.ResponseVkMusic.Terms)
    MergeFrom(*source);
  }
}

void ResponseVkMusic_Terms::MergeFrom(const ResponseVkMusic_Terms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.ResponseVkMusic.Terms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ResponseVkMusic_Terms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.ResponseVkMusic.Terms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseVkMusic_Terms::CopyFrom(const ResponseVkMusic_Terms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.ResponseVkMusic.Terms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseVkMusic_Terms::IsInitialized() const {
  return true;
}

void ResponseVkMusic_Terms::Swap(ResponseVkMusic_Terms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseVkMusic_Terms::InternalSwap(ResponseVkMusic_Terms* other) {
  using std::swap;
  query_.Swap(&other->query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseVkMusic_Terms::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseVkMusic_Terms

// string query = 1 [(.gogo.json) = {
void ResponseVkMusic_Terms::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseVkMusic_Terms::query() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.Terms.query)
  return query_.GetNoArena();
}
void ResponseVkMusic_Terms::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseVkMusic.Terms.query)
}
#if LANG_CXX11
void ResponseVkMusic_Terms::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseVkMusic.Terms.query)
}
#endif
void ResponseVkMusic_Terms::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseVkMusic.Terms.query)
}
void ResponseVkMusic_Terms::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseVkMusic.Terms.query)
}
::std::string* ResponseVkMusic_Terms::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.Terms.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseVkMusic_Terms::release_query() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseVkMusic.Terms.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseVkMusic_Terms::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseVkMusic.Terms.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseVkMusic::kQueriesFieldNumber;
const int ResponseVkMusic::kNavigsFieldNumber;
const int ResponseVkMusic::kHistoryFieldNumber;
const int ResponseVkMusic::kQidFieldNumber;
const int ResponseVkMusic::kTermsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseVkMusic::ResponseVkMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.ResponseVkMusic)
}
ResponseVkMusic::ResponseVkMusic(const ResponseVkMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queries_(from.queries_),
      navigs_(from.navigs_),
      history_(from.history_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.qid().size() > 0) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.has_terms()) {
    terms_ = new ::pb::suggests::ResponseVkMusic_Terms(*from.terms_);
  } else {
    terms_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.suggests.ResponseVkMusic)
}

void ResponseVkMusic::SharedCtor() {
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terms_ = NULL;
  _cached_size_ = 0;
}

ResponseVkMusic::~ResponseVkMusic() {
  // @@protoc_insertion_point(destructor:pb.suggests.ResponseVkMusic)
  SharedDtor();
}

void ResponseVkMusic::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete terms_;
}

void ResponseVkMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseVkMusic::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseVkMusic& ResponseVkMusic::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseVkMusic* ResponseVkMusic::New(::google::protobuf::Arena* arena) const {
  ResponseVkMusic* n = new ResponseVkMusic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseVkMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.ResponseVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  navigs_.Clear();
  history_.Clear();
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && terms_ != NULL) {
    delete terms_;
  }
  terms_ = NULL;
  _internal_metadata_.Clear();
}

bool ResponseVkMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.ResponseVkMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.suggests.ResponseQuery queries = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.suggests.ResponseNavigVkMusic navigs = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navigs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.suggests.ResponseQuery history = 3 [(.gogo.xml) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string qid = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.ResponseVkMusic.qid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.suggests.ResponseVkMusic.Terms terms = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.ResponseVkMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.ResponseVkMusic)
  return false;
#undef DO_
}

void ResponseVkMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.ResponseVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.suggests.ResponseQuery queries = 1 [(.gogo.xml) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queries(static_cast<int>(i)), output);
  }

  // repeated .pb.suggests.ResponseNavigVkMusic navigs = 2 [(.gogo.xml) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->navigs(static_cast<int>(i)), output);
  }

  // repeated .pb.suggests.ResponseQuery history = 3 [(.gogo.xml) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(static_cast<int>(i)), output);
  }

  // string qid = 4 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseVkMusic.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->qid(), output);
  }

  // .pb.suggests.ResponseVkMusic.Terms terms = 5 [(.gogo.json) = {
  if (this->has_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->terms_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.ResponseVkMusic)
}

::google::protobuf::uint8* ResponseVkMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.ResponseVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.suggests.ResponseQuery queries = 1 [(.gogo.xml) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->queries(static_cast<int>(i)), deterministic, target);
  }

  // repeated .pb.suggests.ResponseNavigVkMusic navigs = 2 [(.gogo.xml) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->navigs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .pb.suggests.ResponseQuery history = 3 [(.gogo.xml) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->history(static_cast<int>(i)), deterministic, target);
  }

  // string qid = 4 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.ResponseVkMusic.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->qid(), target);
  }

  // .pb.suggests.ResponseVkMusic.Terms terms = 5 [(.gogo.json) = {
  if (this->has_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->terms_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.ResponseVkMusic)
  return target;
}

size_t ResponseVkMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.ResponseVkMusic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.suggests.ResponseQuery queries = 1 [(.gogo.xml) = {
  {
    unsigned int count = static_cast<unsigned int>(this->queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queries(static_cast<int>(i)));
    }
  }

  // repeated .pb.suggests.ResponseNavigVkMusic navigs = 2 [(.gogo.xml) = {
  {
    unsigned int count = static_cast<unsigned int>(this->navigs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->navigs(static_cast<int>(i)));
    }
  }

  // repeated .pb.suggests.ResponseQuery history = 3 [(.gogo.xml) = {
  {
    unsigned int count = static_cast<unsigned int>(this->history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history(static_cast<int>(i)));
    }
  }

  // string qid = 4 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  // .pb.suggests.ResponseVkMusic.Terms terms = 5 [(.gogo.json) = {
  if (this->has_terms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->terms_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseVkMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.ResponseVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseVkMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseVkMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.ResponseVkMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.ResponseVkMusic)
    MergeFrom(*source);
  }
}

void ResponseVkMusic::MergeFrom(const ResponseVkMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.ResponseVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  navigs_.MergeFrom(from.navigs_);
  history_.MergeFrom(from.history_);
  if (from.qid().size() > 0) {

    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.has_terms()) {
    mutable_terms()->::pb::suggests::ResponseVkMusic_Terms::MergeFrom(from.terms());
  }
}

void ResponseVkMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.ResponseVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseVkMusic::CopyFrom(const ResponseVkMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.ResponseVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseVkMusic::IsInitialized() const {
  return true;
}

void ResponseVkMusic::Swap(ResponseVkMusic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseVkMusic::InternalSwap(ResponseVkMusic* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  navigs_.InternalSwap(&other->navigs_);
  history_.InternalSwap(&other->history_);
  qid_.Swap(&other->qid_);
  swap(terms_, other->terms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseVkMusic::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseVkMusic

// repeated .pb.suggests.ResponseQuery queries = 1 [(.gogo.xml) = {
int ResponseVkMusic::queries_size() const {
  return queries_.size();
}
void ResponseVkMusic::clear_queries() {
  queries_.Clear();
}
const ::pb::suggests::ResponseQuery& ResponseVkMusic::queries(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.queries)
  return queries_.Get(index);
}
::pb::suggests::ResponseQuery* ResponseVkMusic::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.queries)
  return queries_.Mutable(index);
}
::pb::suggests::ResponseQuery* ResponseVkMusic::add_queries() {
  // @@protoc_insertion_point(field_add:pb.suggests.ResponseVkMusic.queries)
  return queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >*
ResponseVkMusic::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ResponseVkMusic.queries)
  return &queries_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >&
ResponseVkMusic::queries() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ResponseVkMusic.queries)
  return queries_;
}

// repeated .pb.suggests.ResponseNavigVkMusic navigs = 2 [(.gogo.xml) = {
int ResponseVkMusic::navigs_size() const {
  return navigs_.size();
}
void ResponseVkMusic::clear_navigs() {
  navigs_.Clear();
}
const ::pb::suggests::ResponseNavigVkMusic& ResponseVkMusic::navigs(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.navigs)
  return navigs_.Get(index);
}
::pb::suggests::ResponseNavigVkMusic* ResponseVkMusic::mutable_navigs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.navigs)
  return navigs_.Mutable(index);
}
::pb::suggests::ResponseNavigVkMusic* ResponseVkMusic::add_navigs() {
  // @@protoc_insertion_point(field_add:pb.suggests.ResponseVkMusic.navigs)
  return navigs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseNavigVkMusic >*
ResponseVkMusic::mutable_navigs() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ResponseVkMusic.navigs)
  return &navigs_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseNavigVkMusic >&
ResponseVkMusic::navigs() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ResponseVkMusic.navigs)
  return navigs_;
}

// repeated .pb.suggests.ResponseQuery history = 3 [(.gogo.xml) = {
int ResponseVkMusic::history_size() const {
  return history_.size();
}
void ResponseVkMusic::clear_history() {
  history_.Clear();
}
const ::pb::suggests::ResponseQuery& ResponseVkMusic::history(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.history)
  return history_.Get(index);
}
::pb::suggests::ResponseQuery* ResponseVkMusic::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.history)
  return history_.Mutable(index);
}
::pb::suggests::ResponseQuery* ResponseVkMusic::add_history() {
  // @@protoc_insertion_point(field_add:pb.suggests.ResponseVkMusic.history)
  return history_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >*
ResponseVkMusic::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ResponseVkMusic.history)
  return &history_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >&
ResponseVkMusic::history() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ResponseVkMusic.history)
  return history_;
}

// string qid = 4 [(.gogo.json) = {
void ResponseVkMusic::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseVkMusic::qid() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.qid)
  return qid_.GetNoArena();
}
void ResponseVkMusic::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseVkMusic.qid)
}
#if LANG_CXX11
void ResponseVkMusic::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseVkMusic.qid)
}
#endif
void ResponseVkMusic::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseVkMusic.qid)
}
void ResponseVkMusic::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseVkMusic.qid)
}
::std::string* ResponseVkMusic::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseVkMusic::release_qid() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseVkMusic.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseVkMusic::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseVkMusic.qid)
}

// .pb.suggests.ResponseVkMusic.Terms terms = 5 [(.gogo.json) = {
bool ResponseVkMusic::has_terms() const {
  return this != internal_default_instance() && terms_ != NULL;
}
void ResponseVkMusic::clear_terms() {
  if (GetArenaNoVirtual() == NULL && terms_ != NULL) delete terms_;
  terms_ = NULL;
}
const ::pb::suggests::ResponseVkMusic_Terms& ResponseVkMusic::terms() const {
  const ::pb::suggests::ResponseVkMusic_Terms* p = terms_;
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.terms)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::suggests::ResponseVkMusic_Terms*>(
      &::pb::suggests::_ResponseVkMusic_Terms_default_instance_);
}
::pb::suggests::ResponseVkMusic_Terms* ResponseVkMusic::mutable_terms() {
  
  if (terms_ == NULL) {
    terms_ = new ::pb::suggests::ResponseVkMusic_Terms;
  }
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.terms)
  return terms_;
}
::pb::suggests::ResponseVkMusic_Terms* ResponseVkMusic::release_terms() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseVkMusic.terms)
  
  ::pb::suggests::ResponseVkMusic_Terms* temp = terms_;
  terms_ = NULL;
  return temp;
}
void ResponseVkMusic::set_allocated_terms(::pb::suggests::ResponseVkMusic_Terms* terms) {
  delete terms_;
  terms_ = terms;
  if (terms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseVkMusic.terms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfoVkMusic_Centroid::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfoVkMusic_Centroid::ClusterInfoVkMusic_Centroid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.ClusterInfoVkMusic.Centroid)
}
ClusterInfoVkMusic_Centroid::ClusterInfoVkMusic_Centroid(const ClusterInfoVkMusic_Centroid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.suggests.ClusterInfoVkMusic.Centroid)
}

void ClusterInfoVkMusic_Centroid::SharedCtor() {
  _cached_size_ = 0;
}

ClusterInfoVkMusic_Centroid::~ClusterInfoVkMusic_Centroid() {
  // @@protoc_insertion_point(destructor:pb.suggests.ClusterInfoVkMusic.Centroid)
  SharedDtor();
}

void ClusterInfoVkMusic_Centroid::SharedDtor() {
}

void ClusterInfoVkMusic_Centroid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfoVkMusic_Centroid::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterInfoVkMusic_Centroid& ClusterInfoVkMusic_Centroid::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterInfoVkMusic_Centroid* ClusterInfoVkMusic_Centroid::New(::google::protobuf::Arena* arena) const {
  ClusterInfoVkMusic_Centroid* n = new ClusterInfoVkMusic_Centroid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterInfoVkMusic_Centroid::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

bool ClusterInfoVkMusic_Centroid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float values = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.ClusterInfoVkMusic.Centroid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.ClusterInfoVkMusic.Centroid)
  return false;
#undef DO_
}

void ClusterInfoVkMusic_Centroid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1 [(.gogo.json) = {
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _values_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->values().data(), this->values_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.ClusterInfoVkMusic.Centroid)
}

::google::protobuf::uint8* ClusterInfoVkMusic_Centroid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1 [(.gogo.json) = {
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _values_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->values_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.ClusterInfoVkMusic.Centroid)
  return target;
}

size_t ClusterInfoVkMusic_Centroid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float values = 1 [(.gogo.json) = {
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfoVkMusic_Centroid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfoVkMusic_Centroid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfoVkMusic_Centroid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.ClusterInfoVkMusic.Centroid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.ClusterInfoVkMusic.Centroid)
    MergeFrom(*source);
  }
}

void ClusterInfoVkMusic_Centroid::MergeFrom(const ClusterInfoVkMusic_Centroid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ClusterInfoVkMusic_Centroid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfoVkMusic_Centroid::CopyFrom(const ClusterInfoVkMusic_Centroid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.ClusterInfoVkMusic.Centroid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfoVkMusic_Centroid::IsInitialized() const {
  return true;
}

void ClusterInfoVkMusic_Centroid::Swap(ClusterInfoVkMusic_Centroid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfoVkMusic_Centroid::InternalSwap(ClusterInfoVkMusic_Centroid* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterInfoVkMusic_Centroid::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterInfoVkMusic_Centroid

// repeated float values = 1 [(.gogo.json) = {
int ClusterInfoVkMusic_Centroid::values_size() const {
  return values_.size();
}
void ClusterInfoVkMusic_Centroid::clear_values() {
  values_.Clear();
}
float ClusterInfoVkMusic_Centroid::values(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ClusterInfoVkMusic.Centroid.values)
  return values_.Get(index);
}
void ClusterInfoVkMusic_Centroid::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.suggests.ClusterInfoVkMusic.Centroid.values)
}
void ClusterInfoVkMusic_Centroid::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:pb.suggests.ClusterInfoVkMusic.Centroid.values)
}
const ::google::protobuf::RepeatedField< float >&
ClusterInfoVkMusic_Centroid::values() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ClusterInfoVkMusic.Centroid.values)
  return values_;
}
::google::protobuf::RepeatedField< float >*
ClusterInfoVkMusic_Centroid::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ClusterInfoVkMusic.Centroid.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfoVkMusic::kClusterIdFieldNumber;
const int ClusterInfoVkMusic::kCentroidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfoVkMusic::ClusterInfoVkMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.ClusterInfoVkMusic)
}
ClusterInfoVkMusic::ClusterInfoVkMusic(const ClusterInfoVkMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_centroid()) {
    centroid_ = new ::pb::suggests::ClusterInfoVkMusic_Centroid(*from.centroid_);
  } else {
    centroid_ = NULL;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:pb.suggests.ClusterInfoVkMusic)
}

void ClusterInfoVkMusic::SharedCtor() {
  ::memset(&centroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&centroid_)) + sizeof(cluster_id_));
  _cached_size_ = 0;
}

ClusterInfoVkMusic::~ClusterInfoVkMusic() {
  // @@protoc_insertion_point(destructor:pb.suggests.ClusterInfoVkMusic)
  SharedDtor();
}

void ClusterInfoVkMusic::SharedDtor() {
  if (this != internal_default_instance()) delete centroid_;
}

void ClusterInfoVkMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfoVkMusic::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterInfoVkMusic& ClusterInfoVkMusic::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterInfoVkMusic* ClusterInfoVkMusic::New(::google::protobuf::Arena* arena) const {
  ClusterInfoVkMusic* n = new ClusterInfoVkMusic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterInfoVkMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.ClusterInfoVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && centroid_ != NULL) {
    delete centroid_;
  }
  centroid_ = NULL;
  cluster_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ClusterInfoVkMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.ClusterInfoVkMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cluster_id = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.suggests.ClusterInfoVkMusic.Centroid centroid = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.ClusterInfoVkMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.ClusterInfoVkMusic)
  return false;
#undef DO_
}

void ClusterInfoVkMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.ClusterInfoVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cluster_id = 1 [(.gogo.json) = {
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cluster_id(), output);
  }

  // .pb.suggests.ClusterInfoVkMusic.Centroid centroid = 2 [(.gogo.json) = {
  if (this->has_centroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->centroid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.ClusterInfoVkMusic)
}

::google::protobuf::uint8* ClusterInfoVkMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.ClusterInfoVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cluster_id = 1 [(.gogo.json) = {
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cluster_id(), target);
  }

  // .pb.suggests.ClusterInfoVkMusic.Centroid centroid = 2 [(.gogo.json) = {
  if (this->has_centroid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->centroid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.ClusterInfoVkMusic)
  return target;
}

size_t ClusterInfoVkMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.ClusterInfoVkMusic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .pb.suggests.ClusterInfoVkMusic.Centroid centroid = 2 [(.gogo.json) = {
  if (this->has_centroid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->centroid_);
  }

  // uint32 cluster_id = 1 [(.gogo.json) = {
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfoVkMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.ClusterInfoVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfoVkMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfoVkMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.ClusterInfoVkMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.ClusterInfoVkMusic)
    MergeFrom(*source);
  }
}

void ClusterInfoVkMusic::MergeFrom(const ClusterInfoVkMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.ClusterInfoVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_centroid()) {
    mutable_centroid()->::pb::suggests::ClusterInfoVkMusic_Centroid::MergeFrom(from.centroid());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void ClusterInfoVkMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.ClusterInfoVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfoVkMusic::CopyFrom(const ClusterInfoVkMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.ClusterInfoVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfoVkMusic::IsInitialized() const {
  return true;
}

void ClusterInfoVkMusic::Swap(ClusterInfoVkMusic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfoVkMusic::InternalSwap(ClusterInfoVkMusic* other) {
  using std::swap;
  swap(centroid_, other->centroid_);
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterInfoVkMusic::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterInfoVkMusic

// uint32 cluster_id = 1 [(.gogo.json) = {
void ClusterInfoVkMusic::clear_cluster_id() {
  cluster_id_ = 0u;
}
::google::protobuf::uint32 ClusterInfoVkMusic::cluster_id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ClusterInfoVkMusic.cluster_id)
  return cluster_id_;
}
void ClusterInfoVkMusic::set_cluster_id(::google::protobuf::uint32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.ClusterInfoVkMusic.cluster_id)
}

// .pb.suggests.ClusterInfoVkMusic.Centroid centroid = 2 [(.gogo.json) = {
bool ClusterInfoVkMusic::has_centroid() const {
  return this != internal_default_instance() && centroid_ != NULL;
}
void ClusterInfoVkMusic::clear_centroid() {
  if (GetArenaNoVirtual() == NULL && centroid_ != NULL) delete centroid_;
  centroid_ = NULL;
}
const ::pb::suggests::ClusterInfoVkMusic_Centroid& ClusterInfoVkMusic::centroid() const {
  const ::pb::suggests::ClusterInfoVkMusic_Centroid* p = centroid_;
  // @@protoc_insertion_point(field_get:pb.suggests.ClusterInfoVkMusic.centroid)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::suggests::ClusterInfoVkMusic_Centroid*>(
      &::pb::suggests::_ClusterInfoVkMusic_Centroid_default_instance_);
}
::pb::suggests::ClusterInfoVkMusic_Centroid* ClusterInfoVkMusic::mutable_centroid() {
  
  if (centroid_ == NULL) {
    centroid_ = new ::pb::suggests::ClusterInfoVkMusic_Centroid;
  }
  // @@protoc_insertion_point(field_mutable:pb.suggests.ClusterInfoVkMusic.centroid)
  return centroid_;
}
::pb::suggests::ClusterInfoVkMusic_Centroid* ClusterInfoVkMusic::release_centroid() {
  // @@protoc_insertion_point(field_release:pb.suggests.ClusterInfoVkMusic.centroid)
  
  ::pb::suggests::ClusterInfoVkMusic_Centroid* temp = centroid_;
  centroid_ = NULL;
  return temp;
}
void ClusterInfoVkMusic::set_allocated_centroid(::pb::suggests::ClusterInfoVkMusic_Centroid* centroid) {
  delete centroid_;
  centroid_ = centroid;
  if (centroid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ClusterInfoVkMusic.centroid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfosVkMusic::kClustersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfosVkMusic::ClusterInfosVkMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.ClusterInfosVkMusic)
}
ClusterInfosVkMusic::ClusterInfosVkMusic(const ClusterInfosVkMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      clusters_(from.clusters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.suggests.ClusterInfosVkMusic)
}

void ClusterInfosVkMusic::SharedCtor() {
  _cached_size_ = 0;
}

ClusterInfosVkMusic::~ClusterInfosVkMusic() {
  // @@protoc_insertion_point(destructor:pb.suggests.ClusterInfosVkMusic)
  SharedDtor();
}

void ClusterInfosVkMusic::SharedDtor() {
}

void ClusterInfosVkMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfosVkMusic::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterInfosVkMusic& ClusterInfosVkMusic::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterInfosVkMusic* ClusterInfosVkMusic::New(::google::protobuf::Arena* arena) const {
  ClusterInfosVkMusic* n = new ClusterInfosVkMusic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterInfosVkMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.ClusterInfosVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clusters_.Clear();
  _internal_metadata_.Clear();
}

bool ClusterInfosVkMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.ClusterInfosVkMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.suggests.ClusterInfoVkMusic clusters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.ClusterInfosVkMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.ClusterInfosVkMusic)
  return false;
#undef DO_
}

void ClusterInfosVkMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.ClusterInfosVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.suggests.ClusterInfoVkMusic clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clusters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.ClusterInfosVkMusic)
}

::google::protobuf::uint8* ClusterInfosVkMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.ClusterInfosVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.suggests.ClusterInfoVkMusic clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->clusters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.ClusterInfosVkMusic)
  return target;
}

size_t ClusterInfosVkMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.ClusterInfosVkMusic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.suggests.ClusterInfoVkMusic clusters = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->clusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clusters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfosVkMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.ClusterInfosVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfosVkMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfosVkMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.ClusterInfosVkMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.ClusterInfosVkMusic)
    MergeFrom(*source);
  }
}

void ClusterInfosVkMusic::MergeFrom(const ClusterInfosVkMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.ClusterInfosVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clusters_.MergeFrom(from.clusters_);
}

void ClusterInfosVkMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.ClusterInfosVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfosVkMusic::CopyFrom(const ClusterInfosVkMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.ClusterInfosVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfosVkMusic::IsInitialized() const {
  return true;
}

void ClusterInfosVkMusic::Swap(ClusterInfosVkMusic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfosVkMusic::InternalSwap(ClusterInfosVkMusic* other) {
  using std::swap;
  clusters_.InternalSwap(&other->clusters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterInfosVkMusic::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterInfosVkMusic

// repeated .pb.suggests.ClusterInfoVkMusic clusters = 1;
int ClusterInfosVkMusic::clusters_size() const {
  return clusters_.size();
}
void ClusterInfosVkMusic::clear_clusters() {
  clusters_.Clear();
}
const ::pb::suggests::ClusterInfoVkMusic& ClusterInfosVkMusic::clusters(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ClusterInfosVkMusic.clusters)
  return clusters_.Get(index);
}
::pb::suggests::ClusterInfoVkMusic* ClusterInfosVkMusic::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ClusterInfosVkMusic.clusters)
  return clusters_.Mutable(index);
}
::pb::suggests::ClusterInfoVkMusic* ClusterInfosVkMusic::add_clusters() {
  // @@protoc_insertion_point(field_add:pb.suggests.ClusterInfosVkMusic.clusters)
  return clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::ClusterInfoVkMusic >*
ClusterInfosVkMusic::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ClusterInfosVkMusic.clusters)
  return &clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ClusterInfoVkMusic >&
ClusterInfosVkMusic::clusters() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ClusterInfosVkMusic.clusters)
  return clusters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryEmbeddingVkMusic::kComponentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryEmbeddingVkMusic::QueryEmbeddingVkMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.QueryEmbeddingVkMusic)
}
QueryEmbeddingVkMusic::QueryEmbeddingVkMusic(const QueryEmbeddingVkMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      components_(from.components_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.suggests.QueryEmbeddingVkMusic)
}

void QueryEmbeddingVkMusic::SharedCtor() {
  _cached_size_ = 0;
}

QueryEmbeddingVkMusic::~QueryEmbeddingVkMusic() {
  // @@protoc_insertion_point(destructor:pb.suggests.QueryEmbeddingVkMusic)
  SharedDtor();
}

void QueryEmbeddingVkMusic::SharedDtor() {
}

void QueryEmbeddingVkMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryEmbeddingVkMusic::descriptor() {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryEmbeddingVkMusic& QueryEmbeddingVkMusic::default_instance() {
  protobuf_sugg_5fvk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryEmbeddingVkMusic* QueryEmbeddingVkMusic::New(::google::protobuf::Arena* arena) const {
  QueryEmbeddingVkMusic* n = new QueryEmbeddingVkMusic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryEmbeddingVkMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.QueryEmbeddingVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_.Clear();
  _internal_metadata_.Clear();
}

bool QueryEmbeddingVkMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.QueryEmbeddingVkMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float components = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_components())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_components())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.QueryEmbeddingVkMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.QueryEmbeddingVkMusic)
  return false;
#undef DO_
}

void QueryEmbeddingVkMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.QueryEmbeddingVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float components = 1;
  if (this->components_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _components_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->components().data(), this->components_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.QueryEmbeddingVkMusic)
}

::google::protobuf::uint8* QueryEmbeddingVkMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.QueryEmbeddingVkMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float components = 1;
  if (this->components_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _components_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->components_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.QueryEmbeddingVkMusic)
  return target;
}

size_t QueryEmbeddingVkMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.QueryEmbeddingVkMusic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float components = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->components_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _components_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryEmbeddingVkMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.QueryEmbeddingVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryEmbeddingVkMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryEmbeddingVkMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.QueryEmbeddingVkMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.QueryEmbeddingVkMusic)
    MergeFrom(*source);
  }
}

void QueryEmbeddingVkMusic::MergeFrom(const QueryEmbeddingVkMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.QueryEmbeddingVkMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
}

void QueryEmbeddingVkMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.QueryEmbeddingVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryEmbeddingVkMusic::CopyFrom(const QueryEmbeddingVkMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.QueryEmbeddingVkMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEmbeddingVkMusic::IsInitialized() const {
  return true;
}

void QueryEmbeddingVkMusic::Swap(QueryEmbeddingVkMusic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryEmbeddingVkMusic::InternalSwap(QueryEmbeddingVkMusic* other) {
  using std::swap;
  components_.InternalSwap(&other->components_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryEmbeddingVkMusic::GetMetadata() const {
  protobuf_sugg_5fvk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryEmbeddingVkMusic

// repeated float components = 1;
int QueryEmbeddingVkMusic::components_size() const {
  return components_.size();
}
void QueryEmbeddingVkMusic::clear_components() {
  components_.Clear();
}
float QueryEmbeddingVkMusic::components(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.QueryEmbeddingVkMusic.components)
  return components_.Get(index);
}
void QueryEmbeddingVkMusic::set_components(int index, float value) {
  components_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.suggests.QueryEmbeddingVkMusic.components)
}
void QueryEmbeddingVkMusic::add_components(float value) {
  components_.Add(value);
  // @@protoc_insertion_point(field_add:pb.suggests.QueryEmbeddingVkMusic.components)
}
const ::google::protobuf::RepeatedField< float >&
QueryEmbeddingVkMusic::components() const {
  // @@protoc_insertion_point(field_list:pb.suggests.QueryEmbeddingVkMusic.components)
  return components_;
}
::google::protobuf::RepeatedField< float >*
QueryEmbeddingVkMusic::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.QueryEmbeddingVkMusic.components)
  return &components_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace suggests
}  // namespace pb

// @@protoc_insertion_point(global_scope)
