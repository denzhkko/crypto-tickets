// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sugg_vk_music.proto

#ifndef PROTOBUF_sugg_5fvk_5fmusic_2eproto__INCLUDED
#define PROTOBUF_sugg_5fvk_5fmusic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace pb {
namespace suggests {
class ClusterInfoVkMusic;
class ClusterInfoVkMusicDefaultTypeInternal;
extern ClusterInfoVkMusicDefaultTypeInternal _ClusterInfoVkMusic_default_instance_;
class ClusterInfoVkMusic_Centroid;
class ClusterInfoVkMusic_CentroidDefaultTypeInternal;
extern ClusterInfoVkMusic_CentroidDefaultTypeInternal _ClusterInfoVkMusic_Centroid_default_instance_;
class ClusterInfosVkMusic;
class ClusterInfosVkMusicDefaultTypeInternal;
extern ClusterInfosVkMusicDefaultTypeInternal _ClusterInfosVkMusic_default_instance_;
class IndexNavigVkMusic;
class IndexNavigVkMusicDefaultTypeInternal;
extern IndexNavigVkMusicDefaultTypeInternal _IndexNavigVkMusic_default_instance_;
class IndexQuery;
class IndexQueryDefaultTypeInternal;
extern IndexQueryDefaultTypeInternal _IndexQuery_default_instance_;
class IndexQuery_Navig;
class IndexQuery_NavigDefaultTypeInternal;
extern IndexQuery_NavigDefaultTypeInternal _IndexQuery_Navig_default_instance_;
class IndexQuery_UserCluster;
class IndexQuery_UserClusterDefaultTypeInternal;
extern IndexQuery_UserClusterDefaultTypeInternal _IndexQuery_UserCluster_default_instance_;
class IndexQuery_Variant;
class IndexQuery_VariantDefaultTypeInternal;
extern IndexQuery_VariantDefaultTypeInternal _IndexQuery_Variant_default_instance_;
class NavigVkMusic;
class NavigVkMusicDefaultTypeInternal;
extern NavigVkMusicDefaultTypeInternal _NavigVkMusic_default_instance_;
class QueryEmbeddingVkMusic;
class QueryEmbeddingVkMusicDefaultTypeInternal;
extern QueryEmbeddingVkMusicDefaultTypeInternal _QueryEmbeddingVkMusic_default_instance_;
class ResponseNavigVkMusic;
class ResponseNavigVkMusicDefaultTypeInternal;
extern ResponseNavigVkMusicDefaultTypeInternal _ResponseNavigVkMusic_default_instance_;
class ResponseQuery;
class ResponseQueryDefaultTypeInternal;
extern ResponseQueryDefaultTypeInternal _ResponseQuery_default_instance_;
class ResponseQuery_MatchedPair;
class ResponseQuery_MatchedPairDefaultTypeInternal;
extern ResponseQuery_MatchedPairDefaultTypeInternal _ResponseQuery_MatchedPair_default_instance_;
class ResponseVkMusic;
class ResponseVkMusicDefaultTypeInternal;
extern ResponseVkMusicDefaultTypeInternal _ResponseVkMusic_default_instance_;
class ResponseVkMusic_Terms;
class ResponseVkMusic_TermsDefaultTypeInternal;
extern ResponseVkMusic_TermsDefaultTypeInternal _ResponseVkMusic_Terms_default_instance_;
}  // namespace suggests
}  // namespace pb

namespace pb {
namespace suggests {

namespace protobuf_sugg_5fvk_5fmusic_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sugg_5fvk_5fmusic_2eproto

enum NavigVkMusicType {
  Unknown = 0,
  Artist = 1,
  Track = 2,
  Album = 3,
  Playlist = 4,
  NavigVkMusicType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NavigVkMusicType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NavigVkMusicType_IsValid(int value);
const NavigVkMusicType NavigVkMusicType_MIN = Unknown;
const NavigVkMusicType NavigVkMusicType_MAX = Playlist;
const int NavigVkMusicType_ARRAYSIZE = NavigVkMusicType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavigVkMusicType_descriptor();
inline const ::std::string& NavigVkMusicType_Name(NavigVkMusicType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavigVkMusicType_descriptor(), value);
}
inline bool NavigVkMusicType_Parse(
    const ::std::string& name, NavigVkMusicType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavigVkMusicType>(
    NavigVkMusicType_descriptor(), name, value);
}
// ===================================================================

class NavigVkMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.NavigVkMusic) */ {
 public:
  NavigVkMusic();
  virtual ~NavigVkMusic();

  NavigVkMusic(const NavigVkMusic& from);

  inline NavigVkMusic& operator=(const NavigVkMusic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigVkMusic(NavigVkMusic&& from) noexcept
    : NavigVkMusic() {
    *this = ::std::move(from);
  }

  inline NavigVkMusic& operator=(NavigVkMusic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigVkMusic& default_instance();

  static inline const NavigVkMusic* internal_default_instance() {
    return reinterpret_cast<const NavigVkMusic*>(
               &_NavigVkMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NavigVkMusic* other);
  friend void swap(NavigVkMusic& a, NavigVkMusic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigVkMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  NavigVkMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NavigVkMusic& from);
  void MergeFrom(const NavigVkMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NavigVkMusic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint64 nid = 1;
  void clear_nid();
  static const int kNidFieldNumber = 1;
  ::google::protobuf::uint64 nid() const;
  void set_nid(::google::protobuf::uint64 value);

  // .pb.suggests.NavigVkMusicType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::pb::suggests::NavigVkMusicType type() const;
  void set_type(::pb::suggests::NavigVkMusicType value);

  // @@protoc_insertion_point(class_scope:pb.suggests.NavigVkMusic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint64 nid_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexNavigVkMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.IndexNavigVkMusic) */ {
 public:
  IndexNavigVkMusic();
  virtual ~IndexNavigVkMusic();

  IndexNavigVkMusic(const IndexNavigVkMusic& from);

  inline IndexNavigVkMusic& operator=(const IndexNavigVkMusic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexNavigVkMusic(IndexNavigVkMusic&& from) noexcept
    : IndexNavigVkMusic() {
    *this = ::std::move(from);
  }

  inline IndexNavigVkMusic& operator=(IndexNavigVkMusic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexNavigVkMusic& default_instance();

  static inline const IndexNavigVkMusic* internal_default_instance() {
    return reinterpret_cast<const IndexNavigVkMusic*>(
               &_IndexNavigVkMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IndexNavigVkMusic* other);
  friend void swap(IndexNavigVkMusic& a, IndexNavigVkMusic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexNavigVkMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexNavigVkMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexNavigVkMusic& from);
  void MergeFrom(const IndexNavigVkMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexNavigVkMusic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string navig_id = 1 [(.gogo.json) = {
  void clear_navig_id();
  static const int kNavigIdFieldNumber = 1;
  const ::std::string& navig_id() const;
  void set_navig_id(const ::std::string& value);
  #if LANG_CXX11
  void set_navig_id(::std::string&& value);
  #endif
  void set_navig_id(const char* value);
  void set_navig_id(const char* value, size_t size);
  ::std::string* mutable_navig_id();
  ::std::string* release_navig_id();
  void set_allocated_navig_id(::std::string* navig_id);

  // string vk_id = 4 [(.gogo.json) = {
  void clear_vk_id();
  static const int kVkIdFieldNumber = 4;
  const ::std::string& vk_id() const;
  void set_vk_id(const ::std::string& value);
  #if LANG_CXX11
  void set_vk_id(::std::string&& value);
  #endif
  void set_vk_id(const char* value);
  void set_vk_id(const char* value, size_t size);
  ::std::string* mutable_vk_id();
  ::std::string* release_vk_id();
  void set_allocated_vk_id(::std::string* vk_id);

  // uint32 frequency = 2 [(.gogo.json) = {
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // .pb.suggests.NavigVkMusicType vk_type = 3 [(.gogo.json) = {
  void clear_vk_type();
  static const int kVkTypeFieldNumber = 3;
  ::pb::suggests::NavigVkMusicType vk_type() const;
  void set_vk_type(::pb::suggests::NavigVkMusicType value);

  // @@protoc_insertion_point(class_scope:pb.suggests.IndexNavigVkMusic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr navig_id_;
  ::google::protobuf::internal::ArenaStringPtr vk_id_;
  ::google::protobuf::uint32 frequency_;
  int vk_type_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexQuery_Variant : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.IndexQuery.Variant) */ {
 public:
  IndexQuery_Variant();
  virtual ~IndexQuery_Variant();

  IndexQuery_Variant(const IndexQuery_Variant& from);

  inline IndexQuery_Variant& operator=(const IndexQuery_Variant& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexQuery_Variant(IndexQuery_Variant&& from) noexcept
    : IndexQuery_Variant() {
    *this = ::std::move(from);
  }

  inline IndexQuery_Variant& operator=(IndexQuery_Variant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery_Variant& default_instance();

  static inline const IndexQuery_Variant* internal_default_instance() {
    return reinterpret_cast<const IndexQuery_Variant*>(
               &_IndexQuery_Variant_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IndexQuery_Variant* other);
  friend void swap(IndexQuery_Variant& a, IndexQuery_Variant& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexQuery_Variant* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexQuery_Variant* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexQuery_Variant& from);
  void MergeFrom(const IndexQuery_Variant& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexQuery_Variant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1 [(.gogo.json) = {
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 frequency = 2 [(.gogo.json) = {
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // uint32 flags = 3 [(.gogo.json) = {
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.IndexQuery.Variant)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 frequency_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexQuery_Navig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.IndexQuery.Navig) */ {
 public:
  IndexQuery_Navig();
  virtual ~IndexQuery_Navig();

  IndexQuery_Navig(const IndexQuery_Navig& from);

  inline IndexQuery_Navig& operator=(const IndexQuery_Navig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexQuery_Navig(IndexQuery_Navig&& from) noexcept
    : IndexQuery_Navig() {
    *this = ::std::move(from);
  }

  inline IndexQuery_Navig& operator=(IndexQuery_Navig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery_Navig& default_instance();

  static inline const IndexQuery_Navig* internal_default_instance() {
    return reinterpret_cast<const IndexQuery_Navig*>(
               &_IndexQuery_Navig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(IndexQuery_Navig* other);
  friend void swap(IndexQuery_Navig& a, IndexQuery_Navig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexQuery_Navig* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexQuery_Navig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexQuery_Navig& from);
  void MergeFrom(const IndexQuery_Navig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexQuery_Navig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogo.json) = {
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 frequency = 2 [(.gogo.json) = {
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.IndexQuery.Navig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 frequency_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexQuery_UserCluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.IndexQuery.UserCluster) */ {
 public:
  IndexQuery_UserCluster();
  virtual ~IndexQuery_UserCluster();

  IndexQuery_UserCluster(const IndexQuery_UserCluster& from);

  inline IndexQuery_UserCluster& operator=(const IndexQuery_UserCluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexQuery_UserCluster(IndexQuery_UserCluster&& from) noexcept
    : IndexQuery_UserCluster() {
    *this = ::std::move(from);
  }

  inline IndexQuery_UserCluster& operator=(IndexQuery_UserCluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery_UserCluster& default_instance();

  static inline const IndexQuery_UserCluster* internal_default_instance() {
    return reinterpret_cast<const IndexQuery_UserCluster*>(
               &_IndexQuery_UserCluster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(IndexQuery_UserCluster* other);
  friend void swap(IndexQuery_UserCluster& a, IndexQuery_UserCluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexQuery_UserCluster* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexQuery_UserCluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexQuery_UserCluster& from);
  void MergeFrom(const IndexQuery_UserCluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexQuery_UserCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double frequency = 2 [(.gogo.json) = {
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  double frequency() const;
  void set_frequency(double value);

  // uint32 cluster_id = 1 [(.gogo.json) = {
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint32 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.IndexQuery.UserCluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double frequency_;
  ::google::protobuf::uint32 cluster_id_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.IndexQuery) */ {
 public:
  IndexQuery();
  virtual ~IndexQuery();

  IndexQuery(const IndexQuery& from);

  inline IndexQuery& operator=(const IndexQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexQuery(IndexQuery&& from) noexcept
    : IndexQuery() {
    *this = ::std::move(from);
  }

  inline IndexQuery& operator=(IndexQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery& default_instance();

  static inline const IndexQuery* internal_default_instance() {
    return reinterpret_cast<const IndexQuery*>(
               &_IndexQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(IndexQuery* other);
  friend void swap(IndexQuery& a, IndexQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexQuery& from);
  void MergeFrom(const IndexQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef IndexQuery_Variant Variant;
  typedef IndexQuery_Navig Navig;
  typedef IndexQuery_UserCluster UserCluster;

  // accessors -------------------------------------------------------

  // repeated .pb.suggests.IndexQuery.Variant variants = 3 [(.gogo.json) = {
  int variants_size() const;
  void clear_variants();
  static const int kVariantsFieldNumber = 3;
  const ::pb::suggests::IndexQuery_Variant& variants(int index) const;
  ::pb::suggests::IndexQuery_Variant* mutable_variants(int index);
  ::pb::suggests::IndexQuery_Variant* add_variants();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Variant >*
      mutable_variants();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Variant >&
      variants() const;

  // repeated .pb.suggests.IndexQuery.Navig navigs = 4 [(.gogo.json) = {
  int navigs_size() const;
  void clear_navigs();
  static const int kNavigsFieldNumber = 4;
  const ::pb::suggests::IndexQuery_Navig& navigs(int index) const;
  ::pb::suggests::IndexQuery_Navig* mutable_navigs(int index);
  ::pb::suggests::IndexQuery_Navig* add_navigs();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Navig >*
      mutable_navigs();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Navig >&
      navigs() const;

  // repeated .pb.suggests.IndexQuery.UserCluster user_clusters = 5 [(.gogo.json) = {
  int user_clusters_size() const;
  void clear_user_clusters();
  static const int kUserClustersFieldNumber = 5;
  const ::pb::suggests::IndexQuery_UserCluster& user_clusters(int index) const;
  ::pb::suggests::IndexQuery_UserCluster* mutable_user_clusters(int index);
  ::pb::suggests::IndexQuery_UserCluster* add_user_clusters();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_UserCluster >*
      mutable_user_clusters();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_UserCluster >&
      user_clusters() const;

  // string text = 1 [(.gogo.json) = {
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 frequency = 2 [(.gogo.json) = {
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.IndexQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Variant > variants_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Navig > navigs_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_UserCluster > user_clusters_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 frequency_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseQuery_MatchedPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.ResponseQuery.MatchedPair) */ {
 public:
  ResponseQuery_MatchedPair();
  virtual ~ResponseQuery_MatchedPair();

  ResponseQuery_MatchedPair(const ResponseQuery_MatchedPair& from);

  inline ResponseQuery_MatchedPair& operator=(const ResponseQuery_MatchedPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseQuery_MatchedPair(ResponseQuery_MatchedPair&& from) noexcept
    : ResponseQuery_MatchedPair() {
    *this = ::std::move(from);
  }

  inline ResponseQuery_MatchedPair& operator=(ResponseQuery_MatchedPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseQuery_MatchedPair& default_instance();

  static inline const ResponseQuery_MatchedPair* internal_default_instance() {
    return reinterpret_cast<const ResponseQuery_MatchedPair*>(
               &_ResponseQuery_MatchedPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ResponseQuery_MatchedPair* other);
  friend void swap(ResponseQuery_MatchedPair& a, ResponseQuery_MatchedPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseQuery_MatchedPair* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseQuery_MatchedPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseQuery_MatchedPair& from);
  void MergeFrom(const ResponseQuery_MatchedPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseQuery_MatchedPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 begin_pos = 1 [(.gogo.json) = {
  void clear_begin_pos();
  static const int kBeginPosFieldNumber = 1;
  ::google::protobuf::uint32 begin_pos() const;
  void set_begin_pos(::google::protobuf::uint32 value);

  // uint32 end_pos = 2 [(.gogo.json) = {
  void clear_end_pos();
  static const int kEndPosFieldNumber = 2;
  ::google::protobuf::uint32 end_pos() const;
  void set_end_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.ResponseQuery.MatchedPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 begin_pos_;
  ::google::protobuf::uint32 end_pos_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.ResponseQuery) */ {
 public:
  ResponseQuery();
  virtual ~ResponseQuery();

  ResponseQuery(const ResponseQuery& from);

  inline ResponseQuery& operator=(const ResponseQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseQuery(ResponseQuery&& from) noexcept
    : ResponseQuery() {
    *this = ::std::move(from);
  }

  inline ResponseQuery& operator=(ResponseQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseQuery& default_instance();

  static inline const ResponseQuery* internal_default_instance() {
    return reinterpret_cast<const ResponseQuery*>(
               &_ResponseQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ResponseQuery* other);
  friend void swap(ResponseQuery& a, ResponseQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseQuery& from);
  void MergeFrom(const ResponseQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResponseQuery_MatchedPair MatchedPair;

  // accessors -------------------------------------------------------

  // repeated .pb.suggests.ResponseQuery.MatchedPair matched_ranges = 3 [(.gogo.json) = {
  int matched_ranges_size() const;
  void clear_matched_ranges();
  static const int kMatchedRangesFieldNumber = 3;
  const ::pb::suggests::ResponseQuery_MatchedPair& matched_ranges(int index) const;
  ::pb::suggests::ResponseQuery_MatchedPair* mutable_matched_ranges(int index);
  ::pb::suggests::ResponseQuery_MatchedPair* add_matched_ranges();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery_MatchedPair >*
      mutable_matched_ranges();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery_MatchedPair >&
      matched_ranges() const;

  // string text = 1 [(.gogo.xml) = {
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string text_marked = 2 [(.gogo.xml) = {
  void clear_text_marked();
  static const int kTextMarkedFieldNumber = 2;
  const ::std::string& text_marked() const;
  void set_text_marked(const ::std::string& value);
  #if LANG_CXX11
  void set_text_marked(::std::string&& value);
  #endif
  void set_text_marked(const char* value);
  void set_text_marked(const char* value, size_t size);
  ::std::string* mutable_text_marked();
  ::std::string* release_text_marked();
  void set_allocated_text_marked(::std::string* text_marked);

  // @@protoc_insertion_point(class_scope:pb.suggests.ResponseQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery_MatchedPair > matched_ranges_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr text_marked_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseNavigVkMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.ResponseNavigVkMusic) */ {
 public:
  ResponseNavigVkMusic();
  virtual ~ResponseNavigVkMusic();

  ResponseNavigVkMusic(const ResponseNavigVkMusic& from);

  inline ResponseNavigVkMusic& operator=(const ResponseNavigVkMusic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseNavigVkMusic(ResponseNavigVkMusic&& from) noexcept
    : ResponseNavigVkMusic() {
    *this = ::std::move(from);
  }

  inline ResponseNavigVkMusic& operator=(ResponseNavigVkMusic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseNavigVkMusic& default_instance();

  static inline const ResponseNavigVkMusic* internal_default_instance() {
    return reinterpret_cast<const ResponseNavigVkMusic*>(
               &_ResponseNavigVkMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ResponseNavigVkMusic* other);
  friend void swap(ResponseNavigVkMusic& a, ResponseNavigVkMusic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseNavigVkMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseNavigVkMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseNavigVkMusic& from);
  void MergeFrom(const ResponseNavigVkMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseNavigVkMusic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 2 [(.gogo.xml) = {
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .pb.suggests.NavigVkMusicType type = 1 [(.gogo.xml) = {
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pb::suggests::NavigVkMusicType type() const;
  void set_type(::pb::suggests::NavigVkMusicType value);

  // @@protoc_insertion_point(class_scope:pb.suggests.ResponseNavigVkMusic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseVkMusic_Terms : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.ResponseVkMusic.Terms) */ {
 public:
  ResponseVkMusic_Terms();
  virtual ~ResponseVkMusic_Terms();

  ResponseVkMusic_Terms(const ResponseVkMusic_Terms& from);

  inline ResponseVkMusic_Terms& operator=(const ResponseVkMusic_Terms& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseVkMusic_Terms(ResponseVkMusic_Terms&& from) noexcept
    : ResponseVkMusic_Terms() {
    *this = ::std::move(from);
  }

  inline ResponseVkMusic_Terms& operator=(ResponseVkMusic_Terms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseVkMusic_Terms& default_instance();

  static inline const ResponseVkMusic_Terms* internal_default_instance() {
    return reinterpret_cast<const ResponseVkMusic_Terms*>(
               &_ResponseVkMusic_Terms_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ResponseVkMusic_Terms* other);
  friend void swap(ResponseVkMusic_Terms& a, ResponseVkMusic_Terms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseVkMusic_Terms* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseVkMusic_Terms* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseVkMusic_Terms& from);
  void MergeFrom(const ResponseVkMusic_Terms& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseVkMusic_Terms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1 [(.gogo.json) = {
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:pb.suggests.ResponseVkMusic.Terms)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseVkMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.ResponseVkMusic) */ {
 public:
  ResponseVkMusic();
  virtual ~ResponseVkMusic();

  ResponseVkMusic(const ResponseVkMusic& from);

  inline ResponseVkMusic& operator=(const ResponseVkMusic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseVkMusic(ResponseVkMusic&& from) noexcept
    : ResponseVkMusic() {
    *this = ::std::move(from);
  }

  inline ResponseVkMusic& operator=(ResponseVkMusic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseVkMusic& default_instance();

  static inline const ResponseVkMusic* internal_default_instance() {
    return reinterpret_cast<const ResponseVkMusic*>(
               &_ResponseVkMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ResponseVkMusic* other);
  friend void swap(ResponseVkMusic& a, ResponseVkMusic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseVkMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseVkMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseVkMusic& from);
  void MergeFrom(const ResponseVkMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseVkMusic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResponseVkMusic_Terms Terms;

  // accessors -------------------------------------------------------

  // repeated .pb.suggests.ResponseQuery queries = 1 [(.gogo.xml) = {
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 1;
  const ::pb::suggests::ResponseQuery& queries(int index) const;
  ::pb::suggests::ResponseQuery* mutable_queries(int index);
  ::pb::suggests::ResponseQuery* add_queries();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >*
      mutable_queries();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >&
      queries() const;

  // repeated .pb.suggests.ResponseNavigVkMusic navigs = 2 [(.gogo.xml) = {
  int navigs_size() const;
  void clear_navigs();
  static const int kNavigsFieldNumber = 2;
  const ::pb::suggests::ResponseNavigVkMusic& navigs(int index) const;
  ::pb::suggests::ResponseNavigVkMusic* mutable_navigs(int index);
  ::pb::suggests::ResponseNavigVkMusic* add_navigs();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseNavigVkMusic >*
      mutable_navigs();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseNavigVkMusic >&
      navigs() const;

  // repeated .pb.suggests.ResponseQuery history = 3 [(.gogo.xml) = {
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 3;
  const ::pb::suggests::ResponseQuery& history(int index) const;
  ::pb::suggests::ResponseQuery* mutable_history(int index);
  ::pb::suggests::ResponseQuery* add_history();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >*
      mutable_history();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >&
      history() const;

  // string qid = 4 [(.gogo.json) = {
  void clear_qid();
  static const int kQidFieldNumber = 4;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // .pb.suggests.ResponseVkMusic.Terms terms = 5 [(.gogo.json) = {
  bool has_terms() const;
  void clear_terms();
  static const int kTermsFieldNumber = 5;
  const ::pb::suggests::ResponseVkMusic_Terms& terms() const;
  ::pb::suggests::ResponseVkMusic_Terms* mutable_terms();
  ::pb::suggests::ResponseVkMusic_Terms* release_terms();
  void set_allocated_terms(::pb::suggests::ResponseVkMusic_Terms* terms);

  // @@protoc_insertion_point(class_scope:pb.suggests.ResponseVkMusic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery > queries_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseNavigVkMusic > navigs_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery > history_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::pb::suggests::ResponseVkMusic_Terms* terms_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterInfoVkMusic_Centroid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.ClusterInfoVkMusic.Centroid) */ {
 public:
  ClusterInfoVkMusic_Centroid();
  virtual ~ClusterInfoVkMusic_Centroid();

  ClusterInfoVkMusic_Centroid(const ClusterInfoVkMusic_Centroid& from);

  inline ClusterInfoVkMusic_Centroid& operator=(const ClusterInfoVkMusic_Centroid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterInfoVkMusic_Centroid(ClusterInfoVkMusic_Centroid&& from) noexcept
    : ClusterInfoVkMusic_Centroid() {
    *this = ::std::move(from);
  }

  inline ClusterInfoVkMusic_Centroid& operator=(ClusterInfoVkMusic_Centroid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterInfoVkMusic_Centroid& default_instance();

  static inline const ClusterInfoVkMusic_Centroid* internal_default_instance() {
    return reinterpret_cast<const ClusterInfoVkMusic_Centroid*>(
               &_ClusterInfoVkMusic_Centroid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ClusterInfoVkMusic_Centroid* other);
  friend void swap(ClusterInfoVkMusic_Centroid& a, ClusterInfoVkMusic_Centroid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfoVkMusic_Centroid* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterInfoVkMusic_Centroid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterInfoVkMusic_Centroid& from);
  void MergeFrom(const ClusterInfoVkMusic_Centroid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterInfoVkMusic_Centroid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float values = 1 [(.gogo.json) = {
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::google::protobuf::RepeatedField< float >&
      values() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:pb.suggests.ClusterInfoVkMusic.Centroid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > values_;
  mutable int _values_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterInfoVkMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.ClusterInfoVkMusic) */ {
 public:
  ClusterInfoVkMusic();
  virtual ~ClusterInfoVkMusic();

  ClusterInfoVkMusic(const ClusterInfoVkMusic& from);

  inline ClusterInfoVkMusic& operator=(const ClusterInfoVkMusic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterInfoVkMusic(ClusterInfoVkMusic&& from) noexcept
    : ClusterInfoVkMusic() {
    *this = ::std::move(from);
  }

  inline ClusterInfoVkMusic& operator=(ClusterInfoVkMusic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterInfoVkMusic& default_instance();

  static inline const ClusterInfoVkMusic* internal_default_instance() {
    return reinterpret_cast<const ClusterInfoVkMusic*>(
               &_ClusterInfoVkMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ClusterInfoVkMusic* other);
  friend void swap(ClusterInfoVkMusic& a, ClusterInfoVkMusic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfoVkMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterInfoVkMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterInfoVkMusic& from);
  void MergeFrom(const ClusterInfoVkMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterInfoVkMusic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ClusterInfoVkMusic_Centroid Centroid;

  // accessors -------------------------------------------------------

  // .pb.suggests.ClusterInfoVkMusic.Centroid centroid = 2 [(.gogo.json) = {
  bool has_centroid() const;
  void clear_centroid();
  static const int kCentroidFieldNumber = 2;
  const ::pb::suggests::ClusterInfoVkMusic_Centroid& centroid() const;
  ::pb::suggests::ClusterInfoVkMusic_Centroid* mutable_centroid();
  ::pb::suggests::ClusterInfoVkMusic_Centroid* release_centroid();
  void set_allocated_centroid(::pb::suggests::ClusterInfoVkMusic_Centroid* centroid);

  // uint32 cluster_id = 1 [(.gogo.json) = {
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint32 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.suggests.ClusterInfoVkMusic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::suggests::ClusterInfoVkMusic_Centroid* centroid_;
  ::google::protobuf::uint32 cluster_id_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterInfosVkMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.ClusterInfosVkMusic) */ {
 public:
  ClusterInfosVkMusic();
  virtual ~ClusterInfosVkMusic();

  ClusterInfosVkMusic(const ClusterInfosVkMusic& from);

  inline ClusterInfosVkMusic& operator=(const ClusterInfosVkMusic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterInfosVkMusic(ClusterInfosVkMusic&& from) noexcept
    : ClusterInfosVkMusic() {
    *this = ::std::move(from);
  }

  inline ClusterInfosVkMusic& operator=(ClusterInfosVkMusic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterInfosVkMusic& default_instance();

  static inline const ClusterInfosVkMusic* internal_default_instance() {
    return reinterpret_cast<const ClusterInfosVkMusic*>(
               &_ClusterInfosVkMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ClusterInfosVkMusic* other);
  friend void swap(ClusterInfosVkMusic& a, ClusterInfosVkMusic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfosVkMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterInfosVkMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterInfosVkMusic& from);
  void MergeFrom(const ClusterInfosVkMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterInfosVkMusic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.suggests.ClusterInfoVkMusic clusters = 1;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 1;
  const ::pb::suggests::ClusterInfoVkMusic& clusters(int index) const;
  ::pb::suggests::ClusterInfoVkMusic* mutable_clusters(int index);
  ::pb::suggests::ClusterInfoVkMusic* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ClusterInfoVkMusic >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ClusterInfoVkMusic >&
      clusters() const;

  // @@protoc_insertion_point(class_scope:pb.suggests.ClusterInfosVkMusic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::suggests::ClusterInfoVkMusic > clusters_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryEmbeddingVkMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.suggests.QueryEmbeddingVkMusic) */ {
 public:
  QueryEmbeddingVkMusic();
  virtual ~QueryEmbeddingVkMusic();

  QueryEmbeddingVkMusic(const QueryEmbeddingVkMusic& from);

  inline QueryEmbeddingVkMusic& operator=(const QueryEmbeddingVkMusic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryEmbeddingVkMusic(QueryEmbeddingVkMusic&& from) noexcept
    : QueryEmbeddingVkMusic() {
    *this = ::std::move(from);
  }

  inline QueryEmbeddingVkMusic& operator=(QueryEmbeddingVkMusic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryEmbeddingVkMusic& default_instance();

  static inline const QueryEmbeddingVkMusic* internal_default_instance() {
    return reinterpret_cast<const QueryEmbeddingVkMusic*>(
               &_QueryEmbeddingVkMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(QueryEmbeddingVkMusic* other);
  friend void swap(QueryEmbeddingVkMusic& a, QueryEmbeddingVkMusic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryEmbeddingVkMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryEmbeddingVkMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryEmbeddingVkMusic& from);
  void MergeFrom(const QueryEmbeddingVkMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryEmbeddingVkMusic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float components = 1;
  int components_size() const;
  void clear_components();
  static const int kComponentsFieldNumber = 1;
  float components(int index) const;
  void set_components(int index, float value);
  void add_components(float value);
  const ::google::protobuf::RepeatedField< float >&
      components() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_components();

  // @@protoc_insertion_point(class_scope:pb.suggests.QueryEmbeddingVkMusic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > components_;
  mutable int _components_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_sugg_5fvk_5fmusic_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavigVkMusic

// uint64 nid = 1;
inline void NavigVkMusic::clear_nid() {
  nid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NavigVkMusic::nid() const {
  // @@protoc_insertion_point(field_get:pb.suggests.NavigVkMusic.nid)
  return nid_;
}
inline void NavigVkMusic::set_nid(::google::protobuf::uint64 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.NavigVkMusic.nid)
}

// .pb.suggests.NavigVkMusicType type = 2;
inline void NavigVkMusic::clear_type() {
  type_ = 0;
}
inline ::pb::suggests::NavigVkMusicType NavigVkMusic::type() const {
  // @@protoc_insertion_point(field_get:pb.suggests.NavigVkMusic.type)
  return static_cast< ::pb::suggests::NavigVkMusicType >(type_);
}
inline void NavigVkMusic::set_type(::pb::suggests::NavigVkMusicType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.NavigVkMusic.type)
}

// string id = 3;
inline void NavigVkMusic::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NavigVkMusic::id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.NavigVkMusic.id)
  return id_.GetNoArena();
}
inline void NavigVkMusic::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.NavigVkMusic.id)
}
#if LANG_CXX11
inline void NavigVkMusic::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.NavigVkMusic.id)
}
#endif
inline void NavigVkMusic::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.NavigVkMusic.id)
}
inline void NavigVkMusic::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.NavigVkMusic.id)
}
inline ::std::string* NavigVkMusic::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.NavigVkMusic.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NavigVkMusic::release_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.NavigVkMusic.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NavigVkMusic::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.NavigVkMusic.id)
}

// -------------------------------------------------------------------

// IndexNavigVkMusic

// string navig_id = 1 [(.gogo.json) = {
inline void IndexNavigVkMusic::clear_navig_id() {
  navig_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexNavigVkMusic::navig_id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexNavigVkMusic.navig_id)
  return navig_id_.GetNoArena();
}
inline void IndexNavigVkMusic::set_navig_id(const ::std::string& value) {
  
  navig_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexNavigVkMusic.navig_id)
}
#if LANG_CXX11
inline void IndexNavigVkMusic::set_navig_id(::std::string&& value) {
  
  navig_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexNavigVkMusic.navig_id)
}
#endif
inline void IndexNavigVkMusic::set_navig_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  navig_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexNavigVkMusic.navig_id)
}
inline void IndexNavigVkMusic::set_navig_id(const char* value, size_t size) {
  
  navig_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexNavigVkMusic.navig_id)
}
inline ::std::string* IndexNavigVkMusic::mutable_navig_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexNavigVkMusic.navig_id)
  return navig_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexNavigVkMusic::release_navig_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexNavigVkMusic.navig_id)
  
  return navig_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexNavigVkMusic::set_allocated_navig_id(::std::string* navig_id) {
  if (navig_id != NULL) {
    
  } else {
    
  }
  navig_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), navig_id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexNavigVkMusic.navig_id)
}

// uint32 frequency = 2 [(.gogo.json) = {
inline void IndexNavigVkMusic::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 IndexNavigVkMusic::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexNavigVkMusic.frequency)
  return frequency_;
}
inline void IndexNavigVkMusic::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexNavigVkMusic.frequency)
}

// .pb.suggests.NavigVkMusicType vk_type = 3 [(.gogo.json) = {
inline void IndexNavigVkMusic::clear_vk_type() {
  vk_type_ = 0;
}
inline ::pb::suggests::NavigVkMusicType IndexNavigVkMusic::vk_type() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexNavigVkMusic.vk_type)
  return static_cast< ::pb::suggests::NavigVkMusicType >(vk_type_);
}
inline void IndexNavigVkMusic::set_vk_type(::pb::suggests::NavigVkMusicType value) {
  
  vk_type_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexNavigVkMusic.vk_type)
}

// string vk_id = 4 [(.gogo.json) = {
inline void IndexNavigVkMusic::clear_vk_id() {
  vk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexNavigVkMusic::vk_id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexNavigVkMusic.vk_id)
  return vk_id_.GetNoArena();
}
inline void IndexNavigVkMusic::set_vk_id(const ::std::string& value) {
  
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexNavigVkMusic.vk_id)
}
#if LANG_CXX11
inline void IndexNavigVkMusic::set_vk_id(::std::string&& value) {
  
  vk_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexNavigVkMusic.vk_id)
}
#endif
inline void IndexNavigVkMusic::set_vk_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexNavigVkMusic.vk_id)
}
inline void IndexNavigVkMusic::set_vk_id(const char* value, size_t size) {
  
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexNavigVkMusic.vk_id)
}
inline ::std::string* IndexNavigVkMusic::mutable_vk_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexNavigVkMusic.vk_id)
  return vk_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexNavigVkMusic::release_vk_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexNavigVkMusic.vk_id)
  
  return vk_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexNavigVkMusic::set_allocated_vk_id(::std::string* vk_id) {
  if (vk_id != NULL) {
    
  } else {
    
  }
  vk_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vk_id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexNavigVkMusic.vk_id)
}

// -------------------------------------------------------------------

// IndexQuery_Variant

// string text = 1 [(.gogo.json) = {
inline void IndexQuery_Variant::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexQuery_Variant::text() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Variant.text)
  return text_.GetNoArena();
}
inline void IndexQuery_Variant::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Variant.text)
}
#if LANG_CXX11
inline void IndexQuery_Variant::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexQuery.Variant.text)
}
#endif
inline void IndexQuery_Variant::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexQuery.Variant.text)
}
inline void IndexQuery_Variant::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexQuery.Variant.text)
}
inline ::std::string* IndexQuery_Variant::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.Variant.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexQuery_Variant::release_text() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexQuery.Variant.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexQuery_Variant::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexQuery.Variant.text)
}

// uint32 frequency = 2 [(.gogo.json) = {
inline void IndexQuery_Variant::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 IndexQuery_Variant::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Variant.frequency)
  return frequency_;
}
inline void IndexQuery_Variant::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Variant.frequency)
}

// uint32 flags = 3 [(.gogo.json) = {
inline void IndexQuery_Variant::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 IndexQuery_Variant::flags() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Variant.flags)
  return flags_;
}
inline void IndexQuery_Variant::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Variant.flags)
}

// -------------------------------------------------------------------

// IndexQuery_Navig

// string id = 1 [(.gogo.json) = {
inline void IndexQuery_Navig::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexQuery_Navig::id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Navig.id)
  return id_.GetNoArena();
}
inline void IndexQuery_Navig::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Navig.id)
}
#if LANG_CXX11
inline void IndexQuery_Navig::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexQuery.Navig.id)
}
#endif
inline void IndexQuery_Navig::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexQuery.Navig.id)
}
inline void IndexQuery_Navig::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexQuery.Navig.id)
}
inline ::std::string* IndexQuery_Navig::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.Navig.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexQuery_Navig::release_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexQuery.Navig.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexQuery_Navig::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexQuery.Navig.id)
}

// uint32 frequency = 2 [(.gogo.json) = {
inline void IndexQuery_Navig::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 IndexQuery_Navig::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.Navig.frequency)
  return frequency_;
}
inline void IndexQuery_Navig::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.Navig.frequency)
}

// -------------------------------------------------------------------

// IndexQuery_UserCluster

// uint32 cluster_id = 1 [(.gogo.json) = {
inline void IndexQuery_UserCluster::clear_cluster_id() {
  cluster_id_ = 0u;
}
inline ::google::protobuf::uint32 IndexQuery_UserCluster::cluster_id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.UserCluster.cluster_id)
  return cluster_id_;
}
inline void IndexQuery_UserCluster::set_cluster_id(::google::protobuf::uint32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.UserCluster.cluster_id)
}

// double frequency = 2 [(.gogo.json) = {
inline void IndexQuery_UserCluster::clear_frequency() {
  frequency_ = 0;
}
inline double IndexQuery_UserCluster::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.UserCluster.frequency)
  return frequency_;
}
inline void IndexQuery_UserCluster::set_frequency(double value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.UserCluster.frequency)
}

// -------------------------------------------------------------------

// IndexQuery

// string text = 1 [(.gogo.json) = {
inline void IndexQuery::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexQuery::text() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.text)
  return text_.GetNoArena();
}
inline void IndexQuery::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.text)
}
#if LANG_CXX11
inline void IndexQuery::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.IndexQuery.text)
}
#endif
inline void IndexQuery::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.IndexQuery.text)
}
inline void IndexQuery::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.IndexQuery.text)
}
inline ::std::string* IndexQuery::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexQuery::release_text() {
  // @@protoc_insertion_point(field_release:pb.suggests.IndexQuery.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexQuery::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.IndexQuery.text)
}

// uint32 frequency = 2 [(.gogo.json) = {
inline void IndexQuery::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 IndexQuery::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.frequency)
  return frequency_;
}
inline void IndexQuery::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.IndexQuery.frequency)
}

// repeated .pb.suggests.IndexQuery.Variant variants = 3 [(.gogo.json) = {
inline int IndexQuery::variants_size() const {
  return variants_.size();
}
inline void IndexQuery::clear_variants() {
  variants_.Clear();
}
inline const ::pb::suggests::IndexQuery_Variant& IndexQuery::variants(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.variants)
  return variants_.Get(index);
}
inline ::pb::suggests::IndexQuery_Variant* IndexQuery::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.variants)
  return variants_.Mutable(index);
}
inline ::pb::suggests::IndexQuery_Variant* IndexQuery::add_variants() {
  // @@protoc_insertion_point(field_add:pb.suggests.IndexQuery.variants)
  return variants_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Variant >*
IndexQuery::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.IndexQuery.variants)
  return &variants_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Variant >&
IndexQuery::variants() const {
  // @@protoc_insertion_point(field_list:pb.suggests.IndexQuery.variants)
  return variants_;
}

// repeated .pb.suggests.IndexQuery.Navig navigs = 4 [(.gogo.json) = {
inline int IndexQuery::navigs_size() const {
  return navigs_.size();
}
inline void IndexQuery::clear_navigs() {
  navigs_.Clear();
}
inline const ::pb::suggests::IndexQuery_Navig& IndexQuery::navigs(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.navigs)
  return navigs_.Get(index);
}
inline ::pb::suggests::IndexQuery_Navig* IndexQuery::mutable_navigs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.navigs)
  return navigs_.Mutable(index);
}
inline ::pb::suggests::IndexQuery_Navig* IndexQuery::add_navigs() {
  // @@protoc_insertion_point(field_add:pb.suggests.IndexQuery.navigs)
  return navigs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Navig >*
IndexQuery::mutable_navigs() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.IndexQuery.navigs)
  return &navigs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_Navig >&
IndexQuery::navigs() const {
  // @@protoc_insertion_point(field_list:pb.suggests.IndexQuery.navigs)
  return navigs_;
}

// repeated .pb.suggests.IndexQuery.UserCluster user_clusters = 5 [(.gogo.json) = {
inline int IndexQuery::user_clusters_size() const {
  return user_clusters_.size();
}
inline void IndexQuery::clear_user_clusters() {
  user_clusters_.Clear();
}
inline const ::pb::suggests::IndexQuery_UserCluster& IndexQuery::user_clusters(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.IndexQuery.user_clusters)
  return user_clusters_.Get(index);
}
inline ::pb::suggests::IndexQuery_UserCluster* IndexQuery::mutable_user_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.IndexQuery.user_clusters)
  return user_clusters_.Mutable(index);
}
inline ::pb::suggests::IndexQuery_UserCluster* IndexQuery::add_user_clusters() {
  // @@protoc_insertion_point(field_add:pb.suggests.IndexQuery.user_clusters)
  return user_clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_UserCluster >*
IndexQuery::mutable_user_clusters() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.IndexQuery.user_clusters)
  return &user_clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::IndexQuery_UserCluster >&
IndexQuery::user_clusters() const {
  // @@protoc_insertion_point(field_list:pb.suggests.IndexQuery.user_clusters)
  return user_clusters_;
}

// -------------------------------------------------------------------

// ResponseQuery_MatchedPair

// uint32 begin_pos = 1 [(.gogo.json) = {
inline void ResponseQuery_MatchedPair::clear_begin_pos() {
  begin_pos_ = 0u;
}
inline ::google::protobuf::uint32 ResponseQuery_MatchedPair::begin_pos() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.MatchedPair.begin_pos)
  return begin_pos_;
}
inline void ResponseQuery_MatchedPair::set_begin_pos(::google::protobuf::uint32 value) {
  
  begin_pos_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseQuery.MatchedPair.begin_pos)
}

// uint32 end_pos = 2 [(.gogo.json) = {
inline void ResponseQuery_MatchedPair::clear_end_pos() {
  end_pos_ = 0u;
}
inline ::google::protobuf::uint32 ResponseQuery_MatchedPair::end_pos() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.MatchedPair.end_pos)
  return end_pos_;
}
inline void ResponseQuery_MatchedPair::set_end_pos(::google::protobuf::uint32 value) {
  
  end_pos_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseQuery.MatchedPair.end_pos)
}

// -------------------------------------------------------------------

// ResponseQuery

// string text = 1 [(.gogo.xml) = {
inline void ResponseQuery::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseQuery::text() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.text)
  return text_.GetNoArena();
}
inline void ResponseQuery::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseQuery.text)
}
#if LANG_CXX11
inline void ResponseQuery::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseQuery.text)
}
#endif
inline void ResponseQuery::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseQuery.text)
}
inline void ResponseQuery::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseQuery.text)
}
inline ::std::string* ResponseQuery::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseQuery.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseQuery::release_text() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseQuery.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseQuery.text)
}

// string text_marked = 2 [(.gogo.xml) = {
inline void ResponseQuery::clear_text_marked() {
  text_marked_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseQuery::text_marked() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.text_marked)
  return text_marked_.GetNoArena();
}
inline void ResponseQuery::set_text_marked(const ::std::string& value) {
  
  text_marked_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseQuery.text_marked)
}
#if LANG_CXX11
inline void ResponseQuery::set_text_marked(::std::string&& value) {
  
  text_marked_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseQuery.text_marked)
}
#endif
inline void ResponseQuery::set_text_marked(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_marked_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseQuery.text_marked)
}
inline void ResponseQuery::set_text_marked(const char* value, size_t size) {
  
  text_marked_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseQuery.text_marked)
}
inline ::std::string* ResponseQuery::mutable_text_marked() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseQuery.text_marked)
  return text_marked_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseQuery::release_text_marked() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseQuery.text_marked)
  
  return text_marked_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_allocated_text_marked(::std::string* text_marked) {
  if (text_marked != NULL) {
    
  } else {
    
  }
  text_marked_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_marked);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseQuery.text_marked)
}

// repeated .pb.suggests.ResponseQuery.MatchedPair matched_ranges = 3 [(.gogo.json) = {
inline int ResponseQuery::matched_ranges_size() const {
  return matched_ranges_.size();
}
inline void ResponseQuery::clear_matched_ranges() {
  matched_ranges_.Clear();
}
inline const ::pb::suggests::ResponseQuery_MatchedPair& ResponseQuery::matched_ranges(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseQuery.matched_ranges)
  return matched_ranges_.Get(index);
}
inline ::pb::suggests::ResponseQuery_MatchedPair* ResponseQuery::mutable_matched_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseQuery.matched_ranges)
  return matched_ranges_.Mutable(index);
}
inline ::pb::suggests::ResponseQuery_MatchedPair* ResponseQuery::add_matched_ranges() {
  // @@protoc_insertion_point(field_add:pb.suggests.ResponseQuery.matched_ranges)
  return matched_ranges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery_MatchedPair >*
ResponseQuery::mutable_matched_ranges() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ResponseQuery.matched_ranges)
  return &matched_ranges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery_MatchedPair >&
ResponseQuery::matched_ranges() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ResponseQuery.matched_ranges)
  return matched_ranges_;
}

// -------------------------------------------------------------------

// ResponseNavigVkMusic

// .pb.suggests.NavigVkMusicType type = 1 [(.gogo.xml) = {
inline void ResponseNavigVkMusic::clear_type() {
  type_ = 0;
}
inline ::pb::suggests::NavigVkMusicType ResponseNavigVkMusic::type() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseNavigVkMusic.type)
  return static_cast< ::pb::suggests::NavigVkMusicType >(type_);
}
inline void ResponseNavigVkMusic::set_type(::pb::suggests::NavigVkMusicType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseNavigVkMusic.type)
}

// string id = 2 [(.gogo.xml) = {
inline void ResponseNavigVkMusic::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseNavigVkMusic::id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseNavigVkMusic.id)
  return id_.GetNoArena();
}
inline void ResponseNavigVkMusic::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseNavigVkMusic.id)
}
#if LANG_CXX11
inline void ResponseNavigVkMusic::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseNavigVkMusic.id)
}
#endif
inline void ResponseNavigVkMusic::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseNavigVkMusic.id)
}
inline void ResponseNavigVkMusic::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseNavigVkMusic.id)
}
inline ::std::string* ResponseNavigVkMusic::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseNavigVkMusic.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseNavigVkMusic::release_id() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseNavigVkMusic.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseNavigVkMusic::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseNavigVkMusic.id)
}

// -------------------------------------------------------------------

// ResponseVkMusic_Terms

// string query = 1 [(.gogo.json) = {
inline void ResponseVkMusic_Terms::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseVkMusic_Terms::query() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.Terms.query)
  return query_.GetNoArena();
}
inline void ResponseVkMusic_Terms::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseVkMusic.Terms.query)
}
#if LANG_CXX11
inline void ResponseVkMusic_Terms::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseVkMusic.Terms.query)
}
#endif
inline void ResponseVkMusic_Terms::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseVkMusic.Terms.query)
}
inline void ResponseVkMusic_Terms::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseVkMusic.Terms.query)
}
inline ::std::string* ResponseVkMusic_Terms::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.Terms.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseVkMusic_Terms::release_query() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseVkMusic.Terms.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseVkMusic_Terms::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseVkMusic.Terms.query)
}

// -------------------------------------------------------------------

// ResponseVkMusic

// repeated .pb.suggests.ResponseQuery queries = 1 [(.gogo.xml) = {
inline int ResponseVkMusic::queries_size() const {
  return queries_.size();
}
inline void ResponseVkMusic::clear_queries() {
  queries_.Clear();
}
inline const ::pb::suggests::ResponseQuery& ResponseVkMusic::queries(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.queries)
  return queries_.Get(index);
}
inline ::pb::suggests::ResponseQuery* ResponseVkMusic::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.queries)
  return queries_.Mutable(index);
}
inline ::pb::suggests::ResponseQuery* ResponseVkMusic::add_queries() {
  // @@protoc_insertion_point(field_add:pb.suggests.ResponseVkMusic.queries)
  return queries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >*
ResponseVkMusic::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ResponseVkMusic.queries)
  return &queries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >&
ResponseVkMusic::queries() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ResponseVkMusic.queries)
  return queries_;
}

// repeated .pb.suggests.ResponseNavigVkMusic navigs = 2 [(.gogo.xml) = {
inline int ResponseVkMusic::navigs_size() const {
  return navigs_.size();
}
inline void ResponseVkMusic::clear_navigs() {
  navigs_.Clear();
}
inline const ::pb::suggests::ResponseNavigVkMusic& ResponseVkMusic::navigs(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.navigs)
  return navigs_.Get(index);
}
inline ::pb::suggests::ResponseNavigVkMusic* ResponseVkMusic::mutable_navigs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.navigs)
  return navigs_.Mutable(index);
}
inline ::pb::suggests::ResponseNavigVkMusic* ResponseVkMusic::add_navigs() {
  // @@protoc_insertion_point(field_add:pb.suggests.ResponseVkMusic.navigs)
  return navigs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseNavigVkMusic >*
ResponseVkMusic::mutable_navigs() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ResponseVkMusic.navigs)
  return &navigs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseNavigVkMusic >&
ResponseVkMusic::navigs() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ResponseVkMusic.navigs)
  return navigs_;
}

// repeated .pb.suggests.ResponseQuery history = 3 [(.gogo.xml) = {
inline int ResponseVkMusic::history_size() const {
  return history_.size();
}
inline void ResponseVkMusic::clear_history() {
  history_.Clear();
}
inline const ::pb::suggests::ResponseQuery& ResponseVkMusic::history(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.history)
  return history_.Get(index);
}
inline ::pb::suggests::ResponseQuery* ResponseVkMusic::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.history)
  return history_.Mutable(index);
}
inline ::pb::suggests::ResponseQuery* ResponseVkMusic::add_history() {
  // @@protoc_insertion_point(field_add:pb.suggests.ResponseVkMusic.history)
  return history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >*
ResponseVkMusic::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ResponseVkMusic.history)
  return &history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ResponseQuery >&
ResponseVkMusic::history() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ResponseVkMusic.history)
  return history_;
}

// string qid = 4 [(.gogo.json) = {
inline void ResponseVkMusic::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseVkMusic::qid() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.qid)
  return qid_.GetNoArena();
}
inline void ResponseVkMusic::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.ResponseVkMusic.qid)
}
#if LANG_CXX11
inline void ResponseVkMusic::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.ResponseVkMusic.qid)
}
#endif
inline void ResponseVkMusic::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.ResponseVkMusic.qid)
}
inline void ResponseVkMusic::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.ResponseVkMusic.qid)
}
inline ::std::string* ResponseVkMusic::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseVkMusic::release_qid() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseVkMusic.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseVkMusic::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseVkMusic.qid)
}

// .pb.suggests.ResponseVkMusic.Terms terms = 5 [(.gogo.json) = {
inline bool ResponseVkMusic::has_terms() const {
  return this != internal_default_instance() && terms_ != NULL;
}
inline void ResponseVkMusic::clear_terms() {
  if (GetArenaNoVirtual() == NULL && terms_ != NULL) delete terms_;
  terms_ = NULL;
}
inline const ::pb::suggests::ResponseVkMusic_Terms& ResponseVkMusic::terms() const {
  const ::pb::suggests::ResponseVkMusic_Terms* p = terms_;
  // @@protoc_insertion_point(field_get:pb.suggests.ResponseVkMusic.terms)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::suggests::ResponseVkMusic_Terms*>(
      &::pb::suggests::_ResponseVkMusic_Terms_default_instance_);
}
inline ::pb::suggests::ResponseVkMusic_Terms* ResponseVkMusic::mutable_terms() {
  
  if (terms_ == NULL) {
    terms_ = new ::pb::suggests::ResponseVkMusic_Terms;
  }
  // @@protoc_insertion_point(field_mutable:pb.suggests.ResponseVkMusic.terms)
  return terms_;
}
inline ::pb::suggests::ResponseVkMusic_Terms* ResponseVkMusic::release_terms() {
  // @@protoc_insertion_point(field_release:pb.suggests.ResponseVkMusic.terms)
  
  ::pb::suggests::ResponseVkMusic_Terms* temp = terms_;
  terms_ = NULL;
  return temp;
}
inline void ResponseVkMusic::set_allocated_terms(::pb::suggests::ResponseVkMusic_Terms* terms) {
  delete terms_;
  terms_ = terms;
  if (terms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ResponseVkMusic.terms)
}

// -------------------------------------------------------------------

// ClusterInfoVkMusic_Centroid

// repeated float values = 1 [(.gogo.json) = {
inline int ClusterInfoVkMusic_Centroid::values_size() const {
  return values_.size();
}
inline void ClusterInfoVkMusic_Centroid::clear_values() {
  values_.Clear();
}
inline float ClusterInfoVkMusic_Centroid::values(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ClusterInfoVkMusic.Centroid.values)
  return values_.Get(index);
}
inline void ClusterInfoVkMusic_Centroid::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.suggests.ClusterInfoVkMusic.Centroid.values)
}
inline void ClusterInfoVkMusic_Centroid::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:pb.suggests.ClusterInfoVkMusic.Centroid.values)
}
inline const ::google::protobuf::RepeatedField< float >&
ClusterInfoVkMusic_Centroid::values() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ClusterInfoVkMusic.Centroid.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< float >*
ClusterInfoVkMusic_Centroid::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ClusterInfoVkMusic.Centroid.values)
  return &values_;
}

// -------------------------------------------------------------------

// ClusterInfoVkMusic

// uint32 cluster_id = 1 [(.gogo.json) = {
inline void ClusterInfoVkMusic::clear_cluster_id() {
  cluster_id_ = 0u;
}
inline ::google::protobuf::uint32 ClusterInfoVkMusic::cluster_id() const {
  // @@protoc_insertion_point(field_get:pb.suggests.ClusterInfoVkMusic.cluster_id)
  return cluster_id_;
}
inline void ClusterInfoVkMusic::set_cluster_id(::google::protobuf::uint32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.ClusterInfoVkMusic.cluster_id)
}

// .pb.suggests.ClusterInfoVkMusic.Centroid centroid = 2 [(.gogo.json) = {
inline bool ClusterInfoVkMusic::has_centroid() const {
  return this != internal_default_instance() && centroid_ != NULL;
}
inline void ClusterInfoVkMusic::clear_centroid() {
  if (GetArenaNoVirtual() == NULL && centroid_ != NULL) delete centroid_;
  centroid_ = NULL;
}
inline const ::pb::suggests::ClusterInfoVkMusic_Centroid& ClusterInfoVkMusic::centroid() const {
  const ::pb::suggests::ClusterInfoVkMusic_Centroid* p = centroid_;
  // @@protoc_insertion_point(field_get:pb.suggests.ClusterInfoVkMusic.centroid)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::suggests::ClusterInfoVkMusic_Centroid*>(
      &::pb::suggests::_ClusterInfoVkMusic_Centroid_default_instance_);
}
inline ::pb::suggests::ClusterInfoVkMusic_Centroid* ClusterInfoVkMusic::mutable_centroid() {
  
  if (centroid_ == NULL) {
    centroid_ = new ::pb::suggests::ClusterInfoVkMusic_Centroid;
  }
  // @@protoc_insertion_point(field_mutable:pb.suggests.ClusterInfoVkMusic.centroid)
  return centroid_;
}
inline ::pb::suggests::ClusterInfoVkMusic_Centroid* ClusterInfoVkMusic::release_centroid() {
  // @@protoc_insertion_point(field_release:pb.suggests.ClusterInfoVkMusic.centroid)
  
  ::pb::suggests::ClusterInfoVkMusic_Centroid* temp = centroid_;
  centroid_ = NULL;
  return temp;
}
inline void ClusterInfoVkMusic::set_allocated_centroid(::pb::suggests::ClusterInfoVkMusic_Centroid* centroid) {
  delete centroid_;
  centroid_ = centroid;
  if (centroid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.ClusterInfoVkMusic.centroid)
}

// -------------------------------------------------------------------

// ClusterInfosVkMusic

// repeated .pb.suggests.ClusterInfoVkMusic clusters = 1;
inline int ClusterInfosVkMusic::clusters_size() const {
  return clusters_.size();
}
inline void ClusterInfosVkMusic::clear_clusters() {
  clusters_.Clear();
}
inline const ::pb::suggests::ClusterInfoVkMusic& ClusterInfosVkMusic::clusters(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.ClusterInfosVkMusic.clusters)
  return clusters_.Get(index);
}
inline ::pb::suggests::ClusterInfoVkMusic* ClusterInfosVkMusic::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.ClusterInfosVkMusic.clusters)
  return clusters_.Mutable(index);
}
inline ::pb::suggests::ClusterInfoVkMusic* ClusterInfosVkMusic::add_clusters() {
  // @@protoc_insertion_point(field_add:pb.suggests.ClusterInfosVkMusic.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::suggests::ClusterInfoVkMusic >*
ClusterInfosVkMusic::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.ClusterInfosVkMusic.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::suggests::ClusterInfoVkMusic >&
ClusterInfosVkMusic::clusters() const {
  // @@protoc_insertion_point(field_list:pb.suggests.ClusterInfosVkMusic.clusters)
  return clusters_;
}

// -------------------------------------------------------------------

// QueryEmbeddingVkMusic

// repeated float components = 1;
inline int QueryEmbeddingVkMusic::components_size() const {
  return components_.size();
}
inline void QueryEmbeddingVkMusic::clear_components() {
  components_.Clear();
}
inline float QueryEmbeddingVkMusic::components(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.QueryEmbeddingVkMusic.components)
  return components_.Get(index);
}
inline void QueryEmbeddingVkMusic::set_components(int index, float value) {
  components_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.suggests.QueryEmbeddingVkMusic.components)
}
inline void QueryEmbeddingVkMusic::add_components(float value) {
  components_.Add(value);
  // @@protoc_insertion_point(field_add:pb.suggests.QueryEmbeddingVkMusic.components)
}
inline const ::google::protobuf::RepeatedField< float >&
QueryEmbeddingVkMusic::components() const {
  // @@protoc_insertion_point(field_list:pb.suggests.QueryEmbeddingVkMusic.components)
  return components_;
}
inline ::google::protobuf::RepeatedField< float >*
QueryEmbeddingVkMusic::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.QueryEmbeddingVkMusic.components)
  return &components_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace suggests
}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::suggests::NavigVkMusicType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::suggests::NavigVkMusicType>() {
  return ::pb::suggests::NavigVkMusicType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sugg_5fvk_5fmusic_2eproto__INCLUDED
