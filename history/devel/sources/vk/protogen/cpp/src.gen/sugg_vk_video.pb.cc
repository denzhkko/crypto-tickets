// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sugg_vk_video.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sugg_vk_video.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace suggests {
namespace vk_video {
class IdxMainData_VariantDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IdxMainData_Variant>
     _instance;
} _IdxMainData_Variant_default_instance_;
class IdxMainDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IdxMainData>
     _instance;
} _IdxMainData_default_instance_;
class IdxMainNgramDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IdxMainNgramData>
     _instance;
} _IdxMainNgramData_default_instance_;
class IdxNgramStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IdxNgramStats>
     _instance;
} _IdxNgramStats_default_instance_;

namespace protobuf_sugg_5fvk_5fvideo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData_Variant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData_Variant, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData_Variant, uniq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData_Variant, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData_Variant, uniq_safe_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData, freshness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData, variants_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainData, glue_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainNgramData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainNgramData, ngram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainNgramData, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxMainNgramData, count_at_end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxNgramStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxNgramStats, ngram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxNgramStats, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdxNgramStats, count_allowed_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(IdxMainData_Variant)},
  { 9, -1, sizeof(IdxMainData)},
  { 19, -1, sizeof(IdxMainNgramData)},
  { 27, -1, sizeof(IdxNgramStats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_IdxMainData_Variant_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IdxMainData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IdxMainNgramData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IdxNgramStats_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sugg_vk_video.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gogo::protobuf_options_2eproto::InitDefaults();
  _IdxMainData_Variant_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IdxMainData_Variant_default_instance_);_IdxMainData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IdxMainData_default_instance_);_IdxMainNgramData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IdxMainNgramData_default_instance_);_IdxNgramStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IdxNgramStats_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023sugg_vk_video.proto\022\024pb.suggests.vk_vi"
      "deo\032\roptions.proto\"\341\002\n\013IdxMainData\022\032\n\005qu"
      "ery\030\001 \001(\tB\013\222\265\030\007\n\005query\022\"\n\tfrequency\030\006 \001("
      "\004B\017\222\265\030\013\n\tfrequency\022\"\n\tfreshness\030\010 \001(\001B\017\222"
      "\265\030\013\n\tfreshness\022K\n\010variants\030\005 \003(\0132).pb.su"
      "ggests.vk_video.IdxMainData.VariantB\016\222\265\030"
      "\n\n\010variants\022 \n\010glue_ids\030\007 \003(\003B\016\222\265\030\n\n\010glu"
      "e_ids\032\177\n\007Variant\022\032\n\005query\030\001 \001(\tB\013\222\265\030\007\n\005q"
      "uery\022\030\n\004uniq\030\002 \001(\rB\n\222\265\030\006\n\004uniq\022\032\n\005flags\030"
      "\003 \001(\rB\013\222\265\030\007\n\005flags\022\"\n\tuniq_safe\030\004 \001(\rB\017\222"
      "\265\030\013\n\tuniq_safe\"t\n\020IdxMainNgramData\022\032\n\005ng"
      "ram\030\001 \001(\tB\013\222\265\030\007\n\005ngram\022\032\n\005count\030\002 \001(\004B\013\222"
      "\265\030\007\n\005count\022(\n\014count_at_end\030\003 \001(\004B\022\222\265\030\016\n\014"
      "count_at_end\"s\n\rIdxNgramStats\022\032\n\005ngram\030\001"
      " \001(\tB\013\222\265\030\007\n\005ngram\022\032\n\005count\030\002 \001(\004B\013\222\265\030\007\n\005"
      "count\022*\n\rcount_allowed\030\003 \001(\004B\023\222\265\030\017\n\rcoun"
      "t_allowedb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 657);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sugg_vk_video.proto", &protobuf_RegisterTypes);
  ::gogo::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sugg_5fvk_5fvideo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdxMainData_Variant::kQueryFieldNumber;
const int IdxMainData_Variant::kUniqFieldNumber;
const int IdxMainData_Variant::kFlagsFieldNumber;
const int IdxMainData_Variant::kUniqSafeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdxMainData_Variant::IdxMainData_Variant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fvideo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.vk_video.IdxMainData.Variant)
}
IdxMainData_Variant::IdxMainData_Variant(const IdxMainData_Variant& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&uniq_, &from.uniq_,
    static_cast<size_t>(reinterpret_cast<char*>(&uniq_safe_) -
    reinterpret_cast<char*>(&uniq_)) + sizeof(uniq_safe_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.vk_video.IdxMainData.Variant)
}

void IdxMainData_Variant::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uniq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uniq_safe_) -
      reinterpret_cast<char*>(&uniq_)) + sizeof(uniq_safe_));
  _cached_size_ = 0;
}

IdxMainData_Variant::~IdxMainData_Variant() {
  // @@protoc_insertion_point(destructor:pb.suggests.vk_video.IdxMainData.Variant)
  SharedDtor();
}

void IdxMainData_Variant::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IdxMainData_Variant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdxMainData_Variant::descriptor() {
  protobuf_sugg_5fvk_5fvideo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fvideo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdxMainData_Variant& IdxMainData_Variant::default_instance() {
  protobuf_sugg_5fvk_5fvideo_2eproto::InitDefaults();
  return *internal_default_instance();
}

IdxMainData_Variant* IdxMainData_Variant::New(::google::protobuf::Arena* arena) const {
  IdxMainData_Variant* n = new IdxMainData_Variant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdxMainData_Variant::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.vk_video.IdxMainData.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uniq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uniq_safe_) -
      reinterpret_cast<char*>(&uniq_)) + sizeof(uniq_safe_));
  _internal_metadata_.Clear();
}

bool IdxMainData_Variant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.vk_video.IdxMainData.Variant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.vk_video.IdxMainData.Variant.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uniq = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uniq_safe = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniq_safe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.vk_video.IdxMainData.Variant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.vk_video.IdxMainData.Variant)
  return false;
#undef DO_
}

void IdxMainData_Variant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.vk_video.IdxMainData.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.vk_video.IdxMainData.Variant.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // uint32 uniq = 2 [(.gogo.json) = {
  if (this->uniq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uniq(), output);
  }

  // uint32 flags = 3 [(.gogo.json) = {
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // uint32 uniq_safe = 4 [(.gogo.json) = {
  if (this->uniq_safe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uniq_safe(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.vk_video.IdxMainData.Variant)
}

::google::protobuf::uint8* IdxMainData_Variant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.vk_video.IdxMainData.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.vk_video.IdxMainData.Variant.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // uint32 uniq = 2 [(.gogo.json) = {
  if (this->uniq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uniq(), target);
  }

  // uint32 flags = 3 [(.gogo.json) = {
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // uint32 uniq_safe = 4 [(.gogo.json) = {
  if (this->uniq_safe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uniq_safe(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.vk_video.IdxMainData.Variant)
  return target;
}

size_t IdxMainData_Variant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.vk_video.IdxMainData.Variant)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // uint32 uniq = 2 [(.gogo.json) = {
  if (this->uniq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uniq());
  }

  // uint32 flags = 3 [(.gogo.json) = {
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // uint32 uniq_safe = 4 [(.gogo.json) = {
  if (this->uniq_safe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uniq_safe());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdxMainData_Variant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.vk_video.IdxMainData.Variant)
  GOOGLE_DCHECK_NE(&from, this);
  const IdxMainData_Variant* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdxMainData_Variant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.vk_video.IdxMainData.Variant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.vk_video.IdxMainData.Variant)
    MergeFrom(*source);
  }
}

void IdxMainData_Variant::MergeFrom(const IdxMainData_Variant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.vk_video.IdxMainData.Variant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.uniq() != 0) {
    set_uniq(from.uniq());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.uniq_safe() != 0) {
    set_uniq_safe(from.uniq_safe());
  }
}

void IdxMainData_Variant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.vk_video.IdxMainData.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdxMainData_Variant::CopyFrom(const IdxMainData_Variant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.vk_video.IdxMainData.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdxMainData_Variant::IsInitialized() const {
  return true;
}

void IdxMainData_Variant::Swap(IdxMainData_Variant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdxMainData_Variant::InternalSwap(IdxMainData_Variant* other) {
  using std::swap;
  query_.Swap(&other->query_);
  swap(uniq_, other->uniq_);
  swap(flags_, other->flags_);
  swap(uniq_safe_, other->uniq_safe_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdxMainData_Variant::GetMetadata() const {
  protobuf_sugg_5fvk_5fvideo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fvideo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdxMainData_Variant

// string query = 1 [(.gogo.json) = {
void IdxMainData_Variant::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IdxMainData_Variant::query() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.Variant.query)
  return query_.GetNoArena();
}
void IdxMainData_Variant::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainData.Variant.query)
}
#if LANG_CXX11
void IdxMainData_Variant::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.vk_video.IdxMainData.Variant.query)
}
#endif
void IdxMainData_Variant::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.vk_video.IdxMainData.Variant.query)
}
void IdxMainData_Variant::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.vk_video.IdxMainData.Variant.query)
}
::std::string* IdxMainData_Variant::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.vk_video.IdxMainData.Variant.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IdxMainData_Variant::release_query() {
  // @@protoc_insertion_point(field_release:pb.suggests.vk_video.IdxMainData.Variant.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IdxMainData_Variant::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.vk_video.IdxMainData.Variant.query)
}

// uint32 uniq = 2 [(.gogo.json) = {
void IdxMainData_Variant::clear_uniq() {
  uniq_ = 0u;
}
::google::protobuf::uint32 IdxMainData_Variant::uniq() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.Variant.uniq)
  return uniq_;
}
void IdxMainData_Variant::set_uniq(::google::protobuf::uint32 value) {
  
  uniq_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainData.Variant.uniq)
}

// uint32 flags = 3 [(.gogo.json) = {
void IdxMainData_Variant::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 IdxMainData_Variant::flags() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.Variant.flags)
  return flags_;
}
void IdxMainData_Variant::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainData.Variant.flags)
}

// uint32 uniq_safe = 4 [(.gogo.json) = {
void IdxMainData_Variant::clear_uniq_safe() {
  uniq_safe_ = 0u;
}
::google::protobuf::uint32 IdxMainData_Variant::uniq_safe() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.Variant.uniq_safe)
  return uniq_safe_;
}
void IdxMainData_Variant::set_uniq_safe(::google::protobuf::uint32 value) {
  
  uniq_safe_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainData.Variant.uniq_safe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdxMainData::kQueryFieldNumber;
const int IdxMainData::kFrequencyFieldNumber;
const int IdxMainData::kFreshnessFieldNumber;
const int IdxMainData::kVariantsFieldNumber;
const int IdxMainData::kGlueIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdxMainData::IdxMainData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fvideo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.vk_video.IdxMainData)
}
IdxMainData::IdxMainData(const IdxMainData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variants_(from.variants_),
      glue_ids_(from.glue_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&frequency_, &from.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&freshness_) -
    reinterpret_cast<char*>(&frequency_)) + sizeof(freshness_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.vk_video.IdxMainData)
}

void IdxMainData::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freshness_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(freshness_));
  _cached_size_ = 0;
}

IdxMainData::~IdxMainData() {
  // @@protoc_insertion_point(destructor:pb.suggests.vk_video.IdxMainData)
  SharedDtor();
}

void IdxMainData::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IdxMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdxMainData::descriptor() {
  protobuf_sugg_5fvk_5fvideo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fvideo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdxMainData& IdxMainData::default_instance() {
  protobuf_sugg_5fvk_5fvideo_2eproto::InitDefaults();
  return *internal_default_instance();
}

IdxMainData* IdxMainData::New(::google::protobuf::Arena* arena) const {
  IdxMainData* n = new IdxMainData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdxMainData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.vk_video.IdxMainData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variants_.Clear();
  glue_ids_.Clear();
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freshness_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(freshness_));
  _internal_metadata_.Clear();
}

bool IdxMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.vk_video.IdxMainData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.vk_video.IdxMainData.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.suggests.vk_video.IdxMainData.Variant variants = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frequency = 6 [(.gogo.json) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 glue_ids = 7 [(.gogo.json) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_glue_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 58u, input, this->mutable_glue_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double freshness = 8 [(.gogo.json) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freshness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.vk_video.IdxMainData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.vk_video.IdxMainData)
  return false;
#undef DO_
}

void IdxMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.vk_video.IdxMainData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.vk_video.IdxMainData.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // repeated .pb.suggests.vk_video.IdxMainData.Variant variants = 5 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->variants(static_cast<int>(i)), output);
  }

  // uint64 frequency = 6 [(.gogo.json) = {
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->frequency(), output);
  }

  // repeated int64 glue_ids = 7 [(.gogo.json) = {
  if (this->glue_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _glue_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->glue_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->glue_ids(i), output);
  }

  // double freshness = 8 [(.gogo.json) = {
  if (this->freshness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->freshness(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.vk_video.IdxMainData)
}

::google::protobuf::uint8* IdxMainData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.vk_video.IdxMainData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.vk_video.IdxMainData.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // repeated .pb.suggests.vk_video.IdxMainData.Variant variants = 5 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->variants(static_cast<int>(i)), deterministic, target);
  }

  // uint64 frequency = 6 [(.gogo.json) = {
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->frequency(), target);
  }

  // repeated int64 glue_ids = 7 [(.gogo.json) = {
  if (this->glue_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _glue_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->glue_ids_, target);
  }

  // double freshness = 8 [(.gogo.json) = {
  if (this->freshness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->freshness(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.vk_video.IdxMainData)
  return target;
}

size_t IdxMainData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.vk_video.IdxMainData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.suggests.vk_video.IdxMainData.Variant variants = 5 [(.gogo.json) = {
  {
    unsigned int count = static_cast<unsigned int>(this->variants_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variants(static_cast<int>(i)));
    }
  }

  // repeated int64 glue_ids = 7 [(.gogo.json) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->glue_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _glue_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string query = 1 [(.gogo.json) = {
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // uint64 frequency = 6 [(.gogo.json) = {
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frequency());
  }

  // double freshness = 8 [(.gogo.json) = {
  if (this->freshness() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdxMainData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.vk_video.IdxMainData)
  GOOGLE_DCHECK_NE(&from, this);
  const IdxMainData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdxMainData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.vk_video.IdxMainData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.vk_video.IdxMainData)
    MergeFrom(*source);
  }
}

void IdxMainData::MergeFrom(const IdxMainData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.vk_video.IdxMainData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variants_.MergeFrom(from.variants_);
  glue_ids_.MergeFrom(from.glue_ids_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.freshness() != 0) {
    set_freshness(from.freshness());
  }
}

void IdxMainData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.vk_video.IdxMainData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdxMainData::CopyFrom(const IdxMainData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.vk_video.IdxMainData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdxMainData::IsInitialized() const {
  return true;
}

void IdxMainData::Swap(IdxMainData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdxMainData::InternalSwap(IdxMainData* other) {
  using std::swap;
  variants_.InternalSwap(&other->variants_);
  glue_ids_.InternalSwap(&other->glue_ids_);
  query_.Swap(&other->query_);
  swap(frequency_, other->frequency_);
  swap(freshness_, other->freshness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdxMainData::GetMetadata() const {
  protobuf_sugg_5fvk_5fvideo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fvideo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdxMainData

// string query = 1 [(.gogo.json) = {
void IdxMainData::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IdxMainData::query() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.query)
  return query_.GetNoArena();
}
void IdxMainData::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainData.query)
}
#if LANG_CXX11
void IdxMainData::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.vk_video.IdxMainData.query)
}
#endif
void IdxMainData::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.vk_video.IdxMainData.query)
}
void IdxMainData::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.vk_video.IdxMainData.query)
}
::std::string* IdxMainData::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.vk_video.IdxMainData.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IdxMainData::release_query() {
  // @@protoc_insertion_point(field_release:pb.suggests.vk_video.IdxMainData.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IdxMainData::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.vk_video.IdxMainData.query)
}

// uint64 frequency = 6 [(.gogo.json) = {
void IdxMainData::clear_frequency() {
  frequency_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IdxMainData::frequency() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.frequency)
  return frequency_;
}
void IdxMainData::set_frequency(::google::protobuf::uint64 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainData.frequency)
}

// double freshness = 8 [(.gogo.json) = {
void IdxMainData::clear_freshness() {
  freshness_ = 0;
}
double IdxMainData::freshness() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.freshness)
  return freshness_;
}
void IdxMainData::set_freshness(double value) {
  
  freshness_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainData.freshness)
}

// repeated .pb.suggests.vk_video.IdxMainData.Variant variants = 5 [(.gogo.json) = {
int IdxMainData::variants_size() const {
  return variants_.size();
}
void IdxMainData::clear_variants() {
  variants_.Clear();
}
const ::pb::suggests::vk_video::IdxMainData_Variant& IdxMainData::variants(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.variants)
  return variants_.Get(index);
}
::pb::suggests::vk_video::IdxMainData_Variant* IdxMainData::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:pb.suggests.vk_video.IdxMainData.variants)
  return variants_.Mutable(index);
}
::pb::suggests::vk_video::IdxMainData_Variant* IdxMainData::add_variants() {
  // @@protoc_insertion_point(field_add:pb.suggests.vk_video.IdxMainData.variants)
  return variants_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::suggests::vk_video::IdxMainData_Variant >*
IdxMainData::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.vk_video.IdxMainData.variants)
  return &variants_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::suggests::vk_video::IdxMainData_Variant >&
IdxMainData::variants() const {
  // @@protoc_insertion_point(field_list:pb.suggests.vk_video.IdxMainData.variants)
  return variants_;
}

// repeated int64 glue_ids = 7 [(.gogo.json) = {
int IdxMainData::glue_ids_size() const {
  return glue_ids_.size();
}
void IdxMainData::clear_glue_ids() {
  glue_ids_.Clear();
}
::google::protobuf::int64 IdxMainData::glue_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainData.glue_ids)
  return glue_ids_.Get(index);
}
void IdxMainData::set_glue_ids(int index, ::google::protobuf::int64 value) {
  glue_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainData.glue_ids)
}
void IdxMainData::add_glue_ids(::google::protobuf::int64 value) {
  glue_ids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.suggests.vk_video.IdxMainData.glue_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
IdxMainData::glue_ids() const {
  // @@protoc_insertion_point(field_list:pb.suggests.vk_video.IdxMainData.glue_ids)
  return glue_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
IdxMainData::mutable_glue_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.suggests.vk_video.IdxMainData.glue_ids)
  return &glue_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdxMainNgramData::kNgramFieldNumber;
const int IdxMainNgramData::kCountFieldNumber;
const int IdxMainNgramData::kCountAtEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdxMainNgramData::IdxMainNgramData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fvideo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.vk_video.IdxMainNgramData)
}
IdxMainNgramData::IdxMainNgramData(const IdxMainNgramData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ngram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ngram().size() > 0) {
    ngram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ngram_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_at_end_) -
    reinterpret_cast<char*>(&count_)) + sizeof(count_at_end_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.vk_video.IdxMainNgramData)
}

void IdxMainNgramData::SharedCtor() {
  ngram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_at_end_) -
      reinterpret_cast<char*>(&count_)) + sizeof(count_at_end_));
  _cached_size_ = 0;
}

IdxMainNgramData::~IdxMainNgramData() {
  // @@protoc_insertion_point(destructor:pb.suggests.vk_video.IdxMainNgramData)
  SharedDtor();
}

void IdxMainNgramData::SharedDtor() {
  ngram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IdxMainNgramData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdxMainNgramData::descriptor() {
  protobuf_sugg_5fvk_5fvideo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fvideo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdxMainNgramData& IdxMainNgramData::default_instance() {
  protobuf_sugg_5fvk_5fvideo_2eproto::InitDefaults();
  return *internal_default_instance();
}

IdxMainNgramData* IdxMainNgramData::New(::google::protobuf::Arena* arena) const {
  IdxMainNgramData* n = new IdxMainNgramData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdxMainNgramData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.vk_video.IdxMainNgramData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ngram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_at_end_) -
      reinterpret_cast<char*>(&count_)) + sizeof(count_at_end_));
  _internal_metadata_.Clear();
}

bool IdxMainNgramData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.vk_video.IdxMainNgramData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ngram = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ngram()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ngram().data(), static_cast<int>(this->ngram().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.vk_video.IdxMainNgramData.ngram"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count_at_end = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_at_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.vk_video.IdxMainNgramData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.vk_video.IdxMainNgramData)
  return false;
#undef DO_
}

void IdxMainNgramData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.vk_video.IdxMainNgramData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ngram = 1 [(.gogo.json) = {
  if (this->ngram().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ngram().data(), static_cast<int>(this->ngram().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.vk_video.IdxMainNgramData.ngram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ngram(), output);
  }

  // uint64 count = 2 [(.gogo.json) = {
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  // uint64 count_at_end = 3 [(.gogo.json) = {
  if (this->count_at_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count_at_end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.vk_video.IdxMainNgramData)
}

::google::protobuf::uint8* IdxMainNgramData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.vk_video.IdxMainNgramData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ngram = 1 [(.gogo.json) = {
  if (this->ngram().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ngram().data(), static_cast<int>(this->ngram().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.vk_video.IdxMainNgramData.ngram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ngram(), target);
  }

  // uint64 count = 2 [(.gogo.json) = {
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  // uint64 count_at_end = 3 [(.gogo.json) = {
  if (this->count_at_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count_at_end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.vk_video.IdxMainNgramData)
  return target;
}

size_t IdxMainNgramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.vk_video.IdxMainNgramData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ngram = 1 [(.gogo.json) = {
  if (this->ngram().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ngram());
  }

  // uint64 count = 2 [(.gogo.json) = {
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  // uint64 count_at_end = 3 [(.gogo.json) = {
  if (this->count_at_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count_at_end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdxMainNgramData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.vk_video.IdxMainNgramData)
  GOOGLE_DCHECK_NE(&from, this);
  const IdxMainNgramData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdxMainNgramData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.vk_video.IdxMainNgramData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.vk_video.IdxMainNgramData)
    MergeFrom(*source);
  }
}

void IdxMainNgramData::MergeFrom(const IdxMainNgramData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.vk_video.IdxMainNgramData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ngram().size() > 0) {

    ngram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ngram_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.count_at_end() != 0) {
    set_count_at_end(from.count_at_end());
  }
}

void IdxMainNgramData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.vk_video.IdxMainNgramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdxMainNgramData::CopyFrom(const IdxMainNgramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.vk_video.IdxMainNgramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdxMainNgramData::IsInitialized() const {
  return true;
}

void IdxMainNgramData::Swap(IdxMainNgramData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdxMainNgramData::InternalSwap(IdxMainNgramData* other) {
  using std::swap;
  ngram_.Swap(&other->ngram_);
  swap(count_, other->count_);
  swap(count_at_end_, other->count_at_end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdxMainNgramData::GetMetadata() const {
  protobuf_sugg_5fvk_5fvideo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fvideo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdxMainNgramData

// string ngram = 1 [(.gogo.json) = {
void IdxMainNgramData::clear_ngram() {
  ngram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IdxMainNgramData::ngram() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainNgramData.ngram)
  return ngram_.GetNoArena();
}
void IdxMainNgramData::set_ngram(const ::std::string& value) {
  
  ngram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainNgramData.ngram)
}
#if LANG_CXX11
void IdxMainNgramData::set_ngram(::std::string&& value) {
  
  ngram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.vk_video.IdxMainNgramData.ngram)
}
#endif
void IdxMainNgramData::set_ngram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ngram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.vk_video.IdxMainNgramData.ngram)
}
void IdxMainNgramData::set_ngram(const char* value, size_t size) {
  
  ngram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.vk_video.IdxMainNgramData.ngram)
}
::std::string* IdxMainNgramData::mutable_ngram() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.vk_video.IdxMainNgramData.ngram)
  return ngram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IdxMainNgramData::release_ngram() {
  // @@protoc_insertion_point(field_release:pb.suggests.vk_video.IdxMainNgramData.ngram)
  
  return ngram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IdxMainNgramData::set_allocated_ngram(::std::string* ngram) {
  if (ngram != NULL) {
    
  } else {
    
  }
  ngram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ngram);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.vk_video.IdxMainNgramData.ngram)
}

// uint64 count = 2 [(.gogo.json) = {
void IdxMainNgramData::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IdxMainNgramData::count() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainNgramData.count)
  return count_;
}
void IdxMainNgramData::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainNgramData.count)
}

// uint64 count_at_end = 3 [(.gogo.json) = {
void IdxMainNgramData::clear_count_at_end() {
  count_at_end_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IdxMainNgramData::count_at_end() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxMainNgramData.count_at_end)
  return count_at_end_;
}
void IdxMainNgramData::set_count_at_end(::google::protobuf::uint64 value) {
  
  count_at_end_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxMainNgramData.count_at_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdxNgramStats::kNgramFieldNumber;
const int IdxNgramStats::kCountFieldNumber;
const int IdxNgramStats::kCountAllowedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdxNgramStats::IdxNgramStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sugg_5fvk_5fvideo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.suggests.vk_video.IdxNgramStats)
}
IdxNgramStats::IdxNgramStats(const IdxNgramStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ngram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ngram().size() > 0) {
    ngram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ngram_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_allowed_) -
    reinterpret_cast<char*>(&count_)) + sizeof(count_allowed_));
  // @@protoc_insertion_point(copy_constructor:pb.suggests.vk_video.IdxNgramStats)
}

void IdxNgramStats::SharedCtor() {
  ngram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_allowed_) -
      reinterpret_cast<char*>(&count_)) + sizeof(count_allowed_));
  _cached_size_ = 0;
}

IdxNgramStats::~IdxNgramStats() {
  // @@protoc_insertion_point(destructor:pb.suggests.vk_video.IdxNgramStats)
  SharedDtor();
}

void IdxNgramStats::SharedDtor() {
  ngram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IdxNgramStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdxNgramStats::descriptor() {
  protobuf_sugg_5fvk_5fvideo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fvideo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdxNgramStats& IdxNgramStats::default_instance() {
  protobuf_sugg_5fvk_5fvideo_2eproto::InitDefaults();
  return *internal_default_instance();
}

IdxNgramStats* IdxNgramStats::New(::google::protobuf::Arena* arena) const {
  IdxNgramStats* n = new IdxNgramStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdxNgramStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.suggests.vk_video.IdxNgramStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ngram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_allowed_) -
      reinterpret_cast<char*>(&count_)) + sizeof(count_allowed_));
  _internal_metadata_.Clear();
}

bool IdxNgramStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.suggests.vk_video.IdxNgramStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ngram = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ngram()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ngram().data(), static_cast<int>(this->ngram().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.suggests.vk_video.IdxNgramStats.ngram"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count_allowed = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.suggests.vk_video.IdxNgramStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.suggests.vk_video.IdxNgramStats)
  return false;
#undef DO_
}

void IdxNgramStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.suggests.vk_video.IdxNgramStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ngram = 1 [(.gogo.json) = {
  if (this->ngram().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ngram().data(), static_cast<int>(this->ngram().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.vk_video.IdxNgramStats.ngram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ngram(), output);
  }

  // uint64 count = 2 [(.gogo.json) = {
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  // uint64 count_allowed = 3 [(.gogo.json) = {
  if (this->count_allowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count_allowed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.suggests.vk_video.IdxNgramStats)
}

::google::protobuf::uint8* IdxNgramStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.suggests.vk_video.IdxNgramStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ngram = 1 [(.gogo.json) = {
  if (this->ngram().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ngram().data(), static_cast<int>(this->ngram().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.suggests.vk_video.IdxNgramStats.ngram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ngram(), target);
  }

  // uint64 count = 2 [(.gogo.json) = {
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  // uint64 count_allowed = 3 [(.gogo.json) = {
  if (this->count_allowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count_allowed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.suggests.vk_video.IdxNgramStats)
  return target;
}

size_t IdxNgramStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.suggests.vk_video.IdxNgramStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ngram = 1 [(.gogo.json) = {
  if (this->ngram().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ngram());
  }

  // uint64 count = 2 [(.gogo.json) = {
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  // uint64 count_allowed = 3 [(.gogo.json) = {
  if (this->count_allowed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count_allowed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdxNgramStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.suggests.vk_video.IdxNgramStats)
  GOOGLE_DCHECK_NE(&from, this);
  const IdxNgramStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdxNgramStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.suggests.vk_video.IdxNgramStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.suggests.vk_video.IdxNgramStats)
    MergeFrom(*source);
  }
}

void IdxNgramStats::MergeFrom(const IdxNgramStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.suggests.vk_video.IdxNgramStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ngram().size() > 0) {

    ngram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ngram_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.count_allowed() != 0) {
    set_count_allowed(from.count_allowed());
  }
}

void IdxNgramStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.suggests.vk_video.IdxNgramStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdxNgramStats::CopyFrom(const IdxNgramStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.suggests.vk_video.IdxNgramStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdxNgramStats::IsInitialized() const {
  return true;
}

void IdxNgramStats::Swap(IdxNgramStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdxNgramStats::InternalSwap(IdxNgramStats* other) {
  using std::swap;
  ngram_.Swap(&other->ngram_);
  swap(count_, other->count_);
  swap(count_allowed_, other->count_allowed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdxNgramStats::GetMetadata() const {
  protobuf_sugg_5fvk_5fvideo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sugg_5fvk_5fvideo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdxNgramStats

// string ngram = 1 [(.gogo.json) = {
void IdxNgramStats::clear_ngram() {
  ngram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IdxNgramStats::ngram() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxNgramStats.ngram)
  return ngram_.GetNoArena();
}
void IdxNgramStats::set_ngram(const ::std::string& value) {
  
  ngram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxNgramStats.ngram)
}
#if LANG_CXX11
void IdxNgramStats::set_ngram(::std::string&& value) {
  
  ngram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.suggests.vk_video.IdxNgramStats.ngram)
}
#endif
void IdxNgramStats::set_ngram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ngram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.suggests.vk_video.IdxNgramStats.ngram)
}
void IdxNgramStats::set_ngram(const char* value, size_t size) {
  
  ngram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.suggests.vk_video.IdxNgramStats.ngram)
}
::std::string* IdxNgramStats::mutable_ngram() {
  
  // @@protoc_insertion_point(field_mutable:pb.suggests.vk_video.IdxNgramStats.ngram)
  return ngram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IdxNgramStats::release_ngram() {
  // @@protoc_insertion_point(field_release:pb.suggests.vk_video.IdxNgramStats.ngram)
  
  return ngram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IdxNgramStats::set_allocated_ngram(::std::string* ngram) {
  if (ngram != NULL) {
    
  } else {
    
  }
  ngram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ngram);
  // @@protoc_insertion_point(field_set_allocated:pb.suggests.vk_video.IdxNgramStats.ngram)
}

// uint64 count = 2 [(.gogo.json) = {
void IdxNgramStats::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IdxNgramStats::count() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxNgramStats.count)
  return count_;
}
void IdxNgramStats::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxNgramStats.count)
}

// uint64 count_allowed = 3 [(.gogo.json) = {
void IdxNgramStats::clear_count_allowed() {
  count_allowed_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 IdxNgramStats::count_allowed() const {
  // @@protoc_insertion_point(field_get:pb.suggests.vk_video.IdxNgramStats.count_allowed)
  return count_allowed_;
}
void IdxNgramStats::set_count_allowed(::google::protobuf::uint64 value) {
  
  count_allowed_ = value;
  // @@protoc_insertion_point(field_set:pb.suggests.vk_video.IdxNgramStats.count_allowed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vk_video
}  // namespace suggests
}  // namespace pb

// @@protoc_insertion_point(global_scope)
