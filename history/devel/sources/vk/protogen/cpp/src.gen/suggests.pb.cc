// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suggests.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "suggests.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace sugg {
namespace indexer {
class Clicks_ClickDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Clicks_Click>
     _instance;
} _Clicks_Click_default_instance_;
class ClicksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Clicks>
     _instance;
} _Clicks_default_instance_;
class QueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Query>
     _instance;
} _Query_default_instance_;
class SpcFixDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpcFix>
     _instance;
} _SpcFix_default_instance_;
class RichObjStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RichObjStat>
     _instance;
} _RichObjStat_default_instance_;
class SuggJobDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggJobData>
     _instance;
} _SuggJobData_default_instance_;
class FeatureEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeatureEntry>
     _instance;
} _FeatureEntry_default_instance_;
class SuggSiteResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggSiteResult>
     _instance;
} _SuggSiteResult_default_instance_;
class SuggQueryResult_AmigoMusicResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggQueryResult_AmigoMusicResult>
     _instance;
} _SuggQueryResult_AmigoMusicResult_default_instance_;
class SuggQueryResult_MatchedPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggQueryResult_MatchedPair>
     _instance;
} _SuggQueryResult_MatchedPair_default_instance_;
class SuggQueryResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggQueryResult>
     _instance;
} _SuggQueryResult_default_instance_;
class SuggWnfEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggWnfEntry>
     _instance;
} _SuggWnfEntry_default_instance_;
class SuggWnfResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggWnfResult>
     _instance;
} _SuggWnfResult_default_instance_;
class SuggMobileAutocompResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggMobileAutocompResult>
     _instance;
} _SuggMobileAutocompResult_default_instance_;
class SuggInlineAutocompResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggInlineAutocompResult>
     _instance;
} _SuggInlineAutocompResult_default_instance_;
class SuggTotalFreqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggTotalFreq>
     _instance;
} _SuggTotalFreq_default_instance_;
class SuggResultStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggResultStat>
     _instance;
} _SuggResultStat_default_instance_;
class SuggResultsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuggResults>
     _instance;
} _SuggResults_default_instance_;

namespace protobuf_suggests_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clicks_Click, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clicks_Click, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clicks_Click, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clicks_Click, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clicks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clicks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clicks, click_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, uniqs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcFix, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcFix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcFix, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpcFix, num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichObjStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichObjStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichObjStat, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichObjStat, num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, vertical_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, querynormalized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, referer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, timestampmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, timestampmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, timestampsumm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, uniqsupper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, uniqsrobot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, uniqslower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, queries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, pornoprob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, numpornoprobhigh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, numpornoproblow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, numsessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, numporno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, numrobot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, nummusic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, numfromsugg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, numserpclicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, numspcbanned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, summserpcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, summserpcountsessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, freshness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, richobjs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, richobjsstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggJobData, spcfixstat_),
  0,
  1,
  6,
  2,
  4,
  5,
  8,
  7,
  18,
  3,
  ~0u,
  21,
  22,
  23,
  9,
  10,
  11,
  12,
  13,
  14,
  17,
  15,
  16,
  19,
  20,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntry, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggSiteResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggSiteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggSiteResult, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggSiteResult, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggSiteResult, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggSiteResult, favicon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggSiteResult, is_nail_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_AmigoMusicResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_AmigoMusicResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_AmigoMusicResult, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_AmigoMusicResult, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_AmigoMusicResult, track_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_MatchedPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_MatchedPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_MatchedPair, begin_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult_MatchedPair, end_pos_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, misspell_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, is_music_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, is_autocomp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, is_news_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, rich_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, rich_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, amigo_music_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, feature_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, marked_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, exact_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, geo_country_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, geo_region_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, log_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, rich_category_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggQueryResult, matched_ranges_),
  0,
  6,
  7,
  8,
  9,
  1,
  2,
  4,
  ~0u,
  3,
  11,
  12,
  10,
  13,
  14,
  15,
  5,
  16,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfEntry, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfEntry, verdict_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfEntry, comment_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfResult, wnf_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfResult, wnf_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggWnfResult, wnf_entries_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggMobileAutocompResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggMobileAutocompResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggMobileAutocompResult, paste_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggMobileAutocompResult, display_text_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggInlineAutocompResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggInlineAutocompResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggInlineAutocompResult, completion_text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggTotalFreq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggTotalFreq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggTotalFreq, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggTotalFreq, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggTotalFreq, region_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResultStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResultStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResultStat, skip_exact_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResultStat, top_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResultStat, total_freq_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, queries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, sites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, wnf_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, mobile_autocomps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, inline_autocomps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggResults, end_ratio_),
  1,
  5,
  ~0u,
  ~0u,
  0,
  3,
  2,
  ~0u,
  ~0u,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Clicks_Click)},
  { 9, 15, sizeof(Clicks)},
  { 16, 24, sizeof(Query)},
  { 27, 34, sizeof(SpcFix)},
  { 36, 43, sizeof(RichObjStat)},
  { 45, 78, sizeof(SuggJobData)},
  { 106, 113, sizeof(FeatureEntry)},
  { 115, 125, sizeof(SuggSiteResult)},
  { 130, 138, sizeof(SuggQueryResult_AmigoMusicResult)},
  { 141, 148, sizeof(SuggQueryResult_MatchedPair)},
  { 150, 174, sizeof(SuggQueryResult)},
  { 193, 201, sizeof(SuggWnfEntry)},
  { 204, 212, sizeof(SuggWnfResult)},
  { 215, 222, sizeof(SuggMobileAutocompResult)},
  { 224, 230, sizeof(SuggInlineAutocompResult)},
  { 231, 239, sizeof(SuggTotalFreq)},
  { 242, 250, sizeof(SuggResultStat)},
  { 253, 268, sizeof(SuggResults)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Clicks_Click_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Clicks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpcFix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RichObjStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggJobData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggSiteResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggQueryResult_AmigoMusicResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggQueryResult_MatchedPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggQueryResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggWnfEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggWnfResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggMobileAutocompResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggInlineAutocompResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggTotalFreq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggResultStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuggResults_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "suggests.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::SputnikRanker::protobuf_sputnik_5flogs_2eproto::InitDefaults();
  _Clicks_Click_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Clicks_Click_default_instance_);_Clicks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Clicks_default_instance_);_Query_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Query_default_instance_);_SpcFix_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpcFix_default_instance_);_RichObjStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RichObjStat_default_instance_);_SuggJobData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggJobData_default_instance_);_FeatureEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeatureEntry_default_instance_);_SuggSiteResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggSiteResult_default_instance_);_SuggQueryResult_AmigoMusicResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggQueryResult_AmigoMusicResult_default_instance_);_SuggQueryResult_MatchedPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggQueryResult_MatchedPair_default_instance_);_SuggQueryResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggQueryResult_default_instance_);_SuggWnfEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggWnfEntry_default_instance_);_SuggWnfResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggWnfResult_default_instance_);_SuggMobileAutocompResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggMobileAutocompResult_default_instance_);_SuggInlineAutocompResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggInlineAutocompResult_default_instance_);_SuggTotalFreq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggTotalFreq_default_instance_);_SuggResultStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggResultStat_default_instance_);_SuggResults_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuggResults_default_instance_);_SuggJobData_default_instance_._instance.get_mutable()->uniqslower_ = const_cast< ::ru::mail::go::webbase::SputnikRanker::UserRankValues*>(
      ::ru::mail::go::webbase::SputnikRanker::UserRankValues::internal_default_instance());
  _SuggQueryResult_default_instance_._instance.get_mutable()->amigo_music_ = const_cast< ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult*>(
      ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult::internal_default_instance());
  _SuggQueryResult_default_instance_._instance.get_mutable()->site_ = const_cast< ::ru::mail::go::sugg::indexer::SuggSiteResult*>(
      ::ru::mail::go::sugg::indexer::SuggSiteResult::internal_default_instance());
  _SuggWnfResult_default_instance_._instance.get_mutable()->wnf_result_ = const_cast< ::ru::mail::go::sugg::indexer::SuggWnfEntry*>(
      ::ru::mail::go::sugg::indexer::SuggWnfEntry::internal_default_instance());
  _SuggResultStat_default_instance_._instance.get_mutable()->total_freq_ = const_cast< ::ru::mail::go::sugg::indexer::SuggTotalFreq*>(
      ::ru::mail::go::sugg::indexer::SuggTotalFreq::internal_default_instance());
  _SuggResults_default_instance_._instance.get_mutable()->stat_ = const_cast< ::ru::mail::go::sugg::indexer::SuggResultStat*>(
      ::ru::mail::go::sugg::indexer::SuggResultStat::internal_default_instance());
  _SuggResults_default_instance_._instance.get_mutable()->wnf_result_ = const_cast< ::ru::mail::go::sugg::indexer::SuggWnfResult*>(
      ::ru::mail::go::sugg::indexer::SuggWnfResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016suggests.proto\022\027ru.mail.go.sugg.indexe"
      "r\032\022sputnik_logs.proto\"g\n\006Clicks\0224\n\005click"
      "\030\001 \003(\0132%.ru.mail.go.sugg.indexer.Clicks."
      "Click\032\'\n\005Click\022\013\n\003pos\030\001 \001(\005\022\021\n\ttimestamp"
      "\030\002 \001(\004\"}\n\005Query\022\r\n\005query\030\001 \002(\t\022\r\n\005uniqs\030"
      "\002 \002(\r\0222\n\004type\030\003 \002(\0162$.ru.mail.go.sugg.in"
      "dexer.Query.QType\"\"\n\005QType\022\013\n\007VARIANT\020\000\022"
      "\014\n\010MISSPELL\020\001\"#\n\006SpcFix\022\014\n\004type\030\001 \002(\t\022\013\n"
      "\003num\030\002 \002(\r\"(\n\013RichObjStat\022\014\n\004type\030\001 \002(\t\022"
      "\013\n\003num\030\002 \002(\r\"\351\005\n\013SuggJobData\022\020\n\010vertical"
      "\030\001 \001(\t\022\027\n\017queryNormalized\030\002 \001(\t\022\013\n\003geo\030\003"
      " \001(\r\022\017\n\007referer\030\031 \001(\t\022\024\n\014timeStampMin\030\004 "
      "\001(\004\022\024\n\014timeStampMax\030\005 \001(\004\022\025\n\rtimeStampSu"
      "mm\030\006 \001(\004\022\022\n\nuniqsUpper\030\007 \001(\r\022\022\n\nuniqsRob"
      "ot\030\025 \001(\r\022D\n\nuniqsLower\030\010 \001(\01320.ru.mail.g"
      "o.webbase.SputnikRanker.UserRankValues\022/"
      "\n\007queries\030\t \003(\0132\036.ru.mail.go.sugg.indexe"
      "r.Query\022\021\n\tpornoProb\030\032 \001(\001\022\030\n\020numPornoPr"
      "obHigh\030\033 \001(\r\022\027\n\017numPornoProbLow\030\034 \001(\r\022\023\n"
      "\013numSessions\030\n \001(\r\022\020\n\010numPorno\030\013 \001(\r\022\020\n\010"
      "numRobot\030\014 \001(\r\022\020\n\010numMusic\030\r \001(\r\022\023\n\013numF"
      "romSugg\030\016 \001(\r\022\025\n\rnumSerpClicks\030\017 \001(\r\022\024\n\014"
      "numSpcBanned\030\020 \001(\r\022\025\n\rsummSerpCount\030\021 \001("
      "\004\022\035\n\025summSerpCountSessions\030\022 \001(\004\022\020\n\010date"
      "Time\030\023 \001(\004\022\021\n\tfreshness\030\024 \001(\001\022\020\n\010richObj"
      "s\030\026 \003(\t\022:\n\014richObjsStat\030\027 \003(\0132$.ru.mail."
      "go.sugg.indexer.RichObjStat\0223\n\nspcFixSta"
      "t\030\030 \003(\0132\037.ru.mail.go.sugg.indexer.SpcFix"
      "\"+\n\014FeatureEntry\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030"
      "\002 \001(\001\"]\n\016SuggSiteResult\022\013\n\003url\030\001 \001(\t\022\r\n\005"
      "title\030\002 \001(\t\022\r\n\005query\030\003 \001(\t\022\017\n\007favicon\030\004 "
      "\001(\t\022\017\n\007is_nail\030\005 \001(\010\"\301\006\n\017SuggQueryResult"
      "\022\014\n\004text\030\001 \001(\t\022L\n\rmisspell_type\030\002 \001(\01625."
      "ru.mail.go.sugg.indexer.SuggQueryResult."
      "MisspellType\022\020\n\010is_music\030\003 \001(\010\022\023\n\013is_aut"
      "ocomp\030\004 \001(\010\022\017\n\007is_news\030\005 \001(\010\022\025\n\rrich_cat"
      "egory\030\006 \001(\t\022\021\n\trich_data\030\007 \001(\t\022N\n\013amigo_"
      "music\030\010 \001(\01329.ru.mail.go.sugg.indexer.Su"
      "ggQueryResult.AmigoMusicResult\022;\n\014featur"
      "e_list\030\t \003(\0132%.ru.mail.go.sugg.indexer.F"
      "eatureEntry\022\023\n\013marked_text\030\n \001(\t\022\014\n\004freq"
      "\030\013 \001(\r\022\016\n\006weight\030\014 \001(\002\022\023\n\013exact_match\030\r "
      "\001(\010\022\030\n\020geo_country_freq\030\016 \001(\r\022\027\n\017geo_reg"
      "ion_freq\030\017 \001(\r\022\020\n\010log_prob\030\020 \001(\002\0225\n\004site"
      "\030\021 \001(\0132\'.ru.mail.go.sugg.indexer.SuggSit"
      "eResult\022\032\n\022rich_category_type\030\022 \001(\r\022L\n\016m"
      "atched_ranges\030\023 \003(\01324.ru.mail.go.sugg.in"
      "dexer.SuggQueryResult.MatchedPair\032@\n\020Ami"
      "goMusicResult\022\016\n\006artist\030\001 \001(\t\022\r\n\005album\030\002"
      " \001(\t\022\r\n\005track\030\003 \001(\t\0321\n\013MatchedPair\022\021\n\tbe"
      "gin_pos\030\001 \002(\r\022\017\n\007end_pos\030\002 \002(\r\"@\n\014Misspe"
      "llType\022\010\n\004NONE\020\000\022\r\n\tGRAMMATIC\020\001\022\014\n\010INVER"
      "TED\020\002\022\t\n\005PUNTO\020\003\"=\n\014SuggWnfEntry\022\013\n\003tag\030"
      "\003 \001(\t\022\017\n\007verdict\030\001 \001(\010\022\017\n\007comment\030\002 \001(\t\""
      "\231\001\n\rSuggWnfResult\022\021\n\twnf_query\030\001 \001(\t\0229\n\n"
      "wnf_result\030\002 \001(\0132%.ru.mail.go.sugg.index"
      "er.SuggWnfEntry\022:\n\013wnf_entries\030\003 \003(\0132%.r"
      "u.mail.go.sugg.indexer.SuggWnfEntry\"D\n\030S"
      "uggMobileAutocompResult\022\022\n\npaste_text\030\001 "
      "\002(\t\022\024\n\014display_text\030\002 \002(\t\"3\n\030SuggInlineA"
      "utocompResult\022\027\n\017completion_text\030\001 \002(\t\"\?"
      "\n\rSuggTotalFreq\022\r\n\005total\030\001 \001(\004\022\017\n\007countr"
      "y\030\002 \001(\004\022\016\n\006region\030\003 \001(\004\"{\n\016SuggResultSta"
      "t\022\030\n\020skip_exact_match\030\001 \001(\010\022\023\n\013top_resul"
      "ts\030\003 \001(\r\022:\n\ntotal_freq\030\004 \001(\0132&.ru.mail.g"
      "o.sugg.indexer.SuggTotalFreq\"\313\003\n\013SuggRes"
      "ults\022\r\n\005query\030\004 \001(\t\022\013\n\003rid\030\007 \001(\r\0229\n\007quer"
      "ies\030\001 \003(\0132(.ru.mail.go.sugg.indexer.Sugg"
      "QueryResult\0226\n\005sites\030\002 \003(\0132\'.ru.mail.go."
      "sugg.indexer.SuggSiteResult\022\r\n\005error\030\003 \001"
      "(\t\0225\n\004stat\030\010 \001(\0132\'.ru.mail.go.sugg.index"
      "er.SuggResultStat\022:\n\nwnf_result\030\005 \001(\0132&."
      "ru.mail.go.sugg.indexer.SuggWnfResult\022K\n"
      "\020mobile_autocomps\030\006 \003(\01321.ru.mail.go.sug"
      "g.indexer.SuggMobileAutocompResult\022K\n\020in"
      "line_autocomps\030\t \003(\01321.ru.mail.go.sugg.i"
      "ndexer.SuggInlineAutocompResult\022\021\n\tend_r"
      "atio\030\n \001(\001B\nB\010SuggRecs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3102);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "suggests.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::SputnikRanker::protobuf_sputnik_5flogs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_suggests_2eproto

const ::google::protobuf::EnumDescriptor* Query_QType_descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_enum_descriptors[0];
}
bool Query_QType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Query_QType Query::VARIANT;
const Query_QType Query::MISSPELL;
const Query_QType Query::QType_MIN;
const Query_QType Query::QType_MAX;
const int Query::QType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SuggQueryResult_MisspellType_descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_enum_descriptors[1];
}
bool SuggQueryResult_MisspellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SuggQueryResult_MisspellType SuggQueryResult::NONE;
const SuggQueryResult_MisspellType SuggQueryResult::GRAMMATIC;
const SuggQueryResult_MisspellType SuggQueryResult::INVERTED;
const SuggQueryResult_MisspellType SuggQueryResult::PUNTO;
const SuggQueryResult_MisspellType SuggQueryResult::MisspellType_MIN;
const SuggQueryResult_MisspellType SuggQueryResult::MisspellType_MAX;
const int SuggQueryResult::MisspellType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Clicks_Click::kPosFieldNumber;
const int Clicks_Click::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Clicks_Click::Clicks_Click()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.Clicks.Click)
}
Clicks_Click::Clicks_Click(const Clicks_Click& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.Clicks.Click)
}

void Clicks_Click::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(pos_));
}

Clicks_Click::~Clicks_Click() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.Clicks.Click)
  SharedDtor();
}

void Clicks_Click::SharedDtor() {
}

void Clicks_Click::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clicks_Click::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Clicks_Click& Clicks_Click::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

Clicks_Click* Clicks_Click::New(::google::protobuf::Arena* arena) const {
  Clicks_Click* n = new Clicks_Click;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Clicks_Click::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.Clicks.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(pos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Clicks_Click::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.Clicks.Click)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.Clicks.Click)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.Clicks.Click)
  return false;
#undef DO_
}

void Clicks_Click::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.Clicks.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pos = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.Clicks.Click)
}

::google::protobuf::uint8* Clicks_Click::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.Clicks.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pos = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.Clicks.Click)
  return target;
}

size_t Clicks_Click::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.Clicks.Click)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clicks_Click::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.Clicks.Click)
  GOOGLE_DCHECK_NE(&from, this);
  const Clicks_Click* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Clicks_Click>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.Clicks.Click)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.Clicks.Click)
    MergeFrom(*source);
  }
}

void Clicks_Click::MergeFrom(const Clicks_Click& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.Clicks.Click)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_ = from.pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Clicks_Click::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.Clicks.Click)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clicks_Click::CopyFrom(const Clicks_Click& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.Clicks.Click)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clicks_Click::IsInitialized() const {
  return true;
}

void Clicks_Click::Swap(Clicks_Click* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Clicks_Click::InternalSwap(Clicks_Click* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Clicks_Click::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Clicks_Click

// optional int32 pos = 1;
bool Clicks_Click::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Clicks_Click::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void Clicks_Click::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void Clicks_Click::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
::google::protobuf::int32 Clicks_Click::pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Clicks.Click.pos)
  return pos_;
}
void Clicks_Click::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Clicks.Click.pos)
}

// optional uint64 timestamp = 2;
bool Clicks_Click::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Clicks_Click::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Clicks_Click::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Clicks_Click::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Clicks_Click::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Clicks.Click.timestamp)
  return timestamp_;
}
void Clicks_Click::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Clicks.Click.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Clicks::kClickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Clicks::Clicks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.Clicks)
}
Clicks::Clicks(const Clicks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      click_(from.click_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.Clicks)
}

void Clicks::SharedCtor() {
  _cached_size_ = 0;
}

Clicks::~Clicks() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.Clicks)
  SharedDtor();
}

void Clicks::SharedDtor() {
}

void Clicks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clicks::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Clicks& Clicks::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

Clicks* Clicks::New(::google::protobuf::Arena* arena) const {
  Clicks* n = new Clicks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Clicks::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.Clicks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  click_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Clicks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.Clicks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.sugg.indexer.Clicks.Click click = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_click()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.Clicks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.Clicks)
  return false;
#undef DO_
}

void Clicks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.Clicks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.sugg.indexer.Clicks.Click click = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->click_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->click(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.Clicks)
}

::google::protobuf::uint8* Clicks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.Clicks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.sugg.indexer.Clicks.Click click = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->click_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->click(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.Clicks)
  return target;
}

size_t Clicks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.Clicks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.sugg.indexer.Clicks.Click click = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->click_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->click(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clicks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.Clicks)
  GOOGLE_DCHECK_NE(&from, this);
  const Clicks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Clicks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.Clicks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.Clicks)
    MergeFrom(*source);
  }
}

void Clicks::MergeFrom(const Clicks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.Clicks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  click_.MergeFrom(from.click_);
}

void Clicks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.Clicks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clicks::CopyFrom(const Clicks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.Clicks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clicks::IsInitialized() const {
  return true;
}

void Clicks::Swap(Clicks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Clicks::InternalSwap(Clicks* other) {
  using std::swap;
  click_.InternalSwap(&other->click_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Clicks::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Clicks

// repeated .ru.mail.go.sugg.indexer.Clicks.Click click = 1;
int Clicks::click_size() const {
  return click_.size();
}
void Clicks::clear_click() {
  click_.Clear();
}
const ::ru::mail::go::sugg::indexer::Clicks_Click& Clicks::click(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Clicks.click)
  return click_.Get(index);
}
::ru::mail::go::sugg::indexer::Clicks_Click* Clicks::mutable_click(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.Clicks.click)
  return click_.Mutable(index);
}
::ru::mail::go::sugg::indexer::Clicks_Click* Clicks::add_click() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.Clicks.click)
  return click_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Clicks_Click >*
Clicks::mutable_click() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.Clicks.click)
  return &click_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Clicks_Click >&
Clicks::click() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.Clicks.click)
  return click_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query::kQueryFieldNumber;
const int Query::kUniqsFieldNumber;
const int Query::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query::Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.Query)
}
Query::Query(const Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  ::memcpy(&uniqs_, &from.uniqs_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&uniqs_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.Query)
}

void Query::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uniqs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&uniqs_)) + sizeof(type_));
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Query& Query::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

Query* Query::New(::google::protobuf::Arena* arena) const {
  Query* n = new Query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_query()) {
    GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&uniqs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&uniqs_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.Query.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uniqs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uniqs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.sugg.indexer.Query.QType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::sugg::indexer::Query_QType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::sugg::indexer::Query_QType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.Query.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // required uint32 uniqs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uniqs(), output);
  }

  // required .ru.mail.go.sugg.indexer.Query.QType type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.Query)
}

::google::protobuf::uint8* Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.Query.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required uint32 uniqs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uniqs(), target);
  }

  // required .ru.mail.go.sugg.indexer.Query.QType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.Query)
  return target;
}

size_t Query::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.sugg.indexer.Query)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_uniqs()) {
    // required uint32 uniqs = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uniqs());
  }

  if (has_type()) {
    // required .ru.mail.go.sugg.indexer.Query.QType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required uint32 uniqs = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uniqs());

    // required .ru.mail.go.sugg.indexer.Query.QType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      uniqs_ = from.uniqs_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  using std::swap;
  query_.Swap(&other->query_);
  swap(uniqs_, other->uniqs_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Query

// required string query = 1;
bool Query::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Query::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void Query::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void Query::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& Query::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Query.query)
  return query_.GetNoArena();
}
void Query::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Query.query)
}
#if LANG_CXX11
void Query::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.Query.query)
}
#endif
void Query::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.Query.query)
}
void Query::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.Query.query)
}
::std::string* Query::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.Query.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Query::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.Query.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Query::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.Query.query)
}

// required uint32 uniqs = 2;
bool Query::has_uniqs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Query::set_has_uniqs() {
  _has_bits_[0] |= 0x00000002u;
}
void Query::clear_has_uniqs() {
  _has_bits_[0] &= ~0x00000002u;
}
void Query::clear_uniqs() {
  uniqs_ = 0u;
  clear_has_uniqs();
}
::google::protobuf::uint32 Query::uniqs() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Query.uniqs)
  return uniqs_;
}
void Query::set_uniqs(::google::protobuf::uint32 value) {
  set_has_uniqs();
  uniqs_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Query.uniqs)
}

// required .ru.mail.go.sugg.indexer.Query.QType type = 3;
bool Query::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Query::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Query::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Query::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::sugg::indexer::Query_QType Query::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.Query.type)
  return static_cast< ::ru::mail::go::sugg::indexer::Query_QType >(type_);
}
void Query::set_type(::ru::mail::go::sugg::indexer::Query_QType value) {
  assert(::ru::mail::go::sugg::indexer::Query_QType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.Query.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpcFix::kTypeFieldNumber;
const int SpcFix::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpcFix::SpcFix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SpcFix)
}
SpcFix::SpcFix(const SpcFix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SpcFix)
}

void SpcFix::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
}

SpcFix::~SpcFix() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SpcFix)
  SharedDtor();
}

void SpcFix::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpcFix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpcFix::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpcFix& SpcFix::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpcFix* SpcFix::New(::google::protobuf::Arena* arena) const {
  SpcFix* n = new SpcFix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpcFix::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SpcFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*type_.UnsafeRawStringPointer())->clear();
  }
  num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpcFix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SpcFix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SpcFix.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SpcFix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SpcFix)
  return false;
#undef DO_
}

void SpcFix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SpcFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SpcFix.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required uint32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SpcFix)
}

::google::protobuf::uint8* SpcFix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SpcFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SpcFix.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required uint32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SpcFix)
  return target;
}

size_t SpcFix::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.sugg.indexer.SpcFix)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_num()) {
    // required uint32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  return total_size;
}
size_t SpcFix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SpcFix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required uint32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpcFix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SpcFix)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcFix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpcFix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SpcFix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SpcFix)
    MergeFrom(*source);
  }
}

void SpcFix::MergeFrom(const SpcFix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SpcFix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpcFix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SpcFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcFix::CopyFrom(const SpcFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SpcFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcFix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SpcFix::Swap(SpcFix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpcFix::InternalSwap(SpcFix* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpcFix::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpcFix

// required string type = 1;
bool SpcFix::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpcFix::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SpcFix::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpcFix::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& SpcFix::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SpcFix.type)
  return type_.GetNoArena();
}
void SpcFix::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SpcFix.type)
}
#if LANG_CXX11
void SpcFix::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SpcFix.type)
}
#endif
void SpcFix::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SpcFix.type)
}
void SpcFix::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SpcFix.type)
}
::std::string* SpcFix::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SpcFix.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpcFix::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SpcFix.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpcFix::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SpcFix.type)
}

// required uint32 num = 2;
bool SpcFix::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpcFix::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void SpcFix::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpcFix::clear_num() {
  num_ = 0u;
  clear_has_num();
}
::google::protobuf::uint32 SpcFix::num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SpcFix.num)
  return num_;
}
void SpcFix::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SpcFix.num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RichObjStat::kTypeFieldNumber;
const int RichObjStat::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RichObjStat::RichObjStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.RichObjStat)
}
RichObjStat::RichObjStat(const RichObjStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.RichObjStat)
}

void RichObjStat::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
}

RichObjStat::~RichObjStat() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.RichObjStat)
  SharedDtor();
}

void RichObjStat::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RichObjStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RichObjStat::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RichObjStat& RichObjStat::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

RichObjStat* RichObjStat::New(::google::protobuf::Arena* arena) const {
  RichObjStat* n = new RichObjStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RichObjStat::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.RichObjStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*type_.UnsafeRawStringPointer())->clear();
  }
  num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RichObjStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.RichObjStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.RichObjStat.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.RichObjStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.RichObjStat)
  return false;
#undef DO_
}

void RichObjStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.RichObjStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.RichObjStat.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required uint32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.RichObjStat)
}

::google::protobuf::uint8* RichObjStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.RichObjStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.RichObjStat.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required uint32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.RichObjStat)
  return target;
}

size_t RichObjStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.sugg.indexer.RichObjStat)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_num()) {
    // required uint32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  return total_size;
}
size_t RichObjStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.RichObjStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required uint32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RichObjStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.RichObjStat)
  GOOGLE_DCHECK_NE(&from, this);
  const RichObjStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RichObjStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.RichObjStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.RichObjStat)
    MergeFrom(*source);
  }
}

void RichObjStat::MergeFrom(const RichObjStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.RichObjStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RichObjStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.RichObjStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RichObjStat::CopyFrom(const RichObjStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.RichObjStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichObjStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RichObjStat::Swap(RichObjStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RichObjStat::InternalSwap(RichObjStat* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RichObjStat::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RichObjStat

// required string type = 1;
bool RichObjStat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RichObjStat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void RichObjStat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void RichObjStat::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& RichObjStat::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.RichObjStat.type)
  return type_.GetNoArena();
}
void RichObjStat::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.RichObjStat.type)
}
#if LANG_CXX11
void RichObjStat::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.RichObjStat.type)
}
#endif
void RichObjStat::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.RichObjStat.type)
}
void RichObjStat::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.RichObjStat.type)
}
::std::string* RichObjStat::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.RichObjStat.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RichObjStat::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.RichObjStat.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RichObjStat::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.RichObjStat.type)
}

// required uint32 num = 2;
bool RichObjStat::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RichObjStat::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void RichObjStat::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void RichObjStat::clear_num() {
  num_ = 0u;
  clear_has_num();
}
::google::protobuf::uint32 RichObjStat::num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.RichObjStat.num)
  return num_;
}
void RichObjStat::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.RichObjStat.num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggJobData::kVerticalFieldNumber;
const int SuggJobData::kQueryNormalizedFieldNumber;
const int SuggJobData::kGeoFieldNumber;
const int SuggJobData::kRefererFieldNumber;
const int SuggJobData::kTimeStampMinFieldNumber;
const int SuggJobData::kTimeStampMaxFieldNumber;
const int SuggJobData::kTimeStampSummFieldNumber;
const int SuggJobData::kUniqsUpperFieldNumber;
const int SuggJobData::kUniqsRobotFieldNumber;
const int SuggJobData::kUniqsLowerFieldNumber;
const int SuggJobData::kQueriesFieldNumber;
const int SuggJobData::kPornoProbFieldNumber;
const int SuggJobData::kNumPornoProbHighFieldNumber;
const int SuggJobData::kNumPornoProbLowFieldNumber;
const int SuggJobData::kNumSessionsFieldNumber;
const int SuggJobData::kNumPornoFieldNumber;
const int SuggJobData::kNumRobotFieldNumber;
const int SuggJobData::kNumMusicFieldNumber;
const int SuggJobData::kNumFromSuggFieldNumber;
const int SuggJobData::kNumSerpClicksFieldNumber;
const int SuggJobData::kNumSpcBannedFieldNumber;
const int SuggJobData::kSummSerpCountFieldNumber;
const int SuggJobData::kSummSerpCountSessionsFieldNumber;
const int SuggJobData::kDateTimeFieldNumber;
const int SuggJobData::kFreshnessFieldNumber;
const int SuggJobData::kRichObjsFieldNumber;
const int SuggJobData::kRichObjsStatFieldNumber;
const int SuggJobData::kSpcFixStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggJobData::SuggJobData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggJobData)
}
SuggJobData::SuggJobData(const SuggJobData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      queries_(from.queries_),
      richobjs_(from.richobjs_),
      richobjsstat_(from.richobjsstat_),
      spcfixstat_(from.spcfixstat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vertical_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vertical()) {
    vertical_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertical_);
  }
  querynormalized_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_querynormalized()) {
    querynormalized_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.querynormalized_);
  }
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referer()) {
    referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  if (from.has_uniqslower()) {
    uniqslower_ = new ::ru::mail::go::webbase::SputnikRanker::UserRankValues(*from.uniqslower_);
  } else {
    uniqslower_ = NULL;
  }
  ::memcpy(&timestampmin_, &from.timestampmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&numpornoproblow_) -
    reinterpret_cast<char*>(&timestampmin_)) + sizeof(numpornoproblow_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggJobData)
}

void SuggJobData::SharedCtor() {
  _cached_size_ = 0;
  vertical_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  querynormalized_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uniqslower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numpornoproblow_) -
      reinterpret_cast<char*>(&uniqslower_)) + sizeof(numpornoproblow_));
}

SuggJobData::~SuggJobData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggJobData)
  SharedDtor();
}

void SuggJobData::SharedDtor() {
  vertical_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  querynormalized_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uniqslower_;
}

void SuggJobData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggJobData::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggJobData& SuggJobData::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggJobData* SuggJobData::New(::google::protobuf::Arena* arena) const {
  SuggJobData* n = new SuggJobData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggJobData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggJobData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  richobjs_.Clear();
  richobjsstat_.Clear();
  spcfixstat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!vertical_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vertical_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!querynormalized_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*querynormalized_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!referer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*referer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(uniqslower_ != NULL);
      uniqslower_->::ru::mail::go::webbase::SputnikRanker::UserRankValues::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&timestampmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uniqsupper_) -
        reinterpret_cast<char*>(&timestampmin_)) + sizeof(uniqsupper_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&timestampsumm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&summserpcount_) -
        reinterpret_cast<char*>(&timestampsumm_)) + sizeof(summserpcount_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&summserpcountsessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numpornoproblow_) -
        reinterpret_cast<char*>(&summserpcountsessions_)) + sizeof(numpornoproblow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggJobData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggJobData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vertical = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vertical()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vertical().data(), static_cast<int>(this->vertical().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggJobData.vertical");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string queryNormalized = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_querynormalized()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->querynormalized().data(), static_cast<int>(this->querynormalized().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggJobData.queryNormalized");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 geo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timeStampMin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestampmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timeStampMax = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timestampmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timeStampSumm = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timestampsumm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampsumm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uniqsUpper = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_uniqsupper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqsupper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues uniqsLower = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uniqslower()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.Query queries = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numSessions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_numsessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numsessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numPorno = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_numporno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numporno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numRobot = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_numrobot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numrobot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numMusic = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_nummusic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nummusic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numFromSugg = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_numfromsugg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numfromsugg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numSerpClicks = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_numserpclicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numserpclicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numSpcBanned = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_numspcbanned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numspcbanned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 summSerpCount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_summserpcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &summserpcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 summSerpCountSessions = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_summserpcountsessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &summserpcountsessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dateTime = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double freshness = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_freshness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freshness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uniqsRobot = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_uniqsrobot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqsrobot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string richObjs = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_richobjs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->richobjs(this->richobjs_size() - 1).data(),
            static_cast<int>(this->richobjs(this->richobjs_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggJobData.richObjs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.RichObjStat richObjsStat = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_richobjsstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.SpcFix spcFixStat = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spcfixstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string referer = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referer().data(), static_cast<int>(this->referer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggJobData.referer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pornoProb = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_pornoprob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pornoprob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numPornoProbHigh = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_numpornoprobhigh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numpornoprobhigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numPornoProbLow = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_numpornoproblow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numpornoproblow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggJobData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggJobData)
  return false;
#undef DO_
}

void SuggJobData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggJobData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vertical = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vertical().data(), static_cast<int>(this->vertical().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggJobData.vertical");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vertical(), output);
  }

  // optional string queryNormalized = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->querynormalized().data(), static_cast<int>(this->querynormalized().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggJobData.queryNormalized");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->querynormalized(), output);
  }

  // optional uint32 geo = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->geo(), output);
  }

  // optional uint64 timeStampMin = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestampmin(), output);
  }

  // optional uint64 timeStampMax = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestampmax(), output);
  }

  // optional uint64 timeStampSumm = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestampsumm(), output);
  }

  // optional uint32 uniqsUpper = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uniqsupper(), output);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues uniqsLower = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->uniqslower_, output);
  }

  // repeated .ru.mail.go.sugg.indexer.Query queries = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->queries(static_cast<int>(i)), output);
  }

  // optional uint32 numSessions = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->numsessions(), output);
  }

  // optional uint32 numPorno = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->numporno(), output);
  }

  // optional uint32 numRobot = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->numrobot(), output);
  }

  // optional uint32 numMusic = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nummusic(), output);
  }

  // optional uint32 numFromSugg = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->numfromsugg(), output);
  }

  // optional uint32 numSerpClicks = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->numserpclicks(), output);
  }

  // optional uint32 numSpcBanned = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->numspcbanned(), output);
  }

  // optional uint64 summSerpCount = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->summserpcount(), output);
  }

  // optional uint64 summSerpCountSessions = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->summserpcountsessions(), output);
  }

  // optional uint64 dateTime = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->datetime(), output);
  }

  // optional double freshness = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->freshness(), output);
  }

  // optional uint32 uniqsRobot = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->uniqsrobot(), output);
  }

  // repeated string richObjs = 22;
  for (int i = 0, n = this->richobjs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->richobjs(i).data(), static_cast<int>(this->richobjs(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggJobData.richObjs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->richobjs(i), output);
  }

  // repeated .ru.mail.go.sugg.indexer.RichObjStat richObjsStat = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->richobjsstat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->richobjsstat(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.sugg.indexer.SpcFix spcFixStat = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spcfixstat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->spcfixstat(static_cast<int>(i)), output);
  }

  // optional string referer = 25;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referer().data(), static_cast<int>(this->referer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggJobData.referer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->referer(), output);
  }

  // optional double pornoProb = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->pornoprob(), output);
  }

  // optional uint32 numPornoProbHigh = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->numpornoprobhigh(), output);
  }

  // optional uint32 numPornoProbLow = 28;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->numpornoproblow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggJobData)
}

::google::protobuf::uint8* SuggJobData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggJobData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vertical = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vertical().data(), static_cast<int>(this->vertical().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggJobData.vertical");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vertical(), target);
  }

  // optional string queryNormalized = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->querynormalized().data(), static_cast<int>(this->querynormalized().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggJobData.queryNormalized");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->querynormalized(), target);
  }

  // optional uint32 geo = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->geo(), target);
  }

  // optional uint64 timeStampMin = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestampmin(), target);
  }

  // optional uint64 timeStampMax = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestampmax(), target);
  }

  // optional uint64 timeStampSumm = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestampsumm(), target);
  }

  // optional uint32 uniqsUpper = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uniqsupper(), target);
  }

  // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues uniqsLower = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->uniqslower_, deterministic, target);
  }

  // repeated .ru.mail.go.sugg.indexer.Query queries = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->queries(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 numSessions = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->numsessions(), target);
  }

  // optional uint32 numPorno = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->numporno(), target);
  }

  // optional uint32 numRobot = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->numrobot(), target);
  }

  // optional uint32 numMusic = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nummusic(), target);
  }

  // optional uint32 numFromSugg = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->numfromsugg(), target);
  }

  // optional uint32 numSerpClicks = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->numserpclicks(), target);
  }

  // optional uint32 numSpcBanned = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->numspcbanned(), target);
  }

  // optional uint64 summSerpCount = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->summserpcount(), target);
  }

  // optional uint64 summSerpCountSessions = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->summserpcountsessions(), target);
  }

  // optional uint64 dateTime = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->datetime(), target);
  }

  // optional double freshness = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->freshness(), target);
  }

  // optional uint32 uniqsRobot = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->uniqsrobot(), target);
  }

  // repeated string richObjs = 22;
  for (int i = 0, n = this->richobjs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->richobjs(i).data(), static_cast<int>(this->richobjs(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggJobData.richObjs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->richobjs(i), target);
  }

  // repeated .ru.mail.go.sugg.indexer.RichObjStat richObjsStat = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->richobjsstat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->richobjsstat(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.sugg.indexer.SpcFix spcFixStat = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spcfixstat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->spcfixstat(static_cast<int>(i)), deterministic, target);
  }

  // optional string referer = 25;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referer().data(), static_cast<int>(this->referer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggJobData.referer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->referer(), target);
  }

  // optional double pornoProb = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->pornoprob(), target);
  }

  // optional uint32 numPornoProbHigh = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->numpornoprobhigh(), target);
  }

  // optional uint32 numPornoProbLow = 28;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->numpornoproblow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggJobData)
  return target;
}

size_t SuggJobData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggJobData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.sugg.indexer.Query queries = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queries(static_cast<int>(i)));
    }
  }

  // repeated string richObjs = 22;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->richobjs_size());
  for (int i = 0, n = this->richobjs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->richobjs(i));
  }

  // repeated .ru.mail.go.sugg.indexer.RichObjStat richObjsStat = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->richobjsstat_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->richobjsstat(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.sugg.indexer.SpcFix spcFixStat = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->spcfixstat_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spcfixstat(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string vertical = 1;
    if (has_vertical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vertical());
    }

    // optional string queryNormalized = 2;
    if (has_querynormalized()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->querynormalized());
    }

    // optional string referer = 25;
    if (has_referer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referer());
    }

    // optional .ru.mail.go.webbase.SputnikRanker.UserRankValues uniqsLower = 8;
    if (has_uniqslower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uniqslower_);
    }

    // optional uint64 timeStampMin = 4;
    if (has_timestampmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestampmin());
    }

    // optional uint64 timeStampMax = 5;
    if (has_timestampmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestampmax());
    }

    // optional uint32 geo = 3;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->geo());
    }

    // optional uint32 uniqsUpper = 7;
    if (has_uniqsupper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqsupper());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 timeStampSumm = 6;
    if (has_timestampsumm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestampsumm());
    }

    // optional uint32 numSessions = 10;
    if (has_numsessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numsessions());
    }

    // optional uint32 numPorno = 11;
    if (has_numporno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numporno());
    }

    // optional uint32 numRobot = 12;
    if (has_numrobot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numrobot());
    }

    // optional uint32 numMusic = 13;
    if (has_nummusic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nummusic());
    }

    // optional uint32 numFromSugg = 14;
    if (has_numfromsugg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numfromsugg());
    }

    // optional uint32 numSerpClicks = 15;
    if (has_numserpclicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numserpclicks());
    }

    // optional uint64 summSerpCount = 17;
    if (has_summserpcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->summserpcount());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint64 summSerpCountSessions = 18;
    if (has_summserpcountsessions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->summserpcountsessions());
    }

    // optional uint32 numSpcBanned = 16;
    if (has_numspcbanned()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numspcbanned());
    }

    // optional uint32 uniqsRobot = 21;
    if (has_uniqsrobot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqsrobot());
    }

    // optional uint64 dateTime = 19;
    if (has_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datetime());
    }

    // optional double freshness = 20;
    if (has_freshness()) {
      total_size += 2 + 8;
    }

    // optional double pornoProb = 26;
    if (has_pornoprob()) {
      total_size += 2 + 8;
    }

    // optional uint32 numPornoProbHigh = 27;
    if (has_numpornoprobhigh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numpornoprobhigh());
    }

    // optional uint32 numPornoProbLow = 28;
    if (has_numpornoproblow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numpornoproblow());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggJobData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggJobData)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggJobData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggJobData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggJobData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggJobData)
    MergeFrom(*source);
  }
}

void SuggJobData::MergeFrom(const SuggJobData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggJobData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  richobjs_.MergeFrom(from.richobjs_);
  richobjsstat_.MergeFrom(from.richobjsstat_);
  spcfixstat_.MergeFrom(from.spcfixstat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vertical();
      vertical_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertical_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_querynormalized();
      querynormalized_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.querynormalized_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_referer();
      referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_uniqslower()->::ru::mail::go::webbase::SputnikRanker::UserRankValues::MergeFrom(from.uniqslower());
    }
    if (cached_has_bits & 0x00000010u) {
      timestampmin_ = from.timestampmin_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestampmax_ = from.timestampmax_;
    }
    if (cached_has_bits & 0x00000040u) {
      geo_ = from.geo_;
    }
    if (cached_has_bits & 0x00000080u) {
      uniqsupper_ = from.uniqsupper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      timestampsumm_ = from.timestampsumm_;
    }
    if (cached_has_bits & 0x00000200u) {
      numsessions_ = from.numsessions_;
    }
    if (cached_has_bits & 0x00000400u) {
      numporno_ = from.numporno_;
    }
    if (cached_has_bits & 0x00000800u) {
      numrobot_ = from.numrobot_;
    }
    if (cached_has_bits & 0x00001000u) {
      nummusic_ = from.nummusic_;
    }
    if (cached_has_bits & 0x00002000u) {
      numfromsugg_ = from.numfromsugg_;
    }
    if (cached_has_bits & 0x00004000u) {
      numserpclicks_ = from.numserpclicks_;
    }
    if (cached_has_bits & 0x00008000u) {
      summserpcount_ = from.summserpcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      summserpcountsessions_ = from.summserpcountsessions_;
    }
    if (cached_has_bits & 0x00020000u) {
      numspcbanned_ = from.numspcbanned_;
    }
    if (cached_has_bits & 0x00040000u) {
      uniqsrobot_ = from.uniqsrobot_;
    }
    if (cached_has_bits & 0x00080000u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00100000u) {
      freshness_ = from.freshness_;
    }
    if (cached_has_bits & 0x00200000u) {
      pornoprob_ = from.pornoprob_;
    }
    if (cached_has_bits & 0x00400000u) {
      numpornoprobhigh_ = from.numpornoprobhigh_;
    }
    if (cached_has_bits & 0x00800000u) {
      numpornoproblow_ = from.numpornoproblow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggJobData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggJobData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggJobData::CopyFrom(const SuggJobData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggJobData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggJobData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->queries())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->richobjsstat())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->spcfixstat())) return false;
  if (has_uniqslower()) {
    if (!this->uniqslower_->IsInitialized()) return false;
  }
  return true;
}

void SuggJobData::Swap(SuggJobData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggJobData::InternalSwap(SuggJobData* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  richobjs_.InternalSwap(&other->richobjs_);
  richobjsstat_.InternalSwap(&other->richobjsstat_);
  spcfixstat_.InternalSwap(&other->spcfixstat_);
  vertical_.Swap(&other->vertical_);
  querynormalized_.Swap(&other->querynormalized_);
  referer_.Swap(&other->referer_);
  swap(uniqslower_, other->uniqslower_);
  swap(timestampmin_, other->timestampmin_);
  swap(timestampmax_, other->timestampmax_);
  swap(geo_, other->geo_);
  swap(uniqsupper_, other->uniqsupper_);
  swap(timestampsumm_, other->timestampsumm_);
  swap(numsessions_, other->numsessions_);
  swap(numporno_, other->numporno_);
  swap(numrobot_, other->numrobot_);
  swap(nummusic_, other->nummusic_);
  swap(numfromsugg_, other->numfromsugg_);
  swap(numserpclicks_, other->numserpclicks_);
  swap(summserpcount_, other->summserpcount_);
  swap(summserpcountsessions_, other->summserpcountsessions_);
  swap(numspcbanned_, other->numspcbanned_);
  swap(uniqsrobot_, other->uniqsrobot_);
  swap(datetime_, other->datetime_);
  swap(freshness_, other->freshness_);
  swap(pornoprob_, other->pornoprob_);
  swap(numpornoprobhigh_, other->numpornoprobhigh_);
  swap(numpornoproblow_, other->numpornoproblow_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggJobData::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggJobData

// optional string vertical = 1;
bool SuggJobData::has_vertical() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggJobData::set_has_vertical() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggJobData::clear_has_vertical() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggJobData::clear_vertical() {
  vertical_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vertical();
}
const ::std::string& SuggJobData::vertical() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.vertical)
  return vertical_.GetNoArena();
}
void SuggJobData::set_vertical(const ::std::string& value) {
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}
#if LANG_CXX11
void SuggJobData::set_vertical(::std::string&& value) {
  set_has_vertical();
  vertical_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}
#endif
void SuggJobData::set_vertical(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}
void SuggJobData::set_vertical(const char* value, size_t size) {
  set_has_vertical();
  vertical_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}
::std::string* SuggJobData::mutable_vertical() {
  set_has_vertical();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.vertical)
  return vertical_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggJobData::release_vertical() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggJobData.vertical)
  clear_has_vertical();
  return vertical_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggJobData::set_allocated_vertical(::std::string* vertical) {
  if (vertical != NULL) {
    set_has_vertical();
  } else {
    clear_has_vertical();
  }
  vertical_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertical);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggJobData.vertical)
}

// optional string queryNormalized = 2;
bool SuggJobData::has_querynormalized() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggJobData::set_has_querynormalized() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggJobData::clear_has_querynormalized() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggJobData::clear_querynormalized() {
  querynormalized_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_querynormalized();
}
const ::std::string& SuggJobData::querynormalized() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
  return querynormalized_.GetNoArena();
}
void SuggJobData::set_querynormalized(const ::std::string& value) {
  set_has_querynormalized();
  querynormalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}
#if LANG_CXX11
void SuggJobData::set_querynormalized(::std::string&& value) {
  set_has_querynormalized();
  querynormalized_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}
#endif
void SuggJobData::set_querynormalized(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_querynormalized();
  querynormalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}
void SuggJobData::set_querynormalized(const char* value, size_t size) {
  set_has_querynormalized();
  querynormalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}
::std::string* SuggJobData::mutable_querynormalized() {
  set_has_querynormalized();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
  return querynormalized_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggJobData::release_querynormalized() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
  clear_has_querynormalized();
  return querynormalized_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggJobData::set_allocated_querynormalized(::std::string* querynormalized) {
  if (querynormalized != NULL) {
    set_has_querynormalized();
  } else {
    clear_has_querynormalized();
  }
  querynormalized_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), querynormalized);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggJobData.queryNormalized)
}

// optional uint32 geo = 3;
bool SuggJobData::has_geo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SuggJobData::set_has_geo() {
  _has_bits_[0] |= 0x00000040u;
}
void SuggJobData::clear_has_geo() {
  _has_bits_[0] &= ~0x00000040u;
}
void SuggJobData::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
::google::protobuf::uint32 SuggJobData::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.geo)
  return geo_;
}
void SuggJobData::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.geo)
}

// optional string referer = 25;
bool SuggJobData::has_referer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggJobData::set_has_referer() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggJobData::clear_has_referer() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggJobData::clear_referer() {
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referer();
}
const ::std::string& SuggJobData::referer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.referer)
  return referer_.GetNoArena();
}
void SuggJobData::set_referer(const ::std::string& value) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.referer)
}
#if LANG_CXX11
void SuggJobData::set_referer(::std::string&& value) {
  set_has_referer();
  referer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggJobData.referer)
}
#endif
void SuggJobData::set_referer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggJobData.referer)
}
void SuggJobData::set_referer(const char* value, size_t size) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggJobData.referer)
}
::std::string* SuggJobData::mutable_referer() {
  set_has_referer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.referer)
  return referer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggJobData::release_referer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggJobData.referer)
  clear_has_referer();
  return referer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggJobData::set_allocated_referer(::std::string* referer) {
  if (referer != NULL) {
    set_has_referer();
  } else {
    clear_has_referer();
  }
  referer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggJobData.referer)
}

// optional uint64 timeStampMin = 4;
bool SuggJobData::has_timestampmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SuggJobData::set_has_timestampmin() {
  _has_bits_[0] |= 0x00000010u;
}
void SuggJobData::clear_has_timestampmin() {
  _has_bits_[0] &= ~0x00000010u;
}
void SuggJobData::clear_timestampmin() {
  timestampmin_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampmin();
}
::google::protobuf::uint64 SuggJobData::timestampmin() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.timeStampMin)
  return timestampmin_;
}
void SuggJobData::set_timestampmin(::google::protobuf::uint64 value) {
  set_has_timestampmin();
  timestampmin_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.timeStampMin)
}

// optional uint64 timeStampMax = 5;
bool SuggJobData::has_timestampmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SuggJobData::set_has_timestampmax() {
  _has_bits_[0] |= 0x00000020u;
}
void SuggJobData::clear_has_timestampmax() {
  _has_bits_[0] &= ~0x00000020u;
}
void SuggJobData::clear_timestampmax() {
  timestampmax_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampmax();
}
::google::protobuf::uint64 SuggJobData::timestampmax() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.timeStampMax)
  return timestampmax_;
}
void SuggJobData::set_timestampmax(::google::protobuf::uint64 value) {
  set_has_timestampmax();
  timestampmax_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.timeStampMax)
}

// optional uint64 timeStampSumm = 6;
bool SuggJobData::has_timestampsumm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SuggJobData::set_has_timestampsumm() {
  _has_bits_[0] |= 0x00000100u;
}
void SuggJobData::clear_has_timestampsumm() {
  _has_bits_[0] &= ~0x00000100u;
}
void SuggJobData::clear_timestampsumm() {
  timestampsumm_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampsumm();
}
::google::protobuf::uint64 SuggJobData::timestampsumm() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.timeStampSumm)
  return timestampsumm_;
}
void SuggJobData::set_timestampsumm(::google::protobuf::uint64 value) {
  set_has_timestampsumm();
  timestampsumm_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.timeStampSumm)
}

// optional uint32 uniqsUpper = 7;
bool SuggJobData::has_uniqsupper() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SuggJobData::set_has_uniqsupper() {
  _has_bits_[0] |= 0x00000080u;
}
void SuggJobData::clear_has_uniqsupper() {
  _has_bits_[0] &= ~0x00000080u;
}
void SuggJobData::clear_uniqsupper() {
  uniqsupper_ = 0u;
  clear_has_uniqsupper();
}
::google::protobuf::uint32 SuggJobData::uniqsupper() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.uniqsUpper)
  return uniqsupper_;
}
void SuggJobData::set_uniqsupper(::google::protobuf::uint32 value) {
  set_has_uniqsupper();
  uniqsupper_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.uniqsUpper)
}

// optional uint32 uniqsRobot = 21;
bool SuggJobData::has_uniqsrobot() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SuggJobData::set_has_uniqsrobot() {
  _has_bits_[0] |= 0x00040000u;
}
void SuggJobData::clear_has_uniqsrobot() {
  _has_bits_[0] &= ~0x00040000u;
}
void SuggJobData::clear_uniqsrobot() {
  uniqsrobot_ = 0u;
  clear_has_uniqsrobot();
}
::google::protobuf::uint32 SuggJobData::uniqsrobot() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.uniqsRobot)
  return uniqsrobot_;
}
void SuggJobData::set_uniqsrobot(::google::protobuf::uint32 value) {
  set_has_uniqsrobot();
  uniqsrobot_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.uniqsRobot)
}

// optional .ru.mail.go.webbase.SputnikRanker.UserRankValues uniqsLower = 8;
bool SuggJobData::has_uniqslower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SuggJobData::set_has_uniqslower() {
  _has_bits_[0] |= 0x00000008u;
}
void SuggJobData::clear_has_uniqslower() {
  _has_bits_[0] &= ~0x00000008u;
}
void SuggJobData::clear_uniqslower() {
  if (uniqslower_ != NULL) uniqslower_->::ru::mail::go::webbase::SputnikRanker::UserRankValues::Clear();
  clear_has_uniqslower();
}
const ::ru::mail::go::webbase::SputnikRanker::UserRankValues& SuggJobData::uniqslower() const {
  const ::ru::mail::go::webbase::SputnikRanker::UserRankValues* p = uniqslower_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.uniqsLower)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::SputnikRanker::UserRankValues*>(
      &::ru::mail::go::webbase::SputnikRanker::_UserRankValues_default_instance_);
}
::ru::mail::go::webbase::SputnikRanker::UserRankValues* SuggJobData::mutable_uniqslower() {
  set_has_uniqslower();
  if (uniqslower_ == NULL) {
    uniqslower_ = new ::ru::mail::go::webbase::SputnikRanker::UserRankValues;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.uniqsLower)
  return uniqslower_;
}
::ru::mail::go::webbase::SputnikRanker::UserRankValues* SuggJobData::release_uniqslower() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggJobData.uniqsLower)
  clear_has_uniqslower();
  ::ru::mail::go::webbase::SputnikRanker::UserRankValues* temp = uniqslower_;
  uniqslower_ = NULL;
  return temp;
}
void SuggJobData::set_allocated_uniqslower(::ru::mail::go::webbase::SputnikRanker::UserRankValues* uniqslower) {
  delete uniqslower_;
  uniqslower_ = uniqslower;
  if (uniqslower) {
    set_has_uniqslower();
  } else {
    clear_has_uniqslower();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggJobData.uniqsLower)
}

// repeated .ru.mail.go.sugg.indexer.Query queries = 9;
int SuggJobData::queries_size() const {
  return queries_.size();
}
void SuggJobData::clear_queries() {
  queries_.Clear();
}
const ::ru::mail::go::sugg::indexer::Query& SuggJobData::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return queries_.Get(index);
}
::ru::mail::go::sugg::indexer::Query* SuggJobData::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return queries_.Mutable(index);
}
::ru::mail::go::sugg::indexer::Query* SuggJobData::add_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Query >*
SuggJobData::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return &queries_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::Query >&
SuggJobData::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggJobData.queries)
  return queries_;
}

// optional double pornoProb = 26;
bool SuggJobData::has_pornoprob() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SuggJobData::set_has_pornoprob() {
  _has_bits_[0] |= 0x00200000u;
}
void SuggJobData::clear_has_pornoprob() {
  _has_bits_[0] &= ~0x00200000u;
}
void SuggJobData::clear_pornoprob() {
  pornoprob_ = 0;
  clear_has_pornoprob();
}
double SuggJobData::pornoprob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.pornoProb)
  return pornoprob_;
}
void SuggJobData::set_pornoprob(double value) {
  set_has_pornoprob();
  pornoprob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.pornoProb)
}

// optional uint32 numPornoProbHigh = 27;
bool SuggJobData::has_numpornoprobhigh() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SuggJobData::set_has_numpornoprobhigh() {
  _has_bits_[0] |= 0x00400000u;
}
void SuggJobData::clear_has_numpornoprobhigh() {
  _has_bits_[0] &= ~0x00400000u;
}
void SuggJobData::clear_numpornoprobhigh() {
  numpornoprobhigh_ = 0u;
  clear_has_numpornoprobhigh();
}
::google::protobuf::uint32 SuggJobData::numpornoprobhigh() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numPornoProbHigh)
  return numpornoprobhigh_;
}
void SuggJobData::set_numpornoprobhigh(::google::protobuf::uint32 value) {
  set_has_numpornoprobhigh();
  numpornoprobhigh_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numPornoProbHigh)
}

// optional uint32 numPornoProbLow = 28;
bool SuggJobData::has_numpornoproblow() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SuggJobData::set_has_numpornoproblow() {
  _has_bits_[0] |= 0x00800000u;
}
void SuggJobData::clear_has_numpornoproblow() {
  _has_bits_[0] &= ~0x00800000u;
}
void SuggJobData::clear_numpornoproblow() {
  numpornoproblow_ = 0u;
  clear_has_numpornoproblow();
}
::google::protobuf::uint32 SuggJobData::numpornoproblow() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numPornoProbLow)
  return numpornoproblow_;
}
void SuggJobData::set_numpornoproblow(::google::protobuf::uint32 value) {
  set_has_numpornoproblow();
  numpornoproblow_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numPornoProbLow)
}

// optional uint32 numSessions = 10;
bool SuggJobData::has_numsessions() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SuggJobData::set_has_numsessions() {
  _has_bits_[0] |= 0x00000200u;
}
void SuggJobData::clear_has_numsessions() {
  _has_bits_[0] &= ~0x00000200u;
}
void SuggJobData::clear_numsessions() {
  numsessions_ = 0u;
  clear_has_numsessions();
}
::google::protobuf::uint32 SuggJobData::numsessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numSessions)
  return numsessions_;
}
void SuggJobData::set_numsessions(::google::protobuf::uint32 value) {
  set_has_numsessions();
  numsessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numSessions)
}

// optional uint32 numPorno = 11;
bool SuggJobData::has_numporno() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SuggJobData::set_has_numporno() {
  _has_bits_[0] |= 0x00000400u;
}
void SuggJobData::clear_has_numporno() {
  _has_bits_[0] &= ~0x00000400u;
}
void SuggJobData::clear_numporno() {
  numporno_ = 0u;
  clear_has_numporno();
}
::google::protobuf::uint32 SuggJobData::numporno() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numPorno)
  return numporno_;
}
void SuggJobData::set_numporno(::google::protobuf::uint32 value) {
  set_has_numporno();
  numporno_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numPorno)
}

// optional uint32 numRobot = 12;
bool SuggJobData::has_numrobot() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SuggJobData::set_has_numrobot() {
  _has_bits_[0] |= 0x00000800u;
}
void SuggJobData::clear_has_numrobot() {
  _has_bits_[0] &= ~0x00000800u;
}
void SuggJobData::clear_numrobot() {
  numrobot_ = 0u;
  clear_has_numrobot();
}
::google::protobuf::uint32 SuggJobData::numrobot() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numRobot)
  return numrobot_;
}
void SuggJobData::set_numrobot(::google::protobuf::uint32 value) {
  set_has_numrobot();
  numrobot_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numRobot)
}

// optional uint32 numMusic = 13;
bool SuggJobData::has_nummusic() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SuggJobData::set_has_nummusic() {
  _has_bits_[0] |= 0x00001000u;
}
void SuggJobData::clear_has_nummusic() {
  _has_bits_[0] &= ~0x00001000u;
}
void SuggJobData::clear_nummusic() {
  nummusic_ = 0u;
  clear_has_nummusic();
}
::google::protobuf::uint32 SuggJobData::nummusic() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numMusic)
  return nummusic_;
}
void SuggJobData::set_nummusic(::google::protobuf::uint32 value) {
  set_has_nummusic();
  nummusic_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numMusic)
}

// optional uint32 numFromSugg = 14;
bool SuggJobData::has_numfromsugg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SuggJobData::set_has_numfromsugg() {
  _has_bits_[0] |= 0x00002000u;
}
void SuggJobData::clear_has_numfromsugg() {
  _has_bits_[0] &= ~0x00002000u;
}
void SuggJobData::clear_numfromsugg() {
  numfromsugg_ = 0u;
  clear_has_numfromsugg();
}
::google::protobuf::uint32 SuggJobData::numfromsugg() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numFromSugg)
  return numfromsugg_;
}
void SuggJobData::set_numfromsugg(::google::protobuf::uint32 value) {
  set_has_numfromsugg();
  numfromsugg_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numFromSugg)
}

// optional uint32 numSerpClicks = 15;
bool SuggJobData::has_numserpclicks() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SuggJobData::set_has_numserpclicks() {
  _has_bits_[0] |= 0x00004000u;
}
void SuggJobData::clear_has_numserpclicks() {
  _has_bits_[0] &= ~0x00004000u;
}
void SuggJobData::clear_numserpclicks() {
  numserpclicks_ = 0u;
  clear_has_numserpclicks();
}
::google::protobuf::uint32 SuggJobData::numserpclicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numSerpClicks)
  return numserpclicks_;
}
void SuggJobData::set_numserpclicks(::google::protobuf::uint32 value) {
  set_has_numserpclicks();
  numserpclicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numSerpClicks)
}

// optional uint32 numSpcBanned = 16;
bool SuggJobData::has_numspcbanned() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SuggJobData::set_has_numspcbanned() {
  _has_bits_[0] |= 0x00020000u;
}
void SuggJobData::clear_has_numspcbanned() {
  _has_bits_[0] &= ~0x00020000u;
}
void SuggJobData::clear_numspcbanned() {
  numspcbanned_ = 0u;
  clear_has_numspcbanned();
}
::google::protobuf::uint32 SuggJobData::numspcbanned() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.numSpcBanned)
  return numspcbanned_;
}
void SuggJobData::set_numspcbanned(::google::protobuf::uint32 value) {
  set_has_numspcbanned();
  numspcbanned_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.numSpcBanned)
}

// optional uint64 summSerpCount = 17;
bool SuggJobData::has_summserpcount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SuggJobData::set_has_summserpcount() {
  _has_bits_[0] |= 0x00008000u;
}
void SuggJobData::clear_has_summserpcount() {
  _has_bits_[0] &= ~0x00008000u;
}
void SuggJobData::clear_summserpcount() {
  summserpcount_ = GOOGLE_ULONGLONG(0);
  clear_has_summserpcount();
}
::google::protobuf::uint64 SuggJobData::summserpcount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.summSerpCount)
  return summserpcount_;
}
void SuggJobData::set_summserpcount(::google::protobuf::uint64 value) {
  set_has_summserpcount();
  summserpcount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.summSerpCount)
}

// optional uint64 summSerpCountSessions = 18;
bool SuggJobData::has_summserpcountsessions() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SuggJobData::set_has_summserpcountsessions() {
  _has_bits_[0] |= 0x00010000u;
}
void SuggJobData::clear_has_summserpcountsessions() {
  _has_bits_[0] &= ~0x00010000u;
}
void SuggJobData::clear_summserpcountsessions() {
  summserpcountsessions_ = GOOGLE_ULONGLONG(0);
  clear_has_summserpcountsessions();
}
::google::protobuf::uint64 SuggJobData::summserpcountsessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.summSerpCountSessions)
  return summserpcountsessions_;
}
void SuggJobData::set_summserpcountsessions(::google::protobuf::uint64 value) {
  set_has_summserpcountsessions();
  summserpcountsessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.summSerpCountSessions)
}

// optional uint64 dateTime = 19;
bool SuggJobData::has_datetime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SuggJobData::set_has_datetime() {
  _has_bits_[0] |= 0x00080000u;
}
void SuggJobData::clear_has_datetime() {
  _has_bits_[0] &= ~0x00080000u;
}
void SuggJobData::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
}
::google::protobuf::uint64 SuggJobData::datetime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.dateTime)
  return datetime_;
}
void SuggJobData::set_datetime(::google::protobuf::uint64 value) {
  set_has_datetime();
  datetime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.dateTime)
}

// optional double freshness = 20;
bool SuggJobData::has_freshness() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SuggJobData::set_has_freshness() {
  _has_bits_[0] |= 0x00100000u;
}
void SuggJobData::clear_has_freshness() {
  _has_bits_[0] &= ~0x00100000u;
}
void SuggJobData::clear_freshness() {
  freshness_ = 0;
  clear_has_freshness();
}
double SuggJobData::freshness() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.freshness)
  return freshness_;
}
void SuggJobData::set_freshness(double value) {
  set_has_freshness();
  freshness_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.freshness)
}

// repeated string richObjs = 22;
int SuggJobData::richobjs_size() const {
  return richobjs_.size();
}
void SuggJobData::clear_richobjs() {
  richobjs_.Clear();
}
const ::std::string& SuggJobData::richobjs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return richobjs_.Get(index);
}
::std::string* SuggJobData::mutable_richobjs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return richobjs_.Mutable(index);
}
void SuggJobData::set_richobjs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  richobjs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SuggJobData::set_richobjs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  richobjs_.Mutable(index)->assign(std::move(value));
}
#endif
void SuggJobData::set_richobjs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  richobjs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
void SuggJobData::set_richobjs(int index, const char* value, size_t size) {
  richobjs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
::std::string* SuggJobData::add_richobjs() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return richobjs_.Add();
}
void SuggJobData::add_richobjs(const ::std::string& value) {
  richobjs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
#if LANG_CXX11
void SuggJobData::add_richobjs(::std::string&& value) {
  richobjs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
#endif
void SuggJobData::add_richobjs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  richobjs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
void SuggJobData::add_richobjs(const char* value, size_t size) {
  richobjs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SuggJobData::richobjs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return richobjs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SuggJobData::mutable_richobjs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggJobData.richObjs)
  return &richobjs_;
}

// repeated .ru.mail.go.sugg.indexer.RichObjStat richObjsStat = 23;
int SuggJobData::richobjsstat_size() const {
  return richobjsstat_.size();
}
void SuggJobData::clear_richobjsstat() {
  richobjsstat_.Clear();
}
const ::ru::mail::go::sugg::indexer::RichObjStat& SuggJobData::richobjsstat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return richobjsstat_.Get(index);
}
::ru::mail::go::sugg::indexer::RichObjStat* SuggJobData::mutable_richobjsstat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return richobjsstat_.Mutable(index);
}
::ru::mail::go::sugg::indexer::RichObjStat* SuggJobData::add_richobjsstat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return richobjsstat_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::RichObjStat >*
SuggJobData::mutable_richobjsstat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return &richobjsstat_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::RichObjStat >&
SuggJobData::richobjsstat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggJobData.richObjsStat)
  return richobjsstat_;
}

// repeated .ru.mail.go.sugg.indexer.SpcFix spcFixStat = 24;
int SuggJobData::spcfixstat_size() const {
  return spcfixstat_.size();
}
void SuggJobData::clear_spcfixstat() {
  spcfixstat_.Clear();
}
const ::ru::mail::go::sugg::indexer::SpcFix& SuggJobData::spcfixstat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return spcfixstat_.Get(index);
}
::ru::mail::go::sugg::indexer::SpcFix* SuggJobData::mutable_spcfixstat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return spcfixstat_.Mutable(index);
}
::ru::mail::go::sugg::indexer::SpcFix* SuggJobData::add_spcfixstat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return spcfixstat_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SpcFix >*
SuggJobData::mutable_spcfixstat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return &spcfixstat_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SpcFix >&
SuggJobData::spcfixstat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggJobData.spcFixStat)
  return spcfixstat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureEntry::kNameFieldNumber;
const int FeatureEntry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureEntry::FeatureEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.FeatureEntry)
}
FeatureEntry::FeatureEntry(const FeatureEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.FeatureEntry)
}

void FeatureEntry::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

FeatureEntry::~FeatureEntry() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.FeatureEntry)
  SharedDtor();
}

void FeatureEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeatureEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureEntry::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureEntry& FeatureEntry::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureEntry* FeatureEntry::New(::google::protobuf::Arena* arena) const {
  FeatureEntry* n = new FeatureEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.FeatureEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.FeatureEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.FeatureEntry.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.FeatureEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.FeatureEntry)
  return false;
#undef DO_
}

void FeatureEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.FeatureEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.FeatureEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.FeatureEntry)
}

::google::protobuf::uint8* FeatureEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.FeatureEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.FeatureEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.FeatureEntry)
  return target;
}

size_t FeatureEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.FeatureEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.FeatureEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.FeatureEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.FeatureEntry)
    MergeFrom(*source);
  }
}

void FeatureEntry::MergeFrom(const FeatureEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.FeatureEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeatureEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.FeatureEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureEntry::CopyFrom(const FeatureEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.FeatureEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureEntry::IsInitialized() const {
  return true;
}

void FeatureEntry::Swap(FeatureEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureEntry::InternalSwap(FeatureEntry* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureEntry::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureEntry

// optional string name = 1;
bool FeatureEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& FeatureEntry::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.FeatureEntry.name)
  return name_.GetNoArena();
}
void FeatureEntry::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.FeatureEntry.name)
}
#if LANG_CXX11
void FeatureEntry::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.FeatureEntry.name)
}
#endif
void FeatureEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.FeatureEntry.name)
}
void FeatureEntry::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.FeatureEntry.name)
}
::std::string* FeatureEntry::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.FeatureEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeatureEntry::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.FeatureEntry.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeatureEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.FeatureEntry.name)
}

// optional double value = 2;
bool FeatureEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureEntry::clear_value() {
  value_ = 0;
  clear_has_value();
}
double FeatureEntry::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.FeatureEntry.value)
  return value_;
}
void FeatureEntry::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.FeatureEntry.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggSiteResult::kUrlFieldNumber;
const int SuggSiteResult::kTitleFieldNumber;
const int SuggSiteResult::kQueryFieldNumber;
const int SuggSiteResult::kFaviconFieldNumber;
const int SuggSiteResult::kIsNailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggSiteResult::SuggSiteResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggSiteResult)
}
SuggSiteResult::SuggSiteResult(const SuggSiteResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  favicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_favicon()) {
    favicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_);
  }
  is_nail_ = from.is_nail_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggSiteResult)
}

void SuggSiteResult::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_nail_ = false;
}

SuggSiteResult::~SuggSiteResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggSiteResult)
  SharedDtor();
}

void SuggSiteResult::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SuggSiteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggSiteResult::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggSiteResult& SuggSiteResult::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggSiteResult* SuggSiteResult::New(::google::protobuf::Arena* arena) const {
  SuggSiteResult* n = new SuggSiteResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggSiteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!favicon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*favicon_.UnsafeRawStringPointer())->clear();
    }
  }
  is_nail_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggSiteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggSiteResult.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggSiteResult.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggSiteResult.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string favicon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->favicon().data(), static_cast<int>(this->favicon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggSiteResult.favicon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_nail = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_nail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggSiteResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggSiteResult)
  return false;
#undef DO_
}

void SuggSiteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggSiteResult.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggSiteResult.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string query = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggSiteResult.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->query(), output);
  }

  // optional string favicon = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favicon().data(), static_cast<int>(this->favicon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggSiteResult.favicon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->favicon(), output);
  }

  // optional bool is_nail = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_nail(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggSiteResult)
}

::google::protobuf::uint8* SuggSiteResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggSiteResult.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggSiteResult.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string query = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggSiteResult.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query(), target);
  }

  // optional string favicon = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favicon().data(), static_cast<int>(this->favicon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggSiteResult.favicon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->favicon(), target);
  }

  // optional bool is_nail = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_nail(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggSiteResult)
  return target;
}

size_t SuggSiteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string query = 3;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string favicon = 4;
    if (has_favicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon());
    }

    // optional bool is_nail = 5;
    if (has_is_nail()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggSiteResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggSiteResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggSiteResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggSiteResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggSiteResult)
    MergeFrom(*source);
  }
}

void SuggSiteResult::MergeFrom(const SuggSiteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_favicon();
      favicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_);
    }
    if (cached_has_bits & 0x00000010u) {
      is_nail_ = from.is_nail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggSiteResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggSiteResult::CopyFrom(const SuggSiteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggSiteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggSiteResult::IsInitialized() const {
  return true;
}

void SuggSiteResult::Swap(SuggSiteResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggSiteResult::InternalSwap(SuggSiteResult* other) {
  using std::swap;
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  query_.Swap(&other->query_);
  favicon_.Swap(&other->favicon_);
  swap(is_nail_, other->is_nail_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggSiteResult::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggSiteResult

// optional string url = 1;
bool SuggSiteResult::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggSiteResult::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggSiteResult::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggSiteResult::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SuggSiteResult::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.url)
  return url_.GetNoArena();
}
void SuggSiteResult::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}
#if LANG_CXX11
void SuggSiteResult::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}
#endif
void SuggSiteResult::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}
void SuggSiteResult::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}
::std::string* SuggSiteResult::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggSiteResult.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggSiteResult::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggSiteResult.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggSiteResult::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggSiteResult.url)
}

// optional string title = 2;
bool SuggSiteResult::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggSiteResult::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggSiteResult::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggSiteResult::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& SuggSiteResult::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.title)
  return title_.GetNoArena();
}
void SuggSiteResult::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}
#if LANG_CXX11
void SuggSiteResult::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}
#endif
void SuggSiteResult::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}
void SuggSiteResult::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}
::std::string* SuggSiteResult::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggSiteResult.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggSiteResult::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggSiteResult.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggSiteResult::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggSiteResult.title)
}

// optional string query = 3;
bool SuggSiteResult::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggSiteResult::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggSiteResult::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggSiteResult::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& SuggSiteResult::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.query)
  return query_.GetNoArena();
}
void SuggSiteResult::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}
#if LANG_CXX11
void SuggSiteResult::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}
#endif
void SuggSiteResult::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}
void SuggSiteResult::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}
::std::string* SuggSiteResult::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggSiteResult.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggSiteResult::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggSiteResult.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggSiteResult::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggSiteResult.query)
}

// optional string favicon = 4;
bool SuggSiteResult::has_favicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SuggSiteResult::set_has_favicon() {
  _has_bits_[0] |= 0x00000008u;
}
void SuggSiteResult::clear_has_favicon() {
  _has_bits_[0] &= ~0x00000008u;
}
void SuggSiteResult::clear_favicon() {
  favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon();
}
const ::std::string& SuggSiteResult::favicon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
  return favicon_.GetNoArena();
}
void SuggSiteResult::set_favicon(const ::std::string& value) {
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}
#if LANG_CXX11
void SuggSiteResult::set_favicon(::std::string&& value) {
  set_has_favicon();
  favicon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}
#endif
void SuggSiteResult::set_favicon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}
void SuggSiteResult::set_favicon(const char* value, size_t size) {
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}
::std::string* SuggSiteResult::mutable_favicon() {
  set_has_favicon();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
  return favicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggSiteResult::release_favicon() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
  clear_has_favicon();
  return favicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggSiteResult::set_allocated_favicon(::std::string* favicon) {
  if (favicon != NULL) {
    set_has_favicon();
  } else {
    clear_has_favicon();
  }
  favicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggSiteResult.favicon)
}

// optional bool is_nail = 5;
bool SuggSiteResult::has_is_nail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SuggSiteResult::set_has_is_nail() {
  _has_bits_[0] |= 0x00000010u;
}
void SuggSiteResult::clear_has_is_nail() {
  _has_bits_[0] &= ~0x00000010u;
}
void SuggSiteResult::clear_is_nail() {
  is_nail_ = false;
  clear_has_is_nail();
}
bool SuggSiteResult::is_nail() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggSiteResult.is_nail)
  return is_nail_;
}
void SuggSiteResult::set_is_nail(bool value) {
  set_has_is_nail();
  is_nail_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggSiteResult.is_nail)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggQueryResult_AmigoMusicResult::kArtistFieldNumber;
const int SuggQueryResult_AmigoMusicResult::kAlbumFieldNumber;
const int SuggQueryResult_AmigoMusicResult::kTrackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggQueryResult_AmigoMusicResult::SuggQueryResult_AmigoMusicResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
}
SuggQueryResult_AmigoMusicResult::SuggQueryResult_AmigoMusicResult(const SuggQueryResult_AmigoMusicResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_artist()) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_album()) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track()) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
}

void SuggQueryResult_AmigoMusicResult::SharedCtor() {
  _cached_size_ = 0;
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SuggQueryResult_AmigoMusicResult::~SuggQueryResult_AmigoMusicResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  SharedDtor();
}

void SuggQueryResult_AmigoMusicResult::SharedDtor() {
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SuggQueryResult_AmigoMusicResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggQueryResult_AmigoMusicResult::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggQueryResult_AmigoMusicResult& SuggQueryResult_AmigoMusicResult::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggQueryResult_AmigoMusicResult* SuggQueryResult_AmigoMusicResult::New(::google::protobuf::Arena* arena) const {
  SuggQueryResult_AmigoMusicResult* n = new SuggQueryResult_AmigoMusicResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggQueryResult_AmigoMusicResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!artist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*artist_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!album_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*album_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!track_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggQueryResult_AmigoMusicResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string artist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string album = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string track = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  return false;
#undef DO_
}

void SuggQueryResult_AmigoMusicResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string artist = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->artist(), output);
  }

  // optional string album = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->album(), output);
  }

  // optional string track = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->track(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
}

::google::protobuf::uint8* SuggQueryResult_AmigoMusicResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string artist = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->artist(), target);
  }

  // optional string album = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->album(), target);
  }

  // optional string track = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->track(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  return target;
}

size_t SuggQueryResult_AmigoMusicResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string artist = 1;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // optional string album = 2;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }

    // optional string track = 3;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggQueryResult_AmigoMusicResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggQueryResult_AmigoMusicResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggQueryResult_AmigoMusicResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
    MergeFrom(*source);
  }
}

void SuggQueryResult_AmigoMusicResult::MergeFrom(const SuggQueryResult_AmigoMusicResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_artist();
      artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_album();
      album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_track();
      track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
    }
  }
}

void SuggQueryResult_AmigoMusicResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggQueryResult_AmigoMusicResult::CopyFrom(const SuggQueryResult_AmigoMusicResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggQueryResult_AmigoMusicResult::IsInitialized() const {
  return true;
}

void SuggQueryResult_AmigoMusicResult::Swap(SuggQueryResult_AmigoMusicResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggQueryResult_AmigoMusicResult::InternalSwap(SuggQueryResult_AmigoMusicResult* other) {
  using std::swap;
  artist_.Swap(&other->artist_);
  album_.Swap(&other->album_);
  track_.Swap(&other->track_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggQueryResult_AmigoMusicResult::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggQueryResult_AmigoMusicResult

// optional string artist = 1;
bool SuggQueryResult_AmigoMusicResult::has_artist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggQueryResult_AmigoMusicResult::set_has_artist() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggQueryResult_AmigoMusicResult::clear_has_artist() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggQueryResult_AmigoMusicResult::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
const ::std::string& SuggQueryResult_AmigoMusicResult::artist() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
  return artist_.GetNoArena();
}
void SuggQueryResult_AmigoMusicResult::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}
#if LANG_CXX11
void SuggQueryResult_AmigoMusicResult::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}
#endif
void SuggQueryResult_AmigoMusicResult::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}
void SuggQueryResult_AmigoMusicResult::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}
::std::string* SuggQueryResult_AmigoMusicResult::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggQueryResult_AmigoMusicResult::release_artist() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggQueryResult_AmigoMusicResult::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.artist)
}

// optional string album = 2;
bool SuggQueryResult_AmigoMusicResult::has_album() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggQueryResult_AmigoMusicResult::set_has_album() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggQueryResult_AmigoMusicResult::clear_has_album() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggQueryResult_AmigoMusicResult::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
const ::std::string& SuggQueryResult_AmigoMusicResult::album() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
  return album_.GetNoArena();
}
void SuggQueryResult_AmigoMusicResult::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}
#if LANG_CXX11
void SuggQueryResult_AmigoMusicResult::set_album(::std::string&& value) {
  set_has_album();
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}
#endif
void SuggQueryResult_AmigoMusicResult::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}
void SuggQueryResult_AmigoMusicResult::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}
::std::string* SuggQueryResult_AmigoMusicResult::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggQueryResult_AmigoMusicResult::release_album() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggQueryResult_AmigoMusicResult::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.album)
}

// optional string track = 3;
bool SuggQueryResult_AmigoMusicResult::has_track() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggQueryResult_AmigoMusicResult::set_has_track() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggQueryResult_AmigoMusicResult::clear_has_track() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggQueryResult_AmigoMusicResult::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
const ::std::string& SuggQueryResult_AmigoMusicResult::track() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
  return track_.GetNoArena();
}
void SuggQueryResult_AmigoMusicResult::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}
#if LANG_CXX11
void SuggQueryResult_AmigoMusicResult::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}
#endif
void SuggQueryResult_AmigoMusicResult::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}
void SuggQueryResult_AmigoMusicResult::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}
::std::string* SuggQueryResult_AmigoMusicResult::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggQueryResult_AmigoMusicResult::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggQueryResult_AmigoMusicResult::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult.track)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggQueryResult_MatchedPair::kBeginPosFieldNumber;
const int SuggQueryResult_MatchedPair::kEndPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggQueryResult_MatchedPair::SuggQueryResult_MatchedPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
}
SuggQueryResult_MatchedPair::SuggQueryResult_MatchedPair(const SuggQueryResult_MatchedPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_pos_, &from.begin_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_pos_) -
    reinterpret_cast<char*>(&begin_pos_)) + sizeof(end_pos_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
}

void SuggQueryResult_MatchedPair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&begin_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_pos_) -
      reinterpret_cast<char*>(&begin_pos_)) + sizeof(end_pos_));
}

SuggQueryResult_MatchedPair::~SuggQueryResult_MatchedPair() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  SharedDtor();
}

void SuggQueryResult_MatchedPair::SharedDtor() {
}

void SuggQueryResult_MatchedPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggQueryResult_MatchedPair::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggQueryResult_MatchedPair& SuggQueryResult_MatchedPair::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggQueryResult_MatchedPair* SuggQueryResult_MatchedPair::New(::google::protobuf::Arena* arena) const {
  SuggQueryResult_MatchedPair* n = new SuggQueryResult_MatchedPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggQueryResult_MatchedPair::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&begin_pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_pos_) -
        reinterpret_cast<char*>(&begin_pos_)) + sizeof(end_pos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggQueryResult_MatchedPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 begin_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_begin_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 end_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  return false;
#undef DO_
}

void SuggQueryResult_MatchedPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 begin_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begin_pos(), output);
  }

  // required uint32 end_pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
}

::google::protobuf::uint8* SuggQueryResult_MatchedPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 begin_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begin_pos(), target);
  }

  // required uint32 end_pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  return target;
}

size_t SuggQueryResult_MatchedPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  size_t total_size = 0;

  if (has_begin_pos()) {
    // required uint32 begin_pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_pos());
  }

  if (has_end_pos()) {
    // required uint32 end_pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_pos());
  }

  return total_size;
}
size_t SuggQueryResult_MatchedPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 begin_pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_pos());

    // required uint32 end_pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_pos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggQueryResult_MatchedPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggQueryResult_MatchedPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggQueryResult_MatchedPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
    MergeFrom(*source);
  }
}

void SuggQueryResult_MatchedPair::MergeFrom(const SuggQueryResult_MatchedPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      begin_pos_ = from.begin_pos_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_pos_ = from.end_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggQueryResult_MatchedPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggQueryResult_MatchedPair::CopyFrom(const SuggQueryResult_MatchedPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggQueryResult_MatchedPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SuggQueryResult_MatchedPair::Swap(SuggQueryResult_MatchedPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggQueryResult_MatchedPair::InternalSwap(SuggQueryResult_MatchedPair* other) {
  using std::swap;
  swap(begin_pos_, other->begin_pos_);
  swap(end_pos_, other->end_pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggQueryResult_MatchedPair::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggQueryResult_MatchedPair

// required uint32 begin_pos = 1;
bool SuggQueryResult_MatchedPair::has_begin_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggQueryResult_MatchedPair::set_has_begin_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggQueryResult_MatchedPair::clear_has_begin_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggQueryResult_MatchedPair::clear_begin_pos() {
  begin_pos_ = 0u;
  clear_has_begin_pos();
}
::google::protobuf::uint32 SuggQueryResult_MatchedPair::begin_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair.begin_pos)
  return begin_pos_;
}
void SuggQueryResult_MatchedPair::set_begin_pos(::google::protobuf::uint32 value) {
  set_has_begin_pos();
  begin_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair.begin_pos)
}

// required uint32 end_pos = 2;
bool SuggQueryResult_MatchedPair::has_end_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggQueryResult_MatchedPair::set_has_end_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggQueryResult_MatchedPair::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggQueryResult_MatchedPair::clear_end_pos() {
  end_pos_ = 0u;
  clear_has_end_pos();
}
::google::protobuf::uint32 SuggQueryResult_MatchedPair::end_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair.end_pos)
  return end_pos_;
}
void SuggQueryResult_MatchedPair::set_end_pos(::google::protobuf::uint32 value) {
  set_has_end_pos();
  end_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair.end_pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggQueryResult::kTextFieldNumber;
const int SuggQueryResult::kMisspellTypeFieldNumber;
const int SuggQueryResult::kIsMusicFieldNumber;
const int SuggQueryResult::kIsAutocompFieldNumber;
const int SuggQueryResult::kIsNewsFieldNumber;
const int SuggQueryResult::kRichCategoryFieldNumber;
const int SuggQueryResult::kRichDataFieldNumber;
const int SuggQueryResult::kAmigoMusicFieldNumber;
const int SuggQueryResult::kFeatureListFieldNumber;
const int SuggQueryResult::kMarkedTextFieldNumber;
const int SuggQueryResult::kFreqFieldNumber;
const int SuggQueryResult::kWeightFieldNumber;
const int SuggQueryResult::kExactMatchFieldNumber;
const int SuggQueryResult::kGeoCountryFreqFieldNumber;
const int SuggQueryResult::kGeoRegionFreqFieldNumber;
const int SuggQueryResult::kLogProbFieldNumber;
const int SuggQueryResult::kSiteFieldNumber;
const int SuggQueryResult::kRichCategoryTypeFieldNumber;
const int SuggQueryResult::kMatchedRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggQueryResult::SuggQueryResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggQueryResult)
}
SuggQueryResult::SuggQueryResult(const SuggQueryResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      feature_list_(from.feature_list_),
      matched_ranges_(from.matched_ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  rich_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rich_category()) {
    rich_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rich_category_);
  }
  rich_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rich_data()) {
    rich_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rich_data_);
  }
  marked_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_marked_text()) {
    marked_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marked_text_);
  }
  if (from.has_amigo_music()) {
    amigo_music_ = new ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult(*from.amigo_music_);
  } else {
    amigo_music_ = NULL;
  }
  if (from.has_site()) {
    site_ = new ::ru::mail::go::sugg::indexer::SuggSiteResult(*from.site_);
  } else {
    site_ = NULL;
  }
  ::memcpy(&misspell_type_, &from.misspell_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rich_category_type_) -
    reinterpret_cast<char*>(&misspell_type_)) + sizeof(rich_category_type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggQueryResult)
}

void SuggQueryResult::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rich_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rich_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marked_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amigo_music_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rich_category_type_) -
      reinterpret_cast<char*>(&amigo_music_)) + sizeof(rich_category_type_));
}

SuggQueryResult::~SuggQueryResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggQueryResult)
  SharedDtor();
}

void SuggQueryResult::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rich_category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rich_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marked_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amigo_music_;
  if (this != internal_default_instance()) delete site_;
}

void SuggQueryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggQueryResult::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggQueryResult& SuggQueryResult::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggQueryResult* SuggQueryResult::New(::google::protobuf::Arena* arena) const {
  SuggQueryResult* n = new SuggQueryResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggQueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_list_.Clear();
  matched_ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!rich_category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rich_category_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!rich_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rich_data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!marked_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*marked_text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(amigo_music_ != NULL);
      amigo_music_->::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(site_ != NULL);
      site_->::ru::mail::go::sugg::indexer::SuggSiteResult::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&misspell_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_music_) -
        reinterpret_cast<char*>(&misspell_type_)) + sizeof(is_music_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&is_autocomp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&log_prob_) -
        reinterpret_cast<char*>(&is_autocomp_)) + sizeof(log_prob_));
  }
  rich_category_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggQueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggQueryResult.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.sugg.indexer.SuggQueryResult.MisspellType misspell_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType_IsValid(value)) {
            set_misspell_type(static_cast< ::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_music = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_music();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_music_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_autocomp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_autocomp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_autocomp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_news = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_news();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_news_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rich_category = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rich_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rich_category().data(), static_cast<int>(this->rich_category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggQueryResult.rich_category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rich_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rich_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rich_data().data(), static_cast<int>(this->rich_data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggQueryResult.rich_data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult amigo_music = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amigo_music()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.FeatureEntry feature_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string marked_text = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marked_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->marked_text().data(), static_cast<int>(this->marked_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggQueryResult.marked_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 freq = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exact_match = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_exact_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exact_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 geo_country_freq = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_geo_country_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_country_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 geo_region_freq = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_geo_region_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_region_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float log_prob = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_log_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &log_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.sugg.indexer.SuggSiteResult site = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rich_category_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_rich_category_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rich_category_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair matched_ranges = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matched_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggQueryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggQueryResult)
  return false;
#undef DO_
}

void SuggQueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional .ru.mail.go.sugg.indexer.SuggQueryResult.MisspellType misspell_type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->misspell_type(), output);
  }

  // optional bool is_music = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_music(), output);
  }

  // optional bool is_autocomp = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_autocomp(), output);
  }

  // optional bool is_news = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_news(), output);
  }

  // optional string rich_category = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rich_category().data(), static_cast<int>(this->rich_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.rich_category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rich_category(), output);
  }

  // optional string rich_data = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rich_data().data(), static_cast<int>(this->rich_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.rich_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rich_data(), output);
  }

  // optional .ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult amigo_music = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->amigo_music_, output);
  }

  // repeated .ru.mail.go.sugg.indexer.FeatureEntry feature_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->feature_list(static_cast<int>(i)), output);
  }

  // optional string marked_text = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->marked_text().data(), static_cast<int>(this->marked_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.marked_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->marked_text(), output);
  }

  // optional uint32 freq = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->freq(), output);
  }

  // optional float weight = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight(), output);
  }

  // optional bool exact_match = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->exact_match(), output);
  }

  // optional uint32 geo_country_freq = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->geo_country_freq(), output);
  }

  // optional uint32 geo_region_freq = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->geo_region_freq(), output);
  }

  // optional float log_prob = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->log_prob(), output);
  }

  // optional .ru.mail.go.sugg.indexer.SuggSiteResult site = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->site_, output);
  }

  // optional uint32 rich_category_type = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->rich_category_type(), output);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair matched_ranges = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matched_ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->matched_ranges(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggQueryResult)
}

::google::protobuf::uint8* SuggQueryResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional .ru.mail.go.sugg.indexer.SuggQueryResult.MisspellType misspell_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->misspell_type(), target);
  }

  // optional bool is_music = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_music(), target);
  }

  // optional bool is_autocomp = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_autocomp(), target);
  }

  // optional bool is_news = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_news(), target);
  }

  // optional string rich_category = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rich_category().data(), static_cast<int>(this->rich_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.rich_category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rich_category(), target);
  }

  // optional string rich_data = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rich_data().data(), static_cast<int>(this->rich_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.rich_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rich_data(), target);
  }

  // optional .ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult amigo_music = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->amigo_music_, deterministic, target);
  }

  // repeated .ru.mail.go.sugg.indexer.FeatureEntry feature_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->feature_list(static_cast<int>(i)), deterministic, target);
  }

  // optional string marked_text = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->marked_text().data(), static_cast<int>(this->marked_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggQueryResult.marked_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->marked_text(), target);
  }

  // optional uint32 freq = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->freq(), target);
  }

  // optional float weight = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight(), target);
  }

  // optional bool exact_match = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->exact_match(), target);
  }

  // optional uint32 geo_country_freq = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->geo_country_freq(), target);
  }

  // optional uint32 geo_region_freq = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->geo_region_freq(), target);
  }

  // optional float log_prob = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->log_prob(), target);
  }

  // optional .ru.mail.go.sugg.indexer.SuggSiteResult site = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->site_, deterministic, target);
  }

  // optional uint32 rich_category_type = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->rich_category_type(), target);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair matched_ranges = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matched_ranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->matched_ranges(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggQueryResult)
  return target;
}

size_t SuggQueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.sugg.indexer.FeatureEntry feature_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feature_list(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair matched_ranges = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->matched_ranges_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matched_ranges(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string rich_category = 6;
    if (has_rich_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rich_category());
    }

    // optional string rich_data = 7;
    if (has_rich_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rich_data());
    }

    // optional string marked_text = 10;
    if (has_marked_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->marked_text());
    }

    // optional .ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult amigo_music = 8;
    if (has_amigo_music()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->amigo_music_);
    }

    // optional .ru.mail.go.sugg.indexer.SuggSiteResult site = 17;
    if (has_site()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->site_);
    }

    // optional .ru.mail.go.sugg.indexer.SuggQueryResult.MisspellType misspell_type = 2;
    if (has_misspell_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->misspell_type());
    }

    // optional bool is_music = 3;
    if (has_is_music()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_autocomp = 4;
    if (has_is_autocomp()) {
      total_size += 1 + 1;
    }

    // optional bool is_news = 5;
    if (has_is_news()) {
      total_size += 1 + 1;
    }

    // optional bool exact_match = 13;
    if (has_exact_match()) {
      total_size += 1 + 1;
    }

    // optional uint32 freq = 11;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freq());
    }

    // optional float weight = 12;
    if (has_weight()) {
      total_size += 1 + 4;
    }

    // optional uint32 geo_country_freq = 14;
    if (has_geo_country_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->geo_country_freq());
    }

    // optional uint32 geo_region_freq = 15;
    if (has_geo_region_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->geo_region_freq());
    }

    // optional float log_prob = 16;
    if (has_log_prob()) {
      total_size += 2 + 4;
    }

  }
  // optional uint32 rich_category_type = 18;
  if (has_rich_category_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rich_category_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggQueryResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggQueryResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggQueryResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggQueryResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggQueryResult)
    MergeFrom(*source);
  }
}

void SuggQueryResult::MergeFrom(const SuggQueryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_list_.MergeFrom(from.feature_list_);
  matched_ranges_.MergeFrom(from.matched_ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_rich_category();
      rich_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rich_category_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_rich_data();
      rich_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rich_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_marked_text();
      marked_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marked_text_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_amigo_music()->::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult::MergeFrom(from.amigo_music());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_site()->::ru::mail::go::sugg::indexer::SuggSiteResult::MergeFrom(from.site());
    }
    if (cached_has_bits & 0x00000040u) {
      misspell_type_ = from.misspell_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_music_ = from.is_music_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_autocomp_ = from.is_autocomp_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_news_ = from.is_news_;
    }
    if (cached_has_bits & 0x00000400u) {
      exact_match_ = from.exact_match_;
    }
    if (cached_has_bits & 0x00000800u) {
      freq_ = from.freq_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00002000u) {
      geo_country_freq_ = from.geo_country_freq_;
    }
    if (cached_has_bits & 0x00004000u) {
      geo_region_freq_ = from.geo_region_freq_;
    }
    if (cached_has_bits & 0x00008000u) {
      log_prob_ = from.log_prob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_rich_category_type(from.rich_category_type());
  }
}

void SuggQueryResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggQueryResult::CopyFrom(const SuggQueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggQueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggQueryResult::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->matched_ranges())) return false;
  return true;
}

void SuggQueryResult::Swap(SuggQueryResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggQueryResult::InternalSwap(SuggQueryResult* other) {
  using std::swap;
  feature_list_.InternalSwap(&other->feature_list_);
  matched_ranges_.InternalSwap(&other->matched_ranges_);
  text_.Swap(&other->text_);
  rich_category_.Swap(&other->rich_category_);
  rich_data_.Swap(&other->rich_data_);
  marked_text_.Swap(&other->marked_text_);
  swap(amigo_music_, other->amigo_music_);
  swap(site_, other->site_);
  swap(misspell_type_, other->misspell_type_);
  swap(is_music_, other->is_music_);
  swap(is_autocomp_, other->is_autocomp_);
  swap(is_news_, other->is_news_);
  swap(exact_match_, other->exact_match_);
  swap(freq_, other->freq_);
  swap(weight_, other->weight_);
  swap(geo_country_freq_, other->geo_country_freq_);
  swap(geo_region_freq_, other->geo_region_freq_);
  swap(log_prob_, other->log_prob_);
  swap(rich_category_type_, other->rich_category_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggQueryResult::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggQueryResult

// optional string text = 1;
bool SuggQueryResult::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggQueryResult::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggQueryResult::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggQueryResult::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& SuggQueryResult::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.text)
  return text_.GetNoArena();
}
void SuggQueryResult::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}
#if LANG_CXX11
void SuggQueryResult::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}
#endif
void SuggQueryResult::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}
void SuggQueryResult::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}
::std::string* SuggQueryResult::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggQueryResult::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggQueryResult::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.text)
}

// optional .ru.mail.go.sugg.indexer.SuggQueryResult.MisspellType misspell_type = 2;
bool SuggQueryResult::has_misspell_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SuggQueryResult::set_has_misspell_type() {
  _has_bits_[0] |= 0x00000040u;
}
void SuggQueryResult::clear_has_misspell_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void SuggQueryResult::clear_misspell_type() {
  misspell_type_ = 0;
  clear_has_misspell_type();
}
::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType SuggQueryResult::misspell_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.misspell_type)
  return static_cast< ::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType >(misspell_type_);
}
void SuggQueryResult::set_misspell_type(::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType value) {
  assert(::ru::mail::go::sugg::indexer::SuggQueryResult_MisspellType_IsValid(value));
  set_has_misspell_type();
  misspell_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.misspell_type)
}

// optional bool is_music = 3;
bool SuggQueryResult::has_is_music() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SuggQueryResult::set_has_is_music() {
  _has_bits_[0] |= 0x00000080u;
}
void SuggQueryResult::clear_has_is_music() {
  _has_bits_[0] &= ~0x00000080u;
}
void SuggQueryResult::clear_is_music() {
  is_music_ = false;
  clear_has_is_music();
}
bool SuggQueryResult::is_music() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.is_music)
  return is_music_;
}
void SuggQueryResult::set_is_music(bool value) {
  set_has_is_music();
  is_music_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.is_music)
}

// optional bool is_autocomp = 4;
bool SuggQueryResult::has_is_autocomp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SuggQueryResult::set_has_is_autocomp() {
  _has_bits_[0] |= 0x00000100u;
}
void SuggQueryResult::clear_has_is_autocomp() {
  _has_bits_[0] &= ~0x00000100u;
}
void SuggQueryResult::clear_is_autocomp() {
  is_autocomp_ = false;
  clear_has_is_autocomp();
}
bool SuggQueryResult::is_autocomp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.is_autocomp)
  return is_autocomp_;
}
void SuggQueryResult::set_is_autocomp(bool value) {
  set_has_is_autocomp();
  is_autocomp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.is_autocomp)
}

// optional bool is_news = 5;
bool SuggQueryResult::has_is_news() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SuggQueryResult::set_has_is_news() {
  _has_bits_[0] |= 0x00000200u;
}
void SuggQueryResult::clear_has_is_news() {
  _has_bits_[0] &= ~0x00000200u;
}
void SuggQueryResult::clear_is_news() {
  is_news_ = false;
  clear_has_is_news();
}
bool SuggQueryResult::is_news() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.is_news)
  return is_news_;
}
void SuggQueryResult::set_is_news(bool value) {
  set_has_is_news();
  is_news_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.is_news)
}

// optional string rich_category = 6;
bool SuggQueryResult::has_rich_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggQueryResult::set_has_rich_category() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggQueryResult::clear_has_rich_category() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggQueryResult::clear_rich_category() {
  rich_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rich_category();
}
const ::std::string& SuggQueryResult::rich_category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
  return rich_category_.GetNoArena();
}
void SuggQueryResult::set_rich_category(const ::std::string& value) {
  set_has_rich_category();
  rich_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}
#if LANG_CXX11
void SuggQueryResult::set_rich_category(::std::string&& value) {
  set_has_rich_category();
  rich_category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}
#endif
void SuggQueryResult::set_rich_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rich_category();
  rich_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}
void SuggQueryResult::set_rich_category(const char* value, size_t size) {
  set_has_rich_category();
  rich_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}
::std::string* SuggQueryResult::mutable_rich_category() {
  set_has_rich_category();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
  return rich_category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggQueryResult::release_rich_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
  clear_has_rich_category();
  return rich_category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggQueryResult::set_allocated_rich_category(::std::string* rich_category) {
  if (rich_category != NULL) {
    set_has_rich_category();
  } else {
    clear_has_rich_category();
  }
  rich_category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rich_category);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category)
}

// optional string rich_data = 7;
bool SuggQueryResult::has_rich_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggQueryResult::set_has_rich_data() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggQueryResult::clear_has_rich_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggQueryResult::clear_rich_data() {
  rich_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rich_data();
}
const ::std::string& SuggQueryResult::rich_data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
  return rich_data_.GetNoArena();
}
void SuggQueryResult::set_rich_data(const ::std::string& value) {
  set_has_rich_data();
  rich_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}
#if LANG_CXX11
void SuggQueryResult::set_rich_data(::std::string&& value) {
  set_has_rich_data();
  rich_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}
#endif
void SuggQueryResult::set_rich_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rich_data();
  rich_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}
void SuggQueryResult::set_rich_data(const char* value, size_t size) {
  set_has_rich_data();
  rich_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}
::std::string* SuggQueryResult::mutable_rich_data() {
  set_has_rich_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
  return rich_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggQueryResult::release_rich_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
  clear_has_rich_data();
  return rich_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggQueryResult::set_allocated_rich_data(::std::string* rich_data) {
  if (rich_data != NULL) {
    set_has_rich_data();
  } else {
    clear_has_rich_data();
  }
  rich_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rich_data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.rich_data)
}

// optional .ru.mail.go.sugg.indexer.SuggQueryResult.AmigoMusicResult amigo_music = 8;
bool SuggQueryResult::has_amigo_music() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SuggQueryResult::set_has_amigo_music() {
  _has_bits_[0] |= 0x00000010u;
}
void SuggQueryResult::clear_has_amigo_music() {
  _has_bits_[0] &= ~0x00000010u;
}
void SuggQueryResult::clear_amigo_music() {
  if (amigo_music_ != NULL) amigo_music_->::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult::Clear();
  clear_has_amigo_music();
}
const ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult& SuggQueryResult::amigo_music() const {
  const ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* p = amigo_music_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.amigo_music)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult*>(
      &::ru::mail::go::sugg::indexer::_SuggQueryResult_AmigoMusicResult_default_instance_);
}
::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* SuggQueryResult::mutable_amigo_music() {
  set_has_amigo_music();
  if (amigo_music_ == NULL) {
    amigo_music_ = new ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.amigo_music)
  return amigo_music_;
}
::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* SuggQueryResult::release_amigo_music() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.amigo_music)
  clear_has_amigo_music();
  ::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* temp = amigo_music_;
  amigo_music_ = NULL;
  return temp;
}
void SuggQueryResult::set_allocated_amigo_music(::ru::mail::go::sugg::indexer::SuggQueryResult_AmigoMusicResult* amigo_music) {
  delete amigo_music_;
  amigo_music_ = amigo_music;
  if (amigo_music) {
    set_has_amigo_music();
  } else {
    clear_has_amigo_music();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.amigo_music)
}

// repeated .ru.mail.go.sugg.indexer.FeatureEntry feature_list = 9;
int SuggQueryResult::feature_list_size() const {
  return feature_list_.size();
}
void SuggQueryResult::clear_feature_list() {
  feature_list_.Clear();
}
const ::ru::mail::go::sugg::indexer::FeatureEntry& SuggQueryResult::feature_list(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return feature_list_.Get(index);
}
::ru::mail::go::sugg::indexer::FeatureEntry* SuggQueryResult::mutable_feature_list(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return feature_list_.Mutable(index);
}
::ru::mail::go::sugg::indexer::FeatureEntry* SuggQueryResult::add_feature_list() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return feature_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::FeatureEntry >*
SuggQueryResult::mutable_feature_list() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return &feature_list_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::FeatureEntry >&
SuggQueryResult::feature_list() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggQueryResult.feature_list)
  return feature_list_;
}

// optional string marked_text = 10;
bool SuggQueryResult::has_marked_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SuggQueryResult::set_has_marked_text() {
  _has_bits_[0] |= 0x00000008u;
}
void SuggQueryResult::clear_has_marked_text() {
  _has_bits_[0] &= ~0x00000008u;
}
void SuggQueryResult::clear_marked_text() {
  marked_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marked_text();
}
const ::std::string& SuggQueryResult::marked_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
  return marked_text_.GetNoArena();
}
void SuggQueryResult::set_marked_text(const ::std::string& value) {
  set_has_marked_text();
  marked_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}
#if LANG_CXX11
void SuggQueryResult::set_marked_text(::std::string&& value) {
  set_has_marked_text();
  marked_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}
#endif
void SuggQueryResult::set_marked_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_marked_text();
  marked_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}
void SuggQueryResult::set_marked_text(const char* value, size_t size) {
  set_has_marked_text();
  marked_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}
::std::string* SuggQueryResult::mutable_marked_text() {
  set_has_marked_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
  return marked_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggQueryResult::release_marked_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
  clear_has_marked_text();
  return marked_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggQueryResult::set_allocated_marked_text(::std::string* marked_text) {
  if (marked_text != NULL) {
    set_has_marked_text();
  } else {
    clear_has_marked_text();
  }
  marked_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marked_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.marked_text)
}

// optional uint32 freq = 11;
bool SuggQueryResult::has_freq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SuggQueryResult::set_has_freq() {
  _has_bits_[0] |= 0x00000800u;
}
void SuggQueryResult::clear_has_freq() {
  _has_bits_[0] &= ~0x00000800u;
}
void SuggQueryResult::clear_freq() {
  freq_ = 0u;
  clear_has_freq();
}
::google::protobuf::uint32 SuggQueryResult::freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.freq)
  return freq_;
}
void SuggQueryResult::set_freq(::google::protobuf::uint32 value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.freq)
}

// optional float weight = 12;
bool SuggQueryResult::has_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SuggQueryResult::set_has_weight() {
  _has_bits_[0] |= 0x00001000u;
}
void SuggQueryResult::clear_has_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
void SuggQueryResult::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
float SuggQueryResult::weight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.weight)
  return weight_;
}
void SuggQueryResult::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.weight)
}

// optional bool exact_match = 13;
bool SuggQueryResult::has_exact_match() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SuggQueryResult::set_has_exact_match() {
  _has_bits_[0] |= 0x00000400u;
}
void SuggQueryResult::clear_has_exact_match() {
  _has_bits_[0] &= ~0x00000400u;
}
void SuggQueryResult::clear_exact_match() {
  exact_match_ = false;
  clear_has_exact_match();
}
bool SuggQueryResult::exact_match() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.exact_match)
  return exact_match_;
}
void SuggQueryResult::set_exact_match(bool value) {
  set_has_exact_match();
  exact_match_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.exact_match)
}

// optional uint32 geo_country_freq = 14;
bool SuggQueryResult::has_geo_country_freq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SuggQueryResult::set_has_geo_country_freq() {
  _has_bits_[0] |= 0x00002000u;
}
void SuggQueryResult::clear_has_geo_country_freq() {
  _has_bits_[0] &= ~0x00002000u;
}
void SuggQueryResult::clear_geo_country_freq() {
  geo_country_freq_ = 0u;
  clear_has_geo_country_freq();
}
::google::protobuf::uint32 SuggQueryResult::geo_country_freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.geo_country_freq)
  return geo_country_freq_;
}
void SuggQueryResult::set_geo_country_freq(::google::protobuf::uint32 value) {
  set_has_geo_country_freq();
  geo_country_freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.geo_country_freq)
}

// optional uint32 geo_region_freq = 15;
bool SuggQueryResult::has_geo_region_freq() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SuggQueryResult::set_has_geo_region_freq() {
  _has_bits_[0] |= 0x00004000u;
}
void SuggQueryResult::clear_has_geo_region_freq() {
  _has_bits_[0] &= ~0x00004000u;
}
void SuggQueryResult::clear_geo_region_freq() {
  geo_region_freq_ = 0u;
  clear_has_geo_region_freq();
}
::google::protobuf::uint32 SuggQueryResult::geo_region_freq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.geo_region_freq)
  return geo_region_freq_;
}
void SuggQueryResult::set_geo_region_freq(::google::protobuf::uint32 value) {
  set_has_geo_region_freq();
  geo_region_freq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.geo_region_freq)
}

// optional float log_prob = 16;
bool SuggQueryResult::has_log_prob() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SuggQueryResult::set_has_log_prob() {
  _has_bits_[0] |= 0x00008000u;
}
void SuggQueryResult::clear_has_log_prob() {
  _has_bits_[0] &= ~0x00008000u;
}
void SuggQueryResult::clear_log_prob() {
  log_prob_ = 0;
  clear_has_log_prob();
}
float SuggQueryResult::log_prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.log_prob)
  return log_prob_;
}
void SuggQueryResult::set_log_prob(float value) {
  set_has_log_prob();
  log_prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.log_prob)
}

// optional .ru.mail.go.sugg.indexer.SuggSiteResult site = 17;
bool SuggQueryResult::has_site() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SuggQueryResult::set_has_site() {
  _has_bits_[0] |= 0x00000020u;
}
void SuggQueryResult::clear_has_site() {
  _has_bits_[0] &= ~0x00000020u;
}
void SuggQueryResult::clear_site() {
  if (site_ != NULL) site_->::ru::mail::go::sugg::indexer::SuggSiteResult::Clear();
  clear_has_site();
}
const ::ru::mail::go::sugg::indexer::SuggSiteResult& SuggQueryResult::site() const {
  const ::ru::mail::go::sugg::indexer::SuggSiteResult* p = site_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.site)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggSiteResult*>(
      &::ru::mail::go::sugg::indexer::_SuggSiteResult_default_instance_);
}
::ru::mail::go::sugg::indexer::SuggSiteResult* SuggQueryResult::mutable_site() {
  set_has_site();
  if (site_ == NULL) {
    site_ = new ::ru::mail::go::sugg::indexer::SuggSiteResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.site)
  return site_;
}
::ru::mail::go::sugg::indexer::SuggSiteResult* SuggQueryResult::release_site() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggQueryResult.site)
  clear_has_site();
  ::ru::mail::go::sugg::indexer::SuggSiteResult* temp = site_;
  site_ = NULL;
  return temp;
}
void SuggQueryResult::set_allocated_site(::ru::mail::go::sugg::indexer::SuggSiteResult* site) {
  delete site_;
  site_ = site;
  if (site) {
    set_has_site();
  } else {
    clear_has_site();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggQueryResult.site)
}

// optional uint32 rich_category_type = 18;
bool SuggQueryResult::has_rich_category_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SuggQueryResult::set_has_rich_category_type() {
  _has_bits_[0] |= 0x00010000u;
}
void SuggQueryResult::clear_has_rich_category_type() {
  _has_bits_[0] &= ~0x00010000u;
}
void SuggQueryResult::clear_rich_category_type() {
  rich_category_type_ = 0u;
  clear_has_rich_category_type();
}
::google::protobuf::uint32 SuggQueryResult::rich_category_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category_type)
  return rich_category_type_;
}
void SuggQueryResult::set_rich_category_type(::google::protobuf::uint32 value) {
  set_has_rich_category_type();
  rich_category_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggQueryResult.rich_category_type)
}

// repeated .ru.mail.go.sugg.indexer.SuggQueryResult.MatchedPair matched_ranges = 19;
int SuggQueryResult::matched_ranges_size() const {
  return matched_ranges_.size();
}
void SuggQueryResult::clear_matched_ranges() {
  matched_ranges_.Clear();
}
const ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair& SuggQueryResult::matched_ranges(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return matched_ranges_.Get(index);
}
::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair* SuggQueryResult::mutable_matched_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return matched_ranges_.Mutable(index);
}
::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair* SuggQueryResult::add_matched_ranges() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return matched_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair >*
SuggQueryResult::mutable_matched_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return &matched_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult_MatchedPair >&
SuggQueryResult::matched_ranges() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggQueryResult.matched_ranges)
  return matched_ranges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggWnfEntry::kTagFieldNumber;
const int SuggWnfEntry::kVerdictFieldNumber;
const int SuggWnfEntry::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggWnfEntry::SuggWnfEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggWnfEntry)
}
SuggWnfEntry::SuggWnfEntry(const SuggWnfEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  verdict_ = from.verdict_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggWnfEntry)
}

void SuggWnfEntry::SharedCtor() {
  _cached_size_ = 0;
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verdict_ = false;
}

SuggWnfEntry::~SuggWnfEntry() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggWnfEntry)
  SharedDtor();
}

void SuggWnfEntry::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SuggWnfEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggWnfEntry::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggWnfEntry& SuggWnfEntry::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggWnfEntry* SuggWnfEntry::New(::google::protobuf::Arena* arena) const {
  SuggWnfEntry* n = new SuggWnfEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggWnfEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!comment_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*comment_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
  }
  verdict_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggWnfEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool verdict = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_verdict();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verdict_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggWnfEntry.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggWnfEntry.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggWnfEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggWnfEntry)
  return false;
#undef DO_
}

void SuggWnfEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool verdict = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->verdict(), output);
  }

  // optional string comment = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggWnfEntry.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggWnfEntry.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggWnfEntry)
}

::google::protobuf::uint8* SuggWnfEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool verdict = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->verdict(), target);
  }

  // optional string comment = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggWnfEntry.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggWnfEntry.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggWnfEntry)
  return target;
}

size_t SuggWnfEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional bool verdict = 1;
    if (has_verdict()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggWnfEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggWnfEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggWnfEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggWnfEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggWnfEntry)
    MergeFrom(*source);
  }
}

void SuggWnfEntry::MergeFrom(const SuggWnfEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      verdict_ = from.verdict_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggWnfEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggWnfEntry::CopyFrom(const SuggWnfEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggWnfEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggWnfEntry::IsInitialized() const {
  return true;
}

void SuggWnfEntry::Swap(SuggWnfEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggWnfEntry::InternalSwap(SuggWnfEntry* other) {
  using std::swap;
  comment_.Swap(&other->comment_);
  tag_.Swap(&other->tag_);
  swap(verdict_, other->verdict_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggWnfEntry::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggWnfEntry

// optional string tag = 3;
bool SuggWnfEntry::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggWnfEntry::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggWnfEntry::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggWnfEntry::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& SuggWnfEntry::tag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
  return tag_.GetNoArena();
}
void SuggWnfEntry::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}
#if LANG_CXX11
void SuggWnfEntry::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}
#endif
void SuggWnfEntry::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}
void SuggWnfEntry::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}
::std::string* SuggWnfEntry::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggWnfEntry::release_tag() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggWnfEntry::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggWnfEntry.tag)
}

// optional bool verdict = 1;
bool SuggWnfEntry::has_verdict() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggWnfEntry::set_has_verdict() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggWnfEntry::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggWnfEntry::clear_verdict() {
  verdict_ = false;
  clear_has_verdict();
}
bool SuggWnfEntry::verdict() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfEntry.verdict)
  return verdict_;
}
void SuggWnfEntry::set_verdict(bool value) {
  set_has_verdict();
  verdict_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggWnfEntry.verdict)
}

// optional string comment = 2;
bool SuggWnfEntry::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggWnfEntry::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggWnfEntry::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggWnfEntry::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
const ::std::string& SuggWnfEntry::comment() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
  return comment_.GetNoArena();
}
void SuggWnfEntry::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}
#if LANG_CXX11
void SuggWnfEntry::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}
#endif
void SuggWnfEntry::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}
void SuggWnfEntry::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}
::std::string* SuggWnfEntry::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggWnfEntry::release_comment() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggWnfEntry::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggWnfEntry.comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggWnfResult::kWnfQueryFieldNumber;
const int SuggWnfResult::kWnfResultFieldNumber;
const int SuggWnfResult::kWnfEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggWnfResult::SuggWnfResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggWnfResult)
}
SuggWnfResult::SuggWnfResult(const SuggWnfResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wnf_entries_(from.wnf_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wnf_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wnf_query()) {
    wnf_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wnf_query_);
  }
  if (from.has_wnf_result()) {
    wnf_result_ = new ::ru::mail::go::sugg::indexer::SuggWnfEntry(*from.wnf_result_);
  } else {
    wnf_result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggWnfResult)
}

void SuggWnfResult::SharedCtor() {
  _cached_size_ = 0;
  wnf_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wnf_result_ = NULL;
}

SuggWnfResult::~SuggWnfResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggWnfResult)
  SharedDtor();
}

void SuggWnfResult::SharedDtor() {
  wnf_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wnf_result_;
}

void SuggWnfResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggWnfResult::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggWnfResult& SuggWnfResult::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggWnfResult* SuggWnfResult::New(::google::protobuf::Arena* arena) const {
  SuggWnfResult* n = new SuggWnfResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggWnfResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wnf_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!wnf_query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wnf_query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wnf_result_ != NULL);
      wnf_result_->::ru::mail::go::sugg::indexer::SuggWnfEntry::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggWnfResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wnf_query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wnf_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wnf_query().data(), static_cast<int>(this->wnf_query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wnf_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wnf_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggWnfResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggWnfResult)
  return false;
#undef DO_
}

void SuggWnfResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wnf_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wnf_query().data(), static_cast<int>(this->wnf_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wnf_query(), output);
  }

  // optional .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->wnf_result_, output);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wnf_entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wnf_entries(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggWnfResult)
}

::google::protobuf::uint8* SuggWnfResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wnf_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wnf_query().data(), static_cast<int>(this->wnf_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wnf_query(), target);
  }

  // optional .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->wnf_result_, deterministic, target);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wnf_entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->wnf_entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggWnfResult)
  return target;
}

size_t SuggWnfResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_entries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->wnf_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wnf_entries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string wnf_query = 1;
    if (has_wnf_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wnf_query());
    }

    // optional .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_result = 2;
    if (has_wnf_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wnf_result_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggWnfResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggWnfResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggWnfResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggWnfResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggWnfResult)
    MergeFrom(*source);
  }
}

void SuggWnfResult::MergeFrom(const SuggWnfResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wnf_entries_.MergeFrom(from.wnf_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wnf_query();
      wnf_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wnf_query_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wnf_result()->::ru::mail::go::sugg::indexer::SuggWnfEntry::MergeFrom(from.wnf_result());
    }
  }
}

void SuggWnfResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggWnfResult::CopyFrom(const SuggWnfResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggWnfResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggWnfResult::IsInitialized() const {
  return true;
}

void SuggWnfResult::Swap(SuggWnfResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggWnfResult::InternalSwap(SuggWnfResult* other) {
  using std::swap;
  wnf_entries_.InternalSwap(&other->wnf_entries_);
  wnf_query_.Swap(&other->wnf_query_);
  swap(wnf_result_, other->wnf_result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggWnfResult::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggWnfResult

// optional string wnf_query = 1;
bool SuggWnfResult::has_wnf_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggWnfResult::set_has_wnf_query() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggWnfResult::clear_has_wnf_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggWnfResult::clear_wnf_query() {
  wnf_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wnf_query();
}
const ::std::string& SuggWnfResult::wnf_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
  return wnf_query_.GetNoArena();
}
void SuggWnfResult::set_wnf_query(const ::std::string& value) {
  set_has_wnf_query();
  wnf_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}
#if LANG_CXX11
void SuggWnfResult::set_wnf_query(::std::string&& value) {
  set_has_wnf_query();
  wnf_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}
#endif
void SuggWnfResult::set_wnf_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wnf_query();
  wnf_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}
void SuggWnfResult::set_wnf_query(const char* value, size_t size) {
  set_has_wnf_query();
  wnf_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}
::std::string* SuggWnfResult::mutable_wnf_query() {
  set_has_wnf_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
  return wnf_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggWnfResult::release_wnf_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
  clear_has_wnf_query();
  return wnf_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggWnfResult::set_allocated_wnf_query(::std::string* wnf_query) {
  if (wnf_query != NULL) {
    set_has_wnf_query();
  } else {
    clear_has_wnf_query();
  }
  wnf_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wnf_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_query)
}

// optional .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_result = 2;
bool SuggWnfResult::has_wnf_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggWnfResult::set_has_wnf_result() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggWnfResult::clear_has_wnf_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggWnfResult::clear_wnf_result() {
  if (wnf_result_ != NULL) wnf_result_->::ru::mail::go::sugg::indexer::SuggWnfEntry::Clear();
  clear_has_wnf_result();
}
const ::ru::mail::go::sugg::indexer::SuggWnfEntry& SuggWnfResult::wnf_result() const {
  const ::ru::mail::go::sugg::indexer::SuggWnfEntry* p = wnf_result_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_result)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggWnfEntry*>(
      &::ru::mail::go::sugg::indexer::_SuggWnfEntry_default_instance_);
}
::ru::mail::go::sugg::indexer::SuggWnfEntry* SuggWnfResult::mutable_wnf_result() {
  set_has_wnf_result();
  if (wnf_result_ == NULL) {
    wnf_result_ = new ::ru::mail::go::sugg::indexer::SuggWnfEntry;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_result)
  return wnf_result_;
}
::ru::mail::go::sugg::indexer::SuggWnfEntry* SuggWnfResult::release_wnf_result() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_result)
  clear_has_wnf_result();
  ::ru::mail::go::sugg::indexer::SuggWnfEntry* temp = wnf_result_;
  wnf_result_ = NULL;
  return temp;
}
void SuggWnfResult::set_allocated_wnf_result(::ru::mail::go::sugg::indexer::SuggWnfEntry* wnf_result) {
  delete wnf_result_;
  wnf_result_ = wnf_result;
  if (wnf_result) {
    set_has_wnf_result();
  } else {
    clear_has_wnf_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_result)
}

// repeated .ru.mail.go.sugg.indexer.SuggWnfEntry wnf_entries = 3;
int SuggWnfResult::wnf_entries_size() const {
  return wnf_entries_.size();
}
void SuggWnfResult::clear_wnf_entries() {
  wnf_entries_.Clear();
}
const ::ru::mail::go::sugg::indexer::SuggWnfEntry& SuggWnfResult::wnf_entries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return wnf_entries_.Get(index);
}
::ru::mail::go::sugg::indexer::SuggWnfEntry* SuggWnfResult::mutable_wnf_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return wnf_entries_.Mutable(index);
}
::ru::mail::go::sugg::indexer::SuggWnfEntry* SuggWnfResult::add_wnf_entries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return wnf_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggWnfEntry >*
SuggWnfResult::mutable_wnf_entries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return &wnf_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggWnfEntry >&
SuggWnfResult::wnf_entries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggWnfResult.wnf_entries)
  return wnf_entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggMobileAutocompResult::kPasteTextFieldNumber;
const int SuggMobileAutocompResult::kDisplayTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggMobileAutocompResult::SuggMobileAutocompResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
}
SuggMobileAutocompResult::SuggMobileAutocompResult(const SuggMobileAutocompResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paste_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_paste_text()) {
    paste_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paste_text_);
  }
  display_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_text()) {
    display_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_text_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
}

void SuggMobileAutocompResult::SharedCtor() {
  _cached_size_ = 0;
  paste_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SuggMobileAutocompResult::~SuggMobileAutocompResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  SharedDtor();
}

void SuggMobileAutocompResult::SharedDtor() {
  paste_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SuggMobileAutocompResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggMobileAutocompResult::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggMobileAutocompResult& SuggMobileAutocompResult::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggMobileAutocompResult* SuggMobileAutocompResult::New(::google::protobuf::Arena* arena) const {
  SuggMobileAutocompResult* n = new SuggMobileAutocompResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggMobileAutocompResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!paste_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*paste_text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!display_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_text_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggMobileAutocompResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string paste_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paste_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paste_text().data(), static_cast<int>(this->paste_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string display_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_text().data(), static_cast<int>(this->display_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  return false;
#undef DO_
}

void SuggMobileAutocompResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string paste_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paste_text().data(), static_cast<int>(this->paste_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->paste_text(), output);
  }

  // required string display_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_text().data(), static_cast<int>(this->display_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
}

::google::protobuf::uint8* SuggMobileAutocompResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string paste_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paste_text().data(), static_cast<int>(this->paste_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->paste_text(), target);
  }

  // required string display_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_text().data(), static_cast<int>(this->display_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  return target;
}

size_t SuggMobileAutocompResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  size_t total_size = 0;

  if (has_paste_text()) {
    // required string paste_text = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->paste_text());
  }

  if (has_display_text()) {
    // required string display_text = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_text());
  }

  return total_size;
}
size_t SuggMobileAutocompResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string paste_text = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->paste_text());

    // required string display_text = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_text());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggMobileAutocompResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggMobileAutocompResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggMobileAutocompResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
    MergeFrom(*source);
  }
}

void SuggMobileAutocompResult::MergeFrom(const SuggMobileAutocompResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_paste_text();
      paste_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paste_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_display_text();
      display_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_text_);
    }
  }
}

void SuggMobileAutocompResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggMobileAutocompResult::CopyFrom(const SuggMobileAutocompResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggMobileAutocompResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggMobileAutocompResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SuggMobileAutocompResult::Swap(SuggMobileAutocompResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggMobileAutocompResult::InternalSwap(SuggMobileAutocompResult* other) {
  using std::swap;
  paste_text_.Swap(&other->paste_text_);
  display_text_.Swap(&other->display_text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggMobileAutocompResult::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggMobileAutocompResult

// required string paste_text = 1;
bool SuggMobileAutocompResult::has_paste_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggMobileAutocompResult::set_has_paste_text() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggMobileAutocompResult::clear_has_paste_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggMobileAutocompResult::clear_paste_text() {
  paste_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paste_text();
}
const ::std::string& SuggMobileAutocompResult::paste_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
  return paste_text_.GetNoArena();
}
void SuggMobileAutocompResult::set_paste_text(const ::std::string& value) {
  set_has_paste_text();
  paste_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}
#if LANG_CXX11
void SuggMobileAutocompResult::set_paste_text(::std::string&& value) {
  set_has_paste_text();
  paste_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}
#endif
void SuggMobileAutocompResult::set_paste_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_paste_text();
  paste_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}
void SuggMobileAutocompResult::set_paste_text(const char* value, size_t size) {
  set_has_paste_text();
  paste_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}
::std::string* SuggMobileAutocompResult::mutable_paste_text() {
  set_has_paste_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
  return paste_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggMobileAutocompResult::release_paste_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
  clear_has_paste_text();
  return paste_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggMobileAutocompResult::set_allocated_paste_text(::std::string* paste_text) {
  if (paste_text != NULL) {
    set_has_paste_text();
  } else {
    clear_has_paste_text();
  }
  paste_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paste_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.paste_text)
}

// required string display_text = 2;
bool SuggMobileAutocompResult::has_display_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggMobileAutocompResult::set_has_display_text() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggMobileAutocompResult::clear_has_display_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggMobileAutocompResult::clear_display_text() {
  display_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_text();
}
const ::std::string& SuggMobileAutocompResult::display_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
  return display_text_.GetNoArena();
}
void SuggMobileAutocompResult::set_display_text(const ::std::string& value) {
  set_has_display_text();
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}
#if LANG_CXX11
void SuggMobileAutocompResult::set_display_text(::std::string&& value) {
  set_has_display_text();
  display_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}
#endif
void SuggMobileAutocompResult::set_display_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_text();
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}
void SuggMobileAutocompResult::set_display_text(const char* value, size_t size) {
  set_has_display_text();
  display_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}
::std::string* SuggMobileAutocompResult::mutable_display_text() {
  set_has_display_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
  return display_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggMobileAutocompResult::release_display_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
  clear_has_display_text();
  return display_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggMobileAutocompResult::set_allocated_display_text(::std::string* display_text) {
  if (display_text != NULL) {
    set_has_display_text();
  } else {
    clear_has_display_text();
  }
  display_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggMobileAutocompResult.display_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggInlineAutocompResult::kCompletionTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggInlineAutocompResult::SuggInlineAutocompResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
}
SuggInlineAutocompResult::SuggInlineAutocompResult(const SuggInlineAutocompResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  completion_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_completion_text()) {
    completion_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.completion_text_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
}

void SuggInlineAutocompResult::SharedCtor() {
  _cached_size_ = 0;
  completion_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SuggInlineAutocompResult::~SuggInlineAutocompResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  SharedDtor();
}

void SuggInlineAutocompResult::SharedDtor() {
  completion_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SuggInlineAutocompResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggInlineAutocompResult::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggInlineAutocompResult& SuggInlineAutocompResult::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggInlineAutocompResult* SuggInlineAutocompResult::New(::google::protobuf::Arena* arena) const {
  SuggInlineAutocompResult* n = new SuggInlineAutocompResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggInlineAutocompResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_completion_text()) {
    GOOGLE_DCHECK(!completion_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*completion_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggInlineAutocompResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string completion_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_completion_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->completion_text().data(), static_cast<int>(this->completion_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  return false;
#undef DO_
}

void SuggInlineAutocompResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string completion_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completion_text().data(), static_cast<int>(this->completion_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->completion_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
}

::google::protobuf::uint8* SuggInlineAutocompResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string completion_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completion_text().data(), static_cast<int>(this->completion_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->completion_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  return target;
}

size_t SuggInlineAutocompResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string completion_text = 1;
  if (has_completion_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->completion_text());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggInlineAutocompResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggInlineAutocompResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggInlineAutocompResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
    MergeFrom(*source);
  }
}

void SuggInlineAutocompResult::MergeFrom(const SuggInlineAutocompResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_completion_text()) {
    set_has_completion_text();
    completion_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.completion_text_);
  }
}

void SuggInlineAutocompResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggInlineAutocompResult::CopyFrom(const SuggInlineAutocompResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggInlineAutocompResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggInlineAutocompResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SuggInlineAutocompResult::Swap(SuggInlineAutocompResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggInlineAutocompResult::InternalSwap(SuggInlineAutocompResult* other) {
  using std::swap;
  completion_text_.Swap(&other->completion_text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggInlineAutocompResult::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggInlineAutocompResult

// required string completion_text = 1;
bool SuggInlineAutocompResult::has_completion_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggInlineAutocompResult::set_has_completion_text() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggInlineAutocompResult::clear_has_completion_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggInlineAutocompResult::clear_completion_text() {
  completion_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_completion_text();
}
const ::std::string& SuggInlineAutocompResult::completion_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
  return completion_text_.GetNoArena();
}
void SuggInlineAutocompResult::set_completion_text(const ::std::string& value) {
  set_has_completion_text();
  completion_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}
#if LANG_CXX11
void SuggInlineAutocompResult::set_completion_text(::std::string&& value) {
  set_has_completion_text();
  completion_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}
#endif
void SuggInlineAutocompResult::set_completion_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_completion_text();
  completion_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}
void SuggInlineAutocompResult::set_completion_text(const char* value, size_t size) {
  set_has_completion_text();
  completion_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}
::std::string* SuggInlineAutocompResult::mutable_completion_text() {
  set_has_completion_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
  return completion_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggInlineAutocompResult::release_completion_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
  clear_has_completion_text();
  return completion_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggInlineAutocompResult::set_allocated_completion_text(::std::string* completion_text) {
  if (completion_text != NULL) {
    set_has_completion_text();
  } else {
    clear_has_completion_text();
  }
  completion_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), completion_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggInlineAutocompResult.completion_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggTotalFreq::kTotalFieldNumber;
const int SuggTotalFreq::kCountryFieldNumber;
const int SuggTotalFreq::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggTotalFreq::SuggTotalFreq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggTotalFreq)
}
SuggTotalFreq::SuggTotalFreq(const SuggTotalFreq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&total_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggTotalFreq)
}

void SuggTotalFreq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&total_)) + sizeof(region_));
}

SuggTotalFreq::~SuggTotalFreq() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggTotalFreq)
  SharedDtor();
}

void SuggTotalFreq::SharedDtor() {
}

void SuggTotalFreq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggTotalFreq::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggTotalFreq& SuggTotalFreq::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggTotalFreq* SuggTotalFreq::New(::google::protobuf::Arena* arena) const {
  SuggTotalFreq* n = new SuggTotalFreq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggTotalFreq::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_) -
        reinterpret_cast<char*>(&total_)) + sizeof(region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggTotalFreq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 country = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_country();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &country_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggTotalFreq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggTotalFreq)
  return false;
#undef DO_
}

void SuggTotalFreq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->total(), output);
  }

  // optional uint64 country = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->country(), output);
  }

  // optional uint64 region = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->region(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggTotalFreq)
}

::google::protobuf::uint8* SuggTotalFreq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->total(), target);
  }

  // optional uint64 country = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->country(), target);
  }

  // optional uint64 region = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->region(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggTotalFreq)
  return target;
}

size_t SuggTotalFreq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total());
    }

    // optional uint64 country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->country());
    }

    // optional uint64 region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggTotalFreq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggTotalFreq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggTotalFreq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggTotalFreq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggTotalFreq)
    MergeFrom(*source);
  }
}

void SuggTotalFreq::MergeFrom(const SuggTotalFreq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      country_ = from.country_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggTotalFreq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggTotalFreq::CopyFrom(const SuggTotalFreq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggTotalFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggTotalFreq::IsInitialized() const {
  return true;
}

void SuggTotalFreq::Swap(SuggTotalFreq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggTotalFreq::InternalSwap(SuggTotalFreq* other) {
  using std::swap;
  swap(total_, other->total_);
  swap(country_, other->country_);
  swap(region_, other->region_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggTotalFreq::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggTotalFreq

// optional uint64 total = 1;
bool SuggTotalFreq::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggTotalFreq::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggTotalFreq::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggTotalFreq::clear_total() {
  total_ = GOOGLE_ULONGLONG(0);
  clear_has_total();
}
::google::protobuf::uint64 SuggTotalFreq::total() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggTotalFreq.total)
  return total_;
}
void SuggTotalFreq::set_total(::google::protobuf::uint64 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggTotalFreq.total)
}

// optional uint64 country = 2;
bool SuggTotalFreq::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggTotalFreq::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggTotalFreq::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggTotalFreq::clear_country() {
  country_ = GOOGLE_ULONGLONG(0);
  clear_has_country();
}
::google::protobuf::uint64 SuggTotalFreq::country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggTotalFreq.country)
  return country_;
}
void SuggTotalFreq::set_country(::google::protobuf::uint64 value) {
  set_has_country();
  country_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggTotalFreq.country)
}

// optional uint64 region = 3;
bool SuggTotalFreq::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggTotalFreq::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggTotalFreq::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggTotalFreq::clear_region() {
  region_ = GOOGLE_ULONGLONG(0);
  clear_has_region();
}
::google::protobuf::uint64 SuggTotalFreq::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggTotalFreq.region)
  return region_;
}
void SuggTotalFreq::set_region(::google::protobuf::uint64 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggTotalFreq.region)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggResultStat::kSkipExactMatchFieldNumber;
const int SuggResultStat::kTopResultsFieldNumber;
const int SuggResultStat::kTotalFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggResultStat::SuggResultStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggResultStat)
}
SuggResultStat::SuggResultStat(const SuggResultStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total_freq()) {
    total_freq_ = new ::ru::mail::go::sugg::indexer::SuggTotalFreq(*from.total_freq_);
  } else {
    total_freq_ = NULL;
  }
  ::memcpy(&skip_exact_match_, &from.skip_exact_match_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_results_) -
    reinterpret_cast<char*>(&skip_exact_match_)) + sizeof(top_results_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggResultStat)
}

void SuggResultStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_results_) -
      reinterpret_cast<char*>(&total_freq_)) + sizeof(top_results_));
}

SuggResultStat::~SuggResultStat() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggResultStat)
  SharedDtor();
}

void SuggResultStat::SharedDtor() {
  if (this != internal_default_instance()) delete total_freq_;
}

void SuggResultStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggResultStat::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggResultStat& SuggResultStat::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggResultStat* SuggResultStat::New(::google::protobuf::Arena* arena) const {
  SuggResultStat* n = new SuggResultStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggResultStat::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggResultStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_total_freq()) {
    GOOGLE_DCHECK(total_freq_ != NULL);
    total_freq_->::ru::mail::go::sugg::indexer::SuggTotalFreq::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&skip_exact_match_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_results_) -
        reinterpret_cast<char*>(&skip_exact_match_)) + sizeof(top_results_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggResultStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggResultStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool skip_exact_match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_skip_exact_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_exact_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 top_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_top_results();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.sugg.indexer.SuggTotalFreq total_freq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_freq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggResultStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggResultStat)
  return false;
#undef DO_
}

void SuggResultStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggResultStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool skip_exact_match = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->skip_exact_match(), output);
  }

  // optional uint32 top_results = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->top_results(), output);
  }

  // optional .ru.mail.go.sugg.indexer.SuggTotalFreq total_freq = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->total_freq_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggResultStat)
}

::google::protobuf::uint8* SuggResultStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggResultStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool skip_exact_match = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->skip_exact_match(), target);
  }

  // optional uint32 top_results = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top_results(), target);
  }

  // optional .ru.mail.go.sugg.indexer.SuggTotalFreq total_freq = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->total_freq_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggResultStat)
  return target;
}

size_t SuggResultStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggResultStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ru.mail.go.sugg.indexer.SuggTotalFreq total_freq = 4;
    if (has_total_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_freq_);
    }

    // optional bool skip_exact_match = 1;
    if (has_skip_exact_match()) {
      total_size += 1 + 1;
    }

    // optional uint32 top_results = 3;
    if (has_top_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_results());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggResultStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggResultStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggResultStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggResultStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggResultStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggResultStat)
    MergeFrom(*source);
  }
}

void SuggResultStat::MergeFrom(const SuggResultStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggResultStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_total_freq()->::ru::mail::go::sugg::indexer::SuggTotalFreq::MergeFrom(from.total_freq());
    }
    if (cached_has_bits & 0x00000002u) {
      skip_exact_match_ = from.skip_exact_match_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_results_ = from.top_results_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggResultStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggResultStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggResultStat::CopyFrom(const SuggResultStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggResultStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggResultStat::IsInitialized() const {
  return true;
}

void SuggResultStat::Swap(SuggResultStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggResultStat::InternalSwap(SuggResultStat* other) {
  using std::swap;
  swap(total_freq_, other->total_freq_);
  swap(skip_exact_match_, other->skip_exact_match_);
  swap(top_results_, other->top_results_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggResultStat::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggResultStat

// optional bool skip_exact_match = 1;
bool SuggResultStat::has_skip_exact_match() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggResultStat::set_has_skip_exact_match() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggResultStat::clear_has_skip_exact_match() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggResultStat::clear_skip_exact_match() {
  skip_exact_match_ = false;
  clear_has_skip_exact_match();
}
bool SuggResultStat::skip_exact_match() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResultStat.skip_exact_match)
  return skip_exact_match_;
}
void SuggResultStat::set_skip_exact_match(bool value) {
  set_has_skip_exact_match();
  skip_exact_match_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResultStat.skip_exact_match)
}

// optional uint32 top_results = 3;
bool SuggResultStat::has_top_results() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggResultStat::set_has_top_results() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggResultStat::clear_has_top_results() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggResultStat::clear_top_results() {
  top_results_ = 0u;
  clear_has_top_results();
}
::google::protobuf::uint32 SuggResultStat::top_results() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResultStat.top_results)
  return top_results_;
}
void SuggResultStat::set_top_results(::google::protobuf::uint32 value) {
  set_has_top_results();
  top_results_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResultStat.top_results)
}

// optional .ru.mail.go.sugg.indexer.SuggTotalFreq total_freq = 4;
bool SuggResultStat::has_total_freq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggResultStat::set_has_total_freq() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggResultStat::clear_has_total_freq() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggResultStat::clear_total_freq() {
  if (total_freq_ != NULL) total_freq_->::ru::mail::go::sugg::indexer::SuggTotalFreq::Clear();
  clear_has_total_freq();
}
const ::ru::mail::go::sugg::indexer::SuggTotalFreq& SuggResultStat::total_freq() const {
  const ::ru::mail::go::sugg::indexer::SuggTotalFreq* p = total_freq_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResultStat.total_freq)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggTotalFreq*>(
      &::ru::mail::go::sugg::indexer::_SuggTotalFreq_default_instance_);
}
::ru::mail::go::sugg::indexer::SuggTotalFreq* SuggResultStat::mutable_total_freq() {
  set_has_total_freq();
  if (total_freq_ == NULL) {
    total_freq_ = new ::ru::mail::go::sugg::indexer::SuggTotalFreq;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResultStat.total_freq)
  return total_freq_;
}
::ru::mail::go::sugg::indexer::SuggTotalFreq* SuggResultStat::release_total_freq() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResultStat.total_freq)
  clear_has_total_freq();
  ::ru::mail::go::sugg::indexer::SuggTotalFreq* temp = total_freq_;
  total_freq_ = NULL;
  return temp;
}
void SuggResultStat::set_allocated_total_freq(::ru::mail::go::sugg::indexer::SuggTotalFreq* total_freq) {
  delete total_freq_;
  total_freq_ = total_freq;
  if (total_freq) {
    set_has_total_freq();
  } else {
    clear_has_total_freq();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResultStat.total_freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuggResults::kQueryFieldNumber;
const int SuggResults::kRidFieldNumber;
const int SuggResults::kQueriesFieldNumber;
const int SuggResults::kSitesFieldNumber;
const int SuggResults::kErrorFieldNumber;
const int SuggResults::kStatFieldNumber;
const int SuggResults::kWnfResultFieldNumber;
const int SuggResults::kMobileAutocompsFieldNumber;
const int SuggResults::kInlineAutocompsFieldNumber;
const int SuggResults::kEndRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuggResults::SuggResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_suggests_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.sugg.indexer.SuggResults)
}
SuggResults::SuggResults(const SuggResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      queries_(from.queries_),
      sites_(from.sites_),
      mobile_autocomps_(from.mobile_autocomps_),
      inline_autocomps_(from.inline_autocomps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.has_wnf_result()) {
    wnf_result_ = new ::ru::mail::go::sugg::indexer::SuggWnfResult(*from.wnf_result_);
  } else {
    wnf_result_ = NULL;
  }
  if (from.has_stat()) {
    stat_ = new ::ru::mail::go::sugg::indexer::SuggResultStat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  ::memcpy(&end_ratio_, &from.end_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&end_ratio_)) + sizeof(rid_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.sugg.indexer.SuggResults)
}

void SuggResults::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wnf_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rid_) -
      reinterpret_cast<char*>(&wnf_result_)) + sizeof(rid_));
}

SuggResults::~SuggResults() {
  // @@protoc_insertion_point(destructor:ru.mail.go.sugg.indexer.SuggResults)
  SharedDtor();
}

void SuggResults::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wnf_result_;
  if (this != internal_default_instance()) delete stat_;
}

void SuggResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggResults::descriptor() {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuggResults& SuggResults::default_instance() {
  protobuf_suggests_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuggResults* SuggResults::New(::google::protobuf::Arena* arena) const {
  SuggResults* n = new SuggResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuggResults::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.sugg.indexer.SuggResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  sites_.Clear();
  mobile_autocomps_.Clear();
  inline_autocomps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!error_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(wnf_result_ != NULL);
      wnf_result_->::ru::mail::go::sugg::indexer::SuggWnfResult::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stat_ != NULL);
      stat_->::ru::mail::go::sugg::indexer::SuggResultStat::Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&end_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rid_) -
        reinterpret_cast<char*>(&end_ratio_)) + sizeof(rid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuggResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.sugg.indexer.SuggResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.sugg.indexer.SuggQueryResult queries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.SuggSiteResult sites = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggResults.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.sugg.indexer.SuggResults.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.sugg.indexer.SuggWnfResult wnf_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wnf_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.SuggMobileAutocompResult mobile_autocomps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mobile_autocomps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.sugg.indexer.SuggResultStat stat = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.sugg.indexer.SuggInlineAutocompResult inline_autocomps = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inline_autocomps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_ratio = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_end_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.sugg.indexer.SuggResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.sugg.indexer.SuggResults)
  return false;
#undef DO_
}

void SuggResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.sugg.indexer.SuggResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.sugg.indexer.SuggQueryResult queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queries(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggSiteResult sites = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sites_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sites(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggResults.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // optional string query = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggResults.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->query(), output);
  }

  // optional .ru.mail.go.sugg.indexer.SuggWnfResult wnf_result = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->wnf_result_, output);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggMobileAutocompResult mobile_autocomps = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mobile_autocomps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mobile_autocomps(static_cast<int>(i)), output);
  }

  // optional uint32 rid = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rid(), output);
  }

  // optional .ru.mail.go.sugg.indexer.SuggResultStat stat = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stat_, output);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggInlineAutocompResult inline_autocomps = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inline_autocomps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->inline_autocomps(static_cast<int>(i)), output);
  }

  // optional double end_ratio = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->end_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.sugg.indexer.SuggResults)
}

::google::protobuf::uint8* SuggResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.sugg.indexer.SuggResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.sugg.indexer.SuggQueryResult queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->queries(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggSiteResult sites = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sites_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sites(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggResults.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // optional string query = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.sugg.indexer.SuggResults.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->query(), target);
  }

  // optional .ru.mail.go.sugg.indexer.SuggWnfResult wnf_result = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->wnf_result_, deterministic, target);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggMobileAutocompResult mobile_autocomps = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mobile_autocomps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->mobile_autocomps(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 rid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rid(), target);
  }

  // optional .ru.mail.go.sugg.indexer.SuggResultStat stat = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->stat_, deterministic, target);
  }

  // repeated .ru.mail.go.sugg.indexer.SuggInlineAutocompResult inline_autocomps = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inline_autocomps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->inline_autocomps(static_cast<int>(i)), deterministic, target);
  }

  // optional double end_ratio = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->end_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.sugg.indexer.SuggResults)
  return target;
}

size_t SuggResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.sugg.indexer.SuggResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.sugg.indexer.SuggQueryResult queries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queries(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.sugg.indexer.SuggSiteResult sites = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sites_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sites(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.sugg.indexer.SuggMobileAutocompResult mobile_autocomps = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->mobile_autocomps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile_autocomps(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.sugg.indexer.SuggInlineAutocompResult inline_autocomps = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->inline_autocomps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inline_autocomps(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional string query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional .ru.mail.go.sugg.indexer.SuggWnfResult wnf_result = 5;
    if (has_wnf_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wnf_result_);
    }

    // optional .ru.mail.go.sugg.indexer.SuggResultStat stat = 8;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stat_);
    }

    // optional double end_ratio = 10;
    if (has_end_ratio()) {
      total_size += 1 + 8;
    }

    // optional uint32 rid = 7;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.sugg.indexer.SuggResults)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuggResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.sugg.indexer.SuggResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.sugg.indexer.SuggResults)
    MergeFrom(*source);
  }
}

void SuggResults::MergeFrom(const SuggResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.sugg.indexer.SuggResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  sites_.MergeFrom(from.sites_);
  mobile_autocomps_.MergeFrom(from.mobile_autocomps_);
  inline_autocomps_.MergeFrom(from.inline_autocomps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_wnf_result()->::ru::mail::go::sugg::indexer::SuggWnfResult::MergeFrom(from.wnf_result());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_stat()->::ru::mail::go::sugg::indexer::SuggResultStat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000010u) {
      end_ratio_ = from.end_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      rid_ = from.rid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.sugg.indexer.SuggResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggResults::CopyFrom(const SuggResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.sugg.indexer.SuggResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggResults::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->queries())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mobile_autocomps())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->inline_autocomps())) return false;
  return true;
}

void SuggResults::Swap(SuggResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuggResults::InternalSwap(SuggResults* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  sites_.InternalSwap(&other->sites_);
  mobile_autocomps_.InternalSwap(&other->mobile_autocomps_);
  inline_autocomps_.InternalSwap(&other->inline_autocomps_);
  error_.Swap(&other->error_);
  query_.Swap(&other->query_);
  swap(wnf_result_, other->wnf_result_);
  swap(stat_, other->stat_);
  swap(end_ratio_, other->end_ratio_);
  swap(rid_, other->rid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuggResults::GetMetadata() const {
  protobuf_suggests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_suggests_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuggResults

// optional string query = 4;
bool SuggResults::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuggResults::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void SuggResults::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuggResults::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& SuggResults::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.query)
  return query_.GetNoArena();
}
void SuggResults::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResults.query)
}
#if LANG_CXX11
void SuggResults::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggResults.query)
}
#endif
void SuggResults::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggResults.query)
}
void SuggResults::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggResults.query)
}
::std::string* SuggResults::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggResults::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResults.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggResults::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResults.query)
}

// optional uint32 rid = 7;
bool SuggResults::has_rid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SuggResults::set_has_rid() {
  _has_bits_[0] |= 0x00000020u;
}
void SuggResults::clear_has_rid() {
  _has_bits_[0] &= ~0x00000020u;
}
void SuggResults::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 SuggResults::rid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.rid)
  return rid_;
}
void SuggResults::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResults.rid)
}

// repeated .ru.mail.go.sugg.indexer.SuggQueryResult queries = 1;
int SuggResults::queries_size() const {
  return queries_.size();
}
void SuggResults::clear_queries() {
  queries_.Clear();
}
const ::ru::mail::go::sugg::indexer::SuggQueryResult& SuggResults::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.queries)
  return queries_.Get(index);
}
::ru::mail::go::sugg::indexer::SuggQueryResult* SuggResults::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.queries)
  return queries_.Mutable(index);
}
::ru::mail::go::sugg::indexer::SuggQueryResult* SuggResults::add_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggResults.queries)
  return queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult >*
SuggResults::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggResults.queries)
  return &queries_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggQueryResult >&
SuggResults::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggResults.queries)
  return queries_;
}

// repeated .ru.mail.go.sugg.indexer.SuggSiteResult sites = 2;
int SuggResults::sites_size() const {
  return sites_.size();
}
void SuggResults::clear_sites() {
  sites_.Clear();
}
const ::ru::mail::go::sugg::indexer::SuggSiteResult& SuggResults::sites(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.sites)
  return sites_.Get(index);
}
::ru::mail::go::sugg::indexer::SuggSiteResult* SuggResults::mutable_sites(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.sites)
  return sites_.Mutable(index);
}
::ru::mail::go::sugg::indexer::SuggSiteResult* SuggResults::add_sites() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggResults.sites)
  return sites_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggSiteResult >*
SuggResults::mutable_sites() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggResults.sites)
  return &sites_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggSiteResult >&
SuggResults::sites() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggResults.sites)
  return sites_;
}

// optional string error = 3;
bool SuggResults::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuggResults::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void SuggResults::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuggResults::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& SuggResults::error() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.error)
  return error_.GetNoArena();
}
void SuggResults::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResults.error)
}
#if LANG_CXX11
void SuggResults::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.sugg.indexer.SuggResults.error)
}
#endif
void SuggResults::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.sugg.indexer.SuggResults.error)
}
void SuggResults::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.sugg.indexer.SuggResults.error)
}
::std::string* SuggResults::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SuggResults::release_error() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResults.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SuggResults::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResults.error)
}

// optional .ru.mail.go.sugg.indexer.SuggResultStat stat = 8;
bool SuggResults::has_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SuggResults::set_has_stat() {
  _has_bits_[0] |= 0x00000008u;
}
void SuggResults::clear_has_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
void SuggResults::clear_stat() {
  if (stat_ != NULL) stat_->::ru::mail::go::sugg::indexer::SuggResultStat::Clear();
  clear_has_stat();
}
const ::ru::mail::go::sugg::indexer::SuggResultStat& SuggResults::stat() const {
  const ::ru::mail::go::sugg::indexer::SuggResultStat* p = stat_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggResultStat*>(
      &::ru::mail::go::sugg::indexer::_SuggResultStat_default_instance_);
}
::ru::mail::go::sugg::indexer::SuggResultStat* SuggResults::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    stat_ = new ::ru::mail::go::sugg::indexer::SuggResultStat;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.stat)
  return stat_;
}
::ru::mail::go::sugg::indexer::SuggResultStat* SuggResults::release_stat() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResults.stat)
  clear_has_stat();
  ::ru::mail::go::sugg::indexer::SuggResultStat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void SuggResults::set_allocated_stat(::ru::mail::go::sugg::indexer::SuggResultStat* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResults.stat)
}

// optional .ru.mail.go.sugg.indexer.SuggWnfResult wnf_result = 5;
bool SuggResults::has_wnf_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuggResults::set_has_wnf_result() {
  _has_bits_[0] |= 0x00000004u;
}
void SuggResults::clear_has_wnf_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuggResults::clear_wnf_result() {
  if (wnf_result_ != NULL) wnf_result_->::ru::mail::go::sugg::indexer::SuggWnfResult::Clear();
  clear_has_wnf_result();
}
const ::ru::mail::go::sugg::indexer::SuggWnfResult& SuggResults::wnf_result() const {
  const ::ru::mail::go::sugg::indexer::SuggWnfResult* p = wnf_result_;
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.wnf_result)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::sugg::indexer::SuggWnfResult*>(
      &::ru::mail::go::sugg::indexer::_SuggWnfResult_default_instance_);
}
::ru::mail::go::sugg::indexer::SuggWnfResult* SuggResults::mutable_wnf_result() {
  set_has_wnf_result();
  if (wnf_result_ == NULL) {
    wnf_result_ = new ::ru::mail::go::sugg::indexer::SuggWnfResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.wnf_result)
  return wnf_result_;
}
::ru::mail::go::sugg::indexer::SuggWnfResult* SuggResults::release_wnf_result() {
  // @@protoc_insertion_point(field_release:ru.mail.go.sugg.indexer.SuggResults.wnf_result)
  clear_has_wnf_result();
  ::ru::mail::go::sugg::indexer::SuggWnfResult* temp = wnf_result_;
  wnf_result_ = NULL;
  return temp;
}
void SuggResults::set_allocated_wnf_result(::ru::mail::go::sugg::indexer::SuggWnfResult* wnf_result) {
  delete wnf_result_;
  wnf_result_ = wnf_result;
  if (wnf_result) {
    set_has_wnf_result();
  } else {
    clear_has_wnf_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.sugg.indexer.SuggResults.wnf_result)
}

// repeated .ru.mail.go.sugg.indexer.SuggMobileAutocompResult mobile_autocomps = 6;
int SuggResults::mobile_autocomps_size() const {
  return mobile_autocomps_.size();
}
void SuggResults::clear_mobile_autocomps() {
  mobile_autocomps_.Clear();
}
const ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult& SuggResults::mobile_autocomps(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return mobile_autocomps_.Get(index);
}
::ru::mail::go::sugg::indexer::SuggMobileAutocompResult* SuggResults::mutable_mobile_autocomps(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return mobile_autocomps_.Mutable(index);
}
::ru::mail::go::sugg::indexer::SuggMobileAutocompResult* SuggResults::add_mobile_autocomps() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return mobile_autocomps_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult >*
SuggResults::mutable_mobile_autocomps() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return &mobile_autocomps_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggMobileAutocompResult >&
SuggResults::mobile_autocomps() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggResults.mobile_autocomps)
  return mobile_autocomps_;
}

// repeated .ru.mail.go.sugg.indexer.SuggInlineAutocompResult inline_autocomps = 9;
int SuggResults::inline_autocomps_size() const {
  return inline_autocomps_.size();
}
void SuggResults::clear_inline_autocomps() {
  inline_autocomps_.Clear();
}
const ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult& SuggResults::inline_autocomps(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return inline_autocomps_.Get(index);
}
::ru::mail::go::sugg::indexer::SuggInlineAutocompResult* SuggResults::mutable_inline_autocomps(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return inline_autocomps_.Mutable(index);
}
::ru::mail::go::sugg::indexer::SuggInlineAutocompResult* SuggResults::add_inline_autocomps() {
  // @@protoc_insertion_point(field_add:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return inline_autocomps_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult >*
SuggResults::mutable_inline_autocomps() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return &inline_autocomps_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::sugg::indexer::SuggInlineAutocompResult >&
SuggResults::inline_autocomps() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.sugg.indexer.SuggResults.inline_autocomps)
  return inline_autocomps_;
}

// optional double end_ratio = 10;
bool SuggResults::has_end_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SuggResults::set_has_end_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
void SuggResults::clear_has_end_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
void SuggResults::clear_end_ratio() {
  end_ratio_ = 0;
  clear_has_end_ratio();
}
double SuggResults::end_ratio() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.sugg.indexer.SuggResults.end_ratio)
  return end_ratio_;
}
void SuggResults::set_end_ratio(double value) {
  set_has_end_ratio();
  end_ratio_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.sugg.indexer.SuggResults.end_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace indexer
}  // namespace sugg
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
