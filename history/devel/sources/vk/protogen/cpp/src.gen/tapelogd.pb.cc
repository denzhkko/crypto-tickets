// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tapelogd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tapelogd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class UserSourceStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserSourceStats>
     _instance;
} _UserSourceStats_default_instance_;
class SourceStatsListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceStatsList>
     _instance;
} _SourceStatsList_default_instance_;
class UserCategoryStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserCategoryStats>
     _instance;
} _UserCategoryStats_default_instance_;
class DocumentIDDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentID>
     _instance;
} _DocumentID_default_instance_;
class DocumentIDListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentIDList>
     _instance;
} _DocumentIDList_default_instance_;
class UserLikesTapeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserLikesTape>
     _instance;
} _UserLikesTape_default_instance_;
class UserViewDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserView>
     _instance;
} _UserView_default_instance_;

namespace protobuf_tapelogd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSourceStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSourceStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSourceStats, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSourceStats, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSourceStats, opens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSourceStats, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSourceStats, dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSourceStats, shares_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceStatsList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceStatsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceStatsList, sources_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, opens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCategoryStats, sources_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentID, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentID, source_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentIDList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentIDList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentIDList, documents_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLikesTape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLikesTape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLikesTape, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLikesTape, dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLikesTape, liked_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLikesTape, disliked_docs_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserView, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserView, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserView, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserView, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserView, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserView, action_type_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(UserSourceStats)},
  { 17, 23, sizeof(SourceStatsList)},
  { 24, 36, sizeof(UserCategoryStats)},
  { 43, 50, sizeof(DocumentID)},
  { 52, 58, sizeof(DocumentIDList)},
  { 59, 68, sizeof(UserLikesTape)},
  { 72, 82, sizeof(UserView)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserSourceStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceStatsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserCategoryStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentIDList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserLikesTape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserView_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tapelogd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UserSourceStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserSourceStats_default_instance_);_SourceStatsList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceStatsList_default_instance_);_UserCategoryStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserCategoryStats_default_instance_);_DocumentID_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentID_default_instance_);_DocumentIDList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentIDList_default_instance_);_UserLikesTape_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserLikesTape_default_instance_);_UserView_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserView_default_instance_);_UserCategoryStats_default_instance_._instance.get_mutable()->sources_ = const_cast< ::SourceStatsList*>(
      ::SourceStatsList::internal_default_instance());
  _UserLikesTape_default_instance_._instance.get_mutable()->likes_ = const_cast< ::DocumentIDList*>(
      ::DocumentIDList::internal_default_instance());
  _UserLikesTape_default_instance_._instance.get_mutable()->dislikes_ = const_cast< ::DocumentIDList*>(
      ::DocumentIDList::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016tapelogd.proto\"{\n\017UserSourceStats\022\n\n\002i"
      "d\030\001 \001(\004\022\020\n\005views\030\002 \001(\r:\0010\022\020\n\005opens\030\003 \001(\r"
      ":\0010\022\020\n\005likes\030\004 \001(\r:\0010\022\023\n\010dislikes\030\005 \001(\r:"
      "\0010\022\021\n\006shares\030\006 \001(\r:\0010\"4\n\017SourceStatsList"
      "\022!\n\007sources\030\001 \003(\0132\020.UserSourceStats\"\240\001\n\021"
      "UserCategoryStats\022\n\n\002id\030\001 \001(\004\022\020\n\005views\030\002"
      " \001(\r:\0010\022\020\n\005opens\030\003 \001(\r:\0010\022\020\n\005likes\030\004 \001(\r"
      ":\0010\022\023\n\010dislikes\030\005 \001(\r:\0010\022\021\n\006shares\030\006 \001(\r"
      ":\0010\022!\n\007sources\030\n \001(\0132\020.SourceStatsList\"/"
      "\n\nDocumentID\022\016\n\006doc_id\030\001 \002(\004\022\021\n\tsource_i"
      "d\030\002 \001(\004\"0\n\016DocumentIDList\022\036\n\tdocuments\030\001"
      " \003(\0132\013.DocumentID\"\205\001\n\rUserLikesTape\022\036\n\005l"
      "ikes\030\001 \001(\0132\017.DocumentIDList\022!\n\010dislikes\030"
      "\002 \001(\0132\017.DocumentIDList\022\026\n\nliked_docs\030\003 \003"
      "(\004B\002\020\001\022\031\n\rdisliked_docs\030\004 \003(\004B\002\020\001\"m\n\010Use"
      "rView\022\017\n\007user_id\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\016\n\006d"
      "oc_id\030\003 \001(\003\022\021\n\ttimestamp\030\004 \001(\003\022 \n\013action"
      "_type\030\005 \001(\0162\013.ActionType*\221\001\n\nActionType\022"
      "\014\n\010APP_OPEN\020\001\022\010\n\004VIEW\020\002\022\013\n\007VIEW_IN\020\003\022\014\n\010"
      "VIEW_OUT\020\004\022\010\n\004OPEN\020\005\022\t\n\005CLOSE\020\006\022\010\n\004LIKE\020"
      "\007\022\n\n\006UNLIKE\020\010\022\013\n\007DISLIKE\020\t\022\r\n\tUNDISLIKE\020"
      "\n\022\t\n\005SHARE\020\013B$\n\030ru.mail.go.webbase.blobs"
      "B\010TapeLogd"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 890);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tapelogd.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tapelogd_2eproto

const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_enum_descriptors[0];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSourceStats::kIdFieldNumber;
const int UserSourceStats::kViewsFieldNumber;
const int UserSourceStats::kOpensFieldNumber;
const int UserSourceStats::kLikesFieldNumber;
const int UserSourceStats::kDislikesFieldNumber;
const int UserSourceStats::kSharesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSourceStats::UserSourceStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tapelogd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserSourceStats)
}
UserSourceStats::UserSourceStats(const UserSourceStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shares_) -
    reinterpret_cast<char*>(&id_)) + sizeof(shares_));
  // @@protoc_insertion_point(copy_constructor:UserSourceStats)
}

void UserSourceStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shares_) -
      reinterpret_cast<char*>(&id_)) + sizeof(shares_));
}

UserSourceStats::~UserSourceStats() {
  // @@protoc_insertion_point(destructor:UserSourceStats)
  SharedDtor();
}

void UserSourceStats::SharedDtor() {
}

void UserSourceStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSourceStats::descriptor() {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserSourceStats& UserSourceStats::default_instance() {
  protobuf_tapelogd_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserSourceStats* UserSourceStats::New(::google::protobuf::Arena* arena) const {
  UserSourceStats* n = new UserSourceStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserSourceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:UserSourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shares_) -
        reinterpret_cast<char*>(&id_)) + sizeof(shares_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserSourceStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserSourceStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 opens = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_opens();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 likes = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dislikes = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_dislikes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dislikes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shares = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserSourceStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserSourceStats)
  return false;
#undef DO_
}

void UserSourceStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserSourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 views = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->views(), output);
  }

  // optional uint32 opens = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opens(), output);
  }

  // optional uint32 likes = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->likes(), output);
  }

  // optional uint32 dislikes = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dislikes(), output);
  }

  // optional uint32 shares = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->shares(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserSourceStats)
}

::google::protobuf::uint8* UserSourceStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UserSourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 views = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->views(), target);
  }

  // optional uint32 opens = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opens(), target);
  }

  // optional uint32 likes = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->likes(), target);
  }

  // optional uint32 dislikes = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dislikes(), target);
  }

  // optional uint32 shares = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->shares(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserSourceStats)
  return target;
}

size_t UserSourceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserSourceStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 views = 2 [default = 0];
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

    // optional uint32 opens = 3 [default = 0];
    if (has_opens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opens());
    }

    // optional uint32 likes = 4 [default = 0];
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likes());
    }

    // optional uint32 dislikes = 5 [default = 0];
    if (has_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dislikes());
    }

    // optional uint32 shares = 6 [default = 0];
    if (has_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shares());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSourceStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserSourceStats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSourceStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSourceStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserSourceStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserSourceStats)
    MergeFrom(*source);
  }
}

void UserSourceStats::MergeFrom(const UserSourceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserSourceStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000004u) {
      opens_ = from.opens_;
    }
    if (cached_has_bits & 0x00000008u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000010u) {
      dislikes_ = from.dislikes_;
    }
    if (cached_has_bits & 0x00000020u) {
      shares_ = from.shares_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserSourceStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserSourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSourceStats::CopyFrom(const UserSourceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserSourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSourceStats::IsInitialized() const {
  return true;
}

void UserSourceStats::Swap(UserSourceStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserSourceStats::InternalSwap(UserSourceStats* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(views_, other->views_);
  swap(opens_, other->opens_);
  swap(likes_, other->likes_);
  swap(dislikes_, other->dislikes_);
  swap(shares_, other->shares_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserSourceStats::GetMetadata() const {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserSourceStats

// optional uint64 id = 1;
bool UserSourceStats::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserSourceStats::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserSourceStats::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserSourceStats::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 UserSourceStats::id() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.id)
  return id_;
}
void UserSourceStats::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.id)
}

// optional uint32 views = 2 [default = 0];
bool UserSourceStats::has_views() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserSourceStats::set_has_views() {
  _has_bits_[0] |= 0x00000002u;
}
void UserSourceStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserSourceStats::clear_views() {
  views_ = 0u;
  clear_has_views();
}
::google::protobuf::uint32 UserSourceStats::views() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.views)
  return views_;
}
void UserSourceStats::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.views)
}

// optional uint32 opens = 3 [default = 0];
bool UserSourceStats::has_opens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserSourceStats::set_has_opens() {
  _has_bits_[0] |= 0x00000004u;
}
void UserSourceStats::clear_has_opens() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserSourceStats::clear_opens() {
  opens_ = 0u;
  clear_has_opens();
}
::google::protobuf::uint32 UserSourceStats::opens() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.opens)
  return opens_;
}
void UserSourceStats::set_opens(::google::protobuf::uint32 value) {
  set_has_opens();
  opens_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.opens)
}

// optional uint32 likes = 4 [default = 0];
bool UserSourceStats::has_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserSourceStats::set_has_likes() {
  _has_bits_[0] |= 0x00000008u;
}
void UserSourceStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserSourceStats::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
::google::protobuf::uint32 UserSourceStats::likes() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.likes)
  return likes_;
}
void UserSourceStats::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.likes)
}

// optional uint32 dislikes = 5 [default = 0];
bool UserSourceStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserSourceStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000010u;
}
void UserSourceStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserSourceStats::clear_dislikes() {
  dislikes_ = 0u;
  clear_has_dislikes();
}
::google::protobuf::uint32 UserSourceStats::dislikes() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.dislikes)
  return dislikes_;
}
void UserSourceStats::set_dislikes(::google::protobuf::uint32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.dislikes)
}

// optional uint32 shares = 6 [default = 0];
bool UserSourceStats::has_shares() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserSourceStats::set_has_shares() {
  _has_bits_[0] |= 0x00000020u;
}
void UserSourceStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserSourceStats::clear_shares() {
  shares_ = 0u;
  clear_has_shares();
}
::google::protobuf::uint32 UserSourceStats::shares() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.shares)
  return shares_;
}
void UserSourceStats::set_shares(::google::protobuf::uint32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.shares)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceStatsList::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceStatsList::SourceStatsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tapelogd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SourceStatsList)
}
SourceStatsList::SourceStatsList(const SourceStatsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sources_(from.sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SourceStatsList)
}

void SourceStatsList::SharedCtor() {
  _cached_size_ = 0;
}

SourceStatsList::~SourceStatsList() {
  // @@protoc_insertion_point(destructor:SourceStatsList)
  SharedDtor();
}

void SourceStatsList::SharedDtor() {
}

void SourceStatsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceStatsList::descriptor() {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceStatsList& SourceStatsList::default_instance() {
  protobuf_tapelogd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceStatsList* SourceStatsList::New(::google::protobuf::Arena* arena) const {
  SourceStatsList* n = new SourceStatsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceStatsList::Clear() {
// @@protoc_insertion_point(message_clear_start:SourceStatsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceStatsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SourceStatsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserSourceStats sources = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SourceStatsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SourceStatsList)
  return false;
#undef DO_
}

void SourceStatsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SourceStatsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserSourceStats sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sources(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SourceStatsList)
}

::google::protobuf::uint8* SourceStatsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SourceStatsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserSourceStats sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sources(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SourceStatsList)
  return target;
}

size_t SourceStatsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SourceStatsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .UserSourceStats sources = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sources(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceStatsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SourceStatsList)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceStatsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceStatsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SourceStatsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SourceStatsList)
    MergeFrom(*source);
  }
}

void SourceStatsList::MergeFrom(const SourceStatsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SourceStatsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
}

void SourceStatsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SourceStatsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceStatsList::CopyFrom(const SourceStatsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SourceStatsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceStatsList::IsInitialized() const {
  return true;
}

void SourceStatsList::Swap(SourceStatsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceStatsList::InternalSwap(SourceStatsList* other) {
  using std::swap;
  sources_.InternalSwap(&other->sources_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceStatsList::GetMetadata() const {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceStatsList

// repeated .UserSourceStats sources = 1;
int SourceStatsList::sources_size() const {
  return sources_.size();
}
void SourceStatsList::clear_sources() {
  sources_.Clear();
}
const ::UserSourceStats& SourceStatsList::sources(int index) const {
  // @@protoc_insertion_point(field_get:SourceStatsList.sources)
  return sources_.Get(index);
}
::UserSourceStats* SourceStatsList::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:SourceStatsList.sources)
  return sources_.Mutable(index);
}
::UserSourceStats* SourceStatsList::add_sources() {
  // @@protoc_insertion_point(field_add:SourceStatsList.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::UserSourceStats >*
SourceStatsList::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:SourceStatsList.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::UserSourceStats >&
SourceStatsList::sources() const {
  // @@protoc_insertion_point(field_list:SourceStatsList.sources)
  return sources_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserCategoryStats::kIdFieldNumber;
const int UserCategoryStats::kViewsFieldNumber;
const int UserCategoryStats::kOpensFieldNumber;
const int UserCategoryStats::kLikesFieldNumber;
const int UserCategoryStats::kDislikesFieldNumber;
const int UserCategoryStats::kSharesFieldNumber;
const int UserCategoryStats::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserCategoryStats::UserCategoryStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tapelogd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserCategoryStats)
}
UserCategoryStats::UserCategoryStats(const UserCategoryStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sources()) {
    sources_ = new ::SourceStatsList(*from.sources_);
  } else {
    sources_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shares_) -
    reinterpret_cast<char*>(&id_)) + sizeof(shares_));
  // @@protoc_insertion_point(copy_constructor:UserCategoryStats)
}

void UserCategoryStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shares_) -
      reinterpret_cast<char*>(&sources_)) + sizeof(shares_));
}

UserCategoryStats::~UserCategoryStats() {
  // @@protoc_insertion_point(destructor:UserCategoryStats)
  SharedDtor();
}

void UserCategoryStats::SharedDtor() {
  if (this != internal_default_instance()) delete sources_;
}

void UserCategoryStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCategoryStats::descriptor() {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserCategoryStats& UserCategoryStats::default_instance() {
  protobuf_tapelogd_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserCategoryStats* UserCategoryStats::New(::google::protobuf::Arena* arena) const {
  UserCategoryStats* n = new UserCategoryStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserCategoryStats::Clear() {
// @@protoc_insertion_point(message_clear_start:UserCategoryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_sources()) {
    GOOGLE_DCHECK(sources_ != NULL);
    sources_->::SourceStatsList::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 126u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shares_) -
        reinterpret_cast<char*>(&id_)) + sizeof(shares_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserCategoryStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserCategoryStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 opens = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_opens();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 likes = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dislikes = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_dislikes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dislikes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shares = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SourceStatsList sources = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserCategoryStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserCategoryStats)
  return false;
#undef DO_
}

void UserCategoryStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserCategoryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 views = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->views(), output);
  }

  // optional uint32 opens = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opens(), output);
  }

  // optional uint32 likes = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->likes(), output);
  }

  // optional uint32 dislikes = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dislikes(), output);
  }

  // optional uint32 shares = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->shares(), output);
  }

  // optional .SourceStatsList sources = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->sources_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserCategoryStats)
}

::google::protobuf::uint8* UserCategoryStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UserCategoryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 views = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->views(), target);
  }

  // optional uint32 opens = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opens(), target);
  }

  // optional uint32 likes = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->likes(), target);
  }

  // optional uint32 dislikes = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dislikes(), target);
  }

  // optional uint32 shares = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->shares(), target);
  }

  // optional .SourceStatsList sources = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->sources_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserCategoryStats)
  return target;
}

size_t UserCategoryStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserCategoryStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .SourceStatsList sources = 10;
    if (has_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sources_);
    }

    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 views = 2 [default = 0];
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

    // optional uint32 opens = 3 [default = 0];
    if (has_opens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opens());
    }

    // optional uint32 likes = 4 [default = 0];
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likes());
    }

    // optional uint32 dislikes = 5 [default = 0];
    if (has_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dislikes());
    }

    // optional uint32 shares = 6 [default = 0];
    if (has_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shares());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCategoryStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserCategoryStats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserCategoryStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserCategoryStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserCategoryStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserCategoryStats)
    MergeFrom(*source);
  }
}

void UserCategoryStats::MergeFrom(const UserCategoryStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserCategoryStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sources()->::SourceStatsList::MergeFrom(from.sources());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000008u) {
      opens_ = from.opens_;
    }
    if (cached_has_bits & 0x00000010u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000020u) {
      dislikes_ = from.dislikes_;
    }
    if (cached_has_bits & 0x00000040u) {
      shares_ = from.shares_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserCategoryStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserCategoryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCategoryStats::CopyFrom(const UserCategoryStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserCategoryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCategoryStats::IsInitialized() const {
  return true;
}

void UserCategoryStats::Swap(UserCategoryStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserCategoryStats::InternalSwap(UserCategoryStats* other) {
  using std::swap;
  swap(sources_, other->sources_);
  swap(id_, other->id_);
  swap(views_, other->views_);
  swap(opens_, other->opens_);
  swap(likes_, other->likes_);
  swap(dislikes_, other->dislikes_);
  swap(shares_, other->shares_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserCategoryStats::GetMetadata() const {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserCategoryStats

// optional uint64 id = 1;
bool UserCategoryStats::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserCategoryStats::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UserCategoryStats::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserCategoryStats::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 UserCategoryStats::id() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.id)
  return id_;
}
void UserCategoryStats::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.id)
}

// optional uint32 views = 2 [default = 0];
bool UserCategoryStats::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserCategoryStats::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
void UserCategoryStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserCategoryStats::clear_views() {
  views_ = 0u;
  clear_has_views();
}
::google::protobuf::uint32 UserCategoryStats::views() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.views)
  return views_;
}
void UserCategoryStats::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.views)
}

// optional uint32 opens = 3 [default = 0];
bool UserCategoryStats::has_opens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserCategoryStats::set_has_opens() {
  _has_bits_[0] |= 0x00000008u;
}
void UserCategoryStats::clear_has_opens() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserCategoryStats::clear_opens() {
  opens_ = 0u;
  clear_has_opens();
}
::google::protobuf::uint32 UserCategoryStats::opens() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.opens)
  return opens_;
}
void UserCategoryStats::set_opens(::google::protobuf::uint32 value) {
  set_has_opens();
  opens_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.opens)
}

// optional uint32 likes = 4 [default = 0];
bool UserCategoryStats::has_likes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserCategoryStats::set_has_likes() {
  _has_bits_[0] |= 0x00000010u;
}
void UserCategoryStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserCategoryStats::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
::google::protobuf::uint32 UserCategoryStats::likes() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.likes)
  return likes_;
}
void UserCategoryStats::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.likes)
}

// optional uint32 dislikes = 5 [default = 0];
bool UserCategoryStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserCategoryStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000020u;
}
void UserCategoryStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserCategoryStats::clear_dislikes() {
  dislikes_ = 0u;
  clear_has_dislikes();
}
::google::protobuf::uint32 UserCategoryStats::dislikes() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.dislikes)
  return dislikes_;
}
void UserCategoryStats::set_dislikes(::google::protobuf::uint32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.dislikes)
}

// optional uint32 shares = 6 [default = 0];
bool UserCategoryStats::has_shares() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserCategoryStats::set_has_shares() {
  _has_bits_[0] |= 0x00000040u;
}
void UserCategoryStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserCategoryStats::clear_shares() {
  shares_ = 0u;
  clear_has_shares();
}
::google::protobuf::uint32 UserCategoryStats::shares() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.shares)
  return shares_;
}
void UserCategoryStats::set_shares(::google::protobuf::uint32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.shares)
}

// optional .SourceStatsList sources = 10;
bool UserCategoryStats::has_sources() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserCategoryStats::set_has_sources() {
  _has_bits_[0] |= 0x00000001u;
}
void UserCategoryStats::clear_has_sources() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserCategoryStats::clear_sources() {
  if (sources_ != NULL) sources_->::SourceStatsList::Clear();
  clear_has_sources();
}
const ::SourceStatsList& UserCategoryStats::sources() const {
  const ::SourceStatsList* p = sources_;
  // @@protoc_insertion_point(field_get:UserCategoryStats.sources)
  return p != NULL ? *p : *reinterpret_cast<const ::SourceStatsList*>(
      &::_SourceStatsList_default_instance_);
}
::SourceStatsList* UserCategoryStats::mutable_sources() {
  set_has_sources();
  if (sources_ == NULL) {
    sources_ = new ::SourceStatsList;
  }
  // @@protoc_insertion_point(field_mutable:UserCategoryStats.sources)
  return sources_;
}
::SourceStatsList* UserCategoryStats::release_sources() {
  // @@protoc_insertion_point(field_release:UserCategoryStats.sources)
  clear_has_sources();
  ::SourceStatsList* temp = sources_;
  sources_ = NULL;
  return temp;
}
void UserCategoryStats::set_allocated_sources(::SourceStatsList* sources) {
  delete sources_;
  sources_ = sources;
  if (sources) {
    set_has_sources();
  } else {
    clear_has_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:UserCategoryStats.sources)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentID::kDocIdFieldNumber;
const int DocumentID::kSourceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentID::DocumentID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tapelogd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DocumentID)
}
DocumentID::DocumentID(const DocumentID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(source_id_));
  // @@protoc_insertion_point(copy_constructor:DocumentID)
}

void DocumentID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_id_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(source_id_));
}

DocumentID::~DocumentID() {
  // @@protoc_insertion_point(destructor:DocumentID)
  SharedDtor();
}

void DocumentID::SharedDtor() {
}

void DocumentID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentID::descriptor() {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentID& DocumentID::default_instance() {
  protobuf_tapelogd_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentID* DocumentID::New(::google::protobuf::Arena* arena) const {
  DocumentID* n = new DocumentID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentID::Clear() {
// @@protoc_insertion_point(message_clear_start:DocumentID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_id_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(source_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DocumentID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DocumentID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DocumentID)
  return false;
#undef DO_
}

void DocumentID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DocumentID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->doc_id(), output);
  }

  // optional uint64 source_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->source_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DocumentID)
}

::google::protobuf::uint8* DocumentID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DocumentID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->doc_id(), target);
  }

  // optional uint64 source_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->source_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DocumentID)
  return target;
}

size_t DocumentID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DocumentID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 doc_id = 1;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->doc_id());
  }
  // optional uint64 source_id = 2;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->source_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DocumentID)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DocumentID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DocumentID)
    MergeFrom(*source);
  }
}

void DocumentID::MergeFrom(const DocumentID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DocumentID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_id_ = from.source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DocumentID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentID::CopyFrom(const DocumentID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DocumentID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentID::Swap(DocumentID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentID::InternalSwap(DocumentID* other) {
  using std::swap;
  swap(doc_id_, other->doc_id_);
  swap(source_id_, other->source_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentID::GetMetadata() const {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentID

// required uint64 doc_id = 1;
bool DocumentID::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentID::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentID::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentID::clear_doc_id() {
  doc_id_ = GOOGLE_ULONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::uint64 DocumentID::doc_id() const {
  // @@protoc_insertion_point(field_get:DocumentID.doc_id)
  return doc_id_;
}
void DocumentID::set_doc_id(::google::protobuf::uint64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:DocumentID.doc_id)
}

// optional uint64 source_id = 2;
bool DocumentID::has_source_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentID::set_has_source_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentID::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentID::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::uint64 DocumentID::source_id() const {
  // @@protoc_insertion_point(field_get:DocumentID.source_id)
  return source_id_;
}
void DocumentID::set_source_id(::google::protobuf::uint64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:DocumentID.source_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentIDList::kDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentIDList::DocumentIDList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tapelogd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DocumentIDList)
}
DocumentIDList::DocumentIDList(const DocumentIDList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DocumentIDList)
}

void DocumentIDList::SharedCtor() {
  _cached_size_ = 0;
}

DocumentIDList::~DocumentIDList() {
  // @@protoc_insertion_point(destructor:DocumentIDList)
  SharedDtor();
}

void DocumentIDList::SharedDtor() {
}

void DocumentIDList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentIDList::descriptor() {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentIDList& DocumentIDList::default_instance() {
  protobuf_tapelogd_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentIDList* DocumentIDList::New(::google::protobuf::Arena* arena) const {
  DocumentIDList* n = new DocumentIDList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentIDList::Clear() {
// @@protoc_insertion_point(message_clear_start:DocumentIDList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentIDList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DocumentIDList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DocumentID documents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DocumentIDList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DocumentIDList)
  return false;
#undef DO_
}

void DocumentIDList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DocumentIDList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DocumentID documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DocumentIDList)
}

::google::protobuf::uint8* DocumentIDList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DocumentIDList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DocumentID documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->documents(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DocumentIDList)
  return target;
}

size_t DocumentIDList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DocumentIDList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .DocumentID documents = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentIDList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DocumentIDList)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentIDList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentIDList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DocumentIDList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DocumentIDList)
    MergeFrom(*source);
  }
}

void DocumentIDList::MergeFrom(const DocumentIDList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DocumentIDList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
}

void DocumentIDList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DocumentIDList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentIDList::CopyFrom(const DocumentIDList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DocumentIDList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentIDList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void DocumentIDList::Swap(DocumentIDList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentIDList::InternalSwap(DocumentIDList* other) {
  using std::swap;
  documents_.InternalSwap(&other->documents_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentIDList::GetMetadata() const {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentIDList

// repeated .DocumentID documents = 1;
int DocumentIDList::documents_size() const {
  return documents_.size();
}
void DocumentIDList::clear_documents() {
  documents_.Clear();
}
const ::DocumentID& DocumentIDList::documents(int index) const {
  // @@protoc_insertion_point(field_get:DocumentIDList.documents)
  return documents_.Get(index);
}
::DocumentID* DocumentIDList::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:DocumentIDList.documents)
  return documents_.Mutable(index);
}
::DocumentID* DocumentIDList::add_documents() {
  // @@protoc_insertion_point(field_add:DocumentIDList.documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::DocumentID >*
DocumentIDList::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:DocumentIDList.documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::DocumentID >&
DocumentIDList::documents() const {
  // @@protoc_insertion_point(field_list:DocumentIDList.documents)
  return documents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLikesTape::kLikesFieldNumber;
const int UserLikesTape::kDislikesFieldNumber;
const int UserLikesTape::kLikedDocsFieldNumber;
const int UserLikesTape::kDislikedDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLikesTape::UserLikesTape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tapelogd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserLikesTape)
}
UserLikesTape::UserLikesTape(const UserLikesTape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      liked_docs_(from.liked_docs_),
      disliked_docs_(from.disliked_docs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_likes()) {
    likes_ = new ::DocumentIDList(*from.likes_);
  } else {
    likes_ = NULL;
  }
  if (from.has_dislikes()) {
    dislikes_ = new ::DocumentIDList(*from.dislikes_);
  } else {
    dislikes_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:UserLikesTape)
}

void UserLikesTape::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&likes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dislikes_) -
      reinterpret_cast<char*>(&likes_)) + sizeof(dislikes_));
}

UserLikesTape::~UserLikesTape() {
  // @@protoc_insertion_point(destructor:UserLikesTape)
  SharedDtor();
}

void UserLikesTape::SharedDtor() {
  if (this != internal_default_instance()) delete likes_;
  if (this != internal_default_instance()) delete dislikes_;
}

void UserLikesTape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLikesTape::descriptor() {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserLikesTape& UserLikesTape::default_instance() {
  protobuf_tapelogd_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserLikesTape* UserLikesTape::New(::google::protobuf::Arena* arena) const {
  UserLikesTape* n = new UserLikesTape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserLikesTape::Clear() {
// @@protoc_insertion_point(message_clear_start:UserLikesTape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  liked_docs_.Clear();
  disliked_docs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(likes_ != NULL);
      likes_->::DocumentIDList::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dislikes_ != NULL);
      dislikes_->::DocumentIDList::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserLikesTape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserLikesTape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DocumentIDList likes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_likes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DocumentIDList dislikes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 liked_docs = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_liked_docs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_liked_docs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 disliked_docs = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_disliked_docs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34u, input, this->mutable_disliked_docs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserLikesTape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserLikesTape)
  return false;
#undef DO_
}

void UserLikesTape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserLikesTape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DocumentIDList likes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->likes_, output);
  }

  // optional .DocumentIDList dislikes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dislikes_, output);
  }

  // repeated uint64 liked_docs = 3 [packed = true];
  if (this->liked_docs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _liked_docs_cached_byte_size_));
  }
  for (int i = 0, n = this->liked_docs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->liked_docs(i), output);
  }

  // repeated uint64 disliked_docs = 4 [packed = true];
  if (this->disliked_docs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _disliked_docs_cached_byte_size_));
  }
  for (int i = 0, n = this->disliked_docs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->disliked_docs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserLikesTape)
}

::google::protobuf::uint8* UserLikesTape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UserLikesTape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DocumentIDList likes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->likes_, deterministic, target);
  }

  // optional .DocumentIDList dislikes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dislikes_, deterministic, target);
  }

  // repeated uint64 liked_docs = 3 [packed = true];
  if (this->liked_docs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _liked_docs_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->liked_docs_, target);
  }

  // repeated uint64 disliked_docs = 4 [packed = true];
  if (this->disliked_docs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _disliked_docs_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->disliked_docs_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserLikesTape)
  return target;
}

size_t UserLikesTape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserLikesTape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 liked_docs = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->liked_docs_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _liked_docs_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 disliked_docs = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->disliked_docs_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _disliked_docs_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .DocumentIDList likes = 1;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->likes_);
    }

    // optional .DocumentIDList dislikes = 2;
    if (has_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dislikes_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLikesTape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserLikesTape)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLikesTape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserLikesTape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserLikesTape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserLikesTape)
    MergeFrom(*source);
  }
}

void UserLikesTape::MergeFrom(const UserLikesTape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserLikesTape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  liked_docs_.MergeFrom(from.liked_docs_);
  disliked_docs_.MergeFrom(from.disliked_docs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_likes()->::DocumentIDList::MergeFrom(from.likes());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dislikes()->::DocumentIDList::MergeFrom(from.dislikes());
    }
  }
}

void UserLikesTape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserLikesTape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLikesTape::CopyFrom(const UserLikesTape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserLikesTape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLikesTape::IsInitialized() const {
  if (has_likes()) {
    if (!this->likes_->IsInitialized()) return false;
  }
  if (has_dislikes()) {
    if (!this->dislikes_->IsInitialized()) return false;
  }
  return true;
}

void UserLikesTape::Swap(UserLikesTape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLikesTape::InternalSwap(UserLikesTape* other) {
  using std::swap;
  liked_docs_.InternalSwap(&other->liked_docs_);
  disliked_docs_.InternalSwap(&other->disliked_docs_);
  swap(likes_, other->likes_);
  swap(dislikes_, other->dislikes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserLikesTape::GetMetadata() const {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserLikesTape

// optional .DocumentIDList likes = 1;
bool UserLikesTape::has_likes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserLikesTape::set_has_likes() {
  _has_bits_[0] |= 0x00000001u;
}
void UserLikesTape::clear_has_likes() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserLikesTape::clear_likes() {
  if (likes_ != NULL) likes_->::DocumentIDList::Clear();
  clear_has_likes();
}
const ::DocumentIDList& UserLikesTape::likes() const {
  const ::DocumentIDList* p = likes_;
  // @@protoc_insertion_point(field_get:UserLikesTape.likes)
  return p != NULL ? *p : *reinterpret_cast<const ::DocumentIDList*>(
      &::_DocumentIDList_default_instance_);
}
::DocumentIDList* UserLikesTape::mutable_likes() {
  set_has_likes();
  if (likes_ == NULL) {
    likes_ = new ::DocumentIDList;
  }
  // @@protoc_insertion_point(field_mutable:UserLikesTape.likes)
  return likes_;
}
::DocumentIDList* UserLikesTape::release_likes() {
  // @@protoc_insertion_point(field_release:UserLikesTape.likes)
  clear_has_likes();
  ::DocumentIDList* temp = likes_;
  likes_ = NULL;
  return temp;
}
void UserLikesTape::set_allocated_likes(::DocumentIDList* likes) {
  delete likes_;
  likes_ = likes;
  if (likes) {
    set_has_likes();
  } else {
    clear_has_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:UserLikesTape.likes)
}

// optional .DocumentIDList dislikes = 2;
bool UserLikesTape::has_dislikes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserLikesTape::set_has_dislikes() {
  _has_bits_[0] |= 0x00000002u;
}
void UserLikesTape::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserLikesTape::clear_dislikes() {
  if (dislikes_ != NULL) dislikes_->::DocumentIDList::Clear();
  clear_has_dislikes();
}
const ::DocumentIDList& UserLikesTape::dislikes() const {
  const ::DocumentIDList* p = dislikes_;
  // @@protoc_insertion_point(field_get:UserLikesTape.dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::DocumentIDList*>(
      &::_DocumentIDList_default_instance_);
}
::DocumentIDList* UserLikesTape::mutable_dislikes() {
  set_has_dislikes();
  if (dislikes_ == NULL) {
    dislikes_ = new ::DocumentIDList;
  }
  // @@protoc_insertion_point(field_mutable:UserLikesTape.dislikes)
  return dislikes_;
}
::DocumentIDList* UserLikesTape::release_dislikes() {
  // @@protoc_insertion_point(field_release:UserLikesTape.dislikes)
  clear_has_dislikes();
  ::DocumentIDList* temp = dislikes_;
  dislikes_ = NULL;
  return temp;
}
void UserLikesTape::set_allocated_dislikes(::DocumentIDList* dislikes) {
  delete dislikes_;
  dislikes_ = dislikes;
  if (dislikes) {
    set_has_dislikes();
  } else {
    clear_has_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:UserLikesTape.dislikes)
}

// repeated uint64 liked_docs = 3 [packed = true];
int UserLikesTape::liked_docs_size() const {
  return liked_docs_.size();
}
void UserLikesTape::clear_liked_docs() {
  liked_docs_.Clear();
}
::google::protobuf::uint64 UserLikesTape::liked_docs(int index) const {
  // @@protoc_insertion_point(field_get:UserLikesTape.liked_docs)
  return liked_docs_.Get(index);
}
void UserLikesTape::set_liked_docs(int index, ::google::protobuf::uint64 value) {
  liked_docs_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserLikesTape.liked_docs)
}
void UserLikesTape::add_liked_docs(::google::protobuf::uint64 value) {
  liked_docs_.Add(value);
  // @@protoc_insertion_point(field_add:UserLikesTape.liked_docs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserLikesTape::liked_docs() const {
  // @@protoc_insertion_point(field_list:UserLikesTape.liked_docs)
  return liked_docs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserLikesTape::mutable_liked_docs() {
  // @@protoc_insertion_point(field_mutable_list:UserLikesTape.liked_docs)
  return &liked_docs_;
}

// repeated uint64 disliked_docs = 4 [packed = true];
int UserLikesTape::disliked_docs_size() const {
  return disliked_docs_.size();
}
void UserLikesTape::clear_disliked_docs() {
  disliked_docs_.Clear();
}
::google::protobuf::uint64 UserLikesTape::disliked_docs(int index) const {
  // @@protoc_insertion_point(field_get:UserLikesTape.disliked_docs)
  return disliked_docs_.Get(index);
}
void UserLikesTape::set_disliked_docs(int index, ::google::protobuf::uint64 value) {
  disliked_docs_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserLikesTape.disliked_docs)
}
void UserLikesTape::add_disliked_docs(::google::protobuf::uint64 value) {
  disliked_docs_.Add(value);
  // @@protoc_insertion_point(field_add:UserLikesTape.disliked_docs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserLikesTape::disliked_docs() const {
  // @@protoc_insertion_point(field_list:UserLikesTape.disliked_docs)
  return disliked_docs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserLikesTape::mutable_disliked_docs() {
  // @@protoc_insertion_point(field_mutable_list:UserLikesTape.disliked_docs)
  return &disliked_docs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserView::kUserIdFieldNumber;
const int UserView::kUrlFieldNumber;
const int UserView::kDocIdFieldNumber;
const int UserView::kTimestampFieldNumber;
const int UserView::kActionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserView::UserView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tapelogd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserView)
}
UserView::UserView(const UserView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:UserView)
}

void UserView::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(timestamp_));
  action_type_ = 1;
}

UserView::~UserView() {
  // @@protoc_insertion_point(destructor:UserView)
  SharedDtor();
}

void UserView::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserView::descriptor() {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserView& UserView::default_instance() {
  protobuf_tapelogd_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserView* UserView::New(::google::protobuf::Arena* arena) const {
  UserView* n = new UserView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserView::Clear() {
// @@protoc_insertion_point(message_clear_start:UserView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!user_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(timestamp_));
    action_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserView.user_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "UserView.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 doc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ActionType action_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ActionType_IsValid(value)) {
            set_action_type(static_cast< ::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserView)
  return false;
#undef DO_
}

void UserView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserView.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserView.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional int64 doc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->doc_id(), output);
  }

  // optional int64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // optional .ActionType action_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserView)
}

::google::protobuf::uint8* UserView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UserView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserView.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "UserView.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional int64 doc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->doc_id(), target);
  }

  // optional int64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // optional .ActionType action_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserView)
  return target;
}

size_t UserView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int64 doc_id = 3;
    if (has_doc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->doc_id());
    }

    // optional int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .ActionType action_type = 5;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserView)
  GOOGLE_DCHECK_NE(&from, this);
  const UserView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserView)
    MergeFrom(*source);
  }
}

void UserView::MergeFrom(const UserView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_type_ = from.action_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserView::CopyFrom(const UserView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserView::IsInitialized() const {
  return true;
}

void UserView::Swap(UserView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserView::InternalSwap(UserView* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_);
  url_.Swap(&other->url_);
  swap(doc_id_, other->doc_id_);
  swap(timestamp_, other->timestamp_);
  swap(action_type_, other->action_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserView::GetMetadata() const {
  protobuf_tapelogd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tapelogd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserView

// optional string user_id = 1;
bool UserView::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserView::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserView::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserView::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& UserView::user_id() const {
  // @@protoc_insertion_point(field_get:UserView.user_id)
  return user_id_.GetNoArena();
}
void UserView::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserView.user_id)
}
#if LANG_CXX11
void UserView::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserView.user_id)
}
#endif
void UserView::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserView.user_id)
}
void UserView::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserView.user_id)
}
::std::string* UserView::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:UserView.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserView::release_user_id() {
  // @@protoc_insertion_point(field_release:UserView.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserView::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:UserView.user_id)
}

// optional string url = 2;
bool UserView::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserView::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void UserView::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserView::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& UserView::url() const {
  // @@protoc_insertion_point(field_get:UserView.url)
  return url_.GetNoArena();
}
void UserView::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserView.url)
}
#if LANG_CXX11
void UserView::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserView.url)
}
#endif
void UserView::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserView.url)
}
void UserView::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserView.url)
}
::std::string* UserView::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:UserView.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserView::release_url() {
  // @@protoc_insertion_point(field_release:UserView.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserView::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:UserView.url)
}

// optional int64 doc_id = 3;
bool UserView::has_doc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserView::set_has_doc_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UserView::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserView::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 UserView::doc_id() const {
  // @@protoc_insertion_point(field_get:UserView.doc_id)
  return doc_id_;
}
void UserView::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:UserView.doc_id)
}

// optional int64 timestamp = 4;
bool UserView::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserView::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void UserView::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserView::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserView::timestamp() const {
  // @@protoc_insertion_point(field_get:UserView.timestamp)
  return timestamp_;
}
void UserView::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:UserView.timestamp)
}

// optional .ActionType action_type = 5;
bool UserView::has_action_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserView::set_has_action_type() {
  _has_bits_[0] |= 0x00000010u;
}
void UserView::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserView::clear_action_type() {
  action_type_ = 1;
  clear_has_action_type();
}
::ActionType UserView::action_type() const {
  // @@protoc_insertion_point(field_get:UserView.action_type)
  return static_cast< ::ActionType >(action_type_);
}
void UserView::set_action_type(::ActionType value) {
  assert(::ActionType_IsValid(value));
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:UserView.action_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
