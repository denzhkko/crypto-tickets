// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tapelogd.proto

#ifndef PROTOBUF_tapelogd_2eproto__INCLUDED
#define PROTOBUF_tapelogd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class DocumentID;
class DocumentIDDefaultTypeInternal;
extern DocumentIDDefaultTypeInternal _DocumentID_default_instance_;
class DocumentIDList;
class DocumentIDListDefaultTypeInternal;
extern DocumentIDListDefaultTypeInternal _DocumentIDList_default_instance_;
class SourceStatsList;
class SourceStatsListDefaultTypeInternal;
extern SourceStatsListDefaultTypeInternal _SourceStatsList_default_instance_;
class UserCategoryStats;
class UserCategoryStatsDefaultTypeInternal;
extern UserCategoryStatsDefaultTypeInternal _UserCategoryStats_default_instance_;
class UserLikesTape;
class UserLikesTapeDefaultTypeInternal;
extern UserLikesTapeDefaultTypeInternal _UserLikesTape_default_instance_;
class UserSourceStats;
class UserSourceStatsDefaultTypeInternal;
extern UserSourceStatsDefaultTypeInternal _UserSourceStats_default_instance_;
class UserView;
class UserViewDefaultTypeInternal;
extern UserViewDefaultTypeInternal _UserView_default_instance_;

namespace protobuf_tapelogd_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tapelogd_2eproto

enum ActionType {
  APP_OPEN = 1,
  VIEW = 2,
  VIEW_IN = 3,
  VIEW_OUT = 4,
  OPEN = 5,
  CLOSE = 6,
  LIKE = 7,
  UNLIKE = 8,
  DISLIKE = 9,
  UNDISLIKE = 10,
  SHARE = 11
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = APP_OPEN;
const ActionType ActionType_MAX = SHARE;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
// ===================================================================

class UserSourceStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserSourceStats) */ {
 public:
  UserSourceStats();
  virtual ~UserSourceStats();

  UserSourceStats(const UserSourceStats& from);

  inline UserSourceStats& operator=(const UserSourceStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSourceStats(UserSourceStats&& from) noexcept
    : UserSourceStats() {
    *this = ::std::move(from);
  }

  inline UserSourceStats& operator=(UserSourceStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSourceStats& default_instance();

  static inline const UserSourceStats* internal_default_instance() {
    return reinterpret_cast<const UserSourceStats*>(
               &_UserSourceStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserSourceStats* other);
  friend void swap(UserSourceStats& a, UserSourceStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSourceStats* New() const PROTOBUF_FINAL { return New(NULL); }

  UserSourceStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserSourceStats& from);
  void MergeFrom(const UserSourceStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserSourceStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 views = 2 [default = 0];
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 2;
  ::google::protobuf::uint32 views() const;
  void set_views(::google::protobuf::uint32 value);

  // optional uint32 opens = 3 [default = 0];
  bool has_opens() const;
  void clear_opens();
  static const int kOpensFieldNumber = 3;
  ::google::protobuf::uint32 opens() const;
  void set_opens(::google::protobuf::uint32 value);

  // optional uint32 likes = 4 [default = 0];
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 4;
  ::google::protobuf::uint32 likes() const;
  void set_likes(::google::protobuf::uint32 value);

  // optional uint32 dislikes = 5 [default = 0];
  bool has_dislikes() const;
  void clear_dislikes();
  static const int kDislikesFieldNumber = 5;
  ::google::protobuf::uint32 dislikes() const;
  void set_dislikes(::google::protobuf::uint32 value);

  // optional uint32 shares = 6 [default = 0];
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 6;
  ::google::protobuf::uint32 shares() const;
  void set_shares(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UserSourceStats)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_views();
  void clear_has_views();
  void set_has_opens();
  void clear_has_opens();
  void set_has_likes();
  void clear_has_likes();
  void set_has_dislikes();
  void clear_has_dislikes();
  void set_has_shares();
  void clear_has_shares();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 views_;
  ::google::protobuf::uint32 opens_;
  ::google::protobuf::uint32 likes_;
  ::google::protobuf::uint32 dislikes_;
  ::google::protobuf::uint32 shares_;
  friend struct protobuf_tapelogd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceStatsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SourceStatsList) */ {
 public:
  SourceStatsList();
  virtual ~SourceStatsList();

  SourceStatsList(const SourceStatsList& from);

  inline SourceStatsList& operator=(const SourceStatsList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceStatsList(SourceStatsList&& from) noexcept
    : SourceStatsList() {
    *this = ::std::move(from);
  }

  inline SourceStatsList& operator=(SourceStatsList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceStatsList& default_instance();

  static inline const SourceStatsList* internal_default_instance() {
    return reinterpret_cast<const SourceStatsList*>(
               &_SourceStatsList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SourceStatsList* other);
  friend void swap(SourceStatsList& a, SourceStatsList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceStatsList* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceStatsList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceStatsList& from);
  void MergeFrom(const SourceStatsList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceStatsList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserSourceStats sources = 1;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 1;
  const ::UserSourceStats& sources(int index) const;
  ::UserSourceStats* mutable_sources(int index);
  ::UserSourceStats* add_sources();
  ::google::protobuf::RepeatedPtrField< ::UserSourceStats >*
      mutable_sources();
  const ::google::protobuf::RepeatedPtrField< ::UserSourceStats >&
      sources() const;

  // @@protoc_insertion_point(class_scope:SourceStatsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserSourceStats > sources_;
  friend struct protobuf_tapelogd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserCategoryStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserCategoryStats) */ {
 public:
  UserCategoryStats();
  virtual ~UserCategoryStats();

  UserCategoryStats(const UserCategoryStats& from);

  inline UserCategoryStats& operator=(const UserCategoryStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserCategoryStats(UserCategoryStats&& from) noexcept
    : UserCategoryStats() {
    *this = ::std::move(from);
  }

  inline UserCategoryStats& operator=(UserCategoryStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCategoryStats& default_instance();

  static inline const UserCategoryStats* internal_default_instance() {
    return reinterpret_cast<const UserCategoryStats*>(
               &_UserCategoryStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserCategoryStats* other);
  friend void swap(UserCategoryStats& a, UserCategoryStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserCategoryStats* New() const PROTOBUF_FINAL { return New(NULL); }

  UserCategoryStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserCategoryStats& from);
  void MergeFrom(const UserCategoryStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserCategoryStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SourceStatsList sources = 10;
  bool has_sources() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 10;
  const ::SourceStatsList& sources() const;
  ::SourceStatsList* mutable_sources();
  ::SourceStatsList* release_sources();
  void set_allocated_sources(::SourceStatsList* sources);

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 views = 2 [default = 0];
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 2;
  ::google::protobuf::uint32 views() const;
  void set_views(::google::protobuf::uint32 value);

  // optional uint32 opens = 3 [default = 0];
  bool has_opens() const;
  void clear_opens();
  static const int kOpensFieldNumber = 3;
  ::google::protobuf::uint32 opens() const;
  void set_opens(::google::protobuf::uint32 value);

  // optional uint32 likes = 4 [default = 0];
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 4;
  ::google::protobuf::uint32 likes() const;
  void set_likes(::google::protobuf::uint32 value);

  // optional uint32 dislikes = 5 [default = 0];
  bool has_dislikes() const;
  void clear_dislikes();
  static const int kDislikesFieldNumber = 5;
  ::google::protobuf::uint32 dislikes() const;
  void set_dislikes(::google::protobuf::uint32 value);

  // optional uint32 shares = 6 [default = 0];
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 6;
  ::google::protobuf::uint32 shares() const;
  void set_shares(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UserCategoryStats)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_views();
  void clear_has_views();
  void set_has_opens();
  void clear_has_opens();
  void set_has_likes();
  void clear_has_likes();
  void set_has_dislikes();
  void clear_has_dislikes();
  void set_has_shares();
  void clear_has_shares();
  void set_has_sources();
  void clear_has_sources();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::SourceStatsList* sources_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 views_;
  ::google::protobuf::uint32 opens_;
  ::google::protobuf::uint32 likes_;
  ::google::protobuf::uint32 dislikes_;
  ::google::protobuf::uint32 shares_;
  friend struct protobuf_tapelogd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DocumentID) */ {
 public:
  DocumentID();
  virtual ~DocumentID();

  DocumentID(const DocumentID& from);

  inline DocumentID& operator=(const DocumentID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentID(DocumentID&& from) noexcept
    : DocumentID() {
    *this = ::std::move(from);
  }

  inline DocumentID& operator=(DocumentID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentID& default_instance();

  static inline const DocumentID* internal_default_instance() {
    return reinterpret_cast<const DocumentID*>(
               &_DocumentID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DocumentID* other);
  friend void swap(DocumentID& a, DocumentID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentID* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentID& from);
  void MergeFrom(const DocumentID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::uint64 doc_id() const;
  void set_doc_id(::google::protobuf::uint64 value);

  // optional uint64 source_id = 2;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::uint64 source_id() const;
  void set_source_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DocumentID)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_source_id();
  void clear_has_source_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 doc_id_;
  ::google::protobuf::uint64 source_id_;
  friend struct protobuf_tapelogd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentIDList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DocumentIDList) */ {
 public:
  DocumentIDList();
  virtual ~DocumentIDList();

  DocumentIDList(const DocumentIDList& from);

  inline DocumentIDList& operator=(const DocumentIDList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentIDList(DocumentIDList&& from) noexcept
    : DocumentIDList() {
    *this = ::std::move(from);
  }

  inline DocumentIDList& operator=(DocumentIDList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentIDList& default_instance();

  static inline const DocumentIDList* internal_default_instance() {
    return reinterpret_cast<const DocumentIDList*>(
               &_DocumentIDList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DocumentIDList* other);
  friend void swap(DocumentIDList& a, DocumentIDList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentIDList* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentIDList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentIDList& from);
  void MergeFrom(const DocumentIDList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentIDList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DocumentID documents = 1;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  const ::DocumentID& documents(int index) const;
  ::DocumentID* mutable_documents(int index);
  ::DocumentID* add_documents();
  ::google::protobuf::RepeatedPtrField< ::DocumentID >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::DocumentID >&
      documents() const;

  // @@protoc_insertion_point(class_scope:DocumentIDList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DocumentID > documents_;
  friend struct protobuf_tapelogd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLikesTape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserLikesTape) */ {
 public:
  UserLikesTape();
  virtual ~UserLikesTape();

  UserLikesTape(const UserLikesTape& from);

  inline UserLikesTape& operator=(const UserLikesTape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLikesTape(UserLikesTape&& from) noexcept
    : UserLikesTape() {
    *this = ::std::move(from);
  }

  inline UserLikesTape& operator=(UserLikesTape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLikesTape& default_instance();

  static inline const UserLikesTape* internal_default_instance() {
    return reinterpret_cast<const UserLikesTape*>(
               &_UserLikesTape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UserLikesTape* other);
  friend void swap(UserLikesTape& a, UserLikesTape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLikesTape* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLikesTape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLikesTape& from);
  void MergeFrom(const UserLikesTape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLikesTape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 liked_docs = 3 [packed = true];
  int liked_docs_size() const;
  void clear_liked_docs();
  static const int kLikedDocsFieldNumber = 3;
  ::google::protobuf::uint64 liked_docs(int index) const;
  void set_liked_docs(int index, ::google::protobuf::uint64 value);
  void add_liked_docs(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      liked_docs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_liked_docs();

  // repeated uint64 disliked_docs = 4 [packed = true];
  int disliked_docs_size() const;
  void clear_disliked_docs();
  static const int kDislikedDocsFieldNumber = 4;
  ::google::protobuf::uint64 disliked_docs(int index) const;
  void set_disliked_docs(int index, ::google::protobuf::uint64 value);
  void add_disliked_docs(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      disliked_docs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_disliked_docs();

  // optional .DocumentIDList likes = 1;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 1;
  const ::DocumentIDList& likes() const;
  ::DocumentIDList* mutable_likes();
  ::DocumentIDList* release_likes();
  void set_allocated_likes(::DocumentIDList* likes);

  // optional .DocumentIDList dislikes = 2;
  bool has_dislikes() const;
  void clear_dislikes();
  static const int kDislikesFieldNumber = 2;
  const ::DocumentIDList& dislikes() const;
  ::DocumentIDList* mutable_dislikes();
  ::DocumentIDList* release_dislikes();
  void set_allocated_dislikes(::DocumentIDList* dislikes);

  // @@protoc_insertion_point(class_scope:UserLikesTape)
 private:
  void set_has_likes();
  void clear_has_likes();
  void set_has_dislikes();
  void clear_has_dislikes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > liked_docs_;
  mutable int _liked_docs_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > disliked_docs_;
  mutable int _disliked_docs_cached_byte_size_;
  ::DocumentIDList* likes_;
  ::DocumentIDList* dislikes_;
  friend struct protobuf_tapelogd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserView : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserView) */ {
 public:
  UserView();
  virtual ~UserView();

  UserView(const UserView& from);

  inline UserView& operator=(const UserView& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserView(UserView&& from) noexcept
    : UserView() {
    *this = ::std::move(from);
  }

  inline UserView& operator=(UserView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserView& default_instance();

  static inline const UserView* internal_default_instance() {
    return reinterpret_cast<const UserView*>(
               &_UserView_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(UserView* other);
  friend void swap(UserView& a, UserView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserView* New() const PROTOBUF_FINAL { return New(NULL); }

  UserView* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserView& from);
  void MergeFrom(const UserView& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional int64 doc_id = 3;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 3;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // optional int64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional .ActionType action_type = 5;
  bool has_action_type() const;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 5;
  ::ActionType action_type() const;
  void set_action_type(::ActionType value);

  // @@protoc_insertion_point(class_scope:UserView)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_url();
  void clear_has_url();
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_action_type();
  void clear_has_action_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int64 doc_id_;
  ::google::protobuf::int64 timestamp_;
  int action_type_;
  friend struct protobuf_tapelogd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserSourceStats

// optional uint64 id = 1;
inline bool UserSourceStats::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSourceStats::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSourceStats::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSourceStats::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 UserSourceStats::id() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.id)
  return id_;
}
inline void UserSourceStats::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.id)
}

// optional uint32 views = 2 [default = 0];
inline bool UserSourceStats::has_views() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSourceStats::set_has_views() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSourceStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSourceStats::clear_views() {
  views_ = 0u;
  clear_has_views();
}
inline ::google::protobuf::uint32 UserSourceStats::views() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.views)
  return views_;
}
inline void UserSourceStats::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.views)
}

// optional uint32 opens = 3 [default = 0];
inline bool UserSourceStats::has_opens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSourceStats::set_has_opens() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSourceStats::clear_has_opens() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSourceStats::clear_opens() {
  opens_ = 0u;
  clear_has_opens();
}
inline ::google::protobuf::uint32 UserSourceStats::opens() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.opens)
  return opens_;
}
inline void UserSourceStats::set_opens(::google::protobuf::uint32 value) {
  set_has_opens();
  opens_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.opens)
}

// optional uint32 likes = 4 [default = 0];
inline bool UserSourceStats::has_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSourceStats::set_has_likes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSourceStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSourceStats::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
inline ::google::protobuf::uint32 UserSourceStats::likes() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.likes)
  return likes_;
}
inline void UserSourceStats::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.likes)
}

// optional uint32 dislikes = 5 [default = 0];
inline bool UserSourceStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSourceStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSourceStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSourceStats::clear_dislikes() {
  dislikes_ = 0u;
  clear_has_dislikes();
}
inline ::google::protobuf::uint32 UserSourceStats::dislikes() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.dislikes)
  return dislikes_;
}
inline void UserSourceStats::set_dislikes(::google::protobuf::uint32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.dislikes)
}

// optional uint32 shares = 6 [default = 0];
inline bool UserSourceStats::has_shares() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserSourceStats::set_has_shares() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserSourceStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserSourceStats::clear_shares() {
  shares_ = 0u;
  clear_has_shares();
}
inline ::google::protobuf::uint32 UserSourceStats::shares() const {
  // @@protoc_insertion_point(field_get:UserSourceStats.shares)
  return shares_;
}
inline void UserSourceStats::set_shares(::google::protobuf::uint32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:UserSourceStats.shares)
}

// -------------------------------------------------------------------

// SourceStatsList

// repeated .UserSourceStats sources = 1;
inline int SourceStatsList::sources_size() const {
  return sources_.size();
}
inline void SourceStatsList::clear_sources() {
  sources_.Clear();
}
inline const ::UserSourceStats& SourceStatsList::sources(int index) const {
  // @@protoc_insertion_point(field_get:SourceStatsList.sources)
  return sources_.Get(index);
}
inline ::UserSourceStats* SourceStatsList::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:SourceStatsList.sources)
  return sources_.Mutable(index);
}
inline ::UserSourceStats* SourceStatsList::add_sources() {
  // @@protoc_insertion_point(field_add:SourceStatsList.sources)
  return sources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::UserSourceStats >*
SourceStatsList::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:SourceStatsList.sources)
  return &sources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::UserSourceStats >&
SourceStatsList::sources() const {
  // @@protoc_insertion_point(field_list:SourceStatsList.sources)
  return sources_;
}

// -------------------------------------------------------------------

// UserCategoryStats

// optional uint64 id = 1;
inline bool UserCategoryStats::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCategoryStats::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserCategoryStats::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserCategoryStats::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 UserCategoryStats::id() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.id)
  return id_;
}
inline void UserCategoryStats::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.id)
}

// optional uint32 views = 2 [default = 0];
inline bool UserCategoryStats::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserCategoryStats::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserCategoryStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserCategoryStats::clear_views() {
  views_ = 0u;
  clear_has_views();
}
inline ::google::protobuf::uint32 UserCategoryStats::views() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.views)
  return views_;
}
inline void UserCategoryStats::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.views)
}

// optional uint32 opens = 3 [default = 0];
inline bool UserCategoryStats::has_opens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserCategoryStats::set_has_opens() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserCategoryStats::clear_has_opens() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserCategoryStats::clear_opens() {
  opens_ = 0u;
  clear_has_opens();
}
inline ::google::protobuf::uint32 UserCategoryStats::opens() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.opens)
  return opens_;
}
inline void UserCategoryStats::set_opens(::google::protobuf::uint32 value) {
  set_has_opens();
  opens_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.opens)
}

// optional uint32 likes = 4 [default = 0];
inline bool UserCategoryStats::has_likes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserCategoryStats::set_has_likes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserCategoryStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserCategoryStats::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
inline ::google::protobuf::uint32 UserCategoryStats::likes() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.likes)
  return likes_;
}
inline void UserCategoryStats::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.likes)
}

// optional uint32 dislikes = 5 [default = 0];
inline bool UserCategoryStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserCategoryStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserCategoryStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserCategoryStats::clear_dislikes() {
  dislikes_ = 0u;
  clear_has_dislikes();
}
inline ::google::protobuf::uint32 UserCategoryStats::dislikes() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.dislikes)
  return dislikes_;
}
inline void UserCategoryStats::set_dislikes(::google::protobuf::uint32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.dislikes)
}

// optional uint32 shares = 6 [default = 0];
inline bool UserCategoryStats::has_shares() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserCategoryStats::set_has_shares() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserCategoryStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserCategoryStats::clear_shares() {
  shares_ = 0u;
  clear_has_shares();
}
inline ::google::protobuf::uint32 UserCategoryStats::shares() const {
  // @@protoc_insertion_point(field_get:UserCategoryStats.shares)
  return shares_;
}
inline void UserCategoryStats::set_shares(::google::protobuf::uint32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:UserCategoryStats.shares)
}

// optional .SourceStatsList sources = 10;
inline bool UserCategoryStats::has_sources() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCategoryStats::set_has_sources() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserCategoryStats::clear_has_sources() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserCategoryStats::clear_sources() {
  if (sources_ != NULL) sources_->::SourceStatsList::Clear();
  clear_has_sources();
}
inline const ::SourceStatsList& UserCategoryStats::sources() const {
  const ::SourceStatsList* p = sources_;
  // @@protoc_insertion_point(field_get:UserCategoryStats.sources)
  return p != NULL ? *p : *reinterpret_cast<const ::SourceStatsList*>(
      &::_SourceStatsList_default_instance_);
}
inline ::SourceStatsList* UserCategoryStats::mutable_sources() {
  set_has_sources();
  if (sources_ == NULL) {
    sources_ = new ::SourceStatsList;
  }
  // @@protoc_insertion_point(field_mutable:UserCategoryStats.sources)
  return sources_;
}
inline ::SourceStatsList* UserCategoryStats::release_sources() {
  // @@protoc_insertion_point(field_release:UserCategoryStats.sources)
  clear_has_sources();
  ::SourceStatsList* temp = sources_;
  sources_ = NULL;
  return temp;
}
inline void UserCategoryStats::set_allocated_sources(::SourceStatsList* sources) {
  delete sources_;
  sources_ = sources;
  if (sources) {
    set_has_sources();
  } else {
    clear_has_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:UserCategoryStats.sources)
}

// -------------------------------------------------------------------

// DocumentID

// required uint64 doc_id = 1;
inline bool DocumentID::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentID::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentID::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentID::clear_doc_id() {
  doc_id_ = GOOGLE_ULONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::uint64 DocumentID::doc_id() const {
  // @@protoc_insertion_point(field_get:DocumentID.doc_id)
  return doc_id_;
}
inline void DocumentID::set_doc_id(::google::protobuf::uint64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:DocumentID.doc_id)
}

// optional uint64 source_id = 2;
inline bool DocumentID::has_source_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentID::set_has_source_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentID::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentID::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::uint64 DocumentID::source_id() const {
  // @@protoc_insertion_point(field_get:DocumentID.source_id)
  return source_id_;
}
inline void DocumentID::set_source_id(::google::protobuf::uint64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:DocumentID.source_id)
}

// -------------------------------------------------------------------

// DocumentIDList

// repeated .DocumentID documents = 1;
inline int DocumentIDList::documents_size() const {
  return documents_.size();
}
inline void DocumentIDList::clear_documents() {
  documents_.Clear();
}
inline const ::DocumentID& DocumentIDList::documents(int index) const {
  // @@protoc_insertion_point(field_get:DocumentIDList.documents)
  return documents_.Get(index);
}
inline ::DocumentID* DocumentIDList::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:DocumentIDList.documents)
  return documents_.Mutable(index);
}
inline ::DocumentID* DocumentIDList::add_documents() {
  // @@protoc_insertion_point(field_add:DocumentIDList.documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DocumentID >*
DocumentIDList::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:DocumentIDList.documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DocumentID >&
DocumentIDList::documents() const {
  // @@protoc_insertion_point(field_list:DocumentIDList.documents)
  return documents_;
}

// -------------------------------------------------------------------

// UserLikesTape

// optional .DocumentIDList likes = 1;
inline bool UserLikesTape::has_likes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLikesTape::set_has_likes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLikesTape::clear_has_likes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLikesTape::clear_likes() {
  if (likes_ != NULL) likes_->::DocumentIDList::Clear();
  clear_has_likes();
}
inline const ::DocumentIDList& UserLikesTape::likes() const {
  const ::DocumentIDList* p = likes_;
  // @@protoc_insertion_point(field_get:UserLikesTape.likes)
  return p != NULL ? *p : *reinterpret_cast<const ::DocumentIDList*>(
      &::_DocumentIDList_default_instance_);
}
inline ::DocumentIDList* UserLikesTape::mutable_likes() {
  set_has_likes();
  if (likes_ == NULL) {
    likes_ = new ::DocumentIDList;
  }
  // @@protoc_insertion_point(field_mutable:UserLikesTape.likes)
  return likes_;
}
inline ::DocumentIDList* UserLikesTape::release_likes() {
  // @@protoc_insertion_point(field_release:UserLikesTape.likes)
  clear_has_likes();
  ::DocumentIDList* temp = likes_;
  likes_ = NULL;
  return temp;
}
inline void UserLikesTape::set_allocated_likes(::DocumentIDList* likes) {
  delete likes_;
  likes_ = likes;
  if (likes) {
    set_has_likes();
  } else {
    clear_has_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:UserLikesTape.likes)
}

// optional .DocumentIDList dislikes = 2;
inline bool UserLikesTape::has_dislikes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLikesTape::set_has_dislikes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLikesTape::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLikesTape::clear_dislikes() {
  if (dislikes_ != NULL) dislikes_->::DocumentIDList::Clear();
  clear_has_dislikes();
}
inline const ::DocumentIDList& UserLikesTape::dislikes() const {
  const ::DocumentIDList* p = dislikes_;
  // @@protoc_insertion_point(field_get:UserLikesTape.dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::DocumentIDList*>(
      &::_DocumentIDList_default_instance_);
}
inline ::DocumentIDList* UserLikesTape::mutable_dislikes() {
  set_has_dislikes();
  if (dislikes_ == NULL) {
    dislikes_ = new ::DocumentIDList;
  }
  // @@protoc_insertion_point(field_mutable:UserLikesTape.dislikes)
  return dislikes_;
}
inline ::DocumentIDList* UserLikesTape::release_dislikes() {
  // @@protoc_insertion_point(field_release:UserLikesTape.dislikes)
  clear_has_dislikes();
  ::DocumentIDList* temp = dislikes_;
  dislikes_ = NULL;
  return temp;
}
inline void UserLikesTape::set_allocated_dislikes(::DocumentIDList* dislikes) {
  delete dislikes_;
  dislikes_ = dislikes;
  if (dislikes) {
    set_has_dislikes();
  } else {
    clear_has_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:UserLikesTape.dislikes)
}

// repeated uint64 liked_docs = 3 [packed = true];
inline int UserLikesTape::liked_docs_size() const {
  return liked_docs_.size();
}
inline void UserLikesTape::clear_liked_docs() {
  liked_docs_.Clear();
}
inline ::google::protobuf::uint64 UserLikesTape::liked_docs(int index) const {
  // @@protoc_insertion_point(field_get:UserLikesTape.liked_docs)
  return liked_docs_.Get(index);
}
inline void UserLikesTape::set_liked_docs(int index, ::google::protobuf::uint64 value) {
  liked_docs_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserLikesTape.liked_docs)
}
inline void UserLikesTape::add_liked_docs(::google::protobuf::uint64 value) {
  liked_docs_.Add(value);
  // @@protoc_insertion_point(field_add:UserLikesTape.liked_docs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserLikesTape::liked_docs() const {
  // @@protoc_insertion_point(field_list:UserLikesTape.liked_docs)
  return liked_docs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserLikesTape::mutable_liked_docs() {
  // @@protoc_insertion_point(field_mutable_list:UserLikesTape.liked_docs)
  return &liked_docs_;
}

// repeated uint64 disliked_docs = 4 [packed = true];
inline int UserLikesTape::disliked_docs_size() const {
  return disliked_docs_.size();
}
inline void UserLikesTape::clear_disliked_docs() {
  disliked_docs_.Clear();
}
inline ::google::protobuf::uint64 UserLikesTape::disliked_docs(int index) const {
  // @@protoc_insertion_point(field_get:UserLikesTape.disliked_docs)
  return disliked_docs_.Get(index);
}
inline void UserLikesTape::set_disliked_docs(int index, ::google::protobuf::uint64 value) {
  disliked_docs_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserLikesTape.disliked_docs)
}
inline void UserLikesTape::add_disliked_docs(::google::protobuf::uint64 value) {
  disliked_docs_.Add(value);
  // @@protoc_insertion_point(field_add:UserLikesTape.disliked_docs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserLikesTape::disliked_docs() const {
  // @@protoc_insertion_point(field_list:UserLikesTape.disliked_docs)
  return disliked_docs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserLikesTape::mutable_disliked_docs() {
  // @@protoc_insertion_point(field_mutable_list:UserLikesTape.disliked_docs)
  return &disliked_docs_;
}

// -------------------------------------------------------------------

// UserView

// optional string user_id = 1;
inline bool UserView::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserView::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserView::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserView::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& UserView::user_id() const {
  // @@protoc_insertion_point(field_get:UserView.user_id)
  return user_id_.GetNoArena();
}
inline void UserView::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserView.user_id)
}
#if LANG_CXX11
inline void UserView::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserView.user_id)
}
#endif
inline void UserView::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserView.user_id)
}
inline void UserView::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserView.user_id)
}
inline ::std::string* UserView::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:UserView.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserView::release_user_id() {
  // @@protoc_insertion_point(field_release:UserView.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserView::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:UserView.user_id)
}

// optional string url = 2;
inline bool UserView::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserView::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserView::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserView::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& UserView::url() const {
  // @@protoc_insertion_point(field_get:UserView.url)
  return url_.GetNoArena();
}
inline void UserView::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserView.url)
}
#if LANG_CXX11
inline void UserView::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserView.url)
}
#endif
inline void UserView::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserView.url)
}
inline void UserView::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserView.url)
}
inline ::std::string* UserView::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:UserView.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserView::release_url() {
  // @@protoc_insertion_point(field_release:UserView.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserView::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:UserView.url)
}

// optional int64 doc_id = 3;
inline bool UserView::has_doc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserView::set_has_doc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserView::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserView::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 UserView::doc_id() const {
  // @@protoc_insertion_point(field_get:UserView.doc_id)
  return doc_id_;
}
inline void UserView::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:UserView.doc_id)
}

// optional int64 timestamp = 4;
inline bool UserView::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserView::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserView::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserView::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserView::timestamp() const {
  // @@protoc_insertion_point(field_get:UserView.timestamp)
  return timestamp_;
}
inline void UserView::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:UserView.timestamp)
}

// optional .ActionType action_type = 5;
inline bool UserView::has_action_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserView::set_has_action_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserView::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserView::clear_action_type() {
  action_type_ = 1;
  clear_has_action_type();
}
inline ::ActionType UserView::action_type() const {
  // @@protoc_insertion_point(field_get:UserView.action_type)
  return static_cast< ::ActionType >(action_type_);
}
inline void UserView::set_action_type(::ActionType value) {
  assert(::ActionType_IsValid(value));
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:UserView.action_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActionType>() {
  return ::ActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tapelogd_2eproto__INCLUDED
