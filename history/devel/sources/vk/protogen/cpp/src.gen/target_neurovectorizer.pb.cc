// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: target_neurovectorizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "target_neurovectorizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace target_neurovectorizer {
namespace pb {
class Phrases_PhraseEmbeddingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Phrases_PhraseEmbedding>
     _instance;
} _Phrases_PhraseEmbedding_default_instance_;
class Phrases_QueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Phrases_Query>
     _instance;
} _Phrases_Query_default_instance_;
class PhrasesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Phrases>
     _instance;
} _Phrases_default_instance_;

namespace protobuf_target_5fneurovectorizer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_PhraseEmbedding, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_PhraseEmbedding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_PhraseEmbedding, component_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_PhraseEmbedding, compressed_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_Query, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_Query, phrase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases_Query, embedding_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrases, embedding_format_),
  ~0u,
  1,
  0,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Phrases_PhraseEmbedding)},
  { 9, 17, sizeof(Phrases_Query)},
  { 20, 29, sizeof(Phrases)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Phrases_PhraseEmbedding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Phrases_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Phrases_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "target_neurovectorizer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Phrases_PhraseEmbedding_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Phrases_PhraseEmbedding_default_instance_);_Phrases_Query_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Phrases_Query_default_instance_);_Phrases_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Phrases_default_instance_);_Phrases_Query_default_instance_._instance.get_mutable()->embedding_ = const_cast< ::target_neurovectorizer::pb::Phrases_PhraseEmbedding*>(
      ::target_neurovectorizer::pb::Phrases_PhraseEmbedding::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034target_neurovectorizer.proto\022\031target_n"
      "eurovectorizer.pb\"\375\002\n\007Phrases\0227\n\005query\030\001"
      " \003(\0132(.target_neurovectorizer.pb.Phrases"
      ".Query\022\017\n\007version\030\002 \001(\r\022\r\n\005error\030\003 \001(\t\022L"
      "\n\020embedding_format\030\004 \001(\01622.target_neurov"
      "ectorizer.pb.Phrases.EmbeddingFormat\0328\n\017"
      "PhraseEmbedding\022\021\n\tcomponent\030\001 \003(\002\022\022\n\nco"
      "mpressed\030\002 \001(\014\032j\n\005Query\022\n\n\002id\030\001 \001(\r\022\016\n\006p"
      "hrase\030\002 \001(\014\022E\n\tembedding\030\003 \001(\01322.target_"
      "neurovectorizer.pb.Phrases.PhraseEmbeddi"
      "ng\"%\n\017EmbeddingFormat\022\010\n\004FP32\020\000\022\010\n\004FP16\020"
      "\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "target_neurovectorizer.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_target_5fneurovectorizer_2eproto

const ::google::protobuf::EnumDescriptor* Phrases_EmbeddingFormat_descriptor() {
  protobuf_target_5fneurovectorizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_target_5fneurovectorizer_2eproto::file_level_enum_descriptors[0];
}
bool Phrases_EmbeddingFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Phrases_EmbeddingFormat Phrases::FP32;
const Phrases_EmbeddingFormat Phrases::FP16;
const Phrases_EmbeddingFormat Phrases::EmbeddingFormat_MIN;
const Phrases_EmbeddingFormat Phrases::EmbeddingFormat_MAX;
const int Phrases::EmbeddingFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phrases_PhraseEmbedding::kComponentFieldNumber;
const int Phrases_PhraseEmbedding::kCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phrases_PhraseEmbedding::Phrases_PhraseEmbedding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_target_5fneurovectorizer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
}
Phrases_PhraseEmbedding::Phrases_PhraseEmbedding(const Phrases_PhraseEmbedding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      component_(from.component_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compressed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_compressed()) {
    compressed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compressed_);
  }
  // @@protoc_insertion_point(copy_constructor:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
}

void Phrases_PhraseEmbedding::SharedCtor() {
  _cached_size_ = 0;
  compressed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Phrases_PhraseEmbedding::~Phrases_PhraseEmbedding() {
  // @@protoc_insertion_point(destructor:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  SharedDtor();
}

void Phrases_PhraseEmbedding::SharedDtor() {
  compressed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Phrases_PhraseEmbedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phrases_PhraseEmbedding::descriptor() {
  protobuf_target_5fneurovectorizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_target_5fneurovectorizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Phrases_PhraseEmbedding& Phrases_PhraseEmbedding::default_instance() {
  protobuf_target_5fneurovectorizer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Phrases_PhraseEmbedding* Phrases_PhraseEmbedding::New(::google::protobuf::Arena* arena) const {
  Phrases_PhraseEmbedding* n = new Phrases_PhraseEmbedding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phrases_PhraseEmbedding::Clear() {
// @@protoc_insertion_point(message_clear_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_.Clear();
  if (has_compressed()) {
    GOOGLE_DCHECK(!compressed_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*compressed_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Phrases_PhraseEmbedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float component = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_component())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_component())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes compressed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  return false;
#undef DO_
}

void Phrases_PhraseEmbedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float component = 1;
  for (int i = 0, n = this->component_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->component(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes compressed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
}

::google::protobuf::uint8* Phrases_PhraseEmbedding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float component = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->component_, target);

  cached_has_bits = _has_bits_[0];
  // optional bytes compressed = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  return target;
}

size_t Phrases_PhraseEmbedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float component = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->component_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->component_size());
    total_size += data_size;
  }

  // optional bytes compressed = 2;
  if (has_compressed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->compressed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phrases_PhraseEmbedding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  GOOGLE_DCHECK_NE(&from, this);
  const Phrases_PhraseEmbedding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Phrases_PhraseEmbedding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
    MergeFrom(*source);
  }
}

void Phrases_PhraseEmbedding::MergeFrom(const Phrases_PhraseEmbedding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  component_.MergeFrom(from.component_);
  if (from.has_compressed()) {
    set_has_compressed();
    compressed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compressed_);
  }
}

void Phrases_PhraseEmbedding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phrases_PhraseEmbedding::CopyFrom(const Phrases_PhraseEmbedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phrases_PhraseEmbedding::IsInitialized() const {
  return true;
}

void Phrases_PhraseEmbedding::Swap(Phrases_PhraseEmbedding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phrases_PhraseEmbedding::InternalSwap(Phrases_PhraseEmbedding* other) {
  using std::swap;
  component_.InternalSwap(&other->component_);
  compressed_.Swap(&other->compressed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phrases_PhraseEmbedding::GetMetadata() const {
  protobuf_target_5fneurovectorizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_target_5fneurovectorizer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phrases_PhraseEmbedding

// repeated float component = 1;
int Phrases_PhraseEmbedding::component_size() const {
  return component_.size();
}
void Phrases_PhraseEmbedding::clear_component() {
  component_.Clear();
}
float Phrases_PhraseEmbedding::component(int index) const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
  return component_.Get(index);
}
void Phrases_PhraseEmbedding::set_component(int index, float value) {
  component_.Set(index, value);
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
}
void Phrases_PhraseEmbedding::add_component(float value) {
  component_.Add(value);
  // @@protoc_insertion_point(field_add:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
}
const ::google::protobuf::RepeatedField< float >&
Phrases_PhraseEmbedding::component() const {
  // @@protoc_insertion_point(field_list:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
  return component_;
}
::google::protobuf::RepeatedField< float >*
Phrases_PhraseEmbedding::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
  return &component_;
}

// optional bytes compressed = 2;
bool Phrases_PhraseEmbedding::has_compressed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Phrases_PhraseEmbedding::set_has_compressed() {
  _has_bits_[0] |= 0x00000001u;
}
void Phrases_PhraseEmbedding::clear_has_compressed() {
  _has_bits_[0] &= ~0x00000001u;
}
void Phrases_PhraseEmbedding::clear_compressed() {
  compressed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_compressed();
}
const ::std::string& Phrases_PhraseEmbedding::compressed() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
  return compressed_.GetNoArena();
}
void Phrases_PhraseEmbedding::set_compressed(const ::std::string& value) {
  set_has_compressed();
  compressed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}
#if LANG_CXX11
void Phrases_PhraseEmbedding::set_compressed(::std::string&& value) {
  set_has_compressed();
  compressed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}
#endif
void Phrases_PhraseEmbedding::set_compressed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_compressed();
  compressed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}
void Phrases_PhraseEmbedding::set_compressed(const void* value, size_t size) {
  set_has_compressed();
  compressed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}
::std::string* Phrases_PhraseEmbedding::mutable_compressed() {
  set_has_compressed();
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
  return compressed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Phrases_PhraseEmbedding::release_compressed() {
  // @@protoc_insertion_point(field_release:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
  clear_has_compressed();
  return compressed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Phrases_PhraseEmbedding::set_allocated_compressed(::std::string* compressed) {
  if (compressed != NULL) {
    set_has_compressed();
  } else {
    clear_has_compressed();
  }
  compressed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compressed);
  // @@protoc_insertion_point(field_set_allocated:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phrases_Query::kIdFieldNumber;
const int Phrases_Query::kPhraseFieldNumber;
const int Phrases_Query::kEmbeddingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phrases_Query::Phrases_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_target_5fneurovectorizer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:target_neurovectorizer.pb.Phrases.Query)
}
Phrases_Query::Phrases_Query(const Phrases_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phrase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phrase()) {
    phrase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phrase_);
  }
  if (from.has_embedding()) {
    embedding_ = new ::target_neurovectorizer::pb::Phrases_PhraseEmbedding(*from.embedding_);
  } else {
    embedding_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:target_neurovectorizer.pb.Phrases.Query)
}

void Phrases_Query::SharedCtor() {
  _cached_size_ = 0;
  phrase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&embedding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&embedding_)) + sizeof(id_));
}

Phrases_Query::~Phrases_Query() {
  // @@protoc_insertion_point(destructor:target_neurovectorizer.pb.Phrases.Query)
  SharedDtor();
}

void Phrases_Query::SharedDtor() {
  phrase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete embedding_;
}

void Phrases_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phrases_Query::descriptor() {
  protobuf_target_5fneurovectorizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_target_5fneurovectorizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Phrases_Query& Phrases_Query::default_instance() {
  protobuf_target_5fneurovectorizer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Phrases_Query* Phrases_Query::New(::google::protobuf::Arena* arena) const {
  Phrases_Query* n = new Phrases_Query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phrases_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:target_neurovectorizer.pb.Phrases.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!phrase_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phrase_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(embedding_ != NULL);
      embedding_->::target_neurovectorizer::pb::Phrases_PhraseEmbedding::Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Phrases_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:target_neurovectorizer.pb.Phrases.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes phrase = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phrase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .target_neurovectorizer.pb.Phrases.PhraseEmbedding embedding = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embedding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:target_neurovectorizer.pb.Phrases.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:target_neurovectorizer.pb.Phrases.Query)
  return false;
#undef DO_
}

void Phrases_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:target_neurovectorizer.pb.Phrases.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes phrase = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phrase(), output);
  }

  // optional .target_neurovectorizer.pb.Phrases.PhraseEmbedding embedding = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->embedding_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:target_neurovectorizer.pb.Phrases.Query)
}

::google::protobuf::uint8* Phrases_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:target_neurovectorizer.pb.Phrases.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes phrase = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phrase(), target);
  }

  // optional .target_neurovectorizer.pb.Phrases.PhraseEmbedding embedding = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->embedding_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:target_neurovectorizer.pb.Phrases.Query)
  return target;
}

size_t Phrases_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:target_neurovectorizer.pb.Phrases.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes phrase = 2;
    if (has_phrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phrase());
    }

    // optional .target_neurovectorizer.pb.Phrases.PhraseEmbedding embedding = 3;
    if (has_embedding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->embedding_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phrases_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:target_neurovectorizer.pb.Phrases.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Phrases_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Phrases_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:target_neurovectorizer.pb.Phrases.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:target_neurovectorizer.pb.Phrases.Query)
    MergeFrom(*source);
  }
}

void Phrases_Query::MergeFrom(const Phrases_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:target_neurovectorizer.pb.Phrases.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_phrase();
      phrase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phrase_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_embedding()->::target_neurovectorizer::pb::Phrases_PhraseEmbedding::MergeFrom(from.embedding());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Phrases_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:target_neurovectorizer.pb.Phrases.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phrases_Query::CopyFrom(const Phrases_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:target_neurovectorizer.pb.Phrases.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phrases_Query::IsInitialized() const {
  return true;
}

void Phrases_Query::Swap(Phrases_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phrases_Query::InternalSwap(Phrases_Query* other) {
  using std::swap;
  phrase_.Swap(&other->phrase_);
  swap(embedding_, other->embedding_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phrases_Query::GetMetadata() const {
  protobuf_target_5fneurovectorizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_target_5fneurovectorizer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phrases_Query

// optional uint32 id = 1;
bool Phrases_Query::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Phrases_Query::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Phrases_Query::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Phrases_Query::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 Phrases_Query::id() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.Query.id)
  return id_;
}
void Phrases_Query::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.Query.id)
}

// optional bytes phrase = 2;
bool Phrases_Query::has_phrase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Phrases_Query::set_has_phrase() {
  _has_bits_[0] |= 0x00000001u;
}
void Phrases_Query::clear_has_phrase() {
  _has_bits_[0] &= ~0x00000001u;
}
void Phrases_Query::clear_phrase() {
  phrase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phrase();
}
const ::std::string& Phrases_Query::phrase() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.Query.phrase)
  return phrase_.GetNoArena();
}
void Phrases_Query::set_phrase(const ::std::string& value) {
  set_has_phrase();
  phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.Query.phrase)
}
#if LANG_CXX11
void Phrases_Query::set_phrase(::std::string&& value) {
  set_has_phrase();
  phrase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:target_neurovectorizer.pb.Phrases.Query.phrase)
}
#endif
void Phrases_Query::set_phrase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phrase();
  phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:target_neurovectorizer.pb.Phrases.Query.phrase)
}
void Phrases_Query::set_phrase(const void* value, size_t size) {
  set_has_phrase();
  phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:target_neurovectorizer.pb.Phrases.Query.phrase)
}
::std::string* Phrases_Query::mutable_phrase() {
  set_has_phrase();
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.Query.phrase)
  return phrase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Phrases_Query::release_phrase() {
  // @@protoc_insertion_point(field_release:target_neurovectorizer.pb.Phrases.Query.phrase)
  clear_has_phrase();
  return phrase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Phrases_Query::set_allocated_phrase(::std::string* phrase) {
  if (phrase != NULL) {
    set_has_phrase();
  } else {
    clear_has_phrase();
  }
  phrase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phrase);
  // @@protoc_insertion_point(field_set_allocated:target_neurovectorizer.pb.Phrases.Query.phrase)
}

// optional .target_neurovectorizer.pb.Phrases.PhraseEmbedding embedding = 3;
bool Phrases_Query::has_embedding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Phrases_Query::set_has_embedding() {
  _has_bits_[0] |= 0x00000002u;
}
void Phrases_Query::clear_has_embedding() {
  _has_bits_[0] &= ~0x00000002u;
}
void Phrases_Query::clear_embedding() {
  if (embedding_ != NULL) embedding_->::target_neurovectorizer::pb::Phrases_PhraseEmbedding::Clear();
  clear_has_embedding();
}
const ::target_neurovectorizer::pb::Phrases_PhraseEmbedding& Phrases_Query::embedding() const {
  const ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* p = embedding_;
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.Query.embedding)
  return p != NULL ? *p : *reinterpret_cast<const ::target_neurovectorizer::pb::Phrases_PhraseEmbedding*>(
      &::target_neurovectorizer::pb::_Phrases_PhraseEmbedding_default_instance_);
}
::target_neurovectorizer::pb::Phrases_PhraseEmbedding* Phrases_Query::mutable_embedding() {
  set_has_embedding();
  if (embedding_ == NULL) {
    embedding_ = new ::target_neurovectorizer::pb::Phrases_PhraseEmbedding;
  }
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.Query.embedding)
  return embedding_;
}
::target_neurovectorizer::pb::Phrases_PhraseEmbedding* Phrases_Query::release_embedding() {
  // @@protoc_insertion_point(field_release:target_neurovectorizer.pb.Phrases.Query.embedding)
  clear_has_embedding();
  ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* temp = embedding_;
  embedding_ = NULL;
  return temp;
}
void Phrases_Query::set_allocated_embedding(::target_neurovectorizer::pb::Phrases_PhraseEmbedding* embedding) {
  delete embedding_;
  embedding_ = embedding;
  if (embedding) {
    set_has_embedding();
  } else {
    clear_has_embedding();
  }
  // @@protoc_insertion_point(field_set_allocated:target_neurovectorizer.pb.Phrases.Query.embedding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phrases::kQueryFieldNumber;
const int Phrases::kVersionFieldNumber;
const int Phrases::kErrorFieldNumber;
const int Phrases::kEmbeddingFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phrases::Phrases()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_target_5fneurovectorizer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:target_neurovectorizer.pb.Phrases)
}
Phrases::Phrases(const Phrases& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      query_(from.query_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&embedding_format_) -
    reinterpret_cast<char*>(&version_)) + sizeof(embedding_format_));
  // @@protoc_insertion_point(copy_constructor:target_neurovectorizer.pb.Phrases)
}

void Phrases::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&embedding_format_) -
      reinterpret_cast<char*>(&version_)) + sizeof(embedding_format_));
}

Phrases::~Phrases() {
  // @@protoc_insertion_point(destructor:target_neurovectorizer.pb.Phrases)
  SharedDtor();
}

void Phrases::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Phrases::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phrases::descriptor() {
  protobuf_target_5fneurovectorizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_target_5fneurovectorizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Phrases& Phrases::default_instance() {
  protobuf_target_5fneurovectorizer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Phrases* Phrases::New(::google::protobuf::Arena* arena) const {
  Phrases* n = new Phrases;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phrases::Clear() {
// @@protoc_insertion_point(message_clear_start:target_neurovectorizer.pb.Phrases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.Clear();
  if (has_error()) {
    GOOGLE_DCHECK(!error_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&embedding_format_) -
        reinterpret_cast<char*>(&version_)) + sizeof(embedding_format_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Phrases::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:target_neurovectorizer.pb.Phrases)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .target_neurovectorizer.pb.Phrases.Query query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_neurovectorizer.pb.Phrases.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .target_neurovectorizer.pb.Phrases.EmbeddingFormat embedding_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::target_neurovectorizer::pb::Phrases_EmbeddingFormat_IsValid(value)) {
            set_embedding_format(static_cast< ::target_neurovectorizer::pb::Phrases_EmbeddingFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:target_neurovectorizer.pb.Phrases)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:target_neurovectorizer.pb.Phrases)
  return false;
#undef DO_
}

void Phrases::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:target_neurovectorizer.pb.Phrases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .target_neurovectorizer.pb.Phrases.Query query = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_neurovectorizer.pb.Phrases.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // optional .target_neurovectorizer.pb.Phrases.EmbeddingFormat embedding_format = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->embedding_format(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:target_neurovectorizer.pb.Phrases)
}

::google::protobuf::uint8* Phrases::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:target_neurovectorizer.pb.Phrases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .target_neurovectorizer.pb.Phrases.Query query = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->query(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_neurovectorizer.pb.Phrases.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // optional .target_neurovectorizer.pb.Phrases.EmbeddingFormat embedding_format = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->embedding_format(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:target_neurovectorizer.pb.Phrases)
  return target;
}

size_t Phrases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:target_neurovectorizer.pb.Phrases)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .target_neurovectorizer.pb.Phrases.Query query = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->query_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .target_neurovectorizer.pb.Phrases.EmbeddingFormat embedding_format = 4;
    if (has_embedding_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->embedding_format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phrases::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:target_neurovectorizer.pb.Phrases)
  GOOGLE_DCHECK_NE(&from, this);
  const Phrases* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Phrases>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:target_neurovectorizer.pb.Phrases)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:target_neurovectorizer.pb.Phrases)
    MergeFrom(*source);
  }
}

void Phrases::MergeFrom(const Phrases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:target_neurovectorizer.pb.Phrases)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_.MergeFrom(from.query_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      embedding_format_ = from.embedding_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Phrases::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:target_neurovectorizer.pb.Phrases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phrases::CopyFrom(const Phrases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:target_neurovectorizer.pb.Phrases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phrases::IsInitialized() const {
  return true;
}

void Phrases::Swap(Phrases* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phrases::InternalSwap(Phrases* other) {
  using std::swap;
  query_.InternalSwap(&other->query_);
  error_.Swap(&other->error_);
  swap(version_, other->version_);
  swap(embedding_format_, other->embedding_format_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phrases::GetMetadata() const {
  protobuf_target_5fneurovectorizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_target_5fneurovectorizer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phrases

// repeated .target_neurovectorizer.pb.Phrases.Query query = 1;
int Phrases::query_size() const {
  return query_.size();
}
void Phrases::clear_query() {
  query_.Clear();
}
const ::target_neurovectorizer::pb::Phrases_Query& Phrases::query(int index) const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.query)
  return query_.Get(index);
}
::target_neurovectorizer::pb::Phrases_Query* Phrases::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.query)
  return query_.Mutable(index);
}
::target_neurovectorizer::pb::Phrases_Query* Phrases::add_query() {
  // @@protoc_insertion_point(field_add:target_neurovectorizer.pb.Phrases.query)
  return query_.Add();
}
::google::protobuf::RepeatedPtrField< ::target_neurovectorizer::pb::Phrases_Query >*
Phrases::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:target_neurovectorizer.pb.Phrases.query)
  return &query_;
}
const ::google::protobuf::RepeatedPtrField< ::target_neurovectorizer::pb::Phrases_Query >&
Phrases::query() const {
  // @@protoc_insertion_point(field_list:target_neurovectorizer.pb.Phrases.query)
  return query_;
}

// optional uint32 version = 2;
bool Phrases::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Phrases::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void Phrases::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void Phrases::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 Phrases::version() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.version)
  return version_;
}
void Phrases::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.version)
}

// optional string error = 3;
bool Phrases::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Phrases::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void Phrases::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void Phrases::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& Phrases::error() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.error)
  return error_.GetNoArena();
}
void Phrases::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.error)
}
#if LANG_CXX11
void Phrases::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:target_neurovectorizer.pb.Phrases.error)
}
#endif
void Phrases::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:target_neurovectorizer.pb.Phrases.error)
}
void Phrases::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:target_neurovectorizer.pb.Phrases.error)
}
::std::string* Phrases::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Phrases::release_error() {
  // @@protoc_insertion_point(field_release:target_neurovectorizer.pb.Phrases.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Phrases::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:target_neurovectorizer.pb.Phrases.error)
}

// optional .target_neurovectorizer.pb.Phrases.EmbeddingFormat embedding_format = 4;
bool Phrases::has_embedding_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Phrases::set_has_embedding_format() {
  _has_bits_[0] |= 0x00000004u;
}
void Phrases::clear_has_embedding_format() {
  _has_bits_[0] &= ~0x00000004u;
}
void Phrases::clear_embedding_format() {
  embedding_format_ = 0;
  clear_has_embedding_format();
}
::target_neurovectorizer::pb::Phrases_EmbeddingFormat Phrases::embedding_format() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.embedding_format)
  return static_cast< ::target_neurovectorizer::pb::Phrases_EmbeddingFormat >(embedding_format_);
}
void Phrases::set_embedding_format(::target_neurovectorizer::pb::Phrases_EmbeddingFormat value) {
  assert(::target_neurovectorizer::pb::Phrases_EmbeddingFormat_IsValid(value));
  set_has_embedding_format();
  embedding_format_ = value;
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.embedding_format)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace target_neurovectorizer

// @@protoc_insertion_point(global_scope)
