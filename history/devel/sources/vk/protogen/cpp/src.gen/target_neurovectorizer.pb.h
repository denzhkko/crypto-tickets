// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: target_neurovectorizer.proto

#ifndef PROTOBUF_target_5fneurovectorizer_2eproto__INCLUDED
#define PROTOBUF_target_5fneurovectorizer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace target_neurovectorizer {
namespace pb {
class Phrases;
class PhrasesDefaultTypeInternal;
extern PhrasesDefaultTypeInternal _Phrases_default_instance_;
class Phrases_PhraseEmbedding;
class Phrases_PhraseEmbeddingDefaultTypeInternal;
extern Phrases_PhraseEmbeddingDefaultTypeInternal _Phrases_PhraseEmbedding_default_instance_;
class Phrases_Query;
class Phrases_QueryDefaultTypeInternal;
extern Phrases_QueryDefaultTypeInternal _Phrases_Query_default_instance_;
}  // namespace pb
}  // namespace target_neurovectorizer

namespace target_neurovectorizer {
namespace pb {

namespace protobuf_target_5fneurovectorizer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_target_5fneurovectorizer_2eproto

enum Phrases_EmbeddingFormat {
  Phrases_EmbeddingFormat_FP32 = 0,
  Phrases_EmbeddingFormat_FP16 = 1
};
bool Phrases_EmbeddingFormat_IsValid(int value);
const Phrases_EmbeddingFormat Phrases_EmbeddingFormat_EmbeddingFormat_MIN = Phrases_EmbeddingFormat_FP32;
const Phrases_EmbeddingFormat Phrases_EmbeddingFormat_EmbeddingFormat_MAX = Phrases_EmbeddingFormat_FP16;
const int Phrases_EmbeddingFormat_EmbeddingFormat_ARRAYSIZE = Phrases_EmbeddingFormat_EmbeddingFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phrases_EmbeddingFormat_descriptor();
inline const ::std::string& Phrases_EmbeddingFormat_Name(Phrases_EmbeddingFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phrases_EmbeddingFormat_descriptor(), value);
}
inline bool Phrases_EmbeddingFormat_Parse(
    const ::std::string& name, Phrases_EmbeddingFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phrases_EmbeddingFormat>(
    Phrases_EmbeddingFormat_descriptor(), name, value);
}
// ===================================================================

class Phrases_PhraseEmbedding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:target_neurovectorizer.pb.Phrases.PhraseEmbedding) */ {
 public:
  Phrases_PhraseEmbedding();
  virtual ~Phrases_PhraseEmbedding();

  Phrases_PhraseEmbedding(const Phrases_PhraseEmbedding& from);

  inline Phrases_PhraseEmbedding& operator=(const Phrases_PhraseEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Phrases_PhraseEmbedding(Phrases_PhraseEmbedding&& from) noexcept
    : Phrases_PhraseEmbedding() {
    *this = ::std::move(from);
  }

  inline Phrases_PhraseEmbedding& operator=(Phrases_PhraseEmbedding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Phrases_PhraseEmbedding& default_instance();

  static inline const Phrases_PhraseEmbedding* internal_default_instance() {
    return reinterpret_cast<const Phrases_PhraseEmbedding*>(
               &_Phrases_PhraseEmbedding_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Phrases_PhraseEmbedding* other);
  friend void swap(Phrases_PhraseEmbedding& a, Phrases_PhraseEmbedding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Phrases_PhraseEmbedding* New() const PROTOBUF_FINAL { return New(NULL); }

  Phrases_PhraseEmbedding* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Phrases_PhraseEmbedding& from);
  void MergeFrom(const Phrases_PhraseEmbedding& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Phrases_PhraseEmbedding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float component = 1;
  int component_size() const;
  void clear_component();
  static const int kComponentFieldNumber = 1;
  float component(int index) const;
  void set_component(int index, float value);
  void add_component(float value);
  const ::google::protobuf::RepeatedField< float >&
      component() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_component();

  // optional bytes compressed = 2;
  bool has_compressed() const;
  void clear_compressed();
  static const int kCompressedFieldNumber = 2;
  const ::std::string& compressed() const;
  void set_compressed(const ::std::string& value);
  #if LANG_CXX11
  void set_compressed(::std::string&& value);
  #endif
  void set_compressed(const char* value);
  void set_compressed(const void* value, size_t size);
  ::std::string* mutable_compressed();
  ::std::string* release_compressed();
  void set_allocated_compressed(::std::string* compressed);

  // @@protoc_insertion_point(class_scope:target_neurovectorizer.pb.Phrases.PhraseEmbedding)
 private:
  void set_has_compressed();
  void clear_has_compressed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > component_;
  ::google::protobuf::internal::ArenaStringPtr compressed_;
  friend struct protobuf_target_5fneurovectorizer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Phrases_Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:target_neurovectorizer.pb.Phrases.Query) */ {
 public:
  Phrases_Query();
  virtual ~Phrases_Query();

  Phrases_Query(const Phrases_Query& from);

  inline Phrases_Query& operator=(const Phrases_Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Phrases_Query(Phrases_Query&& from) noexcept
    : Phrases_Query() {
    *this = ::std::move(from);
  }

  inline Phrases_Query& operator=(Phrases_Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Phrases_Query& default_instance();

  static inline const Phrases_Query* internal_default_instance() {
    return reinterpret_cast<const Phrases_Query*>(
               &_Phrases_Query_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Phrases_Query* other);
  friend void swap(Phrases_Query& a, Phrases_Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Phrases_Query* New() const PROTOBUF_FINAL { return New(NULL); }

  Phrases_Query* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Phrases_Query& from);
  void MergeFrom(const Phrases_Query& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Phrases_Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes phrase = 2;
  bool has_phrase() const;
  void clear_phrase();
  static const int kPhraseFieldNumber = 2;
  const ::std::string& phrase() const;
  void set_phrase(const ::std::string& value);
  #if LANG_CXX11
  void set_phrase(::std::string&& value);
  #endif
  void set_phrase(const char* value);
  void set_phrase(const void* value, size_t size);
  ::std::string* mutable_phrase();
  ::std::string* release_phrase();
  void set_allocated_phrase(::std::string* phrase);

  // optional .target_neurovectorizer.pb.Phrases.PhraseEmbedding embedding = 3;
  bool has_embedding() const;
  void clear_embedding();
  static const int kEmbeddingFieldNumber = 3;
  const ::target_neurovectorizer::pb::Phrases_PhraseEmbedding& embedding() const;
  ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* mutable_embedding();
  ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* release_embedding();
  void set_allocated_embedding(::target_neurovectorizer::pb::Phrases_PhraseEmbedding* embedding);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:target_neurovectorizer.pb.Phrases.Query)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_phrase();
  void clear_has_phrase();
  void set_has_embedding();
  void clear_has_embedding();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr phrase_;
  ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* embedding_;
  ::google::protobuf::uint32 id_;
  friend struct protobuf_target_5fneurovectorizer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Phrases : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:target_neurovectorizer.pb.Phrases) */ {
 public:
  Phrases();
  virtual ~Phrases();

  Phrases(const Phrases& from);

  inline Phrases& operator=(const Phrases& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Phrases(Phrases&& from) noexcept
    : Phrases() {
    *this = ::std::move(from);
  }

  inline Phrases& operator=(Phrases&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Phrases& default_instance();

  static inline const Phrases* internal_default_instance() {
    return reinterpret_cast<const Phrases*>(
               &_Phrases_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Phrases* other);
  friend void swap(Phrases& a, Phrases& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Phrases* New() const PROTOBUF_FINAL { return New(NULL); }

  Phrases* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Phrases& from);
  void MergeFrom(const Phrases& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Phrases* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Phrases_PhraseEmbedding PhraseEmbedding;
  typedef Phrases_Query Query;

  typedef Phrases_EmbeddingFormat EmbeddingFormat;
  static const EmbeddingFormat FP32 =
    Phrases_EmbeddingFormat_FP32;
  static const EmbeddingFormat FP16 =
    Phrases_EmbeddingFormat_FP16;
  static inline bool EmbeddingFormat_IsValid(int value) {
    return Phrases_EmbeddingFormat_IsValid(value);
  }
  static const EmbeddingFormat EmbeddingFormat_MIN =
    Phrases_EmbeddingFormat_EmbeddingFormat_MIN;
  static const EmbeddingFormat EmbeddingFormat_MAX =
    Phrases_EmbeddingFormat_EmbeddingFormat_MAX;
  static const int EmbeddingFormat_ARRAYSIZE =
    Phrases_EmbeddingFormat_EmbeddingFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EmbeddingFormat_descriptor() {
    return Phrases_EmbeddingFormat_descriptor();
  }
  static inline const ::std::string& EmbeddingFormat_Name(EmbeddingFormat value) {
    return Phrases_EmbeddingFormat_Name(value);
  }
  static inline bool EmbeddingFormat_Parse(const ::std::string& name,
      EmbeddingFormat* value) {
    return Phrases_EmbeddingFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .target_neurovectorizer.pb.Phrases.Query query = 1;
  int query_size() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::target_neurovectorizer::pb::Phrases_Query& query(int index) const;
  ::target_neurovectorizer::pb::Phrases_Query* mutable_query(int index);
  ::target_neurovectorizer::pb::Phrases_Query* add_query();
  ::google::protobuf::RepeatedPtrField< ::target_neurovectorizer::pb::Phrases_Query >*
      mutable_query();
  const ::google::protobuf::RepeatedPtrField< ::target_neurovectorizer::pb::Phrases_Query >&
      query() const;

  // optional string error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .target_neurovectorizer.pb.Phrases.EmbeddingFormat embedding_format = 4;
  bool has_embedding_format() const;
  void clear_embedding_format();
  static const int kEmbeddingFormatFieldNumber = 4;
  ::target_neurovectorizer::pb::Phrases_EmbeddingFormat embedding_format() const;
  void set_embedding_format(::target_neurovectorizer::pb::Phrases_EmbeddingFormat value);

  // @@protoc_insertion_point(class_scope:target_neurovectorizer.pb.Phrases)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_error();
  void clear_has_error();
  void set_has_embedding_format();
  void clear_has_embedding_format();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::target_neurovectorizer::pb::Phrases_Query > query_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::uint32 version_;
  int embedding_format_;
  friend struct protobuf_target_5fneurovectorizer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Phrases_PhraseEmbedding

// repeated float component = 1;
inline int Phrases_PhraseEmbedding::component_size() const {
  return component_.size();
}
inline void Phrases_PhraseEmbedding::clear_component() {
  component_.Clear();
}
inline float Phrases_PhraseEmbedding::component(int index) const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
  return component_.Get(index);
}
inline void Phrases_PhraseEmbedding::set_component(int index, float value) {
  component_.Set(index, value);
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
}
inline void Phrases_PhraseEmbedding::add_component(float value) {
  component_.Add(value);
  // @@protoc_insertion_point(field_add:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
}
inline const ::google::protobuf::RepeatedField< float >&
Phrases_PhraseEmbedding::component() const {
  // @@protoc_insertion_point(field_list:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
  return component_;
}
inline ::google::protobuf::RepeatedField< float >*
Phrases_PhraseEmbedding::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:target_neurovectorizer.pb.Phrases.PhraseEmbedding.component)
  return &component_;
}

// optional bytes compressed = 2;
inline bool Phrases_PhraseEmbedding::has_compressed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Phrases_PhraseEmbedding::set_has_compressed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Phrases_PhraseEmbedding::clear_has_compressed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Phrases_PhraseEmbedding::clear_compressed() {
  compressed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_compressed();
}
inline const ::std::string& Phrases_PhraseEmbedding::compressed() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
  return compressed_.GetNoArena();
}
inline void Phrases_PhraseEmbedding::set_compressed(const ::std::string& value) {
  set_has_compressed();
  compressed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}
#if LANG_CXX11
inline void Phrases_PhraseEmbedding::set_compressed(::std::string&& value) {
  set_has_compressed();
  compressed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}
#endif
inline void Phrases_PhraseEmbedding::set_compressed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_compressed();
  compressed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}
inline void Phrases_PhraseEmbedding::set_compressed(const void* value, size_t size) {
  set_has_compressed();
  compressed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}
inline ::std::string* Phrases_PhraseEmbedding::mutable_compressed() {
  set_has_compressed();
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
  return compressed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Phrases_PhraseEmbedding::release_compressed() {
  // @@protoc_insertion_point(field_release:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
  clear_has_compressed();
  return compressed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Phrases_PhraseEmbedding::set_allocated_compressed(::std::string* compressed) {
  if (compressed != NULL) {
    set_has_compressed();
  } else {
    clear_has_compressed();
  }
  compressed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compressed);
  // @@protoc_insertion_point(field_set_allocated:target_neurovectorizer.pb.Phrases.PhraseEmbedding.compressed)
}

// -------------------------------------------------------------------

// Phrases_Query

// optional uint32 id = 1;
inline bool Phrases_Query::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Phrases_Query::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Phrases_Query::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Phrases_Query::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Phrases_Query::id() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.Query.id)
  return id_;
}
inline void Phrases_Query::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.Query.id)
}

// optional bytes phrase = 2;
inline bool Phrases_Query::has_phrase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Phrases_Query::set_has_phrase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Phrases_Query::clear_has_phrase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Phrases_Query::clear_phrase() {
  phrase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phrase();
}
inline const ::std::string& Phrases_Query::phrase() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.Query.phrase)
  return phrase_.GetNoArena();
}
inline void Phrases_Query::set_phrase(const ::std::string& value) {
  set_has_phrase();
  phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.Query.phrase)
}
#if LANG_CXX11
inline void Phrases_Query::set_phrase(::std::string&& value) {
  set_has_phrase();
  phrase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:target_neurovectorizer.pb.Phrases.Query.phrase)
}
#endif
inline void Phrases_Query::set_phrase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phrase();
  phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:target_neurovectorizer.pb.Phrases.Query.phrase)
}
inline void Phrases_Query::set_phrase(const void* value, size_t size) {
  set_has_phrase();
  phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:target_neurovectorizer.pb.Phrases.Query.phrase)
}
inline ::std::string* Phrases_Query::mutable_phrase() {
  set_has_phrase();
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.Query.phrase)
  return phrase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Phrases_Query::release_phrase() {
  // @@protoc_insertion_point(field_release:target_neurovectorizer.pb.Phrases.Query.phrase)
  clear_has_phrase();
  return phrase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Phrases_Query::set_allocated_phrase(::std::string* phrase) {
  if (phrase != NULL) {
    set_has_phrase();
  } else {
    clear_has_phrase();
  }
  phrase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phrase);
  // @@protoc_insertion_point(field_set_allocated:target_neurovectorizer.pb.Phrases.Query.phrase)
}

// optional .target_neurovectorizer.pb.Phrases.PhraseEmbedding embedding = 3;
inline bool Phrases_Query::has_embedding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Phrases_Query::set_has_embedding() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Phrases_Query::clear_has_embedding() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Phrases_Query::clear_embedding() {
  if (embedding_ != NULL) embedding_->::target_neurovectorizer::pb::Phrases_PhraseEmbedding::Clear();
  clear_has_embedding();
}
inline const ::target_neurovectorizer::pb::Phrases_PhraseEmbedding& Phrases_Query::embedding() const {
  const ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* p = embedding_;
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.Query.embedding)
  return p != NULL ? *p : *reinterpret_cast<const ::target_neurovectorizer::pb::Phrases_PhraseEmbedding*>(
      &::target_neurovectorizer::pb::_Phrases_PhraseEmbedding_default_instance_);
}
inline ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* Phrases_Query::mutable_embedding() {
  set_has_embedding();
  if (embedding_ == NULL) {
    embedding_ = new ::target_neurovectorizer::pb::Phrases_PhraseEmbedding;
  }
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.Query.embedding)
  return embedding_;
}
inline ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* Phrases_Query::release_embedding() {
  // @@protoc_insertion_point(field_release:target_neurovectorizer.pb.Phrases.Query.embedding)
  clear_has_embedding();
  ::target_neurovectorizer::pb::Phrases_PhraseEmbedding* temp = embedding_;
  embedding_ = NULL;
  return temp;
}
inline void Phrases_Query::set_allocated_embedding(::target_neurovectorizer::pb::Phrases_PhraseEmbedding* embedding) {
  delete embedding_;
  embedding_ = embedding;
  if (embedding) {
    set_has_embedding();
  } else {
    clear_has_embedding();
  }
  // @@protoc_insertion_point(field_set_allocated:target_neurovectorizer.pb.Phrases.Query.embedding)
}

// -------------------------------------------------------------------

// Phrases

// repeated .target_neurovectorizer.pb.Phrases.Query query = 1;
inline int Phrases::query_size() const {
  return query_.size();
}
inline void Phrases::clear_query() {
  query_.Clear();
}
inline const ::target_neurovectorizer::pb::Phrases_Query& Phrases::query(int index) const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.query)
  return query_.Get(index);
}
inline ::target_neurovectorizer::pb::Phrases_Query* Phrases::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.query)
  return query_.Mutable(index);
}
inline ::target_neurovectorizer::pb::Phrases_Query* Phrases::add_query() {
  // @@protoc_insertion_point(field_add:target_neurovectorizer.pb.Phrases.query)
  return query_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::target_neurovectorizer::pb::Phrases_Query >*
Phrases::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:target_neurovectorizer.pb.Phrases.query)
  return &query_;
}
inline const ::google::protobuf::RepeatedPtrField< ::target_neurovectorizer::pb::Phrases_Query >&
Phrases::query() const {
  // @@protoc_insertion_point(field_list:target_neurovectorizer.pb.Phrases.query)
  return query_;
}

// optional uint32 version = 2;
inline bool Phrases::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Phrases::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Phrases::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Phrases::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Phrases::version() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.version)
  return version_;
}
inline void Phrases::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.version)
}

// optional string error = 3;
inline bool Phrases::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Phrases::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Phrases::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Phrases::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
inline const ::std::string& Phrases::error() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.error)
  return error_.GetNoArena();
}
inline void Phrases::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.error)
}
#if LANG_CXX11
inline void Phrases::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:target_neurovectorizer.pb.Phrases.error)
}
#endif
inline void Phrases::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:target_neurovectorizer.pb.Phrases.error)
}
inline void Phrases::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:target_neurovectorizer.pb.Phrases.error)
}
inline ::std::string* Phrases::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:target_neurovectorizer.pb.Phrases.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Phrases::release_error() {
  // @@protoc_insertion_point(field_release:target_neurovectorizer.pb.Phrases.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Phrases::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:target_neurovectorizer.pb.Phrases.error)
}

// optional .target_neurovectorizer.pb.Phrases.EmbeddingFormat embedding_format = 4;
inline bool Phrases::has_embedding_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Phrases::set_has_embedding_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Phrases::clear_has_embedding_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Phrases::clear_embedding_format() {
  embedding_format_ = 0;
  clear_has_embedding_format();
}
inline ::target_neurovectorizer::pb::Phrases_EmbeddingFormat Phrases::embedding_format() const {
  // @@protoc_insertion_point(field_get:target_neurovectorizer.pb.Phrases.embedding_format)
  return static_cast< ::target_neurovectorizer::pb::Phrases_EmbeddingFormat >(embedding_format_);
}
inline void Phrases::set_embedding_format(::target_neurovectorizer::pb::Phrases_EmbeddingFormat value) {
  assert(::target_neurovectorizer::pb::Phrases_EmbeddingFormat_IsValid(value));
  set_has_embedding_format();
  embedding_format_ = value;
  // @@protoc_insertion_point(field_set:target_neurovectorizer.pb.Phrases.embedding_format)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace target_neurovectorizer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::target_neurovectorizer::pb::Phrases_EmbeddingFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::target_neurovectorizer::pb::Phrases_EmbeddingFormat>() {
  return ::target_neurovectorizer::pb::Phrases_EmbeddingFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_target_5fneurovectorizer_2eproto__INCLUDED
