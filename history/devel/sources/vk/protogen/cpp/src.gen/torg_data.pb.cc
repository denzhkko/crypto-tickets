// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: torg_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "torg_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class MetaSectionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MetaSection>
     _instance;
} _MetaSection_default_instance_;
class PriceRangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PriceRange>
     _instance;
} _PriceRange_default_instance_;
class TorgItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TorgItem>
     _instance;
} _TorgItem_default_instance_;

namespace protobuf_torg_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSection, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSection, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRange, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRange, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRange, rb_code_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, img_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, short_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, full_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, vendor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, min_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, max_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, avg_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, price_ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorgItem, offers_cnt_),
  0,
  9,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  12,
  13,
  ~0u,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(MetaSection)},
  { 9, 17, sizeof(PriceRange)},
  { 20, 40, sizeof(TorgItem)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetaSection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PriceRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TorgItem_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "torg_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MetaSection_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MetaSection_default_instance_);_PriceRange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PriceRange_default_instance_);_TorgItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TorgItem_default_instance_);_TorgItem_default_instance_._instance.get_mutable()->category_ = const_cast< ::ru::mail::go::webbase::blobs::MetaSection*>(
      ::ru::mail::go::webbase::blobs::MetaSection::internal_default_instance());
  _TorgItem_default_instance_._instance.get_mutable()->vendor_ = const_cast< ::ru::mail::go::webbase::blobs::MetaSection*>(
      ::ru::mail::go::webbase::blobs::MetaSection::internal_default_instance());
  _TorgItem_default_instance_._instance.get_mutable()->client_ = const_cast< ::ru::mail::go::webbase::blobs::MetaSection*>(
      ::ru::mail::go::webbase::blobs::MetaSection::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017torg_data.proto\022\030ru.mail.go.webbase.bl"
      "obs\"\'\n\013MetaSection\022\n\n\002id\030\001 \002(\004\022\014\n\004name\030\002"
      " \002(\t\"7\n\nPriceRange\022\013\n\003min\030\001 \002(\004\022\013\n\003max\030\002"
      " \002(\004\022\017\n\007rb_code\030\003 \003(\r\"\332\003\n\010TorgItem\022\n\n\002id"
      "\030\001 \002(\t\0220\n\004type\030\002 \002(\0162\".ru.mail.go.webbas"
      "e.blobs.ItemType\022\013\n\003url\030\003 \002(\t\022\017\n\007img_url"
      "\030\004 \002(\t\022\r\n\005title\030\005 \002(\t\022\031\n\021short_descripti"
      "on\030\006 \002(\t\022\030\n\020full_description\030\007 \002(\t\0227\n\010ca"
      "tegory\030\010 \002(\0132%.ru.mail.go.webbase.blobs."
      "MetaSection\0225\n\006vendor\030\t \002(\0132%.ru.mail.go"
      ".webbase.blobs.MetaSection\0225\n\006client\030\n \001"
      "(\0132%.ru.mail.go.webbase.blobs.MetaSectio"
      "n\022\021\n\tmin_price\030\013 \002(\004\022\021\n\tmax_price\030\014 \002(\004\022"
      "\021\n\tavg_price\030\r \002(\004\022:\n\014price_ranges\030\016 \003(\013"
      "2$.ru.mail.go.webbase.blobs.PriceRange\022\022"
      "\n\noffers_cnt\030\017 \001(\r*=\n\010ItemType\022\t\n\005OFFER\020"
      "\000\022\010\n\004CARD\020\001\022\017\n\013PSEUDO_CARD\020\002\022\013\n\007UNKNOWN\020"
      "\003B\nB\010TorgData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "torg_data.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_torg_5fdata_2eproto

const ::google::protobuf::EnumDescriptor* ItemType_descriptor() {
  protobuf_torg_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5fdata_2eproto::file_level_enum_descriptors[0];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaSection::kIdFieldNumber;
const int MetaSection::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaSection::MetaSection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_torg_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MetaSection)
}
MetaSection::MetaSection(const MetaSection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MetaSection)
}

void MetaSection::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
}

MetaSection::~MetaSection() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MetaSection)
  SharedDtor();
}

void MetaSection::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetaSection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaSection::descriptor() {
  protobuf_torg_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetaSection& MetaSection::default_instance() {
  protobuf_torg_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetaSection* MetaSection::New(::google::protobuf::Arena* arena) const {
  MetaSection* n = new MetaSection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaSection::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MetaSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MetaSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MetaSection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MetaSection.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MetaSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MetaSection)
  return false;
#undef DO_
}

void MetaSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MetaSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MetaSection.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MetaSection)
}

::google::protobuf::uint8* MetaSection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MetaSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MetaSection.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MetaSection)
  return target;
}

size_t MetaSection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.MetaSection)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t MetaSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MetaSection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaSection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MetaSection)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaSection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaSection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MetaSection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MetaSection)
    MergeFrom(*source);
  }
}

void MetaSection::MergeFrom(const MetaSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MetaSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetaSection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MetaSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaSection::CopyFrom(const MetaSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MetaSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaSection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MetaSection::Swap(MetaSection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaSection::InternalSwap(MetaSection* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetaSection::GetMetadata() const {
  protobuf_torg_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaSection

// required uint64 id = 1;
bool MetaSection::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetaSection::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MetaSection::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MetaSection::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 MetaSection::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaSection.id)
  return id_;
}
void MetaSection::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MetaSection.id)
}

// required string name = 2;
bool MetaSection::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetaSection::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MetaSection::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MetaSection::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& MetaSection::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaSection.name)
  return name_.GetNoArena();
}
void MetaSection::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MetaSection.name)
}
#if LANG_CXX11
void MetaSection::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MetaSection.name)
}
#endif
void MetaSection::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MetaSection.name)
}
void MetaSection::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MetaSection.name)
}
::std::string* MetaSection::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MetaSection.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetaSection::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MetaSection.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaSection::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MetaSection.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PriceRange::kMinFieldNumber;
const int PriceRange::kMaxFieldNumber;
const int PriceRange::kRbCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PriceRange::PriceRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_torg_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PriceRange)
}
PriceRange::PriceRange(const PriceRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rb_code_(from.rb_code_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PriceRange)
}

void PriceRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

PriceRange::~PriceRange() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PriceRange)
  SharedDtor();
}

void PriceRange::SharedDtor() {
}

void PriceRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceRange::descriptor() {
  protobuf_torg_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PriceRange& PriceRange::default_instance() {
  protobuf_torg_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PriceRange* PriceRange::New(::google::protobuf::Arena* arena) const {
  PriceRange* n = new PriceRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PriceRange::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PriceRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rb_code_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PriceRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PriceRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rb_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_rb_code())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rb_code())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PriceRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PriceRange)
  return false;
#undef DO_
}

void PriceRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PriceRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min(), output);
  }

  // required uint64 max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max(), output);
  }

  // repeated uint32 rb_code = 3;
  for (int i = 0, n = this->rb_code_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rb_code(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PriceRange)
}

::google::protobuf::uint8* PriceRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PriceRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min(), target);
  }

  // required uint64 max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max(), target);
  }

  // repeated uint32 rb_code = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->rb_code_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PriceRange)
  return target;
}

size_t PriceRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.PriceRange)
  size_t total_size = 0;

  if (has_min()) {
    // required uint64 min = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min());
  }

  if (has_max()) {
    // required uint64 max = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max());
  }

  return total_size;
}
size_t PriceRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PriceRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 min = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min());

    // required uint64 max = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 rb_code = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rb_code_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rb_code_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PriceRange)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PriceRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PriceRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PriceRange)
    MergeFrom(*source);
  }
}

void PriceRange::MergeFrom(const PriceRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PriceRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rb_code_.MergeFrom(from.rb_code_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PriceRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PriceRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceRange::CopyFrom(const PriceRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PriceRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PriceRange::Swap(PriceRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PriceRange::InternalSwap(PriceRange* other) {
  using std::swap;
  rb_code_.InternalSwap(&other->rb_code_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PriceRange::GetMetadata() const {
  protobuf_torg_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PriceRange

// required uint64 min = 1;
bool PriceRange::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PriceRange::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
void PriceRange::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void PriceRange::clear_min() {
  min_ = GOOGLE_ULONGLONG(0);
  clear_has_min();
}
::google::protobuf::uint64 PriceRange::min() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PriceRange.min)
  return min_;
}
void PriceRange::set_min(::google::protobuf::uint64 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PriceRange.min)
}

// required uint64 max = 2;
bool PriceRange::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PriceRange::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
void PriceRange::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void PriceRange::clear_max() {
  max_ = GOOGLE_ULONGLONG(0);
  clear_has_max();
}
::google::protobuf::uint64 PriceRange::max() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PriceRange.max)
  return max_;
}
void PriceRange::set_max(::google::protobuf::uint64 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PriceRange.max)
}

// repeated uint32 rb_code = 3;
int PriceRange::rb_code_size() const {
  return rb_code_.size();
}
void PriceRange::clear_rb_code() {
  rb_code_.Clear();
}
::google::protobuf::uint32 PriceRange::rb_code(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PriceRange.rb_code)
  return rb_code_.Get(index);
}
void PriceRange::set_rb_code(int index, ::google::protobuf::uint32 value) {
  rb_code_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PriceRange.rb_code)
}
void PriceRange::add_rb_code(::google::protobuf::uint32 value) {
  rb_code_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PriceRange.rb_code)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PriceRange::rb_code() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PriceRange.rb_code)
  return rb_code_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PriceRange::mutable_rb_code() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PriceRange.rb_code)
  return &rb_code_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TorgItem::kIdFieldNumber;
const int TorgItem::kTypeFieldNumber;
const int TorgItem::kUrlFieldNumber;
const int TorgItem::kImgUrlFieldNumber;
const int TorgItem::kTitleFieldNumber;
const int TorgItem::kShortDescriptionFieldNumber;
const int TorgItem::kFullDescriptionFieldNumber;
const int TorgItem::kCategoryFieldNumber;
const int TorgItem::kVendorFieldNumber;
const int TorgItem::kClientFieldNumber;
const int TorgItem::kMinPriceFieldNumber;
const int TorgItem::kMaxPriceFieldNumber;
const int TorgItem::kAvgPriceFieldNumber;
const int TorgItem::kPriceRangesFieldNumber;
const int TorgItem::kOffersCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TorgItem::TorgItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_torg_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TorgItem)
}
TorgItem::TorgItem(const TorgItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      price_ranges_(from.price_ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  img_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_img_url()) {
    img_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_short_description()) {
    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  full_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_description()) {
    full_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_description_);
  }
  if (from.has_category()) {
    category_ = new ::ru::mail::go::webbase::blobs::MetaSection(*from.category_);
  } else {
    category_ = NULL;
  }
  if (from.has_vendor()) {
    vendor_ = new ::ru::mail::go::webbase::blobs::MetaSection(*from.vendor_);
  } else {
    vendor_ = NULL;
  }
  if (from.has_client()) {
    client_ = new ::ru::mail::go::webbase::blobs::MetaSection(*from.client_);
  } else {
    client_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_price_) -
    reinterpret_cast<char*>(&type_)) + sizeof(avg_price_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TorgItem)
}

void TorgItem::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_price_) -
      reinterpret_cast<char*>(&category_)) + sizeof(avg_price_));
}

TorgItem::~TorgItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TorgItem)
  SharedDtor();
}

void TorgItem::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete vendor_;
  if (this != internal_default_instance()) delete client_;
}

void TorgItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TorgItem::descriptor() {
  protobuf_torg_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TorgItem& TorgItem::default_instance() {
  protobuf_torg_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TorgItem* TorgItem::New(::google::protobuf::Arena* arena) const {
  TorgItem* n = new TorgItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TorgItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TorgItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!img_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*img_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!short_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*short_description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!full_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*full_description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(category_ != NULL);
      category_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(vendor_ != NULL);
      vendor_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(client_ != NULL);
    client_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
  }
  if (cached_has_bits & 15872u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_price_) -
        reinterpret_cast<char*>(&type_)) + sizeof(avg_price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TorgItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TorgItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TorgItem.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.ItemType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ItemType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::ItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TorgItem.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string img_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_url().data(), static_cast<int>(this->img_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TorgItem.img_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TorgItem.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string short_description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_description().data(), static_cast<int>(this->short_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TorgItem.short_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string full_description = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_description().data(), static_cast<int>(this->full_description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TorgItem.full_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.MetaSection category = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.MetaSection vendor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vendor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.MetaSection client = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 min_price = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_min_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 max_price = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_max_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 avg_price = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_avg_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avg_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.PriceRange price_ranges = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_price_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 offers_cnt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_offers_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offers_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TorgItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TorgItem)
  return false;
#undef DO_
}

void TorgItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TorgItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .ru.mail.go.webbase.blobs.ItemType type = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // required string img_url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), static_cast<int>(this->img_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.img_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->img_url(), output);
  }

  // required string title = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // required string short_description = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.short_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->short_description(), output);
  }

  // required string full_description = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_description().data(), static_cast<int>(this->full_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.full_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->full_description(), output);
  }

  // required .ru.mail.go.webbase.blobs.MetaSection category = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->category_, output);
  }

  // required .ru.mail.go.webbase.blobs.MetaSection vendor = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->vendor_, output);
  }

  // optional .ru.mail.go.webbase.blobs.MetaSection client = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->client_, output);
  }

  // required uint64 min_price = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->min_price(), output);
  }

  // required uint64 max_price = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->max_price(), output);
  }

  // required uint64 avg_price = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->avg_price(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.PriceRange price_ranges = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->price_ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->price_ranges(static_cast<int>(i)), output);
  }

  // optional uint32 offers_cnt = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->offers_cnt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TorgItem)
}

::google::protobuf::uint8* TorgItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TorgItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .ru.mail.go.webbase.blobs.ItemType type = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // required string img_url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), static_cast<int>(this->img_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.img_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->img_url(), target);
  }

  // required string title = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // required string short_description = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.short_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->short_description(), target);
  }

  // required string full_description = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_description().data(), static_cast<int>(this->full_description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TorgItem.full_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->full_description(), target);
  }

  // required .ru.mail.go.webbase.blobs.MetaSection category = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->category_, deterministic, target);
  }

  // required .ru.mail.go.webbase.blobs.MetaSection vendor = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->vendor_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.MetaSection client = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->client_, deterministic, target);
  }

  // required uint64 min_price = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->min_price(), target);
  }

  // required uint64 max_price = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->max_price(), target);
  }

  // required uint64 avg_price = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->avg_price(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.PriceRange price_ranges = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->price_ranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->price_ranges(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 offers_cnt = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->offers_cnt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TorgItem)
  return target;
}

size_t TorgItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.TorgItem)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_url()) {
    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_img_url()) {
    // required string img_url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->img_url());
  }

  if (has_title()) {
    // required string title = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_short_description()) {
    // required string short_description = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_description());
  }

  if (has_full_description()) {
    // required string full_description = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_description());
  }

  if (has_category()) {
    // required .ru.mail.go.webbase.blobs.MetaSection category = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->category_);
  }

  if (has_vendor()) {
    // required .ru.mail.go.webbase.blobs.MetaSection vendor = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vendor_);
  }

  if (has_type()) {
    // required .ru.mail.go.webbase.blobs.ItemType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_min_price()) {
    // required uint64 min_price = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_price());
  }

  if (has_max_price()) {
    // required uint64 max_price = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_price());
  }

  if (has_avg_price()) {
    // required uint64 avg_price = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avg_price());
  }

  return total_size;
}
size_t TorgItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TorgItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003aff) ^ 0x00003aff) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string img_url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->img_url());

    // required string title = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string short_description = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_description());

    // required string full_description = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_description());

    // required .ru.mail.go.webbase.blobs.MetaSection category = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->category_);

    // required .ru.mail.go.webbase.blobs.MetaSection vendor = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vendor_);

    // required .ru.mail.go.webbase.blobs.ItemType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint64 min_price = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_price());

    // required uint64 max_price = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_price());

    // required uint64 avg_price = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avg_price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.blobs.PriceRange price_ranges = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->price_ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price_ranges(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.webbase.blobs.MetaSection client = 10;
  if (has_client()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_);
  }

  // optional uint32 offers_cnt = 15;
  if (has_offers_cnt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offers_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TorgItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TorgItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TorgItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TorgItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TorgItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TorgItem)
    MergeFrom(*source);
  }
}

void TorgItem::MergeFrom(const TorgItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TorgItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  price_ranges_.MergeFrom(from.price_ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_img_url();
      img_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_short_description();
      short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_full_description();
      full_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_description_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_category()->::ru::mail::go::webbase::blobs::MetaSection::MergeFrom(from.category());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_vendor()->::ru::mail::go::webbase::blobs::MetaSection::MergeFrom(from.vendor());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_client()->::ru::mail::go::webbase::blobs::MetaSection::MergeFrom(from.client());
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      offers_cnt_ = from.offers_cnt_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_price_ = from.min_price_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_price_ = from.max_price_;
    }
    if (cached_has_bits & 0x00002000u) {
      avg_price_ = from.avg_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TorgItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TorgItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TorgItem::CopyFrom(const TorgItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TorgItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorgItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003aff) != 0x00003aff) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->price_ranges())) return false;
  if (has_category()) {
    if (!this->category_->IsInitialized()) return false;
  }
  if (has_vendor()) {
    if (!this->vendor_->IsInitialized()) return false;
  }
  if (has_client()) {
    if (!this->client_->IsInitialized()) return false;
  }
  return true;
}

void TorgItem::Swap(TorgItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TorgItem::InternalSwap(TorgItem* other) {
  using std::swap;
  price_ranges_.InternalSwap(&other->price_ranges_);
  id_.Swap(&other->id_);
  url_.Swap(&other->url_);
  img_url_.Swap(&other->img_url_);
  title_.Swap(&other->title_);
  short_description_.Swap(&other->short_description_);
  full_description_.Swap(&other->full_description_);
  swap(category_, other->category_);
  swap(vendor_, other->vendor_);
  swap(client_, other->client_);
  swap(type_, other->type_);
  swap(offers_cnt_, other->offers_cnt_);
  swap(min_price_, other->min_price_);
  swap(max_price_, other->max_price_);
  swap(avg_price_, other->avg_price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TorgItem::GetMetadata() const {
  protobuf_torg_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TorgItem

// required string id = 1;
bool TorgItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TorgItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TorgItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TorgItem::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& TorgItem::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.id)
  return id_.GetNoArena();
}
void TorgItem::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.id)
}
#if LANG_CXX11
void TorgItem::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.id)
}
#endif
void TorgItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.id)
}
void TorgItem::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.id)
}
::std::string* TorgItem::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TorgItem::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TorgItem::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.id)
}

// required .ru.mail.go.webbase.blobs.ItemType type = 2;
bool TorgItem::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TorgItem::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
void TorgItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void TorgItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::ItemType TorgItem::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.type)
  return static_cast< ::ru::mail::go::webbase::blobs::ItemType >(type_);
}
void TorgItem::set_type(::ru::mail::go::webbase::blobs::ItemType value) {
  assert(::ru::mail::go::webbase::blobs::ItemType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.type)
}

// required string url = 3;
bool TorgItem::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TorgItem::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void TorgItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void TorgItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& TorgItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.url)
  return url_.GetNoArena();
}
void TorgItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.url)
}
#if LANG_CXX11
void TorgItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.url)
}
#endif
void TorgItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.url)
}
void TorgItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.url)
}
::std::string* TorgItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TorgItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TorgItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.url)
}

// required string img_url = 4;
bool TorgItem::has_img_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TorgItem::set_has_img_url() {
  _has_bits_[0] |= 0x00000004u;
}
void TorgItem::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void TorgItem::clear_img_url() {
  img_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_url();
}
const ::std::string& TorgItem::img_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.img_url)
  return img_url_.GetNoArena();
}
void TorgItem::set_img_url(const ::std::string& value) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.img_url)
}
#if LANG_CXX11
void TorgItem::set_img_url(::std::string&& value) {
  set_has_img_url();
  img_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.img_url)
}
#endif
void TorgItem::set_img_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.img_url)
}
void TorgItem::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.img_url)
}
::std::string* TorgItem::mutable_img_url() {
  set_has_img_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.img_url)
  return img_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TorgItem::release_img_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.img_url)
  clear_has_img_url();
  return img_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TorgItem::set_allocated_img_url(::std::string* img_url) {
  if (img_url != NULL) {
    set_has_img_url();
  } else {
    clear_has_img_url();
  }
  img_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.img_url)
}

// required string title = 5;
bool TorgItem::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TorgItem::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
void TorgItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void TorgItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& TorgItem::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.title)
  return title_.GetNoArena();
}
void TorgItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.title)
}
#if LANG_CXX11
void TorgItem::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.title)
}
#endif
void TorgItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.title)
}
void TorgItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.title)
}
::std::string* TorgItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TorgItem::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TorgItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.title)
}

// required string short_description = 6;
bool TorgItem::has_short_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TorgItem::set_has_short_description() {
  _has_bits_[0] |= 0x00000010u;
}
void TorgItem::clear_has_short_description() {
  _has_bits_[0] &= ~0x00000010u;
}
void TorgItem::clear_short_description() {
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_short_description();
}
const ::std::string& TorgItem::short_description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.short_description)
  return short_description_.GetNoArena();
}
void TorgItem::set_short_description(const ::std::string& value) {
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.short_description)
}
#if LANG_CXX11
void TorgItem::set_short_description(::std::string&& value) {
  set_has_short_description();
  short_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.short_description)
}
#endif
void TorgItem::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.short_description)
}
void TorgItem::set_short_description(const char* value, size_t size) {
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.short_description)
}
::std::string* TorgItem::mutable_short_description() {
  set_has_short_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.short_description)
  return short_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TorgItem::release_short_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.short_description)
  clear_has_short_description();
  return short_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TorgItem::set_allocated_short_description(::std::string* short_description) {
  if (short_description != NULL) {
    set_has_short_description();
  } else {
    clear_has_short_description();
  }
  short_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.short_description)
}

// required string full_description = 7;
bool TorgItem::has_full_description() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TorgItem::set_has_full_description() {
  _has_bits_[0] |= 0x00000020u;
}
void TorgItem::clear_has_full_description() {
  _has_bits_[0] &= ~0x00000020u;
}
void TorgItem::clear_full_description() {
  full_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_description();
}
const ::std::string& TorgItem::full_description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.full_description)
  return full_description_.GetNoArena();
}
void TorgItem::set_full_description(const ::std::string& value) {
  set_has_full_description();
  full_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.full_description)
}
#if LANG_CXX11
void TorgItem::set_full_description(::std::string&& value) {
  set_has_full_description();
  full_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.full_description)
}
#endif
void TorgItem::set_full_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_description();
  full_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.full_description)
}
void TorgItem::set_full_description(const char* value, size_t size) {
  set_has_full_description();
  full_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.full_description)
}
::std::string* TorgItem::mutable_full_description() {
  set_has_full_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.full_description)
  return full_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TorgItem::release_full_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.full_description)
  clear_has_full_description();
  return full_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TorgItem::set_allocated_full_description(::std::string* full_description) {
  if (full_description != NULL) {
    set_has_full_description();
  } else {
    clear_has_full_description();
  }
  full_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.full_description)
}

// required .ru.mail.go.webbase.blobs.MetaSection category = 8;
bool TorgItem::has_category() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TorgItem::set_has_category() {
  _has_bits_[0] |= 0x00000040u;
}
void TorgItem::clear_has_category() {
  _has_bits_[0] &= ~0x00000040u;
}
void TorgItem::clear_category() {
  if (category_ != NULL) category_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
  clear_has_category();
}
const ::ru::mail::go::webbase::blobs::MetaSection& TorgItem::category() const {
  const ::ru::mail::go::webbase::blobs::MetaSection* p = category_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.category)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MetaSection*>(
      &::ru::mail::go::webbase::blobs::_MetaSection_default_instance_);
}
::ru::mail::go::webbase::blobs::MetaSection* TorgItem::mutable_category() {
  set_has_category();
  if (category_ == NULL) {
    category_ = new ::ru::mail::go::webbase::blobs::MetaSection;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.category)
  return category_;
}
::ru::mail::go::webbase::blobs::MetaSection* TorgItem::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.category)
  clear_has_category();
  ::ru::mail::go::webbase::blobs::MetaSection* temp = category_;
  category_ = NULL;
  return temp;
}
void TorgItem::set_allocated_category(::ru::mail::go::webbase::blobs::MetaSection* category) {
  delete category_;
  category_ = category;
  if (category) {
    set_has_category();
  } else {
    clear_has_category();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.category)
}

// required .ru.mail.go.webbase.blobs.MetaSection vendor = 9;
bool TorgItem::has_vendor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TorgItem::set_has_vendor() {
  _has_bits_[0] |= 0x00000080u;
}
void TorgItem::clear_has_vendor() {
  _has_bits_[0] &= ~0x00000080u;
}
void TorgItem::clear_vendor() {
  if (vendor_ != NULL) vendor_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
  clear_has_vendor();
}
const ::ru::mail::go::webbase::blobs::MetaSection& TorgItem::vendor() const {
  const ::ru::mail::go::webbase::blobs::MetaSection* p = vendor_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.vendor)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MetaSection*>(
      &::ru::mail::go::webbase::blobs::_MetaSection_default_instance_);
}
::ru::mail::go::webbase::blobs::MetaSection* TorgItem::mutable_vendor() {
  set_has_vendor();
  if (vendor_ == NULL) {
    vendor_ = new ::ru::mail::go::webbase::blobs::MetaSection;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.vendor)
  return vendor_;
}
::ru::mail::go::webbase::blobs::MetaSection* TorgItem::release_vendor() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.vendor)
  clear_has_vendor();
  ::ru::mail::go::webbase::blobs::MetaSection* temp = vendor_;
  vendor_ = NULL;
  return temp;
}
void TorgItem::set_allocated_vendor(::ru::mail::go::webbase::blobs::MetaSection* vendor) {
  delete vendor_;
  vendor_ = vendor;
  if (vendor) {
    set_has_vendor();
  } else {
    clear_has_vendor();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.vendor)
}

// optional .ru.mail.go.webbase.blobs.MetaSection client = 10;
bool TorgItem::has_client() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TorgItem::set_has_client() {
  _has_bits_[0] |= 0x00000100u;
}
void TorgItem::clear_has_client() {
  _has_bits_[0] &= ~0x00000100u;
}
void TorgItem::clear_client() {
  if (client_ != NULL) client_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
  clear_has_client();
}
const ::ru::mail::go::webbase::blobs::MetaSection& TorgItem::client() const {
  const ::ru::mail::go::webbase::blobs::MetaSection* p = client_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.client)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MetaSection*>(
      &::ru::mail::go::webbase::blobs::_MetaSection_default_instance_);
}
::ru::mail::go::webbase::blobs::MetaSection* TorgItem::mutable_client() {
  set_has_client();
  if (client_ == NULL) {
    client_ = new ::ru::mail::go::webbase::blobs::MetaSection;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.client)
  return client_;
}
::ru::mail::go::webbase::blobs::MetaSection* TorgItem::release_client() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.client)
  clear_has_client();
  ::ru::mail::go::webbase::blobs::MetaSection* temp = client_;
  client_ = NULL;
  return temp;
}
void TorgItem::set_allocated_client(::ru::mail::go::webbase::blobs::MetaSection* client) {
  delete client_;
  client_ = client;
  if (client) {
    set_has_client();
  } else {
    clear_has_client();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.client)
}

// required uint64 min_price = 11;
bool TorgItem::has_min_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TorgItem::set_has_min_price() {
  _has_bits_[0] |= 0x00000800u;
}
void TorgItem::clear_has_min_price() {
  _has_bits_[0] &= ~0x00000800u;
}
void TorgItem::clear_min_price() {
  min_price_ = GOOGLE_ULONGLONG(0);
  clear_has_min_price();
}
::google::protobuf::uint64 TorgItem::min_price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.min_price)
  return min_price_;
}
void TorgItem::set_min_price(::google::protobuf::uint64 value) {
  set_has_min_price();
  min_price_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.min_price)
}

// required uint64 max_price = 12;
bool TorgItem::has_max_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TorgItem::set_has_max_price() {
  _has_bits_[0] |= 0x00001000u;
}
void TorgItem::clear_has_max_price() {
  _has_bits_[0] &= ~0x00001000u;
}
void TorgItem::clear_max_price() {
  max_price_ = GOOGLE_ULONGLONG(0);
  clear_has_max_price();
}
::google::protobuf::uint64 TorgItem::max_price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.max_price)
  return max_price_;
}
void TorgItem::set_max_price(::google::protobuf::uint64 value) {
  set_has_max_price();
  max_price_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.max_price)
}

// required uint64 avg_price = 13;
bool TorgItem::has_avg_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TorgItem::set_has_avg_price() {
  _has_bits_[0] |= 0x00002000u;
}
void TorgItem::clear_has_avg_price() {
  _has_bits_[0] &= ~0x00002000u;
}
void TorgItem::clear_avg_price() {
  avg_price_ = GOOGLE_ULONGLONG(0);
  clear_has_avg_price();
}
::google::protobuf::uint64 TorgItem::avg_price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.avg_price)
  return avg_price_;
}
void TorgItem::set_avg_price(::google::protobuf::uint64 value) {
  set_has_avg_price();
  avg_price_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.avg_price)
}

// repeated .ru.mail.go.webbase.blobs.PriceRange price_ranges = 14;
int TorgItem::price_ranges_size() const {
  return price_ranges_.size();
}
void TorgItem::clear_price_ranges() {
  price_ranges_.Clear();
}
const ::ru::mail::go::webbase::blobs::PriceRange& TorgItem::price_ranges(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return price_ranges_.Get(index);
}
::ru::mail::go::webbase::blobs::PriceRange* TorgItem::mutable_price_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return price_ranges_.Mutable(index);
}
::ru::mail::go::webbase::blobs::PriceRange* TorgItem::add_price_ranges() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return price_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PriceRange >*
TorgItem::mutable_price_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return &price_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PriceRange >&
TorgItem::price_ranges() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return price_ranges_;
}

// optional uint32 offers_cnt = 15;
bool TorgItem::has_offers_cnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TorgItem::set_has_offers_cnt() {
  _has_bits_[0] |= 0x00000400u;
}
void TorgItem::clear_has_offers_cnt() {
  _has_bits_[0] &= ~0x00000400u;
}
void TorgItem::clear_offers_cnt() {
  offers_cnt_ = 0u;
  clear_has_offers_cnt();
}
::google::protobuf::uint32 TorgItem::offers_cnt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.offers_cnt)
  return offers_cnt_;
}
void TorgItem::set_offers_cnt(::google::protobuf::uint32 value) {
  set_has_offers_cnt();
  offers_cnt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.offers_cnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
