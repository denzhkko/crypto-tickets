// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: torg_data.proto

#ifndef PROTOBUF_torg_5fdata_2eproto__INCLUDED
#define PROTOBUF_torg_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class MetaSection;
class MetaSectionDefaultTypeInternal;
extern MetaSectionDefaultTypeInternal _MetaSection_default_instance_;
class PriceRange;
class PriceRangeDefaultTypeInternal;
extern PriceRangeDefaultTypeInternal _PriceRange_default_instance_;
class TorgItem;
class TorgItemDefaultTypeInternal;
extern TorgItemDefaultTypeInternal _TorgItem_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_torg_5fdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_torg_5fdata_2eproto

enum ItemType {
  OFFER = 0,
  CARD = 1,
  PSEUDO_CARD = 2,
  UNKNOWN = 3
};
bool ItemType_IsValid(int value);
const ItemType ItemType_MIN = OFFER;
const ItemType ItemType_MAX = UNKNOWN;
const int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemType_descriptor();
inline const ::std::string& ItemType_Name(ItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemType_descriptor(), value);
}
inline bool ItemType_Parse(
    const ::std::string& name, ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
// ===================================================================

class MetaSection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.MetaSection) */ {
 public:
  MetaSection();
  virtual ~MetaSection();

  MetaSection(const MetaSection& from);

  inline MetaSection& operator=(const MetaSection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetaSection(MetaSection&& from) noexcept
    : MetaSection() {
    *this = ::std::move(from);
  }

  inline MetaSection& operator=(MetaSection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaSection& default_instance();

  static inline const MetaSection* internal_default_instance() {
    return reinterpret_cast<const MetaSection*>(
               &_MetaSection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MetaSection* other);
  friend void swap(MetaSection& a, MetaSection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetaSection* New() const PROTOBUF_FINAL { return New(NULL); }

  MetaSection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MetaSection& from);
  void MergeFrom(const MetaSection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MetaSection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.MetaSection)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  friend struct protobuf_torg_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PriceRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PriceRange) */ {
 public:
  PriceRange();
  virtual ~PriceRange();

  PriceRange(const PriceRange& from);

  inline PriceRange& operator=(const PriceRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PriceRange(PriceRange&& from) noexcept
    : PriceRange() {
    *this = ::std::move(from);
  }

  inline PriceRange& operator=(PriceRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceRange& default_instance();

  static inline const PriceRange* internal_default_instance() {
    return reinterpret_cast<const PriceRange*>(
               &_PriceRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PriceRange* other);
  friend void swap(PriceRange& a, PriceRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PriceRange* New() const PROTOBUF_FINAL { return New(NULL); }

  PriceRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PriceRange& from);
  void MergeFrom(const PriceRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PriceRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 rb_code = 3;
  int rb_code_size() const;
  void clear_rb_code();
  static const int kRbCodeFieldNumber = 3;
  ::google::protobuf::uint32 rb_code(int index) const;
  void set_rb_code(int index, ::google::protobuf::uint32 value);
  void add_rb_code(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rb_code() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rb_code();

  // required uint64 min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  ::google::protobuf::uint64 min() const;
  void set_min(::google::protobuf::uint64 value);

  // required uint64 max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  ::google::protobuf::uint64 max() const;
  void set_max(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PriceRange)
 private:
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rb_code_;
  ::google::protobuf::uint64 min_;
  ::google::protobuf::uint64 max_;
  friend struct protobuf_torg_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TorgItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.TorgItem) */ {
 public:
  TorgItem();
  virtual ~TorgItem();

  TorgItem(const TorgItem& from);

  inline TorgItem& operator=(const TorgItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TorgItem(TorgItem&& from) noexcept
    : TorgItem() {
    *this = ::std::move(from);
  }

  inline TorgItem& operator=(TorgItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TorgItem& default_instance();

  static inline const TorgItem* internal_default_instance() {
    return reinterpret_cast<const TorgItem*>(
               &_TorgItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TorgItem* other);
  friend void swap(TorgItem& a, TorgItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TorgItem* New() const PROTOBUF_FINAL { return New(NULL); }

  TorgItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TorgItem& from);
  void MergeFrom(const TorgItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TorgItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.PriceRange price_ranges = 14;
  int price_ranges_size() const;
  void clear_price_ranges();
  static const int kPriceRangesFieldNumber = 14;
  const ::ru::mail::go::webbase::blobs::PriceRange& price_ranges(int index) const;
  ::ru::mail::go::webbase::blobs::PriceRange* mutable_price_ranges(int index);
  ::ru::mail::go::webbase::blobs::PriceRange* add_price_ranges();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PriceRange >*
      mutable_price_ranges();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PriceRange >&
      price_ranges() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string img_url = 4;
  bool has_img_url() const;
  void clear_img_url();
  static const int kImgUrlFieldNumber = 4;
  const ::std::string& img_url() const;
  void set_img_url(const ::std::string& value);
  #if LANG_CXX11
  void set_img_url(::std::string&& value);
  #endif
  void set_img_url(const char* value);
  void set_img_url(const char* value, size_t size);
  ::std::string* mutable_img_url();
  ::std::string* release_img_url();
  void set_allocated_img_url(::std::string* img_url);

  // required string title = 5;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string short_description = 6;
  bool has_short_description() const;
  void clear_short_description();
  static const int kShortDescriptionFieldNumber = 6;
  const ::std::string& short_description() const;
  void set_short_description(const ::std::string& value);
  #if LANG_CXX11
  void set_short_description(::std::string&& value);
  #endif
  void set_short_description(const char* value);
  void set_short_description(const char* value, size_t size);
  ::std::string* mutable_short_description();
  ::std::string* release_short_description();
  void set_allocated_short_description(::std::string* short_description);

  // required string full_description = 7;
  bool has_full_description() const;
  void clear_full_description();
  static const int kFullDescriptionFieldNumber = 7;
  const ::std::string& full_description() const;
  void set_full_description(const ::std::string& value);
  #if LANG_CXX11
  void set_full_description(::std::string&& value);
  #endif
  void set_full_description(const char* value);
  void set_full_description(const char* value, size_t size);
  ::std::string* mutable_full_description();
  ::std::string* release_full_description();
  void set_allocated_full_description(::std::string* full_description);

  // required .ru.mail.go.webbase.blobs.MetaSection category = 8;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 8;
  const ::ru::mail::go::webbase::blobs::MetaSection& category() const;
  ::ru::mail::go::webbase::blobs::MetaSection* mutable_category();
  ::ru::mail::go::webbase::blobs::MetaSection* release_category();
  void set_allocated_category(::ru::mail::go::webbase::blobs::MetaSection* category);

  // required .ru.mail.go.webbase.blobs.MetaSection vendor = 9;
  bool has_vendor() const;
  void clear_vendor();
  static const int kVendorFieldNumber = 9;
  const ::ru::mail::go::webbase::blobs::MetaSection& vendor() const;
  ::ru::mail::go::webbase::blobs::MetaSection* mutable_vendor();
  ::ru::mail::go::webbase::blobs::MetaSection* release_vendor();
  void set_allocated_vendor(::ru::mail::go::webbase::blobs::MetaSection* vendor);

  // optional .ru.mail.go.webbase.blobs.MetaSection client = 10;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 10;
  const ::ru::mail::go::webbase::blobs::MetaSection& client() const;
  ::ru::mail::go::webbase::blobs::MetaSection* mutable_client();
  ::ru::mail::go::webbase::blobs::MetaSection* release_client();
  void set_allocated_client(::ru::mail::go::webbase::blobs::MetaSection* client);

  // required .ru.mail.go.webbase.blobs.ItemType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ru::mail::go::webbase::blobs::ItemType type() const;
  void set_type(::ru::mail::go::webbase::blobs::ItemType value);

  // optional uint32 offers_cnt = 15;
  bool has_offers_cnt() const;
  void clear_offers_cnt();
  static const int kOffersCntFieldNumber = 15;
  ::google::protobuf::uint32 offers_cnt() const;
  void set_offers_cnt(::google::protobuf::uint32 value);

  // required uint64 min_price = 11;
  bool has_min_price() const;
  void clear_min_price();
  static const int kMinPriceFieldNumber = 11;
  ::google::protobuf::uint64 min_price() const;
  void set_min_price(::google::protobuf::uint64 value);

  // required uint64 max_price = 12;
  bool has_max_price() const;
  void clear_max_price();
  static const int kMaxPriceFieldNumber = 12;
  ::google::protobuf::uint64 max_price() const;
  void set_max_price(::google::protobuf::uint64 value);

  // required uint64 avg_price = 13;
  bool has_avg_price() const;
  void clear_avg_price();
  static const int kAvgPriceFieldNumber = 13;
  ::google::protobuf::uint64 avg_price() const;
  void set_avg_price(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.TorgItem)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_url();
  void clear_has_url();
  void set_has_img_url();
  void clear_has_img_url();
  void set_has_title();
  void clear_has_title();
  void set_has_short_description();
  void clear_has_short_description();
  void set_has_full_description();
  void clear_has_full_description();
  void set_has_category();
  void clear_has_category();
  void set_has_vendor();
  void clear_has_vendor();
  void set_has_client();
  void clear_has_client();
  void set_has_min_price();
  void clear_has_min_price();
  void set_has_max_price();
  void clear_has_max_price();
  void set_has_avg_price();
  void clear_has_avg_price();
  void set_has_offers_cnt();
  void clear_has_offers_cnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PriceRange > price_ranges_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr img_url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr short_description_;
  ::google::protobuf::internal::ArenaStringPtr full_description_;
  ::ru::mail::go::webbase::blobs::MetaSection* category_;
  ::ru::mail::go::webbase::blobs::MetaSection* vendor_;
  ::ru::mail::go::webbase::blobs::MetaSection* client_;
  int type_;
  ::google::protobuf::uint32 offers_cnt_;
  ::google::protobuf::uint64 min_price_;
  ::google::protobuf::uint64 max_price_;
  ::google::protobuf::uint64 avg_price_;
  friend struct protobuf_torg_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetaSection

// required uint64 id = 1;
inline bool MetaSection::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaSection::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaSection::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaSection::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MetaSection::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaSection.id)
  return id_;
}
inline void MetaSection::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MetaSection.id)
}

// required string name = 2;
inline bool MetaSection::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaSection::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaSection::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaSection::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MetaSection::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaSection.name)
  return name_.GetNoArena();
}
inline void MetaSection::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MetaSection.name)
}
#if LANG_CXX11
inline void MetaSection::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MetaSection.name)
}
#endif
inline void MetaSection::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MetaSection.name)
}
inline void MetaSection::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MetaSection.name)
}
inline ::std::string* MetaSection::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MetaSection.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetaSection::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MetaSection.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaSection::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MetaSection.name)
}

// -------------------------------------------------------------------

// PriceRange

// required uint64 min = 1;
inline bool PriceRange::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PriceRange::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PriceRange::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PriceRange::clear_min() {
  min_ = GOOGLE_ULONGLONG(0);
  clear_has_min();
}
inline ::google::protobuf::uint64 PriceRange::min() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PriceRange.min)
  return min_;
}
inline void PriceRange::set_min(::google::protobuf::uint64 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PriceRange.min)
}

// required uint64 max = 2;
inline bool PriceRange::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PriceRange::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PriceRange::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PriceRange::clear_max() {
  max_ = GOOGLE_ULONGLONG(0);
  clear_has_max();
}
inline ::google::protobuf::uint64 PriceRange::max() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PriceRange.max)
  return max_;
}
inline void PriceRange::set_max(::google::protobuf::uint64 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PriceRange.max)
}

// repeated uint32 rb_code = 3;
inline int PriceRange::rb_code_size() const {
  return rb_code_.size();
}
inline void PriceRange::clear_rb_code() {
  rb_code_.Clear();
}
inline ::google::protobuf::uint32 PriceRange::rb_code(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PriceRange.rb_code)
  return rb_code_.Get(index);
}
inline void PriceRange::set_rb_code(int index, ::google::protobuf::uint32 value) {
  rb_code_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PriceRange.rb_code)
}
inline void PriceRange::add_rb_code(::google::protobuf::uint32 value) {
  rb_code_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PriceRange.rb_code)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PriceRange::rb_code() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PriceRange.rb_code)
  return rb_code_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PriceRange::mutable_rb_code() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PriceRange.rb_code)
  return &rb_code_;
}

// -------------------------------------------------------------------

// TorgItem

// required string id = 1;
inline bool TorgItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TorgItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TorgItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TorgItem::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& TorgItem::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.id)
  return id_.GetNoArena();
}
inline void TorgItem::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.id)
}
#if LANG_CXX11
inline void TorgItem::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.id)
}
#endif
inline void TorgItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.id)
}
inline void TorgItem::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.id)
}
inline ::std::string* TorgItem::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TorgItem::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TorgItem::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.id)
}

// required .ru.mail.go.webbase.blobs.ItemType type = 2;
inline bool TorgItem::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TorgItem::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TorgItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TorgItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::ItemType TorgItem::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.type)
  return static_cast< ::ru::mail::go::webbase::blobs::ItemType >(type_);
}
inline void TorgItem::set_type(::ru::mail::go::webbase::blobs::ItemType value) {
  assert(::ru::mail::go::webbase::blobs::ItemType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.type)
}

// required string url = 3;
inline bool TorgItem::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TorgItem::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TorgItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TorgItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& TorgItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.url)
  return url_.GetNoArena();
}
inline void TorgItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.url)
}
#if LANG_CXX11
inline void TorgItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.url)
}
#endif
inline void TorgItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.url)
}
inline void TorgItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.url)
}
inline ::std::string* TorgItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TorgItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TorgItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.url)
}

// required string img_url = 4;
inline bool TorgItem::has_img_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TorgItem::set_has_img_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TorgItem::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TorgItem::clear_img_url() {
  img_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_url();
}
inline const ::std::string& TorgItem::img_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.img_url)
  return img_url_.GetNoArena();
}
inline void TorgItem::set_img_url(const ::std::string& value) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.img_url)
}
#if LANG_CXX11
inline void TorgItem::set_img_url(::std::string&& value) {
  set_has_img_url();
  img_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.img_url)
}
#endif
inline void TorgItem::set_img_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.img_url)
}
inline void TorgItem::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.img_url)
}
inline ::std::string* TorgItem::mutable_img_url() {
  set_has_img_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.img_url)
  return img_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TorgItem::release_img_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.img_url)
  clear_has_img_url();
  return img_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TorgItem::set_allocated_img_url(::std::string* img_url) {
  if (img_url != NULL) {
    set_has_img_url();
  } else {
    clear_has_img_url();
  }
  img_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.img_url)
}

// required string title = 5;
inline bool TorgItem::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TorgItem::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TorgItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TorgItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& TorgItem::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.title)
  return title_.GetNoArena();
}
inline void TorgItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.title)
}
#if LANG_CXX11
inline void TorgItem::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.title)
}
#endif
inline void TorgItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.title)
}
inline void TorgItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.title)
}
inline ::std::string* TorgItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TorgItem::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TorgItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.title)
}

// required string short_description = 6;
inline bool TorgItem::has_short_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TorgItem::set_has_short_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TorgItem::clear_has_short_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TorgItem::clear_short_description() {
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_short_description();
}
inline const ::std::string& TorgItem::short_description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.short_description)
  return short_description_.GetNoArena();
}
inline void TorgItem::set_short_description(const ::std::string& value) {
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.short_description)
}
#if LANG_CXX11
inline void TorgItem::set_short_description(::std::string&& value) {
  set_has_short_description();
  short_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.short_description)
}
#endif
inline void TorgItem::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.short_description)
}
inline void TorgItem::set_short_description(const char* value, size_t size) {
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.short_description)
}
inline ::std::string* TorgItem::mutable_short_description() {
  set_has_short_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.short_description)
  return short_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TorgItem::release_short_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.short_description)
  clear_has_short_description();
  return short_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TorgItem::set_allocated_short_description(::std::string* short_description) {
  if (short_description != NULL) {
    set_has_short_description();
  } else {
    clear_has_short_description();
  }
  short_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.short_description)
}

// required string full_description = 7;
inline bool TorgItem::has_full_description() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TorgItem::set_has_full_description() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TorgItem::clear_has_full_description() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TorgItem::clear_full_description() {
  full_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_description();
}
inline const ::std::string& TorgItem::full_description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.full_description)
  return full_description_.GetNoArena();
}
inline void TorgItem::set_full_description(const ::std::string& value) {
  set_has_full_description();
  full_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.full_description)
}
#if LANG_CXX11
inline void TorgItem::set_full_description(::std::string&& value) {
  set_has_full_description();
  full_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TorgItem.full_description)
}
#endif
inline void TorgItem::set_full_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_description();
  full_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TorgItem.full_description)
}
inline void TorgItem::set_full_description(const char* value, size_t size) {
  set_has_full_description();
  full_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TorgItem.full_description)
}
inline ::std::string* TorgItem::mutable_full_description() {
  set_has_full_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.full_description)
  return full_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TorgItem::release_full_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.full_description)
  clear_has_full_description();
  return full_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TorgItem::set_allocated_full_description(::std::string* full_description) {
  if (full_description != NULL) {
    set_has_full_description();
  } else {
    clear_has_full_description();
  }
  full_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.full_description)
}

// required .ru.mail.go.webbase.blobs.MetaSection category = 8;
inline bool TorgItem::has_category() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TorgItem::set_has_category() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TorgItem::clear_has_category() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TorgItem::clear_category() {
  if (category_ != NULL) category_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
  clear_has_category();
}
inline const ::ru::mail::go::webbase::blobs::MetaSection& TorgItem::category() const {
  const ::ru::mail::go::webbase::blobs::MetaSection* p = category_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.category)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MetaSection*>(
      &::ru::mail::go::webbase::blobs::_MetaSection_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::MetaSection* TorgItem::mutable_category() {
  set_has_category();
  if (category_ == NULL) {
    category_ = new ::ru::mail::go::webbase::blobs::MetaSection;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.category)
  return category_;
}
inline ::ru::mail::go::webbase::blobs::MetaSection* TorgItem::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.category)
  clear_has_category();
  ::ru::mail::go::webbase::blobs::MetaSection* temp = category_;
  category_ = NULL;
  return temp;
}
inline void TorgItem::set_allocated_category(::ru::mail::go::webbase::blobs::MetaSection* category) {
  delete category_;
  category_ = category;
  if (category) {
    set_has_category();
  } else {
    clear_has_category();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.category)
}

// required .ru.mail.go.webbase.blobs.MetaSection vendor = 9;
inline bool TorgItem::has_vendor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TorgItem::set_has_vendor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TorgItem::clear_has_vendor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TorgItem::clear_vendor() {
  if (vendor_ != NULL) vendor_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
  clear_has_vendor();
}
inline const ::ru::mail::go::webbase::blobs::MetaSection& TorgItem::vendor() const {
  const ::ru::mail::go::webbase::blobs::MetaSection* p = vendor_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.vendor)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MetaSection*>(
      &::ru::mail::go::webbase::blobs::_MetaSection_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::MetaSection* TorgItem::mutable_vendor() {
  set_has_vendor();
  if (vendor_ == NULL) {
    vendor_ = new ::ru::mail::go::webbase::blobs::MetaSection;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.vendor)
  return vendor_;
}
inline ::ru::mail::go::webbase::blobs::MetaSection* TorgItem::release_vendor() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.vendor)
  clear_has_vendor();
  ::ru::mail::go::webbase::blobs::MetaSection* temp = vendor_;
  vendor_ = NULL;
  return temp;
}
inline void TorgItem::set_allocated_vendor(::ru::mail::go::webbase::blobs::MetaSection* vendor) {
  delete vendor_;
  vendor_ = vendor;
  if (vendor) {
    set_has_vendor();
  } else {
    clear_has_vendor();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.vendor)
}

// optional .ru.mail.go.webbase.blobs.MetaSection client = 10;
inline bool TorgItem::has_client() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TorgItem::set_has_client() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TorgItem::clear_has_client() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TorgItem::clear_client() {
  if (client_ != NULL) client_->::ru::mail::go::webbase::blobs::MetaSection::Clear();
  clear_has_client();
}
inline const ::ru::mail::go::webbase::blobs::MetaSection& TorgItem::client() const {
  const ::ru::mail::go::webbase::blobs::MetaSection* p = client_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.client)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MetaSection*>(
      &::ru::mail::go::webbase::blobs::_MetaSection_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::MetaSection* TorgItem::mutable_client() {
  set_has_client();
  if (client_ == NULL) {
    client_ = new ::ru::mail::go::webbase::blobs::MetaSection;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.client)
  return client_;
}
inline ::ru::mail::go::webbase::blobs::MetaSection* TorgItem::release_client() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TorgItem.client)
  clear_has_client();
  ::ru::mail::go::webbase::blobs::MetaSection* temp = client_;
  client_ = NULL;
  return temp;
}
inline void TorgItem::set_allocated_client(::ru::mail::go::webbase::blobs::MetaSection* client) {
  delete client_;
  client_ = client;
  if (client) {
    set_has_client();
  } else {
    clear_has_client();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TorgItem.client)
}

// required uint64 min_price = 11;
inline bool TorgItem::has_min_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TorgItem::set_has_min_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TorgItem::clear_has_min_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TorgItem::clear_min_price() {
  min_price_ = GOOGLE_ULONGLONG(0);
  clear_has_min_price();
}
inline ::google::protobuf::uint64 TorgItem::min_price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.min_price)
  return min_price_;
}
inline void TorgItem::set_min_price(::google::protobuf::uint64 value) {
  set_has_min_price();
  min_price_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.min_price)
}

// required uint64 max_price = 12;
inline bool TorgItem::has_max_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TorgItem::set_has_max_price() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TorgItem::clear_has_max_price() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TorgItem::clear_max_price() {
  max_price_ = GOOGLE_ULONGLONG(0);
  clear_has_max_price();
}
inline ::google::protobuf::uint64 TorgItem::max_price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.max_price)
  return max_price_;
}
inline void TorgItem::set_max_price(::google::protobuf::uint64 value) {
  set_has_max_price();
  max_price_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.max_price)
}

// required uint64 avg_price = 13;
inline bool TorgItem::has_avg_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TorgItem::set_has_avg_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TorgItem::clear_has_avg_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TorgItem::clear_avg_price() {
  avg_price_ = GOOGLE_ULONGLONG(0);
  clear_has_avg_price();
}
inline ::google::protobuf::uint64 TorgItem::avg_price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.avg_price)
  return avg_price_;
}
inline void TorgItem::set_avg_price(::google::protobuf::uint64 value) {
  set_has_avg_price();
  avg_price_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.avg_price)
}

// repeated .ru.mail.go.webbase.blobs.PriceRange price_ranges = 14;
inline int TorgItem::price_ranges_size() const {
  return price_ranges_.size();
}
inline void TorgItem::clear_price_ranges() {
  price_ranges_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::PriceRange& TorgItem::price_ranges(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return price_ranges_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::PriceRange* TorgItem::mutable_price_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return price_ranges_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::PriceRange* TorgItem::add_price_ranges() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return price_ranges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PriceRange >*
TorgItem::mutable_price_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return &price_ranges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PriceRange >&
TorgItem::price_ranges() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.TorgItem.price_ranges)
  return price_ranges_;
}

// optional uint32 offers_cnt = 15;
inline bool TorgItem::has_offers_cnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TorgItem::set_has_offers_cnt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TorgItem::clear_has_offers_cnt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TorgItem::clear_offers_cnt() {
  offers_cnt_ = 0u;
  clear_has_offers_cnt();
}
inline ::google::protobuf::uint32 TorgItem::offers_cnt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TorgItem.offers_cnt)
  return offers_cnt_;
}
inline void TorgItem::set_offers_cnt(::google::protobuf::uint32 value) {
  set_has_offers_cnt();
  offers_cnt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TorgItem.offers_cnt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::ItemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::ItemType>() {
  return ::ru::mail::go::webbase::blobs::ItemType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_torg_5fdata_2eproto__INCLUDED
