// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: torg_filtered_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "torg_filtered_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CardGeoData_DataArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CardGeoData_DataArray>
     _instance;
} _CardGeoData_DataArray_default_instance_;
class CardGeoDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CardGeoData>
     _instance;
} _CardGeoData_default_instance_;
class CatGeoDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CatGeoData>
     _instance;
} _CatGeoData_default_instance_;
class TopCardsByGeo_OffersIndexesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TopCardsByGeo_OffersIndexes>
     _instance;
} _TopCardsByGeo_OffersIndexes_default_instance_;
class TopCardsByGeoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TopCardsByGeo>
     _instance;
} _TopCardsByGeo_default_instance_;

namespace protobuf_torg_5ffiltered_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData_DataArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData_DataArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData_DataArray, pricefrom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData_DataArray, priceto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData_DataArray, clientscount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData_DataArray, sellscount_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData, geoarray_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGeoData, dataarray_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatGeoData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatGeoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatGeoData, geoarray_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopCardsByGeo_OffersIndexes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopCardsByGeo_OffersIndexes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopCardsByGeo_OffersIndexes, offerindex_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopCardsByGeo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopCardsByGeo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopCardsByGeo, geoarray_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopCardsByGeo, topindexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopCardsByGeo, offersinfo_),
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(CardGeoData_DataArray)},
  { 13, 20, sizeof(CardGeoData)},
  { 22, 28, sizeof(CatGeoData)},
  { 29, 35, sizeof(TopCardsByGeo_OffersIndexes)},
  { 36, 44, sizeof(TopCardsByGeo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardGeoData_DataArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardGeoData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CatGeoData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopCardsByGeo_OffersIndexes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopCardsByGeo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "torg_filtered_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CardGeoData_DataArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CardGeoData_DataArray_default_instance_);_CardGeoData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CardGeoData_default_instance_);_CatGeoData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CatGeoData_default_instance_);_TopCardsByGeo_OffersIndexes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TopCardsByGeo_OffersIndexes_default_instance_);_TopCardsByGeo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TopCardsByGeo_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030torg_filtered_data.proto\"\245\001\n\013CardGeoDa"
      "ta\022\020\n\010geoArray\030\001 \002(\014\022)\n\tdataArray\030\002 \003(\0132"
      "\026.CardGeoData.DataArray\032Y\n\tDataArray\022\021\n\t"
      "priceFrom\030\001 \002(\r\022\017\n\007priceTo\030\002 \002(\r\022\024\n\014clie"
      "ntsCount\030\003 \002(\r\022\022\n\nsellsCount\030\004 \002(\r\"\036\n\nCa"
      "tGeoData\022\020\n\010geoArray\030\001 \002(\014\"\214\001\n\rTopCardsB"
      "yGeo\022\020\n\010geoArray\030\001 \002(\014\0220\n\ntopIndexes\030\002 \003"
      "(\0132\034.TopCardsByGeo.OffersIndexes\022\022\n\noffe"
      "rsInfo\030\003 \003(\t\032#\n\rOffersIndexes\022\022\n\nofferin"
      "dex\030\001 \003(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "torg_filtered_data.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_torg_5ffiltered_5fdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardGeoData_DataArray::kPriceFromFieldNumber;
const int CardGeoData_DataArray::kPriceToFieldNumber;
const int CardGeoData_DataArray::kClientsCountFieldNumber;
const int CardGeoData_DataArray::kSellsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardGeoData_DataArray::CardGeoData_DataArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CardGeoData.DataArray)
}
CardGeoData_DataArray::CardGeoData_DataArray(const CardGeoData_DataArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pricefrom_, &from.pricefrom_,
    static_cast<size_t>(reinterpret_cast<char*>(&sellscount_) -
    reinterpret_cast<char*>(&pricefrom_)) + sizeof(sellscount_));
  // @@protoc_insertion_point(copy_constructor:CardGeoData.DataArray)
}

void CardGeoData_DataArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pricefrom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellscount_) -
      reinterpret_cast<char*>(&pricefrom_)) + sizeof(sellscount_));
}

CardGeoData_DataArray::~CardGeoData_DataArray() {
  // @@protoc_insertion_point(destructor:CardGeoData.DataArray)
  SharedDtor();
}

void CardGeoData_DataArray::SharedDtor() {
}

void CardGeoData_DataArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardGeoData_DataArray::descriptor() {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardGeoData_DataArray& CardGeoData_DataArray::default_instance() {
  protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardGeoData_DataArray* CardGeoData_DataArray::New(::google::protobuf::Arena* arena) const {
  CardGeoData_DataArray* n = new CardGeoData_DataArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardGeoData_DataArray::Clear() {
// @@protoc_insertion_point(message_clear_start:CardGeoData.DataArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&pricefrom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sellscount_) -
        reinterpret_cast<char*>(&pricefrom_)) + sizeof(sellscount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardGeoData_DataArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CardGeoData.DataArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 priceFrom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pricefrom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pricefrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 priceTo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_priceto();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priceto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 clientsCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clientscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sellsCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sellscount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sellscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CardGeoData.DataArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CardGeoData.DataArray)
  return false;
#undef DO_
}

void CardGeoData_DataArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CardGeoData.DataArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 priceFrom = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pricefrom(), output);
  }

  // required uint32 priceTo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->priceto(), output);
  }

  // required uint32 clientsCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientscount(), output);
  }

  // required uint32 sellsCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sellscount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CardGeoData.DataArray)
}

::google::protobuf::uint8* CardGeoData_DataArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CardGeoData.DataArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 priceFrom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pricefrom(), target);
  }

  // required uint32 priceTo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->priceto(), target);
  }

  // required uint32 clientsCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientscount(), target);
  }

  // required uint32 sellsCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sellscount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CardGeoData.DataArray)
  return target;
}

size_t CardGeoData_DataArray::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CardGeoData.DataArray)
  size_t total_size = 0;

  if (has_pricefrom()) {
    // required uint32 priceFrom = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pricefrom());
  }

  if (has_priceto()) {
    // required uint32 priceTo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priceto());
  }

  if (has_clientscount()) {
    // required uint32 clientsCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscount());
  }

  if (has_sellscount()) {
    // required uint32 sellsCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sellscount());
  }

  return total_size;
}
size_t CardGeoData_DataArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CardGeoData.DataArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 priceFrom = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pricefrom());

    // required uint32 priceTo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priceto());

    // required uint32 clientsCount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientscount());

    // required uint32 sellsCount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sellscount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardGeoData_DataArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CardGeoData.DataArray)
  GOOGLE_DCHECK_NE(&from, this);
  const CardGeoData_DataArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardGeoData_DataArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CardGeoData.DataArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CardGeoData.DataArray)
    MergeFrom(*source);
  }
}

void CardGeoData_DataArray::MergeFrom(const CardGeoData_DataArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CardGeoData.DataArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      pricefrom_ = from.pricefrom_;
    }
    if (cached_has_bits & 0x00000002u) {
      priceto_ = from.priceto_;
    }
    if (cached_has_bits & 0x00000004u) {
      clientscount_ = from.clientscount_;
    }
    if (cached_has_bits & 0x00000008u) {
      sellscount_ = from.sellscount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardGeoData_DataArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CardGeoData.DataArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardGeoData_DataArray::CopyFrom(const CardGeoData_DataArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CardGeoData.DataArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardGeoData_DataArray::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CardGeoData_DataArray::Swap(CardGeoData_DataArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardGeoData_DataArray::InternalSwap(CardGeoData_DataArray* other) {
  using std::swap;
  swap(pricefrom_, other->pricefrom_);
  swap(priceto_, other->priceto_);
  swap(clientscount_, other->clientscount_);
  swap(sellscount_, other->sellscount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardGeoData_DataArray::GetMetadata() const {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardGeoData_DataArray

// required uint32 priceFrom = 1;
bool CardGeoData_DataArray::has_pricefrom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardGeoData_DataArray::set_has_pricefrom() {
  _has_bits_[0] |= 0x00000001u;
}
void CardGeoData_DataArray::clear_has_pricefrom() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardGeoData_DataArray::clear_pricefrom() {
  pricefrom_ = 0u;
  clear_has_pricefrom();
}
::google::protobuf::uint32 CardGeoData_DataArray::pricefrom() const {
  // @@protoc_insertion_point(field_get:CardGeoData.DataArray.priceFrom)
  return pricefrom_;
}
void CardGeoData_DataArray::set_pricefrom(::google::protobuf::uint32 value) {
  set_has_pricefrom();
  pricefrom_ = value;
  // @@protoc_insertion_point(field_set:CardGeoData.DataArray.priceFrom)
}

// required uint32 priceTo = 2;
bool CardGeoData_DataArray::has_priceto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardGeoData_DataArray::set_has_priceto() {
  _has_bits_[0] |= 0x00000002u;
}
void CardGeoData_DataArray::clear_has_priceto() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardGeoData_DataArray::clear_priceto() {
  priceto_ = 0u;
  clear_has_priceto();
}
::google::protobuf::uint32 CardGeoData_DataArray::priceto() const {
  // @@protoc_insertion_point(field_get:CardGeoData.DataArray.priceTo)
  return priceto_;
}
void CardGeoData_DataArray::set_priceto(::google::protobuf::uint32 value) {
  set_has_priceto();
  priceto_ = value;
  // @@protoc_insertion_point(field_set:CardGeoData.DataArray.priceTo)
}

// required uint32 clientsCount = 3;
bool CardGeoData_DataArray::has_clientscount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardGeoData_DataArray::set_has_clientscount() {
  _has_bits_[0] |= 0x00000004u;
}
void CardGeoData_DataArray::clear_has_clientscount() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardGeoData_DataArray::clear_clientscount() {
  clientscount_ = 0u;
  clear_has_clientscount();
}
::google::protobuf::uint32 CardGeoData_DataArray::clientscount() const {
  // @@protoc_insertion_point(field_get:CardGeoData.DataArray.clientsCount)
  return clientscount_;
}
void CardGeoData_DataArray::set_clientscount(::google::protobuf::uint32 value) {
  set_has_clientscount();
  clientscount_ = value;
  // @@protoc_insertion_point(field_set:CardGeoData.DataArray.clientsCount)
}

// required uint32 sellsCount = 4;
bool CardGeoData_DataArray::has_sellscount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CardGeoData_DataArray::set_has_sellscount() {
  _has_bits_[0] |= 0x00000008u;
}
void CardGeoData_DataArray::clear_has_sellscount() {
  _has_bits_[0] &= ~0x00000008u;
}
void CardGeoData_DataArray::clear_sellscount() {
  sellscount_ = 0u;
  clear_has_sellscount();
}
::google::protobuf::uint32 CardGeoData_DataArray::sellscount() const {
  // @@protoc_insertion_point(field_get:CardGeoData.DataArray.sellsCount)
  return sellscount_;
}
void CardGeoData_DataArray::set_sellscount(::google::protobuf::uint32 value) {
  set_has_sellscount();
  sellscount_ = value;
  // @@protoc_insertion_point(field_set:CardGeoData.DataArray.sellsCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardGeoData::kGeoArrayFieldNumber;
const int CardGeoData::kDataArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardGeoData::CardGeoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CardGeoData)
}
CardGeoData::CardGeoData(const CardGeoData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dataarray_(from.dataarray_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geoarray_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geoarray()) {
    geoarray_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoarray_);
  }
  // @@protoc_insertion_point(copy_constructor:CardGeoData)
}

void CardGeoData::SharedCtor() {
  _cached_size_ = 0;
  geoarray_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CardGeoData::~CardGeoData() {
  // @@protoc_insertion_point(destructor:CardGeoData)
  SharedDtor();
}

void CardGeoData::SharedDtor() {
  geoarray_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CardGeoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardGeoData::descriptor() {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardGeoData& CardGeoData::default_instance() {
  protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardGeoData* CardGeoData::New(::google::protobuf::Arena* arena) const {
  CardGeoData* n = new CardGeoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardGeoData::Clear() {
// @@protoc_insertion_point(message_clear_start:CardGeoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataarray_.Clear();
  if (has_geoarray()) {
    GOOGLE_DCHECK(!geoarray_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*geoarray_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardGeoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CardGeoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes geoArray = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_geoarray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CardGeoData.DataArray dataArray = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataarray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CardGeoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CardGeoData)
  return false;
#undef DO_
}

void CardGeoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CardGeoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes geoArray = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->geoarray(), output);
  }

  // repeated .CardGeoData.DataArray dataArray = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dataarray_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dataarray(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CardGeoData)
}

::google::protobuf::uint8* CardGeoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CardGeoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes geoArray = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->geoarray(), target);
  }

  // repeated .CardGeoData.DataArray dataArray = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dataarray_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->dataarray(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CardGeoData)
  return target;
}

size_t CardGeoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CardGeoData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes geoArray = 1;
  if (has_geoarray()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->geoarray());
  }
  // repeated .CardGeoData.DataArray dataArray = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dataarray_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataarray(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardGeoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CardGeoData)
  GOOGLE_DCHECK_NE(&from, this);
  const CardGeoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardGeoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CardGeoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CardGeoData)
    MergeFrom(*source);
  }
}

void CardGeoData::MergeFrom(const CardGeoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CardGeoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataarray_.MergeFrom(from.dataarray_);
  if (from.has_geoarray()) {
    set_has_geoarray();
    geoarray_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoarray_);
  }
}

void CardGeoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CardGeoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardGeoData::CopyFrom(const CardGeoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CardGeoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardGeoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dataarray())) return false;
  return true;
}

void CardGeoData::Swap(CardGeoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardGeoData::InternalSwap(CardGeoData* other) {
  using std::swap;
  dataarray_.InternalSwap(&other->dataarray_);
  geoarray_.Swap(&other->geoarray_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardGeoData::GetMetadata() const {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardGeoData

// required bytes geoArray = 1;
bool CardGeoData::has_geoarray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardGeoData::set_has_geoarray() {
  _has_bits_[0] |= 0x00000001u;
}
void CardGeoData::clear_has_geoarray() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardGeoData::clear_geoarray() {
  geoarray_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geoarray();
}
const ::std::string& CardGeoData::geoarray() const {
  // @@protoc_insertion_point(field_get:CardGeoData.geoArray)
  return geoarray_.GetNoArena();
}
void CardGeoData::set_geoarray(const ::std::string& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CardGeoData.geoArray)
}
#if LANG_CXX11
void CardGeoData::set_geoarray(::std::string&& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CardGeoData.geoArray)
}
#endif
void CardGeoData::set_geoarray(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CardGeoData.geoArray)
}
void CardGeoData::set_geoarray(const void* value, size_t size) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CardGeoData.geoArray)
}
::std::string* CardGeoData::mutable_geoarray() {
  set_has_geoarray();
  // @@protoc_insertion_point(field_mutable:CardGeoData.geoArray)
  return geoarray_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardGeoData::release_geoarray() {
  // @@protoc_insertion_point(field_release:CardGeoData.geoArray)
  clear_has_geoarray();
  return geoarray_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardGeoData::set_allocated_geoarray(::std::string* geoarray) {
  if (geoarray != NULL) {
    set_has_geoarray();
  } else {
    clear_has_geoarray();
  }
  geoarray_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoarray);
  // @@protoc_insertion_point(field_set_allocated:CardGeoData.geoArray)
}

// repeated .CardGeoData.DataArray dataArray = 2;
int CardGeoData::dataarray_size() const {
  return dataarray_.size();
}
void CardGeoData::clear_dataarray() {
  dataarray_.Clear();
}
const ::CardGeoData_DataArray& CardGeoData::dataarray(int index) const {
  // @@protoc_insertion_point(field_get:CardGeoData.dataArray)
  return dataarray_.Get(index);
}
::CardGeoData_DataArray* CardGeoData::mutable_dataarray(int index) {
  // @@protoc_insertion_point(field_mutable:CardGeoData.dataArray)
  return dataarray_.Mutable(index);
}
::CardGeoData_DataArray* CardGeoData::add_dataarray() {
  // @@protoc_insertion_point(field_add:CardGeoData.dataArray)
  return dataarray_.Add();
}
::google::protobuf::RepeatedPtrField< ::CardGeoData_DataArray >*
CardGeoData::mutable_dataarray() {
  // @@protoc_insertion_point(field_mutable_list:CardGeoData.dataArray)
  return &dataarray_;
}
const ::google::protobuf::RepeatedPtrField< ::CardGeoData_DataArray >&
CardGeoData::dataarray() const {
  // @@protoc_insertion_point(field_list:CardGeoData.dataArray)
  return dataarray_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatGeoData::kGeoArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatGeoData::CatGeoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CatGeoData)
}
CatGeoData::CatGeoData(const CatGeoData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geoarray_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geoarray()) {
    geoarray_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoarray_);
  }
  // @@protoc_insertion_point(copy_constructor:CatGeoData)
}

void CatGeoData::SharedCtor() {
  _cached_size_ = 0;
  geoarray_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CatGeoData::~CatGeoData() {
  // @@protoc_insertion_point(destructor:CatGeoData)
  SharedDtor();
}

void CatGeoData::SharedDtor() {
  geoarray_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CatGeoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatGeoData::descriptor() {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatGeoData& CatGeoData::default_instance() {
  protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CatGeoData* CatGeoData::New(::google::protobuf::Arena* arena) const {
  CatGeoData* n = new CatGeoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CatGeoData::Clear() {
// @@protoc_insertion_point(message_clear_start:CatGeoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_geoarray()) {
    GOOGLE_DCHECK(!geoarray_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*geoarray_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CatGeoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CatGeoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes geoArray = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_geoarray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CatGeoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CatGeoData)
  return false;
#undef DO_
}

void CatGeoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CatGeoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes geoArray = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->geoarray(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CatGeoData)
}

::google::protobuf::uint8* CatGeoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CatGeoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes geoArray = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->geoarray(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CatGeoData)
  return target;
}

size_t CatGeoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CatGeoData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes geoArray = 1;
  if (has_geoarray()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->geoarray());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatGeoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CatGeoData)
  GOOGLE_DCHECK_NE(&from, this);
  const CatGeoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatGeoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CatGeoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CatGeoData)
    MergeFrom(*source);
  }
}

void CatGeoData::MergeFrom(const CatGeoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CatGeoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geoarray()) {
    set_has_geoarray();
    geoarray_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoarray_);
  }
}

void CatGeoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CatGeoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatGeoData::CopyFrom(const CatGeoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CatGeoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatGeoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CatGeoData::Swap(CatGeoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatGeoData::InternalSwap(CatGeoData* other) {
  using std::swap;
  geoarray_.Swap(&other->geoarray_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CatGeoData::GetMetadata() const {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CatGeoData

// required bytes geoArray = 1;
bool CatGeoData::has_geoarray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CatGeoData::set_has_geoarray() {
  _has_bits_[0] |= 0x00000001u;
}
void CatGeoData::clear_has_geoarray() {
  _has_bits_[0] &= ~0x00000001u;
}
void CatGeoData::clear_geoarray() {
  geoarray_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geoarray();
}
const ::std::string& CatGeoData::geoarray() const {
  // @@protoc_insertion_point(field_get:CatGeoData.geoArray)
  return geoarray_.GetNoArena();
}
void CatGeoData::set_geoarray(const ::std::string& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CatGeoData.geoArray)
}
#if LANG_CXX11
void CatGeoData::set_geoarray(::std::string&& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CatGeoData.geoArray)
}
#endif
void CatGeoData::set_geoarray(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CatGeoData.geoArray)
}
void CatGeoData::set_geoarray(const void* value, size_t size) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CatGeoData.geoArray)
}
::std::string* CatGeoData::mutable_geoarray() {
  set_has_geoarray();
  // @@protoc_insertion_point(field_mutable:CatGeoData.geoArray)
  return geoarray_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CatGeoData::release_geoarray() {
  // @@protoc_insertion_point(field_release:CatGeoData.geoArray)
  clear_has_geoarray();
  return geoarray_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CatGeoData::set_allocated_geoarray(::std::string* geoarray) {
  if (geoarray != NULL) {
    set_has_geoarray();
  } else {
    clear_has_geoarray();
  }
  geoarray_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoarray);
  // @@protoc_insertion_point(field_set_allocated:CatGeoData.geoArray)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopCardsByGeo_OffersIndexes::kOfferindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopCardsByGeo_OffersIndexes::TopCardsByGeo_OffersIndexes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopCardsByGeo.OffersIndexes)
}
TopCardsByGeo_OffersIndexes::TopCardsByGeo_OffersIndexes(const TopCardsByGeo_OffersIndexes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      offerindex_(from.offerindex_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TopCardsByGeo.OffersIndexes)
}

void TopCardsByGeo_OffersIndexes::SharedCtor() {
  _cached_size_ = 0;
}

TopCardsByGeo_OffersIndexes::~TopCardsByGeo_OffersIndexes() {
  // @@protoc_insertion_point(destructor:TopCardsByGeo.OffersIndexes)
  SharedDtor();
}

void TopCardsByGeo_OffersIndexes::SharedDtor() {
}

void TopCardsByGeo_OffersIndexes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopCardsByGeo_OffersIndexes::descriptor() {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopCardsByGeo_OffersIndexes& TopCardsByGeo_OffersIndexes::default_instance() {
  protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopCardsByGeo_OffersIndexes* TopCardsByGeo_OffersIndexes::New(::google::protobuf::Arena* arena) const {
  TopCardsByGeo_OffersIndexes* n = new TopCardsByGeo_OffersIndexes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopCardsByGeo_OffersIndexes::Clear() {
// @@protoc_insertion_point(message_clear_start:TopCardsByGeo.OffersIndexes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offerindex_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopCardsByGeo_OffersIndexes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopCardsByGeo.OffersIndexes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 offerindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_offerindex())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offerindex())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopCardsByGeo.OffersIndexes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopCardsByGeo.OffersIndexes)
  return false;
#undef DO_
}

void TopCardsByGeo_OffersIndexes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopCardsByGeo.OffersIndexes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 offerindex = 1;
  for (int i = 0, n = this->offerindex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->offerindex(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopCardsByGeo.OffersIndexes)
}

::google::protobuf::uint8* TopCardsByGeo_OffersIndexes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TopCardsByGeo.OffersIndexes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 offerindex = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->offerindex_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopCardsByGeo.OffersIndexes)
  return target;
}

size_t TopCardsByGeo_OffersIndexes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TopCardsByGeo.OffersIndexes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 offerindex = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->offerindex_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->offerindex_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopCardsByGeo_OffersIndexes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TopCardsByGeo.OffersIndexes)
  GOOGLE_DCHECK_NE(&from, this);
  const TopCardsByGeo_OffersIndexes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopCardsByGeo_OffersIndexes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TopCardsByGeo.OffersIndexes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TopCardsByGeo.OffersIndexes)
    MergeFrom(*source);
  }
}

void TopCardsByGeo_OffersIndexes::MergeFrom(const TopCardsByGeo_OffersIndexes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TopCardsByGeo.OffersIndexes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  offerindex_.MergeFrom(from.offerindex_);
}

void TopCardsByGeo_OffersIndexes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TopCardsByGeo.OffersIndexes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopCardsByGeo_OffersIndexes::CopyFrom(const TopCardsByGeo_OffersIndexes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TopCardsByGeo.OffersIndexes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopCardsByGeo_OffersIndexes::IsInitialized() const {
  return true;
}

void TopCardsByGeo_OffersIndexes::Swap(TopCardsByGeo_OffersIndexes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopCardsByGeo_OffersIndexes::InternalSwap(TopCardsByGeo_OffersIndexes* other) {
  using std::swap;
  offerindex_.InternalSwap(&other->offerindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopCardsByGeo_OffersIndexes::GetMetadata() const {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopCardsByGeo_OffersIndexes

// repeated uint32 offerindex = 1;
int TopCardsByGeo_OffersIndexes::offerindex_size() const {
  return offerindex_.size();
}
void TopCardsByGeo_OffersIndexes::clear_offerindex() {
  offerindex_.Clear();
}
::google::protobuf::uint32 TopCardsByGeo_OffersIndexes::offerindex(int index) const {
  // @@protoc_insertion_point(field_get:TopCardsByGeo.OffersIndexes.offerindex)
  return offerindex_.Get(index);
}
void TopCardsByGeo_OffersIndexes::set_offerindex(int index, ::google::protobuf::uint32 value) {
  offerindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:TopCardsByGeo.OffersIndexes.offerindex)
}
void TopCardsByGeo_OffersIndexes::add_offerindex(::google::protobuf::uint32 value) {
  offerindex_.Add(value);
  // @@protoc_insertion_point(field_add:TopCardsByGeo.OffersIndexes.offerindex)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TopCardsByGeo_OffersIndexes::offerindex() const {
  // @@protoc_insertion_point(field_list:TopCardsByGeo.OffersIndexes.offerindex)
  return offerindex_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TopCardsByGeo_OffersIndexes::mutable_offerindex() {
  // @@protoc_insertion_point(field_mutable_list:TopCardsByGeo.OffersIndexes.offerindex)
  return &offerindex_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopCardsByGeo::kGeoArrayFieldNumber;
const int TopCardsByGeo::kTopIndexesFieldNumber;
const int TopCardsByGeo::kOffersInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopCardsByGeo::TopCardsByGeo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopCardsByGeo)
}
TopCardsByGeo::TopCardsByGeo(const TopCardsByGeo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      topindexes_(from.topindexes_),
      offersinfo_(from.offersinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geoarray_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geoarray()) {
    geoarray_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoarray_);
  }
  // @@protoc_insertion_point(copy_constructor:TopCardsByGeo)
}

void TopCardsByGeo::SharedCtor() {
  _cached_size_ = 0;
  geoarray_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopCardsByGeo::~TopCardsByGeo() {
  // @@protoc_insertion_point(destructor:TopCardsByGeo)
  SharedDtor();
}

void TopCardsByGeo::SharedDtor() {
  geoarray_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TopCardsByGeo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopCardsByGeo::descriptor() {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopCardsByGeo& TopCardsByGeo::default_instance() {
  protobuf_torg_5ffiltered_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopCardsByGeo* TopCardsByGeo::New(::google::protobuf::Arena* arena) const {
  TopCardsByGeo* n = new TopCardsByGeo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopCardsByGeo::Clear() {
// @@protoc_insertion_point(message_clear_start:TopCardsByGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topindexes_.Clear();
  offersinfo_.Clear();
  if (has_geoarray()) {
    GOOGLE_DCHECK(!geoarray_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*geoarray_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopCardsByGeo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopCardsByGeo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes geoArray = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_geoarray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TopCardsByGeo.OffersIndexes topIndexes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topindexes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string offersInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_offersinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->offersinfo(this->offersinfo_size() - 1).data(),
            static_cast<int>(this->offersinfo(this->offersinfo_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TopCardsByGeo.offersInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopCardsByGeo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopCardsByGeo)
  return false;
#undef DO_
}

void TopCardsByGeo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopCardsByGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes geoArray = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->geoarray(), output);
  }

  // repeated .TopCardsByGeo.OffersIndexes topIndexes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topindexes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->topindexes(static_cast<int>(i)), output);
  }

  // repeated string offersInfo = 3;
  for (int i = 0, n = this->offersinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->offersinfo(i).data(), static_cast<int>(this->offersinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TopCardsByGeo.offersInfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->offersinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopCardsByGeo)
}

::google::protobuf::uint8* TopCardsByGeo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TopCardsByGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes geoArray = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->geoarray(), target);
  }

  // repeated .TopCardsByGeo.OffersIndexes topIndexes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topindexes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->topindexes(static_cast<int>(i)), deterministic, target);
  }

  // repeated string offersInfo = 3;
  for (int i = 0, n = this->offersinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->offersinfo(i).data(), static_cast<int>(this->offersinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TopCardsByGeo.offersInfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->offersinfo(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopCardsByGeo)
  return target;
}

size_t TopCardsByGeo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TopCardsByGeo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes geoArray = 1;
  if (has_geoarray()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->geoarray());
  }
  // repeated .TopCardsByGeo.OffersIndexes topIndexes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->topindexes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topindexes(static_cast<int>(i)));
    }
  }

  // repeated string offersInfo = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->offersinfo_size());
  for (int i = 0, n = this->offersinfo_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->offersinfo(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopCardsByGeo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TopCardsByGeo)
  GOOGLE_DCHECK_NE(&from, this);
  const TopCardsByGeo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopCardsByGeo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TopCardsByGeo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TopCardsByGeo)
    MergeFrom(*source);
  }
}

void TopCardsByGeo::MergeFrom(const TopCardsByGeo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TopCardsByGeo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topindexes_.MergeFrom(from.topindexes_);
  offersinfo_.MergeFrom(from.offersinfo_);
  if (from.has_geoarray()) {
    set_has_geoarray();
    geoarray_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geoarray_);
  }
}

void TopCardsByGeo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TopCardsByGeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopCardsByGeo::CopyFrom(const TopCardsByGeo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TopCardsByGeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopCardsByGeo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TopCardsByGeo::Swap(TopCardsByGeo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopCardsByGeo::InternalSwap(TopCardsByGeo* other) {
  using std::swap;
  topindexes_.InternalSwap(&other->topindexes_);
  offersinfo_.InternalSwap(&other->offersinfo_);
  geoarray_.Swap(&other->geoarray_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopCardsByGeo::GetMetadata() const {
  protobuf_torg_5ffiltered_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_torg_5ffiltered_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopCardsByGeo

// required bytes geoArray = 1;
bool TopCardsByGeo::has_geoarray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopCardsByGeo::set_has_geoarray() {
  _has_bits_[0] |= 0x00000001u;
}
void TopCardsByGeo::clear_has_geoarray() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopCardsByGeo::clear_geoarray() {
  geoarray_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geoarray();
}
const ::std::string& TopCardsByGeo::geoarray() const {
  // @@protoc_insertion_point(field_get:TopCardsByGeo.geoArray)
  return geoarray_.GetNoArena();
}
void TopCardsByGeo::set_geoarray(const ::std::string& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TopCardsByGeo.geoArray)
}
#if LANG_CXX11
void TopCardsByGeo::set_geoarray(::std::string&& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TopCardsByGeo.geoArray)
}
#endif
void TopCardsByGeo::set_geoarray(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TopCardsByGeo.geoArray)
}
void TopCardsByGeo::set_geoarray(const void* value, size_t size) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TopCardsByGeo.geoArray)
}
::std::string* TopCardsByGeo::mutable_geoarray() {
  set_has_geoarray();
  // @@protoc_insertion_point(field_mutable:TopCardsByGeo.geoArray)
  return geoarray_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopCardsByGeo::release_geoarray() {
  // @@protoc_insertion_point(field_release:TopCardsByGeo.geoArray)
  clear_has_geoarray();
  return geoarray_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopCardsByGeo::set_allocated_geoarray(::std::string* geoarray) {
  if (geoarray != NULL) {
    set_has_geoarray();
  } else {
    clear_has_geoarray();
  }
  geoarray_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoarray);
  // @@protoc_insertion_point(field_set_allocated:TopCardsByGeo.geoArray)
}

// repeated .TopCardsByGeo.OffersIndexes topIndexes = 2;
int TopCardsByGeo::topindexes_size() const {
  return topindexes_.size();
}
void TopCardsByGeo::clear_topindexes() {
  topindexes_.Clear();
}
const ::TopCardsByGeo_OffersIndexes& TopCardsByGeo::topindexes(int index) const {
  // @@protoc_insertion_point(field_get:TopCardsByGeo.topIndexes)
  return topindexes_.Get(index);
}
::TopCardsByGeo_OffersIndexes* TopCardsByGeo::mutable_topindexes(int index) {
  // @@protoc_insertion_point(field_mutable:TopCardsByGeo.topIndexes)
  return topindexes_.Mutable(index);
}
::TopCardsByGeo_OffersIndexes* TopCardsByGeo::add_topindexes() {
  // @@protoc_insertion_point(field_add:TopCardsByGeo.topIndexes)
  return topindexes_.Add();
}
::google::protobuf::RepeatedPtrField< ::TopCardsByGeo_OffersIndexes >*
TopCardsByGeo::mutable_topindexes() {
  // @@protoc_insertion_point(field_mutable_list:TopCardsByGeo.topIndexes)
  return &topindexes_;
}
const ::google::protobuf::RepeatedPtrField< ::TopCardsByGeo_OffersIndexes >&
TopCardsByGeo::topindexes() const {
  // @@protoc_insertion_point(field_list:TopCardsByGeo.topIndexes)
  return topindexes_;
}

// repeated string offersInfo = 3;
int TopCardsByGeo::offersinfo_size() const {
  return offersinfo_.size();
}
void TopCardsByGeo::clear_offersinfo() {
  offersinfo_.Clear();
}
const ::std::string& TopCardsByGeo::offersinfo(int index) const {
  // @@protoc_insertion_point(field_get:TopCardsByGeo.offersInfo)
  return offersinfo_.Get(index);
}
::std::string* TopCardsByGeo::mutable_offersinfo(int index) {
  // @@protoc_insertion_point(field_mutable:TopCardsByGeo.offersInfo)
  return offersinfo_.Mutable(index);
}
void TopCardsByGeo::set_offersinfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TopCardsByGeo.offersInfo)
  offersinfo_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TopCardsByGeo::set_offersinfo(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TopCardsByGeo.offersInfo)
  offersinfo_.Mutable(index)->assign(std::move(value));
}
#endif
void TopCardsByGeo::set_offersinfo(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  offersinfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TopCardsByGeo.offersInfo)
}
void TopCardsByGeo::set_offersinfo(int index, const char* value, size_t size) {
  offersinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TopCardsByGeo.offersInfo)
}
::std::string* TopCardsByGeo::add_offersinfo() {
  // @@protoc_insertion_point(field_add_mutable:TopCardsByGeo.offersInfo)
  return offersinfo_.Add();
}
void TopCardsByGeo::add_offersinfo(const ::std::string& value) {
  offersinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TopCardsByGeo.offersInfo)
}
#if LANG_CXX11
void TopCardsByGeo::add_offersinfo(::std::string&& value) {
  offersinfo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TopCardsByGeo.offersInfo)
}
#endif
void TopCardsByGeo::add_offersinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  offersinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TopCardsByGeo.offersInfo)
}
void TopCardsByGeo::add_offersinfo(const char* value, size_t size) {
  offersinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TopCardsByGeo.offersInfo)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopCardsByGeo::offersinfo() const {
  // @@protoc_insertion_point(field_list:TopCardsByGeo.offersInfo)
  return offersinfo_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TopCardsByGeo::mutable_offersinfo() {
  // @@protoc_insertion_point(field_mutable_list:TopCardsByGeo.offersInfo)
  return &offersinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
