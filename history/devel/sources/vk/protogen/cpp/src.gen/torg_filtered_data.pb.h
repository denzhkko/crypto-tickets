// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: torg_filtered_data.proto

#ifndef PROTOBUF_torg_5ffiltered_5fdata_2eproto__INCLUDED
#define PROTOBUF_torg_5ffiltered_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class CardGeoData;
class CardGeoDataDefaultTypeInternal;
extern CardGeoDataDefaultTypeInternal _CardGeoData_default_instance_;
class CardGeoData_DataArray;
class CardGeoData_DataArrayDefaultTypeInternal;
extern CardGeoData_DataArrayDefaultTypeInternal _CardGeoData_DataArray_default_instance_;
class CatGeoData;
class CatGeoDataDefaultTypeInternal;
extern CatGeoDataDefaultTypeInternal _CatGeoData_default_instance_;
class TopCardsByGeo;
class TopCardsByGeoDefaultTypeInternal;
extern TopCardsByGeoDefaultTypeInternal _TopCardsByGeo_default_instance_;
class TopCardsByGeo_OffersIndexes;
class TopCardsByGeo_OffersIndexesDefaultTypeInternal;
extern TopCardsByGeo_OffersIndexesDefaultTypeInternal _TopCardsByGeo_OffersIndexes_default_instance_;

namespace protobuf_torg_5ffiltered_5fdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_torg_5ffiltered_5fdata_2eproto

// ===================================================================

class CardGeoData_DataArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CardGeoData.DataArray) */ {
 public:
  CardGeoData_DataArray();
  virtual ~CardGeoData_DataArray();

  CardGeoData_DataArray(const CardGeoData_DataArray& from);

  inline CardGeoData_DataArray& operator=(const CardGeoData_DataArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CardGeoData_DataArray(CardGeoData_DataArray&& from) noexcept
    : CardGeoData_DataArray() {
    *this = ::std::move(from);
  }

  inline CardGeoData_DataArray& operator=(CardGeoData_DataArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardGeoData_DataArray& default_instance();

  static inline const CardGeoData_DataArray* internal_default_instance() {
    return reinterpret_cast<const CardGeoData_DataArray*>(
               &_CardGeoData_DataArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CardGeoData_DataArray* other);
  friend void swap(CardGeoData_DataArray& a, CardGeoData_DataArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CardGeoData_DataArray* New() const PROTOBUF_FINAL { return New(NULL); }

  CardGeoData_DataArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CardGeoData_DataArray& from);
  void MergeFrom(const CardGeoData_DataArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CardGeoData_DataArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 priceFrom = 1;
  bool has_pricefrom() const;
  void clear_pricefrom();
  static const int kPriceFromFieldNumber = 1;
  ::google::protobuf::uint32 pricefrom() const;
  void set_pricefrom(::google::protobuf::uint32 value);

  // required uint32 priceTo = 2;
  bool has_priceto() const;
  void clear_priceto();
  static const int kPriceToFieldNumber = 2;
  ::google::protobuf::uint32 priceto() const;
  void set_priceto(::google::protobuf::uint32 value);

  // required uint32 clientsCount = 3;
  bool has_clientscount() const;
  void clear_clientscount();
  static const int kClientsCountFieldNumber = 3;
  ::google::protobuf::uint32 clientscount() const;
  void set_clientscount(::google::protobuf::uint32 value);

  // required uint32 sellsCount = 4;
  bool has_sellscount() const;
  void clear_sellscount();
  static const int kSellsCountFieldNumber = 4;
  ::google::protobuf::uint32 sellscount() const;
  void set_sellscount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CardGeoData.DataArray)
 private:
  void set_has_pricefrom();
  void clear_has_pricefrom();
  void set_has_priceto();
  void clear_has_priceto();
  void set_has_clientscount();
  void clear_has_clientscount();
  void set_has_sellscount();
  void clear_has_sellscount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 pricefrom_;
  ::google::protobuf::uint32 priceto_;
  ::google::protobuf::uint32 clientscount_;
  ::google::protobuf::uint32 sellscount_;
  friend struct protobuf_torg_5ffiltered_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CardGeoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CardGeoData) */ {
 public:
  CardGeoData();
  virtual ~CardGeoData();

  CardGeoData(const CardGeoData& from);

  inline CardGeoData& operator=(const CardGeoData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CardGeoData(CardGeoData&& from) noexcept
    : CardGeoData() {
    *this = ::std::move(from);
  }

  inline CardGeoData& operator=(CardGeoData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardGeoData& default_instance();

  static inline const CardGeoData* internal_default_instance() {
    return reinterpret_cast<const CardGeoData*>(
               &_CardGeoData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CardGeoData* other);
  friend void swap(CardGeoData& a, CardGeoData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CardGeoData* New() const PROTOBUF_FINAL { return New(NULL); }

  CardGeoData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CardGeoData& from);
  void MergeFrom(const CardGeoData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CardGeoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CardGeoData_DataArray DataArray;

  // accessors -------------------------------------------------------

  // repeated .CardGeoData.DataArray dataArray = 2;
  int dataarray_size() const;
  void clear_dataarray();
  static const int kDataArrayFieldNumber = 2;
  const ::CardGeoData_DataArray& dataarray(int index) const;
  ::CardGeoData_DataArray* mutable_dataarray(int index);
  ::CardGeoData_DataArray* add_dataarray();
  ::google::protobuf::RepeatedPtrField< ::CardGeoData_DataArray >*
      mutable_dataarray();
  const ::google::protobuf::RepeatedPtrField< ::CardGeoData_DataArray >&
      dataarray() const;

  // required bytes geoArray = 1;
  bool has_geoarray() const;
  void clear_geoarray();
  static const int kGeoArrayFieldNumber = 1;
  const ::std::string& geoarray() const;
  void set_geoarray(const ::std::string& value);
  #if LANG_CXX11
  void set_geoarray(::std::string&& value);
  #endif
  void set_geoarray(const char* value);
  void set_geoarray(const void* value, size_t size);
  ::std::string* mutable_geoarray();
  ::std::string* release_geoarray();
  void set_allocated_geoarray(::std::string* geoarray);

  // @@protoc_insertion_point(class_scope:CardGeoData)
 private:
  void set_has_geoarray();
  void clear_has_geoarray();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CardGeoData_DataArray > dataarray_;
  ::google::protobuf::internal::ArenaStringPtr geoarray_;
  friend struct protobuf_torg_5ffiltered_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CatGeoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CatGeoData) */ {
 public:
  CatGeoData();
  virtual ~CatGeoData();

  CatGeoData(const CatGeoData& from);

  inline CatGeoData& operator=(const CatGeoData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatGeoData(CatGeoData&& from) noexcept
    : CatGeoData() {
    *this = ::std::move(from);
  }

  inline CatGeoData& operator=(CatGeoData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CatGeoData& default_instance();

  static inline const CatGeoData* internal_default_instance() {
    return reinterpret_cast<const CatGeoData*>(
               &_CatGeoData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CatGeoData* other);
  friend void swap(CatGeoData& a, CatGeoData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatGeoData* New() const PROTOBUF_FINAL { return New(NULL); }

  CatGeoData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CatGeoData& from);
  void MergeFrom(const CatGeoData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CatGeoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes geoArray = 1;
  bool has_geoarray() const;
  void clear_geoarray();
  static const int kGeoArrayFieldNumber = 1;
  const ::std::string& geoarray() const;
  void set_geoarray(const ::std::string& value);
  #if LANG_CXX11
  void set_geoarray(::std::string&& value);
  #endif
  void set_geoarray(const char* value);
  void set_geoarray(const void* value, size_t size);
  ::std::string* mutable_geoarray();
  ::std::string* release_geoarray();
  void set_allocated_geoarray(::std::string* geoarray);

  // @@protoc_insertion_point(class_scope:CatGeoData)
 private:
  void set_has_geoarray();
  void clear_has_geoarray();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr geoarray_;
  friend struct protobuf_torg_5ffiltered_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopCardsByGeo_OffersIndexes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TopCardsByGeo.OffersIndexes) */ {
 public:
  TopCardsByGeo_OffersIndexes();
  virtual ~TopCardsByGeo_OffersIndexes();

  TopCardsByGeo_OffersIndexes(const TopCardsByGeo_OffersIndexes& from);

  inline TopCardsByGeo_OffersIndexes& operator=(const TopCardsByGeo_OffersIndexes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopCardsByGeo_OffersIndexes(TopCardsByGeo_OffersIndexes&& from) noexcept
    : TopCardsByGeo_OffersIndexes() {
    *this = ::std::move(from);
  }

  inline TopCardsByGeo_OffersIndexes& operator=(TopCardsByGeo_OffersIndexes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopCardsByGeo_OffersIndexes& default_instance();

  static inline const TopCardsByGeo_OffersIndexes* internal_default_instance() {
    return reinterpret_cast<const TopCardsByGeo_OffersIndexes*>(
               &_TopCardsByGeo_OffersIndexes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TopCardsByGeo_OffersIndexes* other);
  friend void swap(TopCardsByGeo_OffersIndexes& a, TopCardsByGeo_OffersIndexes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopCardsByGeo_OffersIndexes* New() const PROTOBUF_FINAL { return New(NULL); }

  TopCardsByGeo_OffersIndexes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TopCardsByGeo_OffersIndexes& from);
  void MergeFrom(const TopCardsByGeo_OffersIndexes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TopCardsByGeo_OffersIndexes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 offerindex = 1;
  int offerindex_size() const;
  void clear_offerindex();
  static const int kOfferindexFieldNumber = 1;
  ::google::protobuf::uint32 offerindex(int index) const;
  void set_offerindex(int index, ::google::protobuf::uint32 value);
  void add_offerindex(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offerindex() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offerindex();

  // @@protoc_insertion_point(class_scope:TopCardsByGeo.OffersIndexes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offerindex_;
  friend struct protobuf_torg_5ffiltered_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopCardsByGeo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TopCardsByGeo) */ {
 public:
  TopCardsByGeo();
  virtual ~TopCardsByGeo();

  TopCardsByGeo(const TopCardsByGeo& from);

  inline TopCardsByGeo& operator=(const TopCardsByGeo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopCardsByGeo(TopCardsByGeo&& from) noexcept
    : TopCardsByGeo() {
    *this = ::std::move(from);
  }

  inline TopCardsByGeo& operator=(TopCardsByGeo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopCardsByGeo& default_instance();

  static inline const TopCardsByGeo* internal_default_instance() {
    return reinterpret_cast<const TopCardsByGeo*>(
               &_TopCardsByGeo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TopCardsByGeo* other);
  friend void swap(TopCardsByGeo& a, TopCardsByGeo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopCardsByGeo* New() const PROTOBUF_FINAL { return New(NULL); }

  TopCardsByGeo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TopCardsByGeo& from);
  void MergeFrom(const TopCardsByGeo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TopCardsByGeo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TopCardsByGeo_OffersIndexes OffersIndexes;

  // accessors -------------------------------------------------------

  // repeated .TopCardsByGeo.OffersIndexes topIndexes = 2;
  int topindexes_size() const;
  void clear_topindexes();
  static const int kTopIndexesFieldNumber = 2;
  const ::TopCardsByGeo_OffersIndexes& topindexes(int index) const;
  ::TopCardsByGeo_OffersIndexes* mutable_topindexes(int index);
  ::TopCardsByGeo_OffersIndexes* add_topindexes();
  ::google::protobuf::RepeatedPtrField< ::TopCardsByGeo_OffersIndexes >*
      mutable_topindexes();
  const ::google::protobuf::RepeatedPtrField< ::TopCardsByGeo_OffersIndexes >&
      topindexes() const;

  // repeated string offersInfo = 3;
  int offersinfo_size() const;
  void clear_offersinfo();
  static const int kOffersInfoFieldNumber = 3;
  const ::std::string& offersinfo(int index) const;
  ::std::string* mutable_offersinfo(int index);
  void set_offersinfo(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_offersinfo(int index, ::std::string&& value);
  #endif
  void set_offersinfo(int index, const char* value);
  void set_offersinfo(int index, const char* value, size_t size);
  ::std::string* add_offersinfo();
  void add_offersinfo(const ::std::string& value);
  #if LANG_CXX11
  void add_offersinfo(::std::string&& value);
  #endif
  void add_offersinfo(const char* value);
  void add_offersinfo(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& offersinfo() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_offersinfo();

  // required bytes geoArray = 1;
  bool has_geoarray() const;
  void clear_geoarray();
  static const int kGeoArrayFieldNumber = 1;
  const ::std::string& geoarray() const;
  void set_geoarray(const ::std::string& value);
  #if LANG_CXX11
  void set_geoarray(::std::string&& value);
  #endif
  void set_geoarray(const char* value);
  void set_geoarray(const void* value, size_t size);
  ::std::string* mutable_geoarray();
  ::std::string* release_geoarray();
  void set_allocated_geoarray(::std::string* geoarray);

  // @@protoc_insertion_point(class_scope:TopCardsByGeo)
 private:
  void set_has_geoarray();
  void clear_has_geoarray();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TopCardsByGeo_OffersIndexes > topindexes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> offersinfo_;
  ::google::protobuf::internal::ArenaStringPtr geoarray_;
  friend struct protobuf_torg_5ffiltered_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardGeoData_DataArray

// required uint32 priceFrom = 1;
inline bool CardGeoData_DataArray::has_pricefrom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardGeoData_DataArray::set_has_pricefrom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardGeoData_DataArray::clear_has_pricefrom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardGeoData_DataArray::clear_pricefrom() {
  pricefrom_ = 0u;
  clear_has_pricefrom();
}
inline ::google::protobuf::uint32 CardGeoData_DataArray::pricefrom() const {
  // @@protoc_insertion_point(field_get:CardGeoData.DataArray.priceFrom)
  return pricefrom_;
}
inline void CardGeoData_DataArray::set_pricefrom(::google::protobuf::uint32 value) {
  set_has_pricefrom();
  pricefrom_ = value;
  // @@protoc_insertion_point(field_set:CardGeoData.DataArray.priceFrom)
}

// required uint32 priceTo = 2;
inline bool CardGeoData_DataArray::has_priceto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardGeoData_DataArray::set_has_priceto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardGeoData_DataArray::clear_has_priceto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardGeoData_DataArray::clear_priceto() {
  priceto_ = 0u;
  clear_has_priceto();
}
inline ::google::protobuf::uint32 CardGeoData_DataArray::priceto() const {
  // @@protoc_insertion_point(field_get:CardGeoData.DataArray.priceTo)
  return priceto_;
}
inline void CardGeoData_DataArray::set_priceto(::google::protobuf::uint32 value) {
  set_has_priceto();
  priceto_ = value;
  // @@protoc_insertion_point(field_set:CardGeoData.DataArray.priceTo)
}

// required uint32 clientsCount = 3;
inline bool CardGeoData_DataArray::has_clientscount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardGeoData_DataArray::set_has_clientscount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardGeoData_DataArray::clear_has_clientscount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardGeoData_DataArray::clear_clientscount() {
  clientscount_ = 0u;
  clear_has_clientscount();
}
inline ::google::protobuf::uint32 CardGeoData_DataArray::clientscount() const {
  // @@protoc_insertion_point(field_get:CardGeoData.DataArray.clientsCount)
  return clientscount_;
}
inline void CardGeoData_DataArray::set_clientscount(::google::protobuf::uint32 value) {
  set_has_clientscount();
  clientscount_ = value;
  // @@protoc_insertion_point(field_set:CardGeoData.DataArray.clientsCount)
}

// required uint32 sellsCount = 4;
inline bool CardGeoData_DataArray::has_sellscount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CardGeoData_DataArray::set_has_sellscount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CardGeoData_DataArray::clear_has_sellscount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CardGeoData_DataArray::clear_sellscount() {
  sellscount_ = 0u;
  clear_has_sellscount();
}
inline ::google::protobuf::uint32 CardGeoData_DataArray::sellscount() const {
  // @@protoc_insertion_point(field_get:CardGeoData.DataArray.sellsCount)
  return sellscount_;
}
inline void CardGeoData_DataArray::set_sellscount(::google::protobuf::uint32 value) {
  set_has_sellscount();
  sellscount_ = value;
  // @@protoc_insertion_point(field_set:CardGeoData.DataArray.sellsCount)
}

// -------------------------------------------------------------------

// CardGeoData

// required bytes geoArray = 1;
inline bool CardGeoData::has_geoarray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardGeoData::set_has_geoarray() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardGeoData::clear_has_geoarray() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardGeoData::clear_geoarray() {
  geoarray_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geoarray();
}
inline const ::std::string& CardGeoData::geoarray() const {
  // @@protoc_insertion_point(field_get:CardGeoData.geoArray)
  return geoarray_.GetNoArena();
}
inline void CardGeoData::set_geoarray(const ::std::string& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CardGeoData.geoArray)
}
#if LANG_CXX11
inline void CardGeoData::set_geoarray(::std::string&& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CardGeoData.geoArray)
}
#endif
inline void CardGeoData::set_geoarray(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CardGeoData.geoArray)
}
inline void CardGeoData::set_geoarray(const void* value, size_t size) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CardGeoData.geoArray)
}
inline ::std::string* CardGeoData::mutable_geoarray() {
  set_has_geoarray();
  // @@protoc_insertion_point(field_mutable:CardGeoData.geoArray)
  return geoarray_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CardGeoData::release_geoarray() {
  // @@protoc_insertion_point(field_release:CardGeoData.geoArray)
  clear_has_geoarray();
  return geoarray_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CardGeoData::set_allocated_geoarray(::std::string* geoarray) {
  if (geoarray != NULL) {
    set_has_geoarray();
  } else {
    clear_has_geoarray();
  }
  geoarray_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoarray);
  // @@protoc_insertion_point(field_set_allocated:CardGeoData.geoArray)
}

// repeated .CardGeoData.DataArray dataArray = 2;
inline int CardGeoData::dataarray_size() const {
  return dataarray_.size();
}
inline void CardGeoData::clear_dataarray() {
  dataarray_.Clear();
}
inline const ::CardGeoData_DataArray& CardGeoData::dataarray(int index) const {
  // @@protoc_insertion_point(field_get:CardGeoData.dataArray)
  return dataarray_.Get(index);
}
inline ::CardGeoData_DataArray* CardGeoData::mutable_dataarray(int index) {
  // @@protoc_insertion_point(field_mutable:CardGeoData.dataArray)
  return dataarray_.Mutable(index);
}
inline ::CardGeoData_DataArray* CardGeoData::add_dataarray() {
  // @@protoc_insertion_point(field_add:CardGeoData.dataArray)
  return dataarray_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CardGeoData_DataArray >*
CardGeoData::mutable_dataarray() {
  // @@protoc_insertion_point(field_mutable_list:CardGeoData.dataArray)
  return &dataarray_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CardGeoData_DataArray >&
CardGeoData::dataarray() const {
  // @@protoc_insertion_point(field_list:CardGeoData.dataArray)
  return dataarray_;
}

// -------------------------------------------------------------------

// CatGeoData

// required bytes geoArray = 1;
inline bool CatGeoData::has_geoarray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CatGeoData::set_has_geoarray() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CatGeoData::clear_has_geoarray() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CatGeoData::clear_geoarray() {
  geoarray_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geoarray();
}
inline const ::std::string& CatGeoData::geoarray() const {
  // @@protoc_insertion_point(field_get:CatGeoData.geoArray)
  return geoarray_.GetNoArena();
}
inline void CatGeoData::set_geoarray(const ::std::string& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CatGeoData.geoArray)
}
#if LANG_CXX11
inline void CatGeoData::set_geoarray(::std::string&& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CatGeoData.geoArray)
}
#endif
inline void CatGeoData::set_geoarray(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CatGeoData.geoArray)
}
inline void CatGeoData::set_geoarray(const void* value, size_t size) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CatGeoData.geoArray)
}
inline ::std::string* CatGeoData::mutable_geoarray() {
  set_has_geoarray();
  // @@protoc_insertion_point(field_mutable:CatGeoData.geoArray)
  return geoarray_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatGeoData::release_geoarray() {
  // @@protoc_insertion_point(field_release:CatGeoData.geoArray)
  clear_has_geoarray();
  return geoarray_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatGeoData::set_allocated_geoarray(::std::string* geoarray) {
  if (geoarray != NULL) {
    set_has_geoarray();
  } else {
    clear_has_geoarray();
  }
  geoarray_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoarray);
  // @@protoc_insertion_point(field_set_allocated:CatGeoData.geoArray)
}

// -------------------------------------------------------------------

// TopCardsByGeo_OffersIndexes

// repeated uint32 offerindex = 1;
inline int TopCardsByGeo_OffersIndexes::offerindex_size() const {
  return offerindex_.size();
}
inline void TopCardsByGeo_OffersIndexes::clear_offerindex() {
  offerindex_.Clear();
}
inline ::google::protobuf::uint32 TopCardsByGeo_OffersIndexes::offerindex(int index) const {
  // @@protoc_insertion_point(field_get:TopCardsByGeo.OffersIndexes.offerindex)
  return offerindex_.Get(index);
}
inline void TopCardsByGeo_OffersIndexes::set_offerindex(int index, ::google::protobuf::uint32 value) {
  offerindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:TopCardsByGeo.OffersIndexes.offerindex)
}
inline void TopCardsByGeo_OffersIndexes::add_offerindex(::google::protobuf::uint32 value) {
  offerindex_.Add(value);
  // @@protoc_insertion_point(field_add:TopCardsByGeo.OffersIndexes.offerindex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TopCardsByGeo_OffersIndexes::offerindex() const {
  // @@protoc_insertion_point(field_list:TopCardsByGeo.OffersIndexes.offerindex)
  return offerindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TopCardsByGeo_OffersIndexes::mutable_offerindex() {
  // @@protoc_insertion_point(field_mutable_list:TopCardsByGeo.OffersIndexes.offerindex)
  return &offerindex_;
}

// -------------------------------------------------------------------

// TopCardsByGeo

// required bytes geoArray = 1;
inline bool TopCardsByGeo::has_geoarray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopCardsByGeo::set_has_geoarray() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopCardsByGeo::clear_has_geoarray() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopCardsByGeo::clear_geoarray() {
  geoarray_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geoarray();
}
inline const ::std::string& TopCardsByGeo::geoarray() const {
  // @@protoc_insertion_point(field_get:TopCardsByGeo.geoArray)
  return geoarray_.GetNoArena();
}
inline void TopCardsByGeo::set_geoarray(const ::std::string& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TopCardsByGeo.geoArray)
}
#if LANG_CXX11
inline void TopCardsByGeo::set_geoarray(::std::string&& value) {
  set_has_geoarray();
  geoarray_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TopCardsByGeo.geoArray)
}
#endif
inline void TopCardsByGeo::set_geoarray(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TopCardsByGeo.geoArray)
}
inline void TopCardsByGeo::set_geoarray(const void* value, size_t size) {
  set_has_geoarray();
  geoarray_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TopCardsByGeo.geoArray)
}
inline ::std::string* TopCardsByGeo::mutable_geoarray() {
  set_has_geoarray();
  // @@protoc_insertion_point(field_mutable:TopCardsByGeo.geoArray)
  return geoarray_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopCardsByGeo::release_geoarray() {
  // @@protoc_insertion_point(field_release:TopCardsByGeo.geoArray)
  clear_has_geoarray();
  return geoarray_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopCardsByGeo::set_allocated_geoarray(::std::string* geoarray) {
  if (geoarray != NULL) {
    set_has_geoarray();
  } else {
    clear_has_geoarray();
  }
  geoarray_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoarray);
  // @@protoc_insertion_point(field_set_allocated:TopCardsByGeo.geoArray)
}

// repeated .TopCardsByGeo.OffersIndexes topIndexes = 2;
inline int TopCardsByGeo::topindexes_size() const {
  return topindexes_.size();
}
inline void TopCardsByGeo::clear_topindexes() {
  topindexes_.Clear();
}
inline const ::TopCardsByGeo_OffersIndexes& TopCardsByGeo::topindexes(int index) const {
  // @@protoc_insertion_point(field_get:TopCardsByGeo.topIndexes)
  return topindexes_.Get(index);
}
inline ::TopCardsByGeo_OffersIndexes* TopCardsByGeo::mutable_topindexes(int index) {
  // @@protoc_insertion_point(field_mutable:TopCardsByGeo.topIndexes)
  return topindexes_.Mutable(index);
}
inline ::TopCardsByGeo_OffersIndexes* TopCardsByGeo::add_topindexes() {
  // @@protoc_insertion_point(field_add:TopCardsByGeo.topIndexes)
  return topindexes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TopCardsByGeo_OffersIndexes >*
TopCardsByGeo::mutable_topindexes() {
  // @@protoc_insertion_point(field_mutable_list:TopCardsByGeo.topIndexes)
  return &topindexes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TopCardsByGeo_OffersIndexes >&
TopCardsByGeo::topindexes() const {
  // @@protoc_insertion_point(field_list:TopCardsByGeo.topIndexes)
  return topindexes_;
}

// repeated string offersInfo = 3;
inline int TopCardsByGeo::offersinfo_size() const {
  return offersinfo_.size();
}
inline void TopCardsByGeo::clear_offersinfo() {
  offersinfo_.Clear();
}
inline const ::std::string& TopCardsByGeo::offersinfo(int index) const {
  // @@protoc_insertion_point(field_get:TopCardsByGeo.offersInfo)
  return offersinfo_.Get(index);
}
inline ::std::string* TopCardsByGeo::mutable_offersinfo(int index) {
  // @@protoc_insertion_point(field_mutable:TopCardsByGeo.offersInfo)
  return offersinfo_.Mutable(index);
}
inline void TopCardsByGeo::set_offersinfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TopCardsByGeo.offersInfo)
  offersinfo_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TopCardsByGeo::set_offersinfo(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TopCardsByGeo.offersInfo)
  offersinfo_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TopCardsByGeo::set_offersinfo(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  offersinfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TopCardsByGeo.offersInfo)
}
inline void TopCardsByGeo::set_offersinfo(int index, const char* value, size_t size) {
  offersinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TopCardsByGeo.offersInfo)
}
inline ::std::string* TopCardsByGeo::add_offersinfo() {
  // @@protoc_insertion_point(field_add_mutable:TopCardsByGeo.offersInfo)
  return offersinfo_.Add();
}
inline void TopCardsByGeo::add_offersinfo(const ::std::string& value) {
  offersinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TopCardsByGeo.offersInfo)
}
#if LANG_CXX11
inline void TopCardsByGeo::add_offersinfo(::std::string&& value) {
  offersinfo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TopCardsByGeo.offersInfo)
}
#endif
inline void TopCardsByGeo::add_offersinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  offersinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TopCardsByGeo.offersInfo)
}
inline void TopCardsByGeo::add_offersinfo(const char* value, size_t size) {
  offersinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TopCardsByGeo.offersInfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopCardsByGeo::offersinfo() const {
  // @@protoc_insertion_point(field_list:TopCardsByGeo.offersInfo)
  return offersinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopCardsByGeo::mutable_offersinfo() {
  // @@protoc_insertion_point(field_mutable_list:TopCardsByGeo.offersInfo)
  return &offersinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_torg_5ffiltered_5fdata_2eproto__INCLUDED
