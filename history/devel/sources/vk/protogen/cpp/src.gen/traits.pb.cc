// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traits.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traits.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace traits {
class test_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<test_trait>
     _instance;
} _test_trait_default_instance_;
class test_aggregationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<test_aggregation>
     _instance;
} _test_aggregation_default_instance_;
class domain_stat_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<domain_stat_trait>
     _instance;
} _domain_stat_trait_default_instance_;
class shard_domain_posDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<shard_domain_pos>
     _instance;
} _shard_domain_pos_default_instance_;
class shard_domain_statDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<shard_domain_stat>
     _instance;
} _shard_domain_stat_default_instance_;
class shard_domain_stat_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<shard_domain_stat_trait>
     _instance;
} _shard_domain_stat_trait_default_instance_;
class shard_url_statDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<shard_url_stat>
     _instance;
} _shard_url_stat_default_instance_;
class shard_url_stat_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<shard_url_stat_trait>
     _instance;
} _shard_url_stat_trait_default_instance_;
class infocard_featuresDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<infocard_features>
     _instance;
} _infocard_features_default_instance_;
class infocard_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<infocard_trait>
     _instance;
} _infocard_trait_default_instance_;
class companies_docDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<companies_doc>
     _instance;
} _companies_doc_default_instance_;
class companies_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<companies_trait>
     _instance;
} _companies_trait_default_instance_;
class color_statDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<color_stat>
     _instance;
} _color_stat_default_instance_;
class category_statDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<category_stat>
     _instance;
} _category_stat_default_instance_;
class size_statDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<size_stat>
     _instance;
} _size_stat_default_instance_;
class torg_china_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<torg_china_trait>
     _instance;
} _torg_china_trait_default_instance_;
class vk_music_track_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<vk_music_track_trait>
     _instance;
} _vk_music_track_trait_default_instance_;
class total_searcher_docs_statisticsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<total_searcher_docs_statistics>
     _instance;
} _total_searcher_docs_statistics_default_instance_;
class recipes_docDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<recipes_doc>
     _instance;
} _recipes_doc_default_instance_;
class recipes_traitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<recipes_trait>
     _instance;
} _recipes_trait_default_instance_;

namespace protobuf_traits_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_trait, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_trait, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_aggregation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_aggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_aggregation, sum_length_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(domain_stat_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(domain_stat_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(domain_stat_trait, domains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(domain_stat_trait, docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(domain_stat_trait, total_docs_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_pos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_pos, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_pos, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_pos, avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_pos, var_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat, docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat, pos_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat_trait, domains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_domain_stat_trait, total_docs_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat, sq_model_rank_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shard_url_stat_trait, urls_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_features, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_features, features_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_trait, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_trait, ranks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_trait, positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_trait, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infocard_trait, markups_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_doc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_doc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_doc, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_doc, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_doc, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_doc, features_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(companies_trait, docs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_stat, color_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_stat, color_popularity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(category_stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(category_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(category_stat, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(category_stat, category_popularity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(size_stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(size_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(size_stat, size_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(size_stat, size_type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(size_stat, size_popularity_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, price_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, price_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, category_stat_l0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, category_stat_l1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, category_stat_l2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, colors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, sizes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, pbonus_price_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, pbonus_price_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, price_usd_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, price_usd_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, price_usd_with_ship_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, price_usd_with_ship_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, price_usd_with_cod_ship_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(torg_china_trait, price_usd_with_cod_ship_max_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vk_music_track_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vk_music_track_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vk_music_track_trait, official_titles_fully_matched_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(total_searcher_docs_statistics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(total_searcher_docs_statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(total_searcher_docs_statistics, same_words_total_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(total_searcher_docs_statistics, total_found_docs_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recipes_doc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recipes_doc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recipes_doc, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recipes_doc, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recipes_doc, position_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recipes_trait, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recipes_trait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recipes_trait, docs_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(test_trait)},
  { 9, 15, sizeof(test_aggregation)},
  { 16, 24, sizeof(domain_stat_trait)},
  { 27, 36, sizeof(shard_domain_pos)},
  { 40, 48, sizeof(shard_domain_stat)},
  { 51, 58, sizeof(shard_domain_stat_trait)},
  { 60, 69, sizeof(shard_url_stat)},
  { 73, 79, sizeof(shard_url_stat_trait)},
  { 80, 86, sizeof(infocard_features)},
  { 87, 97, sizeof(infocard_trait)},
  { 102, 111, sizeof(companies_doc)},
  { 115, 121, sizeof(companies_trait)},
  { 122, 129, sizeof(color_stat)},
  { 131, 138, sizeof(category_stat)},
  { 140, 148, sizeof(size_stat)},
  { 151, 171, sizeof(torg_china_trait)},
  { 186, 192, sizeof(vk_music_track_trait)},
  { 193, 200, sizeof(total_searcher_docs_statistics)},
  { 202, 210, sizeof(recipes_doc)},
  { 213, 219, sizeof(recipes_trait)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_test_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_test_aggregation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_domain_stat_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_shard_domain_pos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_shard_domain_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_shard_domain_stat_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_shard_url_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_shard_url_stat_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_infocard_features_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_infocard_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_companies_doc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_companies_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_color_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_category_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_size_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_torg_china_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_vk_music_track_trait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_total_searcher_docs_statistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_recipes_doc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_recipes_trait_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "traits.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _test_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_test_trait_default_instance_);_test_aggregation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_test_aggregation_default_instance_);_domain_stat_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_domain_stat_trait_default_instance_);_shard_domain_pos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_shard_domain_pos_default_instance_);_shard_domain_stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_shard_domain_stat_default_instance_);_shard_domain_stat_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_shard_domain_stat_trait_default_instance_);_shard_url_stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_shard_url_stat_default_instance_);_shard_url_stat_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_shard_url_stat_trait_default_instance_);_infocard_features_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_infocard_features_default_instance_);_infocard_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_infocard_trait_default_instance_);_companies_doc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_companies_doc_default_instance_);_companies_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_companies_trait_default_instance_);_color_stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_color_stat_default_instance_);_category_stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_category_stat_default_instance_);_size_stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_size_stat_default_instance_);_torg_china_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_torg_china_trait_default_instance_);_vk_music_track_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_vk_music_track_trait_default_instance_);_total_searcher_docs_statistics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_total_searcher_docs_statistics_default_instance_);_recipes_doc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_recipes_doc_default_instance_);_recipes_trait_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_recipes_trait_default_instance_);_shard_domain_stat_default_instance_._instance.get_mutable()->pos_ = const_cast< ::gogo::traits::shard_domain_pos*>(
      ::gogo::traits::shard_domain_pos::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014traits.proto\022\013gogo.traits\"\"\n\ntest_trai"
      "t\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"&\n\020test_aggregat"
      "ion\022\022\n\nsum_length\030\001 \002(\005\"N\n\021domain_stat_t"
      "rait\022\023\n\007domains\030\001 \003(\rB\002\020\001\022\020\n\004docs\030\002 \003(\rB"
      "\002\020\001\022\022\n\ntotal_docs\030\003 \001(\r\"F\n\020shard_domain_"
      "pos\022\013\n\003min\030\001 \001(\r\022\013\n\003max\030\002 \001(\r\022\013\n\003avg\030\003 \001"
      "(\002\022\013\n\003var\030\004 \001(\002\"]\n\021shard_domain_stat\022\016\n\006"
      "domain\030\001 \002(\r\022\014\n\004docs\030\002 \001(\r\022*\n\003pos\030\003 \001(\0132"
      "\035.gogo.traits.shard_domain_pos\"^\n\027shard_"
      "domain_stat_trait\022/\n\007domains\030\001 \003(\0132\036.gog"
      "o.traits.shard_domain_stat\022\022\n\ntotal_docs"
      "\030\002 \001(\r\"Q\n\016shard_url_stat\022\013\n\003url\030\001 \001(\004\022\016\n"
      "\006domain\030\002 \001(\r\022\013\n\003pos\030\003 \001(\r\022\025\n\rsq_model_r"
      "ank\030\004 \001(\002\"A\n\024shard_url_stat_trait\022)\n\004url"
      "s\030\001 \003(\0132\033.gogo.traits.shard_url_stat\")\n\021"
      "infocard_features\022\024\n\010features\030\001 \003(\002B\002\020\001\""
      "\350\001\n\016infocard_trait\022\023\n\007objects\030\001 \003(\004B\002\020\001\022"
      "\021\n\005ranks\030\002 \003(\002B\002\020\001\022\025\n\tpositions\030\003 \003(\005B\002\020"
      "\001\0220\n\010features\030\004 \003(\0132\036.gogo.traits.infoca"
      "rd_features\022>\n\007markups\030\005 \003(\0162).gogo.trai"
      "ts.infocard_trait.markup_sourceB\002\020\001\"%\n\rm"
      "arkup_source\022\t\n\005QUERY\020\001\022\t\n\005INDEX\020\002\"S\n\rco"
      "mpanies_doc\022\014\n\004hash\030\001 \001(\004\022\014\n\004rank\030\002 \001(\002\022"
      "\020\n\010position\030\003 \001(\005\022\024\n\010features\030\004 \003(\002B\002\020\001\""
      ";\n\017companies_trait\022(\n\004docs\030\001 \003(\0132\032.gogo."
      "traits.companies_doc\"8\n\ncolor_stat\022\020\n\010co"
      "lor_id\030\001 \002(\005\022\030\n\020color_popularity\030\002 \002(\005\"A"
      "\n\rcategory_stat\022\023\n\013category_id\030\001 \002(\003\022\033\n\023"
      "category_popularity\030\002 \002(\005\"K\n\tsize_stat\022\017"
      "\n\007size_id\030\001 \002(\005\022\024\n\014size_type_id\030\002 \002(\005\022\027\n"
      "\017size_popularity\030\003 \002(\005\"\230\004\n\020torg_china_tr"
      "ait\022\021\n\tprice_min\030\001 \001(\005\022\021\n\tprice_max\030\002 \001("
      "\005\0224\n\020category_stat_l0\030\003 \003(\0132\032.gogo.trait"
      "s.category_stat\0224\n\020category_stat_l1\030\004 \003("
      "\0132\032.gogo.traits.category_stat\0224\n\020categor"
      "y_stat_l2\030\005 \003(\0132\032.gogo.traits.category_s"
      "tat\022\'\n\006colors\030\006 \003(\0132\027.gogo.traits.color_"
      "stat\022%\n\005sizes\030\007 \003(\0132\026.gogo.traits.size_s"
      "tat\022\030\n\020pbonus_price_min\030\010 \001(\005\022\030\n\020pbonus_"
      "price_max\030\t \001(\005\022\025\n\rprice_usd_min\030\n \001(\005\022\025"
      "\n\rprice_usd_max\030\013 \001(\005\022\037\n\027price_usd_with_"
      "ship_min\030\014 \001(\005\022\037\n\027price_usd_with_ship_ma"
      "x\030\r \001(\005\022#\n\033price_usd_with_cod_ship_min\030\016"
      " \001(\005\022#\n\033price_usd_with_cod_ship_max\030\017 \001("
      "\005\"=\n\024vk_music_track_trait\022%\n\035official_ti"
      "tles_fully_matched\030\001 \001(\005\"_\n\036total_search"
      "er_docs_statistics\022\035\n\025same_words_total_d"
      "ocs\030\001 \001(\005\022\036\n\026total_found_docs_count\030\002 \001("
      "\005\";\n\013recipes_doc\022\014\n\004hash\030\001 \001(\004\022\014\n\004rank\030\002"
      " \001(\002\022\020\n\010position\030\003 \001(\005\"7\n\rrecipes_trait\022"
      "&\n\004docs\030\001 \003(\0132\030.gogo.traits.recipes_doc"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2039);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traits.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_traits_2eproto

const ::google::protobuf::EnumDescriptor* infocard_trait_markup_source_descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_enum_descriptors[0];
}
bool infocard_trait_markup_source_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const infocard_trait_markup_source infocard_trait::QUERY;
const infocard_trait_markup_source infocard_trait::INDEX;
const infocard_trait_markup_source infocard_trait::markup_source_MIN;
const infocard_trait_markup_source infocard_trait::markup_source_MAX;
const int infocard_trait::markup_source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int test_trait::kXFieldNumber;
const int test_trait::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

test_trait::test_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.test_trait)
}
test_trait::test_trait(const test_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.test_trait)
}

void test_trait::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

test_trait::~test_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.test_trait)
  SharedDtor();
}

void test_trait::SharedDtor() {
}

void test_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const test_trait& test_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

test_trait* test_trait::New(::google::protobuf::Arena* arena) const {
  test_trait* n = new test_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void test_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.test_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool test_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.test_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.test_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.test_trait)
  return false;
#undef DO_
}

void test_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.test_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.test_trait)
}

::google::protobuf::uint8* test_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.test_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.test_trait)
  return target;
}

size_t test_trait::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.traits.test_trait)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t test_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.test_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.test_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const test_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const test_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.test_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.test_trait)
    MergeFrom(*source);
  }
}

void test_trait::MergeFrom(const test_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.test_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void test_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.test_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_trait::CopyFrom(const test_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.test_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_trait::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void test_trait::Swap(test_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void test_trait::InternalSwap(test_trait* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata test_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// test_trait

// required int32 x = 1;
bool test_trait::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void test_trait::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void test_trait::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void test_trait::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 test_trait::x() const {
  // @@protoc_insertion_point(field_get:gogo.traits.test_trait.x)
  return x_;
}
void test_trait::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.test_trait.x)
}

// required int32 y = 2;
bool test_trait::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void test_trait::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void test_trait::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void test_trait::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 test_trait::y() const {
  // @@protoc_insertion_point(field_get:gogo.traits.test_trait.y)
  return y_;
}
void test_trait::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.test_trait.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int test_aggregation::kSumLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

test_aggregation::test_aggregation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.test_aggregation)
}
test_aggregation::test_aggregation(const test_aggregation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sum_length_ = from.sum_length_;
  // @@protoc_insertion_point(copy_constructor:gogo.traits.test_aggregation)
}

void test_aggregation::SharedCtor() {
  _cached_size_ = 0;
  sum_length_ = 0;
}

test_aggregation::~test_aggregation() {
  // @@protoc_insertion_point(destructor:gogo.traits.test_aggregation)
  SharedDtor();
}

void test_aggregation::SharedDtor() {
}

void test_aggregation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_aggregation::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const test_aggregation& test_aggregation::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

test_aggregation* test_aggregation::New(::google::protobuf::Arena* arena) const {
  test_aggregation* n = new test_aggregation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void test_aggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.test_aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sum_length_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool test_aggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.test_aggregation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sum_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sum_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sum_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.test_aggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.test_aggregation)
  return false;
#undef DO_
}

void test_aggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.test_aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sum_length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sum_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.test_aggregation)
}

::google::protobuf::uint8* test_aggregation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.test_aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sum_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sum_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.test_aggregation)
  return target;
}

size_t test_aggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.test_aggregation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 sum_length = 1;
  if (has_sum_length()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sum_length());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_aggregation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.test_aggregation)
  GOOGLE_DCHECK_NE(&from, this);
  const test_aggregation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const test_aggregation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.test_aggregation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.test_aggregation)
    MergeFrom(*source);
  }
}

void test_aggregation::MergeFrom(const test_aggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.test_aggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sum_length()) {
    set_sum_length(from.sum_length());
  }
}

void test_aggregation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.test_aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_aggregation::CopyFrom(const test_aggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.test_aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_aggregation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void test_aggregation::Swap(test_aggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void test_aggregation::InternalSwap(test_aggregation* other) {
  using std::swap;
  swap(sum_length_, other->sum_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata test_aggregation::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// test_aggregation

// required int32 sum_length = 1;
bool test_aggregation::has_sum_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void test_aggregation::set_has_sum_length() {
  _has_bits_[0] |= 0x00000001u;
}
void test_aggregation::clear_has_sum_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void test_aggregation::clear_sum_length() {
  sum_length_ = 0;
  clear_has_sum_length();
}
::google::protobuf::int32 test_aggregation::sum_length() const {
  // @@protoc_insertion_point(field_get:gogo.traits.test_aggregation.sum_length)
  return sum_length_;
}
void test_aggregation::set_sum_length(::google::protobuf::int32 value) {
  set_has_sum_length();
  sum_length_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.test_aggregation.sum_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int domain_stat_trait::kDomainsFieldNumber;
const int domain_stat_trait::kDocsFieldNumber;
const int domain_stat_trait::kTotalDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

domain_stat_trait::domain_stat_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.domain_stat_trait)
}
domain_stat_trait::domain_stat_trait(const domain_stat_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      domains_(from.domains_),
      docs_(from.docs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_docs_ = from.total_docs_;
  // @@protoc_insertion_point(copy_constructor:gogo.traits.domain_stat_trait)
}

void domain_stat_trait::SharedCtor() {
  _cached_size_ = 0;
  total_docs_ = 0u;
}

domain_stat_trait::~domain_stat_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.domain_stat_trait)
  SharedDtor();
}

void domain_stat_trait::SharedDtor() {
}

void domain_stat_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* domain_stat_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const domain_stat_trait& domain_stat_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

domain_stat_trait* domain_stat_trait::New(::google::protobuf::Arena* arena) const {
  domain_stat_trait* n = new domain_stat_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void domain_stat_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.domain_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_.Clear();
  docs_.Clear();
  total_docs_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool domain_stat_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.domain_stat_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 domains = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_domains())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_domains())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 docs = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_docs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_docs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_docs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_total_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.domain_stat_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.domain_stat_trait)
  return false;
#undef DO_
}

void domain_stat_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.domain_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 domains = 1 [packed = true];
  if (this->domains_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _domains_cached_byte_size_));
  }
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->domains(i), output);
  }

  // repeated uint32 docs = 2 [packed = true];
  if (this->docs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _docs_cached_byte_size_));
  }
  for (int i = 0, n = this->docs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->docs(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_docs = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_docs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.domain_stat_trait)
}

::google::protobuf::uint8* domain_stat_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.domain_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 domains = 1 [packed = true];
  if (this->domains_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _domains_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->domains_, target);
  }

  // repeated uint32 docs = 2 [packed = true];
  if (this->docs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _docs_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->docs_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_docs = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_docs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.domain_stat_trait)
  return target;
}

size_t domain_stat_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.domain_stat_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 domains = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->domains_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _domains_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 docs = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->docs_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _docs_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional uint32 total_docs = 3;
  if (has_total_docs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_docs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void domain_stat_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.domain_stat_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const domain_stat_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const domain_stat_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.domain_stat_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.domain_stat_trait)
    MergeFrom(*source);
  }
}

void domain_stat_trait::MergeFrom(const domain_stat_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.domain_stat_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
  docs_.MergeFrom(from.docs_);
  if (from.has_total_docs()) {
    set_total_docs(from.total_docs());
  }
}

void domain_stat_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.domain_stat_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void domain_stat_trait::CopyFrom(const domain_stat_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.domain_stat_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool domain_stat_trait::IsInitialized() const {
  return true;
}

void domain_stat_trait::Swap(domain_stat_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void domain_stat_trait::InternalSwap(domain_stat_trait* other) {
  using std::swap;
  domains_.InternalSwap(&other->domains_);
  docs_.InternalSwap(&other->docs_);
  swap(total_docs_, other->total_docs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata domain_stat_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// domain_stat_trait

// repeated uint32 domains = 1 [packed = true];
int domain_stat_trait::domains_size() const {
  return domains_.size();
}
void domain_stat_trait::clear_domains() {
  domains_.Clear();
}
::google::protobuf::uint32 domain_stat_trait::domains(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.domain_stat_trait.domains)
  return domains_.Get(index);
}
void domain_stat_trait::set_domains(int index, ::google::protobuf::uint32 value) {
  domains_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.domain_stat_trait.domains)
}
void domain_stat_trait::add_domains(::google::protobuf::uint32 value) {
  domains_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.domain_stat_trait.domains)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
domain_stat_trait::domains() const {
  // @@protoc_insertion_point(field_list:gogo.traits.domain_stat_trait.domains)
  return domains_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
domain_stat_trait::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.domain_stat_trait.domains)
  return &domains_;
}

// repeated uint32 docs = 2 [packed = true];
int domain_stat_trait::docs_size() const {
  return docs_.size();
}
void domain_stat_trait::clear_docs() {
  docs_.Clear();
}
::google::protobuf::uint32 domain_stat_trait::docs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.domain_stat_trait.docs)
  return docs_.Get(index);
}
void domain_stat_trait::set_docs(int index, ::google::protobuf::uint32 value) {
  docs_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.domain_stat_trait.docs)
}
void domain_stat_trait::add_docs(::google::protobuf::uint32 value) {
  docs_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.domain_stat_trait.docs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
domain_stat_trait::docs() const {
  // @@protoc_insertion_point(field_list:gogo.traits.domain_stat_trait.docs)
  return docs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
domain_stat_trait::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.domain_stat_trait.docs)
  return &docs_;
}

// optional uint32 total_docs = 3;
bool domain_stat_trait::has_total_docs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void domain_stat_trait::set_has_total_docs() {
  _has_bits_[0] |= 0x00000001u;
}
void domain_stat_trait::clear_has_total_docs() {
  _has_bits_[0] &= ~0x00000001u;
}
void domain_stat_trait::clear_total_docs() {
  total_docs_ = 0u;
  clear_has_total_docs();
}
::google::protobuf::uint32 domain_stat_trait::total_docs() const {
  // @@protoc_insertion_point(field_get:gogo.traits.domain_stat_trait.total_docs)
  return total_docs_;
}
void domain_stat_trait::set_total_docs(::google::protobuf::uint32 value) {
  set_has_total_docs();
  total_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.domain_stat_trait.total_docs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int shard_domain_pos::kMinFieldNumber;
const int shard_domain_pos::kMaxFieldNumber;
const int shard_domain_pos::kAvgFieldNumber;
const int shard_domain_pos::kVarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

shard_domain_pos::shard_domain_pos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.shard_domain_pos)
}
shard_domain_pos::shard_domain_pos(const shard_domain_pos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&var_) -
    reinterpret_cast<char*>(&min_)) + sizeof(var_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.shard_domain_pos)
}

void shard_domain_pos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_) -
      reinterpret_cast<char*>(&min_)) + sizeof(var_));
}

shard_domain_pos::~shard_domain_pos() {
  // @@protoc_insertion_point(destructor:gogo.traits.shard_domain_pos)
  SharedDtor();
}

void shard_domain_pos::SharedDtor() {
}

void shard_domain_pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shard_domain_pos::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const shard_domain_pos& shard_domain_pos::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

shard_domain_pos* shard_domain_pos::New(::google::protobuf::Arena* arena) const {
  shard_domain_pos* n = new shard_domain_pos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shard_domain_pos::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.shard_domain_pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_) -
        reinterpret_cast<char*>(&min_)) + sizeof(var_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool shard_domain_pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.shard_domain_pos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float avg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_avg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float var = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_var();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.shard_domain_pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.shard_domain_pos)
  return false;
#undef DO_
}

void shard_domain_pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.shard_domain_pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min(), output);
  }

  // optional uint32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max(), output);
  }

  // optional float avg = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->avg(), output);
  }

  // optional float var = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->var(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.shard_domain_pos)
}

::google::protobuf::uint8* shard_domain_pos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.shard_domain_pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min(), target);
  }

  // optional uint32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max(), target);
  }

  // optional float avg = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->avg(), target);
  }

  // optional float var = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->var(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.shard_domain_pos)
  return target;
}

size_t shard_domain_pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.shard_domain_pos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 min = 1;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // optional float avg = 3;
    if (has_avg()) {
      total_size += 1 + 4;
    }

    // optional float var = 4;
    if (has_var()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shard_domain_pos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.shard_domain_pos)
  GOOGLE_DCHECK_NE(&from, this);
  const shard_domain_pos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const shard_domain_pos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.shard_domain_pos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.shard_domain_pos)
    MergeFrom(*source);
  }
}

void shard_domain_pos::MergeFrom(const shard_domain_pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.shard_domain_pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_ = from.avg_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_ = from.var_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void shard_domain_pos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.shard_domain_pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shard_domain_pos::CopyFrom(const shard_domain_pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.shard_domain_pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shard_domain_pos::IsInitialized() const {
  return true;
}

void shard_domain_pos::Swap(shard_domain_pos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shard_domain_pos::InternalSwap(shard_domain_pos* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(avg_, other->avg_);
  swap(var_, other->var_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shard_domain_pos::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// shard_domain_pos

// optional uint32 min = 1;
bool shard_domain_pos::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void shard_domain_pos::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
void shard_domain_pos::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void shard_domain_pos::clear_min() {
  min_ = 0u;
  clear_has_min();
}
::google::protobuf::uint32 shard_domain_pos::min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_pos.min)
  return min_;
}
void shard_domain_pos::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_pos.min)
}

// optional uint32 max = 2;
bool shard_domain_pos::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void shard_domain_pos::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
void shard_domain_pos::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void shard_domain_pos::clear_max() {
  max_ = 0u;
  clear_has_max();
}
::google::protobuf::uint32 shard_domain_pos::max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_pos.max)
  return max_;
}
void shard_domain_pos::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_pos.max)
}

// optional float avg = 3;
bool shard_domain_pos::has_avg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void shard_domain_pos::set_has_avg() {
  _has_bits_[0] |= 0x00000004u;
}
void shard_domain_pos::clear_has_avg() {
  _has_bits_[0] &= ~0x00000004u;
}
void shard_domain_pos::clear_avg() {
  avg_ = 0;
  clear_has_avg();
}
float shard_domain_pos::avg() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_pos.avg)
  return avg_;
}
void shard_domain_pos::set_avg(float value) {
  set_has_avg();
  avg_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_pos.avg)
}

// optional float var = 4;
bool shard_domain_pos::has_var() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void shard_domain_pos::set_has_var() {
  _has_bits_[0] |= 0x00000008u;
}
void shard_domain_pos::clear_has_var() {
  _has_bits_[0] &= ~0x00000008u;
}
void shard_domain_pos::clear_var() {
  var_ = 0;
  clear_has_var();
}
float shard_domain_pos::var() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_pos.var)
  return var_;
}
void shard_domain_pos::set_var(float value) {
  set_has_var();
  var_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_pos.var)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int shard_domain_stat::kDomainFieldNumber;
const int shard_domain_stat::kDocsFieldNumber;
const int shard_domain_stat::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

shard_domain_stat::shard_domain_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.shard_domain_stat)
}
shard_domain_stat::shard_domain_stat(const shard_domain_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::gogo::traits::shard_domain_pos(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&domain_, &from.domain_,
    static_cast<size_t>(reinterpret_cast<char*>(&docs_) -
    reinterpret_cast<char*>(&domain_)) + sizeof(docs_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.shard_domain_stat)
}

void shard_domain_stat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&docs_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(docs_));
}

shard_domain_stat::~shard_domain_stat() {
  // @@protoc_insertion_point(destructor:gogo.traits.shard_domain_stat)
  SharedDtor();
}

void shard_domain_stat::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void shard_domain_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shard_domain_stat::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const shard_domain_stat& shard_domain_stat::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

shard_domain_stat* shard_domain_stat::New(::google::protobuf::Arena* arena) const {
  shard_domain_stat* n = new shard_domain_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shard_domain_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.shard_domain_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_pos()) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->::gogo::traits::shard_domain_pos::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&domain_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&docs_) -
        reinterpret_cast<char*>(&domain_)) + sizeof(docs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool shard_domain_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.shard_domain_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 domain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_domain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 docs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.traits.shard_domain_pos pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.shard_domain_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.shard_domain_stat)
  return false;
#undef DO_
}

void shard_domain_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.shard_domain_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 domain = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->domain(), output);
  }

  // optional uint32 docs = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->docs(), output);
  }

  // optional .gogo.traits.shard_domain_pos pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.shard_domain_stat)
}

::google::protobuf::uint8* shard_domain_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.shard_domain_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 domain = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->domain(), target);
  }

  // optional uint32 docs = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->docs(), target);
  }

  // optional .gogo.traits.shard_domain_pos pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.shard_domain_stat)
  return target;
}

size_t shard_domain_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.shard_domain_stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 domain = 1;
  if (has_domain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->domain());
  }
  // optional .gogo.traits.shard_domain_pos pos = 3;
  if (has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // optional uint32 docs = 2;
  if (has_docs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shard_domain_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.shard_domain_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const shard_domain_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const shard_domain_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.shard_domain_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.shard_domain_stat)
    MergeFrom(*source);
  }
}

void shard_domain_stat::MergeFrom(const shard_domain_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.shard_domain_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::gogo::traits::shard_domain_pos::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      domain_ = from.domain_;
    }
    if (cached_has_bits & 0x00000004u) {
      docs_ = from.docs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void shard_domain_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.shard_domain_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shard_domain_stat::CopyFrom(const shard_domain_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.shard_domain_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shard_domain_stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void shard_domain_stat::Swap(shard_domain_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shard_domain_stat::InternalSwap(shard_domain_stat* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(domain_, other->domain_);
  swap(docs_, other->docs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shard_domain_stat::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// shard_domain_stat

// required uint32 domain = 1;
bool shard_domain_stat::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void shard_domain_stat::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
void shard_domain_stat::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
void shard_domain_stat::clear_domain() {
  domain_ = 0u;
  clear_has_domain();
}
::google::protobuf::uint32 shard_domain_stat::domain() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat.domain)
  return domain_;
}
void shard_domain_stat::set_domain(::google::protobuf::uint32 value) {
  set_has_domain();
  domain_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_stat.domain)
}

// optional uint32 docs = 2;
bool shard_domain_stat::has_docs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void shard_domain_stat::set_has_docs() {
  _has_bits_[0] |= 0x00000004u;
}
void shard_domain_stat::clear_has_docs() {
  _has_bits_[0] &= ~0x00000004u;
}
void shard_domain_stat::clear_docs() {
  docs_ = 0u;
  clear_has_docs();
}
::google::protobuf::uint32 shard_domain_stat::docs() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat.docs)
  return docs_;
}
void shard_domain_stat::set_docs(::google::protobuf::uint32 value) {
  set_has_docs();
  docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_stat.docs)
}

// optional .gogo.traits.shard_domain_pos pos = 3;
bool shard_domain_stat::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void shard_domain_stat::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void shard_domain_stat::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void shard_domain_stat::clear_pos() {
  if (pos_ != NULL) pos_->::gogo::traits::shard_domain_pos::Clear();
  clear_has_pos();
}
const ::gogo::traits::shard_domain_pos& shard_domain_stat::pos() const {
  const ::gogo::traits::shard_domain_pos* p = pos_;
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::traits::shard_domain_pos*>(
      &::gogo::traits::_shard_domain_pos_default_instance_);
}
::gogo::traits::shard_domain_pos* shard_domain_stat::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::gogo::traits::shard_domain_pos;
  }
  // @@protoc_insertion_point(field_mutable:gogo.traits.shard_domain_stat.pos)
  return pos_;
}
::gogo::traits::shard_domain_pos* shard_domain_stat::release_pos() {
  // @@protoc_insertion_point(field_release:gogo.traits.shard_domain_stat.pos)
  clear_has_pos();
  ::gogo::traits::shard_domain_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
void shard_domain_stat::set_allocated_pos(::gogo::traits::shard_domain_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.traits.shard_domain_stat.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int shard_domain_stat_trait::kDomainsFieldNumber;
const int shard_domain_stat_trait::kTotalDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

shard_domain_stat_trait::shard_domain_stat_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.shard_domain_stat_trait)
}
shard_domain_stat_trait::shard_domain_stat_trait(const shard_domain_stat_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_docs_ = from.total_docs_;
  // @@protoc_insertion_point(copy_constructor:gogo.traits.shard_domain_stat_trait)
}

void shard_domain_stat_trait::SharedCtor() {
  _cached_size_ = 0;
  total_docs_ = 0u;
}

shard_domain_stat_trait::~shard_domain_stat_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.shard_domain_stat_trait)
  SharedDtor();
}

void shard_domain_stat_trait::SharedDtor() {
}

void shard_domain_stat_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shard_domain_stat_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const shard_domain_stat_trait& shard_domain_stat_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

shard_domain_stat_trait* shard_domain_stat_trait::New(::google::protobuf::Arena* arena) const {
  shard_domain_stat_trait* n = new shard_domain_stat_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shard_domain_stat_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.shard_domain_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_.Clear();
  total_docs_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool shard_domain_stat_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.shard_domain_stat_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.traits.shard_domain_stat domains = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domains()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_docs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_total_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.shard_domain_stat_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.shard_domain_stat_trait)
  return false;
#undef DO_
}

void shard_domain_stat_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.shard_domain_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.traits.shard_domain_stat domains = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->domains_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->domains(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_docs = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_docs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.shard_domain_stat_trait)
}

::google::protobuf::uint8* shard_domain_stat_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.shard_domain_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.traits.shard_domain_stat domains = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->domains_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->domains(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_docs = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_docs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.shard_domain_stat_trait)
  return target;
}

size_t shard_domain_stat_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.shard_domain_stat_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.traits.shard_domain_stat domains = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->domains_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domains(static_cast<int>(i)));
    }
  }

  // optional uint32 total_docs = 2;
  if (has_total_docs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_docs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shard_domain_stat_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.shard_domain_stat_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const shard_domain_stat_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const shard_domain_stat_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.shard_domain_stat_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.shard_domain_stat_trait)
    MergeFrom(*source);
  }
}

void shard_domain_stat_trait::MergeFrom(const shard_domain_stat_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.shard_domain_stat_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
  if (from.has_total_docs()) {
    set_total_docs(from.total_docs());
  }
}

void shard_domain_stat_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.shard_domain_stat_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shard_domain_stat_trait::CopyFrom(const shard_domain_stat_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.shard_domain_stat_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shard_domain_stat_trait::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->domains())) return false;
  return true;
}

void shard_domain_stat_trait::Swap(shard_domain_stat_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shard_domain_stat_trait::InternalSwap(shard_domain_stat_trait* other) {
  using std::swap;
  domains_.InternalSwap(&other->domains_);
  swap(total_docs_, other->total_docs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shard_domain_stat_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// shard_domain_stat_trait

// repeated .gogo.traits.shard_domain_stat domains = 1;
int shard_domain_stat_trait::domains_size() const {
  return domains_.size();
}
void shard_domain_stat_trait::clear_domains() {
  domains_.Clear();
}
const ::gogo::traits::shard_domain_stat& shard_domain_stat_trait::domains(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat_trait.domains)
  return domains_.Get(index);
}
::gogo::traits::shard_domain_stat* shard_domain_stat_trait::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.shard_domain_stat_trait.domains)
  return domains_.Mutable(index);
}
::gogo::traits::shard_domain_stat* shard_domain_stat_trait::add_domains() {
  // @@protoc_insertion_point(field_add:gogo.traits.shard_domain_stat_trait.domains)
  return domains_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_domain_stat >*
shard_domain_stat_trait::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.shard_domain_stat_trait.domains)
  return &domains_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_domain_stat >&
shard_domain_stat_trait::domains() const {
  // @@protoc_insertion_point(field_list:gogo.traits.shard_domain_stat_trait.domains)
  return domains_;
}

// optional uint32 total_docs = 2;
bool shard_domain_stat_trait::has_total_docs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void shard_domain_stat_trait::set_has_total_docs() {
  _has_bits_[0] |= 0x00000001u;
}
void shard_domain_stat_trait::clear_has_total_docs() {
  _has_bits_[0] &= ~0x00000001u;
}
void shard_domain_stat_trait::clear_total_docs() {
  total_docs_ = 0u;
  clear_has_total_docs();
}
::google::protobuf::uint32 shard_domain_stat_trait::total_docs() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_domain_stat_trait.total_docs)
  return total_docs_;
}
void shard_domain_stat_trait::set_total_docs(::google::protobuf::uint32 value) {
  set_has_total_docs();
  total_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_domain_stat_trait.total_docs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int shard_url_stat::kUrlFieldNumber;
const int shard_url_stat::kDomainFieldNumber;
const int shard_url_stat::kPosFieldNumber;
const int shard_url_stat::kSqModelRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

shard_url_stat::shard_url_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.shard_url_stat)
}
shard_url_stat::shard_url_stat(const shard_url_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&url_, &from.url_,
    static_cast<size_t>(reinterpret_cast<char*>(&sq_model_rank_) -
    reinterpret_cast<char*>(&url_)) + sizeof(sq_model_rank_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.shard_url_stat)
}

void shard_url_stat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sq_model_rank_) -
      reinterpret_cast<char*>(&url_)) + sizeof(sq_model_rank_));
}

shard_url_stat::~shard_url_stat() {
  // @@protoc_insertion_point(destructor:gogo.traits.shard_url_stat)
  SharedDtor();
}

void shard_url_stat::SharedDtor() {
}

void shard_url_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shard_url_stat::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const shard_url_stat& shard_url_stat::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

shard_url_stat* shard_url_stat::New(::google::protobuf::Arena* arena) const {
  shard_url_stat* n = new shard_url_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shard_url_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.shard_url_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&url_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sq_model_rank_) -
        reinterpret_cast<char*>(&url_)) + sizeof(sq_model_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool shard_url_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.shard_url_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_url();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &url_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_domain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sq_model_rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_sq_model_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sq_model_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.shard_url_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.shard_url_stat)
  return false;
#undef DO_
}

void shard_url_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.shard_url_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->url(), output);
  }

  // optional uint32 domain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->domain(), output);
  }

  // optional uint32 pos = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional float sq_model_rank = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sq_model_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.shard_url_stat)
}

::google::protobuf::uint8* shard_url_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.shard_url_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->url(), target);
  }

  // optional uint32 domain = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->domain(), target);
  }

  // optional uint32 pos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // optional float sq_model_rank = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sq_model_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.shard_url_stat)
  return target;
}

size_t shard_url_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.shard_url_stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->url());
    }

    // optional uint32 domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->domain());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional float sq_model_rank = 4;
    if (has_sq_model_rank()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shard_url_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.shard_url_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const shard_url_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const shard_url_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.shard_url_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.shard_url_stat)
    MergeFrom(*source);
  }
}

void shard_url_stat::MergeFrom(const shard_url_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.shard_url_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      url_ = from.url_;
    }
    if (cached_has_bits & 0x00000002u) {
      domain_ = from.domain_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_ = from.pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      sq_model_rank_ = from.sq_model_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void shard_url_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.shard_url_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shard_url_stat::CopyFrom(const shard_url_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.shard_url_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shard_url_stat::IsInitialized() const {
  return true;
}

void shard_url_stat::Swap(shard_url_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shard_url_stat::InternalSwap(shard_url_stat* other) {
  using std::swap;
  swap(url_, other->url_);
  swap(domain_, other->domain_);
  swap(pos_, other->pos_);
  swap(sq_model_rank_, other->sq_model_rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shard_url_stat::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// shard_url_stat

// optional uint64 url = 1;
bool shard_url_stat::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void shard_url_stat::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void shard_url_stat::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void shard_url_stat::clear_url() {
  url_ = GOOGLE_ULONGLONG(0);
  clear_has_url();
}
::google::protobuf::uint64 shard_url_stat::url() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat.url)
  return url_;
}
void shard_url_stat::set_url(::google::protobuf::uint64 value) {
  set_has_url();
  url_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_url_stat.url)
}

// optional uint32 domain = 2;
bool shard_url_stat::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void shard_url_stat::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
void shard_url_stat::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
void shard_url_stat::clear_domain() {
  domain_ = 0u;
  clear_has_domain();
}
::google::protobuf::uint32 shard_url_stat::domain() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat.domain)
  return domain_;
}
void shard_url_stat::set_domain(::google::protobuf::uint32 value) {
  set_has_domain();
  domain_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_url_stat.domain)
}

// optional uint32 pos = 3;
bool shard_url_stat::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void shard_url_stat::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
void shard_url_stat::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
void shard_url_stat::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
::google::protobuf::uint32 shard_url_stat::pos() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat.pos)
  return pos_;
}
void shard_url_stat::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_url_stat.pos)
}

// optional float sq_model_rank = 4;
bool shard_url_stat::has_sq_model_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void shard_url_stat::set_has_sq_model_rank() {
  _has_bits_[0] |= 0x00000008u;
}
void shard_url_stat::clear_has_sq_model_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
void shard_url_stat::clear_sq_model_rank() {
  sq_model_rank_ = 0;
  clear_has_sq_model_rank();
}
float shard_url_stat::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat.sq_model_rank)
  return sq_model_rank_;
}
void shard_url_stat::set_sq_model_rank(float value) {
  set_has_sq_model_rank();
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.shard_url_stat.sq_model_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int shard_url_stat_trait::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

shard_url_stat_trait::shard_url_stat_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.shard_url_stat_trait)
}
shard_url_stat_trait::shard_url_stat_trait(const shard_url_stat_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.traits.shard_url_stat_trait)
}

void shard_url_stat_trait::SharedCtor() {
  _cached_size_ = 0;
}

shard_url_stat_trait::~shard_url_stat_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.shard_url_stat_trait)
  SharedDtor();
}

void shard_url_stat_trait::SharedDtor() {
}

void shard_url_stat_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shard_url_stat_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const shard_url_stat_trait& shard_url_stat_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

shard_url_stat_trait* shard_url_stat_trait::New(::google::protobuf::Arena* arena) const {
  shard_url_stat_trait* n = new shard_url_stat_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shard_url_stat_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.shard_url_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool shard_url_stat_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.shard_url_stat_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.traits.shard_url_stat urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.shard_url_stat_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.shard_url_stat_trait)
  return false;
#undef DO_
}

void shard_url_stat_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.shard_url_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.traits.shard_url_stat urls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->urls(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.shard_url_stat_trait)
}

::google::protobuf::uint8* shard_url_stat_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.shard_url_stat_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.traits.shard_url_stat urls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->urls(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.shard_url_stat_trait)
  return target;
}

size_t shard_url_stat_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.shard_url_stat_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.traits.shard_url_stat urls = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urls(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shard_url_stat_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.shard_url_stat_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const shard_url_stat_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const shard_url_stat_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.shard_url_stat_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.shard_url_stat_trait)
    MergeFrom(*source);
  }
}

void shard_url_stat_trait::MergeFrom(const shard_url_stat_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.shard_url_stat_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
}

void shard_url_stat_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.shard_url_stat_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shard_url_stat_trait::CopyFrom(const shard_url_stat_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.shard_url_stat_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shard_url_stat_trait::IsInitialized() const {
  return true;
}

void shard_url_stat_trait::Swap(shard_url_stat_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shard_url_stat_trait::InternalSwap(shard_url_stat_trait* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shard_url_stat_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// shard_url_stat_trait

// repeated .gogo.traits.shard_url_stat urls = 1;
int shard_url_stat_trait::urls_size() const {
  return urls_.size();
}
void shard_url_stat_trait::clear_urls() {
  urls_.Clear();
}
const ::gogo::traits::shard_url_stat& shard_url_stat_trait::urls(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.shard_url_stat_trait.urls)
  return urls_.Get(index);
}
::gogo::traits::shard_url_stat* shard_url_stat_trait::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.shard_url_stat_trait.urls)
  return urls_.Mutable(index);
}
::gogo::traits::shard_url_stat* shard_url_stat_trait::add_urls() {
  // @@protoc_insertion_point(field_add:gogo.traits.shard_url_stat_trait.urls)
  return urls_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_url_stat >*
shard_url_stat_trait::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.shard_url_stat_trait.urls)
  return &urls_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::shard_url_stat >&
shard_url_stat_trait::urls() const {
  // @@protoc_insertion_point(field_list:gogo.traits.shard_url_stat_trait.urls)
  return urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int infocard_features::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

infocard_features::infocard_features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.infocard_features)
}
infocard_features::infocard_features(const infocard_features& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.traits.infocard_features)
}

void infocard_features::SharedCtor() {
  _cached_size_ = 0;
}

infocard_features::~infocard_features() {
  // @@protoc_insertion_point(destructor:gogo.traits.infocard_features)
  SharedDtor();
}

void infocard_features::SharedDtor() {
}

void infocard_features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* infocard_features::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const infocard_features& infocard_features::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

infocard_features* infocard_features::New(::google::protobuf::Arena* arena) const {
  infocard_features* n = new infocard_features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void infocard_features::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.infocard_features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool infocard_features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.infocard_features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float features = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_features())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.infocard_features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.infocard_features)
  return false;
#undef DO_
}

void infocard_features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.infocard_features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float features = 1 [packed = true];
  if (this->features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _features_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->features().data(), this->features_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.infocard_features)
}

::google::protobuf::uint8* infocard_features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.infocard_features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float features = 1 [packed = true];
  if (this->features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _features_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->features_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.infocard_features)
  return target;
}

size_t infocard_features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.infocard_features)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float features = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void infocard_features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.infocard_features)
  GOOGLE_DCHECK_NE(&from, this);
  const infocard_features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const infocard_features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.infocard_features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.infocard_features)
    MergeFrom(*source);
  }
}

void infocard_features::MergeFrom(const infocard_features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.infocard_features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
}

void infocard_features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.infocard_features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void infocard_features::CopyFrom(const infocard_features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.infocard_features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool infocard_features::IsInitialized() const {
  return true;
}

void infocard_features::Swap(infocard_features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void infocard_features::InternalSwap(infocard_features* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata infocard_features::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// infocard_features

// repeated float features = 1 [packed = true];
int infocard_features::features_size() const {
  return features_.size();
}
void infocard_features::clear_features() {
  features_.Clear();
}
float infocard_features::features(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_features.features)
  return features_.Get(index);
}
void infocard_features::set_features(int index, float value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_features.features)
}
void infocard_features::add_features(float value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_features.features)
}
const ::google::protobuf::RepeatedField< float >&
infocard_features::features() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_features.features)
  return features_;
}
::google::protobuf::RepeatedField< float >*
infocard_features::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_features.features)
  return &features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int infocard_trait::kObjectsFieldNumber;
const int infocard_trait::kRanksFieldNumber;
const int infocard_trait::kPositionsFieldNumber;
const int infocard_trait::kFeaturesFieldNumber;
const int infocard_trait::kMarkupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

infocard_trait::infocard_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.infocard_trait)
}
infocard_trait::infocard_trait(const infocard_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objects_(from.objects_),
      ranks_(from.ranks_),
      positions_(from.positions_),
      features_(from.features_),
      markups_(from.markups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.traits.infocard_trait)
}

void infocard_trait::SharedCtor() {
  _cached_size_ = 0;
}

infocard_trait::~infocard_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.infocard_trait)
  SharedDtor();
}

void infocard_trait::SharedDtor() {
}

void infocard_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* infocard_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const infocard_trait& infocard_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

infocard_trait* infocard_trait::New(::google::protobuf::Arena* arena) const {
  infocard_trait* n = new infocard_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void infocard_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.infocard_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  ranks_.Clear();
  positions_.Clear();
  features_.Clear();
  markups_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool infocard_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.infocard_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 objects = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_objects())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_objects())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ranks = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ranks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_ranks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 positions = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_positions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.traits.infocard_features features = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.traits.infocard_trait.markup_source markups = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::gogo::traits::infocard_trait_markup_source_IsValid(value)) {
              add_markups(static_cast< ::gogo::traits::infocard_trait_markup_source >(value));
            } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
            }
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::traits::infocard_trait_markup_source_IsValid(value)) {
            add_markups(static_cast< ::gogo::traits::infocard_trait_markup_source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.infocard_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.infocard_trait)
  return false;
#undef DO_
}

void infocard_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.infocard_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 objects = 1 [packed = true];
  if (this->objects_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _objects_cached_byte_size_));
  }
  for (int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->objects(i), output);
  }

  // repeated float ranks = 2 [packed = true];
  if (this->ranks_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ranks_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ranks().data(), this->ranks_size(), output);
  }

  // repeated int32 positions = 3 [packed = true];
  if (this->positions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _positions_cached_byte_size_));
  }
  for (int i = 0, n = this->positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->positions(i), output);
  }

  // repeated .gogo.traits.infocard_features features = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->features(static_cast<int>(i)), output);
  }

  // repeated .gogo.traits.infocard_trait.markup_source markups = 5 [packed = true];
  if (this->markups_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_markups_cached_byte_size_));
  }
  for (int i = 0, n = this->markups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->markups(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.infocard_trait)
}

::google::protobuf::uint8* infocard_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.infocard_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 objects = 1 [packed = true];
  if (this->objects_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _objects_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->objects_, target);
  }

  // repeated float ranks = 2 [packed = true];
  if (this->ranks_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ranks_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ranks_, target);
  }

  // repeated int32 positions = 3 [packed = true];
  if (this->positions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _positions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->positions_, target);
  }

  // repeated .gogo.traits.infocard_features features = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->features(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.traits.infocard_trait.markup_source markups = 5 [packed = true];
  if (this->markups_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _markups_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->markups_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.infocard_trait)
  return target;
}

size_t infocard_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.infocard_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 objects = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->objects_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _objects_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float ranks = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->ranks_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ranks_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 positions = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->positions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _positions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .gogo.traits.infocard_features features = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  // repeated .gogo.traits.infocard_trait.markup_source markups = 5 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->markups_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->markups(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _markups_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void infocard_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.infocard_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const infocard_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const infocard_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.infocard_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.infocard_trait)
    MergeFrom(*source);
  }
}

void infocard_trait::MergeFrom(const infocard_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.infocard_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  ranks_.MergeFrom(from.ranks_);
  positions_.MergeFrom(from.positions_);
  features_.MergeFrom(from.features_);
  markups_.MergeFrom(from.markups_);
}

void infocard_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.infocard_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void infocard_trait::CopyFrom(const infocard_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.infocard_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool infocard_trait::IsInitialized() const {
  return true;
}

void infocard_trait::Swap(infocard_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void infocard_trait::InternalSwap(infocard_trait* other) {
  using std::swap;
  objects_.InternalSwap(&other->objects_);
  ranks_.InternalSwap(&other->ranks_);
  positions_.InternalSwap(&other->positions_);
  features_.InternalSwap(&other->features_);
  markups_.InternalSwap(&other->markups_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata infocard_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// infocard_trait

// repeated uint64 objects = 1 [packed = true];
int infocard_trait::objects_size() const {
  return objects_.size();
}
void infocard_trait::clear_objects() {
  objects_.Clear();
}
::google::protobuf::uint64 infocard_trait::objects(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.objects)
  return objects_.Get(index);
}
void infocard_trait::set_objects(int index, ::google::protobuf::uint64 value) {
  objects_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_trait.objects)
}
void infocard_trait::add_objects(::google::protobuf::uint64 value) {
  objects_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.objects)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
infocard_trait::objects() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.objects)
  return objects_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
infocard_trait::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.objects)
  return &objects_;
}

// repeated float ranks = 2 [packed = true];
int infocard_trait::ranks_size() const {
  return ranks_.size();
}
void infocard_trait::clear_ranks() {
  ranks_.Clear();
}
float infocard_trait::ranks(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.ranks)
  return ranks_.Get(index);
}
void infocard_trait::set_ranks(int index, float value) {
  ranks_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_trait.ranks)
}
void infocard_trait::add_ranks(float value) {
  ranks_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.ranks)
}
const ::google::protobuf::RepeatedField< float >&
infocard_trait::ranks() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.ranks)
  return ranks_;
}
::google::protobuf::RepeatedField< float >*
infocard_trait::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.ranks)
  return &ranks_;
}

// repeated int32 positions = 3 [packed = true];
int infocard_trait::positions_size() const {
  return positions_.size();
}
void infocard_trait::clear_positions() {
  positions_.Clear();
}
::google::protobuf::int32 infocard_trait::positions(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.positions)
  return positions_.Get(index);
}
void infocard_trait::set_positions(int index, ::google::protobuf::int32 value) {
  positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_trait.positions)
}
void infocard_trait::add_positions(::google::protobuf::int32 value) {
  positions_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.positions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
infocard_trait::positions() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.positions)
  return positions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
infocard_trait::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.positions)
  return &positions_;
}

// repeated .gogo.traits.infocard_features features = 4;
int infocard_trait::features_size() const {
  return features_.size();
}
void infocard_trait::clear_features() {
  features_.Clear();
}
const ::gogo::traits::infocard_features& infocard_trait::features(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.features)
  return features_.Get(index);
}
::gogo::traits::infocard_features* infocard_trait::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.infocard_trait.features)
  return features_.Mutable(index);
}
::gogo::traits::infocard_features* infocard_trait::add_features() {
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::infocard_features >*
infocard_trait::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::infocard_features >&
infocard_trait::features() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.features)
  return features_;
}

// repeated .gogo.traits.infocard_trait.markup_source markups = 5 [packed = true];
int infocard_trait::markups_size() const {
  return markups_.size();
}
void infocard_trait::clear_markups() {
  markups_.Clear();
}
::gogo::traits::infocard_trait_markup_source infocard_trait::markups(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.infocard_trait.markups)
  return static_cast< ::gogo::traits::infocard_trait_markup_source >(markups_.Get(index));
}
void infocard_trait::set_markups(int index, ::gogo::traits::infocard_trait_markup_source value) {
  assert(::gogo::traits::infocard_trait_markup_source_IsValid(value));
  markups_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.infocard_trait.markups)
}
void infocard_trait::add_markups(::gogo::traits::infocard_trait_markup_source value) {
  assert(::gogo::traits::infocard_trait_markup_source_IsValid(value));
  markups_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.infocard_trait.markups)
}
const ::google::protobuf::RepeatedField<int>&
infocard_trait::markups() const {
  // @@protoc_insertion_point(field_list:gogo.traits.infocard_trait.markups)
  return markups_;
}
::google::protobuf::RepeatedField<int>*
infocard_trait::mutable_markups() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.infocard_trait.markups)
  return &markups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int companies_doc::kHashFieldNumber;
const int companies_doc::kRankFieldNumber;
const int companies_doc::kPositionFieldNumber;
const int companies_doc::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

companies_doc::companies_doc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.companies_doc)
}
companies_doc::companies_doc(const companies_doc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.companies_doc)
}

void companies_doc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(position_));
}

companies_doc::~companies_doc() {
  // @@protoc_insertion_point(destructor:gogo.traits.companies_doc)
  SharedDtor();
}

void companies_doc::SharedDtor() {
}

void companies_doc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* companies_doc::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const companies_doc& companies_doc::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

companies_doc* companies_doc::New(::google::protobuf::Arena* arena) const {
  companies_doc* n = new companies_doc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void companies_doc::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.companies_doc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool companies_doc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.companies_doc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float features = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_features())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.companies_doc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.companies_doc)
  return false;
#undef DO_
}

void companies_doc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.companies_doc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rank(), output);
  }

  // optional int32 position = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // repeated float features = 4 [packed = true];
  if (this->features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _features_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->features().data(), this->features_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.companies_doc)
}

::google::protobuf::uint8* companies_doc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.companies_doc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rank(), target);
  }

  // optional int32 position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // repeated float features = 4 [packed = true];
  if (this->features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _features_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->features_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.companies_doc)
  return target;
}

size_t companies_doc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.companies_doc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float features = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

    // optional float rank = 2;
    if (has_rank()) {
      total_size += 1 + 4;
    }

    // optional int32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void companies_doc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.companies_doc)
  GOOGLE_DCHECK_NE(&from, this);
  const companies_doc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const companies_doc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.companies_doc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.companies_doc)
    MergeFrom(*source);
  }
}

void companies_doc::MergeFrom(const companies_doc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.companies_doc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void companies_doc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.companies_doc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void companies_doc::CopyFrom(const companies_doc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.companies_doc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool companies_doc::IsInitialized() const {
  return true;
}

void companies_doc::Swap(companies_doc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void companies_doc::InternalSwap(companies_doc* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  swap(hash_, other->hash_);
  swap(rank_, other->rank_);
  swap(position_, other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata companies_doc::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// companies_doc

// optional uint64 hash = 1;
bool companies_doc::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void companies_doc::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void companies_doc::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void companies_doc::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
::google::protobuf::uint64 companies_doc::hash() const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_doc.hash)
  return hash_;
}
void companies_doc::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.companies_doc.hash)
}

// optional float rank = 2;
bool companies_doc::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void companies_doc::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void companies_doc::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void companies_doc::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float companies_doc::rank() const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_doc.rank)
  return rank_;
}
void companies_doc::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.companies_doc.rank)
}

// optional int32 position = 3;
bool companies_doc::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void companies_doc::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void companies_doc::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void companies_doc::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 companies_doc::position() const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_doc.position)
  return position_;
}
void companies_doc::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.companies_doc.position)
}

// repeated float features = 4 [packed = true];
int companies_doc::features_size() const {
  return features_.size();
}
void companies_doc::clear_features() {
  features_.Clear();
}
float companies_doc::features(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_doc.features)
  return features_.Get(index);
}
void companies_doc::set_features(int index, float value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.traits.companies_doc.features)
}
void companies_doc::add_features(float value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.traits.companies_doc.features)
}
const ::google::protobuf::RepeatedField< float >&
companies_doc::features() const {
  // @@protoc_insertion_point(field_list:gogo.traits.companies_doc.features)
  return features_;
}
::google::protobuf::RepeatedField< float >*
companies_doc::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.companies_doc.features)
  return &features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int companies_trait::kDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

companies_trait::companies_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.companies_trait)
}
companies_trait::companies_trait(const companies_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      docs_(from.docs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.traits.companies_trait)
}

void companies_trait::SharedCtor() {
  _cached_size_ = 0;
}

companies_trait::~companies_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.companies_trait)
  SharedDtor();
}

void companies_trait::SharedDtor() {
}

void companies_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* companies_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const companies_trait& companies_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

companies_trait* companies_trait::New(::google::protobuf::Arena* arena) const {
  companies_trait* n = new companies_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void companies_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.companies_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool companies_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.companies_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.traits.companies_doc docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.companies_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.companies_trait)
  return false;
#undef DO_
}

void companies_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.companies_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.traits.companies_doc docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.companies_trait)
}

::google::protobuf::uint8* companies_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.companies_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.traits.companies_doc docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->docs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.companies_trait)
  return target;
}

size_t companies_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.companies_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.traits.companies_doc docs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void companies_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.companies_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const companies_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const companies_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.companies_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.companies_trait)
    MergeFrom(*source);
  }
}

void companies_trait::MergeFrom(const companies_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.companies_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
}

void companies_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.companies_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void companies_trait::CopyFrom(const companies_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.companies_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool companies_trait::IsInitialized() const {
  return true;
}

void companies_trait::Swap(companies_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void companies_trait::InternalSwap(companies_trait* other) {
  using std::swap;
  docs_.InternalSwap(&other->docs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata companies_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// companies_trait

// repeated .gogo.traits.companies_doc docs = 1;
int companies_trait::docs_size() const {
  return docs_.size();
}
void companies_trait::clear_docs() {
  docs_.Clear();
}
const ::gogo::traits::companies_doc& companies_trait::docs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.companies_trait.docs)
  return docs_.Get(index);
}
::gogo::traits::companies_doc* companies_trait::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.companies_trait.docs)
  return docs_.Mutable(index);
}
::gogo::traits::companies_doc* companies_trait::add_docs() {
  // @@protoc_insertion_point(field_add:gogo.traits.companies_trait.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::companies_doc >*
companies_trait::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.companies_trait.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::companies_doc >&
companies_trait::docs() const {
  // @@protoc_insertion_point(field_list:gogo.traits.companies_trait.docs)
  return docs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int color_stat::kColorIdFieldNumber;
const int color_stat::kColorPopularityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

color_stat::color_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.color_stat)
}
color_stat::color_stat(const color_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_id_, &from.color_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_popularity_) -
    reinterpret_cast<char*>(&color_id_)) + sizeof(color_popularity_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.color_stat)
}

void color_stat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&color_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_popularity_) -
      reinterpret_cast<char*>(&color_id_)) + sizeof(color_popularity_));
}

color_stat::~color_stat() {
  // @@protoc_insertion_point(destructor:gogo.traits.color_stat)
  SharedDtor();
}

void color_stat::SharedDtor() {
}

void color_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* color_stat::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const color_stat& color_stat::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

color_stat* color_stat::New(::google::protobuf::Arena* arena) const {
  color_stat* n = new color_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void color_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.color_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&color_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_popularity_) -
        reinterpret_cast<char*>(&color_id_)) + sizeof(color_popularity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool color_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.color_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 color_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_color_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 color_popularity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_color_popularity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_popularity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.color_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.color_stat)
  return false;
#undef DO_
}

void color_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.color_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 color_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color_id(), output);
  }

  // required int32 color_popularity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color_popularity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.color_stat)
}

::google::protobuf::uint8* color_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.color_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 color_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color_id(), target);
  }

  // required int32 color_popularity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color_popularity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.color_stat)
  return target;
}

size_t color_stat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.traits.color_stat)
  size_t total_size = 0;

  if (has_color_id()) {
    // required int32 color_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_id());
  }

  if (has_color_popularity()) {
    // required int32 color_popularity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_popularity());
  }

  return total_size;
}
size_t color_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.color_stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 color_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_id());

    // required int32 color_popularity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_popularity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void color_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.color_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const color_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const color_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.color_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.color_stat)
    MergeFrom(*source);
  }
}

void color_stat::MergeFrom(const color_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.color_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      color_id_ = from.color_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      color_popularity_ = from.color_popularity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void color_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.color_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void color_stat::CopyFrom(const color_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.color_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool color_stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void color_stat::Swap(color_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void color_stat::InternalSwap(color_stat* other) {
  using std::swap;
  swap(color_id_, other->color_id_);
  swap(color_popularity_, other->color_popularity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata color_stat::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// color_stat

// required int32 color_id = 1;
bool color_stat::has_color_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void color_stat::set_has_color_id() {
  _has_bits_[0] |= 0x00000001u;
}
void color_stat::clear_has_color_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void color_stat::clear_color_id() {
  color_id_ = 0;
  clear_has_color_id();
}
::google::protobuf::int32 color_stat::color_id() const {
  // @@protoc_insertion_point(field_get:gogo.traits.color_stat.color_id)
  return color_id_;
}
void color_stat::set_color_id(::google::protobuf::int32 value) {
  set_has_color_id();
  color_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.color_stat.color_id)
}

// required int32 color_popularity = 2;
bool color_stat::has_color_popularity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void color_stat::set_has_color_popularity() {
  _has_bits_[0] |= 0x00000002u;
}
void color_stat::clear_has_color_popularity() {
  _has_bits_[0] &= ~0x00000002u;
}
void color_stat::clear_color_popularity() {
  color_popularity_ = 0;
  clear_has_color_popularity();
}
::google::protobuf::int32 color_stat::color_popularity() const {
  // @@protoc_insertion_point(field_get:gogo.traits.color_stat.color_popularity)
  return color_popularity_;
}
void color_stat::set_color_popularity(::google::protobuf::int32 value) {
  set_has_color_popularity();
  color_popularity_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.color_stat.color_popularity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int category_stat::kCategoryIdFieldNumber;
const int category_stat::kCategoryPopularityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

category_stat::category_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.category_stat)
}
category_stat::category_stat(const category_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_id_, &from.category_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_popularity_) -
    reinterpret_cast<char*>(&category_id_)) + sizeof(category_popularity_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.category_stat)
}

void category_stat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&category_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_popularity_) -
      reinterpret_cast<char*>(&category_id_)) + sizeof(category_popularity_));
}

category_stat::~category_stat() {
  // @@protoc_insertion_point(destructor:gogo.traits.category_stat)
  SharedDtor();
}

void category_stat::SharedDtor() {
}

void category_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* category_stat::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const category_stat& category_stat::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

category_stat* category_stat::New(::google::protobuf::Arena* arena) const {
  category_stat* n = new category_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void category_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.category_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&category_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_popularity_) -
        reinterpret_cast<char*>(&category_id_)) + sizeof(category_popularity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool category_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.category_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 category_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 category_popularity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category_popularity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_popularity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.category_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.category_stat)
  return false;
#undef DO_
}

void category_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.category_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 category_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->category_id(), output);
  }

  // required int32 category_popularity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_popularity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.category_stat)
}

::google::protobuf::uint8* category_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.category_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 category_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->category_id(), target);
  }

  // required int32 category_popularity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category_popularity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.category_stat)
  return target;
}

size_t category_stat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.traits.category_stat)
  size_t total_size = 0;

  if (has_category_id()) {
    // required int64 category_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->category_id());
  }

  if (has_category_popularity()) {
    // required int32 category_popularity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_popularity());
  }

  return total_size;
}
size_t category_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.category_stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 category_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->category_id());

    // required int32 category_popularity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_popularity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void category_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.category_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const category_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const category_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.category_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.category_stat)
    MergeFrom(*source);
  }
}

void category_stat::MergeFrom(const category_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.category_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      category_popularity_ = from.category_popularity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void category_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.category_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void category_stat::CopyFrom(const category_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.category_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool category_stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void category_stat::Swap(category_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void category_stat::InternalSwap(category_stat* other) {
  using std::swap;
  swap(category_id_, other->category_id_);
  swap(category_popularity_, other->category_popularity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata category_stat::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// category_stat

// required int64 category_id = 1;
bool category_stat::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void category_stat::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
void category_stat::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void category_stat::clear_category_id() {
  category_id_ = GOOGLE_LONGLONG(0);
  clear_has_category_id();
}
::google::protobuf::int64 category_stat::category_id() const {
  // @@protoc_insertion_point(field_get:gogo.traits.category_stat.category_id)
  return category_id_;
}
void category_stat::set_category_id(::google::protobuf::int64 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.category_stat.category_id)
}

// required int32 category_popularity = 2;
bool category_stat::has_category_popularity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void category_stat::set_has_category_popularity() {
  _has_bits_[0] |= 0x00000002u;
}
void category_stat::clear_has_category_popularity() {
  _has_bits_[0] &= ~0x00000002u;
}
void category_stat::clear_category_popularity() {
  category_popularity_ = 0;
  clear_has_category_popularity();
}
::google::protobuf::int32 category_stat::category_popularity() const {
  // @@protoc_insertion_point(field_get:gogo.traits.category_stat.category_popularity)
  return category_popularity_;
}
void category_stat::set_category_popularity(::google::protobuf::int32 value) {
  set_has_category_popularity();
  category_popularity_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.category_stat.category_popularity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int size_stat::kSizeIdFieldNumber;
const int size_stat::kSizeTypeIdFieldNumber;
const int size_stat::kSizePopularityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

size_stat::size_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.size_stat)
}
size_stat::size_stat(const size_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_id_, &from.size_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_popularity_) -
    reinterpret_cast<char*>(&size_id_)) + sizeof(size_popularity_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.size_stat)
}

void size_stat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&size_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_popularity_) -
      reinterpret_cast<char*>(&size_id_)) + sizeof(size_popularity_));
}

size_stat::~size_stat() {
  // @@protoc_insertion_point(destructor:gogo.traits.size_stat)
  SharedDtor();
}

void size_stat::SharedDtor() {
}

void size_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* size_stat::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const size_stat& size_stat::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

size_stat* size_stat::New(::google::protobuf::Arena* arena) const {
  size_stat* n = new size_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void size_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.size_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&size_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_popularity_) -
        reinterpret_cast<char*>(&size_id_)) + sizeof(size_popularity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool size_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.size_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_size_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size_type_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size_popularity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_size_popularity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_popularity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.size_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.size_stat)
  return false;
#undef DO_
}

void size_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.size_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 size_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size_id(), output);
  }

  // required int32 size_type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size_type_id(), output);
  }

  // required int32 size_popularity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size_popularity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.size_stat)
}

::google::protobuf::uint8* size_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.size_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 size_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size_id(), target);
  }

  // required int32 size_type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size_type_id(), target);
  }

  // required int32 size_popularity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size_popularity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.size_stat)
  return target;
}

size_t size_stat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.traits.size_stat)
  size_t total_size = 0;

  if (has_size_id()) {
    // required int32 size_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_id());
  }

  if (has_size_type_id()) {
    // required int32 size_type_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_type_id());
  }

  if (has_size_popularity()) {
    // required int32 size_popularity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_popularity());
  }

  return total_size;
}
size_t size_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.size_stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 size_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_id());

    // required int32 size_type_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_type_id());

    // required int32 size_popularity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_popularity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void size_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.size_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const size_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const size_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.size_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.size_stat)
    MergeFrom(*source);
  }
}

void size_stat::MergeFrom(const size_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.size_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      size_id_ = from.size_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_type_id_ = from.size_type_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_popularity_ = from.size_popularity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void size_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.size_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void size_stat::CopyFrom(const size_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.size_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool size_stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void size_stat::Swap(size_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void size_stat::InternalSwap(size_stat* other) {
  using std::swap;
  swap(size_id_, other->size_id_);
  swap(size_type_id_, other->size_type_id_);
  swap(size_popularity_, other->size_popularity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata size_stat::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// size_stat

// required int32 size_id = 1;
bool size_stat::has_size_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void size_stat::set_has_size_id() {
  _has_bits_[0] |= 0x00000001u;
}
void size_stat::clear_has_size_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void size_stat::clear_size_id() {
  size_id_ = 0;
  clear_has_size_id();
}
::google::protobuf::int32 size_stat::size_id() const {
  // @@protoc_insertion_point(field_get:gogo.traits.size_stat.size_id)
  return size_id_;
}
void size_stat::set_size_id(::google::protobuf::int32 value) {
  set_has_size_id();
  size_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.size_stat.size_id)
}

// required int32 size_type_id = 2;
bool size_stat::has_size_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void size_stat::set_has_size_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
void size_stat::clear_has_size_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void size_stat::clear_size_type_id() {
  size_type_id_ = 0;
  clear_has_size_type_id();
}
::google::protobuf::int32 size_stat::size_type_id() const {
  // @@protoc_insertion_point(field_get:gogo.traits.size_stat.size_type_id)
  return size_type_id_;
}
void size_stat::set_size_type_id(::google::protobuf::int32 value) {
  set_has_size_type_id();
  size_type_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.size_stat.size_type_id)
}

// required int32 size_popularity = 3;
bool size_stat::has_size_popularity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void size_stat::set_has_size_popularity() {
  _has_bits_[0] |= 0x00000004u;
}
void size_stat::clear_has_size_popularity() {
  _has_bits_[0] &= ~0x00000004u;
}
void size_stat::clear_size_popularity() {
  size_popularity_ = 0;
  clear_has_size_popularity();
}
::google::protobuf::int32 size_stat::size_popularity() const {
  // @@protoc_insertion_point(field_get:gogo.traits.size_stat.size_popularity)
  return size_popularity_;
}
void size_stat::set_size_popularity(::google::protobuf::int32 value) {
  set_has_size_popularity();
  size_popularity_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.size_stat.size_popularity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int torg_china_trait::kPriceMinFieldNumber;
const int torg_china_trait::kPriceMaxFieldNumber;
const int torg_china_trait::kCategoryStatL0FieldNumber;
const int torg_china_trait::kCategoryStatL1FieldNumber;
const int torg_china_trait::kCategoryStatL2FieldNumber;
const int torg_china_trait::kColorsFieldNumber;
const int torg_china_trait::kSizesFieldNumber;
const int torg_china_trait::kPbonusPriceMinFieldNumber;
const int torg_china_trait::kPbonusPriceMaxFieldNumber;
const int torg_china_trait::kPriceUsdMinFieldNumber;
const int torg_china_trait::kPriceUsdMaxFieldNumber;
const int torg_china_trait::kPriceUsdWithShipMinFieldNumber;
const int torg_china_trait::kPriceUsdWithShipMaxFieldNumber;
const int torg_china_trait::kPriceUsdWithCodShipMinFieldNumber;
const int torg_china_trait::kPriceUsdWithCodShipMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

torg_china_trait::torg_china_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.torg_china_trait)
}
torg_china_trait::torg_china_trait(const torg_china_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      category_stat_l0_(from.category_stat_l0_),
      category_stat_l1_(from.category_stat_l1_),
      category_stat_l2_(from.category_stat_l2_),
      colors_(from.colors_),
      sizes_(from.sizes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_min_, &from.price_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_usd_with_cod_ship_max_) -
    reinterpret_cast<char*>(&price_min_)) + sizeof(price_usd_with_cod_ship_max_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.torg_china_trait)
}

void torg_china_trait::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&price_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_usd_with_cod_ship_max_) -
      reinterpret_cast<char*>(&price_min_)) + sizeof(price_usd_with_cod_ship_max_));
}

torg_china_trait::~torg_china_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.torg_china_trait)
  SharedDtor();
}

void torg_china_trait::SharedDtor() {
}

void torg_china_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* torg_china_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const torg_china_trait& torg_china_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

torg_china_trait* torg_china_trait::New(::google::protobuf::Arena* arena) const {
  torg_china_trait* n = new torg_china_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void torg_china_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.torg_china_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_stat_l0_.Clear();
  category_stat_l1_.Clear();
  category_stat_l2_.Clear();
  colors_.Clear();
  sizes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&price_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_usd_with_ship_max_) -
        reinterpret_cast<char*>(&price_min_)) + sizeof(price_usd_with_ship_max_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&price_usd_with_cod_ship_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_usd_with_cod_ship_max_) -
        reinterpret_cast<char*>(&price_usd_with_cod_ship_min_)) + sizeof(price_usd_with_cod_ship_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool torg_china_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.torg_china_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 price_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_price_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.traits.category_stat category_stat_l0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_stat_l0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.traits.category_stat category_stat_l1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_stat_l1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.traits.category_stat category_stat_l2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_stat_l2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.traits.color_stat colors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_colors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.traits.size_stat sizes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sizes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pbonus_price_min = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_pbonus_price_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pbonus_price_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pbonus_price_max = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_pbonus_price_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pbonus_price_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_usd_min = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_price_usd_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_usd_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_usd_max = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_price_usd_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_usd_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_usd_with_ship_min = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_price_usd_with_ship_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_usd_with_ship_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_usd_with_ship_max = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_price_usd_with_ship_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_usd_with_ship_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_usd_with_cod_ship_min = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_price_usd_with_cod_ship_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_usd_with_cod_ship_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_usd_with_cod_ship_max = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_price_usd_with_cod_ship_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_usd_with_cod_ship_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.torg_china_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.torg_china_trait)
  return false;
#undef DO_
}

void torg_china_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.torg_china_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 price_min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->price_min(), output);
  }

  // optional int32 price_max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_max(), output);
  }

  // repeated .gogo.traits.category_stat category_stat_l0 = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_stat_l0_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->category_stat_l0(static_cast<int>(i)), output);
  }

  // repeated .gogo.traits.category_stat category_stat_l1 = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_stat_l1_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->category_stat_l1(static_cast<int>(i)), output);
  }

  // repeated .gogo.traits.category_stat category_stat_l2 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_stat_l2_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->category_stat_l2(static_cast<int>(i)), output);
  }

  // repeated .gogo.traits.color_stat colors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->colors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->colors(static_cast<int>(i)), output);
  }

  // repeated .gogo.traits.size_stat sizes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sizes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sizes(static_cast<int>(i)), output);
  }

  // optional int32 pbonus_price_min = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pbonus_price_min(), output);
  }

  // optional int32 pbonus_price_max = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pbonus_price_max(), output);
  }

  // optional int32 price_usd_min = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->price_usd_min(), output);
  }

  // optional int32 price_usd_max = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->price_usd_max(), output);
  }

  // optional int32 price_usd_with_ship_min = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->price_usd_with_ship_min(), output);
  }

  // optional int32 price_usd_with_ship_max = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->price_usd_with_ship_max(), output);
  }

  // optional int32 price_usd_with_cod_ship_min = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->price_usd_with_cod_ship_min(), output);
  }

  // optional int32 price_usd_with_cod_ship_max = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->price_usd_with_cod_ship_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.torg_china_trait)
}

::google::protobuf::uint8* torg_china_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.torg_china_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 price_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->price_min(), target);
  }

  // optional int32 price_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_max(), target);
  }

  // repeated .gogo.traits.category_stat category_stat_l0 = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_stat_l0_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->category_stat_l0(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.traits.category_stat category_stat_l1 = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_stat_l1_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->category_stat_l1(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.traits.category_stat category_stat_l2 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_stat_l2_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->category_stat_l2(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.traits.color_stat colors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->colors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->colors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.traits.size_stat sizes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sizes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->sizes(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 pbonus_price_min = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pbonus_price_min(), target);
  }

  // optional int32 pbonus_price_max = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pbonus_price_max(), target);
  }

  // optional int32 price_usd_min = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->price_usd_min(), target);
  }

  // optional int32 price_usd_max = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->price_usd_max(), target);
  }

  // optional int32 price_usd_with_ship_min = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->price_usd_with_ship_min(), target);
  }

  // optional int32 price_usd_with_ship_max = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->price_usd_with_ship_max(), target);
  }

  // optional int32 price_usd_with_cod_ship_min = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->price_usd_with_cod_ship_min(), target);
  }

  // optional int32 price_usd_with_cod_ship_max = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->price_usd_with_cod_ship_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.torg_china_trait)
  return target;
}

size_t torg_china_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.torg_china_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.traits.category_stat category_stat_l0 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->category_stat_l0_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category_stat_l0(static_cast<int>(i)));
    }
  }

  // repeated .gogo.traits.category_stat category_stat_l1 = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->category_stat_l1_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category_stat_l1(static_cast<int>(i)));
    }
  }

  // repeated .gogo.traits.category_stat category_stat_l2 = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->category_stat_l2_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category_stat_l2(static_cast<int>(i)));
    }
  }

  // repeated .gogo.traits.color_stat colors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->colors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colors(static_cast<int>(i)));
    }
  }

  // repeated .gogo.traits.size_stat sizes = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->sizes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sizes(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 price_min = 1;
    if (has_price_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_min());
    }

    // optional int32 price_max = 2;
    if (has_price_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_max());
    }

    // optional int32 pbonus_price_min = 8;
    if (has_pbonus_price_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pbonus_price_min());
    }

    // optional int32 pbonus_price_max = 9;
    if (has_pbonus_price_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pbonus_price_max());
    }

    // optional int32 price_usd_min = 10;
    if (has_price_usd_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_usd_min());
    }

    // optional int32 price_usd_max = 11;
    if (has_price_usd_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_usd_max());
    }

    // optional int32 price_usd_with_ship_min = 12;
    if (has_price_usd_with_ship_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_usd_with_ship_min());
    }

    // optional int32 price_usd_with_ship_max = 13;
    if (has_price_usd_with_ship_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_usd_with_ship_max());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 price_usd_with_cod_ship_min = 14;
    if (has_price_usd_with_cod_ship_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_usd_with_cod_ship_min());
    }

    // optional int32 price_usd_with_cod_ship_max = 15;
    if (has_price_usd_with_cod_ship_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_usd_with_cod_ship_max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void torg_china_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.torg_china_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const torg_china_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const torg_china_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.torg_china_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.torg_china_trait)
    MergeFrom(*source);
  }
}

void torg_china_trait::MergeFrom(const torg_china_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.torg_china_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_stat_l0_.MergeFrom(from.category_stat_l0_);
  category_stat_l1_.MergeFrom(from.category_stat_l1_);
  category_stat_l2_.MergeFrom(from.category_stat_l2_);
  colors_.MergeFrom(from.colors_);
  sizes_.MergeFrom(from.sizes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      price_min_ = from.price_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      price_max_ = from.price_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      pbonus_price_min_ = from.pbonus_price_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      pbonus_price_max_ = from.pbonus_price_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_usd_min_ = from.price_usd_min_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_usd_max_ = from.price_usd_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      price_usd_with_ship_min_ = from.price_usd_with_ship_min_;
    }
    if (cached_has_bits & 0x00000080u) {
      price_usd_with_ship_max_ = from.price_usd_with_ship_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      price_usd_with_cod_ship_min_ = from.price_usd_with_cod_ship_min_;
    }
    if (cached_has_bits & 0x00000200u) {
      price_usd_with_cod_ship_max_ = from.price_usd_with_cod_ship_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void torg_china_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.torg_china_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void torg_china_trait::CopyFrom(const torg_china_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.torg_china_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool torg_china_trait::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->category_stat_l0())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->category_stat_l1())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->category_stat_l2())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->colors())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sizes())) return false;
  return true;
}

void torg_china_trait::Swap(torg_china_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void torg_china_trait::InternalSwap(torg_china_trait* other) {
  using std::swap;
  category_stat_l0_.InternalSwap(&other->category_stat_l0_);
  category_stat_l1_.InternalSwap(&other->category_stat_l1_);
  category_stat_l2_.InternalSwap(&other->category_stat_l2_);
  colors_.InternalSwap(&other->colors_);
  sizes_.InternalSwap(&other->sizes_);
  swap(price_min_, other->price_min_);
  swap(price_max_, other->price_max_);
  swap(pbonus_price_min_, other->pbonus_price_min_);
  swap(pbonus_price_max_, other->pbonus_price_max_);
  swap(price_usd_min_, other->price_usd_min_);
  swap(price_usd_max_, other->price_usd_max_);
  swap(price_usd_with_ship_min_, other->price_usd_with_ship_min_);
  swap(price_usd_with_ship_max_, other->price_usd_with_ship_max_);
  swap(price_usd_with_cod_ship_min_, other->price_usd_with_cod_ship_min_);
  swap(price_usd_with_cod_ship_max_, other->price_usd_with_cod_ship_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata torg_china_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// torg_china_trait

// optional int32 price_min = 1;
bool torg_china_trait::has_price_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void torg_china_trait::set_has_price_min() {
  _has_bits_[0] |= 0x00000001u;
}
void torg_china_trait::clear_has_price_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void torg_china_trait::clear_price_min() {
  price_min_ = 0;
  clear_has_price_min();
}
::google::protobuf::int32 torg_china_trait::price_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_min)
  return price_min_;
}
void torg_china_trait::set_price_min(::google::protobuf::int32 value) {
  set_has_price_min();
  price_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_min)
}

// optional int32 price_max = 2;
bool torg_china_trait::has_price_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void torg_china_trait::set_has_price_max() {
  _has_bits_[0] |= 0x00000002u;
}
void torg_china_trait::clear_has_price_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void torg_china_trait::clear_price_max() {
  price_max_ = 0;
  clear_has_price_max();
}
::google::protobuf::int32 torg_china_trait::price_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_max)
  return price_max_;
}
void torg_china_trait::set_price_max(::google::protobuf::int32 value) {
  set_has_price_max();
  price_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_max)
}

// repeated .gogo.traits.category_stat category_stat_l0 = 3;
int torg_china_trait::category_stat_l0_size() const {
  return category_stat_l0_.size();
}
void torg_china_trait::clear_category_stat_l0() {
  category_stat_l0_.Clear();
}
const ::gogo::traits::category_stat& torg_china_trait::category_stat_l0(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.category_stat_l0)
  return category_stat_l0_.Get(index);
}
::gogo::traits::category_stat* torg_china_trait::mutable_category_stat_l0(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.category_stat_l0)
  return category_stat_l0_.Mutable(index);
}
::gogo::traits::category_stat* torg_china_trait::add_category_stat_l0() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.category_stat_l0)
  return category_stat_l0_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
torg_china_trait::mutable_category_stat_l0() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.category_stat_l0)
  return &category_stat_l0_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
torg_china_trait::category_stat_l0() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.category_stat_l0)
  return category_stat_l0_;
}

// repeated .gogo.traits.category_stat category_stat_l1 = 4;
int torg_china_trait::category_stat_l1_size() const {
  return category_stat_l1_.size();
}
void torg_china_trait::clear_category_stat_l1() {
  category_stat_l1_.Clear();
}
const ::gogo::traits::category_stat& torg_china_trait::category_stat_l1(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.category_stat_l1)
  return category_stat_l1_.Get(index);
}
::gogo::traits::category_stat* torg_china_trait::mutable_category_stat_l1(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.category_stat_l1)
  return category_stat_l1_.Mutable(index);
}
::gogo::traits::category_stat* torg_china_trait::add_category_stat_l1() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.category_stat_l1)
  return category_stat_l1_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
torg_china_trait::mutable_category_stat_l1() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.category_stat_l1)
  return &category_stat_l1_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
torg_china_trait::category_stat_l1() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.category_stat_l1)
  return category_stat_l1_;
}

// repeated .gogo.traits.category_stat category_stat_l2 = 5;
int torg_china_trait::category_stat_l2_size() const {
  return category_stat_l2_.size();
}
void torg_china_trait::clear_category_stat_l2() {
  category_stat_l2_.Clear();
}
const ::gogo::traits::category_stat& torg_china_trait::category_stat_l2(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.category_stat_l2)
  return category_stat_l2_.Get(index);
}
::gogo::traits::category_stat* torg_china_trait::mutable_category_stat_l2(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.category_stat_l2)
  return category_stat_l2_.Mutable(index);
}
::gogo::traits::category_stat* torg_china_trait::add_category_stat_l2() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.category_stat_l2)
  return category_stat_l2_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >*
torg_china_trait::mutable_category_stat_l2() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.category_stat_l2)
  return &category_stat_l2_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::category_stat >&
torg_china_trait::category_stat_l2() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.category_stat_l2)
  return category_stat_l2_;
}

// repeated .gogo.traits.color_stat colors = 6;
int torg_china_trait::colors_size() const {
  return colors_.size();
}
void torg_china_trait::clear_colors() {
  colors_.Clear();
}
const ::gogo::traits::color_stat& torg_china_trait::colors(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.colors)
  return colors_.Get(index);
}
::gogo::traits::color_stat* torg_china_trait::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.colors)
  return colors_.Mutable(index);
}
::gogo::traits::color_stat* torg_china_trait::add_colors() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.colors)
  return colors_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::color_stat >*
torg_china_trait::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.colors)
  return &colors_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::color_stat >&
torg_china_trait::colors() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.colors)
  return colors_;
}

// repeated .gogo.traits.size_stat sizes = 7;
int torg_china_trait::sizes_size() const {
  return sizes_.size();
}
void torg_china_trait::clear_sizes() {
  sizes_.Clear();
}
const ::gogo::traits::size_stat& torg_china_trait::sizes(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.sizes)
  return sizes_.Get(index);
}
::gogo::traits::size_stat* torg_china_trait::mutable_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.torg_china_trait.sizes)
  return sizes_.Mutable(index);
}
::gogo::traits::size_stat* torg_china_trait::add_sizes() {
  // @@protoc_insertion_point(field_add:gogo.traits.torg_china_trait.sizes)
  return sizes_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::size_stat >*
torg_china_trait::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.torg_china_trait.sizes)
  return &sizes_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::size_stat >&
torg_china_trait::sizes() const {
  // @@protoc_insertion_point(field_list:gogo.traits.torg_china_trait.sizes)
  return sizes_;
}

// optional int32 pbonus_price_min = 8;
bool torg_china_trait::has_pbonus_price_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void torg_china_trait::set_has_pbonus_price_min() {
  _has_bits_[0] |= 0x00000004u;
}
void torg_china_trait::clear_has_pbonus_price_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void torg_china_trait::clear_pbonus_price_min() {
  pbonus_price_min_ = 0;
  clear_has_pbonus_price_min();
}
::google::protobuf::int32 torg_china_trait::pbonus_price_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.pbonus_price_min)
  return pbonus_price_min_;
}
void torg_china_trait::set_pbonus_price_min(::google::protobuf::int32 value) {
  set_has_pbonus_price_min();
  pbonus_price_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.pbonus_price_min)
}

// optional int32 pbonus_price_max = 9;
bool torg_china_trait::has_pbonus_price_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void torg_china_trait::set_has_pbonus_price_max() {
  _has_bits_[0] |= 0x00000008u;
}
void torg_china_trait::clear_has_pbonus_price_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void torg_china_trait::clear_pbonus_price_max() {
  pbonus_price_max_ = 0;
  clear_has_pbonus_price_max();
}
::google::protobuf::int32 torg_china_trait::pbonus_price_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.pbonus_price_max)
  return pbonus_price_max_;
}
void torg_china_trait::set_pbonus_price_max(::google::protobuf::int32 value) {
  set_has_pbonus_price_max();
  pbonus_price_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.pbonus_price_max)
}

// optional int32 price_usd_min = 10;
bool torg_china_trait::has_price_usd_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void torg_china_trait::set_has_price_usd_min() {
  _has_bits_[0] |= 0x00000010u;
}
void torg_china_trait::clear_has_price_usd_min() {
  _has_bits_[0] &= ~0x00000010u;
}
void torg_china_trait::clear_price_usd_min() {
  price_usd_min_ = 0;
  clear_has_price_usd_min();
}
::google::protobuf::int32 torg_china_trait::price_usd_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_min)
  return price_usd_min_;
}
void torg_china_trait::set_price_usd_min(::google::protobuf::int32 value) {
  set_has_price_usd_min();
  price_usd_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_min)
}

// optional int32 price_usd_max = 11;
bool torg_china_trait::has_price_usd_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void torg_china_trait::set_has_price_usd_max() {
  _has_bits_[0] |= 0x00000020u;
}
void torg_china_trait::clear_has_price_usd_max() {
  _has_bits_[0] &= ~0x00000020u;
}
void torg_china_trait::clear_price_usd_max() {
  price_usd_max_ = 0;
  clear_has_price_usd_max();
}
::google::protobuf::int32 torg_china_trait::price_usd_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_max)
  return price_usd_max_;
}
void torg_china_trait::set_price_usd_max(::google::protobuf::int32 value) {
  set_has_price_usd_max();
  price_usd_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_max)
}

// optional int32 price_usd_with_ship_min = 12;
bool torg_china_trait::has_price_usd_with_ship_min() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void torg_china_trait::set_has_price_usd_with_ship_min() {
  _has_bits_[0] |= 0x00000040u;
}
void torg_china_trait::clear_has_price_usd_with_ship_min() {
  _has_bits_[0] &= ~0x00000040u;
}
void torg_china_trait::clear_price_usd_with_ship_min() {
  price_usd_with_ship_min_ = 0;
  clear_has_price_usd_with_ship_min();
}
::google::protobuf::int32 torg_china_trait::price_usd_with_ship_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_with_ship_min)
  return price_usd_with_ship_min_;
}
void torg_china_trait::set_price_usd_with_ship_min(::google::protobuf::int32 value) {
  set_has_price_usd_with_ship_min();
  price_usd_with_ship_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_with_ship_min)
}

// optional int32 price_usd_with_ship_max = 13;
bool torg_china_trait::has_price_usd_with_ship_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void torg_china_trait::set_has_price_usd_with_ship_max() {
  _has_bits_[0] |= 0x00000080u;
}
void torg_china_trait::clear_has_price_usd_with_ship_max() {
  _has_bits_[0] &= ~0x00000080u;
}
void torg_china_trait::clear_price_usd_with_ship_max() {
  price_usd_with_ship_max_ = 0;
  clear_has_price_usd_with_ship_max();
}
::google::protobuf::int32 torg_china_trait::price_usd_with_ship_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_with_ship_max)
  return price_usd_with_ship_max_;
}
void torg_china_trait::set_price_usd_with_ship_max(::google::protobuf::int32 value) {
  set_has_price_usd_with_ship_max();
  price_usd_with_ship_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_with_ship_max)
}

// optional int32 price_usd_with_cod_ship_min = 14;
bool torg_china_trait::has_price_usd_with_cod_ship_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void torg_china_trait::set_has_price_usd_with_cod_ship_min() {
  _has_bits_[0] |= 0x00000100u;
}
void torg_china_trait::clear_has_price_usd_with_cod_ship_min() {
  _has_bits_[0] &= ~0x00000100u;
}
void torg_china_trait::clear_price_usd_with_cod_ship_min() {
  price_usd_with_cod_ship_min_ = 0;
  clear_has_price_usd_with_cod_ship_min();
}
::google::protobuf::int32 torg_china_trait::price_usd_with_cod_ship_min() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_with_cod_ship_min)
  return price_usd_with_cod_ship_min_;
}
void torg_china_trait::set_price_usd_with_cod_ship_min(::google::protobuf::int32 value) {
  set_has_price_usd_with_cod_ship_min();
  price_usd_with_cod_ship_min_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_with_cod_ship_min)
}

// optional int32 price_usd_with_cod_ship_max = 15;
bool torg_china_trait::has_price_usd_with_cod_ship_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void torg_china_trait::set_has_price_usd_with_cod_ship_max() {
  _has_bits_[0] |= 0x00000200u;
}
void torg_china_trait::clear_has_price_usd_with_cod_ship_max() {
  _has_bits_[0] &= ~0x00000200u;
}
void torg_china_trait::clear_price_usd_with_cod_ship_max() {
  price_usd_with_cod_ship_max_ = 0;
  clear_has_price_usd_with_cod_ship_max();
}
::google::protobuf::int32 torg_china_trait::price_usd_with_cod_ship_max() const {
  // @@protoc_insertion_point(field_get:gogo.traits.torg_china_trait.price_usd_with_cod_ship_max)
  return price_usd_with_cod_ship_max_;
}
void torg_china_trait::set_price_usd_with_cod_ship_max(::google::protobuf::int32 value) {
  set_has_price_usd_with_cod_ship_max();
  price_usd_with_cod_ship_max_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.torg_china_trait.price_usd_with_cod_ship_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int vk_music_track_trait::kOfficialTitlesFullyMatchedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

vk_music_track_trait::vk_music_track_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.vk_music_track_trait)
}
vk_music_track_trait::vk_music_track_trait(const vk_music_track_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  official_titles_fully_matched_ = from.official_titles_fully_matched_;
  // @@protoc_insertion_point(copy_constructor:gogo.traits.vk_music_track_trait)
}

void vk_music_track_trait::SharedCtor() {
  _cached_size_ = 0;
  official_titles_fully_matched_ = 0;
}

vk_music_track_trait::~vk_music_track_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.vk_music_track_trait)
  SharedDtor();
}

void vk_music_track_trait::SharedDtor() {
}

void vk_music_track_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vk_music_track_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const vk_music_track_trait& vk_music_track_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

vk_music_track_trait* vk_music_track_trait::New(::google::protobuf::Arena* arena) const {
  vk_music_track_trait* n = new vk_music_track_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void vk_music_track_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.vk_music_track_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  official_titles_fully_matched_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool vk_music_track_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.vk_music_track_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 official_titles_fully_matched = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_official_titles_fully_matched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_titles_fully_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.vk_music_track_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.vk_music_track_trait)
  return false;
#undef DO_
}

void vk_music_track_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.vk_music_track_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 official_titles_fully_matched = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->official_titles_fully_matched(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.vk_music_track_trait)
}

::google::protobuf::uint8* vk_music_track_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.vk_music_track_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 official_titles_fully_matched = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->official_titles_fully_matched(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.vk_music_track_trait)
  return target;
}

size_t vk_music_track_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.vk_music_track_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 official_titles_fully_matched = 1;
  if (has_official_titles_fully_matched()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->official_titles_fully_matched());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vk_music_track_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.vk_music_track_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const vk_music_track_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const vk_music_track_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.vk_music_track_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.vk_music_track_trait)
    MergeFrom(*source);
  }
}

void vk_music_track_trait::MergeFrom(const vk_music_track_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.vk_music_track_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_official_titles_fully_matched()) {
    set_official_titles_fully_matched(from.official_titles_fully_matched());
  }
}

void vk_music_track_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.vk_music_track_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vk_music_track_trait::CopyFrom(const vk_music_track_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.vk_music_track_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vk_music_track_trait::IsInitialized() const {
  return true;
}

void vk_music_track_trait::Swap(vk_music_track_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void vk_music_track_trait::InternalSwap(vk_music_track_trait* other) {
  using std::swap;
  swap(official_titles_fully_matched_, other->official_titles_fully_matched_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata vk_music_track_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// vk_music_track_trait

// optional int32 official_titles_fully_matched = 1;
bool vk_music_track_trait::has_official_titles_fully_matched() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void vk_music_track_trait::set_has_official_titles_fully_matched() {
  _has_bits_[0] |= 0x00000001u;
}
void vk_music_track_trait::clear_has_official_titles_fully_matched() {
  _has_bits_[0] &= ~0x00000001u;
}
void vk_music_track_trait::clear_official_titles_fully_matched() {
  official_titles_fully_matched_ = 0;
  clear_has_official_titles_fully_matched();
}
::google::protobuf::int32 vk_music_track_trait::official_titles_fully_matched() const {
  // @@protoc_insertion_point(field_get:gogo.traits.vk_music_track_trait.official_titles_fully_matched)
  return official_titles_fully_matched_;
}
void vk_music_track_trait::set_official_titles_fully_matched(::google::protobuf::int32 value) {
  set_has_official_titles_fully_matched();
  official_titles_fully_matched_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.vk_music_track_trait.official_titles_fully_matched)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int total_searcher_docs_statistics::kSameWordsTotalDocsFieldNumber;
const int total_searcher_docs_statistics::kTotalFoundDocsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

total_searcher_docs_statistics::total_searcher_docs_statistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.total_searcher_docs_statistics)
}
total_searcher_docs_statistics::total_searcher_docs_statistics(const total_searcher_docs_statistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&same_words_total_docs_, &from.same_words_total_docs_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_found_docs_count_) -
    reinterpret_cast<char*>(&same_words_total_docs_)) + sizeof(total_found_docs_count_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.total_searcher_docs_statistics)
}

void total_searcher_docs_statistics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&same_words_total_docs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_found_docs_count_) -
      reinterpret_cast<char*>(&same_words_total_docs_)) + sizeof(total_found_docs_count_));
}

total_searcher_docs_statistics::~total_searcher_docs_statistics() {
  // @@protoc_insertion_point(destructor:gogo.traits.total_searcher_docs_statistics)
  SharedDtor();
}

void total_searcher_docs_statistics::SharedDtor() {
}

void total_searcher_docs_statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* total_searcher_docs_statistics::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const total_searcher_docs_statistics& total_searcher_docs_statistics::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

total_searcher_docs_statistics* total_searcher_docs_statistics::New(::google::protobuf::Arena* arena) const {
  total_searcher_docs_statistics* n = new total_searcher_docs_statistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void total_searcher_docs_statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.total_searcher_docs_statistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&same_words_total_docs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_found_docs_count_) -
        reinterpret_cast<char*>(&same_words_total_docs_)) + sizeof(total_found_docs_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool total_searcher_docs_statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.total_searcher_docs_statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 same_words_total_docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_same_words_total_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &same_words_total_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_found_docs_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_total_found_docs_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_found_docs_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.total_searcher_docs_statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.total_searcher_docs_statistics)
  return false;
#undef DO_
}

void total_searcher_docs_statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.total_searcher_docs_statistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 same_words_total_docs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->same_words_total_docs(), output);
  }

  // optional int32 total_found_docs_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_found_docs_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.total_searcher_docs_statistics)
}

::google::protobuf::uint8* total_searcher_docs_statistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.total_searcher_docs_statistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 same_words_total_docs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->same_words_total_docs(), target);
  }

  // optional int32 total_found_docs_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_found_docs_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.total_searcher_docs_statistics)
  return target;
}

size_t total_searcher_docs_statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.total_searcher_docs_statistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 same_words_total_docs = 1;
    if (has_same_words_total_docs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->same_words_total_docs());
    }

    // optional int32 total_found_docs_count = 2;
    if (has_total_found_docs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_found_docs_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void total_searcher_docs_statistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.total_searcher_docs_statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const total_searcher_docs_statistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const total_searcher_docs_statistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.total_searcher_docs_statistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.total_searcher_docs_statistics)
    MergeFrom(*source);
  }
}

void total_searcher_docs_statistics::MergeFrom(const total_searcher_docs_statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.total_searcher_docs_statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      same_words_total_docs_ = from.same_words_total_docs_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_found_docs_count_ = from.total_found_docs_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void total_searcher_docs_statistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.total_searcher_docs_statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void total_searcher_docs_statistics::CopyFrom(const total_searcher_docs_statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.total_searcher_docs_statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool total_searcher_docs_statistics::IsInitialized() const {
  return true;
}

void total_searcher_docs_statistics::Swap(total_searcher_docs_statistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void total_searcher_docs_statistics::InternalSwap(total_searcher_docs_statistics* other) {
  using std::swap;
  swap(same_words_total_docs_, other->same_words_total_docs_);
  swap(total_found_docs_count_, other->total_found_docs_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata total_searcher_docs_statistics::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// total_searcher_docs_statistics

// optional int32 same_words_total_docs = 1;
bool total_searcher_docs_statistics::has_same_words_total_docs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void total_searcher_docs_statistics::set_has_same_words_total_docs() {
  _has_bits_[0] |= 0x00000001u;
}
void total_searcher_docs_statistics::clear_has_same_words_total_docs() {
  _has_bits_[0] &= ~0x00000001u;
}
void total_searcher_docs_statistics::clear_same_words_total_docs() {
  same_words_total_docs_ = 0;
  clear_has_same_words_total_docs();
}
::google::protobuf::int32 total_searcher_docs_statistics::same_words_total_docs() const {
  // @@protoc_insertion_point(field_get:gogo.traits.total_searcher_docs_statistics.same_words_total_docs)
  return same_words_total_docs_;
}
void total_searcher_docs_statistics::set_same_words_total_docs(::google::protobuf::int32 value) {
  set_has_same_words_total_docs();
  same_words_total_docs_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.total_searcher_docs_statistics.same_words_total_docs)
}

// optional int32 total_found_docs_count = 2;
bool total_searcher_docs_statistics::has_total_found_docs_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void total_searcher_docs_statistics::set_has_total_found_docs_count() {
  _has_bits_[0] |= 0x00000002u;
}
void total_searcher_docs_statistics::clear_has_total_found_docs_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void total_searcher_docs_statistics::clear_total_found_docs_count() {
  total_found_docs_count_ = 0;
  clear_has_total_found_docs_count();
}
::google::protobuf::int32 total_searcher_docs_statistics::total_found_docs_count() const {
  // @@protoc_insertion_point(field_get:gogo.traits.total_searcher_docs_statistics.total_found_docs_count)
  return total_found_docs_count_;
}
void total_searcher_docs_statistics::set_total_found_docs_count(::google::protobuf::int32 value) {
  set_has_total_found_docs_count();
  total_found_docs_count_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.total_searcher_docs_statistics.total_found_docs_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int recipes_doc::kHashFieldNumber;
const int recipes_doc::kRankFieldNumber;
const int recipes_doc::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

recipes_doc::recipes_doc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.recipes_doc)
}
recipes_doc::recipes_doc(const recipes_doc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:gogo.traits.recipes_doc)
}

void recipes_doc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(position_));
}

recipes_doc::~recipes_doc() {
  // @@protoc_insertion_point(destructor:gogo.traits.recipes_doc)
  SharedDtor();
}

void recipes_doc::SharedDtor() {
}

void recipes_doc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recipes_doc::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const recipes_doc& recipes_doc::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

recipes_doc* recipes_doc::New(::google::protobuf::Arena* arena) const {
  recipes_doc* n = new recipes_doc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void recipes_doc::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.recipes_doc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool recipes_doc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.recipes_doc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.recipes_doc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.recipes_doc)
  return false;
#undef DO_
}

void recipes_doc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.recipes_doc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rank(), output);
  }

  // optional int32 position = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.recipes_doc)
}

::google::protobuf::uint8* recipes_doc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.recipes_doc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rank(), target);
  }

  // optional int32 position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.recipes_doc)
  return target;
}

size_t recipes_doc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.recipes_doc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

    // optional float rank = 2;
    if (has_rank()) {
      total_size += 1 + 4;
    }

    // optional int32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recipes_doc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.recipes_doc)
  GOOGLE_DCHECK_NE(&from, this);
  const recipes_doc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const recipes_doc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.recipes_doc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.recipes_doc)
    MergeFrom(*source);
  }
}

void recipes_doc::MergeFrom(const recipes_doc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.recipes_doc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void recipes_doc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.recipes_doc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recipes_doc::CopyFrom(const recipes_doc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.recipes_doc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recipes_doc::IsInitialized() const {
  return true;
}

void recipes_doc::Swap(recipes_doc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void recipes_doc::InternalSwap(recipes_doc* other) {
  using std::swap;
  swap(hash_, other->hash_);
  swap(rank_, other->rank_);
  swap(position_, other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata recipes_doc::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// recipes_doc

// optional uint64 hash = 1;
bool recipes_doc::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void recipes_doc::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void recipes_doc::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void recipes_doc::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
::google::protobuf::uint64 recipes_doc::hash() const {
  // @@protoc_insertion_point(field_get:gogo.traits.recipes_doc.hash)
  return hash_;
}
void recipes_doc::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.recipes_doc.hash)
}

// optional float rank = 2;
bool recipes_doc::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void recipes_doc::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void recipes_doc::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void recipes_doc::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float recipes_doc::rank() const {
  // @@protoc_insertion_point(field_get:gogo.traits.recipes_doc.rank)
  return rank_;
}
void recipes_doc::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.recipes_doc.rank)
}

// optional int32 position = 3;
bool recipes_doc::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void recipes_doc::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void recipes_doc::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void recipes_doc::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 recipes_doc::position() const {
  // @@protoc_insertion_point(field_get:gogo.traits.recipes_doc.position)
  return position_;
}
void recipes_doc::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:gogo.traits.recipes_doc.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int recipes_trait::kDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

recipes_trait::recipes_trait()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traits_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.traits.recipes_trait)
}
recipes_trait::recipes_trait(const recipes_trait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      docs_(from.docs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.traits.recipes_trait)
}

void recipes_trait::SharedCtor() {
  _cached_size_ = 0;
}

recipes_trait::~recipes_trait() {
  // @@protoc_insertion_point(destructor:gogo.traits.recipes_trait)
  SharedDtor();
}

void recipes_trait::SharedDtor() {
}

void recipes_trait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recipes_trait::descriptor() {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const recipes_trait& recipes_trait::default_instance() {
  protobuf_traits_2eproto::InitDefaults();
  return *internal_default_instance();
}

recipes_trait* recipes_trait::New(::google::protobuf::Arena* arena) const {
  recipes_trait* n = new recipes_trait;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void recipes_trait::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.traits.recipes_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool recipes_trait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.traits.recipes_trait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.traits.recipes_doc docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.traits.recipes_trait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.traits.recipes_trait)
  return false;
#undef DO_
}

void recipes_trait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.traits.recipes_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.traits.recipes_doc docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.traits.recipes_trait)
}

::google::protobuf::uint8* recipes_trait::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.traits.recipes_trait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.traits.recipes_doc docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->docs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.traits.recipes_trait)
  return target;
}

size_t recipes_trait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.traits.recipes_trait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.traits.recipes_doc docs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recipes_trait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.traits.recipes_trait)
  GOOGLE_DCHECK_NE(&from, this);
  const recipes_trait* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const recipes_trait>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.traits.recipes_trait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.traits.recipes_trait)
    MergeFrom(*source);
  }
}

void recipes_trait::MergeFrom(const recipes_trait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.traits.recipes_trait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
}

void recipes_trait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.traits.recipes_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recipes_trait::CopyFrom(const recipes_trait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.traits.recipes_trait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recipes_trait::IsInitialized() const {
  return true;
}

void recipes_trait::Swap(recipes_trait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void recipes_trait::InternalSwap(recipes_trait* other) {
  using std::swap;
  docs_.InternalSwap(&other->docs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata recipes_trait::GetMetadata() const {
  protobuf_traits_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traits_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// recipes_trait

// repeated .gogo.traits.recipes_doc docs = 1;
int recipes_trait::docs_size() const {
  return docs_.size();
}
void recipes_trait::clear_docs() {
  docs_.Clear();
}
const ::gogo::traits::recipes_doc& recipes_trait::docs(int index) const {
  // @@protoc_insertion_point(field_get:gogo.traits.recipes_trait.docs)
  return docs_.Get(index);
}
::gogo::traits::recipes_doc* recipes_trait::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.traits.recipes_trait.docs)
  return docs_.Mutable(index);
}
::gogo::traits::recipes_doc* recipes_trait::add_docs() {
  // @@protoc_insertion_point(field_add:gogo.traits.recipes_trait.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::traits::recipes_doc >*
recipes_trait::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:gogo.traits.recipes_trait.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::traits::recipes_doc >&
recipes_trait::docs() const {
  // @@protoc_insertion_point(field_list:gogo.traits.recipes_trait.docs)
  return docs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace traits
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
