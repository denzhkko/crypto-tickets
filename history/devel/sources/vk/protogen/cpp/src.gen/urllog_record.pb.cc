// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: urllog_record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "urllog_record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace ranking {
class UrlLogRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlLogRecord>
     _instance;
} _UrlLogRecord_default_instance_;
class ParamListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParamList>
     _instance;
} _ParamList_default_instance_;
class BartertownLogRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BartertownLogRecord>
     _instance;
} _BartertownLogRecord_default_instance_;
class AccessLogRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AccessLogRecord>
     _instance;
} _AccessLogRecord_default_instance_;
class SerpLogRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerpLogRecord>
     _instance;
} _SerpLogRecord_default_instance_;

namespace protobuf_urllog_5frecord_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogRecord, queryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogRecord, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogRecord, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogRecord, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogRecord, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogRecord, data_),
  0,
  ~0u,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamList, paramname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamList, paramvalue_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownLogRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownLogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownLogRecord, queryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownLogRecord, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownLogRecord, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownLogRecord, parameters_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogRecord, queryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogRecord, pixelnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogRecord, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogRecord, parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogRecord, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogRecord, pixellocation_),
  0,
  1,
  5,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpLogRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpLogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpLogRecord, queryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpLogRecord, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpLogRecord, serp_),
  0,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(UrlLogRecord)},
  { 17, 24, sizeof(ParamList)},
  { 26, 35, sizeof(BartertownLogRecord)},
  { 39, 50, sizeof(AccessLogRecord)},
  { 56, 64, sizeof(SerpLogRecord)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlLogRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParamList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BartertownLogRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccessLogRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerpLogRecord_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "urllog_record.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UrlLogRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlLogRecord_default_instance_);_ParamList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParamList_default_instance_);_BartertownLogRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BartertownLogRecord_default_instance_);_AccessLogRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AccessLogRecord_default_instance_);_SerpLogRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerpLogRecord_default_instance_);_BartertownLogRecord_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::ru::mail::go::webbase::ranking::ParamList*>(
      ::ru::mail::go::webbase::ranking::ParamList::internal_default_instance());
  _AccessLogRecord_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::ru::mail::go::webbase::ranking::ParamList*>(
      ::ru::mail::go::webbase::ranking::ParamList::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023urllog_record.proto\022\032ru.mail.go.webbas"
      "e.ranking\"\325\001\n\014UrlLogRecord\022\017\n\007queryId\030\001 "
      "\002(\t\022\013\n\003url\030\002 \003(\t\022\014\n\004time\030\003 \001(\004\022A\n\004type\030\004"
      " \001(\0162-.ru.mail.go.webbase.ranking.UrlLog"
      "Record.Type:\004MAIN\022\013\n\003pos\030\005 \001(\r\022\014\n\004data\030\006"
      " \001(\t\";\n\004Type\022\010\n\004MAIN\020\000\022\n\n\006SMACKS\020\001\022\014\n\010VK"
      "_MUSIC\020\002\022\017\n\013SOCIAL_URLS\020\003\"2\n\tParamList\022\021"
      "\n\tparamName\030\001 \003(\t\022\022\n\nparamValue\030\002 \003(\t\"~\n"
      "\023BartertownLogRecord\022\017\n\007queryId\030\001 \002(\t\022\r\n"
      "\005query\030\002 \002(\t\022\014\n\004time\030\003 \002(\004\0229\n\nparameters"
      "\030\004 \001(\0132%.ru.mail.go.webbase.ranking.Para"
      "mList\"\240\001\n\017AccessLogRecord\022\017\n\007queryId\030\001 \002"
      "(\t\022\020\n\010pixelNum\030\002 \002(\t\022\014\n\004time\030\003 \002(\004\0229\n\npa"
      "rameters\030\004 \001(\0132%.ru.mail.go.webbase.rank"
      "ing.ParamList\022\n\n\002ip\030\005 \001(\t\022\025\n\rpixelLocati"
      "on\030\006 \002(\t\"<\n\rSerpLogRecord\022\017\n\007queryId\030\001 \002"
      "(\t\022\014\n\004time\030\002 \002(\004\022\014\n\004serp\030\003 \001(\tB\014B\nLogRec"
      "ords"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "urllog_record.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_urllog_5frecord_2eproto

const ::google::protobuf::EnumDescriptor* UrlLogRecord_Type_descriptor() {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_enum_descriptors[0];
}
bool UrlLogRecord_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UrlLogRecord_Type UrlLogRecord::MAIN;
const UrlLogRecord_Type UrlLogRecord::SMACKS;
const UrlLogRecord_Type UrlLogRecord::VK_MUSIC;
const UrlLogRecord_Type UrlLogRecord::SOCIAL_URLS;
const UrlLogRecord_Type UrlLogRecord::Type_MIN;
const UrlLogRecord_Type UrlLogRecord::Type_MAX;
const int UrlLogRecord::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlLogRecord::kQueryIdFieldNumber;
const int UrlLogRecord::kUrlFieldNumber;
const int UrlLogRecord::kTimeFieldNumber;
const int UrlLogRecord::kTypeFieldNumber;
const int UrlLogRecord::kPosFieldNumber;
const int UrlLogRecord::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlLogRecord::UrlLogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_urllog_5frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.ranking.UrlLogRecord)
}
UrlLogRecord::UrlLogRecord(const UrlLogRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_(from.url_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queryid()) {
    queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&time_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.ranking.UrlLogRecord)
}

void UrlLogRecord::SharedCtor() {
  _cached_size_ = 0;
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&time_)) + sizeof(pos_));
}

UrlLogRecord::~UrlLogRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.ranking.UrlLogRecord)
  SharedDtor();
}

void UrlLogRecord::SharedDtor() {
  queryid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UrlLogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlLogRecord::descriptor() {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlLogRecord& UrlLogRecord::default_instance() {
  protobuf_urllog_5frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlLogRecord* UrlLogRecord::New(::google::protobuf::Arena* arena) const {
  UrlLogRecord* n = new UrlLogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlLogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!queryid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*queryid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_) -
        reinterpret_cast<char*>(&time_)) + sizeof(pos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlLogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queryId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queryid().data(), static_cast<int>(this->queryid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.UrlLogRecord.queryId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url(this->url_size() - 1).data(),
            static_cast<int>(this->url(this->url_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.UrlLogRecord.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.UrlLogRecord.Type type = 4 [default = MAIN];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::ranking::UrlLogRecord_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::ranking::UrlLogRecord_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.UrlLogRecord.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.ranking.UrlLogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.ranking.UrlLogRecord)
  return false;
#undef DO_
}

void UrlLogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string queryId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.UrlLogRecord.queryId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queryid(), output);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.UrlLogRecord.url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(i), output);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional .ru.mail.go.webbase.ranking.UrlLogRecord.Type type = 4 [default = MAIN];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint32 pos = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pos(), output);
  }

  // optional string data = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.UrlLogRecord.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.ranking.UrlLogRecord)
}

::google::protobuf::uint8* UrlLogRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string queryId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.UrlLogRecord.queryId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queryid(), target);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.UrlLogRecord.url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->url(i), target);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional .ru.mail.go.webbase.ranking.UrlLogRecord.Type type = 4 [default = MAIN];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint32 pos = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pos(), target);
  }

  // optional string data = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.UrlLogRecord.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.ranking.UrlLogRecord)
  return target;
}

size_t UrlLogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string queryId = 1;
  if (has_queryid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queryid());
  }
  // repeated string url = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->url_size());
  for (int i = 0, n = this->url_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url(i));
  }

  if (_has_bits_[0 / 32] & 30u) {
    // optional string data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .ru.mail.go.webbase.ranking.UrlLogRecord.Type type = 4 [default = MAIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlLogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlLogRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlLogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.ranking.UrlLogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.ranking.UrlLogRecord)
    MergeFrom(*source);
  }
}

void UrlLogRecord::MergeFrom(const UrlLogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_.MergeFrom(from.url_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_queryid();
      queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_ = from.pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UrlLogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlLogRecord::CopyFrom(const UrlLogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.ranking.UrlLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlLogRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UrlLogRecord::Swap(UrlLogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlLogRecord::InternalSwap(UrlLogRecord* other) {
  using std::swap;
  url_.InternalSwap(&other->url_);
  queryid_.Swap(&other->queryid_);
  data_.Swap(&other->data_);
  swap(time_, other->time_);
  swap(type_, other->type_);
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlLogRecord::GetMetadata() const {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlLogRecord

// required string queryId = 1;
bool UrlLogRecord::has_queryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UrlLogRecord::set_has_queryid() {
  _has_bits_[0] |= 0x00000001u;
}
void UrlLogRecord::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UrlLogRecord::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
const ::std::string& UrlLogRecord::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
  return queryid_.GetNoArena();
}
void UrlLogRecord::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}
#if LANG_CXX11
void UrlLogRecord::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}
#endif
void UrlLogRecord::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}
void UrlLogRecord::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}
::std::string* UrlLogRecord::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlLogRecord::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlLogRecord::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}

// repeated string url = 2;
int UrlLogRecord::url_size() const {
  return url_.size();
}
void UrlLogRecord::clear_url() {
  url_.Clear();
}
const ::std::string& UrlLogRecord::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return url_.Get(index);
}
::std::string* UrlLogRecord::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return url_.Mutable(index);
}
void UrlLogRecord::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UrlLogRecord::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
void UrlLogRecord::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
void UrlLogRecord::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
::std::string* UrlLogRecord::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return url_.Add();
}
void UrlLogRecord::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
#if LANG_CXX11
void UrlLogRecord::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
#endif
void UrlLogRecord::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
void UrlLogRecord::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlLogRecord::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return url_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UrlLogRecord::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return &url_;
}

// optional uint64 time = 3;
bool UrlLogRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UrlLogRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void UrlLogRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void UrlLogRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 UrlLogRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.time)
  return time_;
}
void UrlLogRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.time)
}

// optional .ru.mail.go.webbase.ranking.UrlLogRecord.Type type = 4 [default = MAIN];
bool UrlLogRecord::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UrlLogRecord::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void UrlLogRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void UrlLogRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::ranking::UrlLogRecord_Type UrlLogRecord::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.type)
  return static_cast< ::ru::mail::go::webbase::ranking::UrlLogRecord_Type >(type_);
}
void UrlLogRecord::set_type(::ru::mail::go::webbase::ranking::UrlLogRecord_Type value) {
  assert(::ru::mail::go::webbase::ranking::UrlLogRecord_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.type)
}

// optional uint32 pos = 5;
bool UrlLogRecord::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UrlLogRecord::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
void UrlLogRecord::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
void UrlLogRecord::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
::google::protobuf::uint32 UrlLogRecord::pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.pos)
  return pos_;
}
void UrlLogRecord::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.pos)
}

// optional string data = 6;
bool UrlLogRecord::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UrlLogRecord::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void UrlLogRecord::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void UrlLogRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& UrlLogRecord::data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.data)
  return data_.GetNoArena();
}
void UrlLogRecord::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}
#if LANG_CXX11
void UrlLogRecord::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}
#endif
void UrlLogRecord::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}
void UrlLogRecord::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}
::std::string* UrlLogRecord::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.UrlLogRecord.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlLogRecord::release_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.UrlLogRecord.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlLogRecord::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamList::kParamNameFieldNumber;
const int ParamList::kParamValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamList::ParamList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_urllog_5frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.ranking.ParamList)
}
ParamList::ParamList(const ParamList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      paramname_(from.paramname_),
      paramvalue_(from.paramvalue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.ranking.ParamList)
}

void ParamList::SharedCtor() {
  _cached_size_ = 0;
}

ParamList::~ParamList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.ranking.ParamList)
  SharedDtor();
}

void ParamList::SharedDtor() {
}

void ParamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamList::descriptor() {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParamList& ParamList::default_instance() {
  protobuf_urllog_5frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParamList* ParamList::New(::google::protobuf::Arena* arena) const {
  ParamList* n = new ParamList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.ranking.ParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paramname_.Clear();
  paramvalue_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.ranking.ParamList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string paramName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paramname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paramname(this->paramname_size() - 1).data(),
            static_cast<int>(this->paramname(this->paramname_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.ParamList.paramName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string paramValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paramvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paramvalue(this->paramvalue_size() - 1).data(),
            static_cast<int>(this->paramvalue(this->paramvalue_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.ParamList.paramValue");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.ranking.ParamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.ranking.ParamList)
  return false;
#undef DO_
}

void ParamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.ranking.ParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string paramName = 1;
  for (int i = 0, n = this->paramname_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramname(i).data(), static_cast<int>(this->paramname(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.ParamList.paramName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->paramname(i), output);
  }

  // repeated string paramValue = 2;
  for (int i = 0, n = this->paramvalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramvalue(i).data(), static_cast<int>(this->paramvalue(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.ParamList.paramValue");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->paramvalue(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.ranking.ParamList)
}

::google::protobuf::uint8* ParamList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.ranking.ParamList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string paramName = 1;
  for (int i = 0, n = this->paramname_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramname(i).data(), static_cast<int>(this->paramname(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.ParamList.paramName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->paramname(i), target);
  }

  // repeated string paramValue = 2;
  for (int i = 0, n = this->paramvalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramvalue(i).data(), static_cast<int>(this->paramvalue(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.ParamList.paramValue");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->paramvalue(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.ranking.ParamList)
  return target;
}

size_t ParamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.ranking.ParamList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string paramName = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->paramname_size());
  for (int i = 0, n = this->paramname_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paramname(i));
  }

  // repeated string paramValue = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->paramvalue_size());
  for (int i = 0, n = this->paramvalue_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paramvalue(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.ranking.ParamList)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.ranking.ParamList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.ranking.ParamList)
    MergeFrom(*source);
  }
}

void ParamList::MergeFrom(const ParamList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.ranking.ParamList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paramname_.MergeFrom(from.paramname_);
  paramvalue_.MergeFrom(from.paramvalue_);
}

void ParamList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.ranking.ParamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamList::CopyFrom(const ParamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.ranking.ParamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamList::IsInitialized() const {
  return true;
}

void ParamList::Swap(ParamList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamList::InternalSwap(ParamList* other) {
  using std::swap;
  paramname_.InternalSwap(&other->paramname_);
  paramvalue_.InternalSwap(&other->paramvalue_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamList::GetMetadata() const {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamList

// repeated string paramName = 1;
int ParamList::paramname_size() const {
  return paramname_.size();
}
void ParamList::clear_paramname() {
  paramname_.Clear();
}
const ::std::string& ParamList::paramname(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.ParamList.paramName)
  return paramname_.Get(index);
}
::std::string* ParamList::mutable_paramname(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.ParamList.paramName)
  return paramname_.Mutable(index);
}
void ParamList::set_paramname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.ParamList.paramName)
  paramname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ParamList::set_paramname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.ParamList.paramName)
  paramname_.Mutable(index)->assign(std::move(value));
}
#endif
void ParamList::set_paramname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.ParamList.paramName)
}
void ParamList::set_paramname(int index, const char* value, size_t size) {
  paramname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.ParamList.paramName)
}
::std::string* ParamList::add_paramname() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.ranking.ParamList.paramName)
  return paramname_.Add();
}
void ParamList::add_paramname(const ::std::string& value) {
  paramname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.ParamList.paramName)
}
#if LANG_CXX11
void ParamList::add_paramname(::std::string&& value) {
  paramname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.ParamList.paramName)
}
#endif
void ParamList::add_paramname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.ranking.ParamList.paramName)
}
void ParamList::add_paramname(const char* value, size_t size) {
  paramname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.ranking.ParamList.paramName)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParamList::paramname() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.ranking.ParamList.paramName)
  return paramname_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ParamList::mutable_paramname() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.ranking.ParamList.paramName)
  return &paramname_;
}

// repeated string paramValue = 2;
int ParamList::paramvalue_size() const {
  return paramvalue_.size();
}
void ParamList::clear_paramvalue() {
  paramvalue_.Clear();
}
const ::std::string& ParamList::paramvalue(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return paramvalue_.Get(index);
}
::std::string* ParamList::mutable_paramvalue(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return paramvalue_.Mutable(index);
}
void ParamList::set_paramvalue(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.ParamList.paramValue)
  paramvalue_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ParamList::set_paramvalue(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.ParamList.paramValue)
  paramvalue_.Mutable(index)->assign(std::move(value));
}
#endif
void ParamList::set_paramvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
void ParamList::set_paramvalue(int index, const char* value, size_t size) {
  paramvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
::std::string* ParamList::add_paramvalue() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return paramvalue_.Add();
}
void ParamList::add_paramvalue(const ::std::string& value) {
  paramvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
#if LANG_CXX11
void ParamList::add_paramvalue(::std::string&& value) {
  paramvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
#endif
void ParamList::add_paramvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
void ParamList::add_paramvalue(const char* value, size_t size) {
  paramvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParamList::paramvalue() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return paramvalue_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ParamList::mutable_paramvalue() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return &paramvalue_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BartertownLogRecord::kQueryIdFieldNumber;
const int BartertownLogRecord::kQueryFieldNumber;
const int BartertownLogRecord::kTimeFieldNumber;
const int BartertownLogRecord::kParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BartertownLogRecord::BartertownLogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_urllog_5frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.ranking.BartertownLogRecord)
}
BartertownLogRecord::BartertownLogRecord(const BartertownLogRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queryid()) {
    queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.has_parameters()) {
    parameters_ = new ::ru::mail::go::webbase::ranking::ParamList(*from.parameters_);
  } else {
    parameters_ = NULL;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.ranking.BartertownLogRecord)
}

void BartertownLogRecord::SharedCtor() {
  _cached_size_ = 0;
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&parameters_)) + sizeof(time_));
}

BartertownLogRecord::~BartertownLogRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.ranking.BartertownLogRecord)
  SharedDtor();
}

void BartertownLogRecord::SharedDtor() {
  queryid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameters_;
}

void BartertownLogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BartertownLogRecord::descriptor() {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BartertownLogRecord& BartertownLogRecord::default_instance() {
  protobuf_urllog_5frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

BartertownLogRecord* BartertownLogRecord::New(::google::protobuf::Arena* arena) const {
  BartertownLogRecord* n = new BartertownLogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BartertownLogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!queryid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*queryid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(parameters_ != NULL);
      parameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BartertownLogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queryId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queryid().data(), static_cast<int>(this->queryid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.BartertownLogRecord.queryId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.BartertownLogRecord.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.ranking.BartertownLogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.ranking.BartertownLogRecord)
  return false;
#undef DO_
}

void BartertownLogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string queryId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.BartertownLogRecord.queryId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queryid(), output);
  }

  // required string query = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.BartertownLogRecord.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // required uint64 time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->parameters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.ranking.BartertownLogRecord)
}

::google::protobuf::uint8* BartertownLogRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string queryId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.BartertownLogRecord.queryId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queryid(), target);
  }

  // required string query = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.BartertownLogRecord.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // required uint64 time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->parameters_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.ranking.BartertownLogRecord)
  return target;
}

size_t BartertownLogRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  size_t total_size = 0;

  if (has_queryid()) {
    // required string queryId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queryid());
  }

  if (has_query()) {
    // required string query = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_time()) {
    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t BartertownLogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string queryId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queryid());

    // required string query = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
  if (has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parameters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BartertownLogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const BartertownLogRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BartertownLogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.ranking.BartertownLogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.ranking.BartertownLogRecord)
    MergeFrom(*source);
  }
}

void BartertownLogRecord::MergeFrom(const BartertownLogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_queryid();
      queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_parameters()->::ru::mail::go::webbase::ranking::ParamList::MergeFrom(from.parameters());
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BartertownLogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BartertownLogRecord::CopyFrom(const BartertownLogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.ranking.BartertownLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BartertownLogRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void BartertownLogRecord::Swap(BartertownLogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BartertownLogRecord::InternalSwap(BartertownLogRecord* other) {
  using std::swap;
  queryid_.Swap(&other->queryid_);
  query_.Swap(&other->query_);
  swap(parameters_, other->parameters_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BartertownLogRecord::GetMetadata() const {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BartertownLogRecord

// required string queryId = 1;
bool BartertownLogRecord::has_queryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BartertownLogRecord::set_has_queryid() {
  _has_bits_[0] |= 0x00000001u;
}
void BartertownLogRecord::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BartertownLogRecord::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
const ::std::string& BartertownLogRecord::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
  return queryid_.GetNoArena();
}
void BartertownLogRecord::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}
#if LANG_CXX11
void BartertownLogRecord::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}
#endif
void BartertownLogRecord::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}
void BartertownLogRecord::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}
::std::string* BartertownLogRecord::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BartertownLogRecord::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BartertownLogRecord::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}

// required string query = 2;
bool BartertownLogRecord::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BartertownLogRecord::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void BartertownLogRecord::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void BartertownLogRecord::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& BartertownLogRecord::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
  return query_.GetNoArena();
}
void BartertownLogRecord::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}
#if LANG_CXX11
void BartertownLogRecord::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}
#endif
void BartertownLogRecord::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}
void BartertownLogRecord::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}
::std::string* BartertownLogRecord::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BartertownLogRecord::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BartertownLogRecord::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}

// required uint64 time = 3;
bool BartertownLogRecord::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BartertownLogRecord::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void BartertownLogRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void BartertownLogRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 BartertownLogRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.BartertownLogRecord.time)
  return time_;
}
void BartertownLogRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.BartertownLogRecord.time)
}

// optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
bool BartertownLogRecord::has_parameters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BartertownLogRecord::set_has_parameters() {
  _has_bits_[0] |= 0x00000004u;
}
void BartertownLogRecord::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000004u;
}
void BartertownLogRecord::clear_parameters() {
  if (parameters_ != NULL) parameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_parameters();
}
const ::ru::mail::go::webbase::ranking::ParamList& BartertownLogRecord::parameters() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = parameters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.BartertownLogRecord.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
::ru::mail::go::webbase::ranking::ParamList* BartertownLogRecord::mutable_parameters() {
  set_has_parameters();
  if (parameters_ == NULL) {
    parameters_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.BartertownLogRecord.parameters)
  return parameters_;
}
::ru::mail::go::webbase::ranking::ParamList* BartertownLogRecord::release_parameters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.BartertownLogRecord.parameters)
  clear_has_parameters();
  ::ru::mail::go::webbase::ranking::ParamList* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
void BartertownLogRecord::set_allocated_parameters(::ru::mail::go::webbase::ranking::ParamList* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.BartertownLogRecord.parameters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLogRecord::kQueryIdFieldNumber;
const int AccessLogRecord::kPixelNumFieldNumber;
const int AccessLogRecord::kTimeFieldNumber;
const int AccessLogRecord::kParametersFieldNumber;
const int AccessLogRecord::kIpFieldNumber;
const int AccessLogRecord::kPixelLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLogRecord::AccessLogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_urllog_5frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.ranking.AccessLogRecord)
}
AccessLogRecord::AccessLogRecord(const AccessLogRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queryid()) {
    queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  pixelnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pixelnum()) {
    pixelnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pixelnum_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  pixellocation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pixellocation()) {
    pixellocation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pixellocation_);
  }
  if (from.has_parameters()) {
    parameters_ = new ::ru::mail::go::webbase::ranking::ParamList(*from.parameters_);
  } else {
    parameters_ = NULL;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.ranking.AccessLogRecord)
}

void AccessLogRecord::SharedCtor() {
  _cached_size_ = 0;
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pixelnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pixellocation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&parameters_)) + sizeof(time_));
}

AccessLogRecord::~AccessLogRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.ranking.AccessLogRecord)
  SharedDtor();
}

void AccessLogRecord::SharedDtor() {
  queryid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pixelnum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pixellocation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameters_;
}

void AccessLogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLogRecord::descriptor() {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLogRecord& AccessLogRecord::default_instance() {
  protobuf_urllog_5frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccessLogRecord* AccessLogRecord::New(::google::protobuf::Arena* arena) const {
  AccessLogRecord* n = new AccessLogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!queryid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*queryid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pixelnum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pixelnum_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!pixellocation_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pixellocation_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(parameters_ != NULL);
      parameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccessLogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queryId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queryid().data(), static_cast<int>(this->queryid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.AccessLogRecord.queryId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pixelNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pixelnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pixelnum().data(), static_cast<int>(this->pixelnum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.AccessLogRecord.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pixelLocation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pixellocation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pixellocation().data(), static_cast<int>(this->pixellocation().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.ranking.AccessLogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.ranking.AccessLogRecord)
  return false;
#undef DO_
}

void AccessLogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string queryId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.AccessLogRecord.queryId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queryid(), output);
  }

  // required string pixelNum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pixelnum().data(), static_cast<int>(this->pixelnum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pixelnum(), output);
  }

  // required uint64 time = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->parameters_, output);
  }

  // optional string ip = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.AccessLogRecord.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // required string pixelLocation = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pixellocation().data(), static_cast<int>(this->pixellocation().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pixellocation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.ranking.AccessLogRecord)
}

::google::protobuf::uint8* AccessLogRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string queryId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.AccessLogRecord.queryId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queryid(), target);
  }

  // required string pixelNum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pixelnum().data(), static_cast<int>(this->pixelnum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pixelnum(), target);
  }

  // required uint64 time = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->parameters_, deterministic, target);
  }

  // optional string ip = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.AccessLogRecord.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // required string pixelLocation = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pixellocation().data(), static_cast<int>(this->pixellocation().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pixellocation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.ranking.AccessLogRecord)
  return target;
}

size_t AccessLogRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  size_t total_size = 0;

  if (has_queryid()) {
    // required string queryId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queryid());
  }

  if (has_pixelnum()) {
    // required string pixelNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pixelnum());
  }

  if (has_pixellocation()) {
    // required string pixelLocation = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pixellocation());
  }

  if (has_time()) {
    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t AccessLogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000002b) ^ 0x0000002b) == 0) {  // All required fields are present.
    // required string queryId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queryid());

    // required string pixelNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pixelnum());

    // required string pixelLocation = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pixellocation());

    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ip = 5;
  if (has_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
  if (has_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parameters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLogRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.ranking.AccessLogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.ranking.AccessLogRecord)
    MergeFrom(*source);
  }
}

void AccessLogRecord::MergeFrom(const AccessLogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_queryid();
      queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pixelnum();
      pixelnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pixelnum_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_pixellocation();
      pixellocation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pixellocation_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_parameters()->::ru::mail::go::webbase::ranking::ParamList::MergeFrom(from.parameters());
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccessLogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLogRecord::CopyFrom(const AccessLogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.ranking.AccessLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLogRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002b) != 0x0000002b) return false;
  return true;
}

void AccessLogRecord::Swap(AccessLogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLogRecord::InternalSwap(AccessLogRecord* other) {
  using std::swap;
  queryid_.Swap(&other->queryid_);
  pixelnum_.Swap(&other->pixelnum_);
  ip_.Swap(&other->ip_);
  pixellocation_.Swap(&other->pixellocation_);
  swap(parameters_, other->parameters_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLogRecord::GetMetadata() const {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessLogRecord

// required string queryId = 1;
bool AccessLogRecord::has_queryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccessLogRecord::set_has_queryid() {
  _has_bits_[0] |= 0x00000001u;
}
void AccessLogRecord::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccessLogRecord::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
const ::std::string& AccessLogRecord::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
  return queryid_.GetNoArena();
}
void AccessLogRecord::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}
#if LANG_CXX11
void AccessLogRecord::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}
#endif
void AccessLogRecord::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}
void AccessLogRecord::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}
::std::string* AccessLogRecord::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessLogRecord::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccessLogRecord::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}

// required string pixelNum = 2;
bool AccessLogRecord::has_pixelnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccessLogRecord::set_has_pixelnum() {
  _has_bits_[0] |= 0x00000002u;
}
void AccessLogRecord::clear_has_pixelnum() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccessLogRecord::clear_pixelnum() {
  pixelnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pixelnum();
}
const ::std::string& AccessLogRecord::pixelnum() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
  return pixelnum_.GetNoArena();
}
void AccessLogRecord::set_pixelnum(const ::std::string& value) {
  set_has_pixelnum();
  pixelnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}
#if LANG_CXX11
void AccessLogRecord::set_pixelnum(::std::string&& value) {
  set_has_pixelnum();
  pixelnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}
#endif
void AccessLogRecord::set_pixelnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pixelnum();
  pixelnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}
void AccessLogRecord::set_pixelnum(const char* value, size_t size) {
  set_has_pixelnum();
  pixelnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}
::std::string* AccessLogRecord::mutable_pixelnum() {
  set_has_pixelnum();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
  return pixelnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessLogRecord::release_pixelnum() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
  clear_has_pixelnum();
  return pixelnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccessLogRecord::set_allocated_pixelnum(::std::string* pixelnum) {
  if (pixelnum != NULL) {
    set_has_pixelnum();
  } else {
    clear_has_pixelnum();
  }
  pixelnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pixelnum);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}

// required uint64 time = 3;
bool AccessLogRecord::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AccessLogRecord::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
void AccessLogRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void AccessLogRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 AccessLogRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.time)
  return time_;
}
void AccessLogRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.time)
}

// optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
bool AccessLogRecord::has_parameters() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AccessLogRecord::set_has_parameters() {
  _has_bits_[0] |= 0x00000010u;
}
void AccessLogRecord::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000010u;
}
void AccessLogRecord::clear_parameters() {
  if (parameters_ != NULL) parameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_parameters();
}
const ::ru::mail::go::webbase::ranking::ParamList& AccessLogRecord::parameters() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = parameters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
::ru::mail::go::webbase::ranking::ParamList* AccessLogRecord::mutable_parameters() {
  set_has_parameters();
  if (parameters_ == NULL) {
    parameters_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.parameters)
  return parameters_;
}
::ru::mail::go::webbase::ranking::ParamList* AccessLogRecord::release_parameters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.parameters)
  clear_has_parameters();
  ::ru::mail::go::webbase::ranking::ParamList* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
void AccessLogRecord::set_allocated_parameters(::ru::mail::go::webbase::ranking::ParamList* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.parameters)
}

// optional string ip = 5;
bool AccessLogRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AccessLogRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void AccessLogRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void AccessLogRecord::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& AccessLogRecord::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
  return ip_.GetNoArena();
}
void AccessLogRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}
#if LANG_CXX11
void AccessLogRecord::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}
#endif
void AccessLogRecord::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}
void AccessLogRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}
::std::string* AccessLogRecord::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessLogRecord::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccessLogRecord::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}

// required string pixelLocation = 6;
bool AccessLogRecord::has_pixellocation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AccessLogRecord::set_has_pixellocation() {
  _has_bits_[0] |= 0x00000008u;
}
void AccessLogRecord::clear_has_pixellocation() {
  _has_bits_[0] &= ~0x00000008u;
}
void AccessLogRecord::clear_pixellocation() {
  pixellocation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pixellocation();
}
const ::std::string& AccessLogRecord::pixellocation() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
  return pixellocation_.GetNoArena();
}
void AccessLogRecord::set_pixellocation(const ::std::string& value) {
  set_has_pixellocation();
  pixellocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}
#if LANG_CXX11
void AccessLogRecord::set_pixellocation(::std::string&& value) {
  set_has_pixellocation();
  pixellocation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}
#endif
void AccessLogRecord::set_pixellocation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pixellocation();
  pixellocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}
void AccessLogRecord::set_pixellocation(const char* value, size_t size) {
  set_has_pixellocation();
  pixellocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}
::std::string* AccessLogRecord::mutable_pixellocation() {
  set_has_pixellocation();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
  return pixellocation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessLogRecord::release_pixellocation() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
  clear_has_pixellocation();
  return pixellocation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccessLogRecord::set_allocated_pixellocation(::std::string* pixellocation) {
  if (pixellocation != NULL) {
    set_has_pixellocation();
  } else {
    clear_has_pixellocation();
  }
  pixellocation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pixellocation);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerpLogRecord::kQueryIdFieldNumber;
const int SerpLogRecord::kTimeFieldNumber;
const int SerpLogRecord::kSerpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerpLogRecord::SerpLogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_urllog_5frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.ranking.SerpLogRecord)
}
SerpLogRecord::SerpLogRecord(const SerpLogRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queryid()) {
    queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  serp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serp()) {
    serp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serp_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.ranking.SerpLogRecord)
}

void SerpLogRecord::SharedCtor() {
  _cached_size_ = 0;
  queryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

SerpLogRecord::~SerpLogRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.ranking.SerpLogRecord)
  SharedDtor();
}

void SerpLogRecord::SharedDtor() {
  queryid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SerpLogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerpLogRecord::descriptor() {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerpLogRecord& SerpLogRecord::default_instance() {
  protobuf_urllog_5frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerpLogRecord* SerpLogRecord::New(::google::protobuf::Arena* arena) const {
  SerpLogRecord* n = new SerpLogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerpLogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!queryid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*queryid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!serp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serp_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SerpLogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queryId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queryid().data(), static_cast<int>(this->queryid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.SerpLogRecord.queryId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serp().data(), static_cast<int>(this->serp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.ranking.SerpLogRecord.serp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.ranking.SerpLogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.ranking.SerpLogRecord)
  return false;
#undef DO_
}

void SerpLogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string queryId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.SerpLogRecord.queryId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queryid(), output);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional string serp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serp().data(), static_cast<int>(this->serp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.SerpLogRecord.serp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.ranking.SerpLogRecord)
}

::google::protobuf::uint8* SerpLogRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string queryId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryid().data(), static_cast<int>(this->queryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.SerpLogRecord.queryId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queryid(), target);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional string serp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serp().data(), static_cast<int>(this->serp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.ranking.SerpLogRecord.serp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.ranking.SerpLogRecord)
  return target;
}

size_t SerpLogRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  size_t total_size = 0;

  if (has_queryid()) {
    // required string queryId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queryid());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t SerpLogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string queryId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queryid());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string serp = 3;
  if (has_serp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerpLogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SerpLogRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerpLogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.ranking.SerpLogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.ranking.SerpLogRecord)
    MergeFrom(*source);
  }
}

void SerpLogRecord::MergeFrom(const SerpLogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_queryid();
      queryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queryid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_serp();
      serp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serp_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SerpLogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerpLogRecord::CopyFrom(const SerpLogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.ranking.SerpLogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerpLogRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void SerpLogRecord::Swap(SerpLogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerpLogRecord::InternalSwap(SerpLogRecord* other) {
  using std::swap;
  queryid_.Swap(&other->queryid_);
  serp_.Swap(&other->serp_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerpLogRecord::GetMetadata() const {
  protobuf_urllog_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_urllog_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerpLogRecord

// required string queryId = 1;
bool SerpLogRecord::has_queryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerpLogRecord::set_has_queryid() {
  _has_bits_[0] |= 0x00000001u;
}
void SerpLogRecord::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerpLogRecord::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
const ::std::string& SerpLogRecord::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
  return queryid_.GetNoArena();
}
void SerpLogRecord::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}
#if LANG_CXX11
void SerpLogRecord::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}
#endif
void SerpLogRecord::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}
void SerpLogRecord::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}
::std::string* SerpLogRecord::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerpLogRecord::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerpLogRecord::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}

// required uint64 time = 2;
bool SerpLogRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SerpLogRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void SerpLogRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void SerpLogRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 SerpLogRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.SerpLogRecord.time)
  return time_;
}
void SerpLogRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.SerpLogRecord.time)
}

// optional string serp = 3;
bool SerpLogRecord::has_serp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SerpLogRecord::set_has_serp() {
  _has_bits_[0] |= 0x00000002u;
}
void SerpLogRecord::clear_has_serp() {
  _has_bits_[0] &= ~0x00000002u;
}
void SerpLogRecord::clear_serp() {
  serp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serp();
}
const ::std::string& SerpLogRecord::serp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
  return serp_.GetNoArena();
}
void SerpLogRecord::set_serp(const ::std::string& value) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}
#if LANG_CXX11
void SerpLogRecord::set_serp(::std::string&& value) {
  set_has_serp();
  serp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}
#endif
void SerpLogRecord::set_serp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}
void SerpLogRecord::set_serp(const char* value, size_t size) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}
::std::string* SerpLogRecord::mutable_serp() {
  set_has_serp();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
  return serp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerpLogRecord::release_serp() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
  clear_has_serp();
  return serp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerpLogRecord::set_allocated_serp(::std::string* serp) {
  if (serp != NULL) {
    set_has_serp();
  } else {
    clear_has_serp();
  }
  serp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serp);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ranking
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
