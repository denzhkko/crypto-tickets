// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: urllog_record.proto

#ifndef PROTOBUF_urllog_5frecord_2eproto__INCLUDED
#define PROTOBUF_urllog_5frecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace ranking {
class AccessLogRecord;
class AccessLogRecordDefaultTypeInternal;
extern AccessLogRecordDefaultTypeInternal _AccessLogRecord_default_instance_;
class BartertownLogRecord;
class BartertownLogRecordDefaultTypeInternal;
extern BartertownLogRecordDefaultTypeInternal _BartertownLogRecord_default_instance_;
class ParamList;
class ParamListDefaultTypeInternal;
extern ParamListDefaultTypeInternal _ParamList_default_instance_;
class SerpLogRecord;
class SerpLogRecordDefaultTypeInternal;
extern SerpLogRecordDefaultTypeInternal _SerpLogRecord_default_instance_;
class UrlLogRecord;
class UrlLogRecordDefaultTypeInternal;
extern UrlLogRecordDefaultTypeInternal _UrlLogRecord_default_instance_;
}  // namespace ranking
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace ranking {

namespace protobuf_urllog_5frecord_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_urllog_5frecord_2eproto

enum UrlLogRecord_Type {
  UrlLogRecord_Type_MAIN = 0,
  UrlLogRecord_Type_SMACKS = 1,
  UrlLogRecord_Type_VK_MUSIC = 2,
  UrlLogRecord_Type_SOCIAL_URLS = 3
};
bool UrlLogRecord_Type_IsValid(int value);
const UrlLogRecord_Type UrlLogRecord_Type_Type_MIN = UrlLogRecord_Type_MAIN;
const UrlLogRecord_Type UrlLogRecord_Type_Type_MAX = UrlLogRecord_Type_SOCIAL_URLS;
const int UrlLogRecord_Type_Type_ARRAYSIZE = UrlLogRecord_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* UrlLogRecord_Type_descriptor();
inline const ::std::string& UrlLogRecord_Type_Name(UrlLogRecord_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UrlLogRecord_Type_descriptor(), value);
}
inline bool UrlLogRecord_Type_Parse(
    const ::std::string& name, UrlLogRecord_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UrlLogRecord_Type>(
    UrlLogRecord_Type_descriptor(), name, value);
}
// ===================================================================

class UrlLogRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.ranking.UrlLogRecord) */ {
 public:
  UrlLogRecord();
  virtual ~UrlLogRecord();

  UrlLogRecord(const UrlLogRecord& from);

  inline UrlLogRecord& operator=(const UrlLogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UrlLogRecord(UrlLogRecord&& from) noexcept
    : UrlLogRecord() {
    *this = ::std::move(from);
  }

  inline UrlLogRecord& operator=(UrlLogRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UrlLogRecord& default_instance();

  static inline const UrlLogRecord* internal_default_instance() {
    return reinterpret_cast<const UrlLogRecord*>(
               &_UrlLogRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UrlLogRecord* other);
  friend void swap(UrlLogRecord& a, UrlLogRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UrlLogRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  UrlLogRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UrlLogRecord& from);
  void MergeFrom(const UrlLogRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UrlLogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UrlLogRecord_Type Type;
  static const Type MAIN =
    UrlLogRecord_Type_MAIN;
  static const Type SMACKS =
    UrlLogRecord_Type_SMACKS;
  static const Type VK_MUSIC =
    UrlLogRecord_Type_VK_MUSIC;
  static const Type SOCIAL_URLS =
    UrlLogRecord_Type_SOCIAL_URLS;
  static inline bool Type_IsValid(int value) {
    return UrlLogRecord_Type_IsValid(value);
  }
  static const Type Type_MIN =
    UrlLogRecord_Type_Type_MIN;
  static const Type Type_MAX =
    UrlLogRecord_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    UrlLogRecord_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return UrlLogRecord_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return UrlLogRecord_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return UrlLogRecord_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string url = 2;
  int url_size() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url(int index) const;
  ::std::string* mutable_url(int index);
  void set_url(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_url(int index, ::std::string&& value);
  #endif
  void set_url(int index, const char* value);
  void set_url(int index, const char* value, size_t size);
  ::std::string* add_url();
  void add_url(const ::std::string& value);
  #if LANG_CXX11
  void add_url(::std::string&& value);
  #endif
  void add_url(const char* value);
  void add_url(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& url() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url();

  // required string queryId = 1;
  bool has_queryid() const;
  void clear_queryid();
  static const int kQueryIdFieldNumber = 1;
  const ::std::string& queryid() const;
  void set_queryid(const ::std::string& value);
  #if LANG_CXX11
  void set_queryid(::std::string&& value);
  #endif
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  ::std::string* mutable_queryid();
  ::std::string* release_queryid();
  void set_allocated_queryid(::std::string* queryid);

  // optional string data = 6;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional .ru.mail.go.webbase.ranking.UrlLogRecord.Type type = 4 [default = MAIN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::ru::mail::go::webbase::ranking::UrlLogRecord_Type type() const;
  void set_type(::ru::mail::go::webbase::ranking::UrlLogRecord_Type value);

  // optional uint32 pos = 5;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.ranking.UrlLogRecord)
 private:
  void set_has_queryid();
  void clear_has_queryid();
  void set_has_time();
  void clear_has_time();
  void set_has_type();
  void clear_has_type();
  void set_has_pos();
  void clear_has_pos();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_;
  ::google::protobuf::internal::ArenaStringPtr queryid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 time_;
  int type_;
  ::google::protobuf::uint32 pos_;
  friend struct protobuf_urllog_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.ranking.ParamList) */ {
 public:
  ParamList();
  virtual ~ParamList();

  ParamList(const ParamList& from);

  inline ParamList& operator=(const ParamList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamList(ParamList&& from) noexcept
    : ParamList() {
    *this = ::std::move(from);
  }

  inline ParamList& operator=(ParamList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamList& default_instance();

  static inline const ParamList* internal_default_instance() {
    return reinterpret_cast<const ParamList*>(
               &_ParamList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ParamList* other);
  friend void swap(ParamList& a, ParamList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamList* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamList& from);
  void MergeFrom(const ParamList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string paramName = 1;
  int paramname_size() const;
  void clear_paramname();
  static const int kParamNameFieldNumber = 1;
  const ::std::string& paramname(int index) const;
  ::std::string* mutable_paramname(int index);
  void set_paramname(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_paramname(int index, ::std::string&& value);
  #endif
  void set_paramname(int index, const char* value);
  void set_paramname(int index, const char* value, size_t size);
  ::std::string* add_paramname();
  void add_paramname(const ::std::string& value);
  #if LANG_CXX11
  void add_paramname(::std::string&& value);
  #endif
  void add_paramname(const char* value);
  void add_paramname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& paramname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramname();

  // repeated string paramValue = 2;
  int paramvalue_size() const;
  void clear_paramvalue();
  static const int kParamValueFieldNumber = 2;
  const ::std::string& paramvalue(int index) const;
  ::std::string* mutable_paramvalue(int index);
  void set_paramvalue(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_paramvalue(int index, ::std::string&& value);
  #endif
  void set_paramvalue(int index, const char* value);
  void set_paramvalue(int index, const char* value, size_t size);
  ::std::string* add_paramvalue();
  void add_paramvalue(const ::std::string& value);
  #if LANG_CXX11
  void add_paramvalue(::std::string&& value);
  #endif
  void add_paramvalue(const char* value);
  void add_paramvalue(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& paramvalue() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramvalue();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.ranking.ParamList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramvalue_;
  friend struct protobuf_urllog_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BartertownLogRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.ranking.BartertownLogRecord) */ {
 public:
  BartertownLogRecord();
  virtual ~BartertownLogRecord();

  BartertownLogRecord(const BartertownLogRecord& from);

  inline BartertownLogRecord& operator=(const BartertownLogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BartertownLogRecord(BartertownLogRecord&& from) noexcept
    : BartertownLogRecord() {
    *this = ::std::move(from);
  }

  inline BartertownLogRecord& operator=(BartertownLogRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BartertownLogRecord& default_instance();

  static inline const BartertownLogRecord* internal_default_instance() {
    return reinterpret_cast<const BartertownLogRecord*>(
               &_BartertownLogRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BartertownLogRecord* other);
  friend void swap(BartertownLogRecord& a, BartertownLogRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BartertownLogRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  BartertownLogRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BartertownLogRecord& from);
  void MergeFrom(const BartertownLogRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BartertownLogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string queryId = 1;
  bool has_queryid() const;
  void clear_queryid();
  static const int kQueryIdFieldNumber = 1;
  const ::std::string& queryid() const;
  void set_queryid(const ::std::string& value);
  #if LANG_CXX11
  void set_queryid(::std::string&& value);
  #endif
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  ::std::string* mutable_queryid();
  ::std::string* release_queryid();
  void set_allocated_queryid(::std::string* queryid);

  // required string query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::ru::mail::go::webbase::ranking::ParamList& parameters() const;
  ::ru::mail::go::webbase::ranking::ParamList* mutable_parameters();
  ::ru::mail::go::webbase::ranking::ParamList* release_parameters();
  void set_allocated_parameters(::ru::mail::go::webbase::ranking::ParamList* parameters);

  // required uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.ranking.BartertownLogRecord)
 private:
  void set_has_queryid();
  void clear_has_queryid();
  void set_has_query();
  void clear_has_query();
  void set_has_time();
  void clear_has_time();
  void set_has_parameters();
  void clear_has_parameters();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr queryid_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::ru::mail::go::webbase::ranking::ParamList* parameters_;
  ::google::protobuf::uint64 time_;
  friend struct protobuf_urllog_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessLogRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.ranking.AccessLogRecord) */ {
 public:
  AccessLogRecord();
  virtual ~AccessLogRecord();

  AccessLogRecord(const AccessLogRecord& from);

  inline AccessLogRecord& operator=(const AccessLogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccessLogRecord(AccessLogRecord&& from) noexcept
    : AccessLogRecord() {
    *this = ::std::move(from);
  }

  inline AccessLogRecord& operator=(AccessLogRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessLogRecord& default_instance();

  static inline const AccessLogRecord* internal_default_instance() {
    return reinterpret_cast<const AccessLogRecord*>(
               &_AccessLogRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AccessLogRecord* other);
  friend void swap(AccessLogRecord& a, AccessLogRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessLogRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessLogRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessLogRecord& from);
  void MergeFrom(const AccessLogRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessLogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string queryId = 1;
  bool has_queryid() const;
  void clear_queryid();
  static const int kQueryIdFieldNumber = 1;
  const ::std::string& queryid() const;
  void set_queryid(const ::std::string& value);
  #if LANG_CXX11
  void set_queryid(::std::string&& value);
  #endif
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  ::std::string* mutable_queryid();
  ::std::string* release_queryid();
  void set_allocated_queryid(::std::string* queryid);

  // required string pixelNum = 2;
  bool has_pixelnum() const;
  void clear_pixelnum();
  static const int kPixelNumFieldNumber = 2;
  const ::std::string& pixelnum() const;
  void set_pixelnum(const ::std::string& value);
  #if LANG_CXX11
  void set_pixelnum(::std::string&& value);
  #endif
  void set_pixelnum(const char* value);
  void set_pixelnum(const char* value, size_t size);
  ::std::string* mutable_pixelnum();
  ::std::string* release_pixelnum();
  void set_allocated_pixelnum(::std::string* pixelnum);

  // optional string ip = 5;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 5;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required string pixelLocation = 6;
  bool has_pixellocation() const;
  void clear_pixellocation();
  static const int kPixelLocationFieldNumber = 6;
  const ::std::string& pixellocation() const;
  void set_pixellocation(const ::std::string& value);
  #if LANG_CXX11
  void set_pixellocation(::std::string&& value);
  #endif
  void set_pixellocation(const char* value);
  void set_pixellocation(const char* value, size_t size);
  ::std::string* mutable_pixellocation();
  ::std::string* release_pixellocation();
  void set_allocated_pixellocation(::std::string* pixellocation);

  // optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::ru::mail::go::webbase::ranking::ParamList& parameters() const;
  ::ru::mail::go::webbase::ranking::ParamList* mutable_parameters();
  ::ru::mail::go::webbase::ranking::ParamList* release_parameters();
  void set_allocated_parameters(::ru::mail::go::webbase::ranking::ParamList* parameters);

  // required uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.ranking.AccessLogRecord)
 private:
  void set_has_queryid();
  void clear_has_queryid();
  void set_has_pixelnum();
  void clear_has_pixelnum();
  void set_has_time();
  void clear_has_time();
  void set_has_parameters();
  void clear_has_parameters();
  void set_has_ip();
  void clear_has_ip();
  void set_has_pixellocation();
  void clear_has_pixellocation();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr queryid_;
  ::google::protobuf::internal::ArenaStringPtr pixelnum_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr pixellocation_;
  ::ru::mail::go::webbase::ranking::ParamList* parameters_;
  ::google::protobuf::uint64 time_;
  friend struct protobuf_urllog_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerpLogRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.ranking.SerpLogRecord) */ {
 public:
  SerpLogRecord();
  virtual ~SerpLogRecord();

  SerpLogRecord(const SerpLogRecord& from);

  inline SerpLogRecord& operator=(const SerpLogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerpLogRecord(SerpLogRecord&& from) noexcept
    : SerpLogRecord() {
    *this = ::std::move(from);
  }

  inline SerpLogRecord& operator=(SerpLogRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerpLogRecord& default_instance();

  static inline const SerpLogRecord* internal_default_instance() {
    return reinterpret_cast<const SerpLogRecord*>(
               &_SerpLogRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SerpLogRecord* other);
  friend void swap(SerpLogRecord& a, SerpLogRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerpLogRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  SerpLogRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerpLogRecord& from);
  void MergeFrom(const SerpLogRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerpLogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string queryId = 1;
  bool has_queryid() const;
  void clear_queryid();
  static const int kQueryIdFieldNumber = 1;
  const ::std::string& queryid() const;
  void set_queryid(const ::std::string& value);
  #if LANG_CXX11
  void set_queryid(::std::string&& value);
  #endif
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  ::std::string* mutable_queryid();
  ::std::string* release_queryid();
  void set_allocated_queryid(::std::string* queryid);

  // optional string serp = 3;
  bool has_serp() const;
  void clear_serp();
  static const int kSerpFieldNumber = 3;
  const ::std::string& serp() const;
  void set_serp(const ::std::string& value);
  #if LANG_CXX11
  void set_serp(::std::string&& value);
  #endif
  void set_serp(const char* value);
  void set_serp(const char* value, size_t size);
  ::std::string* mutable_serp();
  ::std::string* release_serp();
  void set_allocated_serp(::std::string* serp);

  // required uint64 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.ranking.SerpLogRecord)
 private:
  void set_has_queryid();
  void clear_has_queryid();
  void set_has_time();
  void clear_has_time();
  void set_has_serp();
  void clear_has_serp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr queryid_;
  ::google::protobuf::internal::ArenaStringPtr serp_;
  ::google::protobuf::uint64 time_;
  friend struct protobuf_urllog_5frecord_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UrlLogRecord

// required string queryId = 1;
inline bool UrlLogRecord::has_queryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UrlLogRecord::set_has_queryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UrlLogRecord::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UrlLogRecord::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
inline const ::std::string& UrlLogRecord::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
  return queryid_.GetNoArena();
}
inline void UrlLogRecord::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}
#if LANG_CXX11
inline void UrlLogRecord::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}
#endif
inline void UrlLogRecord::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}
inline void UrlLogRecord::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}
inline ::std::string* UrlLogRecord::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UrlLogRecord::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UrlLogRecord::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.UrlLogRecord.queryId)
}

// repeated string url = 2;
inline int UrlLogRecord::url_size() const {
  return url_.size();
}
inline void UrlLogRecord::clear_url() {
  url_.Clear();
}
inline const ::std::string& UrlLogRecord::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return url_.Get(index);
}
inline ::std::string* UrlLogRecord::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return url_.Mutable(index);
}
inline void UrlLogRecord::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UrlLogRecord::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UrlLogRecord::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
inline void UrlLogRecord::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
inline ::std::string* UrlLogRecord::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return url_.Add();
}
inline void UrlLogRecord::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
#if LANG_CXX11
inline void UrlLogRecord::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
#endif
inline void UrlLogRecord::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
inline void UrlLogRecord::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.ranking.UrlLogRecord.url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlLogRecord::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UrlLogRecord::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.ranking.UrlLogRecord.url)
  return &url_;
}

// optional uint64 time = 3;
inline bool UrlLogRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UrlLogRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UrlLogRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UrlLogRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 UrlLogRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.time)
  return time_;
}
inline void UrlLogRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.time)
}

// optional .ru.mail.go.webbase.ranking.UrlLogRecord.Type type = 4 [default = MAIN];
inline bool UrlLogRecord::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UrlLogRecord::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UrlLogRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UrlLogRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::ranking::UrlLogRecord_Type UrlLogRecord::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.type)
  return static_cast< ::ru::mail::go::webbase::ranking::UrlLogRecord_Type >(type_);
}
inline void UrlLogRecord::set_type(::ru::mail::go::webbase::ranking::UrlLogRecord_Type value) {
  assert(::ru::mail::go::webbase::ranking::UrlLogRecord_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.type)
}

// optional uint32 pos = 5;
inline bool UrlLogRecord::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UrlLogRecord::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UrlLogRecord::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UrlLogRecord::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 UrlLogRecord::pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.pos)
  return pos_;
}
inline void UrlLogRecord::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.pos)
}

// optional string data = 6;
inline bool UrlLogRecord::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UrlLogRecord::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UrlLogRecord::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UrlLogRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& UrlLogRecord::data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.UrlLogRecord.data)
  return data_.GetNoArena();
}
inline void UrlLogRecord::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}
#if LANG_CXX11
inline void UrlLogRecord::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}
#endif
inline void UrlLogRecord::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}
inline void UrlLogRecord::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}
inline ::std::string* UrlLogRecord::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.UrlLogRecord.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UrlLogRecord::release_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.UrlLogRecord.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UrlLogRecord::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.UrlLogRecord.data)
}

// -------------------------------------------------------------------

// ParamList

// repeated string paramName = 1;
inline int ParamList::paramname_size() const {
  return paramname_.size();
}
inline void ParamList::clear_paramname() {
  paramname_.Clear();
}
inline const ::std::string& ParamList::paramname(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.ParamList.paramName)
  return paramname_.Get(index);
}
inline ::std::string* ParamList::mutable_paramname(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.ParamList.paramName)
  return paramname_.Mutable(index);
}
inline void ParamList::set_paramname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.ParamList.paramName)
  paramname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParamList::set_paramname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.ParamList.paramName)
  paramname_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParamList::set_paramname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.ParamList.paramName)
}
inline void ParamList::set_paramname(int index, const char* value, size_t size) {
  paramname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.ParamList.paramName)
}
inline ::std::string* ParamList::add_paramname() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.ranking.ParamList.paramName)
  return paramname_.Add();
}
inline void ParamList::add_paramname(const ::std::string& value) {
  paramname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.ParamList.paramName)
}
#if LANG_CXX11
inline void ParamList::add_paramname(::std::string&& value) {
  paramname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.ParamList.paramName)
}
#endif
inline void ParamList::add_paramname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.ranking.ParamList.paramName)
}
inline void ParamList::add_paramname(const char* value, size_t size) {
  paramname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.ranking.ParamList.paramName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParamList::paramname() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.ranking.ParamList.paramName)
  return paramname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParamList::mutable_paramname() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.ranking.ParamList.paramName)
  return &paramname_;
}

// repeated string paramValue = 2;
inline int ParamList::paramvalue_size() const {
  return paramvalue_.size();
}
inline void ParamList::clear_paramvalue() {
  paramvalue_.Clear();
}
inline const ::std::string& ParamList::paramvalue(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return paramvalue_.Get(index);
}
inline ::std::string* ParamList::mutable_paramvalue(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return paramvalue_.Mutable(index);
}
inline void ParamList::set_paramvalue(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.ParamList.paramValue)
  paramvalue_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParamList::set_paramvalue(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.ParamList.paramValue)
  paramvalue_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParamList::set_paramvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
inline void ParamList::set_paramvalue(int index, const char* value, size_t size) {
  paramvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
inline ::std::string* ParamList::add_paramvalue() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return paramvalue_.Add();
}
inline void ParamList::add_paramvalue(const ::std::string& value) {
  paramvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
#if LANG_CXX11
inline void ParamList::add_paramvalue(::std::string&& value) {
  paramvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
#endif
inline void ParamList::add_paramvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
inline void ParamList::add_paramvalue(const char* value, size_t size) {
  paramvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.ranking.ParamList.paramValue)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParamList::paramvalue() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return paramvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParamList::mutable_paramvalue() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.ranking.ParamList.paramValue)
  return &paramvalue_;
}

// -------------------------------------------------------------------

// BartertownLogRecord

// required string queryId = 1;
inline bool BartertownLogRecord::has_queryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BartertownLogRecord::set_has_queryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BartertownLogRecord::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BartertownLogRecord::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
inline const ::std::string& BartertownLogRecord::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
  return queryid_.GetNoArena();
}
inline void BartertownLogRecord::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}
#if LANG_CXX11
inline void BartertownLogRecord::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}
#endif
inline void BartertownLogRecord::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}
inline void BartertownLogRecord::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}
inline ::std::string* BartertownLogRecord::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BartertownLogRecord::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BartertownLogRecord::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.BartertownLogRecord.queryId)
}

// required string query = 2;
inline bool BartertownLogRecord::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BartertownLogRecord::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BartertownLogRecord::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BartertownLogRecord::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& BartertownLogRecord::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
  return query_.GetNoArena();
}
inline void BartertownLogRecord::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}
#if LANG_CXX11
inline void BartertownLogRecord::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}
#endif
inline void BartertownLogRecord::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}
inline void BartertownLogRecord::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}
inline ::std::string* BartertownLogRecord::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BartertownLogRecord::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BartertownLogRecord::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.BartertownLogRecord.query)
}

// required uint64 time = 3;
inline bool BartertownLogRecord::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BartertownLogRecord::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BartertownLogRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BartertownLogRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 BartertownLogRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.BartertownLogRecord.time)
  return time_;
}
inline void BartertownLogRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.BartertownLogRecord.time)
}

// optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
inline bool BartertownLogRecord::has_parameters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BartertownLogRecord::set_has_parameters() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BartertownLogRecord::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BartertownLogRecord::clear_parameters() {
  if (parameters_ != NULL) parameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_parameters();
}
inline const ::ru::mail::go::webbase::ranking::ParamList& BartertownLogRecord::parameters() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = parameters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.BartertownLogRecord.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
inline ::ru::mail::go::webbase::ranking::ParamList* BartertownLogRecord::mutable_parameters() {
  set_has_parameters();
  if (parameters_ == NULL) {
    parameters_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.BartertownLogRecord.parameters)
  return parameters_;
}
inline ::ru::mail::go::webbase::ranking::ParamList* BartertownLogRecord::release_parameters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.BartertownLogRecord.parameters)
  clear_has_parameters();
  ::ru::mail::go::webbase::ranking::ParamList* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void BartertownLogRecord::set_allocated_parameters(::ru::mail::go::webbase::ranking::ParamList* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.BartertownLogRecord.parameters)
}

// -------------------------------------------------------------------

// AccessLogRecord

// required string queryId = 1;
inline bool AccessLogRecord::has_queryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessLogRecord::set_has_queryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccessLogRecord::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccessLogRecord::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
inline const ::std::string& AccessLogRecord::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
  return queryid_.GetNoArena();
}
inline void AccessLogRecord::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}
#if LANG_CXX11
inline void AccessLogRecord::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}
#endif
inline void AccessLogRecord::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}
inline void AccessLogRecord::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}
inline ::std::string* AccessLogRecord::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessLogRecord::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessLogRecord::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.queryId)
}

// required string pixelNum = 2;
inline bool AccessLogRecord::has_pixelnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccessLogRecord::set_has_pixelnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccessLogRecord::clear_has_pixelnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccessLogRecord::clear_pixelnum() {
  pixelnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pixelnum();
}
inline const ::std::string& AccessLogRecord::pixelnum() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
  return pixelnum_.GetNoArena();
}
inline void AccessLogRecord::set_pixelnum(const ::std::string& value) {
  set_has_pixelnum();
  pixelnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}
#if LANG_CXX11
inline void AccessLogRecord::set_pixelnum(::std::string&& value) {
  set_has_pixelnum();
  pixelnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}
#endif
inline void AccessLogRecord::set_pixelnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pixelnum();
  pixelnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}
inline void AccessLogRecord::set_pixelnum(const char* value, size_t size) {
  set_has_pixelnum();
  pixelnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}
inline ::std::string* AccessLogRecord::mutable_pixelnum() {
  set_has_pixelnum();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
  return pixelnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessLogRecord::release_pixelnum() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
  clear_has_pixelnum();
  return pixelnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessLogRecord::set_allocated_pixelnum(::std::string* pixelnum) {
  if (pixelnum != NULL) {
    set_has_pixelnum();
  } else {
    clear_has_pixelnum();
  }
  pixelnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pixelnum);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.pixelNum)
}

// required uint64 time = 3;
inline bool AccessLogRecord::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccessLogRecord::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccessLogRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccessLogRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 AccessLogRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.time)
  return time_;
}
inline void AccessLogRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.time)
}

// optional .ru.mail.go.webbase.ranking.ParamList parameters = 4;
inline bool AccessLogRecord::has_parameters() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccessLogRecord::set_has_parameters() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccessLogRecord::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccessLogRecord::clear_parameters() {
  if (parameters_ != NULL) parameters_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_parameters();
}
inline const ::ru::mail::go::webbase::ranking::ParamList& AccessLogRecord::parameters() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = parameters_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
inline ::ru::mail::go::webbase::ranking::ParamList* AccessLogRecord::mutable_parameters() {
  set_has_parameters();
  if (parameters_ == NULL) {
    parameters_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.parameters)
  return parameters_;
}
inline ::ru::mail::go::webbase::ranking::ParamList* AccessLogRecord::release_parameters() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.parameters)
  clear_has_parameters();
  ::ru::mail::go::webbase::ranking::ParamList* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void AccessLogRecord::set_allocated_parameters(::ru::mail::go::webbase::ranking::ParamList* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.parameters)
}

// optional string ip = 5;
inline bool AccessLogRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccessLogRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccessLogRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccessLogRecord::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& AccessLogRecord::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
  return ip_.GetNoArena();
}
inline void AccessLogRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}
#if LANG_CXX11
inline void AccessLogRecord::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}
#endif
inline void AccessLogRecord::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}
inline void AccessLogRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}
inline ::std::string* AccessLogRecord::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessLogRecord::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessLogRecord::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.ip)
}

// required string pixelLocation = 6;
inline bool AccessLogRecord::has_pixellocation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccessLogRecord::set_has_pixellocation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccessLogRecord::clear_has_pixellocation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccessLogRecord::clear_pixellocation() {
  pixellocation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pixellocation();
}
inline const ::std::string& AccessLogRecord::pixellocation() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
  return pixellocation_.GetNoArena();
}
inline void AccessLogRecord::set_pixellocation(const ::std::string& value) {
  set_has_pixellocation();
  pixellocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}
#if LANG_CXX11
inline void AccessLogRecord::set_pixellocation(::std::string&& value) {
  set_has_pixellocation();
  pixellocation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}
#endif
inline void AccessLogRecord::set_pixellocation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pixellocation();
  pixellocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}
inline void AccessLogRecord::set_pixellocation(const char* value, size_t size) {
  set_has_pixellocation();
  pixellocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}
inline ::std::string* AccessLogRecord::mutable_pixellocation() {
  set_has_pixellocation();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
  return pixellocation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessLogRecord::release_pixellocation() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
  clear_has_pixellocation();
  return pixellocation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessLogRecord::set_allocated_pixellocation(::std::string* pixellocation) {
  if (pixellocation != NULL) {
    set_has_pixellocation();
  } else {
    clear_has_pixellocation();
  }
  pixellocation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pixellocation);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.AccessLogRecord.pixelLocation)
}

// -------------------------------------------------------------------

// SerpLogRecord

// required string queryId = 1;
inline bool SerpLogRecord::has_queryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerpLogRecord::set_has_queryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerpLogRecord::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerpLogRecord::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queryid();
}
inline const ::std::string& SerpLogRecord::queryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
  return queryid_.GetNoArena();
}
inline void SerpLogRecord::set_queryid(const ::std::string& value) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}
#if LANG_CXX11
inline void SerpLogRecord::set_queryid(::std::string&& value) {
  set_has_queryid();
  queryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}
#endif
inline void SerpLogRecord::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}
inline void SerpLogRecord::set_queryid(const char* value, size_t size) {
  set_has_queryid();
  queryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}
inline ::std::string* SerpLogRecord::mutable_queryid() {
  set_has_queryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
  return queryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpLogRecord::release_queryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
  clear_has_queryid();
  return queryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpLogRecord::set_allocated_queryid(::std::string* queryid) {
  if (queryid != NULL) {
    set_has_queryid();
  } else {
    clear_has_queryid();
  }
  queryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.SerpLogRecord.queryId)
}

// required uint64 time = 2;
inline bool SerpLogRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerpLogRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SerpLogRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SerpLogRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 SerpLogRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.SerpLogRecord.time)
  return time_;
}
inline void SerpLogRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.SerpLogRecord.time)
}

// optional string serp = 3;
inline bool SerpLogRecord::has_serp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerpLogRecord::set_has_serp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerpLogRecord::clear_has_serp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerpLogRecord::clear_serp() {
  serp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serp();
}
inline const ::std::string& SerpLogRecord::serp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
  return serp_.GetNoArena();
}
inline void SerpLogRecord::set_serp(const ::std::string& value) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}
#if LANG_CXX11
inline void SerpLogRecord::set_serp(::std::string&& value) {
  set_has_serp();
  serp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}
#endif
inline void SerpLogRecord::set_serp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}
inline void SerpLogRecord::set_serp(const char* value, size_t size) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}
inline ::std::string* SerpLogRecord::mutable_serp() {
  set_has_serp();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
  return serp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpLogRecord::release_serp() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
  clear_has_serp();
  return serp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpLogRecord::set_allocated_serp(::std::string* serp) {
  if (serp != NULL) {
    set_has_serp();
  } else {
    clear_has_serp();
  }
  serp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serp);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.ranking.SerpLogRecord.serp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ranking
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::ranking::UrlLogRecord_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::ranking::UrlLogRecord_Type>() {
  return ::ru::mail::go::webbase::ranking::UrlLogRecord_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_urllog_5frecord_2eproto__INCLUDED
