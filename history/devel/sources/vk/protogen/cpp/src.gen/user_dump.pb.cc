// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_dump.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_dump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace userhistory {
class UserInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserInfo>
     _instance;
} _UserInfo_default_instance_;
class QSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QSession>
     _instance;
} _QSession_default_instance_;

namespace protobuf_user_5fdump_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sessions_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSession, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSession, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QSession, search_engine_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(UserInfo)},
  { 9, 17, sizeof(QSession)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QSession_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "user_dump.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UserInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserInfo_default_instance_);_QSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QSession_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017user_dump.proto\022\036ru.mail.go.webbase.us"
      "erhistory\"S\n\010UserInfo\022\013\n\003vid\030\001 \002(\t\022:\n\010se"
      "ssions\030\002 \003(\0132(.ru.mail.go.webbase.userhi"
      "story.QSession\">\n\010QSession\022\014\n\004time\030\001 \002(\004"
      "\022\r\n\005query\030\002 \002(\t\022\025\n\rsearch_engine\030\003 \002(\tB\n"
      "B\010UserDump"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_dump.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_user_5fdump_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kVidFieldNumber;
const int UserInfo::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fdump_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vid()) {
    vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.UserInfo)
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  vid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_user_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fdump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfo& UserInfo::default_instance() {
  protobuf_user_5fdump_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  if (has_vid()) {
    GOOGLE_DCHECK(!vid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*vid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string vid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vid().data(), static_cast<int>(this->vid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.UserInfo.vid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.userhistory.QSession sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string vid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.UserInfo.vid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vid(), output);
  }

  // repeated .ru.mail.go.webbase.userhistory.QSession sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sessions(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string vid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.UserInfo.vid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vid(), target);
  }

  // repeated .ru.mail.go.webbase.userhistory.QSession sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.UserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string vid = 1;
  if (has_vid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vid());
  }
  // repeated .ru.mail.go.webbase.userhistory.QSession sessions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  if (from.has_vid()) {
    set_has_vid();
    vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sessions())) return false;
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  sessions_.InternalSwap(&other->sessions_);
  vid_.Swap(&other->vid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_user_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fdump_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// required string vid = 1;
bool UserInfo::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfo::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfo::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
const ::std::string& UserInfo::vid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.UserInfo.vid)
  return vid_.GetNoArena();
}
void UserInfo::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.UserInfo.vid)
}
#if LANG_CXX11
void UserInfo::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.UserInfo.vid)
}
#endif
void UserInfo::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.UserInfo.vid)
}
void UserInfo::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.UserInfo.vid)
}
::std::string* UserInfo::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.UserInfo.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_vid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.UserInfo.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.UserInfo.vid)
}

// repeated .ru.mail.go.webbase.userhistory.QSession sessions = 2;
int UserInfo::sessions_size() const {
  return sessions_.size();
}
void UserInfo::clear_sessions() {
  sessions_.Clear();
}
const ::ru::mail::go::webbase::userhistory::QSession& UserInfo::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return sessions_.Get(index);
}
::ru::mail::go::webbase::userhistory::QSession* UserInfo::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return sessions_.Mutable(index);
}
::ru::mail::go::webbase::userhistory::QSession* UserInfo::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QSession >*
UserInfo::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QSession >&
UserInfo::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return sessions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QSession::kTimeFieldNumber;
const int QSession::kQueryFieldNumber;
const int QSession::kSearchEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QSession::QSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fdump_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.QSession)
}
QSession::QSession(const QSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  search_engine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_engine()) {
    search_engine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_engine_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.QSession)
}

void QSession::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_engine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

QSession::~QSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.QSession)
  SharedDtor();
}

void QSession::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_engine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QSession::descriptor() {
  protobuf_user_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fdump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QSession& QSession::default_instance() {
  protobuf_user_5fdump_2eproto::InitDefaults();
  return *internal_default_instance();
}

QSession* QSession::New(::google::protobuf::Arena* arena) const {
  QSession* n = new QSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.QSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!search_engine_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*search_engine_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.QSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.QSession.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string search_engine = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_engine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_engine().data(), static_cast<int>(this->search_engine().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.QSession.search_engine");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.QSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.QSession)
  return false;
#undef DO_
}

void QSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.QSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QSession.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // required string search_engine = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_engine().data(), static_cast<int>(this->search_engine().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QSession.search_engine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->search_engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.QSession)
}

::google::protobuf::uint8* QSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.QSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QSession.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // required string search_engine = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_engine().data(), static_cast<int>(this->search_engine().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QSession.search_engine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->search_engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.QSession)
  return target;
}

size_t QSession::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.userhistory.QSession)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_search_engine()) {
    // required string search_engine = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search_engine());
  }

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t QSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.QSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string query = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required string search_engine = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search_engine());

    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.QSession)
  GOOGLE_DCHECK_NE(&from, this);
  const QSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.QSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.QSession)
    MergeFrom(*source);
  }
}

void QSession::MergeFrom(const QSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.QSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_search_engine();
      search_engine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_engine_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.QSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QSession::CopyFrom(const QSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.QSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void QSession::Swap(QSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QSession::InternalSwap(QSession* other) {
  using std::swap;
  query_.Swap(&other->query_);
  search_engine_.Swap(&other->search_engine_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QSession::GetMetadata() const {
  protobuf_user_5fdump_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fdump_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QSession

// required uint64 time = 1;
bool QSession::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QSession::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void QSession::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void QSession::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 QSession::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QSession.time)
  return time_;
}
void QSession::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QSession.time)
}

// required string query = 2;
bool QSession::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QSession::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void QSession::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void QSession::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& QSession::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QSession.query)
  return query_.GetNoArena();
}
void QSession::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QSession.query)
}
#if LANG_CXX11
void QSession::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QSession.query)
}
#endif
void QSession::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QSession.query)
}
void QSession::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QSession.query)
}
::std::string* QSession::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QSession.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QSession::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QSession.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QSession::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QSession.query)
}

// required string search_engine = 3;
bool QSession::has_search_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QSession::set_has_search_engine() {
  _has_bits_[0] |= 0x00000002u;
}
void QSession::clear_has_search_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
void QSession::clear_search_engine() {
  search_engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_engine();
}
const ::std::string& QSession::search_engine() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QSession.search_engine)
  return search_engine_.GetNoArena();
}
void QSession::set_search_engine(const ::std::string& value) {
  set_has_search_engine();
  search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QSession.search_engine)
}
#if LANG_CXX11
void QSession::set_search_engine(::std::string&& value) {
  set_has_search_engine();
  search_engine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QSession.search_engine)
}
#endif
void QSession::set_search_engine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_engine();
  search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QSession.search_engine)
}
void QSession::set_search_engine(const char* value, size_t size) {
  set_has_search_engine();
  search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QSession.search_engine)
}
::std::string* QSession::mutable_search_engine() {
  set_has_search_engine();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QSession.search_engine)
  return search_engine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QSession::release_search_engine() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QSession.search_engine)
  clear_has_search_engine();
  return search_engine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QSession::set_allocated_search_engine(::std::string* search_engine) {
  if (search_engine != NULL) {
    set_has_search_engine();
  } else {
    clear_has_search_engine();
  }
  search_engine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_engine);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QSession.search_engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userhistory
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
