// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_dump.proto

#ifndef PROTOBUF_user_5fdump_2eproto__INCLUDED
#define PROTOBUF_user_5fdump_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace userhistory {
class QSession;
class QSessionDefaultTypeInternal;
extern QSessionDefaultTypeInternal _QSession_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace userhistory
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace userhistory {

namespace protobuf_user_5fdump_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_user_5fdump_2eproto

// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.userhistory.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.userhistory.QSession sessions = 2;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 2;
  const ::ru::mail::go::webbase::userhistory::QSession& sessions(int index) const;
  ::ru::mail::go::webbase::userhistory::QSession* mutable_sessions(int index);
  ::ru::mail::go::webbase::userhistory::QSession* add_sessions();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QSession >*
      mutable_sessions();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QSession >&
      sessions() const;

  // required string vid = 1;
  bool has_vid() const;
  void clear_vid();
  static const int kVidFieldNumber = 1;
  const ::std::string& vid() const;
  void set_vid(const ::std::string& value);
  #if LANG_CXX11
  void set_vid(::std::string&& value);
  #endif
  void set_vid(const char* value);
  void set_vid(const char* value, size_t size);
  ::std::string* mutable_vid();
  ::std::string* release_vid();
  void set_allocated_vid(::std::string* vid);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.userhistory.UserInfo)
 private:
  void set_has_vid();
  void clear_has_vid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QSession > sessions_;
  ::google::protobuf::internal::ArenaStringPtr vid_;
  friend struct protobuf_user_5fdump_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.userhistory.QSession) */ {
 public:
  QSession();
  virtual ~QSession();

  QSession(const QSession& from);

  inline QSession& operator=(const QSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QSession(QSession&& from) noexcept
    : QSession() {
    *this = ::std::move(from);
  }

  inline QSession& operator=(QSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QSession& default_instance();

  static inline const QSession* internal_default_instance() {
    return reinterpret_cast<const QSession*>(
               &_QSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(QSession* other);
  friend void swap(QSession& a, QSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QSession* New() const PROTOBUF_FINAL { return New(NULL); }

  QSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QSession& from);
  void MergeFrom(const QSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // required string search_engine = 3;
  bool has_search_engine() const;
  void clear_search_engine();
  static const int kSearchEngineFieldNumber = 3;
  const ::std::string& search_engine() const;
  void set_search_engine(const ::std::string& value);
  #if LANG_CXX11
  void set_search_engine(::std::string&& value);
  #endif
  void set_search_engine(const char* value);
  void set_search_engine(const char* value, size_t size);
  ::std::string* mutable_search_engine();
  ::std::string* release_search_engine();
  void set_allocated_search_engine(::std::string* search_engine);

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.userhistory.QSession)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_query();
  void clear_has_query();
  void set_has_search_engine();
  void clear_has_search_engine();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr search_engine_;
  ::google::protobuf::uint64 time_;
  friend struct protobuf_user_5fdump_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// required string vid = 1;
inline bool UserInfo::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
inline const ::std::string& UserInfo::vid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.UserInfo.vid)
  return vid_.GetNoArena();
}
inline void UserInfo::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.UserInfo.vid)
}
#if LANG_CXX11
inline void UserInfo::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.UserInfo.vid)
}
#endif
inline void UserInfo::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.UserInfo.vid)
}
inline void UserInfo::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.UserInfo.vid)
}
inline ::std::string* UserInfo::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.UserInfo.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_vid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.UserInfo.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.UserInfo.vid)
}

// repeated .ru.mail.go.webbase.userhistory.QSession sessions = 2;
inline int UserInfo::sessions_size() const {
  return sessions_.size();
}
inline void UserInfo::clear_sessions() {
  sessions_.Clear();
}
inline const ::ru::mail::go::webbase::userhistory::QSession& UserInfo::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return sessions_.Get(index);
}
inline ::ru::mail::go::webbase::userhistory::QSession* UserInfo::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return sessions_.Mutable(index);
}
inline ::ru::mail::go::webbase::userhistory::QSession* UserInfo::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QSession >*
UserInfo::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return &sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QSession >&
UserInfo::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.userhistory.UserInfo.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// QSession

// required uint64 time = 1;
inline bool QSession::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QSession::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QSession::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QSession::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 QSession::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QSession.time)
  return time_;
}
inline void QSession::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QSession.time)
}

// required string query = 2;
inline bool QSession::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QSession::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QSession::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QSession::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& QSession::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QSession.query)
  return query_.GetNoArena();
}
inline void QSession::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QSession.query)
}
#if LANG_CXX11
inline void QSession::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QSession.query)
}
#endif
inline void QSession::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QSession.query)
}
inline void QSession::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QSession.query)
}
inline ::std::string* QSession::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QSession.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QSession::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QSession.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QSession::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QSession.query)
}

// required string search_engine = 3;
inline bool QSession::has_search_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QSession::set_has_search_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QSession::clear_has_search_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QSession::clear_search_engine() {
  search_engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_engine();
}
inline const ::std::string& QSession::search_engine() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QSession.search_engine)
  return search_engine_.GetNoArena();
}
inline void QSession::set_search_engine(const ::std::string& value) {
  set_has_search_engine();
  search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QSession.search_engine)
}
#if LANG_CXX11
inline void QSession::set_search_engine(::std::string&& value) {
  set_has_search_engine();
  search_engine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QSession.search_engine)
}
#endif
inline void QSession::set_search_engine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_engine();
  search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QSession.search_engine)
}
inline void QSession::set_search_engine(const char* value, size_t size) {
  set_has_search_engine();
  search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QSession.search_engine)
}
inline ::std::string* QSession::mutable_search_engine() {
  set_has_search_engine();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QSession.search_engine)
  return search_engine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QSession::release_search_engine() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QSession.search_engine)
  clear_has_search_engine();
  return search_engine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QSession::set_allocated_search_engine(::std::string* search_engine) {
  if (search_engine != NULL) {
    set_has_search_engine();
  } else {
    clear_has_search_engine();
  }
  search_engine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_engine);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QSession.search_engine)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace userhistory
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fdump_2eproto__INCLUDED
