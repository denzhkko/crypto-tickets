// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_history.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace userhistory {
class DayHistoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DayHistory>
     _instance;
} _DayHistory_default_instance_;
class SuperSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuperSession>
     _instance;
} _SuperSession_default_instance_;
class LogicalSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogicalSession>
     _instance;
} _LogicalSession_default_instance_;
class QuerySessionInLogicalSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QuerySessionInLogicalSession>
     _instance;
} _QuerySessionInLogicalSession_default_instance_;
class QuerySessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QuerySession>
     _instance;
} _QuerySession_default_instance_;
class ClickDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Click>
     _instance;
} _Click_default_instance_;
class FeaturesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Features>
     _instance;
} _Features_default_instance_;
class KeyValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeyValue>
     _instance;
} _KeyValue_default_instance_;
class UserQuerySessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserQuerySession>
     _instance;
} _UserQuerySession_default_instance_;
class ExpiredInterestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExpiredInterest>
     _instance;
} _ExpiredInterest_default_instance_;

namespace protobuf_user_5fhistory_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayHistory, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayHistory, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayHistory, sessions_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperSession, logicalsessions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalSession, qsils_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionInLogicalSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionInLogicalSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionInLogicalSession, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionInLogicalSession, withnext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySessionInLogicalSession, issplit_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, sessioninfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, startfrom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, spcq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, urls_data_),
  6,
  0,
  1,
  ~0u,
  5,
  2,
  ~0u,
  7,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Click, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, features_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuerySession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuerySession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuerySession, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuerySession, query_session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuerySession, id_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpiredInterest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpiredInterest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpiredInterest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpiredInterest, interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpiredInterest, id_type_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(DayHistory)},
  { 11, 17, sizeof(SuperSession)},
  { 18, 24, sizeof(LogicalSession)},
  { 25, 33, sizeof(QuerySessionInLogicalSession)},
  { 36, 51, sizeof(QuerySession)},
  { 61, 68, sizeof(Click)},
  { 70, 76, sizeof(Features)},
  { 77, 84, sizeof(KeyValue)},
  { 86, 94, sizeof(UserQuerySession)},
  { 97, 105, sizeof(ExpiredInterest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DayHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuperSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogicalSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuerySessionInLogicalSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuerySession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Click_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Features_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserQuerySession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExpiredInterest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "user_history.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::ranking::protobuf_urllog_5frecord_2eproto::InitDefaults();
  _DayHistory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DayHistory_default_instance_);_SuperSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuperSession_default_instance_);_LogicalSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogicalSession_default_instance_);_QuerySessionInLogicalSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QuerySessionInLogicalSession_default_instance_);_QuerySession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QuerySession_default_instance_);_Click_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Click_default_instance_);_Features_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Features_default_instance_);_KeyValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeyValue_default_instance_);_UserQuerySession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserQuerySession_default_instance_);_ExpiredInterest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExpiredInterest_default_instance_);_QuerySessionInLogicalSession_default_instance_._instance.get_mutable()->query_ = const_cast< ::ru::mail::go::webbase::userhistory::QuerySession*>(
      ::ru::mail::go::webbase::userhistory::QuerySession::internal_default_instance());
  _QuerySession_default_instance_._instance.get_mutable()->sessioninfo_ = const_cast< ::ru::mail::go::webbase::ranking::ParamList*>(
      ::ru::mail::go::webbase::ranking::ParamList::internal_default_instance());
  _UserQuerySession_default_instance_._instance.get_mutable()->query_session_ = const_cast< ::ru::mail::go::webbase::userhistory::QuerySession*>(
      ::ru::mail::go::webbase::userhistory::QuerySession::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022user_history.proto\022\036ru.mail.go.webbase"
      ".userhistory\032\023urllog_record.proto\"i\n\nDay"
      "History\022\014\n\004date\030\001 \002(\t\022\r\n\005email\030\002 \001(\t\022>\n\010"
      "sessions\030\003 \003(\0132,.ru.mail.go.webbase.user"
      "history.QuerySession\"W\n\014SuperSession\022G\n\017"
      "logicalSessions\030\001 \003(\0132..ru.mail.go.webba"
      "se.userhistory.LogicalSession\"\300\001\n\016Logica"
      "lSession\022K\n\005qsils\030\001 \003(\0132<.ru.mail.go.web"
      "base.userhistory.QuerySessionInLogicalSe"
      "ssion\"a\n\020SplitMergeReason\022\014\n\010time_gap\020\001\022"
      "\016\n\nurls_match\020\002\022\022\n\016simple_pattern\020\003\022\r\n\tg"
      "eometric\020\004\022\014\n\010min_time\020\005\"\277\001\n\034QuerySessio"
      "nInLogicalSession\022;\n\005query\030\001 \002(\0132,.ru.ma"
      "il.go.webbase.userhistory.QuerySession\022Q"
      "\n\010withNext\030\002 \002(\0162\?.ru.mail.go.webbase.us"
      "erhistory.LogicalSession.SplitMergeReaso"
      "n\022\017\n\007isSplit\030\003 \002(\010\"\373\001\n\014QuerySession\022\014\n\004t"
      "ime\030\001 \002(\004\022\n\n\002ip\030\002 \002(\t\022\r\n\005query\030\003 \002(\t\0225\n\006"
      "clicks\030\004 \003(\0132%.ru.mail.go.webbase.userhi"
      "story.Click\022:\n\013sessionInfo\030\005 \001(\0132%.ru.ma"
      "il.go.webbase.ranking.ParamList\022\r\n\005email"
      "\030\006 \001(\t\022\014\n\004urls\030\007 \003(\t\022\021\n\tstartFrom\030\010 \001(\r\022"
      "\014\n\004spcq\030\t \001(\t\022\021\n\turls_data\030\n \001(\t\"\"\n\005Clic"
      "k\022\014\n\004time\030\001 \002(\004\022\013\n\003url\030\002 \002(\t\"F\n\010Features"
      "\022:\n\010features\030\001 \003(\0132(.ru.mail.go.webbase."
      "userhistory.KeyValue\"(\n\010KeyValue\022\r\n\005fiel"
      "d\030\001 \002(\t\022\r\n\005value\030\002 \002(\002\"\341\001\n\020UserQuerySess"
      "ion\022\n\n\002id\030\001 \002(\t\022C\n\rquery_session\030\002 \002(\0132,"
      ".ru.mail.go.webbase.userhistory.QuerySes"
      "sion\022O\n\007id_type\030\003 \001(\01629.ru.mail.go.webba"
      "se.userhistory.UserQuerySession.id_types"
      ":\003vid\"+\n\010id_types\022\007\n\003vid\020\000\022\010\n\004liru\020\001\022\014\n\010"
      "youla_id\020\002\"\254\001\n\017ExpiredInterest\022\n\n\002id\030\001 \002"
      "(\t\022\020\n\010interest\030\002 \002(\t\022N\n\007id_type\030\003 \001(\01628."
      "ru.mail.go.webbase.userhistory.ExpiredIn"
      "terest.id_types:\003vid\"+\n\010id_types\022\007\n\003vid\020"
      "\000\022\010\n\004liru\020\001\022\014\n\010youla_id\020\002B\rB\013UserHistory"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_history.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::ranking::protobuf_urllog_5frecord_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_user_5fhistory_2eproto

const ::google::protobuf::EnumDescriptor* LogicalSession_SplitMergeReason_descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_enum_descriptors[0];
}
bool LogicalSession_SplitMergeReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogicalSession_SplitMergeReason LogicalSession::time_gap;
const LogicalSession_SplitMergeReason LogicalSession::urls_match;
const LogicalSession_SplitMergeReason LogicalSession::simple_pattern;
const LogicalSession_SplitMergeReason LogicalSession::geometric;
const LogicalSession_SplitMergeReason LogicalSession::min_time;
const LogicalSession_SplitMergeReason LogicalSession::SplitMergeReason_MIN;
const LogicalSession_SplitMergeReason LogicalSession::SplitMergeReason_MAX;
const int LogicalSession::SplitMergeReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserQuerySession_id_types_descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_enum_descriptors[1];
}
bool UserQuerySession_id_types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserQuerySession_id_types UserQuerySession::vid;
const UserQuerySession_id_types UserQuerySession::liru;
const UserQuerySession_id_types UserQuerySession::youla_id;
const UserQuerySession_id_types UserQuerySession::id_types_MIN;
const UserQuerySession_id_types UserQuerySession::id_types_MAX;
const int UserQuerySession::id_types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExpiredInterest_id_types_descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_enum_descriptors[2];
}
bool ExpiredInterest_id_types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExpiredInterest_id_types ExpiredInterest::vid;
const ExpiredInterest_id_types ExpiredInterest::liru;
const ExpiredInterest_id_types ExpiredInterest::youla_id;
const ExpiredInterest_id_types ExpiredInterest::id_types_MIN;
const ExpiredInterest_id_types ExpiredInterest::id_types_MAX;
const int ExpiredInterest::id_types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DayHistory::kDateFieldNumber;
const int DayHistory::kEmailFieldNumber;
const int DayHistory::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DayHistory::DayHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.DayHistory)
}
DayHistory::DayHistory(const DayHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.DayHistory)
}

void DayHistory::SharedCtor() {
  _cached_size_ = 0;
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DayHistory::~DayHistory() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.DayHistory)
  SharedDtor();
}

void DayHistory::SharedDtor() {
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DayHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayHistory::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DayHistory& DayHistory::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

DayHistory* DayHistory::New(::google::protobuf::Arena* arena) const {
  DayHistory* n = new DayHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DayHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.DayHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*date_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DayHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.DayHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.DayHistory.date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.DayHistory.email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.userhistory.QuerySession sessions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.DayHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.DayHistory)
  return false;
#undef DO_
}

void DayHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.DayHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string date = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.DayHistory.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->date(), output);
  }

  // optional string email = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.DayHistory.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->email(), output);
  }

  // repeated .ru.mail.go.webbase.userhistory.QuerySession sessions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sessions(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.DayHistory)
}

::google::protobuf::uint8* DayHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.DayHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string date = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.DayHistory.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->date(), target);
  }

  // optional string email = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.DayHistory.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->email(), target);
  }

  // repeated .ru.mail.go.webbase.userhistory.QuerySession sessions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.DayHistory)
  return target;
}

size_t DayHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.DayHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string date = 1;
  if (has_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }
  // repeated .ru.mail.go.webbase.userhistory.QuerySession sessions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(static_cast<int>(i)));
    }
  }

  // optional string email = 2;
  if (has_email()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.DayHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const DayHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DayHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.DayHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.DayHistory)
    MergeFrom(*source);
  }
}

void DayHistory::MergeFrom(const DayHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.DayHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
  }
}

void DayHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.DayHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayHistory::CopyFrom(const DayHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.DayHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sessions())) return false;
  return true;
}

void DayHistory::Swap(DayHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DayHistory::InternalSwap(DayHistory* other) {
  using std::swap;
  sessions_.InternalSwap(&other->sessions_);
  date_.Swap(&other->date_);
  email_.Swap(&other->email_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DayHistory::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DayHistory

// required string date = 1;
bool DayHistory::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DayHistory::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void DayHistory::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void DayHistory::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
const ::std::string& DayHistory::date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.DayHistory.date)
  return date_.GetNoArena();
}
void DayHistory::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.DayHistory.date)
}
#if LANG_CXX11
void DayHistory::set_date(::std::string&& value) {
  set_has_date();
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.DayHistory.date)
}
#endif
void DayHistory::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.DayHistory.date)
}
void DayHistory::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.DayHistory.date)
}
::std::string* DayHistory::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.DayHistory.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DayHistory::release_date() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.DayHistory.date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DayHistory::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.DayHistory.date)
}

// optional string email = 2;
bool DayHistory::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DayHistory::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
void DayHistory::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
void DayHistory::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& DayHistory::email() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.DayHistory.email)
  return email_.GetNoArena();
}
void DayHistory::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.DayHistory.email)
}
#if LANG_CXX11
void DayHistory::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.DayHistory.email)
}
#endif
void DayHistory::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.DayHistory.email)
}
void DayHistory::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.DayHistory.email)
}
::std::string* DayHistory::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.DayHistory.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DayHistory::release_email() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.DayHistory.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DayHistory::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.DayHistory.email)
}

// repeated .ru.mail.go.webbase.userhistory.QuerySession sessions = 3;
int DayHistory::sessions_size() const {
  return sessions_.size();
}
void DayHistory::clear_sessions() {
  sessions_.Clear();
}
const ::ru::mail::go::webbase::userhistory::QuerySession& DayHistory::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.DayHistory.sessions)
  return sessions_.Get(index);
}
::ru::mail::go::webbase::userhistory::QuerySession* DayHistory::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.DayHistory.sessions)
  return sessions_.Mutable(index);
}
::ru::mail::go::webbase::userhistory::QuerySession* DayHistory::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.DayHistory.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QuerySession >*
DayHistory::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.userhistory.DayHistory.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QuerySession >&
DayHistory::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.userhistory.DayHistory.sessions)
  return sessions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuperSession::kLogicalSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuperSession::SuperSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.SuperSession)
}
SuperSession::SuperSession(const SuperSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      logicalsessions_(from.logicalsessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.SuperSession)
}

void SuperSession::SharedCtor() {
  _cached_size_ = 0;
}

SuperSession::~SuperSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.SuperSession)
  SharedDtor();
}

void SuperSession::SharedDtor() {
}

void SuperSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperSession::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuperSession& SuperSession::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuperSession* SuperSession::New(::google::protobuf::Arena* arena) const {
  SuperSession* n = new SuperSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuperSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.SuperSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logicalsessions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuperSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.SuperSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.userhistory.LogicalSession logicalSessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logicalsessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.SuperSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.SuperSession)
  return false;
#undef DO_
}

void SuperSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.SuperSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.userhistory.LogicalSession logicalSessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logicalsessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logicalsessions(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.SuperSession)
}

::google::protobuf::uint8* SuperSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.SuperSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.userhistory.LogicalSession logicalSessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logicalsessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->logicalsessions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.SuperSession)
  return target;
}

size_t SuperSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.SuperSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.userhistory.LogicalSession logicalSessions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->logicalsessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logicalsessions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.SuperSession)
  GOOGLE_DCHECK_NE(&from, this);
  const SuperSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuperSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.SuperSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.SuperSession)
    MergeFrom(*source);
  }
}

void SuperSession::MergeFrom(const SuperSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.SuperSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logicalsessions_.MergeFrom(from.logicalsessions_);
}

void SuperSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.SuperSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperSession::CopyFrom(const SuperSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.SuperSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperSession::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->logicalsessions())) return false;
  return true;
}

void SuperSession::Swap(SuperSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuperSession::InternalSwap(SuperSession* other) {
  using std::swap;
  logicalsessions_.InternalSwap(&other->logicalsessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuperSession::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuperSession

// repeated .ru.mail.go.webbase.userhistory.LogicalSession logicalSessions = 1;
int SuperSession::logicalsessions_size() const {
  return logicalsessions_.size();
}
void SuperSession::clear_logicalsessions() {
  logicalsessions_.Clear();
}
const ::ru::mail::go::webbase::userhistory::LogicalSession& SuperSession::logicalsessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.SuperSession.logicalSessions)
  return logicalsessions_.Get(index);
}
::ru::mail::go::webbase::userhistory::LogicalSession* SuperSession::mutable_logicalsessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.SuperSession.logicalSessions)
  return logicalsessions_.Mutable(index);
}
::ru::mail::go::webbase::userhistory::LogicalSession* SuperSession::add_logicalsessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.SuperSession.logicalSessions)
  return logicalsessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::LogicalSession >*
SuperSession::mutable_logicalsessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.userhistory.SuperSession.logicalSessions)
  return &logicalsessions_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::LogicalSession >&
SuperSession::logicalsessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.userhistory.SuperSession.logicalSessions)
  return logicalsessions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalSession::kQsilsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalSession::LogicalSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.LogicalSession)
}
LogicalSession::LogicalSession(const LogicalSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      qsils_(from.qsils_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.LogicalSession)
}

void LogicalSession::SharedCtor() {
  _cached_size_ = 0;
}

LogicalSession::~LogicalSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.LogicalSession)
  SharedDtor();
}

void LogicalSession::SharedDtor() {
}

void LogicalSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicalSession::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogicalSession& LogicalSession::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogicalSession* LogicalSession::New(::google::protobuf::Arena* arena) const {
  LogicalSession* n = new LogicalSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicalSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.LogicalSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qsils_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogicalSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.LogicalSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession qsils = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qsils()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.LogicalSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.LogicalSession)
  return false;
#undef DO_
}

void LogicalSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.LogicalSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession qsils = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qsils_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qsils(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.LogicalSession)
}

::google::protobuf::uint8* LogicalSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.LogicalSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession qsils = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qsils_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->qsils(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.LogicalSession)
  return target;
}

size_t LogicalSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.LogicalSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession qsils = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->qsils_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qsils(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicalSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.LogicalSession)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicalSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.LogicalSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.LogicalSession)
    MergeFrom(*source);
  }
}

void LogicalSession::MergeFrom(const LogicalSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.LogicalSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qsils_.MergeFrom(from.qsils_);
}

void LogicalSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.LogicalSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalSession::CopyFrom(const LogicalSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.LogicalSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalSession::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->qsils())) return false;
  return true;
}

void LogicalSession::Swap(LogicalSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalSession::InternalSwap(LogicalSession* other) {
  using std::swap;
  qsils_.InternalSwap(&other->qsils_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogicalSession::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicalSession

// repeated .ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession qsils = 1;
int LogicalSession::qsils_size() const {
  return qsils_.size();
}
void LogicalSession::clear_qsils() {
  qsils_.Clear();
}
const ::ru::mail::go::webbase::userhistory::QuerySessionInLogicalSession& LogicalSession::qsils(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.LogicalSession.qsils)
  return qsils_.Get(index);
}
::ru::mail::go::webbase::userhistory::QuerySessionInLogicalSession* LogicalSession::mutable_qsils(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.LogicalSession.qsils)
  return qsils_.Mutable(index);
}
::ru::mail::go::webbase::userhistory::QuerySessionInLogicalSession* LogicalSession::add_qsils() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.LogicalSession.qsils)
  return qsils_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QuerySessionInLogicalSession >*
LogicalSession::mutable_qsils() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.userhistory.LogicalSession.qsils)
  return &qsils_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::QuerySessionInLogicalSession >&
LogicalSession::qsils() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.userhistory.LogicalSession.qsils)
  return qsils_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuerySessionInLogicalSession::kQueryFieldNumber;
const int QuerySessionInLogicalSession::kWithNextFieldNumber;
const int QuerySessionInLogicalSession::kIsSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuerySessionInLogicalSession::QuerySessionInLogicalSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
}
QuerySessionInLogicalSession::QuerySessionInLogicalSession(const QuerySessionInLogicalSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query()) {
    query_ = new ::ru::mail::go::webbase::userhistory::QuerySession(*from.query_);
  } else {
    query_ = NULL;
  }
  ::memcpy(&issplit_, &from.issplit_,
    static_cast<size_t>(reinterpret_cast<char*>(&withnext_) -
    reinterpret_cast<char*>(&issplit_)) + sizeof(withnext_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
}

void QuerySessionInLogicalSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issplit_) -
      reinterpret_cast<char*>(&query_)) + sizeof(issplit_));
  withnext_ = 1;
}

QuerySessionInLogicalSession::~QuerySessionInLogicalSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  SharedDtor();
}

void QuerySessionInLogicalSession::SharedDtor() {
  if (this != internal_default_instance()) delete query_;
}

void QuerySessionInLogicalSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySessionInLogicalSession::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuerySessionInLogicalSession& QuerySessionInLogicalSession::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuerySessionInLogicalSession* QuerySessionInLogicalSession::New(::google::protobuf::Arena* arena) const {
  QuerySessionInLogicalSession* n = new QuerySessionInLogicalSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuerySessionInLogicalSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_query()) {
    GOOGLE_DCHECK(query_ != NULL);
    query_->::ru::mail::go::webbase::userhistory::QuerySession::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    issplit_ = false;
    withnext_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuerySessionInLogicalSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.userhistory.QuerySession query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.userhistory.LogicalSession.SplitMergeReason withNext = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::userhistory::LogicalSession_SplitMergeReason_IsValid(value)) {
            set_withnext(static_cast< ::ru::mail::go::webbase::userhistory::LogicalSession_SplitMergeReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isSplit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_issplit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issplit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  return false;
#undef DO_
}

void QuerySessionInLogicalSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.userhistory.QuerySession query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->query_, output);
  }

  // required .ru.mail.go.webbase.userhistory.LogicalSession.SplitMergeReason withNext = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->withnext(), output);
  }

  // required bool isSplit = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->issplit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
}

::google::protobuf::uint8* QuerySessionInLogicalSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.userhistory.QuerySession query = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->query_, deterministic, target);
  }

  // required .ru.mail.go.webbase.userhistory.LogicalSession.SplitMergeReason withNext = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->withnext(), target);
  }

  // required bool isSplit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->issplit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  return target;
}

size_t QuerySessionInLogicalSession::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  size_t total_size = 0;

  if (has_query()) {
    // required .ru.mail.go.webbase.userhistory.QuerySession query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_);
  }

  if (has_issplit()) {
    // required bool isSplit = 3;
    total_size += 1 + 1;
  }

  if (has_withnext()) {
    // required .ru.mail.go.webbase.userhistory.LogicalSession.SplitMergeReason withNext = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->withnext());
  }

  return total_size;
}
size_t QuerySessionInLogicalSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ru.mail.go.webbase.userhistory.QuerySession query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_);

    // required bool isSplit = 3;
    total_size += 1 + 1;

    // required .ru.mail.go.webbase.userhistory.LogicalSession.SplitMergeReason withNext = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->withnext());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySessionInLogicalSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySessionInLogicalSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuerySessionInLogicalSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
    MergeFrom(*source);
  }
}

void QuerySessionInLogicalSession::MergeFrom(const QuerySessionInLogicalSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_query()->::ru::mail::go::webbase::userhistory::QuerySession::MergeFrom(from.query());
    }
    if (cached_has_bits & 0x00000002u) {
      issplit_ = from.issplit_;
    }
    if (cached_has_bits & 0x00000004u) {
      withnext_ = from.withnext_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuerySessionInLogicalSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySessionInLogicalSession::CopyFrom(const QuerySessionInLogicalSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySessionInLogicalSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_query()) {
    if (!this->query_->IsInitialized()) return false;
  }
  return true;
}

void QuerySessionInLogicalSession::Swap(QuerySessionInLogicalSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuerySessionInLogicalSession::InternalSwap(QuerySessionInLogicalSession* other) {
  using std::swap;
  swap(query_, other->query_);
  swap(issplit_, other->issplit_);
  swap(withnext_, other->withnext_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuerySessionInLogicalSession::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuerySessionInLogicalSession

// required .ru.mail.go.webbase.userhistory.QuerySession query = 1;
bool QuerySessionInLogicalSession::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuerySessionInLogicalSession::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void QuerySessionInLogicalSession::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuerySessionInLogicalSession::clear_query() {
  if (query_ != NULL) query_->::ru::mail::go::webbase::userhistory::QuerySession::Clear();
  clear_has_query();
}
const ::ru::mail::go::webbase::userhistory::QuerySession& QuerySessionInLogicalSession::query() const {
  const ::ru::mail::go::webbase::userhistory::QuerySession* p = query_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession.query)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::userhistory::QuerySession*>(
      &::ru::mail::go::webbase::userhistory::_QuerySession_default_instance_);
}
::ru::mail::go::webbase::userhistory::QuerySession* QuerySessionInLogicalSession::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::ru::mail::go::webbase::userhistory::QuerySession;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession.query)
  return query_;
}
::ru::mail::go::webbase::userhistory::QuerySession* QuerySessionInLogicalSession::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession.query)
  clear_has_query();
  ::ru::mail::go::webbase::userhistory::QuerySession* temp = query_;
  query_ = NULL;
  return temp;
}
void QuerySessionInLogicalSession::set_allocated_query(::ru::mail::go::webbase::userhistory::QuerySession* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession.query)
}

// required .ru.mail.go.webbase.userhistory.LogicalSession.SplitMergeReason withNext = 2;
bool QuerySessionInLogicalSession::has_withnext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QuerySessionInLogicalSession::set_has_withnext() {
  _has_bits_[0] |= 0x00000004u;
}
void QuerySessionInLogicalSession::clear_has_withnext() {
  _has_bits_[0] &= ~0x00000004u;
}
void QuerySessionInLogicalSession::clear_withnext() {
  withnext_ = 1;
  clear_has_withnext();
}
::ru::mail::go::webbase::userhistory::LogicalSession_SplitMergeReason QuerySessionInLogicalSession::withnext() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession.withNext)
  return static_cast< ::ru::mail::go::webbase::userhistory::LogicalSession_SplitMergeReason >(withnext_);
}
void QuerySessionInLogicalSession::set_withnext(::ru::mail::go::webbase::userhistory::LogicalSession_SplitMergeReason value) {
  assert(::ru::mail::go::webbase::userhistory::LogicalSession_SplitMergeReason_IsValid(value));
  set_has_withnext();
  withnext_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession.withNext)
}

// required bool isSplit = 3;
bool QuerySessionInLogicalSession::has_issplit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuerySessionInLogicalSession::set_has_issplit() {
  _has_bits_[0] |= 0x00000002u;
}
void QuerySessionInLogicalSession::clear_has_issplit() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuerySessionInLogicalSession::clear_issplit() {
  issplit_ = false;
  clear_has_issplit();
}
bool QuerySessionInLogicalSession::issplit() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession.isSplit)
  return issplit_;
}
void QuerySessionInLogicalSession::set_issplit(bool value) {
  set_has_issplit();
  issplit_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySessionInLogicalSession.isSplit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuerySession::kTimeFieldNumber;
const int QuerySession::kIpFieldNumber;
const int QuerySession::kQueryFieldNumber;
const int QuerySession::kClicksFieldNumber;
const int QuerySession::kSessionInfoFieldNumber;
const int QuerySession::kEmailFieldNumber;
const int QuerySession::kUrlsFieldNumber;
const int QuerySession::kStartFromFieldNumber;
const int QuerySession::kSpcqFieldNumber;
const int QuerySession::kUrlsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuerySession::QuerySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.QuerySession)
}
QuerySession::QuerySession(const QuerySession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      clicks_(from.clicks_),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  spcq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spcq()) {
    spcq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spcq_);
  }
  urls_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_urls_data()) {
    urls_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urls_data_);
  }
  if (from.has_sessioninfo()) {
    sessioninfo_ = new ::ru::mail::go::webbase::ranking::ParamList(*from.sessioninfo_);
  } else {
    sessioninfo_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&startfrom_) -
    reinterpret_cast<char*>(&time_)) + sizeof(startfrom_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.QuerySession)
}

void QuerySession::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spcq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urls_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessioninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startfrom_) -
      reinterpret_cast<char*>(&sessioninfo_)) + sizeof(startfrom_));
}

QuerySession::~QuerySession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.QuerySession)
  SharedDtor();
}

void QuerySession::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spcq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urls_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sessioninfo_;
}

void QuerySession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySession::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuerySession& QuerySession::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuerySession* QuerySession::New(::google::protobuf::Arena* arena) const {
  QuerySession* n = new QuerySession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuerySession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.QuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clicks_.Clear();
  urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!spcq_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*spcq_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!urls_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*urls_data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sessioninfo_ != NULL);
      sessioninfo_->::ru::mail::go::webbase::ranking::ParamList::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startfrom_) -
        reinterpret_cast<char*>(&time_)) + sizeof(startfrom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuerySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.QuerySession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.QuerySession.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string query = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.QuerySession.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.userhistory.Click clicks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clicks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.QuerySession.email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string urls = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.QuerySession.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 startFrom = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_startfrom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startfrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string spcq = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spcq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->spcq().data(), static_cast<int>(this->spcq().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.QuerySession.spcq");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string urls_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urls_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls_data().data(), static_cast<int>(this->urls_data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.QuerySession.urls_data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.QuerySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.QuerySession)
  return false;
#undef DO_
}

void QuerySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.QuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // required string query = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->query(), output);
  }

  // repeated .ru.mail.go.webbase.userhistory.Click clicks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clicks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clicks(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sessioninfo_, output);
  }

  // optional string email = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->email(), output);
  }

  // repeated string urls = 7;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->urls(i), output);
  }

  // optional uint32 startFrom = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->startfrom(), output);
  }

  // optional string spcq = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spcq().data(), static_cast<int>(this->spcq().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.spcq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->spcq(), output);
  }

  // optional string urls_data = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls_data().data(), static_cast<int>(this->urls_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.urls_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->urls_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.QuerySession)
}

::google::protobuf::uint8* QuerySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.QuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required string query = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query(), target);
  }

  // repeated .ru.mail.go.webbase.userhistory.Click clicks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clicks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->clicks(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->sessioninfo_, deterministic, target);
  }

  // optional string email = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->email(), target);
  }

  // repeated string urls = 7;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->urls(i), target);
  }

  // optional uint32 startFrom = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->startfrom(), target);
  }

  // optional string spcq = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spcq().data(), static_cast<int>(this->spcq().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.spcq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->spcq(), target);
  }

  // optional string urls_data = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls_data().data(), static_cast<int>(this->urls_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.QuerySession.urls_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->urls_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.QuerySession)
  return target;
}

size_t QuerySession::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.userhistory.QuerySession)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_query()) {
    // required string query = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t QuerySession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.QuerySession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000043) ^ 0x00000043) == 0) {  // All required fields are present.
    // required string ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required string query = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.userhistory.Click clicks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->clicks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clicks(static_cast<int>(i)));
    }
  }

  // repeated string urls = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string spcq = 9;
    if (has_spcq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spcq());
    }

    // optional string urls_data = 10;
    if (has_urls_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urls_data());
    }

    // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 5;
    if (has_sessioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sessioninfo_);
    }

  }
  // optional uint32 startFrom = 8;
  if (has_startfrom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startfrom());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.QuerySession)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuerySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.QuerySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.QuerySession)
    MergeFrom(*source);
  }
}

void QuerySession::MergeFrom(const QuerySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.QuerySession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clicks_.MergeFrom(from.clicks_);
  urls_.MergeFrom(from.urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_spcq();
      spcq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spcq_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_urls_data();
      urls_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urls_data_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_sessioninfo()->::ru::mail::go::webbase::ranking::ParamList::MergeFrom(from.sessioninfo());
    }
    if (cached_has_bits & 0x00000040u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000080u) {
      startfrom_ = from.startfrom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuerySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.QuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySession::CopyFrom(const QuerySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.QuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->clicks())) return false;
  return true;
}

void QuerySession::Swap(QuerySession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuerySession::InternalSwap(QuerySession* other) {
  using std::swap;
  clicks_.InternalSwap(&other->clicks_);
  urls_.InternalSwap(&other->urls_);
  ip_.Swap(&other->ip_);
  query_.Swap(&other->query_);
  email_.Swap(&other->email_);
  spcq_.Swap(&other->spcq_);
  urls_data_.Swap(&other->urls_data_);
  swap(sessioninfo_, other->sessioninfo_);
  swap(time_, other->time_);
  swap(startfrom_, other->startfrom_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuerySession::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuerySession

// required uint64 time = 1;
bool QuerySession::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QuerySession::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void QuerySession::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void QuerySession::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 QuerySession::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.time)
  return time_;
}
void QuerySession::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.time)
}

// required string ip = 2;
bool QuerySession::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuerySession::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void QuerySession::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuerySession::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& QuerySession::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.ip)
  return ip_.GetNoArena();
}
void QuerySession::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.ip)
}
#if LANG_CXX11
void QuerySession::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QuerySession.ip)
}
#endif
void QuerySession::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QuerySession.ip)
}
void QuerySession::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QuerySession.ip)
}
::std::string* QuerySession::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySession.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuerySession::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QuerySession.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuerySession::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QuerySession.ip)
}

// required string query = 3;
bool QuerySession::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuerySession::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void QuerySession::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuerySession::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& QuerySession::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.query)
  return query_.GetNoArena();
}
void QuerySession::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.query)
}
#if LANG_CXX11
void QuerySession::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QuerySession.query)
}
#endif
void QuerySession::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QuerySession.query)
}
void QuerySession::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QuerySession.query)
}
::std::string* QuerySession::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySession.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuerySession::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QuerySession.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuerySession::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QuerySession.query)
}

// repeated .ru.mail.go.webbase.userhistory.Click clicks = 4;
int QuerySession::clicks_size() const {
  return clicks_.size();
}
void QuerySession::clear_clicks() {
  clicks_.Clear();
}
const ::ru::mail::go::webbase::userhistory::Click& QuerySession::clicks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.clicks)
  return clicks_.Get(index);
}
::ru::mail::go::webbase::userhistory::Click* QuerySession::mutable_clicks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySession.clicks)
  return clicks_.Mutable(index);
}
::ru::mail::go::webbase::userhistory::Click* QuerySession::add_clicks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.QuerySession.clicks)
  return clicks_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::Click >*
QuerySession::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.userhistory.QuerySession.clicks)
  return &clicks_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::Click >&
QuerySession::clicks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.userhistory.QuerySession.clicks)
  return clicks_;
}

// optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 5;
bool QuerySession::has_sessioninfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QuerySession::set_has_sessioninfo() {
  _has_bits_[0] |= 0x00000020u;
}
void QuerySession::clear_has_sessioninfo() {
  _has_bits_[0] &= ~0x00000020u;
}
void QuerySession::clear_sessioninfo() {
  if (sessioninfo_ != NULL) sessioninfo_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_sessioninfo();
}
const ::ru::mail::go::webbase::ranking::ParamList& QuerySession::sessioninfo() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = sessioninfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.sessionInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
::ru::mail::go::webbase::ranking::ParamList* QuerySession::mutable_sessioninfo() {
  set_has_sessioninfo();
  if (sessioninfo_ == NULL) {
    sessioninfo_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySession.sessionInfo)
  return sessioninfo_;
}
::ru::mail::go::webbase::ranking::ParamList* QuerySession::release_sessioninfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QuerySession.sessionInfo)
  clear_has_sessioninfo();
  ::ru::mail::go::webbase::ranking::ParamList* temp = sessioninfo_;
  sessioninfo_ = NULL;
  return temp;
}
void QuerySession::set_allocated_sessioninfo(::ru::mail::go::webbase::ranking::ParamList* sessioninfo) {
  delete sessioninfo_;
  sessioninfo_ = sessioninfo;
  if (sessioninfo) {
    set_has_sessioninfo();
  } else {
    clear_has_sessioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QuerySession.sessionInfo)
}

// optional string email = 6;
bool QuerySession::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QuerySession::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
void QuerySession::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
void QuerySession::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& QuerySession::email() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.email)
  return email_.GetNoArena();
}
void QuerySession::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.email)
}
#if LANG_CXX11
void QuerySession::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QuerySession.email)
}
#endif
void QuerySession::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QuerySession.email)
}
void QuerySession::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QuerySession.email)
}
::std::string* QuerySession::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySession.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuerySession::release_email() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QuerySession.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuerySession::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QuerySession.email)
}

// repeated string urls = 7;
int QuerySession::urls_size() const {
  return urls_.size();
}
void QuerySession::clear_urls() {
  urls_.Clear();
}
const ::std::string& QuerySession::urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.urls)
  return urls_.Get(index);
}
::std::string* QuerySession::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySession.urls)
  return urls_.Mutable(index);
}
void QuerySession::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void QuerySession::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void QuerySession::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QuerySession.urls)
}
void QuerySession::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QuerySession.urls)
}
::std::string* QuerySession::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.userhistory.QuerySession.urls)
  return urls_.Add();
}
void QuerySession::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.QuerySession.urls)
}
#if LANG_CXX11
void QuerySession::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.QuerySession.urls)
}
#endif
void QuerySession::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.userhistory.QuerySession.urls)
}
void QuerySession::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.userhistory.QuerySession.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
QuerySession::urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.userhistory.QuerySession.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
QuerySession::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.userhistory.QuerySession.urls)
  return &urls_;
}

// optional uint32 startFrom = 8;
bool QuerySession::has_startfrom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QuerySession::set_has_startfrom() {
  _has_bits_[0] |= 0x00000080u;
}
void QuerySession::clear_has_startfrom() {
  _has_bits_[0] &= ~0x00000080u;
}
void QuerySession::clear_startfrom() {
  startfrom_ = 0u;
  clear_has_startfrom();
}
::google::protobuf::uint32 QuerySession::startfrom() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.startFrom)
  return startfrom_;
}
void QuerySession::set_startfrom(::google::protobuf::uint32 value) {
  set_has_startfrom();
  startfrom_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.startFrom)
}

// optional string spcq = 9;
bool QuerySession::has_spcq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QuerySession::set_has_spcq() {
  _has_bits_[0] |= 0x00000008u;
}
void QuerySession::clear_has_spcq() {
  _has_bits_[0] &= ~0x00000008u;
}
void QuerySession::clear_spcq() {
  spcq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spcq();
}
const ::std::string& QuerySession::spcq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.spcq)
  return spcq_.GetNoArena();
}
void QuerySession::set_spcq(const ::std::string& value) {
  set_has_spcq();
  spcq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.spcq)
}
#if LANG_CXX11
void QuerySession::set_spcq(::std::string&& value) {
  set_has_spcq();
  spcq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QuerySession.spcq)
}
#endif
void QuerySession::set_spcq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spcq();
  spcq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QuerySession.spcq)
}
void QuerySession::set_spcq(const char* value, size_t size) {
  set_has_spcq();
  spcq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QuerySession.spcq)
}
::std::string* QuerySession::mutable_spcq() {
  set_has_spcq();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySession.spcq)
  return spcq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuerySession::release_spcq() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QuerySession.spcq)
  clear_has_spcq();
  return spcq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuerySession::set_allocated_spcq(::std::string* spcq) {
  if (spcq != NULL) {
    set_has_spcq();
  } else {
    clear_has_spcq();
  }
  spcq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spcq);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QuerySession.spcq)
}

// optional string urls_data = 10;
bool QuerySession::has_urls_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QuerySession::set_has_urls_data() {
  _has_bits_[0] |= 0x00000010u;
}
void QuerySession::clear_has_urls_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void QuerySession::clear_urls_data() {
  urls_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urls_data();
}
const ::std::string& QuerySession::urls_data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.QuerySession.urls_data)
  return urls_data_.GetNoArena();
}
void QuerySession::set_urls_data(const ::std::string& value) {
  set_has_urls_data();
  urls_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.QuerySession.urls_data)
}
#if LANG_CXX11
void QuerySession::set_urls_data(::std::string&& value) {
  set_has_urls_data();
  urls_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.QuerySession.urls_data)
}
#endif
void QuerySession::set_urls_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urls_data();
  urls_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.QuerySession.urls_data)
}
void QuerySession::set_urls_data(const char* value, size_t size) {
  set_has_urls_data();
  urls_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.QuerySession.urls_data)
}
::std::string* QuerySession::mutable_urls_data() {
  set_has_urls_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.QuerySession.urls_data)
  return urls_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuerySession::release_urls_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.QuerySession.urls_data)
  clear_has_urls_data();
  return urls_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuerySession::set_allocated_urls_data(::std::string* urls_data) {
  if (urls_data != NULL) {
    set_has_urls_data();
  } else {
    clear_has_urls_data();
  }
  urls_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urls_data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.QuerySession.urls_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Click::kTimeFieldNumber;
const int Click::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Click::Click()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.Click)
}
Click::Click(const Click& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.Click)
}

void Click::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

Click::~Click() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.Click)
  SharedDtor();
}

void Click::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Click::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Click::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Click& Click::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

Click* Click::New(::google::protobuf::Arena* arena) const {
  Click* n = new Click;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Click::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Click::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.Click)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.Click.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.Click)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.Click)
  return false;
#undef DO_
}

void Click::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.Click.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.Click)
}

::google::protobuf::uint8* Click::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.Click)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.Click.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.Click)
  return target;
}

size_t Click::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.userhistory.Click)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t Click::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.Click)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Click::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.Click)
  GOOGLE_DCHECK_NE(&from, this);
  const Click* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Click>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.Click)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.Click)
    MergeFrom(*source);
  }
}

void Click::MergeFrom(const Click& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.Click)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Click::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.Click)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Click::CopyFrom(const Click& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.Click)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Click::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Click::Swap(Click* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Click::InternalSwap(Click* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Click::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Click

// required uint64 time = 1;
bool Click::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Click::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Click::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Click::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Click::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.Click.time)
  return time_;
}
void Click::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.Click.time)
}

// required string url = 2;
bool Click::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Click::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Click::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Click::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Click::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.Click.url)
  return url_.GetNoArena();
}
void Click::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.Click.url)
}
#if LANG_CXX11
void Click::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.Click.url)
}
#endif
void Click::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.Click.url)
}
void Click::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.Click.url)
}
::std::string* Click::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.Click.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Click::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.Click.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Click::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.Click.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Features::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Features::Features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.Features)
}
Features::Features(const Features& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.Features)
}

void Features::SharedCtor() {
  _cached_size_ = 0;
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.Features)
  SharedDtor();
}

void Features::SharedDtor() {
}

void Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Features::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Features& Features::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

Features* Features::New(::google::protobuf::Arena* arena) const {
  Features* n = new Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.userhistory.KeyValue features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.Features)
  return false;
#undef DO_
}

void Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.userhistory.KeyValue features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->features(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.Features)
}

::google::protobuf::uint8* Features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.userhistory.KeyValue features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->features(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.Features)
  return target;
}

size_t Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.Features)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.userhistory.KeyValue features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.Features)
  GOOGLE_DCHECK_NE(&from, this);
  const Features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.Features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.Features)
    MergeFrom(*source);
  }
}

void Features::MergeFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.Features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
}

void Features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->features())) return false;
  return true;
}

void Features::Swap(Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Features::InternalSwap(Features* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Features::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Features

// repeated .ru.mail.go.webbase.userhistory.KeyValue features = 1;
int Features::features_size() const {
  return features_.size();
}
void Features::clear_features() {
  features_.Clear();
}
const ::ru::mail::go::webbase::userhistory::KeyValue& Features::features(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.Features.features)
  return features_.Get(index);
}
::ru::mail::go::webbase::userhistory::KeyValue* Features::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.Features.features)
  return features_.Mutable(index);
}
::ru::mail::go::webbase::userhistory::KeyValue* Features::add_features() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.userhistory.Features.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::KeyValue >*
Features::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.userhistory.Features.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::userhistory::KeyValue >&
Features::features() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.userhistory.Features.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kFieldFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field()) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.KeyValue)
}

void KeyValue::SharedCtor() {
  _cached_size_ = 0;
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValue& KeyValue::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_field()) {
    GOOGLE_DCHECK(!field_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*field_.UnsafeRawStringPointer())->clear();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.KeyValue.field");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.KeyValue.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field(), output);
  }

  // required float value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.KeyValue)
}

::google::protobuf::uint8* KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.KeyValue.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // required float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.KeyValue)
  return target;
}

size_t KeyValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.userhistory.KeyValue)
  size_t total_size = 0;

  if (has_field()) {
    // required string field = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  if (has_value()) {
    // required float value = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.KeyValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string field = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());

    // required float value = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_field();
      field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  field_.Swap(&other->field_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// required string field = 1;
bool KeyValue::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyValue::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyValue::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyValue::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field();
}
const ::std::string& KeyValue::field() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.KeyValue.field)
  return field_.GetNoArena();
}
void KeyValue::set_field(const ::std::string& value) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.KeyValue.field)
}
#if LANG_CXX11
void KeyValue::set_field(::std::string&& value) {
  set_has_field();
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.KeyValue.field)
}
#endif
void KeyValue::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.KeyValue.field)
}
void KeyValue::set_field(const char* value, size_t size) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.KeyValue.field)
}
::std::string* KeyValue::mutable_field() {
  set_has_field();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.KeyValue.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_field() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.KeyValue.field)
  clear_has_field();
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    set_has_field();
  } else {
    clear_has_field();
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.KeyValue.field)
}

// required float value = 2;
bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
float KeyValue::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.KeyValue.value)
  return value_;
}
void KeyValue::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.KeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserQuerySession::kIdFieldNumber;
const int UserQuerySession::kQuerySessionFieldNumber;
const int UserQuerySession::kIdTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserQuerySession::UserQuerySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.UserQuerySession)
}
UserQuerySession::UserQuerySession(const UserQuerySession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_query_session()) {
    query_session_ = new ::ru::mail::go::webbase::userhistory::QuerySession(*from.query_session_);
  } else {
    query_session_ = NULL;
  }
  id_type_ = from.id_type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.UserQuerySession)
}

void UserQuerySession::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_type_) -
      reinterpret_cast<char*>(&query_session_)) + sizeof(id_type_));
}

UserQuerySession::~UserQuerySession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.UserQuerySession)
  SharedDtor();
}

void UserQuerySession::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_session_;
}

void UserQuerySession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserQuerySession::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserQuerySession& UserQuerySession::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserQuerySession* UserQuerySession::New(::google::protobuf::Arena* arena) const {
  UserQuerySession* n = new UserQuerySession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserQuerySession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(query_session_ != NULL);
      query_session_->::ru::mail::go::webbase::userhistory::QuerySession::Clear();
    }
  }
  id_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserQuerySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.UserQuerySession.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.userhistory.QuerySession query_session = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.userhistory.UserQuerySession.id_types id_type = 3 [default = vid];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::userhistory::UserQuerySession_id_types_IsValid(value)) {
            set_id_type(static_cast< ::ru::mail::go::webbase::userhistory::UserQuerySession_id_types >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.UserQuerySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.UserQuerySession)
  return false;
#undef DO_
}

void UserQuerySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.UserQuerySession.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .ru.mail.go.webbase.userhistory.QuerySession query_session = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->query_session_, output);
  }

  // optional .ru.mail.go.webbase.userhistory.UserQuerySession.id_types id_type = 3 [default = vid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->id_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.UserQuerySession)
}

::google::protobuf::uint8* UserQuerySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.UserQuerySession.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .ru.mail.go.webbase.userhistory.QuerySession query_session = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->query_session_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.userhistory.UserQuerySession.id_types id_type = 3 [default = vid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->id_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.UserQuerySession)
  return target;
}

size_t UserQuerySession::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_query_session()) {
    // required .ru.mail.go.webbase.userhistory.QuerySession query_session = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_session_);
  }

  return total_size;
}
size_t UserQuerySession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .ru.mail.go.webbase.userhistory.QuerySession query_session = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_session_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ru.mail.go.webbase.userhistory.UserQuerySession.id_types id_type = 3 [default = vid];
  if (has_id_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserQuerySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  GOOGLE_DCHECK_NE(&from, this);
  const UserQuerySession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserQuerySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.UserQuerySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.UserQuerySession)
    MergeFrom(*source);
  }
}

void UserQuerySession::MergeFrom(const UserQuerySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_query_session()->::ru::mail::go::webbase::userhistory::QuerySession::MergeFrom(from.query_session());
    }
    if (cached_has_bits & 0x00000004u) {
      id_type_ = from.id_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserQuerySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQuerySession::CopyFrom(const UserQuerySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.UserQuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQuerySession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_query_session()) {
    if (!this->query_session_->IsInitialized()) return false;
  }
  return true;
}

void UserQuerySession::Swap(UserQuerySession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserQuerySession::InternalSwap(UserQuerySession* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(query_session_, other->query_session_);
  swap(id_type_, other->id_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserQuerySession::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserQuerySession

// required string id = 1;
bool UserQuerySession::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserQuerySession::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserQuerySession::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserQuerySession::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& UserQuerySession::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.UserQuerySession.id)
  return id_.GetNoArena();
}
void UserQuerySession::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.UserQuerySession.id)
}
#if LANG_CXX11
void UserQuerySession::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.UserQuerySession.id)
}
#endif
void UserQuerySession::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.UserQuerySession.id)
}
void UserQuerySession::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.UserQuerySession.id)
}
::std::string* UserQuerySession::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.UserQuerySession.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserQuerySession::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.UserQuerySession.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserQuerySession::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.UserQuerySession.id)
}

// required .ru.mail.go.webbase.userhistory.QuerySession query_session = 2;
bool UserQuerySession::has_query_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserQuerySession::set_has_query_session() {
  _has_bits_[0] |= 0x00000002u;
}
void UserQuerySession::clear_has_query_session() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserQuerySession::clear_query_session() {
  if (query_session_ != NULL) query_session_->::ru::mail::go::webbase::userhistory::QuerySession::Clear();
  clear_has_query_session();
}
const ::ru::mail::go::webbase::userhistory::QuerySession& UserQuerySession::query_session() const {
  const ::ru::mail::go::webbase::userhistory::QuerySession* p = query_session_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.UserQuerySession.query_session)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::userhistory::QuerySession*>(
      &::ru::mail::go::webbase::userhistory::_QuerySession_default_instance_);
}
::ru::mail::go::webbase::userhistory::QuerySession* UserQuerySession::mutable_query_session() {
  set_has_query_session();
  if (query_session_ == NULL) {
    query_session_ = new ::ru::mail::go::webbase::userhistory::QuerySession;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.UserQuerySession.query_session)
  return query_session_;
}
::ru::mail::go::webbase::userhistory::QuerySession* UserQuerySession::release_query_session() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.UserQuerySession.query_session)
  clear_has_query_session();
  ::ru::mail::go::webbase::userhistory::QuerySession* temp = query_session_;
  query_session_ = NULL;
  return temp;
}
void UserQuerySession::set_allocated_query_session(::ru::mail::go::webbase::userhistory::QuerySession* query_session) {
  delete query_session_;
  query_session_ = query_session;
  if (query_session) {
    set_has_query_session();
  } else {
    clear_has_query_session();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.UserQuerySession.query_session)
}

// optional .ru.mail.go.webbase.userhistory.UserQuerySession.id_types id_type = 3 [default = vid];
bool UserQuerySession::has_id_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserQuerySession::set_has_id_type() {
  _has_bits_[0] |= 0x00000004u;
}
void UserQuerySession::clear_has_id_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserQuerySession::clear_id_type() {
  id_type_ = 0;
  clear_has_id_type();
}
::ru::mail::go::webbase::userhistory::UserQuerySession_id_types UserQuerySession::id_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.UserQuerySession.id_type)
  return static_cast< ::ru::mail::go::webbase::userhistory::UserQuerySession_id_types >(id_type_);
}
void UserQuerySession::set_id_type(::ru::mail::go::webbase::userhistory::UserQuerySession_id_types value) {
  assert(::ru::mail::go::webbase::userhistory::UserQuerySession_id_types_IsValid(value));
  set_has_id_type();
  id_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.UserQuerySession.id_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpiredInterest::kIdFieldNumber;
const int ExpiredInterest::kInterestFieldNumber;
const int ExpiredInterest::kIdTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpiredInterest::ExpiredInterest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.userhistory.ExpiredInterest)
}
ExpiredInterest::ExpiredInterest(const ExpiredInterest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  interest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_interest()) {
    interest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interest_);
  }
  id_type_ = from.id_type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.userhistory.ExpiredInterest)
}

void ExpiredInterest::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_type_ = 0;
}

ExpiredInterest::~ExpiredInterest() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.userhistory.ExpiredInterest)
  SharedDtor();
}

void ExpiredInterest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExpiredInterest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpiredInterest::descriptor() {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExpiredInterest& ExpiredInterest::default_instance() {
  protobuf_user_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExpiredInterest* ExpiredInterest::New(::google::protobuf::Arena* arena) const {
  ExpiredInterest* n = new ExpiredInterest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpiredInterest::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!interest_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*interest_.UnsafeRawStringPointer())->clear();
    }
  }
  id_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExpiredInterest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.ExpiredInterest.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string interest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interest().data(), static_cast<int>(this->interest().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.userhistory.ExpiredInterest.interest");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.userhistory.ExpiredInterest.id_types id_type = 3 [default = vid];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::userhistory::ExpiredInterest_id_types_IsValid(value)) {
            set_id_type(static_cast< ::ru::mail::go::webbase::userhistory::ExpiredInterest_id_types >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.userhistory.ExpiredInterest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.userhistory.ExpiredInterest)
  return false;
#undef DO_
}

void ExpiredInterest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.ExpiredInterest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string interest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interest().data(), static_cast<int>(this->interest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.ExpiredInterest.interest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interest(), output);
  }

  // optional .ru.mail.go.webbase.userhistory.ExpiredInterest.id_types id_type = 3 [default = vid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->id_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.userhistory.ExpiredInterest)
}

::google::protobuf::uint8* ExpiredInterest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.ExpiredInterest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string interest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interest().data(), static_cast<int>(this->interest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.userhistory.ExpiredInterest.interest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interest(), target);
  }

  // optional .ru.mail.go.webbase.userhistory.ExpiredInterest.id_types id_type = 3 [default = vid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->id_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.userhistory.ExpiredInterest)
  return target;
}

size_t ExpiredInterest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_interest()) {
    // required string interest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interest());
  }

  return total_size;
}
size_t ExpiredInterest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string interest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interest());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ru.mail.go.webbase.userhistory.ExpiredInterest.id_types id_type = 3 [default = vid];
  if (has_id_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpiredInterest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpiredInterest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpiredInterest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.userhistory.ExpiredInterest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.userhistory.ExpiredInterest)
    MergeFrom(*source);
  }
}

void ExpiredInterest::MergeFrom(const ExpiredInterest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_interest();
      interest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interest_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_type_ = from.id_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExpiredInterest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpiredInterest::CopyFrom(const ExpiredInterest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.userhistory.ExpiredInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpiredInterest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ExpiredInterest::Swap(ExpiredInterest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpiredInterest::InternalSwap(ExpiredInterest* other) {
  using std::swap;
  id_.Swap(&other->id_);
  interest_.Swap(&other->interest_);
  swap(id_type_, other->id_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpiredInterest::GetMetadata() const {
  protobuf_user_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_user_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpiredInterest

// required string id = 1;
bool ExpiredInterest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpiredInterest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpiredInterest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpiredInterest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ExpiredInterest::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.ExpiredInterest.id)
  return id_.GetNoArena();
}
void ExpiredInterest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.ExpiredInterest.id)
}
#if LANG_CXX11
void ExpiredInterest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.ExpiredInterest.id)
}
#endif
void ExpiredInterest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.ExpiredInterest.id)
}
void ExpiredInterest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.ExpiredInterest.id)
}
::std::string* ExpiredInterest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.ExpiredInterest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpiredInterest::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.ExpiredInterest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpiredInterest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.ExpiredInterest.id)
}

// required string interest = 2;
bool ExpiredInterest::has_interest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExpiredInterest::set_has_interest() {
  _has_bits_[0] |= 0x00000002u;
}
void ExpiredInterest::clear_has_interest() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExpiredInterest::clear_interest() {
  interest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_interest();
}
const ::std::string& ExpiredInterest::interest() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.ExpiredInterest.interest)
  return interest_.GetNoArena();
}
void ExpiredInterest::set_interest(const ::std::string& value) {
  set_has_interest();
  interest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.ExpiredInterest.interest)
}
#if LANG_CXX11
void ExpiredInterest::set_interest(::std::string&& value) {
  set_has_interest();
  interest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.userhistory.ExpiredInterest.interest)
}
#endif
void ExpiredInterest::set_interest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_interest();
  interest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.userhistory.ExpiredInterest.interest)
}
void ExpiredInterest::set_interest(const char* value, size_t size) {
  set_has_interest();
  interest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.userhistory.ExpiredInterest.interest)
}
::std::string* ExpiredInterest::mutable_interest() {
  set_has_interest();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.userhistory.ExpiredInterest.interest)
  return interest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpiredInterest::release_interest() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.userhistory.ExpiredInterest.interest)
  clear_has_interest();
  return interest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpiredInterest::set_allocated_interest(::std::string* interest) {
  if (interest != NULL) {
    set_has_interest();
  } else {
    clear_has_interest();
  }
  interest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interest);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.userhistory.ExpiredInterest.interest)
}

// optional .ru.mail.go.webbase.userhistory.ExpiredInterest.id_types id_type = 3 [default = vid];
bool ExpiredInterest::has_id_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExpiredInterest::set_has_id_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ExpiredInterest::clear_has_id_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExpiredInterest::clear_id_type() {
  id_type_ = 0;
  clear_has_id_type();
}
::ru::mail::go::webbase::userhistory::ExpiredInterest_id_types ExpiredInterest::id_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.userhistory.ExpiredInterest.id_type)
  return static_cast< ::ru::mail::go::webbase::userhistory::ExpiredInterest_id_types >(id_type_);
}
void ExpiredInterest::set_id_type(::ru::mail::go::webbase::userhistory::ExpiredInterest_id_types value) {
  assert(::ru::mail::go::webbase::userhistory::ExpiredInterest_id_types_IsValid(value));
  set_has_id_type();
  id_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.userhistory.ExpiredInterest.id_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace userhistory
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
