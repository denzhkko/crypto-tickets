// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uuid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uuid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace utils {
namespace pb {
class UUIDDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UUID>
     _instance;
} _UUID_default_instance_;

namespace protobuf_uuid_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, lower_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, upper_bytes_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(UUID)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UUID_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "uuid.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UUID_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UUID_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nuuid.proto\022\010utils.pb\"0\n\004UUID\022\023\n\013lower_"
      "bytes\030\001 \002(\006\022\023\n\013upper_bytes\030\002 \002(\006B\tB\007IntU"
      "UID"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 83);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uuid.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_uuid_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UUID::kLowerBytesFieldNumber;
const int UUID::kUpperBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UUID::UUID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_uuid_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:utils.pb.UUID)
}
UUID::UUID(const UUID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lower_bytes_, &from.lower_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_bytes_) -
    reinterpret_cast<char*>(&lower_bytes_)) + sizeof(upper_bytes_));
  // @@protoc_insertion_point(copy_constructor:utils.pb.UUID)
}

void UUID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lower_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_bytes_) -
      reinterpret_cast<char*>(&lower_bytes_)) + sizeof(upper_bytes_));
}

UUID::~UUID() {
  // @@protoc_insertion_point(destructor:utils.pb.UUID)
  SharedDtor();
}

void UUID::SharedDtor() {
}

void UUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UUID::descriptor() {
  protobuf_uuid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uuid_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UUID& UUID::default_instance() {
  protobuf_uuid_2eproto::InitDefaults();
  return *internal_default_instance();
}

UUID* UUID::New(::google::protobuf::Arena* arena) const {
  UUID* n = new UUID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UUID::Clear() {
// @@protoc_insertion_point(message_clear_start:utils.pb.UUID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&lower_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upper_bytes_) -
        reinterpret_cast<char*>(&lower_bytes_)) + sizeof(upper_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:utils.pb.UUID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 lower_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_lower_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lower_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 upper_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_upper_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &upper_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:utils.pb.UUID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:utils.pb.UUID)
  return false;
#undef DO_
}

void UUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:utils.pb.UUID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 lower_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lower_bytes(), output);
  }

  // required fixed64 upper_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->upper_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:utils.pb.UUID)
}

::google::protobuf::uint8* UUID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:utils.pb.UUID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 lower_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lower_bytes(), target);
  }

  // required fixed64 upper_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->upper_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:utils.pb.UUID)
  return target;
}

size_t UUID::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:utils.pb.UUID)
  size_t total_size = 0;

  if (has_lower_bytes()) {
    // required fixed64 lower_bytes = 1;
    total_size += 1 + 8;
  }

  if (has_upper_bytes()) {
    // required fixed64 upper_bytes = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UUID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:utils.pb.UUID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed64 lower_bytes = 1;
    total_size += 1 + 8;

    // required fixed64 upper_bytes = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UUID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:utils.pb.UUID)
  GOOGLE_DCHECK_NE(&from, this);
  const UUID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UUID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:utils.pb.UUID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:utils.pb.UUID)
    MergeFrom(*source);
  }
}

void UUID::MergeFrom(const UUID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:utils.pb.UUID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      lower_bytes_ = from.lower_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      upper_bytes_ = from.upper_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UUID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:utils.pb.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUID::CopyFrom(const UUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:utils.pb.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UUID::Swap(UUID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UUID::InternalSwap(UUID* other) {
  using std::swap;
  swap(lower_bytes_, other->lower_bytes_);
  swap(upper_bytes_, other->upper_bytes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UUID::GetMetadata() const {
  protobuf_uuid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_uuid_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UUID

// required fixed64 lower_bytes = 1;
bool UUID::has_lower_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UUID::set_has_lower_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void UUID::clear_has_lower_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void UUID::clear_lower_bytes() {
  lower_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_lower_bytes();
}
::google::protobuf::uint64 UUID::lower_bytes() const {
  // @@protoc_insertion_point(field_get:utils.pb.UUID.lower_bytes)
  return lower_bytes_;
}
void UUID::set_lower_bytes(::google::protobuf::uint64 value) {
  set_has_lower_bytes();
  lower_bytes_ = value;
  // @@protoc_insertion_point(field_set:utils.pb.UUID.lower_bytes)
}

// required fixed64 upper_bytes = 2;
bool UUID::has_upper_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UUID::set_has_upper_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void UUID::clear_has_upper_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void UUID::clear_upper_bytes() {
  upper_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_upper_bytes();
}
::google::protobuf::uint64 UUID::upper_bytes() const {
  // @@protoc_insertion_point(field_get:utils.pb.UUID.upper_bytes)
  return upper_bytes_;
}
void UUID::set_upper_bytes(::google::protobuf::uint64 value) {
  set_has_upper_bytes();
  upper_bytes_ = value;
  // @@protoc_insertion_point(field_set:utils.pb.UUID.upper_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace utils

// @@protoc_insertion_point(global_scope)
