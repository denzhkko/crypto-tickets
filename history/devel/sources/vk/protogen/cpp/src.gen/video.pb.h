// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto

#ifndef PROTOBUF_video_2eproto__INCLUDED
#define PROTOBUF_video_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "document_enums.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class FastVideoImportDoc;
class FastVideoImportDocDefaultTypeInternal;
extern FastVideoImportDocDefaultTypeInternal _FastVideoImportDoc_default_instance_;
class IndexedVideo;
class IndexedVideoDefaultTypeInternal;
extern IndexedVideoDefaultTypeInternal _IndexedVideo_default_instance_;
class MovieMetadata;
class MovieMetadataDefaultTypeInternal;
extern MovieMetadataDefaultTypeInternal _MovieMetadata_default_instance_;
class MoviesClassificationDoc;
class MoviesClassificationDocDefaultTypeInternal;
extern MoviesClassificationDocDefaultTypeInternal _MoviesClassificationDoc_default_instance_;
class RecoBuildInfo;
class RecoBuildInfoDefaultTypeInternal;
extern RecoBuildInfoDefaultTypeInternal _RecoBuildInfo_default_instance_;
class SeriesEpisode;
class SeriesEpisodeDefaultTypeInternal;
extern SeriesEpisodeDefaultTypeInternal _SeriesEpisode_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class VideoImportDoc;
class VideoImportDocDefaultTypeInternal;
extern VideoImportDocDefaultTypeInternal _VideoImportDoc_default_instance_;
class VideoJointWatchesData;
class VideoJointWatchesDataDefaultTypeInternal;
extern VideoJointWatchesDataDefaultTypeInternal _VideoJointWatchesData_default_instance_;
class VideoMarkupDescription;
class VideoMarkupDescriptionDefaultTypeInternal;
extern VideoMarkupDescriptionDefaultTypeInternal _VideoMarkupDescription_default_instance_;
class VideoMarkupHtml5Video;
class VideoMarkupHtml5VideoDefaultTypeInternal;
extern VideoMarkupHtml5VideoDefaultTypeInternal _VideoMarkupHtml5Video_default_instance_;
class VideoMarkupHtmlInput;
class VideoMarkupHtmlInputDefaultTypeInternal;
extern VideoMarkupHtmlInputDefaultTypeInternal _VideoMarkupHtmlInput_default_instance_;
class VideoMarkupOpenGraph;
class VideoMarkupOpenGraphDefaultTypeInternal;
extern VideoMarkupOpenGraphDefaultTypeInternal _VideoMarkupOpenGraph_default_instance_;
class VideoMarkupSchemaOrg;
class VideoMarkupSchemaOrgDefaultTypeInternal;
extern VideoMarkupSchemaOrgDefaultTypeInternal _VideoMarkupSchemaOrg_default_instance_;
class VideoMarkupTwitterCard;
class VideoMarkupTwitterCardDefaultTypeInternal;
extern VideoMarkupTwitterCardDefaultTypeInternal _VideoMarkupTwitterCard_default_instance_;
class VideoThumbnail;
class VideoThumbnailDefaultTypeInternal;
extern VideoThumbnailDefaultTypeInternal _VideoThumbnail_default_instance_;
class VideoView;
class VideoViewDefaultTypeInternal;
extern VideoViewDefaultTypeInternal _VideoView_default_instance_;
class VideoViewForRecs;
class VideoViewForRecsDefaultTypeInternal;
extern VideoViewForRecsDefaultTypeInternal _VideoViewForRecs_default_instance_;
class VideoViewsList;
class VideoViewsListDefaultTypeInternal;
extern VideoViewsListDefaultTypeInternal _VideoViewsList_default_instance_;
class VkSessionOrVideoInfo;
class VkSessionOrVideoInfoDefaultTypeInternal;
extern VkSessionOrVideoInfoDefaultTypeInternal _VkSessionOrVideoInfo_default_instance_;
class VkVideoIds;
class VkVideoIdsDefaultTypeInternal;
extern VkVideoIdsDefaultTypeInternal _VkVideoIds_default_instance_;
class VkVideoSession;
class VkVideoSessionDefaultTypeInternal;
extern VkVideoSessionDefaultTypeInternal _VkVideoSession_default_instance_;
class VkVideoView;
class VkVideoViewDefaultTypeInternal;
extern VkVideoViewDefaultTypeInternal _VkVideoView_default_instance_;
class YouTubeRecommendations;
class YouTubeRecommendationsDefaultTypeInternal;
extern YouTubeRecommendationsDefaultTypeInternal _YouTubeRecommendations_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_video_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_video_2eproto

enum MovieMetadata_MovieStatus {
  MovieMetadata_MovieStatus_CURRENT_MOVIE = 1,
  MovieMetadata_MovieStatus_UPCOMING_MOVIE = 2,
  MovieMetadata_MovieStatus_PAST_MOVIE = 3
};
bool MovieMetadata_MovieStatus_IsValid(int value);
const MovieMetadata_MovieStatus MovieMetadata_MovieStatus_MovieStatus_MIN = MovieMetadata_MovieStatus_CURRENT_MOVIE;
const MovieMetadata_MovieStatus MovieMetadata_MovieStatus_MovieStatus_MAX = MovieMetadata_MovieStatus_PAST_MOVIE;
const int MovieMetadata_MovieStatus_MovieStatus_ARRAYSIZE = MovieMetadata_MovieStatus_MovieStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovieMetadata_MovieStatus_descriptor();
inline const ::std::string& MovieMetadata_MovieStatus_Name(MovieMetadata_MovieStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovieMetadata_MovieStatus_descriptor(), value);
}
inline bool MovieMetadata_MovieStatus_Parse(
    const ::std::string& name, MovieMetadata_MovieStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovieMetadata_MovieStatus>(
    MovieMetadata_MovieStatus_descriptor(), name, value);
}
enum VideoMarkupSchemaOrg_DeclarationType {
  VideoMarkupSchemaOrg_DeclarationType_MICRODATA = 1,
  VideoMarkupSchemaOrg_DeclarationType_RDFA = 2,
  VideoMarkupSchemaOrg_DeclarationType_JSON_LD = 3
};
bool VideoMarkupSchemaOrg_DeclarationType_IsValid(int value);
const VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg_DeclarationType_DeclarationType_MIN = VideoMarkupSchemaOrg_DeclarationType_MICRODATA;
const VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg_DeclarationType_DeclarationType_MAX = VideoMarkupSchemaOrg_DeclarationType_JSON_LD;
const int VideoMarkupSchemaOrg_DeclarationType_DeclarationType_ARRAYSIZE = VideoMarkupSchemaOrg_DeclarationType_DeclarationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoMarkupSchemaOrg_DeclarationType_descriptor();
inline const ::std::string& VideoMarkupSchemaOrg_DeclarationType_Name(VideoMarkupSchemaOrg_DeclarationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoMarkupSchemaOrg_DeclarationType_descriptor(), value);
}
inline bool VideoMarkupSchemaOrg_DeclarationType_Parse(
    const ::std::string& name, VideoMarkupSchemaOrg_DeclarationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoMarkupSchemaOrg_DeclarationType>(
    VideoMarkupSchemaOrg_DeclarationType_descriptor(), name, value);
}
enum LiveVideoState {
  LIVE_UNKNOWN = 0,
  ONLINE = 1,
  RECORD = 2,
  VK_LIVE = 3
};
bool LiveVideoState_IsValid(int value);
const LiveVideoState LiveVideoState_MIN = LIVE_UNKNOWN;
const LiveVideoState LiveVideoState_MAX = VK_LIVE;
const int LiveVideoState_ARRAYSIZE = LiveVideoState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LiveVideoState_descriptor();
inline const ::std::string& LiveVideoState_Name(LiveVideoState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LiveVideoState_descriptor(), value);
}
inline bool LiveVideoState_Parse(
    const ::std::string& name, LiveVideoState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LiveVideoState>(
    LiveVideoState_descriptor(), name, value);
}
enum ProtobufSourceType {
  UNKNOWN = 0,
  ODKL_KAFKA = 1,
  ODKL_KAFKA_ULTRA = 2
};
bool ProtobufSourceType_IsValid(int value);
const ProtobufSourceType ProtobufSourceType_MIN = UNKNOWN;
const ProtobufSourceType ProtobufSourceType_MAX = ODKL_KAFKA_ULTRA;
const int ProtobufSourceType_ARRAYSIZE = ProtobufSourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtobufSourceType_descriptor();
inline const ::std::string& ProtobufSourceType_Name(ProtobufSourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtobufSourceType_descriptor(), value);
}
inline bool ProtobufSourceType_Parse(
    const ::std::string& name, ProtobufSourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtobufSourceType>(
    ProtobufSourceType_descriptor(), name, value);
}
enum ExclusiveProviders {
  NONE = 0,
  NMG_SERIES = 1,
  DORAMA_CHANNEL = 2,
  ANIME_CHANNEL = 3,
  TELESPORT_LALIGA = 4,
  TELESPORT_SERIE_A = 5
};
bool ExclusiveProviders_IsValid(int value);
const ExclusiveProviders ExclusiveProviders_MIN = NONE;
const ExclusiveProviders ExclusiveProviders_MAX = TELESPORT_SERIE_A;
const int ExclusiveProviders_ARRAYSIZE = ExclusiveProviders_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExclusiveProviders_descriptor();
inline const ::std::string& ExclusiveProviders_Name(ExclusiveProviders value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExclusiveProviders_descriptor(), value);
}
inline bool ExclusiveProviders_Parse(
    const ::std::string& name, ExclusiveProviders* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExclusiveProviders>(
    ExclusiveProviders_descriptor(), name, value);
}
enum VideoQualityValue {
  UNDEFINED_QUALITY = 0,
  LOWEST = 1,
  LOW = 2,
  MEDIUM = 3,
  HIGH = 4,
  FULLHD = 5,
  QUADHD = 6,
  ULTRAHD = 7,
  MOBILE = 8
};
bool VideoQualityValue_IsValid(int value);
const VideoQualityValue VideoQualityValue_MIN = UNDEFINED_QUALITY;
const VideoQualityValue VideoQualityValue_MAX = MOBILE;
const int VideoQualityValue_ARRAYSIZE = VideoQualityValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoQualityValue_descriptor();
inline const ::std::string& VideoQualityValue_Name(VideoQualityValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoQualityValue_descriptor(), value);
}
inline bool VideoQualityValue_Parse(
    const ::std::string& name, VideoQualityValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoQualityValue>(
    VideoQualityValue_descriptor(), name, value);
}
enum VideoQueryClass {
  NOT_CLASSIFIED = 0,
  NEWS = 1,
  MOVIE = 2,
  COMMON_MOVIE = 3,
  INFOMOVIE_ACTOR = 4,
  NEW_MOVIE = 5,
  SUPERNEW_MOVIE = 6,
  SERIES_WITH_EPISODE = 7
};
bool VideoQueryClass_IsValid(int value);
const VideoQueryClass VideoQueryClass_MIN = NOT_CLASSIFIED;
const VideoQueryClass VideoQueryClass_MAX = SERIES_WITH_EPISODE;
const int VideoQueryClass_ARRAYSIZE = VideoQueryClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoQueryClass_descriptor();
inline const ::std::string& VideoQueryClass_Name(VideoQueryClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoQueryClass_descriptor(), value);
}
inline bool VideoQueryClass_Parse(
    const ::std::string& name, VideoQueryClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoQueryClass>(
    VideoQueryClass_descriptor(), name, value);
}
enum VideoThumbnailStatus {
  STATUS_INITIAL = 0,
  STATUS_READY = 1,
  STATUS_NETWORK_ERROR = 2,
  STATUS_3XX = 3,
  STATUS_4XX = 4,
  STATUS_5XX = 5,
  STATUS_NOTFOUND = 6,
  STATUS_FORBIDDEN = 7,
  STATUS_UNKNOWN = 8,
  STATUS_SPECIAL_PREVIEW = 9,
  STATUS_BAD_URL = 10,
  STATUS_IMAGE_ERROR = 11,
  STATUS_ADULT_SPECIAL_PREVIEW = 12
};
bool VideoThumbnailStatus_IsValid(int value);
const VideoThumbnailStatus VideoThumbnailStatus_MIN = STATUS_INITIAL;
const VideoThumbnailStatus VideoThumbnailStatus_MAX = STATUS_ADULT_SPECIAL_PREVIEW;
const int VideoThumbnailStatus_ARRAYSIZE = VideoThumbnailStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoThumbnailStatus_descriptor();
inline const ::std::string& VideoThumbnailStatus_Name(VideoThumbnailStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoThumbnailStatus_descriptor(), value);
}
inline bool VideoThumbnailStatus_Parse(
    const ::std::string& name, VideoThumbnailStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoThumbnailStatus>(
    VideoThumbnailStatus_descriptor(), name, value);
}
enum VideoCheckType {
  PREVIEW_ACCESSIBILITY_CHECK = 1,
  PREVIEW_ACCESSIBILITY_RECHECK = 2,
  YOUTUBE_TOP_QUERIES_CHECK = 3,
  YOUTUBE_POPULAR_CHECK = 4,
  YOUTUBE_COMPLETE_CHECK = 5,
  YOUTUBE_WEB_EMBEDDED_CHECK = 6,
  VK_CHECK = 7,
  DESCRIPTION_TEXT_CHECK = 8,
  IMAGEHASH_CHECK = 9,
  HOURLY_CHECK = 10,
  PREVIEW_ACCESSIBILITY_CHECK_V2 = 11,
  BIG_FETCHER_STATUS_CHECK = 12,
  DARK_FETCHER_CHECK = 13,
  HYDRA_CHECK = 14,
  REDIRECT_FOUND_CHECK = 15,
  UPLOAD_CHECK = 16,
  PREVIEW_ACCESSIBILITY_CHECK_DARK = 17
};
bool VideoCheckType_IsValid(int value);
const VideoCheckType VideoCheckType_MIN = PREVIEW_ACCESSIBILITY_CHECK;
const VideoCheckType VideoCheckType_MAX = PREVIEW_ACCESSIBILITY_CHECK_DARK;
const int VideoCheckType_ARRAYSIZE = VideoCheckType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoCheckType_descriptor();
inline const ::std::string& VideoCheckType_Name(VideoCheckType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoCheckType_descriptor(), value);
}
inline bool VideoCheckType_Parse(
    const ::std::string& name, VideoCheckType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoCheckType>(
    VideoCheckType_descriptor(), name, value);
}
enum VideoLiveStreamType {
  VIDEO_LIVE_STREAM_UNKNOWN = 0,
  ODKL_LIVE_TV_APP = 1,
  ODKL_LIVE_TV_ODLK = 2,
  ODKL_LIVE_TV_ODKL = 3,
  VK_LIVE_WAITING = 4,
  VK_LIVE_STARTED = 5,
  VK_LIVE_ENDED = 6,
  VK_LIVE_FAILED = 7,
  VK_LIVE_UPCOMING = 8,
  VK_LIVE_PRE_CHECK = 9,
  VK_LIVE_NOT_STARTED = 10
};
bool VideoLiveStreamType_IsValid(int value);
const VideoLiveStreamType VideoLiveStreamType_MIN = VIDEO_LIVE_STREAM_UNKNOWN;
const VideoLiveStreamType VideoLiveStreamType_MAX = VK_LIVE_NOT_STARTED;
const int VideoLiveStreamType_ARRAYSIZE = VideoLiveStreamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoLiveStreamType_descriptor();
inline const ::std::string& VideoLiveStreamType_Name(VideoLiveStreamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoLiveStreamType_descriptor(), value);
}
inline bool VideoLiveStreamType_Parse(
    const ::std::string& name, VideoLiveStreamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoLiveStreamType>(
    VideoLiveStreamType_descriptor(), name, value);
}
enum DzenCertainGrade {
  DCG_UNKNOWN = 1,
  DCG_SUBSCRIBERS_ONLY = 2,
  DCG_GOOD = 3,
  DCG_BOOST_WEAK = 4,
  DCG_PESSIMIZE_STRONG = 5,
  DCG_PESSIMIZE_WEAK = 6
};
bool DzenCertainGrade_IsValid(int value);
const DzenCertainGrade DzenCertainGrade_MIN = DCG_UNKNOWN;
const DzenCertainGrade DzenCertainGrade_MAX = DCG_PESSIMIZE_WEAK;
const int DzenCertainGrade_ARRAYSIZE = DzenCertainGrade_MAX + 1;

const ::google::protobuf::EnumDescriptor* DzenCertainGrade_descriptor();
inline const ::std::string& DzenCertainGrade_Name(DzenCertainGrade value) {
  return ::google::protobuf::internal::NameOfEnum(
    DzenCertainGrade_descriptor(), value);
}
inline bool DzenCertainGrade_Parse(
    const ::std::string& name, DzenCertainGrade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DzenCertainGrade>(
    DzenCertainGrade_descriptor(), name, value);
}
enum VideoOrientation {
  VO_UNKNOWN = 1,
  VO_HORIZONTAL = 2,
  VO_VERTICAL = 3
};
bool VideoOrientation_IsValid(int value);
const VideoOrientation VideoOrientation_MIN = VO_UNKNOWN;
const VideoOrientation VideoOrientation_MAX = VO_VERTICAL;
const int VideoOrientation_ARRAYSIZE = VideoOrientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoOrientation_descriptor();
inline const ::std::string& VideoOrientation_Name(VideoOrientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoOrientation_descriptor(), value);
}
inline bool VideoOrientation_Parse(
    const ::std::string& name, VideoOrientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoOrientation>(
    VideoOrientation_descriptor(), name, value);
}
enum VideoType {
  VT_UNKNOWN = 1,
  VT_REGULAR = 2,
  VT_SHORT = 3
};
bool VideoType_IsValid(int value);
const VideoType VideoType_MIN = VT_UNKNOWN;
const VideoType VideoType_MAX = VT_SHORT;
const int VideoType_ARRAYSIZE = VideoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoType_descriptor();
inline const ::std::string& VideoType_Name(VideoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoType_descriptor(), value);
}
inline bool VideoType_Parse(
    const ::std::string& name, VideoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoType>(
    VideoType_descriptor(), name, value);
}
enum VideoMarkupType {
  OPEN_GRAPH = 1,
  SCHEMA_ORG = 2,
  TWITTER_CARD = 3,
  HTML5_VIDEO = 4
};
bool VideoMarkupType_IsValid(int value);
const VideoMarkupType VideoMarkupType_MIN = OPEN_GRAPH;
const VideoMarkupType VideoMarkupType_MAX = HTML5_VIDEO;
const int VideoMarkupType_ARRAYSIZE = VideoMarkupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoMarkupType_descriptor();
inline const ::std::string& VideoMarkupType_Name(VideoMarkupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoMarkupType_descriptor(), value);
}
inline bool VideoMarkupType_Parse(
    const ::std::string& name, VideoMarkupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoMarkupType>(
    VideoMarkupType_descriptor(), name, value);
}
// ===================================================================

class VideoThumbnail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoThumbnail) */ {
 public:
  VideoThumbnail();
  virtual ~VideoThumbnail();

  VideoThumbnail(const VideoThumbnail& from);

  inline VideoThumbnail& operator=(const VideoThumbnail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoThumbnail(VideoThumbnail&& from) noexcept
    : VideoThumbnail() {
    *this = ::std::move(from);
  }

  inline VideoThumbnail& operator=(VideoThumbnail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoThumbnail& default_instance();

  static inline const VideoThumbnail* internal_default_instance() {
    return reinterpret_cast<const VideoThumbnail*>(
               &_VideoThumbnail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VideoThumbnail* other);
  friend void swap(VideoThumbnail& a, VideoThumbnail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoThumbnail* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoThumbnail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoThumbnail& from);
  void MergeFrom(const VideoThumbnail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoThumbnail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required string hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // required string video_url = 3;
  bool has_video_url() const;
  void clear_video_url();
  static const int kVideoUrlFieldNumber = 3;
  const ::std::string& video_url() const;
  void set_video_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_url(::std::string&& value);
  #endif
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  ::std::string* mutable_video_url();
  ::std::string* release_video_url();
  void set_allocated_video_url(::std::string* video_url);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoThumbnail)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_hash();
  void clear_has_hash();
  void set_has_video_url();
  void clear_has_video_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr video_url_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const PROTOBUF_FINAL { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional int32 failsCount = 3;
  bool has_failscount() const;
  void clear_failscount();
  static const int kFailsCountFieldNumber = 3;
  ::google::protobuf::int32 failscount() const;
  void set_failscount(::google::protobuf::int32 value);

  // optional .ru.mail.go.webbase.blobs.VideoCheckType checkType = 4;
  bool has_checktype() const;
  void clear_checktype();
  static const int kCheckTypeFieldNumber = 4;
  ::ru::mail::go::webbase::blobs::VideoCheckType checktype() const;
  void set_checktype(::ru::mail::go::webbase::blobs::VideoCheckType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.Status)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_failscount();
  void clear_has_failscount();
  void set_has_checktype();
  void clear_has_checktype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  bool success_;
  ::google::protobuf::int32 failscount_;
  int checktype_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoImportDoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoImportDoc) */ {
 public:
  VideoImportDoc();
  virtual ~VideoImportDoc();

  VideoImportDoc(const VideoImportDoc& from);

  inline VideoImportDoc& operator=(const VideoImportDoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoImportDoc(VideoImportDoc&& from) noexcept
    : VideoImportDoc() {
    *this = ::std::move(from);
  }

  inline VideoImportDoc& operator=(VideoImportDoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoImportDoc& default_instance();

  static inline const VideoImportDoc* internal_default_instance() {
    return reinterpret_cast<const VideoImportDoc*>(
               &_VideoImportDoc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VideoImportDoc* other);
  friend void swap(VideoImportDoc& a, VideoImportDoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoImportDoc* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoImportDoc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoImportDoc& from);
  void MergeFrom(const VideoImportDoc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoImportDoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string category = 7;
  int category_size() const;
  void clear_category();
  static const int kCategoryFieldNumber = 7;
  const ::std::string& category(int index) const;
  ::std::string* mutable_category(int index);
  void set_category(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_category(int index, ::std::string&& value);
  #endif
  void set_category(int index, const char* value);
  void set_category(int index, const char* value, size_t size);
  ::std::string* add_category();
  void add_category(const ::std::string& value);
  #if LANG_CXX11
  void add_category(::std::string&& value);
  #endif
  void add_category(const char* value);
  void add_category(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& category() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_category();

  // repeated string tag = 8;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 8;
  const ::std::string& tag(int index) const;
  ::std::string* mutable_tag(int index);
  void set_tag(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tag(int index, ::std::string&& value);
  #endif
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  ::std::string* add_tag();
  void add_tag(const ::std::string& value);
  #if LANG_CXX11
  void add_tag(::std::string&& value);
  #endif
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // repeated .ru.mail.go.webbase.blobs.VideoQualityValue videoQualityOptions = 66;
  int videoqualityoptions_size() const;
  void clear_videoqualityoptions();
  static const int kVideoQualityOptionsFieldNumber = 66;
  ::ru::mail::go::webbase::blobs::VideoQualityValue videoqualityoptions(int index) const;
  void set_videoqualityoptions(int index, ::ru::mail::go::webbase::blobs::VideoQualityValue value);
  void add_videoqualityoptions(::ru::mail::go::webbase::blobs::VideoQualityValue value);
  const ::google::protobuf::RepeatedField<int>& videoqualityoptions() const;
  ::google::protobuf::RepeatedField<int>* mutable_videoqualityoptions();

  // repeated string videoQualityOptionsVK = 92;
  int videoqualityoptionsvk_size() const;
  void clear_videoqualityoptionsvk();
  static const int kVideoQualityOptionsVKFieldNumber = 92;
  const ::std::string& videoqualityoptionsvk(int index) const;
  ::std::string* mutable_videoqualityoptionsvk(int index);
  void set_videoqualityoptionsvk(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_videoqualityoptionsvk(int index, ::std::string&& value);
  #endif
  void set_videoqualityoptionsvk(int index, const char* value);
  void set_videoqualityoptionsvk(int index, const char* value, size_t size);
  ::std::string* add_videoqualityoptionsvk();
  void add_videoqualityoptionsvk(const ::std::string& value);
  #if LANG_CXX11
  void add_videoqualityoptionsvk(::std::string&& value);
  #endif
  void add_videoqualityoptionsvk(const char* value);
  void add_videoqualityoptionsvk(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& videoqualityoptionsvk() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_videoqualityoptionsvk();

  // repeated string hashtags = 99;
  int hashtags_size() const;
  void clear_hashtags();
  static const int kHashtagsFieldNumber = 99;
  const ::std::string& hashtags(int index) const;
  ::std::string* mutable_hashtags(int index);
  void set_hashtags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hashtags(int index, ::std::string&& value);
  #endif
  void set_hashtags(int index, const char* value);
  void set_hashtags(int index, const char* value, size_t size);
  ::std::string* add_hashtags();
  void add_hashtags(const ::std::string& value);
  #if LANG_CXX11
  void add_hashtags(::std::string&& value);
  #endif
  void add_hashtags(const char* value);
  void add_hashtags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hashtags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hashtags();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string urlVideo = 3;
  bool has_urlvideo() const;
  void clear_urlvideo();
  static const int kUrlVideoFieldNumber = 3;
  const ::std::string& urlvideo() const;
  void set_urlvideo(const ::std::string& value);
  #if LANG_CXX11
  void set_urlvideo(::std::string&& value);
  #endif
  void set_urlvideo(const char* value);
  void set_urlvideo(const char* value, size_t size);
  ::std::string* mutable_urlvideo();
  ::std::string* release_urlvideo();
  void set_allocated_urlvideo(::std::string* urlvideo);

  // optional string urlPreview = 4;
  bool has_urlpreview() const;
  void clear_urlpreview();
  static const int kUrlPreviewFieldNumber = 4;
  const ::std::string& urlpreview() const;
  void set_urlpreview(const ::std::string& value);
  #if LANG_CXX11
  void set_urlpreview(::std::string&& value);
  #endif
  void set_urlpreview(const char* value);
  void set_urlpreview(const char* value, size_t size);
  ::std::string* mutable_urlpreview();
  ::std::string* release_urlpreview();
  void set_allocated_urlpreview(::std::string* urlpreview);

  // optional bytes rawPreviewData = 5;
  bool has_rawpreviewdata() const;
  void clear_rawpreviewdata();
  static const int kRawPreviewDataFieldNumber = 5;
  const ::std::string& rawpreviewdata() const;
  void set_rawpreviewdata(const ::std::string& value);
  #if LANG_CXX11
  void set_rawpreviewdata(::std::string&& value);
  #endif
  void set_rawpreviewdata(const char* value);
  void set_rawpreviewdata(const void* value, size_t size);
  ::std::string* mutable_rawpreviewdata();
  ::std::string* release_rawpreviewdata();
  void set_allocated_rawpreviewdata(::std::string* rawpreviewdata);

  // optional string description = 6;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string userUrl = 22;
  bool has_userurl() const;
  void clear_userurl();
  static const int kUserUrlFieldNumber = 22;
  const ::std::string& userurl() const;
  void set_userurl(const ::std::string& value);
  #if LANG_CXX11
  void set_userurl(::std::string&& value);
  #endif
  void set_userurl(const char* value);
  void set_userurl(const char* value, size_t size);
  ::std::string* mutable_userurl();
  ::std::string* release_userurl();
  void set_allocated_userurl(::std::string* userurl);

  // optional string userNick = 23;
  bool has_usernick() const;
  void clear_usernick();
  static const int kUserNickFieldNumber = 23;
  const ::std::string& usernick() const;
  void set_usernick(const ::std::string& value);
  #if LANG_CXX11
  void set_usernick(::std::string&& value);
  #endif
  void set_usernick(const char* value);
  void set_usernick(const char* value, size_t size);
  ::std::string* mutable_usernick();
  ::std::string* release_usernick();
  void set_allocated_usernick(::std::string* usernick);

  // optional string userMail = 24;
  bool has_usermail() const;
  void clear_usermail();
  static const int kUserMailFieldNumber = 24;
  const ::std::string& usermail() const;
  void set_usermail(const ::std::string& value);
  #if LANG_CXX11
  void set_usermail(::std::string&& value);
  #endif
  void set_usermail(const char* value);
  void set_usermail(const char* value, size_t size);
  ::std::string* mutable_usermail();
  ::std::string* release_usermail();
  void set_allocated_usermail(::std::string* usermail);

  // optional string albumDescription = 25;
  bool has_albumdescription() const;
  void clear_albumdescription();
  static const int kAlbumDescriptionFieldNumber = 25;
  const ::std::string& albumdescription() const;
  void set_albumdescription(const ::std::string& value);
  #if LANG_CXX11
  void set_albumdescription(::std::string&& value);
  #endif
  void set_albumdescription(const char* value);
  void set_albumdescription(const char* value, size_t size);
  ::std::string* mutable_albumdescription();
  ::std::string* release_albumdescription();
  void set_allocated_albumdescription(::std::string* albumdescription);

  // optional string albumName = 28;
  bool has_albumname() const;
  void clear_albumname();
  static const int kAlbumNameFieldNumber = 28;
  const ::std::string& albumname() const;
  void set_albumname(const ::std::string& value);
  #if LANG_CXX11
  void set_albumname(::std::string&& value);
  #endif
  void set_albumname(const char* value);
  void set_albumname(const char* value, size_t size);
  ::std::string* mutable_albumname();
  ::std::string* release_albumname();
  void set_allocated_albumname(::std::string* albumname);

  // optional string albumUrl = 29;
  bool has_albumurl() const;
  void clear_albumurl();
  static const int kAlbumUrlFieldNumber = 29;
  const ::std::string& albumurl() const;
  void set_albumurl(const ::std::string& value);
  #if LANG_CXX11
  void set_albumurl(::std::string&& value);
  #endif
  void set_albumurl(const char* value);
  void set_albumurl(const char* value, size_t size);
  ::std::string* mutable_albumurl();
  ::std::string* release_albumurl();
  void set_allocated_albumurl(::std::string* albumurl);

  // optional string referenceId = 34;
  bool has_referenceid() const;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 34;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  #if LANG_CXX11
  void set_referenceid(::std::string&& value);
  #endif
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // optional string player = 41;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 41;
  const ::std::string& player() const;
  void set_player(const ::std::string& value);
  #if LANG_CXX11
  void set_player(::std::string&& value);
  #endif
  void set_player(const char* value);
  void set_player(const char* value, size_t size);
  ::std::string* mutable_player();
  ::std::string* release_player();
  void set_allocated_player(::std::string* player);

  // optional string videoType = 42;
  bool has_videotype() const;
  void clear_videotype();
  static const int kVideoTypeFieldNumber = 42;
  const ::std::string& videotype() const;
  void set_videotype(const ::std::string& value);
  #if LANG_CXX11
  void set_videotype(::std::string&& value);
  #endif
  void set_videotype(const char* value);
  void set_videotype(const char* value, size_t size);
  ::std::string* mutable_videotype();
  ::std::string* release_videotype();
  void set_allocated_videotype(::std::string* videotype);

  // optional string metadataSourceUrl = 49;
  bool has_metadatasourceurl() const;
  void clear_metadatasourceurl();
  static const int kMetadataSourceUrlFieldNumber = 49;
  const ::std::string& metadatasourceurl() const;
  void set_metadatasourceurl(const ::std::string& value);
  #if LANG_CXX11
  void set_metadatasourceurl(::std::string&& value);
  #endif
  void set_metadatasourceurl(const char* value);
  void set_metadatasourceurl(const char* value, size_t size);
  ::std::string* mutable_metadatasourceurl();
  ::std::string* release_metadatasourceurl();
  void set_allocated_metadatasourceurl(::std::string* metadatasourceurl);

  // optional string youtubeHash = 61;
  bool has_youtubehash() const;
  void clear_youtubehash();
  static const int kYoutubeHashFieldNumber = 61;
  const ::std::string& youtubehash() const;
  void set_youtubehash(const ::std::string& value);
  #if LANG_CXX11
  void set_youtubehash(::std::string&& value);
  #endif
  void set_youtubehash(const char* value);
  void set_youtubehash(const char* value, size_t size);
  ::std::string* mutable_youtubehash();
  ::std::string* release_youtubehash();
  void set_allocated_youtubehash(::std::string* youtubehash);

  // optional string channelId = 62;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 62;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  #if LANG_CXX11
  void set_channelid(::std::string&& value);
  #endif
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // optional string extPlatform = 65;
  bool has_extplatform() const;
  void clear_extplatform();
  static const int kExtPlatformFieldNumber = 65;
  const ::std::string& extplatform() const;
  void set_extplatform(const ::std::string& value);
  #if LANG_CXX11
  void set_extplatform(::std::string&& value);
  #endif
  void set_extplatform(const char* value);
  void set_extplatform(const char* value, size_t size);
  ::std::string* mutable_extplatform();
  ::std::string* release_extplatform();
  void set_allocated_extplatform(::std::string* extplatform);

  // optional string user_domain = 81;
  bool has_user_domain() const;
  void clear_user_domain();
  static const int kUserDomainFieldNumber = 81;
  const ::std::string& user_domain() const;
  void set_user_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_user_domain(::std::string&& value);
  #endif
  void set_user_domain(const char* value);
  void set_user_domain(const char* value, size_t size);
  ::std::string* mutable_user_domain();
  ::std::string* release_user_domain();
  void set_allocated_user_domain(::std::string* user_domain);

  // optional string content_hash_string = 87;
  bool has_content_hash_string() const;
  void clear_content_hash_string();
  static const int kContentHashStringFieldNumber = 87;
  const ::std::string& content_hash_string() const;
  void set_content_hash_string(const ::std::string& value);
  #if LANG_CXX11
  void set_content_hash_string(::std::string&& value);
  #endif
  void set_content_hash_string(const char* value);
  void set_content_hash_string(const char* value, size_t size);
  ::std::string* mutable_content_hash_string();
  ::std::string* release_content_hash_string();
  void set_allocated_content_hash_string(::std::string* content_hash_string);

  // optional string contentIdString = 89;
  bool has_contentidstring() const;
  void clear_contentidstring();
  static const int kContentIdStringFieldNumber = 89;
  const ::std::string& contentidstring() const;
  void set_contentidstring(const ::std::string& value);
  #if LANG_CXX11
  void set_contentidstring(::std::string&& value);
  #endif
  void set_contentidstring(const char* value);
  void set_contentidstring(const char* value, size_t size);
  ::std::string* mutable_contentidstring();
  ::std::string* release_contentidstring();
  void set_allocated_contentidstring(::std::string* contentidstring);

  // optional string external_link = 95;
  bool has_external_link() const;
  void clear_external_link();
  static const int kExternalLinkFieldNumber = 95;
  const ::std::string& external_link() const;
  void set_external_link(const ::std::string& value);
  #if LANG_CXX11
  void set_external_link(::std::string&& value);
  #endif
  void set_external_link(const char* value);
  void set_external_link(const char* value, size_t size);
  ::std::string* mutable_external_link();
  ::std::string* release_external_link();
  void set_allocated_external_link(::std::string* external_link);

  // optional string originalAlbumTitle = 96;
  bool has_originalalbumtitle() const;
  void clear_originalalbumtitle();
  static const int kOriginalAlbumTitleFieldNumber = 96;
  const ::std::string& originalalbumtitle() const;
  void set_originalalbumtitle(const ::std::string& value);
  #if LANG_CXX11
  void set_originalalbumtitle(::std::string&& value);
  #endif
  void set_originalalbumtitle(const char* value);
  void set_originalalbumtitle(const char* value, size_t size);
  ::std::string* mutable_originalalbumtitle();
  ::std::string* release_originalalbumtitle();
  void set_allocated_originalalbumtitle(::std::string* originalalbumtitle);

  // optional string audio_title = 97;
  bool has_audio_title() const;
  void clear_audio_title();
  static const int kAudioTitleFieldNumber = 97;
  const ::std::string& audio_title() const;
  void set_audio_title(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_title(::std::string&& value);
  #endif
  void set_audio_title(const char* value);
  void set_audio_title(const char* value, size_t size);
  ::std::string* mutable_audio_title();
  ::std::string* release_audio_title();
  void set_allocated_audio_title(::std::string* audio_title);

  // optional string audio_performer = 98;
  bool has_audio_performer() const;
  void clear_audio_performer();
  static const int kAudioPerformerFieldNumber = 98;
  const ::std::string& audio_performer() const;
  void set_audio_performer(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_performer(::std::string&& value);
  #endif
  void set_audio_performer(const char* value);
  void set_audio_performer(const char* value, size_t size);
  ::std::string* mutable_audio_performer();
  ::std::string* release_audio_performer();
  void set_allocated_audio_performer(::std::string* audio_performer);

  // optional int64 contentHash = 10;
  bool has_contenthash() const;
  void clear_contenthash();
  static const int kContentHashFieldNumber = 10;
  ::google::protobuf::int64 contenthash() const;
  void set_contenthash(::google::protobuf::int64 value);

  // optional bool isDeleted = 2;
  bool has_isdeleted() const;
  void clear_isdeleted();
  static const int kIsDeletedFieldNumber = 2;
  bool isdeleted() const;
  void set_isdeleted(bool value);

  // optional bool adult = 9;
  bool has_adult() const;
  void clear_adult();
  static const int kAdultFieldNumber = 9;
  bool adult() const;
  void set_adult(bool value);

  // optional bool legal = 13;
  bool has_legal() const;
  void clear_legal();
  static const int kLegalFieldNumber = 13;
  bool legal() const;
  void set_legal(bool value);

  // optional bool hd = 16;
  bool has_hd() const;
  void clear_hd();
  static const int kHdFieldNumber = 16;
  bool hd() const;
  void set_hd(bool value);

  // optional int32 duration = 11;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 11;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int64 id = 12;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 12;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 shottime = 14;
  bool has_shottime() const;
  void clear_shottime();
  static const int kShottimeFieldNumber = 14;
  ::google::protobuf::int64 shottime() const;
  void set_shottime(::google::protobuf::int64 value);

  // optional int64 time = 15;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 15;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional int32 fee = 19;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 19;
  ::google::protobuf::int32 fee() const;
  void set_fee(::google::protobuf::int32 value);

  // optional int32 feeCurrency = 20;
  bool has_feecurrency() const;
  void clear_feecurrency();
  static const int kFeeCurrencyFieldNumber = 20;
  ::google::protobuf::int32 feecurrency() const;
  void set_feecurrency(::google::protobuf::int32 value);

  // optional int32 userId = 21;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 21;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 albumCommentCount = 26;
  bool has_albumcommentcount() const;
  void clear_albumcommentcount();
  static const int kAlbumCommentCountFieldNumber = 26;
  ::google::protobuf::int32 albumcommentcount() const;
  void set_albumcommentcount(::google::protobuf::int32 value);

  // optional int32 albumId = 27;
  bool has_albumid() const;
  void clear_albumid();
  static const int kAlbumIdFieldNumber = 27;
  ::google::protobuf::int32 albumid() const;
  void set_albumid(::google::protobuf::int32 value);

  // optional int32 statVotes = 30;
  bool has_statvotes() const;
  void clear_statvotes();
  static const int kStatVotesFieldNumber = 30;
  ::google::protobuf::int32 statvotes() const;
  void set_statvotes(::google::protobuf::int32 value);

  // optional bool paid = 17;
  bool has_paid() const;
  void clear_paid();
  static const int kPaidFieldNumber = 17;
  bool paid() const;
  void set_paid(bool value);

  // optional bool regreq = 18;
  bool has_regreq() const;
  void clear_regreq();
  static const int kRegreqFieldNumber = 18;
  bool regreq() const;
  void set_regreq(bool value);

  // optional bool hasPlayer = 39;
  bool has_hasplayer() const;
  void clear_hasplayer();
  static const int kHasPlayerFieldNumber = 39;
  bool hasplayer() const;
  void set_hasplayer(bool value);

  // optional bool finishedSerial = 47;
  bool has_finishedserial() const;
  void clear_finishedserial();
  static const int kFinishedSerialFieldNumber = 47;
  bool finishedserial() const;
  void set_finishedserial(bool value);

  // optional int32 statCommentsCount = 31;
  bool has_statcommentscount() const;
  void clear_statcommentscount();
  static const int kStatCommentsCountFieldNumber = 31;
  ::google::protobuf::int32 statcommentscount() const;
  void set_statcommentscount(::google::protobuf::int32 value);

  // optional int64 statRating = 33;
  bool has_statrating() const;
  void clear_statrating();
  static const int kStatRatingFieldNumber = 33;
  ::google::protobuf::int64 statrating() const;
  void set_statrating(::google::protobuf::int64 value);

  // optional int32 statViews = 32;
  bool has_statviews() const;
  void clear_statviews();
  static const int kStatViewsFieldNumber = 32;
  ::google::protobuf::int32 statviews() const;
  void set_statviews(::google::protobuf::int32 value);

  // optional int32 originalThumbWidth = 35;
  bool has_originalthumbwidth() const;
  void clear_originalthumbwidth();
  static const int kOriginalThumbWidthFieldNumber = 35;
  ::google::protobuf::int32 originalthumbwidth() const;
  void set_originalthumbwidth(::google::protobuf::int32 value);

  // optional int64 importTime = 37;
  bool has_importtime() const;
  void clear_importtime();
  static const int kImportTimeFieldNumber = 37;
  ::google::protobuf::int64 importtime() const;
  void set_importtime(::google::protobuf::int64 value);

  // optional int32 originalThumbHeight = 36;
  bool has_originalthumbheight() const;
  void clear_originalthumbheight();
  static const int kOriginalThumbHeightFieldNumber = 36;
  ::google::protobuf::int32 originalthumbheight() const;
  void set_originalthumbheight(::google::protobuf::int32 value);

  // optional int32 sourceId = 38;
  bool has_sourceid() const;
  void clear_sourceid();
  static const int kSourceIdFieldNumber = 38;
  ::google::protobuf::int32 sourceid() const;
  void set_sourceid(::google::protobuf::int32 value);

  // optional int32 episode = 40;
  bool has_episode() const;
  void clear_episode();
  static const int kEpisodeFieldNumber = 40;
  ::google::protobuf::int32 episode() const;
  void set_episode(::google::protobuf::int32 value);

  // optional int32 width = 43;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 43;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 44;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 44;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 season = 45;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 45;
  ::google::protobuf::int32 season() const;
  void set_season(::google::protobuf::int32 value);

  // optional int64 byte_size = 48;
  bool has_byte_size() const;
  void clear_byte_size();
  static const int kByteSizeFieldNumber = 48;
  ::google::protobuf::int64 byte_size() const;
  void set_byte_size(::google::protobuf::int64 value);

  // optional int32 seriesId = 46;
  bool has_seriesid() const;
  void clear_seriesid();
  static const int kSeriesIdFieldNumber = 46;
  ::google::protobuf::int32 seriesid() const;
  void set_seriesid(::google::protobuf::int32 value);

  // optional bool full_movie = 51;
  bool has_full_movie() const;
  void clear_full_movie();
  static const int kFullMovieFieldNumber = 51;
  bool full_movie() const;
  void set_full_movie(bool value);

  // optional bool full_hd = 52;
  bool has_full_hd() const;
  void clear_full_hd();
  static const int kFullHdFieldNumber = 52;
  bool full_hd() const;
  void set_full_hd(bool value);

  // optional bool allowInFastbase = 53;
  bool has_allowinfastbase() const;
  void clear_allowinfastbase();
  static const int kAllowInFastbaseFieldNumber = 53;
  bool allowinfastbase() const;
  void set_allowinfastbase(bool value);

  // optional bool allow_embed = 60;
  bool has_allow_embed() const;
  void clear_allow_embed();
  static const int kAllowEmbedFieldNumber = 60;
  bool allow_embed() const;
  void set_allow_embed(bool value);

  // optional int64 contentId = 54;
  bool has_contentid() const;
  void clear_contentid();
  static const int kContentIdFieldNumber = 54;
  ::google::protobuf::int64 contentid() const;
  void set_contentid(::google::protobuf::int64 value);

  // optional int32 statLikes = 55;
  bool has_statlikes() const;
  void clear_statlikes();
  static const int kStatLikesFieldNumber = 55;
  ::google::protobuf::int32 statlikes() const;
  void set_statlikes(::google::protobuf::int32 value);

  // optional int32 statDislikes = 56;
  bool has_statdislikes() const;
  void clear_statdislikes();
  static const int kStatDislikesFieldNumber = 56;
  ::google::protobuf::int32 statdislikes() const;
  void set_statdislikes(::google::protobuf::int32 value);

  // optional .ru.mail.go.webbase.blobs.VideoLiveStreamType liveStream = 57;
  bool has_livestream() const;
  void clear_livestream();
  static const int kLiveStreamFieldNumber = 57;
  ::ru::mail::go::webbase::blobs::VideoLiveStreamType livestream() const;
  void set_livestream(::ru::mail::go::webbase::blobs::VideoLiveStreamType value);

  // optional .ru.mail.go.webbase.blobs.ExclusiveProviders exclusiveProvider = 58;
  bool has_exclusiveprovider() const;
  void clear_exclusiveprovider();
  static const int kExclusiveProviderFieldNumber = 58;
  ::ru::mail::go::webbase::blobs::ExclusiveProviders exclusiveprovider() const;
  void set_exclusiveprovider(::ru::mail::go::webbase::blobs::ExclusiveProviders value);

  // optional .ru.mail.go.webbase.blobs.ProtobufSourceType protobufSourceTypeFlag = 59;
  bool has_protobufsourcetypeflag() const;
  void clear_protobufsourcetypeflag();
  static const int kProtobufSourceTypeFlagFieldNumber = 59;
  ::ru::mail::go::webbase::blobs::ProtobufSourceType protobufsourcetypeflag() const;
  void set_protobufsourcetypeflag(::ru::mail::go::webbase::blobs::ProtobufSourceType value);

  // optional .ru.mail.go.webbase.blobs.LiveVideoState liveVideoState = 64;
  bool has_livevideostate() const;
  void clear_livevideostate();
  static const int kLiveVideoStateFieldNumber = 64;
  ::ru::mail::go::webbase::blobs::LiveVideoState livevideostate() const;
  void set_livevideostate(::ru::mail::go::webbase::blobs::LiveVideoState value);

  // optional int64 userId64 = 63;
  bool has_userid64() const;
  void clear_userid64();
  static const int kUserId64FieldNumber = 63;
  ::google::protobuf::int64 userid64() const;
  void set_userid64(::google::protobuf::int64 value);

  // optional int32 reposts_count = 67;
  bool has_reposts_count() const;
  void clear_reposts_count();
  static const int kRepostsCountFieldNumber = 67;
  ::google::protobuf::int32 reposts_count() const;
  void set_reposts_count(::google::protobuf::int32 value);

  // optional int32 group_members_count = 70;
  bool has_group_members_count() const;
  void clear_group_members_count();
  static const int kGroupMembersCountFieldNumber = 70;
  ::google::protobuf::int32 group_members_count() const;
  void set_group_members_count(::google::protobuf::int32 value);

  // optional bool group_is_closed = 68;
  bool has_group_is_closed() const;
  void clear_group_is_closed();
  static const int kGroupIsClosedFieldNumber = 68;
  bool group_is_closed() const;
  void set_group_is_closed(bool value);

  // optional bool group_is_verified = 69;
  bool has_group_is_verified() const;
  void clear_group_is_verified();
  static const int kGroupIsVerifiedFieldNumber = 69;
  bool group_is_verified() const;
  void set_group_is_verified(bool value);

  // optional bool group_trending = 71;
  bool has_group_trending() const;
  void clear_group_trending();
  static const int kGroupTrendingFieldNumber = 71;
  bool group_trending() const;
  void set_group_trending(bool value);

  // optional bool dzen_exists_in_reco_snapshot = 74 [default = false];
  bool has_dzen_exists_in_reco_snapshot() const;
  void clear_dzen_exists_in_reco_snapshot();
  static const int kDzenExistsInRecoSnapshotFieldNumber = 74;
  bool dzen_exists_in_reco_snapshot() const;
  void set_dzen_exists_in_reco_snapshot(bool value);

  // optional int32 user_subscribers = 78;
  bool has_user_subscribers() const;
  void clear_user_subscribers();
  static const int kUserSubscribersFieldNumber = 78;
  ::google::protobuf::int32 user_subscribers() const;
  void set_user_subscribers(::google::protobuf::int32 value);

  // optional bool subscribers_only = 75 [default = false];
  bool has_subscribers_only() const;
  void clear_subscribers_only();
  static const int kSubscribersOnlyFieldNumber = 75;
  bool subscribers_only() const;
  void set_subscribers_only(bool value);

  // optional bool user_is_verified = 77 [default = false];
  bool has_user_is_verified() const;
  void clear_user_is_verified();
  static const int kUserIsVerifiedFieldNumber = 77;
  bool user_is_verified() const;
  void set_user_is_verified(bool value);

  // optional bool is_probably_porn_by_vk_score = 80 [default = false];
  bool has_is_probably_porn_by_vk_score() const;
  void clear_is_probably_porn_by_vk_score();
  static const int kIsProbablyPornByVkScoreFieldNumber = 80;
  bool is_probably_porn_by_vk_score() const;
  void set_is_probably_porn_by_vk_score(bool value);

  // optional bool is_good_film = 82 [default = false];
  bool has_is_good_film() const;
  void clear_is_good_film();
  static const int kIsGoodFilmFieldNumber = 82;
  bool is_good_film() const;
  void set_is_good_film(bool value);

  // optional int32 adult_reports_count = 79;
  bool has_adult_reports_count() const;
  void clear_adult_reports_count();
  static const int kAdultReportsCountFieldNumber = 79;
  ::google::protobuf::int32 adult_reports_count() const;
  void set_adult_reports_count(::google::protobuf::int32 value);

  // optional int64 similarity_cluster_id = 88;
  bool has_similarity_cluster_id() const;
  void clear_similarity_cluster_id();
  static const int kSimilarityClusterIdFieldNumber = 88;
  ::google::protobuf::int64 similarity_cluster_id() const;
  void set_similarity_cluster_id(::google::protobuf::int64 value);

  // optional bool is_good_cartoon = 83 [default = false];
  bool has_is_good_cartoon() const;
  void clear_is_good_cartoon();
  static const int kIsGoodCartoonFieldNumber = 83;
  bool is_good_cartoon() const;
  void set_is_good_cartoon(bool value);

  // optional bool is_good_serial = 84 [default = false];
  bool has_is_good_serial() const;
  void clear_is_good_serial();
  static const int kIsGoodSerialFieldNumber = 84;
  bool is_good_serial() const;
  void set_is_good_serial(bool value);

  // optional bool is_update = 85;
  bool has_is_update() const;
  void clear_is_update();
  static const int kIsUpdateFieldNumber = 85;
  bool is_update() const;
  void set_is_update(bool value);

  // optional bool is_licensed_content_vk = 86;
  bool has_is_licensed_content_vk() const;
  void clear_is_licensed_content_vk();
  static const int kIsLicensedContentVkFieldNumber = 86;
  bool is_licensed_content_vk() const;
  void set_is_licensed_content_vk(bool value);

  // optional bool is_promo_author = 91 [default = false];
  bool has_is_promo_author() const;
  void clear_is_promo_author();
  static const int kIsPromoAuthorFieldNumber = 91;
  bool is_promo_author() const;
  void set_is_promo_author(bool value);

  // optional bool is_official_music_clip = 93 [default = false];
  bool has_is_official_music_clip() const;
  void clear_is_official_music_clip();
  static const int kIsOfficialMusicClipFieldNumber = 93;
  bool is_official_music_clip() const;
  void set_is_official_music_clip(bool value);

  // optional bool is_external = 94;
  bool has_is_external() const;
  void clear_is_external();
  static const int kIsExternalFieldNumber = 94;
  bool is_external() const;
  void set_is_external(bool value);

  // optional int64 united_video_id = 90;
  bool has_united_video_id() const;
  void clear_united_video_id();
  static const int kUnitedVideoIdFieldNumber = 90;
  ::google::protobuf::int64 united_video_id() const;
  void set_united_video_id(::google::protobuf::int64 value);

  // optional .ru.mail.go.webbase.blobs.VideoType dzen_video_type = 76;
  bool has_dzen_video_type() const;
  void clear_dzen_video_type();
  static const int kDzenVideoTypeFieldNumber = 76;
  ::ru::mail::go::webbase::blobs::VideoType dzen_video_type() const;
  void set_dzen_video_type(::ru::mail::go::webbase::blobs::VideoType value);

  // optional .ru.mail.go.webbase.blobs.DzenCertainGrade dzen_certain_grade = 72;
  bool has_dzen_certain_grade() const;
  void clear_dzen_certain_grade();
  static const int kDzenCertainGradeFieldNumber = 72;
  ::ru::mail::go::webbase::blobs::DzenCertainGrade dzen_certain_grade() const;
  void set_dzen_certain_grade(::ru::mail::go::webbase::blobs::DzenCertainGrade value);

  // optional .ru.mail.go.webbase.blobs.VideoOrientation video_orientation = 73;
  bool has_video_orientation() const;
  void clear_video_orientation();
  static const int kVideoOrientationFieldNumber = 73;
  ::ru::mail::go::webbase::blobs::VideoOrientation video_orientation() const;
  void set_video_orientation(::ru::mail::go::webbase::blobs::VideoOrientation value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoImportDoc)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_isdeleted();
  void clear_has_isdeleted();
  void set_has_urlvideo();
  void clear_has_urlvideo();
  void set_has_urlpreview();
  void clear_has_urlpreview();
  void set_has_rawpreviewdata();
  void clear_has_rawpreviewdata();
  void set_has_description();
  void clear_has_description();
  void set_has_adult();
  void clear_has_adult();
  void set_has_contenthash();
  void clear_has_contenthash();
  void set_has_duration();
  void clear_has_duration();
  void set_has_id();
  void clear_has_id();
  void set_has_legal();
  void clear_has_legal();
  void set_has_shottime();
  void clear_has_shottime();
  void set_has_time();
  void clear_has_time();
  void set_has_hd();
  void clear_has_hd();
  void set_has_paid();
  void clear_has_paid();
  void set_has_regreq();
  void clear_has_regreq();
  void set_has_fee();
  void clear_has_fee();
  void set_has_feecurrency();
  void clear_has_feecurrency();
  void set_has_userid();
  void clear_has_userid();
  void set_has_userurl();
  void clear_has_userurl();
  void set_has_usernick();
  void clear_has_usernick();
  void set_has_usermail();
  void clear_has_usermail();
  void set_has_albumdescription();
  void clear_has_albumdescription();
  void set_has_albumcommentcount();
  void clear_has_albumcommentcount();
  void set_has_albumid();
  void clear_has_albumid();
  void set_has_albumname();
  void clear_has_albumname();
  void set_has_albumurl();
  void clear_has_albumurl();
  void set_has_originalalbumtitle();
  void clear_has_originalalbumtitle();
  void set_has_statvotes();
  void clear_has_statvotes();
  void set_has_statlikes();
  void clear_has_statlikes();
  void set_has_statdislikes();
  void clear_has_statdislikes();
  void set_has_statcommentscount();
  void clear_has_statcommentscount();
  void set_has_statviews();
  void clear_has_statviews();
  void set_has_statrating();
  void clear_has_statrating();
  void set_has_referenceid();
  void clear_has_referenceid();
  void set_has_originalthumbwidth();
  void clear_has_originalthumbwidth();
  void set_has_originalthumbheight();
  void clear_has_originalthumbheight();
  void set_has_importtime();
  void clear_has_importtime();
  void set_has_sourceid();
  void clear_has_sourceid();
  void set_has_hasplayer();
  void clear_has_hasplayer();
  void set_has_episode();
  void clear_has_episode();
  void set_has_player();
  void clear_has_player();
  void set_has_videotype();
  void clear_has_videotype();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_season();
  void clear_has_season();
  void set_has_seriesid();
  void clear_has_seriesid();
  void set_has_finishedserial();
  void clear_has_finishedserial();
  void set_has_byte_size();
  void clear_has_byte_size();
  void set_has_metadatasourceurl();
  void clear_has_metadatasourceurl();
  void set_has_full_movie();
  void clear_has_full_movie();
  void set_has_full_hd();
  void clear_has_full_hd();
  void set_has_allowinfastbase();
  void clear_has_allowinfastbase();
  void set_has_contentid();
  void clear_has_contentid();
  void set_has_livestream();
  void clear_has_livestream();
  void set_has_exclusiveprovider();
  void clear_has_exclusiveprovider();
  void set_has_protobufsourcetypeflag();
  void clear_has_protobufsourcetypeflag();
  void set_has_allow_embed();
  void clear_has_allow_embed();
  void set_has_youtubehash();
  void clear_has_youtubehash();
  void set_has_channelid();
  void clear_has_channelid();
  void set_has_userid64();
  void clear_has_userid64();
  void set_has_livevideostate();
  void clear_has_livevideostate();
  void set_has_extplatform();
  void clear_has_extplatform();
  void set_has_reposts_count();
  void clear_has_reposts_count();
  void set_has_group_is_closed();
  void clear_has_group_is_closed();
  void set_has_group_is_verified();
  void clear_has_group_is_verified();
  void set_has_group_members_count();
  void clear_has_group_members_count();
  void set_has_group_trending();
  void clear_has_group_trending();
  void set_has_dzen_certain_grade();
  void clear_has_dzen_certain_grade();
  void set_has_video_orientation();
  void clear_has_video_orientation();
  void set_has_dzen_exists_in_reco_snapshot();
  void clear_has_dzen_exists_in_reco_snapshot();
  void set_has_subscribers_only();
  void clear_has_subscribers_only();
  void set_has_dzen_video_type();
  void clear_has_dzen_video_type();
  void set_has_user_is_verified();
  void clear_has_user_is_verified();
  void set_has_user_subscribers();
  void clear_has_user_subscribers();
  void set_has_adult_reports_count();
  void clear_has_adult_reports_count();
  void set_has_is_probably_porn_by_vk_score();
  void clear_has_is_probably_porn_by_vk_score();
  void set_has_user_domain();
  void clear_has_user_domain();
  void set_has_is_good_film();
  void clear_has_is_good_film();
  void set_has_is_good_cartoon();
  void clear_has_is_good_cartoon();
  void set_has_is_good_serial();
  void clear_has_is_good_serial();
  void set_has_is_update();
  void clear_has_is_update();
  void set_has_is_licensed_content_vk();
  void clear_has_is_licensed_content_vk();
  void set_has_content_hash_string();
  void clear_has_content_hash_string();
  void set_has_similarity_cluster_id();
  void clear_has_similarity_cluster_id();
  void set_has_contentidstring();
  void clear_has_contentidstring();
  void set_has_united_video_id();
  void clear_has_united_video_id();
  void set_has_is_promo_author();
  void clear_has_is_promo_author();
  void set_has_is_official_music_clip();
  void clear_has_is_official_music_clip();
  void set_has_is_external();
  void clear_has_is_external();
  void set_has_external_link();
  void clear_has_external_link();
  void set_has_audio_title();
  void clear_has_audio_title();
  void set_has_audio_performer();
  void clear_has_audio_performer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> category_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  ::google::protobuf::RepeatedField<int> videoqualityoptions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> videoqualityoptionsvk_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hashtags_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr urlvideo_;
  ::google::protobuf::internal::ArenaStringPtr urlpreview_;
  ::google::protobuf::internal::ArenaStringPtr rawpreviewdata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr userurl_;
  ::google::protobuf::internal::ArenaStringPtr usernick_;
  ::google::protobuf::internal::ArenaStringPtr usermail_;
  ::google::protobuf::internal::ArenaStringPtr albumdescription_;
  ::google::protobuf::internal::ArenaStringPtr albumname_;
  ::google::protobuf::internal::ArenaStringPtr albumurl_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  ::google::protobuf::internal::ArenaStringPtr player_;
  ::google::protobuf::internal::ArenaStringPtr videotype_;
  ::google::protobuf::internal::ArenaStringPtr metadatasourceurl_;
  ::google::protobuf::internal::ArenaStringPtr youtubehash_;
  ::google::protobuf::internal::ArenaStringPtr channelid_;
  ::google::protobuf::internal::ArenaStringPtr extplatform_;
  ::google::protobuf::internal::ArenaStringPtr user_domain_;
  ::google::protobuf::internal::ArenaStringPtr content_hash_string_;
  ::google::protobuf::internal::ArenaStringPtr contentidstring_;
  ::google::protobuf::internal::ArenaStringPtr external_link_;
  ::google::protobuf::internal::ArenaStringPtr originalalbumtitle_;
  ::google::protobuf::internal::ArenaStringPtr audio_title_;
  ::google::protobuf::internal::ArenaStringPtr audio_performer_;
  ::google::protobuf::int64 contenthash_;
  bool isdeleted_;
  bool adult_;
  bool legal_;
  bool hd_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 shottime_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 fee_;
  ::google::protobuf::int32 feecurrency_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 albumcommentcount_;
  ::google::protobuf::int32 albumid_;
  ::google::protobuf::int32 statvotes_;
  bool paid_;
  bool regreq_;
  bool hasplayer_;
  bool finishedserial_;
  ::google::protobuf::int32 statcommentscount_;
  ::google::protobuf::int64 statrating_;
  ::google::protobuf::int32 statviews_;
  ::google::protobuf::int32 originalthumbwidth_;
  ::google::protobuf::int64 importtime_;
  ::google::protobuf::int32 originalthumbheight_;
  ::google::protobuf::int32 sourceid_;
  ::google::protobuf::int32 episode_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int64 byte_size_;
  ::google::protobuf::int32 seriesid_;
  bool full_movie_;
  bool full_hd_;
  bool allowinfastbase_;
  bool allow_embed_;
  ::google::protobuf::int64 contentid_;
  ::google::protobuf::int32 statlikes_;
  ::google::protobuf::int32 statdislikes_;
  int livestream_;
  int exclusiveprovider_;
  int protobufsourcetypeflag_;
  int livevideostate_;
  ::google::protobuf::int64 userid64_;
  ::google::protobuf::int32 reposts_count_;
  ::google::protobuf::int32 group_members_count_;
  bool group_is_closed_;
  bool group_is_verified_;
  bool group_trending_;
  bool dzen_exists_in_reco_snapshot_;
  ::google::protobuf::int32 user_subscribers_;
  bool subscribers_only_;
  bool user_is_verified_;
  bool is_probably_porn_by_vk_score_;
  bool is_good_film_;
  ::google::protobuf::int32 adult_reports_count_;
  ::google::protobuf::int64 similarity_cluster_id_;
  bool is_good_cartoon_;
  bool is_good_serial_;
  bool is_update_;
  bool is_licensed_content_vk_;
  bool is_promo_author_;
  bool is_official_music_clip_;
  bool is_external_;
  ::google::protobuf::int64 united_video_id_;
  int dzen_video_type_;
  int dzen_certain_grade_;
  int video_orientation_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexedVideo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.IndexedVideo) */ {
 public:
  IndexedVideo();
  virtual ~IndexedVideo();

  IndexedVideo(const IndexedVideo& from);

  inline IndexedVideo& operator=(const IndexedVideo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexedVideo(IndexedVideo&& from) noexcept
    : IndexedVideo() {
    *this = ::std::move(from);
  }

  inline IndexedVideo& operator=(IndexedVideo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexedVideo& default_instance();

  static inline const IndexedVideo* internal_default_instance() {
    return reinterpret_cast<const IndexedVideo*>(
               &_IndexedVideo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(IndexedVideo* other);
  friend void swap(IndexedVideo& a, IndexedVideo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexedVideo* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexedVideo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexedVideo& from);
  void MergeFrom(const IndexedVideo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexedVideo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
  bool has_video_import_doc() const;
  void clear_video_import_doc();
  static const int kVideoImportDocFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VideoImportDoc& video_import_doc() const;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* mutable_video_import_doc();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* release_video_import_doc();
  void set_allocated_video_import_doc(::ru::mail::go::webbase::blobs::VideoImportDoc* video_import_doc);

  // optional .ru.mail.go.webbase.blobs.MovieMetadata movie_metadata = 2;
  bool has_movie_metadata() const;
  void clear_movie_metadata();
  static const int kMovieMetadataFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::MovieMetadata& movie_metadata() const;
  ::ru::mail::go::webbase::blobs::MovieMetadata* mutable_movie_metadata();
  ::ru::mail::go::webbase::blobs::MovieMetadata* release_movie_metadata();
  void set_allocated_movie_metadata(::ru::mail::go::webbase::blobs::MovieMetadata* movie_metadata);

  // optional bool is_porn = 3;
  bool has_is_porn() const;
  void clear_is_porn();
  static const int kIsPornFieldNumber = 3;
  bool is_porn() const;
  void set_is_porn(bool value);

  // optional int32 preview_mb_num = 4;
  bool has_preview_mb_num() const;
  void clear_preview_mb_num();
  static const int kPreviewMbNumFieldNumber = 4;
  ::google::protobuf::int32 preview_mb_num() const;
  void set_preview_mb_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.IndexedVideo)
 private:
  void set_has_video_import_doc();
  void clear_has_video_import_doc();
  void set_has_movie_metadata();
  void clear_has_movie_metadata();
  void set_has_is_porn();
  void clear_has_is_porn();
  void set_has_preview_mb_num();
  void clear_has_preview_mb_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* video_import_doc_;
  ::ru::mail::go::webbase::blobs::MovieMetadata* movie_metadata_;
  bool is_porn_;
  ::google::protobuf::int32 preview_mb_num_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FastVideoImportDoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.FastVideoImportDoc) */ {
 public:
  FastVideoImportDoc();
  virtual ~FastVideoImportDoc();

  FastVideoImportDoc(const FastVideoImportDoc& from);

  inline FastVideoImportDoc& operator=(const FastVideoImportDoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FastVideoImportDoc(FastVideoImportDoc&& from) noexcept
    : FastVideoImportDoc() {
    *this = ::std::move(from);
  }

  inline FastVideoImportDoc& operator=(FastVideoImportDoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FastVideoImportDoc& default_instance();

  static inline const FastVideoImportDoc* internal_default_instance() {
    return reinterpret_cast<const FastVideoImportDoc*>(
               &_FastVideoImportDoc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FastVideoImportDoc* other);
  friend void swap(FastVideoImportDoc& a, FastVideoImportDoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FastVideoImportDoc* New() const PROTOBUF_FINAL { return New(NULL); }

  FastVideoImportDoc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FastVideoImportDoc& from);
  void MergeFrom(const FastVideoImportDoc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FastVideoImportDoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
  bool has_video_import_doc() const;
  void clear_video_import_doc();
  static const int kVideoImportDocFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VideoImportDoc& video_import_doc() const;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* mutable_video_import_doc();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* release_video_import_doc();
  void set_allocated_video_import_doc(::ru::mail::go::webbase::blobs::VideoImportDoc* video_import_doc);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.FastVideoImportDoc)
 private:
  void set_has_video_import_doc();
  void clear_has_video_import_doc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* video_import_doc_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MovieMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.MovieMetadata) */ {
 public:
  MovieMetadata();
  virtual ~MovieMetadata();

  MovieMetadata(const MovieMetadata& from);

  inline MovieMetadata& operator=(const MovieMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MovieMetadata(MovieMetadata&& from) noexcept
    : MovieMetadata() {
    *this = ::std::move(from);
  }

  inline MovieMetadata& operator=(MovieMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MovieMetadata& default_instance();

  static inline const MovieMetadata* internal_default_instance() {
    return reinterpret_cast<const MovieMetadata*>(
               &_MovieMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MovieMetadata* other);
  friend void swap(MovieMetadata& a, MovieMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovieMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  MovieMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MovieMetadata& from);
  void MergeFrom(const MovieMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MovieMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MovieMetadata_MovieStatus MovieStatus;
  static const MovieStatus CURRENT_MOVIE =
    MovieMetadata_MovieStatus_CURRENT_MOVIE;
  static const MovieStatus UPCOMING_MOVIE =
    MovieMetadata_MovieStatus_UPCOMING_MOVIE;
  static const MovieStatus PAST_MOVIE =
    MovieMetadata_MovieStatus_PAST_MOVIE;
  static inline bool MovieStatus_IsValid(int value) {
    return MovieMetadata_MovieStatus_IsValid(value);
  }
  static const MovieStatus MovieStatus_MIN =
    MovieMetadata_MovieStatus_MovieStatus_MIN;
  static const MovieStatus MovieStatus_MAX =
    MovieMetadata_MovieStatus_MovieStatus_MAX;
  static const int MovieStatus_ARRAYSIZE =
    MovieMetadata_MovieStatus_MovieStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MovieStatus_descriptor() {
    return MovieMetadata_MovieStatus_descriptor();
  }
  static inline const ::std::string& MovieStatus_Name(MovieStatus value) {
    return MovieMetadata_MovieStatus_Name(value);
  }
  static inline bool MovieStatus_Parse(const ::std::string& name,
      MovieStatus* value) {
    return MovieMetadata_MovieStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string original_title = 2;
  bool has_original_title() const;
  void clear_original_title();
  static const int kOriginalTitleFieldNumber = 2;
  const ::std::string& original_title() const;
  void set_original_title(const ::std::string& value);
  #if LANG_CXX11
  void set_original_title(::std::string&& value);
  #endif
  void set_original_title(const char* value);
  void set_original_title(const char* value, size_t size);
  ::std::string* mutable_original_title();
  ::std::string* release_original_title();
  void set_allocated_original_title(::std::string* original_title);

  // optional string country = 6;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 6;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string director = 7;
  bool has_director() const;
  void clear_director();
  static const int kDirectorFieldNumber = 7;
  const ::std::string& director() const;
  void set_director(const ::std::string& value);
  #if LANG_CXX11
  void set_director(::std::string&& value);
  #endif
  void set_director(const char* value);
  void set_director(const char* value, size_t size);
  ::std::string* mutable_director();
  ::std::string* release_director();
  void set_allocated_director(::std::string* director);

  // optional string producer = 8;
  bool has_producer() const;
  void clear_producer();
  static const int kProducerFieldNumber = 8;
  const ::std::string& producer() const;
  void set_producer(const ::std::string& value);
  #if LANG_CXX11
  void set_producer(::std::string&& value);
  #endif
  void set_producer(const char* value);
  void set_producer(const char* value, size_t size);
  ::std::string* mutable_producer();
  ::std::string* release_producer();
  void set_allocated_producer(::std::string* producer);

  // optional string actors = 9;
  bool has_actors() const;
  void clear_actors();
  static const int kActorsFieldNumber = 9;
  const ::std::string& actors() const;
  void set_actors(const ::std::string& value);
  #if LANG_CXX11
  void set_actors(::std::string&& value);
  #endif
  void set_actors(const char* value);
  void set_actors(const char* value, size_t size);
  ::std::string* mutable_actors();
  ::std::string* release_actors();
  void set_allocated_actors(::std::string* actors);

  // optional string genre = 10;
  bool has_genre() const;
  void clear_genre();
  static const int kGenreFieldNumber = 10;
  const ::std::string& genre() const;
  void set_genre(const ::std::string& value);
  #if LANG_CXX11
  void set_genre(::std::string&& value);
  #endif
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  ::std::string* mutable_genre();
  ::std::string* release_genre();
  void set_allocated_genre(::std::string* genre);

  // optional string description = 11;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 11;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional uint32 year = 5;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 5;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // optional int64 release_date = 13;
  bool has_release_date() const;
  void clear_release_date();
  static const int kReleaseDateFieldNumber = 13;
  ::google::protobuf::int64 release_date() const;
  void set_release_date(::google::protobuf::int64 value);

  // optional int64 premiere_ru = 14;
  bool has_premiere_ru() const;
  void clear_premiere_ru();
  static const int kPremiereRuFieldNumber = 14;
  ::google::protobuf::int64 premiere_ru() const;
  void set_premiere_ru(::google::protobuf::int64 value);

  // optional int64 afisha_id = 15;
  bool has_afisha_id() const;
  void clear_afisha_id();
  static const int kAfishaIdFieldNumber = 15;
  ::google::protobuf::int64 afisha_id() const;
  void set_afisha_id(::google::protobuf::int64 value);

  // optional float imdb_rating = 12;
  bool has_imdb_rating() const;
  void clear_imdb_rating();
  static const int kImdbRatingFieldNumber = 12;
  float imdb_rating() const;
  void set_imdb_rating(float value);

  // optional .ru.mail.go.webbase.blobs.MovieMetadata.MovieStatus status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus status() const;
  void set_status(::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.MovieMetadata)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_original_title();
  void clear_has_original_title();
  void set_has_duration();
  void clear_has_duration();
  void set_has_status();
  void clear_has_status();
  void set_has_year();
  void clear_has_year();
  void set_has_country();
  void clear_has_country();
  void set_has_director();
  void clear_has_director();
  void set_has_producer();
  void clear_has_producer();
  void set_has_actors();
  void clear_has_actors();
  void set_has_genre();
  void clear_has_genre();
  void set_has_description();
  void clear_has_description();
  void set_has_imdb_rating();
  void clear_has_imdb_rating();
  void set_has_release_date();
  void clear_has_release_date();
  void set_has_premiere_ru();
  void clear_has_premiere_ru();
  void set_has_afisha_id();
  void clear_has_afisha_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr original_title_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr director_;
  ::google::protobuf::internal::ArenaStringPtr producer_;
  ::google::protobuf::internal::ArenaStringPtr actors_;
  ::google::protobuf::internal::ArenaStringPtr genre_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::int64 release_date_;
  ::google::protobuf::int64 premiere_ru_;
  ::google::protobuf::int64 afisha_id_;
  float imdb_rating_;
  int status_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoviesClassificationDoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.MoviesClassificationDoc) */ {
 public:
  MoviesClassificationDoc();
  virtual ~MoviesClassificationDoc();

  MoviesClassificationDoc(const MoviesClassificationDoc& from);

  inline MoviesClassificationDoc& operator=(const MoviesClassificationDoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoviesClassificationDoc(MoviesClassificationDoc&& from) noexcept
    : MoviesClassificationDoc() {
    *this = ::std::move(from);
  }

  inline MoviesClassificationDoc& operator=(MoviesClassificationDoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoviesClassificationDoc& default_instance();

  static inline const MoviesClassificationDoc* internal_default_instance() {
    return reinterpret_cast<const MoviesClassificationDoc*>(
               &_MoviesClassificationDoc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MoviesClassificationDoc* other);
  friend void swap(MoviesClassificationDoc& a, MoviesClassificationDoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoviesClassificationDoc* New() const PROTOBUF_FINAL { return New(NULL); }

  MoviesClassificationDoc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MoviesClassificationDoc& from);
  void MergeFrom(const MoviesClassificationDoc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MoviesClassificationDoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string url = 2;
  int url_size() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url(int index) const;
  ::std::string* mutable_url(int index);
  void set_url(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_url(int index, ::std::string&& value);
  #endif
  void set_url(int index, const char* value);
  void set_url(int index, const char* value, size_t size);
  ::std::string* add_url();
  void add_url(const ::std::string& value);
  #if LANG_CXX11
  void add_url(::std::string&& value);
  #endif
  void add_url(const char* value);
  void add_url(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& url() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url();

  // required .ru.mail.go.webbase.blobs.MovieMetadata metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::MovieMetadata& metadata() const;
  ::ru::mail::go::webbase::blobs::MovieMetadata* mutable_metadata();
  ::ru::mail::go::webbase::blobs::MovieMetadata* release_metadata();
  void set_allocated_metadata(::ru::mail::go::webbase::blobs::MovieMetadata* metadata);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.MoviesClassificationDoc)
 private:
  void set_has_metadata();
  void clear_has_metadata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_;
  ::ru::mail::go::webbase::blobs::MovieMetadata* metadata_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YouTubeRecommendations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.YouTubeRecommendations) */ {
 public:
  YouTubeRecommendations();
  virtual ~YouTubeRecommendations();

  YouTubeRecommendations(const YouTubeRecommendations& from);

  inline YouTubeRecommendations& operator=(const YouTubeRecommendations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YouTubeRecommendations(YouTubeRecommendations&& from) noexcept
    : YouTubeRecommendations() {
    *this = ::std::move(from);
  }

  inline YouTubeRecommendations& operator=(YouTubeRecommendations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YouTubeRecommendations& default_instance();

  static inline const YouTubeRecommendations* internal_default_instance() {
    return reinterpret_cast<const YouTubeRecommendations*>(
               &_YouTubeRecommendations_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(YouTubeRecommendations* other);
  friend void swap(YouTubeRecommendations& a, YouTubeRecommendations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YouTubeRecommendations* New() const PROTOBUF_FINAL { return New(NULL); }

  YouTubeRecommendations* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YouTubeRecommendations& from);
  void MergeFrom(const YouTubeRecommendations& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YouTubeRecommendations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string recommendations_ids = 1;
  int recommendations_ids_size() const;
  void clear_recommendations_ids();
  static const int kRecommendationsIdsFieldNumber = 1;
  const ::std::string& recommendations_ids(int index) const;
  ::std::string* mutable_recommendations_ids(int index);
  void set_recommendations_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_recommendations_ids(int index, ::std::string&& value);
  #endif
  void set_recommendations_ids(int index, const char* value);
  void set_recommendations_ids(int index, const char* value, size_t size);
  ::std::string* add_recommendations_ids();
  void add_recommendations_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_recommendations_ids(::std::string&& value);
  #endif
  void add_recommendations_ids(const char* value);
  void add_recommendations_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& recommendations_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recommendations_ids();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.YouTubeRecommendations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recommendations_ids_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoMarkupHtmlInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput) */ {
 public:
  VideoMarkupHtmlInput();
  virtual ~VideoMarkupHtmlInput();

  VideoMarkupHtmlInput(const VideoMarkupHtmlInput& from);

  inline VideoMarkupHtmlInput& operator=(const VideoMarkupHtmlInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoMarkupHtmlInput(VideoMarkupHtmlInput&& from) noexcept
    : VideoMarkupHtmlInput() {
    *this = ::std::move(from);
  }

  inline VideoMarkupHtmlInput& operator=(VideoMarkupHtmlInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMarkupHtmlInput& default_instance();

  static inline const VideoMarkupHtmlInput* internal_default_instance() {
    return reinterpret_cast<const VideoMarkupHtmlInput*>(
               &_VideoMarkupHtmlInput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(VideoMarkupHtmlInput* other);
  friend void swap(VideoMarkupHtmlInput& a, VideoMarkupHtmlInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoMarkupHtmlInput* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoMarkupHtmlInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoMarkupHtmlInput& from);
  void MergeFrom(const VideoMarkupHtmlInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoMarkupHtmlInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required bytes content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
  bool has_enc() const;
  void clear_enc();
  static const int kEncFieldNumber = 3;
  ::ru::mail::go::webbase::blobs::Encoding enc() const;
  void set_enc(::ru::mail::go::webbase::blobs::Encoding value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_content();
  void clear_has_content();
  void set_has_enc();
  void clear_has_enc();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int enc_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoMarkupDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoMarkupDescription) */ {
 public:
  VideoMarkupDescription();
  virtual ~VideoMarkupDescription();

  VideoMarkupDescription(const VideoMarkupDescription& from);

  inline VideoMarkupDescription& operator=(const VideoMarkupDescription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoMarkupDescription(VideoMarkupDescription&& from) noexcept
    : VideoMarkupDescription() {
    *this = ::std::move(from);
  }

  inline VideoMarkupDescription& operator=(VideoMarkupDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMarkupDescription& default_instance();

  static inline const VideoMarkupDescription* internal_default_instance() {
    return reinterpret_cast<const VideoMarkupDescription*>(
               &_VideoMarkupDescription_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(VideoMarkupDescription* other);
  friend void swap(VideoMarkupDescription& a, VideoMarkupDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoMarkupDescription* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoMarkupDescription* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoMarkupDescription& from);
  void MergeFrom(const VideoMarkupDescription& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoMarkupDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg schema_org = 3;
  int schema_org_size() const;
  void clear_schema_org();
  static const int kSchemaOrgFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg& schema_org(int index) const;
  ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg* mutable_schema_org(int index);
  ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg* add_schema_org();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg >*
      mutable_schema_org();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg >&
      schema_org() const;

  // repeated .ru.mail.go.webbase.blobs.VideoMarkupHtml5Video html5_video = 5;
  int html5_video_size() const;
  void clear_html5_video();
  static const int kHtml5VideoFieldNumber = 5;
  const ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video& html5_video(int index) const;
  ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video* mutable_html5_video(int index);
  ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video* add_html5_video();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video >*
      mutable_html5_video();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video >&
      html5_video() const;

  // optional .ru.mail.go.webbase.blobs.VideoMarkupOpenGraph open_graph = 2;
  bool has_open_graph() const;
  void clear_open_graph();
  static const int kOpenGraphFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph& open_graph() const;
  ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* mutable_open_graph();
  ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* release_open_graph();
  void set_allocated_open_graph(::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* open_graph);

  // optional .ru.mail.go.webbase.blobs.VideoMarkupTwitterCard twitter_card = 4;
  bool has_twitter_card() const;
  void clear_twitter_card();
  static const int kTwitterCardFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard& twitter_card() const;
  ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* mutable_twitter_card();
  ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* release_twitter_card();
  void set_allocated_twitter_card(::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* twitter_card);

  // required bool video_markup_detected = 1 [default = false];
  bool has_video_markup_detected() const;
  void clear_video_markup_detected();
  static const int kVideoMarkupDetectedFieldNumber = 1;
  bool video_markup_detected() const;
  void set_video_markup_detected(bool value);

  // required uint32 number_of_unparsed_open_graph_videos = 6 [default = 0];
  bool has_number_of_unparsed_open_graph_videos() const;
  void clear_number_of_unparsed_open_graph_videos();
  static const int kNumberOfUnparsedOpenGraphVideosFieldNumber = 6;
  ::google::protobuf::uint32 number_of_unparsed_open_graph_videos() const;
  void set_number_of_unparsed_open_graph_videos(::google::protobuf::uint32 value);

  // required uint32 number_of_unparsed_schema_org_videos = 7 [default = 0];
  bool has_number_of_unparsed_schema_org_videos() const;
  void clear_number_of_unparsed_schema_org_videos();
  static const int kNumberOfUnparsedSchemaOrgVideosFieldNumber = 7;
  ::google::protobuf::uint32 number_of_unparsed_schema_org_videos() const;
  void set_number_of_unparsed_schema_org_videos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoMarkupDescription)
 private:
  void set_has_video_markup_detected();
  void clear_has_video_markup_detected();
  void set_has_open_graph();
  void clear_has_open_graph();
  void set_has_twitter_card();
  void clear_has_twitter_card();
  void set_has_number_of_unparsed_open_graph_videos();
  void clear_has_number_of_unparsed_open_graph_videos();
  void set_has_number_of_unparsed_schema_org_videos();
  void clear_has_number_of_unparsed_schema_org_videos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg > schema_org_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video > html5_video_;
  ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* open_graph_;
  ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* twitter_card_;
  bool video_markup_detected_;
  ::google::protobuf::uint32 number_of_unparsed_open_graph_videos_;
  ::google::protobuf::uint32 number_of_unparsed_schema_org_videos_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoMarkupOpenGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph) */ {
 public:
  VideoMarkupOpenGraph();
  virtual ~VideoMarkupOpenGraph();

  VideoMarkupOpenGraph(const VideoMarkupOpenGraph& from);

  inline VideoMarkupOpenGraph& operator=(const VideoMarkupOpenGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoMarkupOpenGraph(VideoMarkupOpenGraph&& from) noexcept
    : VideoMarkupOpenGraph() {
    *this = ::std::move(from);
  }

  inline VideoMarkupOpenGraph& operator=(VideoMarkupOpenGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMarkupOpenGraph& default_instance();

  static inline const VideoMarkupOpenGraph* internal_default_instance() {
    return reinterpret_cast<const VideoMarkupOpenGraph*>(
               &_VideoMarkupOpenGraph_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(VideoMarkupOpenGraph* other);
  friend void swap(VideoMarkupOpenGraph& a, VideoMarkupOpenGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoMarkupOpenGraph* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoMarkupOpenGraph* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoMarkupOpenGraph& from);
  void MergeFrom(const VideoMarkupOpenGraph& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoMarkupOpenGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string page_url = 2;
  bool has_page_url() const;
  void clear_page_url();
  static const int kPageUrlFieldNumber = 2;
  const ::std::string& page_url() const;
  void set_page_url(const ::std::string& value);
  #if LANG_CXX11
  void set_page_url(::std::string&& value);
  #endif
  void set_page_url(const char* value);
  void set_page_url(const char* value, size_t size);
  ::std::string* mutable_page_url();
  ::std::string* release_page_url();
  void set_allocated_page_url(::std::string* page_url);

  // required string preview = 3;
  bool has_preview() const;
  void clear_preview();
  static const int kPreviewFieldNumber = 3;
  const ::std::string& preview() const;
  void set_preview(const ::std::string& value);
  #if LANG_CXX11
  void set_preview(::std::string&& value);
  #endif
  void set_preview(const char* value);
  void set_preview(const char* value, size_t size);
  ::std::string* mutable_preview();
  ::std::string* release_preview();
  void set_allocated_preview(::std::string* preview);

  // optional string video_player_url = 4;
  bool has_video_player_url() const;
  void clear_video_player_url();
  static const int kVideoPlayerUrlFieldNumber = 4;
  const ::std::string& video_player_url() const;
  void set_video_player_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_player_url(::std::string&& value);
  #endif
  void set_video_player_url(const char* value);
  void set_video_player_url(const char* value, size_t size);
  ::std::string* mutable_video_player_url();
  ::std::string* release_video_player_url();
  void set_allocated_video_player_url(::std::string* video_player_url);

  // optional string video_type = 5;
  bool has_video_type() const;
  void clear_video_type();
  static const int kVideoTypeFieldNumber = 5;
  const ::std::string& video_type() const;
  void set_video_type(const ::std::string& value);
  #if LANG_CXX11
  void set_video_type(::std::string&& value);
  #endif
  void set_video_type(const char* value);
  void set_video_type(const char* value, size_t size);
  ::std::string* mutable_video_type();
  ::std::string* release_video_type();
  void set_allocated_video_type(::std::string* video_type);

  // optional string description = 9;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 9;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string upload_date_iso8601 = 16;
  bool has_upload_date_iso8601() const;
  void clear_upload_date_iso8601();
  static const int kUploadDateIso8601FieldNumber = 16;
  const ::std::string& upload_date_iso8601() const;
  void set_upload_date_iso8601(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_date_iso8601(::std::string&& value);
  #endif
  void set_upload_date_iso8601(const char* value);
  void set_upload_date_iso8601(const char* value, size_t size);
  ::std::string* mutable_upload_date_iso8601();
  ::std::string* release_upload_date_iso8601();
  void set_allocated_upload_date_iso8601(::std::string* upload_date_iso8601);

  // optional int32 width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 duration = 8;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 8;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional bool adult = 10;
  bool has_adult() const;
  void clear_adult();
  static const int kAdultFieldNumber = 10;
  bool adult() const;
  void set_adult(bool value);

  // optional bool hd = 11;
  bool has_hd() const;
  void clear_hd();
  static const int kHdFieldNumber = 11;
  bool hd() const;
  void set_hd(bool value);

  // optional bool full_hd = 12;
  bool has_full_hd() const;
  void clear_full_hd();
  static const int kFullHdFieldNumber = 12;
  bool full_hd() const;
  void set_full_hd(bool value);

  // optional bool allow_embed = 15;
  bool has_allow_embed() const;
  void clear_allow_embed();
  static const int kAllowEmbedFieldNumber = 15;
  bool allow_embed() const;
  void set_allow_embed(bool value);

  // optional int32 season = 13;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 13;
  ::google::protobuf::int32 season() const;
  void set_season(::google::protobuf::int32 value);

  // optional int32 episode = 14;
  bool has_episode() const;
  void clear_episode();
  static const int kEpisodeFieldNumber = 14;
  ::google::protobuf::int32 episode() const;
  void set_episode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_page_url();
  void clear_has_page_url();
  void set_has_preview();
  void clear_has_preview();
  void set_has_video_player_url();
  void clear_has_video_player_url();
  void set_has_video_type();
  void clear_has_video_type();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_duration();
  void clear_has_duration();
  void set_has_description();
  void clear_has_description();
  void set_has_adult();
  void clear_has_adult();
  void set_has_hd();
  void clear_has_hd();
  void set_has_full_hd();
  void clear_has_full_hd();
  void set_has_season();
  void clear_has_season();
  void set_has_episode();
  void clear_has_episode();
  void set_has_allow_embed();
  void clear_has_allow_embed();
  void set_has_upload_date_iso8601();
  void clear_has_upload_date_iso8601();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr page_url_;
  ::google::protobuf::internal::ArenaStringPtr preview_;
  ::google::protobuf::internal::ArenaStringPtr video_player_url_;
  ::google::protobuf::internal::ArenaStringPtr video_type_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr upload_date_iso8601_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 duration_;
  bool adult_;
  bool hd_;
  bool full_hd_;
  bool allow_embed_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 episode_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoMarkupSchemaOrg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg) */ {
 public:
  VideoMarkupSchemaOrg();
  virtual ~VideoMarkupSchemaOrg();

  VideoMarkupSchemaOrg(const VideoMarkupSchemaOrg& from);

  inline VideoMarkupSchemaOrg& operator=(const VideoMarkupSchemaOrg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoMarkupSchemaOrg(VideoMarkupSchemaOrg&& from) noexcept
    : VideoMarkupSchemaOrg() {
    *this = ::std::move(from);
  }

  inline VideoMarkupSchemaOrg& operator=(VideoMarkupSchemaOrg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMarkupSchemaOrg& default_instance();

  static inline const VideoMarkupSchemaOrg* internal_default_instance() {
    return reinterpret_cast<const VideoMarkupSchemaOrg*>(
               &_VideoMarkupSchemaOrg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(VideoMarkupSchemaOrg* other);
  friend void swap(VideoMarkupSchemaOrg& a, VideoMarkupSchemaOrg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoMarkupSchemaOrg* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoMarkupSchemaOrg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoMarkupSchemaOrg& from);
  void MergeFrom(const VideoMarkupSchemaOrg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoMarkupSchemaOrg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VideoMarkupSchemaOrg_DeclarationType DeclarationType;
  static const DeclarationType MICRODATA =
    VideoMarkupSchemaOrg_DeclarationType_MICRODATA;
  static const DeclarationType RDFA =
    VideoMarkupSchemaOrg_DeclarationType_RDFA;
  static const DeclarationType JSON_LD =
    VideoMarkupSchemaOrg_DeclarationType_JSON_LD;
  static inline bool DeclarationType_IsValid(int value) {
    return VideoMarkupSchemaOrg_DeclarationType_IsValid(value);
  }
  static const DeclarationType DeclarationType_MIN =
    VideoMarkupSchemaOrg_DeclarationType_DeclarationType_MIN;
  static const DeclarationType DeclarationType_MAX =
    VideoMarkupSchemaOrg_DeclarationType_DeclarationType_MAX;
  static const int DeclarationType_ARRAYSIZE =
    VideoMarkupSchemaOrg_DeclarationType_DeclarationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeclarationType_descriptor() {
    return VideoMarkupSchemaOrg_DeclarationType_descriptor();
  }
  static inline const ::std::string& DeclarationType_Name(DeclarationType value) {
    return VideoMarkupSchemaOrg_DeclarationType_Name(value);
  }
  static inline bool DeclarationType_Parse(const ::std::string& name,
      DeclarationType* value) {
    return VideoMarkupSchemaOrg_DeclarationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string page_url = 3;
  bool has_page_url() const;
  void clear_page_url();
  static const int kPageUrlFieldNumber = 3;
  const ::std::string& page_url() const;
  void set_page_url(const ::std::string& value);
  #if LANG_CXX11
  void set_page_url(::std::string&& value);
  #endif
  void set_page_url(const char* value);
  void set_page_url(const char* value, size_t size);
  ::std::string* mutable_page_url();
  ::std::string* release_page_url();
  void set_allocated_page_url(::std::string* page_url);

  // required string preview = 4;
  bool has_preview() const;
  void clear_preview();
  static const int kPreviewFieldNumber = 4;
  const ::std::string& preview() const;
  void set_preview(const ::std::string& value);
  #if LANG_CXX11
  void set_preview(::std::string&& value);
  #endif
  void set_preview(const char* value);
  void set_preview(const char* value, size_t size);
  ::std::string* mutable_preview();
  ::std::string* release_preview();
  void set_allocated_preview(::std::string* preview);

  // optional string video_player_url = 5;
  bool has_video_player_url() const;
  void clear_video_player_url();
  static const int kVideoPlayerUrlFieldNumber = 5;
  const ::std::string& video_player_url() const;
  void set_video_player_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_player_url(::std::string&& value);
  #endif
  void set_video_player_url(const char* value);
  void set_video_player_url(const char* value, size_t size);
  ::std::string* mutable_video_player_url();
  ::std::string* release_video_player_url();
  void set_allocated_video_player_url(::std::string* video_player_url);

  // optional string video_type = 6;
  bool has_video_type() const;
  void clear_video_type();
  static const int kVideoTypeFieldNumber = 6;
  const ::std::string& video_type() const;
  void set_video_type(const ::std::string& value);
  #if LANG_CXX11
  void set_video_type(::std::string&& value);
  #endif
  void set_video_type(const char* value);
  void set_video_type(const char* value, size_t size);
  ::std::string* mutable_video_type();
  ::std::string* release_video_type();
  void set_allocated_video_type(::std::string* video_type);

  // optional string duration_iso8601 = 9;
  bool has_duration_iso8601() const;
  void clear_duration_iso8601();
  static const int kDurationIso8601FieldNumber = 9;
  const ::std::string& duration_iso8601() const;
  void set_duration_iso8601(const ::std::string& value);
  #if LANG_CXX11
  void set_duration_iso8601(::std::string&& value);
  #endif
  void set_duration_iso8601(const char* value);
  void set_duration_iso8601(const char* value, size_t size);
  ::std::string* mutable_duration_iso8601();
  ::std::string* release_duration_iso8601();
  void set_allocated_duration_iso8601(::std::string* duration_iso8601);

  // optional string description = 10;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 10;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional int32 width = 7;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 8;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional bool is_family_friendly = 11;
  bool has_is_family_friendly() const;
  void clear_is_family_friendly();
  static const int kIsFamilyFriendlyFieldNumber = 11;
  bool is_family_friendly() const;
  void set_is_family_friendly(bool value);

  // optional bool paid = 12;
  bool has_paid() const;
  void clear_paid();
  static const int kPaidFieldNumber = 12;
  bool paid() const;
  void set_paid(bool value);

  // required .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.DeclarationType declaration_type = 1;
  bool has_declaration_type() const;
  void clear_declaration_type();
  static const int kDeclarationTypeFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType declaration_type() const;
  void set_declaration_type(::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg)
 private:
  void set_has_declaration_type();
  void clear_has_declaration_type();
  void set_has_title();
  void clear_has_title();
  void set_has_page_url();
  void clear_has_page_url();
  void set_has_preview();
  void clear_has_preview();
  void set_has_video_player_url();
  void clear_has_video_player_url();
  void set_has_video_type();
  void clear_has_video_type();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_duration_iso8601();
  void clear_has_duration_iso8601();
  void set_has_description();
  void clear_has_description();
  void set_has_is_family_friendly();
  void clear_has_is_family_friendly();
  void set_has_paid();
  void clear_has_paid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr page_url_;
  ::google::protobuf::internal::ArenaStringPtr preview_;
  ::google::protobuf::internal::ArenaStringPtr video_player_url_;
  ::google::protobuf::internal::ArenaStringPtr video_type_;
  ::google::protobuf::internal::ArenaStringPtr duration_iso8601_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  bool is_family_friendly_;
  bool paid_;
  int declaration_type_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoMarkupTwitterCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard) */ {
 public:
  VideoMarkupTwitterCard();
  virtual ~VideoMarkupTwitterCard();

  VideoMarkupTwitterCard(const VideoMarkupTwitterCard& from);

  inline VideoMarkupTwitterCard& operator=(const VideoMarkupTwitterCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoMarkupTwitterCard(VideoMarkupTwitterCard&& from) noexcept
    : VideoMarkupTwitterCard() {
    *this = ::std::move(from);
  }

  inline VideoMarkupTwitterCard& operator=(VideoMarkupTwitterCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMarkupTwitterCard& default_instance();

  static inline const VideoMarkupTwitterCard* internal_default_instance() {
    return reinterpret_cast<const VideoMarkupTwitterCard*>(
               &_VideoMarkupTwitterCard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(VideoMarkupTwitterCard* other);
  friend void swap(VideoMarkupTwitterCard& a, VideoMarkupTwitterCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoMarkupTwitterCard* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoMarkupTwitterCard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoMarkupTwitterCard& from);
  void MergeFrom(const VideoMarkupTwitterCard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoMarkupTwitterCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string card_type = 1;
  bool has_card_type() const;
  void clear_card_type();
  static const int kCardTypeFieldNumber = 1;
  const ::std::string& card_type() const;
  void set_card_type(const ::std::string& value);
  #if LANG_CXX11
  void set_card_type(::std::string&& value);
  #endif
  void set_card_type(const char* value);
  void set_card_type(const char* value, size_t size);
  ::std::string* mutable_card_type();
  ::std::string* release_card_type();
  void set_allocated_card_type(::std::string* card_type);

  // required string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string page_url = 3;
  bool has_page_url() const;
  void clear_page_url();
  static const int kPageUrlFieldNumber = 3;
  const ::std::string& page_url() const;
  void set_page_url(const ::std::string& value);
  #if LANG_CXX11
  void set_page_url(::std::string&& value);
  #endif
  void set_page_url(const char* value);
  void set_page_url(const char* value, size_t size);
  ::std::string* mutable_page_url();
  ::std::string* release_page_url();
  void set_allocated_page_url(::std::string* page_url);

  // required string preview = 4;
  bool has_preview() const;
  void clear_preview();
  static const int kPreviewFieldNumber = 4;
  const ::std::string& preview() const;
  void set_preview(const ::std::string& value);
  #if LANG_CXX11
  void set_preview(::std::string&& value);
  #endif
  void set_preview(const char* value);
  void set_preview(const char* value, size_t size);
  ::std::string* mutable_preview();
  ::std::string* release_preview();
  void set_allocated_preview(::std::string* preview);

  // required string video_type = 5;
  bool has_video_type() const;
  void clear_video_type();
  static const int kVideoTypeFieldNumber = 5;
  const ::std::string& video_type() const;
  void set_video_type(const ::std::string& value);
  #if LANG_CXX11
  void set_video_type(::std::string&& value);
  #endif
  void set_video_type(const char* value);
  void set_video_type(const char* value, size_t size);
  ::std::string* mutable_video_type();
  ::std::string* release_video_type();
  void set_allocated_video_type(::std::string* video_type);

  // optional string video_player_url = 6;
  bool has_video_player_url() const;
  void clear_video_player_url();
  static const int kVideoPlayerUrlFieldNumber = 6;
  const ::std::string& video_player_url() const;
  void set_video_player_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_player_url(::std::string&& value);
  #endif
  void set_video_player_url(const char* value);
  void set_video_player_url(const char* value, size_t size);
  ::std::string* mutable_video_player_url();
  ::std::string* release_video_player_url();
  void set_allocated_video_player_url(::std::string* video_player_url);

  // optional string stream_player_url = 7;
  bool has_stream_player_url() const;
  void clear_stream_player_url();
  static const int kStreamPlayerUrlFieldNumber = 7;
  const ::std::string& stream_player_url() const;
  void set_stream_player_url(const ::std::string& value);
  #if LANG_CXX11
  void set_stream_player_url(::std::string&& value);
  #endif
  void set_stream_player_url(const char* value);
  void set_stream_player_url(const char* value, size_t size);
  ::std::string* mutable_stream_player_url();
  ::std::string* release_stream_player_url();
  void set_allocated_stream_player_url(::std::string* stream_player_url);

  // optional string description = 11;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 11;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional int32 width = 8;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 9;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 duration = 10;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 10;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard)
 private:
  void set_has_card_type();
  void clear_has_card_type();
  void set_has_title();
  void clear_has_title();
  void set_has_page_url();
  void clear_has_page_url();
  void set_has_preview();
  void clear_has_preview();
  void set_has_video_type();
  void clear_has_video_type();
  void set_has_video_player_url();
  void clear_has_video_player_url();
  void set_has_stream_player_url();
  void clear_has_stream_player_url();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_duration();
  void clear_has_duration();
  void set_has_description();
  void clear_has_description();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr card_type_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr page_url_;
  ::google::protobuf::internal::ArenaStringPtr preview_;
  ::google::protobuf::internal::ArenaStringPtr video_type_;
  ::google::protobuf::internal::ArenaStringPtr video_player_url_;
  ::google::protobuf::internal::ArenaStringPtr stream_player_url_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 duration_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoMarkupHtml5Video : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video) */ {
 public:
  VideoMarkupHtml5Video();
  virtual ~VideoMarkupHtml5Video();

  VideoMarkupHtml5Video(const VideoMarkupHtml5Video& from);

  inline VideoMarkupHtml5Video& operator=(const VideoMarkupHtml5Video& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoMarkupHtml5Video(VideoMarkupHtml5Video&& from) noexcept
    : VideoMarkupHtml5Video() {
    *this = ::std::move(from);
  }

  inline VideoMarkupHtml5Video& operator=(VideoMarkupHtml5Video&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMarkupHtml5Video& default_instance();

  static inline const VideoMarkupHtml5Video* internal_default_instance() {
    return reinterpret_cast<const VideoMarkupHtml5Video*>(
               &_VideoMarkupHtml5Video_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(VideoMarkupHtml5Video* other);
  friend void swap(VideoMarkupHtml5Video& a, VideoMarkupHtml5Video& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoMarkupHtml5Video* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoMarkupHtml5Video* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoMarkupHtml5Video& from);
  void MergeFrom(const VideoMarkupHtml5Video& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoMarkupHtml5Video* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoMarkupHtml5Video)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecoBuildInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.RecoBuildInfo) */ {
 public:
  RecoBuildInfo();
  virtual ~RecoBuildInfo();

  RecoBuildInfo(const RecoBuildInfo& from);

  inline RecoBuildInfo& operator=(const RecoBuildInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoBuildInfo(RecoBuildInfo&& from) noexcept
    : RecoBuildInfo() {
    *this = ::std::move(from);
  }

  inline RecoBuildInfo& operator=(RecoBuildInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoBuildInfo& default_instance();

  static inline const RecoBuildInfo* internal_default_instance() {
    return reinterpret_cast<const RecoBuildInfo*>(
               &_RecoBuildInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(RecoBuildInfo* other);
  friend void swap(RecoBuildInfo& a, RecoBuildInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoBuildInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RecoBuildInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecoBuildInfo& from);
  void MergeFrom(const RecoBuildInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecoBuildInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url_recommended = 1;
  bool has_url_recommended() const;
  void clear_url_recommended();
  static const int kUrlRecommendedFieldNumber = 1;
  const ::std::string& url_recommended() const;
  void set_url_recommended(const ::std::string& value);
  #if LANG_CXX11
  void set_url_recommended(::std::string&& value);
  #endif
  void set_url_recommended(const char* value);
  void set_url_recommended(const char* value, size_t size);
  ::std::string* mutable_url_recommended();
  ::std::string* release_url_recommended();
  void set_allocated_url_recommended(::std::string* url_recommended);

  // optional string recommended_for = 2;
  bool has_recommended_for() const;
  void clear_recommended_for();
  static const int kRecommendedForFieldNumber = 2;
  const ::std::string& recommended_for() const;
  void set_recommended_for(const ::std::string& value);
  #if LANG_CXX11
  void set_recommended_for(::std::string&& value);
  #endif
  void set_recommended_for(const char* value);
  void set_recommended_for(const char* value, size_t size);
  ::std::string* mutable_recommended_for();
  ::std::string* release_recommended_for();
  void set_allocated_recommended_for(::std::string* recommended_for);

  // optional .ru.mail.go.webbase.blobs.IndexedVideo indexed_video = 3;
  bool has_indexed_video() const;
  void clear_indexed_video();
  static const int kIndexedVideoFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::IndexedVideo& indexed_video() const;
  ::ru::mail::go::webbase::blobs::IndexedVideo* mutable_indexed_video();
  ::ru::mail::go::webbase::blobs::IndexedVideo* release_indexed_video();
  void set_allocated_indexed_video(::ru::mail::go::webbase::blobs::IndexedVideo* indexed_video);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.RecoBuildInfo)
 private:
  void set_has_url_recommended();
  void clear_has_url_recommended();
  void set_has_recommended_for();
  void clear_has_recommended_for();
  void set_has_indexed_video();
  void clear_has_indexed_video();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_recommended_;
  ::google::protobuf::internal::ArenaStringPtr recommended_for_;
  ::ru::mail::go::webbase::blobs::IndexedVideo* indexed_video_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkVideoView : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkVideoView) */ {
 public:
  VkVideoView();
  virtual ~VkVideoView();

  VkVideoView(const VkVideoView& from);

  inline VkVideoView& operator=(const VkVideoView& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkVideoView(VkVideoView&& from) noexcept
    : VkVideoView() {
    *this = ::std::move(from);
  }

  inline VkVideoView& operator=(VkVideoView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkVideoView& default_instance();

  static inline const VkVideoView* internal_default_instance() {
    return reinterpret_cast<const VkVideoView*>(
               &_VkVideoView_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(VkVideoView* other);
  friend void swap(VkVideoView& a, VkVideoView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkVideoView* New() const PROTOBUF_FINAL { return New(NULL); }

  VkVideoView* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkVideoView& from);
  void MergeFrom(const VkVideoView& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkVideoView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referrer_url = 2;
  bool has_referrer_url() const;
  void clear_referrer_url();
  static const int kReferrerUrlFieldNumber = 2;
  const ::std::string& referrer_url() const;
  void set_referrer_url(const ::std::string& value);
  #if LANG_CXX11
  void set_referrer_url(::std::string&& value);
  #endif
  void set_referrer_url(const char* value);
  void set_referrer_url(const char* value, size_t size);
  ::std::string* mutable_referrer_url();
  ::std::string* release_referrer_url();
  void set_allocated_referrer_url(::std::string* referrer_url);

  // optional string video_url = 6;
  bool has_video_url() const;
  void clear_video_url();
  static const int kVideoUrlFieldNumber = 6;
  const ::std::string& video_url() const;
  void set_video_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_url(::std::string&& value);
  #endif
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  ::std::string* mutable_video_url();
  ::std::string* release_video_url();
  void set_allocated_video_url(::std::string* video_url);

  // optional string ref = 9;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 9;
  const ::std::string& ref() const;
  void set_ref(const ::std::string& value);
  #if LANG_CXX11
  void set_ref(::std::string&& value);
  #endif
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  ::std::string* mutable_ref();
  ::std::string* release_ref();
  void set_allocated_ref(::std::string* ref);

  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 7;
  bool has_video_metadata() const;
  void clear_video_metadata();
  static const int kVideoMetadataFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::VideoImportDoc& video_metadata() const;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* mutable_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* release_video_metadata();
  void set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata);

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // optional float viewed_part = 4;
  bool has_viewed_part() const;
  void clear_viewed_part();
  static const int kViewedPartFieldNumber = 4;
  float viewed_part() const;
  void set_viewed_part(float value);

  // optional int64 start_time = 3;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // optional int64 event_timestamp = 8;
  bool has_event_timestamp() const;
  void clear_event_timestamp();
  static const int kEventTimestampFieldNumber = 8;
  ::google::protobuf::int64 event_timestamp() const;
  void set_event_timestamp(::google::protobuf::int64 value);

  // optional bool our_recommendations = 5;
  bool has_our_recommendations() const;
  void clear_our_recommendations();
  static const int kOurRecommendationsFieldNumber = 5;
  bool our_recommendations() const;
  void set_our_recommendations(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkVideoView)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_referrer_url();
  void clear_has_referrer_url();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_viewed_part();
  void clear_has_viewed_part();
  void set_has_our_recommendations();
  void clear_has_our_recommendations();
  void set_has_video_url();
  void clear_has_video_url();
  void set_has_video_metadata();
  void clear_has_video_metadata();
  void set_has_event_timestamp();
  void clear_has_event_timestamp();
  void set_has_ref();
  void clear_has_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr referrer_url_;
  ::google::protobuf::internal::ArenaStringPtr video_url_;
  ::google::protobuf::internal::ArenaStringPtr ref_;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata_;
  ::google::protobuf::int32 user_id_;
  float viewed_part_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 event_timestamp_;
  bool our_recommendations_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoView : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoView) */ {
 public:
  VideoView();
  virtual ~VideoView();

  VideoView(const VideoView& from);

  inline VideoView& operator=(const VideoView& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoView(VideoView&& from) noexcept
    : VideoView() {
    *this = ::std::move(from);
  }

  inline VideoView& operator=(VideoView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoView& default_instance();

  static inline const VideoView* internal_default_instance() {
    return reinterpret_cast<const VideoView*>(
               &_VideoView_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(VideoView* other);
  friend void swap(VideoView& a, VideoView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoView* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoView* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoView& from);
  void MergeFrom(const VideoView& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string mrcu = 1;
  bool has_mrcu() const;
  void clear_mrcu();
  static const int kMrcuFieldNumber = 1;
  const ::std::string& mrcu() const;
  void set_mrcu(const ::std::string& value);
  #if LANG_CXX11
  void set_mrcu(::std::string&& value);
  #endif
  void set_mrcu(const char* value);
  void set_mrcu(const char* value, size_t size);
  ::std::string* mutable_mrcu();
  ::std::string* release_mrcu();
  void set_allocated_mrcu(::std::string* mrcu);

  // required string video_url = 2;
  bool has_video_url() const;
  void clear_video_url();
  static const int kVideoUrlFieldNumber = 2;
  const ::std::string& video_url() const;
  void set_video_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_url(::std::string&& value);
  #endif
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  ::std::string* mutable_video_url();
  ::std::string* release_video_url();
  void set_allocated_video_url(::std::string* video_url);

  // optional string query = 5;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 5;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 3;
  bool has_video_metadata() const;
  void clear_video_metadata();
  static const int kVideoMetadataFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::VideoImportDoc& video_metadata() const;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* mutable_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* release_video_metadata();
  void set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata);

  // optional int64 event_timestamp = 4;
  bool has_event_timestamp() const;
  void clear_event_timestamp();
  static const int kEventTimestampFieldNumber = 4;
  ::google::protobuf::int64 event_timestamp() const;
  void set_event_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoView)
 private:
  void set_has_mrcu();
  void clear_has_mrcu();
  void set_has_video_url();
  void clear_has_video_url();
  void set_has_video_metadata();
  void clear_has_video_metadata();
  void set_has_event_timestamp();
  void clear_has_event_timestamp();
  void set_has_query();
  void clear_has_query();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mrcu_;
  ::google::protobuf::internal::ArenaStringPtr video_url_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata_;
  ::google::protobuf::int64 event_timestamp_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoViewsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoViewsList) */ {
 public:
  VideoViewsList();
  virtual ~VideoViewsList();

  VideoViewsList(const VideoViewsList& from);

  inline VideoViewsList& operator=(const VideoViewsList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoViewsList(VideoViewsList&& from) noexcept
    : VideoViewsList() {
    *this = ::std::move(from);
  }

  inline VideoViewsList& operator=(VideoViewsList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoViewsList& default_instance();

  static inline const VideoViewsList* internal_default_instance() {
    return reinterpret_cast<const VideoViewsList*>(
               &_VideoViewsList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(VideoViewsList* other);
  friend void swap(VideoViewsList& a, VideoViewsList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoViewsList* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoViewsList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoViewsList& from);
  void MergeFrom(const VideoViewsList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoViewsList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VideoView views = 1;
  int views_size() const;
  void clear_views();
  static const int kViewsFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VideoView& views(int index) const;
  ::ru::mail::go::webbase::blobs::VideoView* mutable_views(int index);
  ::ru::mail::go::webbase::blobs::VideoView* add_views();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoView >*
      mutable_views();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoView >&
      views() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoViewsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoView > views_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoViewForRecs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoViewForRecs) */ {
 public:
  VideoViewForRecs();
  virtual ~VideoViewForRecs();

  VideoViewForRecs(const VideoViewForRecs& from);

  inline VideoViewForRecs& operator=(const VideoViewForRecs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoViewForRecs(VideoViewForRecs&& from) noexcept
    : VideoViewForRecs() {
    *this = ::std::move(from);
  }

  inline VideoViewForRecs& operator=(VideoViewForRecs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoViewForRecs& default_instance();

  static inline const VideoViewForRecs* internal_default_instance() {
    return reinterpret_cast<const VideoViewForRecs*>(
               &_VideoViewForRecs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(VideoViewForRecs* other);
  friend void swap(VideoViewForRecs& a, VideoViewForRecs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoViewForRecs* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoViewForRecs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoViewForRecs& from);
  void MergeFrom(const VideoViewForRecs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoViewForRecs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string video_url = 1;
  bool has_video_url() const;
  void clear_video_url();
  static const int kVideoUrlFieldNumber = 1;
  const ::std::string& video_url() const;
  void set_video_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_url(::std::string&& value);
  #endif
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  ::std::string* mutable_video_url();
  ::std::string* release_video_url();
  void set_allocated_video_url(::std::string* video_url);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoViewForRecs)
 private:
  void set_has_video_url();
  void clear_has_video_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr video_url_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkVideoSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkVideoSession) */ {
 public:
  VkVideoSession();
  virtual ~VkVideoSession();

  VkVideoSession(const VkVideoSession& from);

  inline VkVideoSession& operator=(const VkVideoSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkVideoSession(VkVideoSession&& from) noexcept
    : VkVideoSession() {
    *this = ::std::move(from);
  }

  inline VkVideoSession& operator=(VkVideoSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkVideoSession& default_instance();

  static inline const VkVideoSession* internal_default_instance() {
    return reinterpret_cast<const VkVideoSession*>(
               &_VkVideoSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(VkVideoSession* other);
  friend void swap(VkVideoSession& a, VkVideoSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkVideoSession* New() const PROTOBUF_FINAL { return New(NULL); }

  VkVideoSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkVideoSession& from);
  void MergeFrom(const VkVideoSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkVideoSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VkVideoView views = 3;
  int views_size() const;
  void clear_views();
  static const int kViewsFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::VkVideoView& views(int index) const;
  ::ru::mail::go::webbase::blobs::VkVideoView* mutable_views(int index);
  ::ru::mail::go::webbase::blobs::VkVideoView* add_views();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkVideoView >*
      mutable_views();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkVideoView >&
      views() const;

  // optional int32 session_id = 1;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional bool is_male_session = 2;
  bool has_is_male_session() const;
  void clear_is_male_session();
  static const int kIsMaleSessionFieldNumber = 2;
  bool is_male_session() const;
  void set_is_male_session(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkVideoSession)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_is_male_session();
  void clear_has_is_male_session();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkVideoView > views_;
  ::google::protobuf::int32 session_id_;
  bool is_male_session_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoJointWatchesData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VideoJointWatchesData) */ {
 public:
  VideoJointWatchesData();
  virtual ~VideoJointWatchesData();

  VideoJointWatchesData(const VideoJointWatchesData& from);

  inline VideoJointWatchesData& operator=(const VideoJointWatchesData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoJointWatchesData(VideoJointWatchesData&& from) noexcept
    : VideoJointWatchesData() {
    *this = ::std::move(from);
  }

  inline VideoJointWatchesData& operator=(VideoJointWatchesData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoJointWatchesData& default_instance();

  static inline const VideoJointWatchesData* internal_default_instance() {
    return reinterpret_cast<const VideoJointWatchesData*>(
               &_VideoJointWatchesData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(VideoJointWatchesData* other);
  friend void swap(VideoJointWatchesData& a, VideoJointWatchesData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoJointWatchesData* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoJointWatchesData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoJointWatchesData& from);
  void MergeFrom(const VideoJointWatchesData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoJointWatchesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs common = 1;
  int common_size() const;
  void clear_common();
  static const int kCommonFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VideoViewForRecs& common(int index) const;
  ::ru::mail::go::webbase::blobs::VideoViewForRecs* mutable_common(int index);
  ::ru::mail::go::webbase::blobs::VideoViewForRecs* add_common();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >*
      mutable_common();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >&
      common() const;

  // repeated .ru.mail.go.webbase.blobs.VideoViewForRecs highly_recommended = 2;
  int highly_recommended_size() const;
  void clear_highly_recommended();
  static const int kHighlyRecommendedFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VideoViewForRecs& highly_recommended(int index) const;
  ::ru::mail::go::webbase::blobs::VideoViewForRecs* mutable_highly_recommended(int index);
  ::ru::mail::go::webbase::blobs::VideoViewForRecs* add_highly_recommended();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >*
      mutable_highly_recommended();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >&
      highly_recommended() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VideoJointWatchesData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs > common_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs > highly_recommended_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkSessionOrVideoInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo) */ {
 public:
  VkSessionOrVideoInfo();
  virtual ~VkSessionOrVideoInfo();

  VkSessionOrVideoInfo(const VkSessionOrVideoInfo& from);

  inline VkSessionOrVideoInfo& operator=(const VkSessionOrVideoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkSessionOrVideoInfo(VkSessionOrVideoInfo&& from) noexcept
    : VkSessionOrVideoInfo() {
    *this = ::std::move(from);
  }

  inline VkSessionOrVideoInfo& operator=(VkSessionOrVideoInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkSessionOrVideoInfo& default_instance();

  static inline const VkSessionOrVideoInfo* internal_default_instance() {
    return reinterpret_cast<const VkSessionOrVideoInfo*>(
               &_VkSessionOrVideoInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(VkSessionOrVideoInfo* other);
  friend void swap(VkSessionOrVideoInfo& a, VkSessionOrVideoInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkSessionOrVideoInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VkSessionOrVideoInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkSessionOrVideoInfo& from);
  void MergeFrom(const VkSessionOrVideoInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkSessionOrVideoInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 1;
  bool has_video_metadata() const;
  void clear_video_metadata();
  static const int kVideoMetadataFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::VideoImportDoc& video_metadata() const;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* mutable_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* release_video_metadata();
  void set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata);

  // optional .ru.mail.go.webbase.blobs.VkVideoView view = 5;
  bool has_view() const;
  void clear_view();
  static const int kViewFieldNumber = 5;
  const ::ru::mail::go::webbase::blobs::VkVideoView& view() const;
  ::ru::mail::go::webbase::blobs::VkVideoView* mutable_view();
  ::ru::mail::go::webbase::blobs::VkVideoView* release_view();
  void set_allocated_view(::ru::mail::go::webbase::blobs::VkVideoView* view);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // optional bool is_indexed = 2;
  bool has_is_indexed() const;
  void clear_is_indexed();
  static const int kIsIndexedFieldNumber = 2;
  bool is_indexed() const;
  void set_is_indexed(bool value);

  // optional bool is_male_session = 4;
  bool has_is_male_session() const;
  void clear_is_male_session();
  static const int kIsMaleSessionFieldNumber = 4;
  bool is_male_session() const;
  void set_is_male_session(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo)
 private:
  void set_has_video_metadata();
  void clear_has_video_metadata();
  void set_has_is_indexed();
  void clear_has_is_indexed();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_is_male_session();
  void clear_has_is_male_session();
  void set_has_view();
  void clear_has_view();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata_;
  ::ru::mail::go::webbase::blobs::VkVideoView* view_;
  ::google::protobuf::int32 session_id_;
  bool is_indexed_;
  bool is_male_session_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkVideoIds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkVideoIds) */ {
 public:
  VkVideoIds();
  virtual ~VkVideoIds();

  VkVideoIds(const VkVideoIds& from);

  inline VkVideoIds& operator=(const VkVideoIds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkVideoIds(VkVideoIds&& from) noexcept
    : VkVideoIds() {
    *this = ::std::move(from);
  }

  inline VkVideoIds& operator=(VkVideoIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkVideoIds& default_instance();

  static inline const VkVideoIds* internal_default_instance() {
    return reinterpret_cast<const VkVideoIds*>(
               &_VkVideoIds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(VkVideoIds* other);
  friend void swap(VkVideoIds& a, VkVideoIds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkVideoIds* New() const PROTOBUF_FINAL { return New(NULL); }

  VkVideoIds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkVideoIds& from);
  void MergeFrom(const VkVideoIds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkVideoIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  const ::std::string& ids(int index) const;
  ::std::string* mutable_ids(int index);
  void set_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ids(int index, ::std::string&& value);
  #endif
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  ::std::string* add_ids();
  void add_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ids(::std::string&& value);
  #endif
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkVideoIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeriesEpisode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SeriesEpisode) */ {
 public:
  SeriesEpisode();
  virtual ~SeriesEpisode();

  SeriesEpisode(const SeriesEpisode& from);

  inline SeriesEpisode& operator=(const SeriesEpisode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeriesEpisode(SeriesEpisode&& from) noexcept
    : SeriesEpisode() {
    *this = ::std::move(from);
  }

  inline SeriesEpisode& operator=(SeriesEpisode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeriesEpisode& default_instance();

  static inline const SeriesEpisode* internal_default_instance() {
    return reinterpret_cast<const SeriesEpisode*>(
               &_SeriesEpisode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(SeriesEpisode* other);
  friend void swap(SeriesEpisode& a, SeriesEpisode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeriesEpisode* New() const PROTOBUF_FINAL { return New(NULL); }

  SeriesEpisode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeriesEpisode& from);
  void MergeFrom(const SeriesEpisode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeriesEpisode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes video_table_key = 6;
  bool has_video_table_key() const;
  void clear_video_table_key();
  static const int kVideoTableKeyFieldNumber = 6;
  const ::std::string& video_table_key() const;
  void set_video_table_key(const ::std::string& value);
  #if LANG_CXX11
  void set_video_table_key(::std::string&& value);
  #endif
  void set_video_table_key(const char* value);
  void set_video_table_key(const void* value, size_t size);
  ::std::string* mutable_video_table_key();
  ::std::string* release_video_table_key();
  void set_allocated_video_table_key(::std::string* video_table_key);

  // optional string hosting = 8;
  bool has_hosting() const;
  void clear_hosting();
  static const int kHostingFieldNumber = 8;
  const ::std::string& hosting() const;
  void set_hosting(const ::std::string& value);
  #if LANG_CXX11
  void set_hosting(::std::string&& value);
  #endif
  void set_hosting(const char* value);
  void set_hosting(const char* value, size_t size);
  ::std::string* mutable_hosting();
  ::std::string* release_hosting();
  void set_allocated_hosting(::std::string* hosting);

  // optional int32 series_id = 1;
  bool has_series_id() const;
  void clear_series_id();
  static const int kSeriesIdFieldNumber = 1;
  ::google::protobuf::int32 series_id() const;
  void set_series_id(::google::protobuf::int32 value);

  // optional int32 season = 2;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 2;
  ::google::protobuf::int32 season() const;
  void set_season(::google::protobuf::int32 value);

  // optional int32 episode = 3;
  bool has_episode() const;
  void clear_episode();
  static const int kEpisodeFieldNumber = 3;
  ::google::protobuf::int32 episode() const;
  void set_episode(::google::protobuf::int32 value);

  // optional int32 duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 sourceId = 5;
  bool has_sourceid() const;
  void clear_sourceid();
  static const int kSourceIdFieldNumber = 5;
  ::google::protobuf::int32 sourceid() const;
  void set_sourceid(::google::protobuf::int32 value);

  // optional bool trusted_source = 7;
  bool has_trusted_source() const;
  void clear_trusted_source();
  static const int kTrustedSourceFieldNumber = 7;
  bool trusted_source() const;
  void set_trusted_source(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SeriesEpisode)
 private:
  void set_has_series_id();
  void clear_has_series_id();
  void set_has_season();
  void clear_has_season();
  void set_has_episode();
  void clear_has_episode();
  void set_has_duration();
  void clear_has_duration();
  void set_has_sourceid();
  void clear_has_sourceid();
  void set_has_video_table_key();
  void clear_has_video_table_key();
  void set_has_trusted_source();
  void clear_has_trusted_source();
  void set_has_hosting();
  void clear_has_hosting();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr video_table_key_;
  ::google::protobuf::internal::ArenaStringPtr hosting_;
  ::google::protobuf::int32 series_id_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 episode_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 sourceid_;
  bool trusted_source_;
  friend struct protobuf_video_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VideoThumbnail

// required bytes data = 1;
inline bool VideoThumbnail::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoThumbnail::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoThumbnail::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoThumbnail::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& VideoThumbnail::data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoThumbnail.data)
  return data_.GetNoArena();
}
inline void VideoThumbnail::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}
#if LANG_CXX11
inline void VideoThumbnail::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}
#endif
inline void VideoThumbnail::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}
inline void VideoThumbnail::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}
inline ::std::string* VideoThumbnail::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoThumbnail.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoThumbnail::release_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoThumbnail.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoThumbnail::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoThumbnail.data)
}

// required string hash = 2;
inline bool VideoThumbnail::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoThumbnail::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoThumbnail::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoThumbnail::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& VideoThumbnail::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
  return hash_.GetNoArena();
}
inline void VideoThumbnail::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}
#if LANG_CXX11
inline void VideoThumbnail::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}
#endif
inline void VideoThumbnail::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}
inline void VideoThumbnail::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}
inline ::std::string* VideoThumbnail::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoThumbnail::release_hash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoThumbnail::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoThumbnail.hash)
}

// required string video_url = 3;
inline bool VideoThumbnail::has_video_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoThumbnail::set_has_video_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoThumbnail::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoThumbnail::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
inline const ::std::string& VideoThumbnail::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
  return video_url_.GetNoArena();
}
inline void VideoThumbnail::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}
#if LANG_CXX11
inline void VideoThumbnail::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}
#endif
inline void VideoThumbnail::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}
inline void VideoThumbnail::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}
inline ::std::string* VideoThumbnail::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoThumbnail::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoThumbnail::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoThumbnail.video_url)
}

// -------------------------------------------------------------------

// Status

// optional bool success = 1;
inline bool Status::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool Status::success() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Status.success)
  return success_;
}
inline void Status::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Status.success)
}

// optional int64 timestamp = 2;
inline bool Status::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Status::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Status.timestamp)
  return timestamp_;
}
inline void Status::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Status.timestamp)
}

// optional int32 failsCount = 3;
inline bool Status::has_failscount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Status::set_has_failscount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Status::clear_has_failscount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Status::clear_failscount() {
  failscount_ = 0;
  clear_has_failscount();
}
inline ::google::protobuf::int32 Status::failscount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Status.failsCount)
  return failscount_;
}
inline void Status::set_failscount(::google::protobuf::int32 value) {
  set_has_failscount();
  failscount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Status.failsCount)
}

// optional .ru.mail.go.webbase.blobs.VideoCheckType checkType = 4;
inline bool Status::has_checktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Status::set_has_checktype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Status::clear_has_checktype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Status::clear_checktype() {
  checktype_ = 1;
  clear_has_checktype();
}
inline ::ru::mail::go::webbase::blobs::VideoCheckType Status::checktype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Status.checkType)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoCheckType >(checktype_);
}
inline void Status::set_checktype(::ru::mail::go::webbase::blobs::VideoCheckType value) {
  assert(::ru::mail::go::webbase::blobs::VideoCheckType_IsValid(value));
  set_has_checktype();
  checktype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Status.checkType)
}

// -------------------------------------------------------------------

// VideoImportDoc

// optional string name = 1;
inline bool VideoImportDoc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoImportDoc::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoImportDoc::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoImportDoc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& VideoImportDoc::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.name)
  return name_.GetNoArena();
}
inline void VideoImportDoc::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}
#if LANG_CXX11
inline void VideoImportDoc::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}
#endif
inline void VideoImportDoc::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}
inline void VideoImportDoc::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}
inline ::std::string* VideoImportDoc::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.name)
}

// optional bool isDeleted = 2;
inline bool VideoImportDoc::has_isdeleted() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void VideoImportDoc::set_has_isdeleted() {
  _has_bits_[0] |= 0x04000000u;
}
inline void VideoImportDoc::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void VideoImportDoc::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
inline bool VideoImportDoc::isdeleted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.isDeleted)
  return isdeleted_;
}
inline void VideoImportDoc::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.isDeleted)
}

// optional string urlVideo = 3;
inline bool VideoImportDoc::has_urlvideo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoImportDoc::set_has_urlvideo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoImportDoc::clear_has_urlvideo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoImportDoc::clear_urlvideo() {
  urlvideo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urlvideo();
}
inline const ::std::string& VideoImportDoc::urlvideo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
  return urlvideo_.GetNoArena();
}
inline void VideoImportDoc::set_urlvideo(const ::std::string& value) {
  set_has_urlvideo();
  urlvideo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}
#if LANG_CXX11
inline void VideoImportDoc::set_urlvideo(::std::string&& value) {
  set_has_urlvideo();
  urlvideo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}
#endif
inline void VideoImportDoc::set_urlvideo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urlvideo();
  urlvideo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}
inline void VideoImportDoc::set_urlvideo(const char* value, size_t size) {
  set_has_urlvideo();
  urlvideo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}
inline ::std::string* VideoImportDoc::mutable_urlvideo() {
  set_has_urlvideo();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
  return urlvideo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_urlvideo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
  clear_has_urlvideo();
  return urlvideo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_urlvideo(::std::string* urlvideo) {
  if (urlvideo != NULL) {
    set_has_urlvideo();
  } else {
    clear_has_urlvideo();
  }
  urlvideo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urlvideo);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.urlVideo)
}

// optional string urlPreview = 4;
inline bool VideoImportDoc::has_urlpreview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoImportDoc::set_has_urlpreview() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoImportDoc::clear_has_urlpreview() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoImportDoc::clear_urlpreview() {
  urlpreview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urlpreview();
}
inline const ::std::string& VideoImportDoc::urlpreview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
  return urlpreview_.GetNoArena();
}
inline void VideoImportDoc::set_urlpreview(const ::std::string& value) {
  set_has_urlpreview();
  urlpreview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}
#if LANG_CXX11
inline void VideoImportDoc::set_urlpreview(::std::string&& value) {
  set_has_urlpreview();
  urlpreview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}
#endif
inline void VideoImportDoc::set_urlpreview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urlpreview();
  urlpreview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}
inline void VideoImportDoc::set_urlpreview(const char* value, size_t size) {
  set_has_urlpreview();
  urlpreview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}
inline ::std::string* VideoImportDoc::mutable_urlpreview() {
  set_has_urlpreview();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
  return urlpreview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_urlpreview() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
  clear_has_urlpreview();
  return urlpreview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_urlpreview(::std::string* urlpreview) {
  if (urlpreview != NULL) {
    set_has_urlpreview();
  } else {
    clear_has_urlpreview();
  }
  urlpreview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urlpreview);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.urlPreview)
}

// optional bytes rawPreviewData = 5;
inline bool VideoImportDoc::has_rawpreviewdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoImportDoc::set_has_rawpreviewdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoImportDoc::clear_has_rawpreviewdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoImportDoc::clear_rawpreviewdata() {
  rawpreviewdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rawpreviewdata();
}
inline const ::std::string& VideoImportDoc::rawpreviewdata() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
  return rawpreviewdata_.GetNoArena();
}
inline void VideoImportDoc::set_rawpreviewdata(const ::std::string& value) {
  set_has_rawpreviewdata();
  rawpreviewdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}
#if LANG_CXX11
inline void VideoImportDoc::set_rawpreviewdata(::std::string&& value) {
  set_has_rawpreviewdata();
  rawpreviewdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}
#endif
inline void VideoImportDoc::set_rawpreviewdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rawpreviewdata();
  rawpreviewdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}
inline void VideoImportDoc::set_rawpreviewdata(const void* value, size_t size) {
  set_has_rawpreviewdata();
  rawpreviewdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}
inline ::std::string* VideoImportDoc::mutable_rawpreviewdata() {
  set_has_rawpreviewdata();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
  return rawpreviewdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_rawpreviewdata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
  clear_has_rawpreviewdata();
  return rawpreviewdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_rawpreviewdata(::std::string* rawpreviewdata) {
  if (rawpreviewdata != NULL) {
    set_has_rawpreviewdata();
  } else {
    clear_has_rawpreviewdata();
  }
  rawpreviewdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawpreviewdata);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.rawPreviewData)
}

// optional string description = 6;
inline bool VideoImportDoc::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoImportDoc::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoImportDoc::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoImportDoc::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& VideoImportDoc::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.description)
  return description_.GetNoArena();
}
inline void VideoImportDoc::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}
#if LANG_CXX11
inline void VideoImportDoc::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}
#endif
inline void VideoImportDoc::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}
inline void VideoImportDoc::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}
inline ::std::string* VideoImportDoc::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.description)
}

// repeated string category = 7;
inline int VideoImportDoc::category_size() const {
  return category_.size();
}
inline void VideoImportDoc::clear_category() {
  category_.Clear();
}
inline const ::std::string& VideoImportDoc::category(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return category_.Get(index);
}
inline ::std::string* VideoImportDoc::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return category_.Mutable(index);
}
inline void VideoImportDoc::set_category(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  category_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VideoImportDoc::set_category(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  category_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VideoImportDoc::set_category(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  category_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
inline void VideoImportDoc::set_category(int index, const char* value, size_t size) {
  category_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
inline ::std::string* VideoImportDoc::add_category() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return category_.Add();
}
inline void VideoImportDoc::add_category(const ::std::string& value) {
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
#if LANG_CXX11
inline void VideoImportDoc::add_category(::std::string&& value) {
  category_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
#endif
inline void VideoImportDoc::add_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
inline void VideoImportDoc::add_category(const char* value, size_t size) {
  category_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.category)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoImportDoc::category() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return category_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VideoImportDoc::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.category)
  return &category_;
}

// repeated string tag = 8;
inline int VideoImportDoc::tag_size() const {
  return tag_.size();
}
inline void VideoImportDoc::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& VideoImportDoc::tag(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return tag_.Get(index);
}
inline ::std::string* VideoImportDoc::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return tag_.Mutable(index);
}
inline void VideoImportDoc::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VideoImportDoc::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VideoImportDoc::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
inline void VideoImportDoc::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
inline ::std::string* VideoImportDoc::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return tag_.Add();
}
inline void VideoImportDoc::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
#if LANG_CXX11
inline void VideoImportDoc::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
#endif
inline void VideoImportDoc::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
inline void VideoImportDoc::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoImportDoc::tag() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VideoImportDoc::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.tag)
  return &tag_;
}

// optional bool adult = 9;
inline bool VideoImportDoc::has_adult() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void VideoImportDoc::set_has_adult() {
  _has_bits_[0] |= 0x08000000u;
}
inline void VideoImportDoc::clear_has_adult() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void VideoImportDoc::clear_adult() {
  adult_ = false;
  clear_has_adult();
}
inline bool VideoImportDoc::adult() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.adult)
  return adult_;
}
inline void VideoImportDoc::set_adult(bool value) {
  set_has_adult();
  adult_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.adult)
}

// optional int64 contentHash = 10;
inline bool VideoImportDoc::has_contenthash() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void VideoImportDoc::set_has_contenthash() {
  _has_bits_[0] |= 0x02000000u;
}
inline void VideoImportDoc::clear_has_contenthash() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void VideoImportDoc::clear_contenthash() {
  contenthash_ = GOOGLE_LONGLONG(0);
  clear_has_contenthash();
}
inline ::google::protobuf::int64 VideoImportDoc::contenthash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.contentHash)
  return contenthash_;
}
inline void VideoImportDoc::set_contenthash(::google::protobuf::int64 value) {
  set_has_contenthash();
  contenthash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.contentHash)
}

// optional int32 duration = 11;
inline bool VideoImportDoc::has_duration() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void VideoImportDoc::set_has_duration() {
  _has_bits_[0] |= 0x40000000u;
}
inline void VideoImportDoc::clear_has_duration() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void VideoImportDoc::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 VideoImportDoc::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.duration)
  return duration_;
}
inline void VideoImportDoc::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.duration)
}

// optional int64 id = 12;
inline bool VideoImportDoc::has_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void VideoImportDoc::set_has_id() {
  _has_bits_[0] |= 0x80000000u;
}
inline void VideoImportDoc::clear_has_id() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void VideoImportDoc::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 VideoImportDoc::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.id)
  return id_;
}
inline void VideoImportDoc::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.id)
}

// optional bool legal = 13;
inline bool VideoImportDoc::has_legal() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void VideoImportDoc::set_has_legal() {
  _has_bits_[0] |= 0x10000000u;
}
inline void VideoImportDoc::clear_has_legal() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void VideoImportDoc::clear_legal() {
  legal_ = false;
  clear_has_legal();
}
inline bool VideoImportDoc::legal() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.legal)
  return legal_;
}
inline void VideoImportDoc::set_legal(bool value) {
  set_has_legal();
  legal_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.legal)
}

// optional int64 shottime = 14;
inline bool VideoImportDoc::has_shottime() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void VideoImportDoc::set_has_shottime() {
  _has_bits_[1] |= 0x00000001u;
}
inline void VideoImportDoc::clear_has_shottime() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void VideoImportDoc::clear_shottime() {
  shottime_ = GOOGLE_LONGLONG(0);
  clear_has_shottime();
}
inline ::google::protobuf::int64 VideoImportDoc::shottime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.shottime)
  return shottime_;
}
inline void VideoImportDoc::set_shottime(::google::protobuf::int64 value) {
  set_has_shottime();
  shottime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.shottime)
}

// optional int64 time = 15;
inline bool VideoImportDoc::has_time() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void VideoImportDoc::set_has_time() {
  _has_bits_[1] |= 0x00000002u;
}
inline void VideoImportDoc::clear_has_time() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void VideoImportDoc::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 VideoImportDoc::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.time)
  return time_;
}
inline void VideoImportDoc::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.time)
}

// optional bool hd = 16;
inline bool VideoImportDoc::has_hd() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void VideoImportDoc::set_has_hd() {
  _has_bits_[0] |= 0x20000000u;
}
inline void VideoImportDoc::clear_has_hd() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void VideoImportDoc::clear_hd() {
  hd_ = false;
  clear_has_hd();
}
inline bool VideoImportDoc::hd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.hd)
  return hd_;
}
inline void VideoImportDoc::set_hd(bool value) {
  set_has_hd();
  hd_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.hd)
}

// optional bool paid = 17;
inline bool VideoImportDoc::has_paid() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void VideoImportDoc::set_has_paid() {
  _has_bits_[1] |= 0x00000100u;
}
inline void VideoImportDoc::clear_has_paid() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void VideoImportDoc::clear_paid() {
  paid_ = false;
  clear_has_paid();
}
inline bool VideoImportDoc::paid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.paid)
  return paid_;
}
inline void VideoImportDoc::set_paid(bool value) {
  set_has_paid();
  paid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.paid)
}

// optional bool regreq = 18;
inline bool VideoImportDoc::has_regreq() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void VideoImportDoc::set_has_regreq() {
  _has_bits_[1] |= 0x00000200u;
}
inline void VideoImportDoc::clear_has_regreq() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void VideoImportDoc::clear_regreq() {
  regreq_ = false;
  clear_has_regreq();
}
inline bool VideoImportDoc::regreq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.regreq)
  return regreq_;
}
inline void VideoImportDoc::set_regreq(bool value) {
  set_has_regreq();
  regreq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.regreq)
}

// optional int32 fee = 19;
inline bool VideoImportDoc::has_fee() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void VideoImportDoc::set_has_fee() {
  _has_bits_[1] |= 0x00000004u;
}
inline void VideoImportDoc::clear_has_fee() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void VideoImportDoc::clear_fee() {
  fee_ = 0;
  clear_has_fee();
}
inline ::google::protobuf::int32 VideoImportDoc::fee() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.fee)
  return fee_;
}
inline void VideoImportDoc::set_fee(::google::protobuf::int32 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.fee)
}

// optional int32 feeCurrency = 20;
inline bool VideoImportDoc::has_feecurrency() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void VideoImportDoc::set_has_feecurrency() {
  _has_bits_[1] |= 0x00000008u;
}
inline void VideoImportDoc::clear_has_feecurrency() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void VideoImportDoc::clear_feecurrency() {
  feecurrency_ = 0;
  clear_has_feecurrency();
}
inline ::google::protobuf::int32 VideoImportDoc::feecurrency() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.feeCurrency)
  return feecurrency_;
}
inline void VideoImportDoc::set_feecurrency(::google::protobuf::int32 value) {
  set_has_feecurrency();
  feecurrency_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.feeCurrency)
}

// optional int32 userId = 21;
inline bool VideoImportDoc::has_userid() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void VideoImportDoc::set_has_userid() {
  _has_bits_[1] |= 0x00000010u;
}
inline void VideoImportDoc::clear_has_userid() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void VideoImportDoc::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 VideoImportDoc::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userId)
  return userid_;
}
inline void VideoImportDoc::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userId)
}

// optional string userUrl = 22;
inline bool VideoImportDoc::has_userurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoImportDoc::set_has_userurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoImportDoc::clear_has_userurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoImportDoc::clear_userurl() {
  userurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userurl();
}
inline const ::std::string& VideoImportDoc::userurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
  return userurl_.GetNoArena();
}
inline void VideoImportDoc::set_userurl(const ::std::string& value) {
  set_has_userurl();
  userurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}
#if LANG_CXX11
inline void VideoImportDoc::set_userurl(::std::string&& value) {
  set_has_userurl();
  userurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}
#endif
inline void VideoImportDoc::set_userurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userurl();
  userurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}
inline void VideoImportDoc::set_userurl(const char* value, size_t size) {
  set_has_userurl();
  userurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}
inline ::std::string* VideoImportDoc::mutable_userurl() {
  set_has_userurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
  return userurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_userurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
  clear_has_userurl();
  return userurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_userurl(::std::string* userurl) {
  if (userurl != NULL) {
    set_has_userurl();
  } else {
    clear_has_userurl();
  }
  userurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.userUrl)
}

// optional string userNick = 23;
inline bool VideoImportDoc::has_usernick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoImportDoc::set_has_usernick() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoImportDoc::clear_has_usernick() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoImportDoc::clear_usernick() {
  usernick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usernick();
}
inline const ::std::string& VideoImportDoc::usernick() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
  return usernick_.GetNoArena();
}
inline void VideoImportDoc::set_usernick(const ::std::string& value) {
  set_has_usernick();
  usernick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}
#if LANG_CXX11
inline void VideoImportDoc::set_usernick(::std::string&& value) {
  set_has_usernick();
  usernick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}
#endif
inline void VideoImportDoc::set_usernick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usernick();
  usernick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}
inline void VideoImportDoc::set_usernick(const char* value, size_t size) {
  set_has_usernick();
  usernick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}
inline ::std::string* VideoImportDoc::mutable_usernick() {
  set_has_usernick();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
  return usernick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_usernick() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
  clear_has_usernick();
  return usernick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_usernick(::std::string* usernick) {
  if (usernick != NULL) {
    set_has_usernick();
  } else {
    clear_has_usernick();
  }
  usernick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usernick);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.userNick)
}

// optional string userMail = 24;
inline bool VideoImportDoc::has_usermail() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoImportDoc::set_has_usermail() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoImportDoc::clear_has_usermail() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoImportDoc::clear_usermail() {
  usermail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usermail();
}
inline const ::std::string& VideoImportDoc::usermail() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
  return usermail_.GetNoArena();
}
inline void VideoImportDoc::set_usermail(const ::std::string& value) {
  set_has_usermail();
  usermail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}
#if LANG_CXX11
inline void VideoImportDoc::set_usermail(::std::string&& value) {
  set_has_usermail();
  usermail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}
#endif
inline void VideoImportDoc::set_usermail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usermail();
  usermail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}
inline void VideoImportDoc::set_usermail(const char* value, size_t size) {
  set_has_usermail();
  usermail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}
inline ::std::string* VideoImportDoc::mutable_usermail() {
  set_has_usermail();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
  return usermail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_usermail() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
  clear_has_usermail();
  return usermail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_usermail(::std::string* usermail) {
  if (usermail != NULL) {
    set_has_usermail();
  } else {
    clear_has_usermail();
  }
  usermail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usermail);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.userMail)
}

// optional string albumDescription = 25;
inline bool VideoImportDoc::has_albumdescription() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoImportDoc::set_has_albumdescription() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoImportDoc::clear_has_albumdescription() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoImportDoc::clear_albumdescription() {
  albumdescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumdescription();
}
inline const ::std::string& VideoImportDoc::albumdescription() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
  return albumdescription_.GetNoArena();
}
inline void VideoImportDoc::set_albumdescription(const ::std::string& value) {
  set_has_albumdescription();
  albumdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}
#if LANG_CXX11
inline void VideoImportDoc::set_albumdescription(::std::string&& value) {
  set_has_albumdescription();
  albumdescription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}
#endif
inline void VideoImportDoc::set_albumdescription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumdescription();
  albumdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}
inline void VideoImportDoc::set_albumdescription(const char* value, size_t size) {
  set_has_albumdescription();
  albumdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}
inline ::std::string* VideoImportDoc::mutable_albumdescription() {
  set_has_albumdescription();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
  return albumdescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_albumdescription() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
  clear_has_albumdescription();
  return albumdescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_albumdescription(::std::string* albumdescription) {
  if (albumdescription != NULL) {
    set_has_albumdescription();
  } else {
    clear_has_albumdescription();
  }
  albumdescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumdescription);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.albumDescription)
}

// optional int32 albumCommentCount = 26;
inline bool VideoImportDoc::has_albumcommentcount() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void VideoImportDoc::set_has_albumcommentcount() {
  _has_bits_[1] |= 0x00000020u;
}
inline void VideoImportDoc::clear_has_albumcommentcount() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void VideoImportDoc::clear_albumcommentcount() {
  albumcommentcount_ = 0;
  clear_has_albumcommentcount();
}
inline ::google::protobuf::int32 VideoImportDoc::albumcommentcount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumCommentCount)
  return albumcommentcount_;
}
inline void VideoImportDoc::set_albumcommentcount(::google::protobuf::int32 value) {
  set_has_albumcommentcount();
  albumcommentcount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumCommentCount)
}

// optional int32 albumId = 27;
inline bool VideoImportDoc::has_albumid() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void VideoImportDoc::set_has_albumid() {
  _has_bits_[1] |= 0x00000040u;
}
inline void VideoImportDoc::clear_has_albumid() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void VideoImportDoc::clear_albumid() {
  albumid_ = 0;
  clear_has_albumid();
}
inline ::google::protobuf::int32 VideoImportDoc::albumid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumId)
  return albumid_;
}
inline void VideoImportDoc::set_albumid(::google::protobuf::int32 value) {
  set_has_albumid();
  albumid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumId)
}

// optional string albumName = 28;
inline bool VideoImportDoc::has_albumname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VideoImportDoc::set_has_albumname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VideoImportDoc::clear_has_albumname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VideoImportDoc::clear_albumname() {
  albumname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumname();
}
inline const ::std::string& VideoImportDoc::albumname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
  return albumname_.GetNoArena();
}
inline void VideoImportDoc::set_albumname(const ::std::string& value) {
  set_has_albumname();
  albumname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}
#if LANG_CXX11
inline void VideoImportDoc::set_albumname(::std::string&& value) {
  set_has_albumname();
  albumname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}
#endif
inline void VideoImportDoc::set_albumname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumname();
  albumname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}
inline void VideoImportDoc::set_albumname(const char* value, size_t size) {
  set_has_albumname();
  albumname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}
inline ::std::string* VideoImportDoc::mutable_albumname() {
  set_has_albumname();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
  return albumname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_albumname() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
  clear_has_albumname();
  return albumname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_albumname(::std::string* albumname) {
  if (albumname != NULL) {
    set_has_albumname();
  } else {
    clear_has_albumname();
  }
  albumname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumname);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.albumName)
}

// optional string albumUrl = 29;
inline bool VideoImportDoc::has_albumurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VideoImportDoc::set_has_albumurl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VideoImportDoc::clear_has_albumurl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VideoImportDoc::clear_albumurl() {
  albumurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumurl();
}
inline const ::std::string& VideoImportDoc::albumurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
  return albumurl_.GetNoArena();
}
inline void VideoImportDoc::set_albumurl(const ::std::string& value) {
  set_has_albumurl();
  albumurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}
#if LANG_CXX11
inline void VideoImportDoc::set_albumurl(::std::string&& value) {
  set_has_albumurl();
  albumurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}
#endif
inline void VideoImportDoc::set_albumurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumurl();
  albumurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}
inline void VideoImportDoc::set_albumurl(const char* value, size_t size) {
  set_has_albumurl();
  albumurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}
inline ::std::string* VideoImportDoc::mutable_albumurl() {
  set_has_albumurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
  return albumurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_albumurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
  clear_has_albumurl();
  return albumurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_albumurl(::std::string* albumurl) {
  if (albumurl != NULL) {
    set_has_albumurl();
  } else {
    clear_has_albumurl();
  }
  albumurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.albumUrl)
}

// optional string originalAlbumTitle = 96;
inline bool VideoImportDoc::has_originalalbumtitle() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void VideoImportDoc::set_has_originalalbumtitle() {
  _has_bits_[0] |= 0x00400000u;
}
inline void VideoImportDoc::clear_has_originalalbumtitle() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void VideoImportDoc::clear_originalalbumtitle() {
  originalalbumtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_originalalbumtitle();
}
inline const ::std::string& VideoImportDoc::originalalbumtitle() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
  return originalalbumtitle_.GetNoArena();
}
inline void VideoImportDoc::set_originalalbumtitle(const ::std::string& value) {
  set_has_originalalbumtitle();
  originalalbumtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}
#if LANG_CXX11
inline void VideoImportDoc::set_originalalbumtitle(::std::string&& value) {
  set_has_originalalbumtitle();
  originalalbumtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}
#endif
inline void VideoImportDoc::set_originalalbumtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_originalalbumtitle();
  originalalbumtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}
inline void VideoImportDoc::set_originalalbumtitle(const char* value, size_t size) {
  set_has_originalalbumtitle();
  originalalbumtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}
inline ::std::string* VideoImportDoc::mutable_originalalbumtitle() {
  set_has_originalalbumtitle();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
  return originalalbumtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_originalalbumtitle() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
  clear_has_originalalbumtitle();
  return originalalbumtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_originalalbumtitle(::std::string* originalalbumtitle) {
  if (originalalbumtitle != NULL) {
    set_has_originalalbumtitle();
  } else {
    clear_has_originalalbumtitle();
  }
  originalalbumtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originalalbumtitle);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.originalAlbumTitle)
}

// optional int32 statVotes = 30;
inline bool VideoImportDoc::has_statvotes() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void VideoImportDoc::set_has_statvotes() {
  _has_bits_[1] |= 0x00000080u;
}
inline void VideoImportDoc::clear_has_statvotes() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void VideoImportDoc::clear_statvotes() {
  statvotes_ = 0;
  clear_has_statvotes();
}
inline ::google::protobuf::int32 VideoImportDoc::statvotes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statVotes)
  return statvotes_;
}
inline void VideoImportDoc::set_statvotes(::google::protobuf::int32 value) {
  set_has_statvotes();
  statvotes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statVotes)
}

// optional int32 statLikes = 55;
inline bool VideoImportDoc::has_statlikes() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void VideoImportDoc::set_has_statlikes() {
  _has_bits_[1] |= 0x40000000u;
}
inline void VideoImportDoc::clear_has_statlikes() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void VideoImportDoc::clear_statlikes() {
  statlikes_ = 0;
  clear_has_statlikes();
}
inline ::google::protobuf::int32 VideoImportDoc::statlikes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statLikes)
  return statlikes_;
}
inline void VideoImportDoc::set_statlikes(::google::protobuf::int32 value) {
  set_has_statlikes();
  statlikes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statLikes)
}

// optional int32 statDislikes = 56;
inline bool VideoImportDoc::has_statdislikes() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void VideoImportDoc::set_has_statdislikes() {
  _has_bits_[1] |= 0x80000000u;
}
inline void VideoImportDoc::clear_has_statdislikes() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void VideoImportDoc::clear_statdislikes() {
  statdislikes_ = 0;
  clear_has_statdislikes();
}
inline ::google::protobuf::int32 VideoImportDoc::statdislikes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statDislikes)
  return statdislikes_;
}
inline void VideoImportDoc::set_statdislikes(::google::protobuf::int32 value) {
  set_has_statdislikes();
  statdislikes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statDislikes)
}

// optional int32 statCommentsCount = 31;
inline bool VideoImportDoc::has_statcommentscount() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void VideoImportDoc::set_has_statcommentscount() {
  _has_bits_[1] |= 0x00001000u;
}
inline void VideoImportDoc::clear_has_statcommentscount() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void VideoImportDoc::clear_statcommentscount() {
  statcommentscount_ = 0;
  clear_has_statcommentscount();
}
inline ::google::protobuf::int32 VideoImportDoc::statcommentscount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statCommentsCount)
  return statcommentscount_;
}
inline void VideoImportDoc::set_statcommentscount(::google::protobuf::int32 value) {
  set_has_statcommentscount();
  statcommentscount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statCommentsCount)
}

// optional int32 statViews = 32;
inline bool VideoImportDoc::has_statviews() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void VideoImportDoc::set_has_statviews() {
  _has_bits_[1] |= 0x00004000u;
}
inline void VideoImportDoc::clear_has_statviews() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void VideoImportDoc::clear_statviews() {
  statviews_ = 0;
  clear_has_statviews();
}
inline ::google::protobuf::int32 VideoImportDoc::statviews() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statViews)
  return statviews_;
}
inline void VideoImportDoc::set_statviews(::google::protobuf::int32 value) {
  set_has_statviews();
  statviews_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statViews)
}

// optional int64 statRating = 33;
inline bool VideoImportDoc::has_statrating() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void VideoImportDoc::set_has_statrating() {
  _has_bits_[1] |= 0x00002000u;
}
inline void VideoImportDoc::clear_has_statrating() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void VideoImportDoc::clear_statrating() {
  statrating_ = GOOGLE_LONGLONG(0);
  clear_has_statrating();
}
inline ::google::protobuf::int64 VideoImportDoc::statrating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.statRating)
  return statrating_;
}
inline void VideoImportDoc::set_statrating(::google::protobuf::int64 value) {
  set_has_statrating();
  statrating_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.statRating)
}

// optional string referenceId = 34;
inline bool VideoImportDoc::has_referenceid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VideoImportDoc::set_has_referenceid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VideoImportDoc::clear_has_referenceid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VideoImportDoc::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referenceid();
}
inline const ::std::string& VideoImportDoc::referenceid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
  return referenceid_.GetNoArena();
}
inline void VideoImportDoc::set_referenceid(const ::std::string& value) {
  set_has_referenceid();
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}
#if LANG_CXX11
inline void VideoImportDoc::set_referenceid(::std::string&& value) {
  set_has_referenceid();
  referenceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}
#endif
inline void VideoImportDoc::set_referenceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referenceid();
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}
inline void VideoImportDoc::set_referenceid(const char* value, size_t size) {
  set_has_referenceid();
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}
inline ::std::string* VideoImportDoc::mutable_referenceid() {
  set_has_referenceid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_referenceid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
  clear_has_referenceid();
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    set_has_referenceid();
  } else {
    clear_has_referenceid();
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.referenceId)
}

// optional int32 originalThumbWidth = 35;
inline bool VideoImportDoc::has_originalthumbwidth() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void VideoImportDoc::set_has_originalthumbwidth() {
  _has_bits_[1] |= 0x00008000u;
}
inline void VideoImportDoc::clear_has_originalthumbwidth() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void VideoImportDoc::clear_originalthumbwidth() {
  originalthumbwidth_ = 0;
  clear_has_originalthumbwidth();
}
inline ::google::protobuf::int32 VideoImportDoc::originalthumbwidth() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.originalThumbWidth)
  return originalthumbwidth_;
}
inline void VideoImportDoc::set_originalthumbwidth(::google::protobuf::int32 value) {
  set_has_originalthumbwidth();
  originalthumbwidth_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.originalThumbWidth)
}

// optional int32 originalThumbHeight = 36;
inline bool VideoImportDoc::has_originalthumbheight() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void VideoImportDoc::set_has_originalthumbheight() {
  _has_bits_[1] |= 0x00020000u;
}
inline void VideoImportDoc::clear_has_originalthumbheight() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void VideoImportDoc::clear_originalthumbheight() {
  originalthumbheight_ = 0;
  clear_has_originalthumbheight();
}
inline ::google::protobuf::int32 VideoImportDoc::originalthumbheight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.originalThumbHeight)
  return originalthumbheight_;
}
inline void VideoImportDoc::set_originalthumbheight(::google::protobuf::int32 value) {
  set_has_originalthumbheight();
  originalthumbheight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.originalThumbHeight)
}

// optional int64 importTime = 37;
inline bool VideoImportDoc::has_importtime() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void VideoImportDoc::set_has_importtime() {
  _has_bits_[1] |= 0x00010000u;
}
inline void VideoImportDoc::clear_has_importtime() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void VideoImportDoc::clear_importtime() {
  importtime_ = GOOGLE_LONGLONG(0);
  clear_has_importtime();
}
inline ::google::protobuf::int64 VideoImportDoc::importtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.importTime)
  return importtime_;
}
inline void VideoImportDoc::set_importtime(::google::protobuf::int64 value) {
  set_has_importtime();
  importtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.importTime)
}

// optional int32 sourceId = 38;
inline bool VideoImportDoc::has_sourceid() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void VideoImportDoc::set_has_sourceid() {
  _has_bits_[1] |= 0x00040000u;
}
inline void VideoImportDoc::clear_has_sourceid() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void VideoImportDoc::clear_sourceid() {
  sourceid_ = 0;
  clear_has_sourceid();
}
inline ::google::protobuf::int32 VideoImportDoc::sourceid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.sourceId)
  return sourceid_;
}
inline void VideoImportDoc::set_sourceid(::google::protobuf::int32 value) {
  set_has_sourceid();
  sourceid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.sourceId)
}

// optional bool hasPlayer = 39;
inline bool VideoImportDoc::has_hasplayer() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void VideoImportDoc::set_has_hasplayer() {
  _has_bits_[1] |= 0x00000400u;
}
inline void VideoImportDoc::clear_has_hasplayer() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void VideoImportDoc::clear_hasplayer() {
  hasplayer_ = false;
  clear_has_hasplayer();
}
inline bool VideoImportDoc::hasplayer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.hasPlayer)
  return hasplayer_;
}
inline void VideoImportDoc::set_hasplayer(bool value) {
  set_has_hasplayer();
  hasplayer_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.hasPlayer)
}

// optional int32 episode = 40;
inline bool VideoImportDoc::has_episode() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void VideoImportDoc::set_has_episode() {
  _has_bits_[1] |= 0x00080000u;
}
inline void VideoImportDoc::clear_has_episode() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void VideoImportDoc::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
inline ::google::protobuf::int32 VideoImportDoc::episode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.episode)
  return episode_;
}
inline void VideoImportDoc::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.episode)
}

// optional string player = 41;
inline bool VideoImportDoc::has_player() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VideoImportDoc::set_has_player() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VideoImportDoc::clear_has_player() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VideoImportDoc::clear_player() {
  player_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player();
}
inline const ::std::string& VideoImportDoc::player() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.player)
  return player_.GetNoArena();
}
inline void VideoImportDoc::set_player(const ::std::string& value) {
  set_has_player();
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}
#if LANG_CXX11
inline void VideoImportDoc::set_player(::std::string&& value) {
  set_has_player();
  player_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}
#endif
inline void VideoImportDoc::set_player(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player();
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}
inline void VideoImportDoc::set_player(const char* value, size_t size) {
  set_has_player();
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}
inline ::std::string* VideoImportDoc::mutable_player() {
  set_has_player();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.player)
  return player_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_player() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.player)
  clear_has_player();
  return player_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_player(::std::string* player) {
  if (player != NULL) {
    set_has_player();
  } else {
    clear_has_player();
  }
  player_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.player)
}

// optional string videoType = 42;
inline bool VideoImportDoc::has_videotype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VideoImportDoc::set_has_videotype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VideoImportDoc::clear_has_videotype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VideoImportDoc::clear_videotype() {
  videotype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videotype();
}
inline const ::std::string& VideoImportDoc::videotype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
  return videotype_.GetNoArena();
}
inline void VideoImportDoc::set_videotype(const ::std::string& value) {
  set_has_videotype();
  videotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}
#if LANG_CXX11
inline void VideoImportDoc::set_videotype(::std::string&& value) {
  set_has_videotype();
  videotype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}
#endif
inline void VideoImportDoc::set_videotype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_videotype();
  videotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}
inline void VideoImportDoc::set_videotype(const char* value, size_t size) {
  set_has_videotype();
  videotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}
inline ::std::string* VideoImportDoc::mutable_videotype() {
  set_has_videotype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
  return videotype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_videotype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
  clear_has_videotype();
  return videotype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_videotype(::std::string* videotype) {
  if (videotype != NULL) {
    set_has_videotype();
  } else {
    clear_has_videotype();
  }
  videotype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videotype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.videoType)
}

// optional int32 width = 43;
inline bool VideoImportDoc::has_width() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void VideoImportDoc::set_has_width() {
  _has_bits_[1] |= 0x00100000u;
}
inline void VideoImportDoc::clear_has_width() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void VideoImportDoc::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 VideoImportDoc::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.width)
  return width_;
}
inline void VideoImportDoc::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.width)
}

// optional int32 height = 44;
inline bool VideoImportDoc::has_height() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void VideoImportDoc::set_has_height() {
  _has_bits_[1] |= 0x00200000u;
}
inline void VideoImportDoc::clear_has_height() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void VideoImportDoc::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 VideoImportDoc::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.height)
  return height_;
}
inline void VideoImportDoc::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.height)
}

// optional int32 season = 45;
inline bool VideoImportDoc::has_season() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void VideoImportDoc::set_has_season() {
  _has_bits_[1] |= 0x00400000u;
}
inline void VideoImportDoc::clear_has_season() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void VideoImportDoc::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 VideoImportDoc::season() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.season)
  return season_;
}
inline void VideoImportDoc::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.season)
}

// optional int32 seriesId = 46;
inline bool VideoImportDoc::has_seriesid() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void VideoImportDoc::set_has_seriesid() {
  _has_bits_[1] |= 0x01000000u;
}
inline void VideoImportDoc::clear_has_seriesid() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void VideoImportDoc::clear_seriesid() {
  seriesid_ = 0;
  clear_has_seriesid();
}
inline ::google::protobuf::int32 VideoImportDoc::seriesid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.seriesId)
  return seriesid_;
}
inline void VideoImportDoc::set_seriesid(::google::protobuf::int32 value) {
  set_has_seriesid();
  seriesid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.seriesId)
}

// optional bool finishedSerial = 47;
inline bool VideoImportDoc::has_finishedserial() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void VideoImportDoc::set_has_finishedserial() {
  _has_bits_[1] |= 0x00000800u;
}
inline void VideoImportDoc::clear_has_finishedserial() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void VideoImportDoc::clear_finishedserial() {
  finishedserial_ = false;
  clear_has_finishedserial();
}
inline bool VideoImportDoc::finishedserial() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.finishedSerial)
  return finishedserial_;
}
inline void VideoImportDoc::set_finishedserial(bool value) {
  set_has_finishedserial();
  finishedserial_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.finishedSerial)
}

// optional int64 byte_size = 48;
inline bool VideoImportDoc::has_byte_size() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void VideoImportDoc::set_has_byte_size() {
  _has_bits_[1] |= 0x00800000u;
}
inline void VideoImportDoc::clear_has_byte_size() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void VideoImportDoc::clear_byte_size() {
  byte_size_ = GOOGLE_LONGLONG(0);
  clear_has_byte_size();
}
inline ::google::protobuf::int64 VideoImportDoc::byte_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.byte_size)
  return byte_size_;
}
inline void VideoImportDoc::set_byte_size(::google::protobuf::int64 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.byte_size)
}

// optional string metadataSourceUrl = 49;
inline bool VideoImportDoc::has_metadatasourceurl() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VideoImportDoc::set_has_metadatasourceurl() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VideoImportDoc::clear_has_metadatasourceurl() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VideoImportDoc::clear_metadatasourceurl() {
  metadatasourceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadatasourceurl();
}
inline const ::std::string& VideoImportDoc::metadatasourceurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
  return metadatasourceurl_.GetNoArena();
}
inline void VideoImportDoc::set_metadatasourceurl(const ::std::string& value) {
  set_has_metadatasourceurl();
  metadatasourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}
#if LANG_CXX11
inline void VideoImportDoc::set_metadatasourceurl(::std::string&& value) {
  set_has_metadatasourceurl();
  metadatasourceurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}
#endif
inline void VideoImportDoc::set_metadatasourceurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadatasourceurl();
  metadatasourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}
inline void VideoImportDoc::set_metadatasourceurl(const char* value, size_t size) {
  set_has_metadatasourceurl();
  metadatasourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}
inline ::std::string* VideoImportDoc::mutable_metadatasourceurl() {
  set_has_metadatasourceurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
  return metadatasourceurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_metadatasourceurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
  clear_has_metadatasourceurl();
  return metadatasourceurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_metadatasourceurl(::std::string* metadatasourceurl) {
  if (metadatasourceurl != NULL) {
    set_has_metadatasourceurl();
  } else {
    clear_has_metadatasourceurl();
  }
  metadatasourceurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadatasourceurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.metadataSourceUrl)
}

// optional bool full_movie = 51;
inline bool VideoImportDoc::has_full_movie() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void VideoImportDoc::set_has_full_movie() {
  _has_bits_[1] |= 0x02000000u;
}
inline void VideoImportDoc::clear_has_full_movie() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void VideoImportDoc::clear_full_movie() {
  full_movie_ = false;
  clear_has_full_movie();
}
inline bool VideoImportDoc::full_movie() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.full_movie)
  return full_movie_;
}
inline void VideoImportDoc::set_full_movie(bool value) {
  set_has_full_movie();
  full_movie_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.full_movie)
}

// optional bool full_hd = 52;
inline bool VideoImportDoc::has_full_hd() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void VideoImportDoc::set_has_full_hd() {
  _has_bits_[1] |= 0x04000000u;
}
inline void VideoImportDoc::clear_has_full_hd() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void VideoImportDoc::clear_full_hd() {
  full_hd_ = false;
  clear_has_full_hd();
}
inline bool VideoImportDoc::full_hd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.full_hd)
  return full_hd_;
}
inline void VideoImportDoc::set_full_hd(bool value) {
  set_has_full_hd();
  full_hd_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.full_hd)
}

// optional bool allowInFastbase = 53;
inline bool VideoImportDoc::has_allowinfastbase() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void VideoImportDoc::set_has_allowinfastbase() {
  _has_bits_[1] |= 0x08000000u;
}
inline void VideoImportDoc::clear_has_allowinfastbase() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void VideoImportDoc::clear_allowinfastbase() {
  allowinfastbase_ = false;
  clear_has_allowinfastbase();
}
inline bool VideoImportDoc::allowinfastbase() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.allowInFastbase)
  return allowinfastbase_;
}
inline void VideoImportDoc::set_allowinfastbase(bool value) {
  set_has_allowinfastbase();
  allowinfastbase_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.allowInFastbase)
}

// optional int64 contentId = 54;
inline bool VideoImportDoc::has_contentid() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void VideoImportDoc::set_has_contentid() {
  _has_bits_[1] |= 0x20000000u;
}
inline void VideoImportDoc::clear_has_contentid() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void VideoImportDoc::clear_contentid() {
  contentid_ = GOOGLE_LONGLONG(0);
  clear_has_contentid();
}
inline ::google::protobuf::int64 VideoImportDoc::contentid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.contentId)
  return contentid_;
}
inline void VideoImportDoc::set_contentid(::google::protobuf::int64 value) {
  set_has_contentid();
  contentid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.contentId)
}

// optional .ru.mail.go.webbase.blobs.VideoLiveStreamType liveStream = 57;
inline bool VideoImportDoc::has_livestream() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void VideoImportDoc::set_has_livestream() {
  _has_bits_[2] |= 0x00000001u;
}
inline void VideoImportDoc::clear_has_livestream() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void VideoImportDoc::clear_livestream() {
  livestream_ = 0;
  clear_has_livestream();
}
inline ::ru::mail::go::webbase::blobs::VideoLiveStreamType VideoImportDoc::livestream() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.liveStream)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoLiveStreamType >(livestream_);
}
inline void VideoImportDoc::set_livestream(::ru::mail::go::webbase::blobs::VideoLiveStreamType value) {
  assert(::ru::mail::go::webbase::blobs::VideoLiveStreamType_IsValid(value));
  set_has_livestream();
  livestream_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.liveStream)
}

// optional .ru.mail.go.webbase.blobs.ExclusiveProviders exclusiveProvider = 58;
inline bool VideoImportDoc::has_exclusiveprovider() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void VideoImportDoc::set_has_exclusiveprovider() {
  _has_bits_[2] |= 0x00000002u;
}
inline void VideoImportDoc::clear_has_exclusiveprovider() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void VideoImportDoc::clear_exclusiveprovider() {
  exclusiveprovider_ = 0;
  clear_has_exclusiveprovider();
}
inline ::ru::mail::go::webbase::blobs::ExclusiveProviders VideoImportDoc::exclusiveprovider() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.exclusiveProvider)
  return static_cast< ::ru::mail::go::webbase::blobs::ExclusiveProviders >(exclusiveprovider_);
}
inline void VideoImportDoc::set_exclusiveprovider(::ru::mail::go::webbase::blobs::ExclusiveProviders value) {
  assert(::ru::mail::go::webbase::blobs::ExclusiveProviders_IsValid(value));
  set_has_exclusiveprovider();
  exclusiveprovider_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.exclusiveProvider)
}

// optional .ru.mail.go.webbase.blobs.ProtobufSourceType protobufSourceTypeFlag = 59;
inline bool VideoImportDoc::has_protobufsourcetypeflag() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void VideoImportDoc::set_has_protobufsourcetypeflag() {
  _has_bits_[2] |= 0x00000004u;
}
inline void VideoImportDoc::clear_has_protobufsourcetypeflag() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void VideoImportDoc::clear_protobufsourcetypeflag() {
  protobufsourcetypeflag_ = 0;
  clear_has_protobufsourcetypeflag();
}
inline ::ru::mail::go::webbase::blobs::ProtobufSourceType VideoImportDoc::protobufsourcetypeflag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.protobufSourceTypeFlag)
  return static_cast< ::ru::mail::go::webbase::blobs::ProtobufSourceType >(protobufsourcetypeflag_);
}
inline void VideoImportDoc::set_protobufsourcetypeflag(::ru::mail::go::webbase::blobs::ProtobufSourceType value) {
  assert(::ru::mail::go::webbase::blobs::ProtobufSourceType_IsValid(value));
  set_has_protobufsourcetypeflag();
  protobufsourcetypeflag_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.protobufSourceTypeFlag)
}

// optional bool allow_embed = 60;
inline bool VideoImportDoc::has_allow_embed() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void VideoImportDoc::set_has_allow_embed() {
  _has_bits_[1] |= 0x10000000u;
}
inline void VideoImportDoc::clear_has_allow_embed() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void VideoImportDoc::clear_allow_embed() {
  allow_embed_ = false;
  clear_has_allow_embed();
}
inline bool VideoImportDoc::allow_embed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.allow_embed)
  return allow_embed_;
}
inline void VideoImportDoc::set_allow_embed(bool value) {
  set_has_allow_embed();
  allow_embed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.allow_embed)
}

// optional string youtubeHash = 61;
inline bool VideoImportDoc::has_youtubehash() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VideoImportDoc::set_has_youtubehash() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VideoImportDoc::clear_has_youtubehash() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VideoImportDoc::clear_youtubehash() {
  youtubehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youtubehash();
}
inline const ::std::string& VideoImportDoc::youtubehash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
  return youtubehash_.GetNoArena();
}
inline void VideoImportDoc::set_youtubehash(const ::std::string& value) {
  set_has_youtubehash();
  youtubehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}
#if LANG_CXX11
inline void VideoImportDoc::set_youtubehash(::std::string&& value) {
  set_has_youtubehash();
  youtubehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}
#endif
inline void VideoImportDoc::set_youtubehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_youtubehash();
  youtubehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}
inline void VideoImportDoc::set_youtubehash(const char* value, size_t size) {
  set_has_youtubehash();
  youtubehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}
inline ::std::string* VideoImportDoc::mutable_youtubehash() {
  set_has_youtubehash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
  return youtubehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_youtubehash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
  clear_has_youtubehash();
  return youtubehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_youtubehash(::std::string* youtubehash) {
  if (youtubehash != NULL) {
    set_has_youtubehash();
  } else {
    clear_has_youtubehash();
  }
  youtubehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youtubehash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.youtubeHash)
}

// optional string channelId = 62;
inline bool VideoImportDoc::has_channelid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VideoImportDoc::set_has_channelid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VideoImportDoc::clear_has_channelid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VideoImportDoc::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& VideoImportDoc::channelid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
  return channelid_.GetNoArena();
}
inline void VideoImportDoc::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}
#if LANG_CXX11
inline void VideoImportDoc::set_channelid(::std::string&& value) {
  set_has_channelid();
  channelid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}
#endif
inline void VideoImportDoc::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channelid();
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}
inline void VideoImportDoc::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}
inline ::std::string* VideoImportDoc::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
  return channelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_channelid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.channelId)
}

// optional int64 userId64 = 63;
inline bool VideoImportDoc::has_userid64() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void VideoImportDoc::set_has_userid64() {
  _has_bits_[2] |= 0x00000010u;
}
inline void VideoImportDoc::clear_has_userid64() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void VideoImportDoc::clear_userid64() {
  userid64_ = GOOGLE_LONGLONG(0);
  clear_has_userid64();
}
inline ::google::protobuf::int64 VideoImportDoc::userid64() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.userId64)
  return userid64_;
}
inline void VideoImportDoc::set_userid64(::google::protobuf::int64 value) {
  set_has_userid64();
  userid64_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.userId64)
}

// optional .ru.mail.go.webbase.blobs.LiveVideoState liveVideoState = 64;
inline bool VideoImportDoc::has_livevideostate() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void VideoImportDoc::set_has_livevideostate() {
  _has_bits_[2] |= 0x00000008u;
}
inline void VideoImportDoc::clear_has_livevideostate() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void VideoImportDoc::clear_livevideostate() {
  livevideostate_ = 0;
  clear_has_livevideostate();
}
inline ::ru::mail::go::webbase::blobs::LiveVideoState VideoImportDoc::livevideostate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.liveVideoState)
  return static_cast< ::ru::mail::go::webbase::blobs::LiveVideoState >(livevideostate_);
}
inline void VideoImportDoc::set_livevideostate(::ru::mail::go::webbase::blobs::LiveVideoState value) {
  assert(::ru::mail::go::webbase::blobs::LiveVideoState_IsValid(value));
  set_has_livevideostate();
  livevideostate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.liveVideoState)
}

// optional string extPlatform = 65;
inline bool VideoImportDoc::has_extplatform() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VideoImportDoc::set_has_extplatform() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VideoImportDoc::clear_has_extplatform() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VideoImportDoc::clear_extplatform() {
  extplatform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extplatform();
}
inline const ::std::string& VideoImportDoc::extplatform() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
  return extplatform_.GetNoArena();
}
inline void VideoImportDoc::set_extplatform(const ::std::string& value) {
  set_has_extplatform();
  extplatform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}
#if LANG_CXX11
inline void VideoImportDoc::set_extplatform(::std::string&& value) {
  set_has_extplatform();
  extplatform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}
#endif
inline void VideoImportDoc::set_extplatform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extplatform();
  extplatform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}
inline void VideoImportDoc::set_extplatform(const char* value, size_t size) {
  set_has_extplatform();
  extplatform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}
inline ::std::string* VideoImportDoc::mutable_extplatform() {
  set_has_extplatform();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
  return extplatform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_extplatform() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
  clear_has_extplatform();
  return extplatform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_extplatform(::std::string* extplatform) {
  if (extplatform != NULL) {
    set_has_extplatform();
  } else {
    clear_has_extplatform();
  }
  extplatform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extplatform);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.extPlatform)
}

// repeated .ru.mail.go.webbase.blobs.VideoQualityValue videoQualityOptions = 66;
inline int VideoImportDoc::videoqualityoptions_size() const {
  return videoqualityoptions_.size();
}
inline void VideoImportDoc::clear_videoqualityoptions() {
  videoqualityoptions_.Clear();
}
inline ::ru::mail::go::webbase::blobs::VideoQualityValue VideoImportDoc::videoqualityoptions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoQualityValue >(videoqualityoptions_.Get(index));
}
inline void VideoImportDoc::set_videoqualityoptions(int index, ::ru::mail::go::webbase::blobs::VideoQualityValue value) {
  assert(::ru::mail::go::webbase::blobs::VideoQualityValue_IsValid(value));
  videoqualityoptions_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
}
inline void VideoImportDoc::add_videoqualityoptions(::ru::mail::go::webbase::blobs::VideoQualityValue value) {
  assert(::ru::mail::go::webbase::blobs::VideoQualityValue_IsValid(value));
  videoqualityoptions_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
}
inline const ::google::protobuf::RepeatedField<int>&
VideoImportDoc::videoqualityoptions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
  return videoqualityoptions_;
}
inline ::google::protobuf::RepeatedField<int>*
VideoImportDoc::mutable_videoqualityoptions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptions)
  return &videoqualityoptions_;
}

// optional int32 reposts_count = 67;
inline bool VideoImportDoc::has_reposts_count() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void VideoImportDoc::set_has_reposts_count() {
  _has_bits_[2] |= 0x00000020u;
}
inline void VideoImportDoc::clear_has_reposts_count() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void VideoImportDoc::clear_reposts_count() {
  reposts_count_ = 0;
  clear_has_reposts_count();
}
inline ::google::protobuf::int32 VideoImportDoc::reposts_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.reposts_count)
  return reposts_count_;
}
inline void VideoImportDoc::set_reposts_count(::google::protobuf::int32 value) {
  set_has_reposts_count();
  reposts_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.reposts_count)
}

// optional bool group_is_closed = 68;
inline bool VideoImportDoc::has_group_is_closed() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void VideoImportDoc::set_has_group_is_closed() {
  _has_bits_[2] |= 0x00000080u;
}
inline void VideoImportDoc::clear_has_group_is_closed() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void VideoImportDoc::clear_group_is_closed() {
  group_is_closed_ = false;
  clear_has_group_is_closed();
}
inline bool VideoImportDoc::group_is_closed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.group_is_closed)
  return group_is_closed_;
}
inline void VideoImportDoc::set_group_is_closed(bool value) {
  set_has_group_is_closed();
  group_is_closed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.group_is_closed)
}

// optional bool group_is_verified = 69;
inline bool VideoImportDoc::has_group_is_verified() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void VideoImportDoc::set_has_group_is_verified() {
  _has_bits_[2] |= 0x00000100u;
}
inline void VideoImportDoc::clear_has_group_is_verified() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void VideoImportDoc::clear_group_is_verified() {
  group_is_verified_ = false;
  clear_has_group_is_verified();
}
inline bool VideoImportDoc::group_is_verified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.group_is_verified)
  return group_is_verified_;
}
inline void VideoImportDoc::set_group_is_verified(bool value) {
  set_has_group_is_verified();
  group_is_verified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.group_is_verified)
}

// optional int32 group_members_count = 70;
inline bool VideoImportDoc::has_group_members_count() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void VideoImportDoc::set_has_group_members_count() {
  _has_bits_[2] |= 0x00000040u;
}
inline void VideoImportDoc::clear_has_group_members_count() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void VideoImportDoc::clear_group_members_count() {
  group_members_count_ = 0;
  clear_has_group_members_count();
}
inline ::google::protobuf::int32 VideoImportDoc::group_members_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.group_members_count)
  return group_members_count_;
}
inline void VideoImportDoc::set_group_members_count(::google::protobuf::int32 value) {
  set_has_group_members_count();
  group_members_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.group_members_count)
}

// optional bool group_trending = 71;
inline bool VideoImportDoc::has_group_trending() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void VideoImportDoc::set_has_group_trending() {
  _has_bits_[2] |= 0x00000200u;
}
inline void VideoImportDoc::clear_has_group_trending() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void VideoImportDoc::clear_group_trending() {
  group_trending_ = false;
  clear_has_group_trending();
}
inline bool VideoImportDoc::group_trending() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.group_trending)
  return group_trending_;
}
inline void VideoImportDoc::set_group_trending(bool value) {
  set_has_group_trending();
  group_trending_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.group_trending)
}

// optional .ru.mail.go.webbase.blobs.DzenCertainGrade dzen_certain_grade = 72;
inline bool VideoImportDoc::has_dzen_certain_grade() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void VideoImportDoc::set_has_dzen_certain_grade() {
  _has_bits_[2] |= 0x08000000u;
}
inline void VideoImportDoc::clear_has_dzen_certain_grade() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void VideoImportDoc::clear_dzen_certain_grade() {
  dzen_certain_grade_ = 1;
  clear_has_dzen_certain_grade();
}
inline ::ru::mail::go::webbase::blobs::DzenCertainGrade VideoImportDoc::dzen_certain_grade() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_certain_grade)
  return static_cast< ::ru::mail::go::webbase::blobs::DzenCertainGrade >(dzen_certain_grade_);
}
inline void VideoImportDoc::set_dzen_certain_grade(::ru::mail::go::webbase::blobs::DzenCertainGrade value) {
  assert(::ru::mail::go::webbase::blobs::DzenCertainGrade_IsValid(value));
  set_has_dzen_certain_grade();
  dzen_certain_grade_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_certain_grade)
}

// optional .ru.mail.go.webbase.blobs.VideoOrientation video_orientation = 73;
inline bool VideoImportDoc::has_video_orientation() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void VideoImportDoc::set_has_video_orientation() {
  _has_bits_[2] |= 0x10000000u;
}
inline void VideoImportDoc::clear_has_video_orientation() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void VideoImportDoc::clear_video_orientation() {
  video_orientation_ = 1;
  clear_has_video_orientation();
}
inline ::ru::mail::go::webbase::blobs::VideoOrientation VideoImportDoc::video_orientation() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.video_orientation)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoOrientation >(video_orientation_);
}
inline void VideoImportDoc::set_video_orientation(::ru::mail::go::webbase::blobs::VideoOrientation value) {
  assert(::ru::mail::go::webbase::blobs::VideoOrientation_IsValid(value));
  set_has_video_orientation();
  video_orientation_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.video_orientation)
}

// optional bool dzen_exists_in_reco_snapshot = 74 [default = false];
inline bool VideoImportDoc::has_dzen_exists_in_reco_snapshot() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void VideoImportDoc::set_has_dzen_exists_in_reco_snapshot() {
  _has_bits_[2] |= 0x00000400u;
}
inline void VideoImportDoc::clear_has_dzen_exists_in_reco_snapshot() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void VideoImportDoc::clear_dzen_exists_in_reco_snapshot() {
  dzen_exists_in_reco_snapshot_ = false;
  clear_has_dzen_exists_in_reco_snapshot();
}
inline bool VideoImportDoc::dzen_exists_in_reco_snapshot() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_exists_in_reco_snapshot)
  return dzen_exists_in_reco_snapshot_;
}
inline void VideoImportDoc::set_dzen_exists_in_reco_snapshot(bool value) {
  set_has_dzen_exists_in_reco_snapshot();
  dzen_exists_in_reco_snapshot_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_exists_in_reco_snapshot)
}

// optional bool subscribers_only = 75 [default = false];
inline bool VideoImportDoc::has_subscribers_only() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void VideoImportDoc::set_has_subscribers_only() {
  _has_bits_[2] |= 0x00001000u;
}
inline void VideoImportDoc::clear_has_subscribers_only() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void VideoImportDoc::clear_subscribers_only() {
  subscribers_only_ = false;
  clear_has_subscribers_only();
}
inline bool VideoImportDoc::subscribers_only() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.subscribers_only)
  return subscribers_only_;
}
inline void VideoImportDoc::set_subscribers_only(bool value) {
  set_has_subscribers_only();
  subscribers_only_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.subscribers_only)
}

// optional .ru.mail.go.webbase.blobs.VideoType dzen_video_type = 76;
inline bool VideoImportDoc::has_dzen_video_type() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void VideoImportDoc::set_has_dzen_video_type() {
  _has_bits_[2] |= 0x04000000u;
}
inline void VideoImportDoc::clear_has_dzen_video_type() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void VideoImportDoc::clear_dzen_video_type() {
  dzen_video_type_ = 1;
  clear_has_dzen_video_type();
}
inline ::ru::mail::go::webbase::blobs::VideoType VideoImportDoc::dzen_video_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_video_type)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoType >(dzen_video_type_);
}
inline void VideoImportDoc::set_dzen_video_type(::ru::mail::go::webbase::blobs::VideoType value) {
  assert(::ru::mail::go::webbase::blobs::VideoType_IsValid(value));
  set_has_dzen_video_type();
  dzen_video_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.dzen_video_type)
}

// optional bool user_is_verified = 77 [default = false];
inline bool VideoImportDoc::has_user_is_verified() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void VideoImportDoc::set_has_user_is_verified() {
  _has_bits_[2] |= 0x00002000u;
}
inline void VideoImportDoc::clear_has_user_is_verified() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void VideoImportDoc::clear_user_is_verified() {
  user_is_verified_ = false;
  clear_has_user_is_verified();
}
inline bool VideoImportDoc::user_is_verified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.user_is_verified)
  return user_is_verified_;
}
inline void VideoImportDoc::set_user_is_verified(bool value) {
  set_has_user_is_verified();
  user_is_verified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.user_is_verified)
}

// optional int32 user_subscribers = 78;
inline bool VideoImportDoc::has_user_subscribers() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void VideoImportDoc::set_has_user_subscribers() {
  _has_bits_[2] |= 0x00000800u;
}
inline void VideoImportDoc::clear_has_user_subscribers() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void VideoImportDoc::clear_user_subscribers() {
  user_subscribers_ = 0;
  clear_has_user_subscribers();
}
inline ::google::protobuf::int32 VideoImportDoc::user_subscribers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.user_subscribers)
  return user_subscribers_;
}
inline void VideoImportDoc::set_user_subscribers(::google::protobuf::int32 value) {
  set_has_user_subscribers();
  user_subscribers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.user_subscribers)
}

// optional int32 adult_reports_count = 79;
inline bool VideoImportDoc::has_adult_reports_count() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void VideoImportDoc::set_has_adult_reports_count() {
  _has_bits_[2] |= 0x00010000u;
}
inline void VideoImportDoc::clear_has_adult_reports_count() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void VideoImportDoc::clear_adult_reports_count() {
  adult_reports_count_ = 0;
  clear_has_adult_reports_count();
}
inline ::google::protobuf::int32 VideoImportDoc::adult_reports_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.adult_reports_count)
  return adult_reports_count_;
}
inline void VideoImportDoc::set_adult_reports_count(::google::protobuf::int32 value) {
  set_has_adult_reports_count();
  adult_reports_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.adult_reports_count)
}

// optional bool is_probably_porn_by_vk_score = 80 [default = false];
inline bool VideoImportDoc::has_is_probably_porn_by_vk_score() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void VideoImportDoc::set_has_is_probably_porn_by_vk_score() {
  _has_bits_[2] |= 0x00004000u;
}
inline void VideoImportDoc::clear_has_is_probably_porn_by_vk_score() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void VideoImportDoc::clear_is_probably_porn_by_vk_score() {
  is_probably_porn_by_vk_score_ = false;
  clear_has_is_probably_porn_by_vk_score();
}
inline bool VideoImportDoc::is_probably_porn_by_vk_score() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_probably_porn_by_vk_score)
  return is_probably_porn_by_vk_score_;
}
inline void VideoImportDoc::set_is_probably_porn_by_vk_score(bool value) {
  set_has_is_probably_porn_by_vk_score();
  is_probably_porn_by_vk_score_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_probably_porn_by_vk_score)
}

// optional string user_domain = 81;
inline bool VideoImportDoc::has_user_domain() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VideoImportDoc::set_has_user_domain() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VideoImportDoc::clear_has_user_domain() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VideoImportDoc::clear_user_domain() {
  user_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_domain();
}
inline const ::std::string& VideoImportDoc::user_domain() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
  return user_domain_.GetNoArena();
}
inline void VideoImportDoc::set_user_domain(const ::std::string& value) {
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}
#if LANG_CXX11
inline void VideoImportDoc::set_user_domain(::std::string&& value) {
  set_has_user_domain();
  user_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}
#endif
inline void VideoImportDoc::set_user_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}
inline void VideoImportDoc::set_user_domain(const char* value, size_t size) {
  set_has_user_domain();
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}
inline ::std::string* VideoImportDoc::mutable_user_domain() {
  set_has_user_domain();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
  return user_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_user_domain() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
  clear_has_user_domain();
  return user_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_user_domain(::std::string* user_domain) {
  if (user_domain != NULL) {
    set_has_user_domain();
  } else {
    clear_has_user_domain();
  }
  user_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_domain);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.user_domain)
}

// optional bool is_good_film = 82 [default = false];
inline bool VideoImportDoc::has_is_good_film() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void VideoImportDoc::set_has_is_good_film() {
  _has_bits_[2] |= 0x00008000u;
}
inline void VideoImportDoc::clear_has_is_good_film() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void VideoImportDoc::clear_is_good_film() {
  is_good_film_ = false;
  clear_has_is_good_film();
}
inline bool VideoImportDoc::is_good_film() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_film)
  return is_good_film_;
}
inline void VideoImportDoc::set_is_good_film(bool value) {
  set_has_is_good_film();
  is_good_film_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_film)
}

// optional bool is_good_cartoon = 83 [default = false];
inline bool VideoImportDoc::has_is_good_cartoon() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void VideoImportDoc::set_has_is_good_cartoon() {
  _has_bits_[2] |= 0x00040000u;
}
inline void VideoImportDoc::clear_has_is_good_cartoon() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void VideoImportDoc::clear_is_good_cartoon() {
  is_good_cartoon_ = false;
  clear_has_is_good_cartoon();
}
inline bool VideoImportDoc::is_good_cartoon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_cartoon)
  return is_good_cartoon_;
}
inline void VideoImportDoc::set_is_good_cartoon(bool value) {
  set_has_is_good_cartoon();
  is_good_cartoon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_cartoon)
}

// optional bool is_good_serial = 84 [default = false];
inline bool VideoImportDoc::has_is_good_serial() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void VideoImportDoc::set_has_is_good_serial() {
  _has_bits_[2] |= 0x00080000u;
}
inline void VideoImportDoc::clear_has_is_good_serial() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void VideoImportDoc::clear_is_good_serial() {
  is_good_serial_ = false;
  clear_has_is_good_serial();
}
inline bool VideoImportDoc::is_good_serial() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_serial)
  return is_good_serial_;
}
inline void VideoImportDoc::set_is_good_serial(bool value) {
  set_has_is_good_serial();
  is_good_serial_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_good_serial)
}

// optional bool is_update = 85;
inline bool VideoImportDoc::has_is_update() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void VideoImportDoc::set_has_is_update() {
  _has_bits_[2] |= 0x00100000u;
}
inline void VideoImportDoc::clear_has_is_update() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void VideoImportDoc::clear_is_update() {
  is_update_ = false;
  clear_has_is_update();
}
inline bool VideoImportDoc::is_update() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_update)
  return is_update_;
}
inline void VideoImportDoc::set_is_update(bool value) {
  set_has_is_update();
  is_update_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_update)
}

// optional bool is_licensed_content_vk = 86;
inline bool VideoImportDoc::has_is_licensed_content_vk() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void VideoImportDoc::set_has_is_licensed_content_vk() {
  _has_bits_[2] |= 0x00200000u;
}
inline void VideoImportDoc::clear_has_is_licensed_content_vk() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void VideoImportDoc::clear_is_licensed_content_vk() {
  is_licensed_content_vk_ = false;
  clear_has_is_licensed_content_vk();
}
inline bool VideoImportDoc::is_licensed_content_vk() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_licensed_content_vk)
  return is_licensed_content_vk_;
}
inline void VideoImportDoc::set_is_licensed_content_vk(bool value) {
  set_has_is_licensed_content_vk();
  is_licensed_content_vk_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_licensed_content_vk)
}

// optional string content_hash_string = 87;
inline bool VideoImportDoc::has_content_hash_string() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VideoImportDoc::set_has_content_hash_string() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VideoImportDoc::clear_has_content_hash_string() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VideoImportDoc::clear_content_hash_string() {
  content_hash_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content_hash_string();
}
inline const ::std::string& VideoImportDoc::content_hash_string() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
  return content_hash_string_.GetNoArena();
}
inline void VideoImportDoc::set_content_hash_string(const ::std::string& value) {
  set_has_content_hash_string();
  content_hash_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}
#if LANG_CXX11
inline void VideoImportDoc::set_content_hash_string(::std::string&& value) {
  set_has_content_hash_string();
  content_hash_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}
#endif
inline void VideoImportDoc::set_content_hash_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content_hash_string();
  content_hash_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}
inline void VideoImportDoc::set_content_hash_string(const char* value, size_t size) {
  set_has_content_hash_string();
  content_hash_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}
inline ::std::string* VideoImportDoc::mutable_content_hash_string() {
  set_has_content_hash_string();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
  return content_hash_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_content_hash_string() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
  clear_has_content_hash_string();
  return content_hash_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_content_hash_string(::std::string* content_hash_string) {
  if (content_hash_string != NULL) {
    set_has_content_hash_string();
  } else {
    clear_has_content_hash_string();
  }
  content_hash_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_hash_string);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.content_hash_string)
}

// optional int64 similarity_cluster_id = 88;
inline bool VideoImportDoc::has_similarity_cluster_id() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void VideoImportDoc::set_has_similarity_cluster_id() {
  _has_bits_[2] |= 0x00020000u;
}
inline void VideoImportDoc::clear_has_similarity_cluster_id() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void VideoImportDoc::clear_similarity_cluster_id() {
  similarity_cluster_id_ = GOOGLE_LONGLONG(0);
  clear_has_similarity_cluster_id();
}
inline ::google::protobuf::int64 VideoImportDoc::similarity_cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.similarity_cluster_id)
  return similarity_cluster_id_;
}
inline void VideoImportDoc::set_similarity_cluster_id(::google::protobuf::int64 value) {
  set_has_similarity_cluster_id();
  similarity_cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.similarity_cluster_id)
}

// optional string contentIdString = 89;
inline bool VideoImportDoc::has_contentidstring() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VideoImportDoc::set_has_contentidstring() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VideoImportDoc::clear_has_contentidstring() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VideoImportDoc::clear_contentidstring() {
  contentidstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentidstring();
}
inline const ::std::string& VideoImportDoc::contentidstring() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
  return contentidstring_.GetNoArena();
}
inline void VideoImportDoc::set_contentidstring(const ::std::string& value) {
  set_has_contentidstring();
  contentidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}
#if LANG_CXX11
inline void VideoImportDoc::set_contentidstring(::std::string&& value) {
  set_has_contentidstring();
  contentidstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}
#endif
inline void VideoImportDoc::set_contentidstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contentidstring();
  contentidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}
inline void VideoImportDoc::set_contentidstring(const char* value, size_t size) {
  set_has_contentidstring();
  contentidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}
inline ::std::string* VideoImportDoc::mutable_contentidstring() {
  set_has_contentidstring();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
  return contentidstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_contentidstring() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
  clear_has_contentidstring();
  return contentidstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_contentidstring(::std::string* contentidstring) {
  if (contentidstring != NULL) {
    set_has_contentidstring();
  } else {
    clear_has_contentidstring();
  }
  contentidstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentidstring);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.contentIdString)
}

// optional int64 united_video_id = 90;
inline bool VideoImportDoc::has_united_video_id() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void VideoImportDoc::set_has_united_video_id() {
  _has_bits_[2] |= 0x02000000u;
}
inline void VideoImportDoc::clear_has_united_video_id() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void VideoImportDoc::clear_united_video_id() {
  united_video_id_ = GOOGLE_LONGLONG(0);
  clear_has_united_video_id();
}
inline ::google::protobuf::int64 VideoImportDoc::united_video_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.united_video_id)
  return united_video_id_;
}
inline void VideoImportDoc::set_united_video_id(::google::protobuf::int64 value) {
  set_has_united_video_id();
  united_video_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.united_video_id)
}

// optional bool is_promo_author = 91 [default = false];
inline bool VideoImportDoc::has_is_promo_author() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void VideoImportDoc::set_has_is_promo_author() {
  _has_bits_[2] |= 0x00400000u;
}
inline void VideoImportDoc::clear_has_is_promo_author() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void VideoImportDoc::clear_is_promo_author() {
  is_promo_author_ = false;
  clear_has_is_promo_author();
}
inline bool VideoImportDoc::is_promo_author() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_promo_author)
  return is_promo_author_;
}
inline void VideoImportDoc::set_is_promo_author(bool value) {
  set_has_is_promo_author();
  is_promo_author_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_promo_author)
}

// repeated string videoQualityOptionsVK = 92;
inline int VideoImportDoc::videoqualityoptionsvk_size() const {
  return videoqualityoptionsvk_.size();
}
inline void VideoImportDoc::clear_videoqualityoptionsvk() {
  videoqualityoptionsvk_.Clear();
}
inline const ::std::string& VideoImportDoc::videoqualityoptionsvk(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return videoqualityoptionsvk_.Get(index);
}
inline ::std::string* VideoImportDoc::mutable_videoqualityoptionsvk(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return videoqualityoptionsvk_.Mutable(index);
}
inline void VideoImportDoc::set_videoqualityoptionsvk(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  videoqualityoptionsvk_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VideoImportDoc::set_videoqualityoptionsvk(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  videoqualityoptionsvk_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VideoImportDoc::set_videoqualityoptionsvk(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  videoqualityoptionsvk_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
inline void VideoImportDoc::set_videoqualityoptionsvk(int index, const char* value, size_t size) {
  videoqualityoptionsvk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
inline ::std::string* VideoImportDoc::add_videoqualityoptionsvk() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return videoqualityoptionsvk_.Add();
}
inline void VideoImportDoc::add_videoqualityoptionsvk(const ::std::string& value) {
  videoqualityoptionsvk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
#if LANG_CXX11
inline void VideoImportDoc::add_videoqualityoptionsvk(::std::string&& value) {
  videoqualityoptionsvk_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
#endif
inline void VideoImportDoc::add_videoqualityoptionsvk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  videoqualityoptionsvk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
inline void VideoImportDoc::add_videoqualityoptionsvk(const char* value, size_t size) {
  videoqualityoptionsvk_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoImportDoc::videoqualityoptionsvk() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return videoqualityoptionsvk_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VideoImportDoc::mutable_videoqualityoptionsvk() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.videoQualityOptionsVK)
  return &videoqualityoptionsvk_;
}

// optional bool is_official_music_clip = 93 [default = false];
inline bool VideoImportDoc::has_is_official_music_clip() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void VideoImportDoc::set_has_is_official_music_clip() {
  _has_bits_[2] |= 0x00800000u;
}
inline void VideoImportDoc::clear_has_is_official_music_clip() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void VideoImportDoc::clear_is_official_music_clip() {
  is_official_music_clip_ = false;
  clear_has_is_official_music_clip();
}
inline bool VideoImportDoc::is_official_music_clip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_official_music_clip)
  return is_official_music_clip_;
}
inline void VideoImportDoc::set_is_official_music_clip(bool value) {
  set_has_is_official_music_clip();
  is_official_music_clip_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_official_music_clip)
}

// optional bool is_external = 94;
inline bool VideoImportDoc::has_is_external() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void VideoImportDoc::set_has_is_external() {
  _has_bits_[2] |= 0x01000000u;
}
inline void VideoImportDoc::clear_has_is_external() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void VideoImportDoc::clear_is_external() {
  is_external_ = false;
  clear_has_is_external();
}
inline bool VideoImportDoc::is_external() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.is_external)
  return is_external_;
}
inline void VideoImportDoc::set_is_external(bool value) {
  set_has_is_external();
  is_external_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.is_external)
}

// optional string external_link = 95;
inline bool VideoImportDoc::has_external_link() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void VideoImportDoc::set_has_external_link() {
  _has_bits_[0] |= 0x00200000u;
}
inline void VideoImportDoc::clear_has_external_link() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void VideoImportDoc::clear_external_link() {
  external_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_link();
}
inline const ::std::string& VideoImportDoc::external_link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
  return external_link_.GetNoArena();
}
inline void VideoImportDoc::set_external_link(const ::std::string& value) {
  set_has_external_link();
  external_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}
#if LANG_CXX11
inline void VideoImportDoc::set_external_link(::std::string&& value) {
  set_has_external_link();
  external_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}
#endif
inline void VideoImportDoc::set_external_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_external_link();
  external_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}
inline void VideoImportDoc::set_external_link(const char* value, size_t size) {
  set_has_external_link();
  external_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}
inline ::std::string* VideoImportDoc::mutable_external_link() {
  set_has_external_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
  return external_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_external_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
  clear_has_external_link();
  return external_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_external_link(::std::string* external_link) {
  if (external_link != NULL) {
    set_has_external_link();
  } else {
    clear_has_external_link();
  }
  external_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.external_link)
}

// optional string audio_title = 97;
inline bool VideoImportDoc::has_audio_title() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void VideoImportDoc::set_has_audio_title() {
  _has_bits_[0] |= 0x00800000u;
}
inline void VideoImportDoc::clear_has_audio_title() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void VideoImportDoc::clear_audio_title() {
  audio_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_title();
}
inline const ::std::string& VideoImportDoc::audio_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
  return audio_title_.GetNoArena();
}
inline void VideoImportDoc::set_audio_title(const ::std::string& value) {
  set_has_audio_title();
  audio_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}
#if LANG_CXX11
inline void VideoImportDoc::set_audio_title(::std::string&& value) {
  set_has_audio_title();
  audio_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}
#endif
inline void VideoImportDoc::set_audio_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_title();
  audio_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}
inline void VideoImportDoc::set_audio_title(const char* value, size_t size) {
  set_has_audio_title();
  audio_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}
inline ::std::string* VideoImportDoc::mutable_audio_title() {
  set_has_audio_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
  return audio_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_audio_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
  clear_has_audio_title();
  return audio_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_audio_title(::std::string* audio_title) {
  if (audio_title != NULL) {
    set_has_audio_title();
  } else {
    clear_has_audio_title();
  }
  audio_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.audio_title)
}

// optional string audio_performer = 98;
inline bool VideoImportDoc::has_audio_performer() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void VideoImportDoc::set_has_audio_performer() {
  _has_bits_[0] |= 0x01000000u;
}
inline void VideoImportDoc::clear_has_audio_performer() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void VideoImportDoc::clear_audio_performer() {
  audio_performer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_performer();
}
inline const ::std::string& VideoImportDoc::audio_performer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
  return audio_performer_.GetNoArena();
}
inline void VideoImportDoc::set_audio_performer(const ::std::string& value) {
  set_has_audio_performer();
  audio_performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}
#if LANG_CXX11
inline void VideoImportDoc::set_audio_performer(::std::string&& value) {
  set_has_audio_performer();
  audio_performer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}
#endif
inline void VideoImportDoc::set_audio_performer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_performer();
  audio_performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}
inline void VideoImportDoc::set_audio_performer(const char* value, size_t size) {
  set_has_audio_performer();
  audio_performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}
inline ::std::string* VideoImportDoc::mutable_audio_performer() {
  set_has_audio_performer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
  return audio_performer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoImportDoc::release_audio_performer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
  clear_has_audio_performer();
  return audio_performer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoImportDoc::set_allocated_audio_performer(::std::string* audio_performer) {
  if (audio_performer != NULL) {
    set_has_audio_performer();
  } else {
    clear_has_audio_performer();
  }
  audio_performer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_performer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoImportDoc.audio_performer)
}

// repeated string hashtags = 99;
inline int VideoImportDoc::hashtags_size() const {
  return hashtags_.size();
}
inline void VideoImportDoc::clear_hashtags() {
  hashtags_.Clear();
}
inline const ::std::string& VideoImportDoc::hashtags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return hashtags_.Get(index);
}
inline ::std::string* VideoImportDoc::mutable_hashtags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return hashtags_.Mutable(index);
}
inline void VideoImportDoc::set_hashtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  hashtags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VideoImportDoc::set_hashtags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  hashtags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VideoImportDoc::set_hashtags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
inline void VideoImportDoc::set_hashtags(int index, const char* value, size_t size) {
  hashtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
inline ::std::string* VideoImportDoc::add_hashtags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return hashtags_.Add();
}
inline void VideoImportDoc::add_hashtags(const ::std::string& value) {
  hashtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
#if LANG_CXX11
inline void VideoImportDoc::add_hashtags(::std::string&& value) {
  hashtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
#endif
inline void VideoImportDoc::add_hashtags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
inline void VideoImportDoc::add_hashtags(const char* value, size_t size) {
  hashtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoImportDoc::hashtags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return hashtags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VideoImportDoc::mutable_hashtags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoImportDoc.hashtags)
  return &hashtags_;
}

// -------------------------------------------------------------------

// IndexedVideo

// required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
inline bool IndexedVideo::has_video_import_doc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexedVideo::set_has_video_import_doc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexedVideo::clear_has_video_import_doc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexedVideo::clear_video_import_doc() {
  if (video_import_doc_ != NULL) video_import_doc_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_import_doc();
}
inline const ::ru::mail::go::webbase::blobs::VideoImportDoc& IndexedVideo::video_import_doc() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_import_doc_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.IndexedVideo.video_import_doc)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* IndexedVideo::mutable_video_import_doc() {
  set_has_video_import_doc();
  if (video_import_doc_ == NULL) {
    video_import_doc_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.IndexedVideo.video_import_doc)
  return video_import_doc_;
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* IndexedVideo::release_video_import_doc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.IndexedVideo.video_import_doc)
  clear_has_video_import_doc();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_import_doc_;
  video_import_doc_ = NULL;
  return temp;
}
inline void IndexedVideo::set_allocated_video_import_doc(::ru::mail::go::webbase::blobs::VideoImportDoc* video_import_doc) {
  delete video_import_doc_;
  video_import_doc_ = video_import_doc;
  if (video_import_doc) {
    set_has_video_import_doc();
  } else {
    clear_has_video_import_doc();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.IndexedVideo.video_import_doc)
}

// optional .ru.mail.go.webbase.blobs.MovieMetadata movie_metadata = 2;
inline bool IndexedVideo::has_movie_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexedVideo::set_has_movie_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexedVideo::clear_has_movie_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexedVideo::clear_movie_metadata() {
  if (movie_metadata_ != NULL) movie_metadata_->::ru::mail::go::webbase::blobs::MovieMetadata::Clear();
  clear_has_movie_metadata();
}
inline const ::ru::mail::go::webbase::blobs::MovieMetadata& IndexedVideo::movie_metadata() const {
  const ::ru::mail::go::webbase::blobs::MovieMetadata* p = movie_metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.IndexedVideo.movie_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MovieMetadata*>(
      &::ru::mail::go::webbase::blobs::_MovieMetadata_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::MovieMetadata* IndexedVideo::mutable_movie_metadata() {
  set_has_movie_metadata();
  if (movie_metadata_ == NULL) {
    movie_metadata_ = new ::ru::mail::go::webbase::blobs::MovieMetadata;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.IndexedVideo.movie_metadata)
  return movie_metadata_;
}
inline ::ru::mail::go::webbase::blobs::MovieMetadata* IndexedVideo::release_movie_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.IndexedVideo.movie_metadata)
  clear_has_movie_metadata();
  ::ru::mail::go::webbase::blobs::MovieMetadata* temp = movie_metadata_;
  movie_metadata_ = NULL;
  return temp;
}
inline void IndexedVideo::set_allocated_movie_metadata(::ru::mail::go::webbase::blobs::MovieMetadata* movie_metadata) {
  delete movie_metadata_;
  movie_metadata_ = movie_metadata;
  if (movie_metadata) {
    set_has_movie_metadata();
  } else {
    clear_has_movie_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.IndexedVideo.movie_metadata)
}

// optional bool is_porn = 3;
inline bool IndexedVideo::has_is_porn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexedVideo::set_has_is_porn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexedVideo::clear_has_is_porn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexedVideo::clear_is_porn() {
  is_porn_ = false;
  clear_has_is_porn();
}
inline bool IndexedVideo::is_porn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.IndexedVideo.is_porn)
  return is_porn_;
}
inline void IndexedVideo::set_is_porn(bool value) {
  set_has_is_porn();
  is_porn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.IndexedVideo.is_porn)
}

// optional int32 preview_mb_num = 4;
inline bool IndexedVideo::has_preview_mb_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndexedVideo::set_has_preview_mb_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndexedVideo::clear_has_preview_mb_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndexedVideo::clear_preview_mb_num() {
  preview_mb_num_ = 0;
  clear_has_preview_mb_num();
}
inline ::google::protobuf::int32 IndexedVideo::preview_mb_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.IndexedVideo.preview_mb_num)
  return preview_mb_num_;
}
inline void IndexedVideo::set_preview_mb_num(::google::protobuf::int32 value) {
  set_has_preview_mb_num();
  preview_mb_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.IndexedVideo.preview_mb_num)
}

// -------------------------------------------------------------------

// FastVideoImportDoc

// required .ru.mail.go.webbase.blobs.VideoImportDoc video_import_doc = 1;
inline bool FastVideoImportDoc::has_video_import_doc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FastVideoImportDoc::set_has_video_import_doc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FastVideoImportDoc::clear_has_video_import_doc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FastVideoImportDoc::clear_video_import_doc() {
  if (video_import_doc_ != NULL) video_import_doc_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_import_doc();
}
inline const ::ru::mail::go::webbase::blobs::VideoImportDoc& FastVideoImportDoc::video_import_doc() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_import_doc_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FastVideoImportDoc.video_import_doc)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* FastVideoImportDoc::mutable_video_import_doc() {
  set_has_video_import_doc();
  if (video_import_doc_ == NULL) {
    video_import_doc_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FastVideoImportDoc.video_import_doc)
  return video_import_doc_;
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* FastVideoImportDoc::release_video_import_doc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FastVideoImportDoc.video_import_doc)
  clear_has_video_import_doc();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_import_doc_;
  video_import_doc_ = NULL;
  return temp;
}
inline void FastVideoImportDoc::set_allocated_video_import_doc(::ru::mail::go::webbase::blobs::VideoImportDoc* video_import_doc) {
  delete video_import_doc_;
  video_import_doc_ = video_import_doc;
  if (video_import_doc) {
    set_has_video_import_doc();
  } else {
    clear_has_video_import_doc();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FastVideoImportDoc.video_import_doc)
}

// -------------------------------------------------------------------

// MovieMetadata

// required string title = 1;
inline bool MovieMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MovieMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MovieMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MovieMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& MovieMetadata::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.title)
  return title_.GetNoArena();
}
inline void MovieMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.title)
}
#if LANG_CXX11
inline void MovieMetadata::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.title)
}
#endif
inline void MovieMetadata::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.title)
}
inline void MovieMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.title)
}
inline ::std::string* MovieMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieMetadata::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.title)
}

// optional string original_title = 2;
inline bool MovieMetadata::has_original_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MovieMetadata::set_has_original_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MovieMetadata::clear_has_original_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MovieMetadata::clear_original_title() {
  original_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_title();
}
inline const ::std::string& MovieMetadata::original_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
  return original_title_.GetNoArena();
}
inline void MovieMetadata::set_original_title(const ::std::string& value) {
  set_has_original_title();
  original_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}
#if LANG_CXX11
inline void MovieMetadata::set_original_title(::std::string&& value) {
  set_has_original_title();
  original_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}
#endif
inline void MovieMetadata::set_original_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_title();
  original_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}
inline void MovieMetadata::set_original_title(const char* value, size_t size) {
  set_has_original_title();
  original_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}
inline ::std::string* MovieMetadata::mutable_original_title() {
  set_has_original_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
  return original_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieMetadata::release_original_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
  clear_has_original_title();
  return original_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieMetadata::set_allocated_original_title(::std::string* original_title) {
  if (original_title != NULL) {
    set_has_original_title();
  } else {
    clear_has_original_title();
  }
  original_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.original_title)
}

// optional uint32 duration = 3;
inline bool MovieMetadata::has_duration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MovieMetadata::set_has_duration() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MovieMetadata::clear_has_duration() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MovieMetadata::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 MovieMetadata::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.duration)
  return duration_;
}
inline void MovieMetadata::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.duration)
}

// optional .ru.mail.go.webbase.blobs.MovieMetadata.MovieStatus status = 4;
inline bool MovieMetadata::has_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MovieMetadata::set_has_status() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MovieMetadata::clear_has_status() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MovieMetadata::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus MovieMetadata::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.status)
  return static_cast< ::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus >(status_);
}
inline void MovieMetadata::set_status(::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus value) {
  assert(::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.status)
}

// optional uint32 year = 5;
inline bool MovieMetadata::has_year() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MovieMetadata::set_has_year() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MovieMetadata::clear_has_year() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MovieMetadata::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 MovieMetadata::year() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.year)
  return year_;
}
inline void MovieMetadata::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.year)
}

// optional string country = 6;
inline bool MovieMetadata::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MovieMetadata::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MovieMetadata::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MovieMetadata::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& MovieMetadata::country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.country)
  return country_.GetNoArena();
}
inline void MovieMetadata::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.country)
}
#if LANG_CXX11
inline void MovieMetadata::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.country)
}
#endif
inline void MovieMetadata::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.country)
}
inline void MovieMetadata::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.country)
}
inline ::std::string* MovieMetadata::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieMetadata::release_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieMetadata::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.country)
}

// optional string director = 7;
inline bool MovieMetadata::has_director() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MovieMetadata::set_has_director() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MovieMetadata::clear_has_director() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MovieMetadata::clear_director() {
  director_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_director();
}
inline const ::std::string& MovieMetadata::director() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.director)
  return director_.GetNoArena();
}
inline void MovieMetadata::set_director(const ::std::string& value) {
  set_has_director();
  director_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.director)
}
#if LANG_CXX11
inline void MovieMetadata::set_director(::std::string&& value) {
  set_has_director();
  director_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.director)
}
#endif
inline void MovieMetadata::set_director(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_director();
  director_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.director)
}
inline void MovieMetadata::set_director(const char* value, size_t size) {
  set_has_director();
  director_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.director)
}
inline ::std::string* MovieMetadata::mutable_director() {
  set_has_director();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.director)
  return director_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieMetadata::release_director() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.director)
  clear_has_director();
  return director_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieMetadata::set_allocated_director(::std::string* director) {
  if (director != NULL) {
    set_has_director();
  } else {
    clear_has_director();
  }
  director_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), director);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.director)
}

// optional string producer = 8;
inline bool MovieMetadata::has_producer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MovieMetadata::set_has_producer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MovieMetadata::clear_has_producer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MovieMetadata::clear_producer() {
  producer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_producer();
}
inline const ::std::string& MovieMetadata::producer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.producer)
  return producer_.GetNoArena();
}
inline void MovieMetadata::set_producer(const ::std::string& value) {
  set_has_producer();
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}
#if LANG_CXX11
inline void MovieMetadata::set_producer(::std::string&& value) {
  set_has_producer();
  producer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}
#endif
inline void MovieMetadata::set_producer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_producer();
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}
inline void MovieMetadata::set_producer(const char* value, size_t size) {
  set_has_producer();
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}
inline ::std::string* MovieMetadata::mutable_producer() {
  set_has_producer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.producer)
  return producer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieMetadata::release_producer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.producer)
  clear_has_producer();
  return producer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieMetadata::set_allocated_producer(::std::string* producer) {
  if (producer != NULL) {
    set_has_producer();
  } else {
    clear_has_producer();
  }
  producer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.producer)
}

// optional string actors = 9;
inline bool MovieMetadata::has_actors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MovieMetadata::set_has_actors() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MovieMetadata::clear_has_actors() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MovieMetadata::clear_actors() {
  actors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_actors();
}
inline const ::std::string& MovieMetadata::actors() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.actors)
  return actors_.GetNoArena();
}
inline void MovieMetadata::set_actors(const ::std::string& value) {
  set_has_actors();
  actors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}
#if LANG_CXX11
inline void MovieMetadata::set_actors(::std::string&& value) {
  set_has_actors();
  actors_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}
#endif
inline void MovieMetadata::set_actors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_actors();
  actors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}
inline void MovieMetadata::set_actors(const char* value, size_t size) {
  set_has_actors();
  actors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}
inline ::std::string* MovieMetadata::mutable_actors() {
  set_has_actors();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.actors)
  return actors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieMetadata::release_actors() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.actors)
  clear_has_actors();
  return actors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieMetadata::set_allocated_actors(::std::string* actors) {
  if (actors != NULL) {
    set_has_actors();
  } else {
    clear_has_actors();
  }
  actors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actors);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.actors)
}

// optional string genre = 10;
inline bool MovieMetadata::has_genre() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MovieMetadata::set_has_genre() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MovieMetadata::clear_has_genre() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MovieMetadata::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_genre();
}
inline const ::std::string& MovieMetadata::genre() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.genre)
  return genre_.GetNoArena();
}
inline void MovieMetadata::set_genre(const ::std::string& value) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}
#if LANG_CXX11
inline void MovieMetadata::set_genre(::std::string&& value) {
  set_has_genre();
  genre_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}
#endif
inline void MovieMetadata::set_genre(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}
inline void MovieMetadata::set_genre(const char* value, size_t size) {
  set_has_genre();
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}
inline ::std::string* MovieMetadata::mutable_genre() {
  set_has_genre();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieMetadata::release_genre() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.genre)
  clear_has_genre();
  return genre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieMetadata::set_allocated_genre(::std::string* genre) {
  if (genre != NULL) {
    set_has_genre();
  } else {
    clear_has_genre();
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.genre)
}

// optional string description = 11;
inline bool MovieMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MovieMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MovieMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MovieMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& MovieMetadata::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.description)
  return description_.GetNoArena();
}
inline void MovieMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.description)
}
#if LANG_CXX11
inline void MovieMetadata::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MovieMetadata.description)
}
#endif
inline void MovieMetadata::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MovieMetadata.description)
}
inline void MovieMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MovieMetadata.description)
}
inline ::std::string* MovieMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MovieMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieMetadata::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MovieMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MovieMetadata.description)
}

// optional float imdb_rating = 12;
inline bool MovieMetadata::has_imdb_rating() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MovieMetadata::set_has_imdb_rating() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MovieMetadata::clear_has_imdb_rating() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MovieMetadata::clear_imdb_rating() {
  imdb_rating_ = 0;
  clear_has_imdb_rating();
}
inline float MovieMetadata::imdb_rating() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.imdb_rating)
  return imdb_rating_;
}
inline void MovieMetadata::set_imdb_rating(float value) {
  set_has_imdb_rating();
  imdb_rating_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.imdb_rating)
}

// optional int64 release_date = 13;
inline bool MovieMetadata::has_release_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MovieMetadata::set_has_release_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MovieMetadata::clear_has_release_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MovieMetadata::clear_release_date() {
  release_date_ = GOOGLE_LONGLONG(0);
  clear_has_release_date();
}
inline ::google::protobuf::int64 MovieMetadata::release_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.release_date)
  return release_date_;
}
inline void MovieMetadata::set_release_date(::google::protobuf::int64 value) {
  set_has_release_date();
  release_date_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.release_date)
}

// optional int64 premiere_ru = 14;
inline bool MovieMetadata::has_premiere_ru() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MovieMetadata::set_has_premiere_ru() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MovieMetadata::clear_has_premiere_ru() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MovieMetadata::clear_premiere_ru() {
  premiere_ru_ = GOOGLE_LONGLONG(0);
  clear_has_premiere_ru();
}
inline ::google::protobuf::int64 MovieMetadata::premiere_ru() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.premiere_ru)
  return premiere_ru_;
}
inline void MovieMetadata::set_premiere_ru(::google::protobuf::int64 value) {
  set_has_premiere_ru();
  premiere_ru_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.premiere_ru)
}

// optional int64 afisha_id = 15;
inline bool MovieMetadata::has_afisha_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MovieMetadata::set_has_afisha_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MovieMetadata::clear_has_afisha_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MovieMetadata::clear_afisha_id() {
  afisha_id_ = GOOGLE_LONGLONG(0);
  clear_has_afisha_id();
}
inline ::google::protobuf::int64 MovieMetadata::afisha_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MovieMetadata.afisha_id)
  return afisha_id_;
}
inline void MovieMetadata::set_afisha_id(::google::protobuf::int64 value) {
  set_has_afisha_id();
  afisha_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MovieMetadata.afisha_id)
}

// -------------------------------------------------------------------

// MoviesClassificationDoc

// required .ru.mail.go.webbase.blobs.MovieMetadata metadata = 1;
inline bool MoviesClassificationDoc::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoviesClassificationDoc::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoviesClassificationDoc::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoviesClassificationDoc::clear_metadata() {
  if (metadata_ != NULL) metadata_->::ru::mail::go::webbase::blobs::MovieMetadata::Clear();
  clear_has_metadata();
}
inline const ::ru::mail::go::webbase::blobs::MovieMetadata& MoviesClassificationDoc::metadata() const {
  const ::ru::mail::go::webbase::blobs::MovieMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MoviesClassificationDoc.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MovieMetadata*>(
      &::ru::mail::go::webbase::blobs::_MovieMetadata_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::MovieMetadata* MoviesClassificationDoc::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) {
    metadata_ = new ::ru::mail::go::webbase::blobs::MovieMetadata;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MoviesClassificationDoc.metadata)
  return metadata_;
}
inline ::ru::mail::go::webbase::blobs::MovieMetadata* MoviesClassificationDoc::release_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MoviesClassificationDoc.metadata)
  clear_has_metadata();
  ::ru::mail::go::webbase::blobs::MovieMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void MoviesClassificationDoc::set_allocated_metadata(::ru::mail::go::webbase::blobs::MovieMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MoviesClassificationDoc.metadata)
}

// repeated string url = 2;
inline int MoviesClassificationDoc::url_size() const {
  return url_.size();
}
inline void MoviesClassificationDoc::clear_url() {
  url_.Clear();
}
inline const ::std::string& MoviesClassificationDoc::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return url_.Get(index);
}
inline ::std::string* MoviesClassificationDoc::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return url_.Mutable(index);
}
inline void MoviesClassificationDoc::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MoviesClassificationDoc::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MoviesClassificationDoc::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
inline void MoviesClassificationDoc::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
inline ::std::string* MoviesClassificationDoc::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return url_.Add();
}
inline void MoviesClassificationDoc::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
#if LANG_CXX11
inline void MoviesClassificationDoc::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
#endif
inline void MoviesClassificationDoc::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
inline void MoviesClassificationDoc::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MoviesClassificationDoc::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MoviesClassificationDoc::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.MoviesClassificationDoc.url)
  return &url_;
}

// -------------------------------------------------------------------

// YouTubeRecommendations

// repeated string recommendations_ids = 1;
inline int YouTubeRecommendations::recommendations_ids_size() const {
  return recommendations_ids_.size();
}
inline void YouTubeRecommendations::clear_recommendations_ids() {
  recommendations_ids_.Clear();
}
inline const ::std::string& YouTubeRecommendations::recommendations_ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return recommendations_ids_.Get(index);
}
inline ::std::string* YouTubeRecommendations::mutable_recommendations_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return recommendations_ids_.Mutable(index);
}
inline void YouTubeRecommendations::set_recommendations_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  recommendations_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void YouTubeRecommendations::set_recommendations_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  recommendations_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void YouTubeRecommendations::set_recommendations_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  recommendations_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
inline void YouTubeRecommendations::set_recommendations_ids(int index, const char* value, size_t size) {
  recommendations_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
inline ::std::string* YouTubeRecommendations::add_recommendations_ids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return recommendations_ids_.Add();
}
inline void YouTubeRecommendations::add_recommendations_ids(const ::std::string& value) {
  recommendations_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
#if LANG_CXX11
inline void YouTubeRecommendations::add_recommendations_ids(::std::string&& value) {
  recommendations_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
#endif
inline void YouTubeRecommendations::add_recommendations_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  recommendations_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
inline void YouTubeRecommendations::add_recommendations_ids(const char* value, size_t size) {
  recommendations_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
YouTubeRecommendations::recommendations_ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return recommendations_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
YouTubeRecommendations::mutable_recommendations_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.YouTubeRecommendations.recommendations_ids)
  return &recommendations_ids_;
}

// -------------------------------------------------------------------

// VideoMarkupHtmlInput

// required string url = 1;
inline bool VideoMarkupHtmlInput::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoMarkupHtmlInput::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoMarkupHtmlInput::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoMarkupHtmlInput::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& VideoMarkupHtmlInput::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
  return url_.GetNoArena();
}
inline void VideoMarkupHtmlInput::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}
#if LANG_CXX11
inline void VideoMarkupHtmlInput::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}
#endif
inline void VideoMarkupHtmlInput::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}
inline void VideoMarkupHtmlInput::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}
inline ::std::string* VideoMarkupHtmlInput::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupHtmlInput::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupHtmlInput::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.url)
}

// required bytes content = 2;
inline bool VideoMarkupHtmlInput::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoMarkupHtmlInput::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoMarkupHtmlInput::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoMarkupHtmlInput::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& VideoMarkupHtmlInput::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
  return content_.GetNoArena();
}
inline void VideoMarkupHtmlInput::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}
#if LANG_CXX11
inline void VideoMarkupHtmlInput::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}
#endif
inline void VideoMarkupHtmlInput::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}
inline void VideoMarkupHtmlInput::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}
inline ::std::string* VideoMarkupHtmlInput::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupHtmlInput::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupHtmlInput::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.content)
}

// required .ru.mail.go.webbase.blobs.Encoding enc = 3;
inline bool VideoMarkupHtmlInput::has_enc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoMarkupHtmlInput::set_has_enc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoMarkupHtmlInput::clear_has_enc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoMarkupHtmlInput::clear_enc() {
  enc_ = 0;
  clear_has_enc();
}
inline ::ru::mail::go::webbase::blobs::Encoding VideoMarkupHtmlInput::enc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.enc)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(enc_);
}
inline void VideoMarkupHtmlInput::set_enc(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_enc();
  enc_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupHtmlInput.enc)
}

// -------------------------------------------------------------------

// VideoMarkupDescription

// required bool video_markup_detected = 1 [default = false];
inline bool VideoMarkupDescription::has_video_markup_detected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoMarkupDescription::set_has_video_markup_detected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoMarkupDescription::clear_has_video_markup_detected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoMarkupDescription::clear_video_markup_detected() {
  video_markup_detected_ = false;
  clear_has_video_markup_detected();
}
inline bool VideoMarkupDescription::video_markup_detected() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.video_markup_detected)
  return video_markup_detected_;
}
inline void VideoMarkupDescription::set_video_markup_detected(bool value) {
  set_has_video_markup_detected();
  video_markup_detected_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupDescription.video_markup_detected)
}

// optional .ru.mail.go.webbase.blobs.VideoMarkupOpenGraph open_graph = 2;
inline bool VideoMarkupDescription::has_open_graph() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoMarkupDescription::set_has_open_graph() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoMarkupDescription::clear_has_open_graph() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoMarkupDescription::clear_open_graph() {
  if (open_graph_ != NULL) open_graph_->::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph::Clear();
  clear_has_open_graph();
}
inline const ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph& VideoMarkupDescription::open_graph() const {
  const ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* p = open_graph_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.open_graph)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph*>(
      &::ru::mail::go::webbase::blobs::_VideoMarkupOpenGraph_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* VideoMarkupDescription::mutable_open_graph() {
  set_has_open_graph();
  if (open_graph_ == NULL) {
    open_graph_ = new ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupDescription.open_graph)
  return open_graph_;
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* VideoMarkupDescription::release_open_graph() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupDescription.open_graph)
  clear_has_open_graph();
  ::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* temp = open_graph_;
  open_graph_ = NULL;
  return temp;
}
inline void VideoMarkupDescription::set_allocated_open_graph(::ru::mail::go::webbase::blobs::VideoMarkupOpenGraph* open_graph) {
  delete open_graph_;
  open_graph_ = open_graph;
  if (open_graph) {
    set_has_open_graph();
  } else {
    clear_has_open_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupDescription.open_graph)
}

// repeated .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg schema_org = 3;
inline int VideoMarkupDescription::schema_org_size() const {
  return schema_org_.size();
}
inline void VideoMarkupDescription::clear_schema_org() {
  schema_org_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg& VideoMarkupDescription::schema_org(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return schema_org_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg* VideoMarkupDescription::mutable_schema_org(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return schema_org_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg* VideoMarkupDescription::add_schema_org() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return schema_org_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg >*
VideoMarkupDescription::mutable_schema_org() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return &schema_org_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg >&
VideoMarkupDescription::schema_org() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoMarkupDescription.schema_org)
  return schema_org_;
}

// optional .ru.mail.go.webbase.blobs.VideoMarkupTwitterCard twitter_card = 4;
inline bool VideoMarkupDescription::has_twitter_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoMarkupDescription::set_has_twitter_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoMarkupDescription::clear_has_twitter_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoMarkupDescription::clear_twitter_card() {
  if (twitter_card_ != NULL) twitter_card_->::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard::Clear();
  clear_has_twitter_card();
}
inline const ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard& VideoMarkupDescription::twitter_card() const {
  const ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* p = twitter_card_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.twitter_card)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard*>(
      &::ru::mail::go::webbase::blobs::_VideoMarkupTwitterCard_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* VideoMarkupDescription::mutable_twitter_card() {
  set_has_twitter_card();
  if (twitter_card_ == NULL) {
    twitter_card_ = new ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupDescription.twitter_card)
  return twitter_card_;
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* VideoMarkupDescription::release_twitter_card() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupDescription.twitter_card)
  clear_has_twitter_card();
  ::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* temp = twitter_card_;
  twitter_card_ = NULL;
  return temp;
}
inline void VideoMarkupDescription::set_allocated_twitter_card(::ru::mail::go::webbase::blobs::VideoMarkupTwitterCard* twitter_card) {
  delete twitter_card_;
  twitter_card_ = twitter_card;
  if (twitter_card) {
    set_has_twitter_card();
  } else {
    clear_has_twitter_card();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupDescription.twitter_card)
}

// repeated .ru.mail.go.webbase.blobs.VideoMarkupHtml5Video html5_video = 5;
inline int VideoMarkupDescription::html5_video_size() const {
  return html5_video_.size();
}
inline void VideoMarkupDescription::clear_html5_video() {
  html5_video_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video& VideoMarkupDescription::html5_video(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return html5_video_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video* VideoMarkupDescription::mutable_html5_video(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return html5_video_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video* VideoMarkupDescription::add_html5_video() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return html5_video_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video >*
VideoMarkupDescription::mutable_html5_video() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return &html5_video_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoMarkupHtml5Video >&
VideoMarkupDescription::html5_video() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoMarkupDescription.html5_video)
  return html5_video_;
}

// required uint32 number_of_unparsed_open_graph_videos = 6 [default = 0];
inline bool VideoMarkupDescription::has_number_of_unparsed_open_graph_videos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoMarkupDescription::set_has_number_of_unparsed_open_graph_videos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoMarkupDescription::clear_has_number_of_unparsed_open_graph_videos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoMarkupDescription::clear_number_of_unparsed_open_graph_videos() {
  number_of_unparsed_open_graph_videos_ = 0u;
  clear_has_number_of_unparsed_open_graph_videos();
}
inline ::google::protobuf::uint32 VideoMarkupDescription::number_of_unparsed_open_graph_videos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.number_of_unparsed_open_graph_videos)
  return number_of_unparsed_open_graph_videos_;
}
inline void VideoMarkupDescription::set_number_of_unparsed_open_graph_videos(::google::protobuf::uint32 value) {
  set_has_number_of_unparsed_open_graph_videos();
  number_of_unparsed_open_graph_videos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupDescription.number_of_unparsed_open_graph_videos)
}

// required uint32 number_of_unparsed_schema_org_videos = 7 [default = 0];
inline bool VideoMarkupDescription::has_number_of_unparsed_schema_org_videos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoMarkupDescription::set_has_number_of_unparsed_schema_org_videos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoMarkupDescription::clear_has_number_of_unparsed_schema_org_videos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoMarkupDescription::clear_number_of_unparsed_schema_org_videos() {
  number_of_unparsed_schema_org_videos_ = 0u;
  clear_has_number_of_unparsed_schema_org_videos();
}
inline ::google::protobuf::uint32 VideoMarkupDescription::number_of_unparsed_schema_org_videos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupDescription.number_of_unparsed_schema_org_videos)
  return number_of_unparsed_schema_org_videos_;
}
inline void VideoMarkupDescription::set_number_of_unparsed_schema_org_videos(::google::protobuf::uint32 value) {
  set_has_number_of_unparsed_schema_org_videos();
  number_of_unparsed_schema_org_videos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupDescription.number_of_unparsed_schema_org_videos)
}

// -------------------------------------------------------------------

// VideoMarkupOpenGraph

// required string title = 1;
inline bool VideoMarkupOpenGraph::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoMarkupOpenGraph::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoMarkupOpenGraph::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VideoMarkupOpenGraph::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
  return title_.GetNoArena();
}
inline void VideoMarkupOpenGraph::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}
#if LANG_CXX11
inline void VideoMarkupOpenGraph::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}
#endif
inline void VideoMarkupOpenGraph::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}
inline void VideoMarkupOpenGraph::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}
inline ::std::string* VideoMarkupOpenGraph::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupOpenGraph::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupOpenGraph::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.title)
}

// required string page_url = 2;
inline bool VideoMarkupOpenGraph::has_page_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_page_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoMarkupOpenGraph::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoMarkupOpenGraph::clear_page_url() {
  page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_url();
}
inline const ::std::string& VideoMarkupOpenGraph::page_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
  return page_url_.GetNoArena();
}
inline void VideoMarkupOpenGraph::set_page_url(const ::std::string& value) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}
#if LANG_CXX11
inline void VideoMarkupOpenGraph::set_page_url(::std::string&& value) {
  set_has_page_url();
  page_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}
#endif
inline void VideoMarkupOpenGraph::set_page_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}
inline void VideoMarkupOpenGraph::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}
inline ::std::string* VideoMarkupOpenGraph::mutable_page_url() {
  set_has_page_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
  return page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupOpenGraph::release_page_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
  clear_has_page_url();
  return page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupOpenGraph::set_allocated_page_url(::std::string* page_url) {
  if (page_url != NULL) {
    set_has_page_url();
  } else {
    clear_has_page_url();
  }
  page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.page_url)
}

// required string preview = 3;
inline bool VideoMarkupOpenGraph::has_preview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_preview() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoMarkupOpenGraph::clear_has_preview() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoMarkupOpenGraph::clear_preview() {
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview();
}
inline const ::std::string& VideoMarkupOpenGraph::preview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
  return preview_.GetNoArena();
}
inline void VideoMarkupOpenGraph::set_preview(const ::std::string& value) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}
#if LANG_CXX11
inline void VideoMarkupOpenGraph::set_preview(::std::string&& value) {
  set_has_preview();
  preview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}
#endif
inline void VideoMarkupOpenGraph::set_preview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}
inline void VideoMarkupOpenGraph::set_preview(const char* value, size_t size) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}
inline ::std::string* VideoMarkupOpenGraph::mutable_preview() {
  set_has_preview();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
  return preview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupOpenGraph::release_preview() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
  clear_has_preview();
  return preview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupOpenGraph::set_allocated_preview(::std::string* preview) {
  if (preview != NULL) {
    set_has_preview();
  } else {
    clear_has_preview();
  }
  preview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.preview)
}

// optional string video_player_url = 4;
inline bool VideoMarkupOpenGraph::has_video_player_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_video_player_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoMarkupOpenGraph::clear_has_video_player_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoMarkupOpenGraph::clear_video_player_url() {
  video_player_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_player_url();
}
inline const ::std::string& VideoMarkupOpenGraph::video_player_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
  return video_player_url_.GetNoArena();
}
inline void VideoMarkupOpenGraph::set_video_player_url(const ::std::string& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}
#if LANG_CXX11
inline void VideoMarkupOpenGraph::set_video_player_url(::std::string&& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}
#endif
inline void VideoMarkupOpenGraph::set_video_player_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}
inline void VideoMarkupOpenGraph::set_video_player_url(const char* value, size_t size) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}
inline ::std::string* VideoMarkupOpenGraph::mutable_video_player_url() {
  set_has_video_player_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
  return video_player_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupOpenGraph::release_video_player_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
  clear_has_video_player_url();
  return video_player_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupOpenGraph::set_allocated_video_player_url(::std::string* video_player_url) {
  if (video_player_url != NULL) {
    set_has_video_player_url();
  } else {
    clear_has_video_player_url();
  }
  video_player_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_player_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_player_url)
}

// optional string video_type = 5;
inline bool VideoMarkupOpenGraph::has_video_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_video_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoMarkupOpenGraph::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoMarkupOpenGraph::clear_video_type() {
  video_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_type();
}
inline const ::std::string& VideoMarkupOpenGraph::video_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
  return video_type_.GetNoArena();
}
inline void VideoMarkupOpenGraph::set_video_type(const ::std::string& value) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}
#if LANG_CXX11
inline void VideoMarkupOpenGraph::set_video_type(::std::string&& value) {
  set_has_video_type();
  video_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}
#endif
inline void VideoMarkupOpenGraph::set_video_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}
inline void VideoMarkupOpenGraph::set_video_type(const char* value, size_t size) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}
inline ::std::string* VideoMarkupOpenGraph::mutable_video_type() {
  set_has_video_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
  return video_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupOpenGraph::release_video_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
  clear_has_video_type();
  return video_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupOpenGraph::set_allocated_video_type(::std::string* video_type) {
  if (video_type != NULL) {
    set_has_video_type();
  } else {
    clear_has_video_type();
  }
  video_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.video_type)
}

// optional int32 width = 6;
inline bool VideoMarkupOpenGraph::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoMarkupOpenGraph::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoMarkupOpenGraph::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 VideoMarkupOpenGraph::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.width)
  return width_;
}
inline void VideoMarkupOpenGraph::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.width)
}

// optional int32 height = 7;
inline bool VideoMarkupOpenGraph::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoMarkupOpenGraph::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoMarkupOpenGraph::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 VideoMarkupOpenGraph::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.height)
  return height_;
}
inline void VideoMarkupOpenGraph::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.height)
}

// optional int32 duration = 8;
inline bool VideoMarkupOpenGraph::has_duration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_duration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VideoMarkupOpenGraph::clear_has_duration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VideoMarkupOpenGraph::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 VideoMarkupOpenGraph::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.duration)
  return duration_;
}
inline void VideoMarkupOpenGraph::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.duration)
}

// optional string description = 9;
inline bool VideoMarkupOpenGraph::has_description() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_description() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoMarkupOpenGraph::clear_has_description() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoMarkupOpenGraph::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& VideoMarkupOpenGraph::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
  return description_.GetNoArena();
}
inline void VideoMarkupOpenGraph::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}
#if LANG_CXX11
inline void VideoMarkupOpenGraph::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}
#endif
inline void VideoMarkupOpenGraph::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}
inline void VideoMarkupOpenGraph::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}
inline ::std::string* VideoMarkupOpenGraph::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupOpenGraph::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupOpenGraph::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.description)
}

// optional bool adult = 10;
inline bool VideoMarkupOpenGraph::has_adult() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_adult() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VideoMarkupOpenGraph::clear_has_adult() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VideoMarkupOpenGraph::clear_adult() {
  adult_ = false;
  clear_has_adult();
}
inline bool VideoMarkupOpenGraph::adult() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.adult)
  return adult_;
}
inline void VideoMarkupOpenGraph::set_adult(bool value) {
  set_has_adult();
  adult_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.adult)
}

// optional bool hd = 11;
inline bool VideoMarkupOpenGraph::has_hd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_hd() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VideoMarkupOpenGraph::clear_has_hd() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VideoMarkupOpenGraph::clear_hd() {
  hd_ = false;
  clear_has_hd();
}
inline bool VideoMarkupOpenGraph::hd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.hd)
  return hd_;
}
inline void VideoMarkupOpenGraph::set_hd(bool value) {
  set_has_hd();
  hd_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.hd)
}

// optional bool full_hd = 12;
inline bool VideoMarkupOpenGraph::has_full_hd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_full_hd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VideoMarkupOpenGraph::clear_has_full_hd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VideoMarkupOpenGraph::clear_full_hd() {
  full_hd_ = false;
  clear_has_full_hd();
}
inline bool VideoMarkupOpenGraph::full_hd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.full_hd)
  return full_hd_;
}
inline void VideoMarkupOpenGraph::set_full_hd(bool value) {
  set_has_full_hd();
  full_hd_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.full_hd)
}

// optional int32 season = 13;
inline bool VideoMarkupOpenGraph::has_season() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_season() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VideoMarkupOpenGraph::clear_has_season() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VideoMarkupOpenGraph::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 VideoMarkupOpenGraph::season() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.season)
  return season_;
}
inline void VideoMarkupOpenGraph::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.season)
}

// optional int32 episode = 14;
inline bool VideoMarkupOpenGraph::has_episode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_episode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VideoMarkupOpenGraph::clear_has_episode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VideoMarkupOpenGraph::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
inline ::google::protobuf::int32 VideoMarkupOpenGraph::episode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.episode)
  return episode_;
}
inline void VideoMarkupOpenGraph::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.episode)
}

// optional bool allow_embed = 15;
inline bool VideoMarkupOpenGraph::has_allow_embed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_allow_embed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VideoMarkupOpenGraph::clear_has_allow_embed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VideoMarkupOpenGraph::clear_allow_embed() {
  allow_embed_ = false;
  clear_has_allow_embed();
}
inline bool VideoMarkupOpenGraph::allow_embed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.allow_embed)
  return allow_embed_;
}
inline void VideoMarkupOpenGraph::set_allow_embed(bool value) {
  set_has_allow_embed();
  allow_embed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.allow_embed)
}

// optional string upload_date_iso8601 = 16;
inline bool VideoMarkupOpenGraph::has_upload_date_iso8601() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoMarkupOpenGraph::set_has_upload_date_iso8601() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoMarkupOpenGraph::clear_has_upload_date_iso8601() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoMarkupOpenGraph::clear_upload_date_iso8601() {
  upload_date_iso8601_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upload_date_iso8601();
}
inline const ::std::string& VideoMarkupOpenGraph::upload_date_iso8601() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
  return upload_date_iso8601_.GetNoArena();
}
inline void VideoMarkupOpenGraph::set_upload_date_iso8601(const ::std::string& value) {
  set_has_upload_date_iso8601();
  upload_date_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}
#if LANG_CXX11
inline void VideoMarkupOpenGraph::set_upload_date_iso8601(::std::string&& value) {
  set_has_upload_date_iso8601();
  upload_date_iso8601_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}
#endif
inline void VideoMarkupOpenGraph::set_upload_date_iso8601(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_upload_date_iso8601();
  upload_date_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}
inline void VideoMarkupOpenGraph::set_upload_date_iso8601(const char* value, size_t size) {
  set_has_upload_date_iso8601();
  upload_date_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}
inline ::std::string* VideoMarkupOpenGraph::mutable_upload_date_iso8601() {
  set_has_upload_date_iso8601();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
  return upload_date_iso8601_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupOpenGraph::release_upload_date_iso8601() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
  clear_has_upload_date_iso8601();
  return upload_date_iso8601_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupOpenGraph::set_allocated_upload_date_iso8601(::std::string* upload_date_iso8601) {
  if (upload_date_iso8601 != NULL) {
    set_has_upload_date_iso8601();
  } else {
    clear_has_upload_date_iso8601();
  }
  upload_date_iso8601_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_date_iso8601);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupOpenGraph.upload_date_iso8601)
}

// -------------------------------------------------------------------

// VideoMarkupSchemaOrg

// required .ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.DeclarationType declaration_type = 1;
inline bool VideoMarkupSchemaOrg::has_declaration_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_declaration_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VideoMarkupSchemaOrg::clear_has_declaration_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VideoMarkupSchemaOrg::clear_declaration_type() {
  declaration_type_ = 1;
  clear_has_declaration_type();
}
inline ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType VideoMarkupSchemaOrg::declaration_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.declaration_type)
  return static_cast< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType >(declaration_type_);
}
inline void VideoMarkupSchemaOrg::set_declaration_type(::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType value) {
  assert(::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType_IsValid(value));
  set_has_declaration_type();
  declaration_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.declaration_type)
}

// required string title = 2;
inline bool VideoMarkupSchemaOrg::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoMarkupSchemaOrg::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoMarkupSchemaOrg::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VideoMarkupSchemaOrg::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
  return title_.GetNoArena();
}
inline void VideoMarkupSchemaOrg::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}
#if LANG_CXX11
inline void VideoMarkupSchemaOrg::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}
#endif
inline void VideoMarkupSchemaOrg::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}
inline void VideoMarkupSchemaOrg::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}
inline ::std::string* VideoMarkupSchemaOrg::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupSchemaOrg::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupSchemaOrg::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.title)
}

// required string page_url = 3;
inline bool VideoMarkupSchemaOrg::has_page_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_page_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoMarkupSchemaOrg::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoMarkupSchemaOrg::clear_page_url() {
  page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_url();
}
inline const ::std::string& VideoMarkupSchemaOrg::page_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
  return page_url_.GetNoArena();
}
inline void VideoMarkupSchemaOrg::set_page_url(const ::std::string& value) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}
#if LANG_CXX11
inline void VideoMarkupSchemaOrg::set_page_url(::std::string&& value) {
  set_has_page_url();
  page_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}
#endif
inline void VideoMarkupSchemaOrg::set_page_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}
inline void VideoMarkupSchemaOrg::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}
inline ::std::string* VideoMarkupSchemaOrg::mutable_page_url() {
  set_has_page_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
  return page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupSchemaOrg::release_page_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
  clear_has_page_url();
  return page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupSchemaOrg::set_allocated_page_url(::std::string* page_url) {
  if (page_url != NULL) {
    set_has_page_url();
  } else {
    clear_has_page_url();
  }
  page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.page_url)
}

// required string preview = 4;
inline bool VideoMarkupSchemaOrg::has_preview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_preview() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoMarkupSchemaOrg::clear_has_preview() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoMarkupSchemaOrg::clear_preview() {
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview();
}
inline const ::std::string& VideoMarkupSchemaOrg::preview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
  return preview_.GetNoArena();
}
inline void VideoMarkupSchemaOrg::set_preview(const ::std::string& value) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}
#if LANG_CXX11
inline void VideoMarkupSchemaOrg::set_preview(::std::string&& value) {
  set_has_preview();
  preview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}
#endif
inline void VideoMarkupSchemaOrg::set_preview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}
inline void VideoMarkupSchemaOrg::set_preview(const char* value, size_t size) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}
inline ::std::string* VideoMarkupSchemaOrg::mutable_preview() {
  set_has_preview();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
  return preview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupSchemaOrg::release_preview() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
  clear_has_preview();
  return preview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupSchemaOrg::set_allocated_preview(::std::string* preview) {
  if (preview != NULL) {
    set_has_preview();
  } else {
    clear_has_preview();
  }
  preview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.preview)
}

// optional string video_player_url = 5;
inline bool VideoMarkupSchemaOrg::has_video_player_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_video_player_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoMarkupSchemaOrg::clear_has_video_player_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoMarkupSchemaOrg::clear_video_player_url() {
  video_player_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_player_url();
}
inline const ::std::string& VideoMarkupSchemaOrg::video_player_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
  return video_player_url_.GetNoArena();
}
inline void VideoMarkupSchemaOrg::set_video_player_url(const ::std::string& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}
#if LANG_CXX11
inline void VideoMarkupSchemaOrg::set_video_player_url(::std::string&& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}
#endif
inline void VideoMarkupSchemaOrg::set_video_player_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}
inline void VideoMarkupSchemaOrg::set_video_player_url(const char* value, size_t size) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}
inline ::std::string* VideoMarkupSchemaOrg::mutable_video_player_url() {
  set_has_video_player_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
  return video_player_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupSchemaOrg::release_video_player_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
  clear_has_video_player_url();
  return video_player_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupSchemaOrg::set_allocated_video_player_url(::std::string* video_player_url) {
  if (video_player_url != NULL) {
    set_has_video_player_url();
  } else {
    clear_has_video_player_url();
  }
  video_player_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_player_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_player_url)
}

// optional string video_type = 6;
inline bool VideoMarkupSchemaOrg::has_video_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_video_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoMarkupSchemaOrg::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoMarkupSchemaOrg::clear_video_type() {
  video_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_type();
}
inline const ::std::string& VideoMarkupSchemaOrg::video_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
  return video_type_.GetNoArena();
}
inline void VideoMarkupSchemaOrg::set_video_type(const ::std::string& value) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}
#if LANG_CXX11
inline void VideoMarkupSchemaOrg::set_video_type(::std::string&& value) {
  set_has_video_type();
  video_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}
#endif
inline void VideoMarkupSchemaOrg::set_video_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}
inline void VideoMarkupSchemaOrg::set_video_type(const char* value, size_t size) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}
inline ::std::string* VideoMarkupSchemaOrg::mutable_video_type() {
  set_has_video_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
  return video_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupSchemaOrg::release_video_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
  clear_has_video_type();
  return video_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupSchemaOrg::set_allocated_video_type(::std::string* video_type) {
  if (video_type != NULL) {
    set_has_video_type();
  } else {
    clear_has_video_type();
  }
  video_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.video_type)
}

// optional int32 width = 7;
inline bool VideoMarkupSchemaOrg::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoMarkupSchemaOrg::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoMarkupSchemaOrg::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 VideoMarkupSchemaOrg::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.width)
  return width_;
}
inline void VideoMarkupSchemaOrg::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.width)
}

// optional int32 height = 8;
inline bool VideoMarkupSchemaOrg::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoMarkupSchemaOrg::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoMarkupSchemaOrg::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 VideoMarkupSchemaOrg::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.height)
  return height_;
}
inline void VideoMarkupSchemaOrg::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.height)
}

// optional string duration_iso8601 = 9;
inline bool VideoMarkupSchemaOrg::has_duration_iso8601() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_duration_iso8601() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoMarkupSchemaOrg::clear_has_duration_iso8601() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoMarkupSchemaOrg::clear_duration_iso8601() {
  duration_iso8601_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_duration_iso8601();
}
inline const ::std::string& VideoMarkupSchemaOrg::duration_iso8601() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
  return duration_iso8601_.GetNoArena();
}
inline void VideoMarkupSchemaOrg::set_duration_iso8601(const ::std::string& value) {
  set_has_duration_iso8601();
  duration_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}
#if LANG_CXX11
inline void VideoMarkupSchemaOrg::set_duration_iso8601(::std::string&& value) {
  set_has_duration_iso8601();
  duration_iso8601_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}
#endif
inline void VideoMarkupSchemaOrg::set_duration_iso8601(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_duration_iso8601();
  duration_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}
inline void VideoMarkupSchemaOrg::set_duration_iso8601(const char* value, size_t size) {
  set_has_duration_iso8601();
  duration_iso8601_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}
inline ::std::string* VideoMarkupSchemaOrg::mutable_duration_iso8601() {
  set_has_duration_iso8601();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
  return duration_iso8601_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupSchemaOrg::release_duration_iso8601() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
  clear_has_duration_iso8601();
  return duration_iso8601_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupSchemaOrg::set_allocated_duration_iso8601(::std::string* duration_iso8601) {
  if (duration_iso8601 != NULL) {
    set_has_duration_iso8601();
  } else {
    clear_has_duration_iso8601();
  }
  duration_iso8601_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration_iso8601);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.duration_iso8601)
}

// optional string description = 10;
inline bool VideoMarkupSchemaOrg::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoMarkupSchemaOrg::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoMarkupSchemaOrg::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& VideoMarkupSchemaOrg::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
  return description_.GetNoArena();
}
inline void VideoMarkupSchemaOrg::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}
#if LANG_CXX11
inline void VideoMarkupSchemaOrg::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}
#endif
inline void VideoMarkupSchemaOrg::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}
inline void VideoMarkupSchemaOrg::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}
inline ::std::string* VideoMarkupSchemaOrg::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupSchemaOrg::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupSchemaOrg::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.description)
}

// optional bool is_family_friendly = 11;
inline bool VideoMarkupSchemaOrg::has_is_family_friendly() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_is_family_friendly() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VideoMarkupSchemaOrg::clear_has_is_family_friendly() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VideoMarkupSchemaOrg::clear_is_family_friendly() {
  is_family_friendly_ = false;
  clear_has_is_family_friendly();
}
inline bool VideoMarkupSchemaOrg::is_family_friendly() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.is_family_friendly)
  return is_family_friendly_;
}
inline void VideoMarkupSchemaOrg::set_is_family_friendly(bool value) {
  set_has_is_family_friendly();
  is_family_friendly_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.is_family_friendly)
}

// optional bool paid = 12;
inline bool VideoMarkupSchemaOrg::has_paid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VideoMarkupSchemaOrg::set_has_paid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VideoMarkupSchemaOrg::clear_has_paid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VideoMarkupSchemaOrg::clear_paid() {
  paid_ = false;
  clear_has_paid();
}
inline bool VideoMarkupSchemaOrg::paid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.paid)
  return paid_;
}
inline void VideoMarkupSchemaOrg::set_paid(bool value) {
  set_has_paid();
  paid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupSchemaOrg.paid)
}

// -------------------------------------------------------------------

// VideoMarkupTwitterCard

// required string card_type = 1;
inline bool VideoMarkupTwitterCard::has_card_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_card_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoMarkupTwitterCard::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoMarkupTwitterCard::clear_card_type() {
  card_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_type();
}
inline const ::std::string& VideoMarkupTwitterCard::card_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
  return card_type_.GetNoArena();
}
inline void VideoMarkupTwitterCard::set_card_type(const ::std::string& value) {
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}
#if LANG_CXX11
inline void VideoMarkupTwitterCard::set_card_type(::std::string&& value) {
  set_has_card_type();
  card_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}
#endif
inline void VideoMarkupTwitterCard::set_card_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}
inline void VideoMarkupTwitterCard::set_card_type(const char* value, size_t size) {
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}
inline ::std::string* VideoMarkupTwitterCard::mutable_card_type() {
  set_has_card_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
  return card_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupTwitterCard::release_card_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
  clear_has_card_type();
  return card_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupTwitterCard::set_allocated_card_type(::std::string* card_type) {
  if (card_type != NULL) {
    set_has_card_type();
  } else {
    clear_has_card_type();
  }
  card_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.card_type)
}

// required string title = 2;
inline bool VideoMarkupTwitterCard::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoMarkupTwitterCard::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoMarkupTwitterCard::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VideoMarkupTwitterCard::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
  return title_.GetNoArena();
}
inline void VideoMarkupTwitterCard::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}
#if LANG_CXX11
inline void VideoMarkupTwitterCard::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}
#endif
inline void VideoMarkupTwitterCard::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}
inline void VideoMarkupTwitterCard::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}
inline ::std::string* VideoMarkupTwitterCard::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupTwitterCard::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupTwitterCard::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.title)
}

// required string page_url = 3;
inline bool VideoMarkupTwitterCard::has_page_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_page_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoMarkupTwitterCard::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoMarkupTwitterCard::clear_page_url() {
  page_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_url();
}
inline const ::std::string& VideoMarkupTwitterCard::page_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
  return page_url_.GetNoArena();
}
inline void VideoMarkupTwitterCard::set_page_url(const ::std::string& value) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}
#if LANG_CXX11
inline void VideoMarkupTwitterCard::set_page_url(::std::string&& value) {
  set_has_page_url();
  page_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}
#endif
inline void VideoMarkupTwitterCard::set_page_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}
inline void VideoMarkupTwitterCard::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  page_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}
inline ::std::string* VideoMarkupTwitterCard::mutable_page_url() {
  set_has_page_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
  return page_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupTwitterCard::release_page_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
  clear_has_page_url();
  return page_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupTwitterCard::set_allocated_page_url(::std::string* page_url) {
  if (page_url != NULL) {
    set_has_page_url();
  } else {
    clear_has_page_url();
  }
  page_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.page_url)
}

// required string preview = 4;
inline bool VideoMarkupTwitterCard::has_preview() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_preview() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoMarkupTwitterCard::clear_has_preview() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoMarkupTwitterCard::clear_preview() {
  preview_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview();
}
inline const ::std::string& VideoMarkupTwitterCard::preview() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
  return preview_.GetNoArena();
}
inline void VideoMarkupTwitterCard::set_preview(const ::std::string& value) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}
#if LANG_CXX11
inline void VideoMarkupTwitterCard::set_preview(::std::string&& value) {
  set_has_preview();
  preview_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}
#endif
inline void VideoMarkupTwitterCard::set_preview(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}
inline void VideoMarkupTwitterCard::set_preview(const char* value, size_t size) {
  set_has_preview();
  preview_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}
inline ::std::string* VideoMarkupTwitterCard::mutable_preview() {
  set_has_preview();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
  return preview_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupTwitterCard::release_preview() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
  clear_has_preview();
  return preview_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupTwitterCard::set_allocated_preview(::std::string* preview) {
  if (preview != NULL) {
    set_has_preview();
  } else {
    clear_has_preview();
  }
  preview_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.preview)
}

// required string video_type = 5;
inline bool VideoMarkupTwitterCard::has_video_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_video_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoMarkupTwitterCard::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoMarkupTwitterCard::clear_video_type() {
  video_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_type();
}
inline const ::std::string& VideoMarkupTwitterCard::video_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
  return video_type_.GetNoArena();
}
inline void VideoMarkupTwitterCard::set_video_type(const ::std::string& value) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}
#if LANG_CXX11
inline void VideoMarkupTwitterCard::set_video_type(::std::string&& value) {
  set_has_video_type();
  video_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}
#endif
inline void VideoMarkupTwitterCard::set_video_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}
inline void VideoMarkupTwitterCard::set_video_type(const char* value, size_t size) {
  set_has_video_type();
  video_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}
inline ::std::string* VideoMarkupTwitterCard::mutable_video_type() {
  set_has_video_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
  return video_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupTwitterCard::release_video_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
  clear_has_video_type();
  return video_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupTwitterCard::set_allocated_video_type(::std::string* video_type) {
  if (video_type != NULL) {
    set_has_video_type();
  } else {
    clear_has_video_type();
  }
  video_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_type)
}

// optional string video_player_url = 6;
inline bool VideoMarkupTwitterCard::has_video_player_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_video_player_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoMarkupTwitterCard::clear_has_video_player_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoMarkupTwitterCard::clear_video_player_url() {
  video_player_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_player_url();
}
inline const ::std::string& VideoMarkupTwitterCard::video_player_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
  return video_player_url_.GetNoArena();
}
inline void VideoMarkupTwitterCard::set_video_player_url(const ::std::string& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}
#if LANG_CXX11
inline void VideoMarkupTwitterCard::set_video_player_url(::std::string&& value) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}
#endif
inline void VideoMarkupTwitterCard::set_video_player_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}
inline void VideoMarkupTwitterCard::set_video_player_url(const char* value, size_t size) {
  set_has_video_player_url();
  video_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}
inline ::std::string* VideoMarkupTwitterCard::mutable_video_player_url() {
  set_has_video_player_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
  return video_player_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupTwitterCard::release_video_player_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
  clear_has_video_player_url();
  return video_player_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupTwitterCard::set_allocated_video_player_url(::std::string* video_player_url) {
  if (video_player_url != NULL) {
    set_has_video_player_url();
  } else {
    clear_has_video_player_url();
  }
  video_player_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_player_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.video_player_url)
}

// optional string stream_player_url = 7;
inline bool VideoMarkupTwitterCard::has_stream_player_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_stream_player_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoMarkupTwitterCard::clear_has_stream_player_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoMarkupTwitterCard::clear_stream_player_url() {
  stream_player_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_player_url();
}
inline const ::std::string& VideoMarkupTwitterCard::stream_player_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
  return stream_player_url_.GetNoArena();
}
inline void VideoMarkupTwitterCard::set_stream_player_url(const ::std::string& value) {
  set_has_stream_player_url();
  stream_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}
#if LANG_CXX11
inline void VideoMarkupTwitterCard::set_stream_player_url(::std::string&& value) {
  set_has_stream_player_url();
  stream_player_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}
#endif
inline void VideoMarkupTwitterCard::set_stream_player_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stream_player_url();
  stream_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}
inline void VideoMarkupTwitterCard::set_stream_player_url(const char* value, size_t size) {
  set_has_stream_player_url();
  stream_player_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}
inline ::std::string* VideoMarkupTwitterCard::mutable_stream_player_url() {
  set_has_stream_player_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
  return stream_player_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupTwitterCard::release_stream_player_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
  clear_has_stream_player_url();
  return stream_player_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupTwitterCard::set_allocated_stream_player_url(::std::string* stream_player_url) {
  if (stream_player_url != NULL) {
    set_has_stream_player_url();
  } else {
    clear_has_stream_player_url();
  }
  stream_player_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_player_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.stream_player_url)
}

// optional int32 width = 8;
inline bool VideoMarkupTwitterCard::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoMarkupTwitterCard::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoMarkupTwitterCard::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 VideoMarkupTwitterCard::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.width)
  return width_;
}
inline void VideoMarkupTwitterCard::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.width)
}

// optional int32 height = 9;
inline bool VideoMarkupTwitterCard::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VideoMarkupTwitterCard::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VideoMarkupTwitterCard::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 VideoMarkupTwitterCard::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.height)
  return height_;
}
inline void VideoMarkupTwitterCard::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.height)
}

// optional int32 duration = 10;
inline bool VideoMarkupTwitterCard::has_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_duration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VideoMarkupTwitterCard::clear_has_duration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VideoMarkupTwitterCard::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 VideoMarkupTwitterCard::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.duration)
  return duration_;
}
inline void VideoMarkupTwitterCard::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.duration)
}

// optional string description = 11;
inline bool VideoMarkupTwitterCard::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoMarkupTwitterCard::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoMarkupTwitterCard::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoMarkupTwitterCard::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& VideoMarkupTwitterCard::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
  return description_.GetNoArena();
}
inline void VideoMarkupTwitterCard::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}
#if LANG_CXX11
inline void VideoMarkupTwitterCard::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}
#endif
inline void VideoMarkupTwitterCard::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}
inline void VideoMarkupTwitterCard::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}
inline ::std::string* VideoMarkupTwitterCard::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMarkupTwitterCard::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMarkupTwitterCard::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoMarkupTwitterCard.description)
}

// -------------------------------------------------------------------

// VideoMarkupHtml5Video

// -------------------------------------------------------------------

// RecoBuildInfo

// optional string url_recommended = 1;
inline bool RecoBuildInfo::has_url_recommended() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoBuildInfo::set_has_url_recommended() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoBuildInfo::clear_has_url_recommended() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoBuildInfo::clear_url_recommended() {
  url_recommended_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_recommended();
}
inline const ::std::string& RecoBuildInfo::url_recommended() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
  return url_recommended_.GetNoArena();
}
inline void RecoBuildInfo::set_url_recommended(const ::std::string& value) {
  set_has_url_recommended();
  url_recommended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}
#if LANG_CXX11
inline void RecoBuildInfo::set_url_recommended(::std::string&& value) {
  set_has_url_recommended();
  url_recommended_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}
#endif
inline void RecoBuildInfo::set_url_recommended(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_recommended();
  url_recommended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}
inline void RecoBuildInfo::set_url_recommended(const char* value, size_t size) {
  set_has_url_recommended();
  url_recommended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}
inline ::std::string* RecoBuildInfo::mutable_url_recommended() {
  set_has_url_recommended();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
  return url_recommended_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecoBuildInfo::release_url_recommended() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
  clear_has_url_recommended();
  return url_recommended_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecoBuildInfo::set_allocated_url_recommended(::std::string* url_recommended) {
  if (url_recommended != NULL) {
    set_has_url_recommended();
  } else {
    clear_has_url_recommended();
  }
  url_recommended_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_recommended);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.RecoBuildInfo.url_recommended)
}

// optional string recommended_for = 2;
inline bool RecoBuildInfo::has_recommended_for() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoBuildInfo::set_has_recommended_for() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoBuildInfo::clear_has_recommended_for() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoBuildInfo::clear_recommended_for() {
  recommended_for_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recommended_for();
}
inline const ::std::string& RecoBuildInfo::recommended_for() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
  return recommended_for_.GetNoArena();
}
inline void RecoBuildInfo::set_recommended_for(const ::std::string& value) {
  set_has_recommended_for();
  recommended_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}
#if LANG_CXX11
inline void RecoBuildInfo::set_recommended_for(::std::string&& value) {
  set_has_recommended_for();
  recommended_for_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}
#endif
inline void RecoBuildInfo::set_recommended_for(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_recommended_for();
  recommended_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}
inline void RecoBuildInfo::set_recommended_for(const char* value, size_t size) {
  set_has_recommended_for();
  recommended_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}
inline ::std::string* RecoBuildInfo::mutable_recommended_for() {
  set_has_recommended_for();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
  return recommended_for_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecoBuildInfo::release_recommended_for() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
  clear_has_recommended_for();
  return recommended_for_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecoBuildInfo::set_allocated_recommended_for(::std::string* recommended_for) {
  if (recommended_for != NULL) {
    set_has_recommended_for();
  } else {
    clear_has_recommended_for();
  }
  recommended_for_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recommended_for);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.RecoBuildInfo.recommended_for)
}

// optional .ru.mail.go.webbase.blobs.IndexedVideo indexed_video = 3;
inline bool RecoBuildInfo::has_indexed_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecoBuildInfo::set_has_indexed_video() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecoBuildInfo::clear_has_indexed_video() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecoBuildInfo::clear_indexed_video() {
  if (indexed_video_ != NULL) indexed_video_->::ru::mail::go::webbase::blobs::IndexedVideo::Clear();
  clear_has_indexed_video();
}
inline const ::ru::mail::go::webbase::blobs::IndexedVideo& RecoBuildInfo::indexed_video() const {
  const ::ru::mail::go::webbase::blobs::IndexedVideo* p = indexed_video_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RecoBuildInfo.indexed_video)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::IndexedVideo*>(
      &::ru::mail::go::webbase::blobs::_IndexedVideo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::IndexedVideo* RecoBuildInfo::mutable_indexed_video() {
  set_has_indexed_video();
  if (indexed_video_ == NULL) {
    indexed_video_ = new ::ru::mail::go::webbase::blobs::IndexedVideo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RecoBuildInfo.indexed_video)
  return indexed_video_;
}
inline ::ru::mail::go::webbase::blobs::IndexedVideo* RecoBuildInfo::release_indexed_video() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.RecoBuildInfo.indexed_video)
  clear_has_indexed_video();
  ::ru::mail::go::webbase::blobs::IndexedVideo* temp = indexed_video_;
  indexed_video_ = NULL;
  return temp;
}
inline void RecoBuildInfo::set_allocated_indexed_video(::ru::mail::go::webbase::blobs::IndexedVideo* indexed_video) {
  delete indexed_video_;
  indexed_video_ = indexed_video;
  if (indexed_video) {
    set_has_indexed_video();
  } else {
    clear_has_indexed_video();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.RecoBuildInfo.indexed_video)
}

// -------------------------------------------------------------------

// VkVideoView

// optional int32 user_id = 1;
inline bool VkVideoView::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkVideoView::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkVideoView::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkVideoView::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 VkVideoView::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.user_id)
  return user_id_;
}
inline void VkVideoView::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.user_id)
}

// optional string referrer_url = 2;
inline bool VkVideoView::has_referrer_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkVideoView::set_has_referrer_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkVideoView::clear_has_referrer_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkVideoView::clear_referrer_url() {
  referrer_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referrer_url();
}
inline const ::std::string& VkVideoView::referrer_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
  return referrer_url_.GetNoArena();
}
inline void VkVideoView::set_referrer_url(const ::std::string& value) {
  set_has_referrer_url();
  referrer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}
#if LANG_CXX11
inline void VkVideoView::set_referrer_url(::std::string&& value) {
  set_has_referrer_url();
  referrer_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}
#endif
inline void VkVideoView::set_referrer_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referrer_url();
  referrer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}
inline void VkVideoView::set_referrer_url(const char* value, size_t size) {
  set_has_referrer_url();
  referrer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}
inline ::std::string* VkVideoView::mutable_referrer_url() {
  set_has_referrer_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
  return referrer_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkVideoView::release_referrer_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
  clear_has_referrer_url();
  return referrer_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkVideoView::set_allocated_referrer_url(::std::string* referrer_url) {
  if (referrer_url != NULL) {
    set_has_referrer_url();
  } else {
    clear_has_referrer_url();
  }
  referrer_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrer_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkVideoView.referrer_url)
}

// optional int64 start_time = 3;
inline bool VkVideoView::has_start_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkVideoView::set_has_start_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkVideoView::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkVideoView::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 VkVideoView::start_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.start_time)
  return start_time_;
}
inline void VkVideoView::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.start_time)
}

// optional float viewed_part = 4;
inline bool VkVideoView::has_viewed_part() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkVideoView::set_has_viewed_part() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkVideoView::clear_has_viewed_part() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkVideoView::clear_viewed_part() {
  viewed_part_ = 0;
  clear_has_viewed_part();
}
inline float VkVideoView::viewed_part() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.viewed_part)
  return viewed_part_;
}
inline void VkVideoView::set_viewed_part(float value) {
  set_has_viewed_part();
  viewed_part_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.viewed_part)
}

// optional bool our_recommendations = 5;
inline bool VkVideoView::has_our_recommendations() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VkVideoView::set_has_our_recommendations() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VkVideoView::clear_has_our_recommendations() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VkVideoView::clear_our_recommendations() {
  our_recommendations_ = false;
  clear_has_our_recommendations();
}
inline bool VkVideoView::our_recommendations() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.our_recommendations)
  return our_recommendations_;
}
inline void VkVideoView::set_our_recommendations(bool value) {
  set_has_our_recommendations();
  our_recommendations_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.our_recommendations)
}

// optional string video_url = 6;
inline bool VkVideoView::has_video_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkVideoView::set_has_video_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkVideoView::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkVideoView::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
inline const ::std::string& VkVideoView::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.video_url)
  return video_url_.GetNoArena();
}
inline void VkVideoView::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}
#if LANG_CXX11
inline void VkVideoView::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}
#endif
inline void VkVideoView::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}
inline void VkVideoView::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}
inline ::std::string* VkVideoView::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoView.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkVideoView::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkVideoView.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkVideoView::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkVideoView.video_url)
}

// optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 7;
inline bool VkVideoView::has_video_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkVideoView::set_has_video_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkVideoView::clear_has_video_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkVideoView::clear_video_metadata() {
  if (video_metadata_ != NULL) video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_metadata();
}
inline const ::ru::mail::go::webbase::blobs::VideoImportDoc& VkVideoView::video_metadata() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.video_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* VkVideoView::mutable_video_metadata() {
  set_has_video_metadata();
  if (video_metadata_ == NULL) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoView.video_metadata)
  return video_metadata_;
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* VkVideoView::release_video_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkVideoView.video_metadata)
  clear_has_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_metadata_;
  video_metadata_ = NULL;
  return temp;
}
inline void VkVideoView::set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata) {
  delete video_metadata_;
  video_metadata_ = video_metadata;
  if (video_metadata) {
    set_has_video_metadata();
  } else {
    clear_has_video_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkVideoView.video_metadata)
}

// optional int64 event_timestamp = 8;
inline bool VkVideoView::has_event_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkVideoView::set_has_event_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkVideoView::clear_has_event_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkVideoView::clear_event_timestamp() {
  event_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_event_timestamp();
}
inline ::google::protobuf::int64 VkVideoView::event_timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.event_timestamp)
  return event_timestamp_;
}
inline void VkVideoView::set_event_timestamp(::google::protobuf::int64 value) {
  set_has_event_timestamp();
  event_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.event_timestamp)
}

// optional string ref = 9;
inline bool VkVideoView::has_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkVideoView::set_has_ref() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkVideoView::clear_has_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkVideoView::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ref();
}
inline const ::std::string& VkVideoView::ref() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoView.ref)
  return ref_.GetNoArena();
}
inline void VkVideoView::set_ref(const ::std::string& value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoView.ref)
}
#if LANG_CXX11
inline void VkVideoView::set_ref(::std::string&& value) {
  set_has_ref();
  ref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkVideoView.ref)
}
#endif
inline void VkVideoView::set_ref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkVideoView.ref)
}
inline void VkVideoView::set_ref(const char* value, size_t size) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkVideoView.ref)
}
inline ::std::string* VkVideoView::mutable_ref() {
  set_has_ref();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoView.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkVideoView::release_ref() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkVideoView.ref)
  clear_has_ref();
  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkVideoView::set_allocated_ref(::std::string* ref) {
  if (ref != NULL) {
    set_has_ref();
  } else {
    clear_has_ref();
  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkVideoView.ref)
}

// -------------------------------------------------------------------

// VideoView

// required string mrcu = 1;
inline bool VideoView::has_mrcu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoView::set_has_mrcu() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoView::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoView::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
inline const ::std::string& VideoView::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.mrcu)
  return mrcu_.GetNoArena();
}
inline void VideoView::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoView.mrcu)
}
#if LANG_CXX11
inline void VideoView::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoView.mrcu)
}
#endif
inline void VideoView::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoView.mrcu)
}
inline void VideoView::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoView.mrcu)
}
inline ::std::string* VideoView::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoView.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoView::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoView.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoView::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoView.mrcu)
}

// required string video_url = 2;
inline bool VideoView::has_video_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoView::set_has_video_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoView::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoView::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
inline const ::std::string& VideoView::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.video_url)
  return video_url_.GetNoArena();
}
inline void VideoView::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoView.video_url)
}
#if LANG_CXX11
inline void VideoView::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoView.video_url)
}
#endif
inline void VideoView::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoView.video_url)
}
inline void VideoView::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoView.video_url)
}
inline ::std::string* VideoView::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoView.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoView::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoView.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoView::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoView.video_url)
}

// optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 3;
inline bool VideoView::has_video_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoView::set_has_video_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoView::clear_has_video_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoView::clear_video_metadata() {
  if (video_metadata_ != NULL) video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_metadata();
}
inline const ::ru::mail::go::webbase::blobs::VideoImportDoc& VideoView::video_metadata() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.video_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* VideoView::mutable_video_metadata() {
  set_has_video_metadata();
  if (video_metadata_ == NULL) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoView.video_metadata)
  return video_metadata_;
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* VideoView::release_video_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoView.video_metadata)
  clear_has_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_metadata_;
  video_metadata_ = NULL;
  return temp;
}
inline void VideoView::set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata) {
  delete video_metadata_;
  video_metadata_ = video_metadata;
  if (video_metadata) {
    set_has_video_metadata();
  } else {
    clear_has_video_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoView.video_metadata)
}

// optional int64 event_timestamp = 4;
inline bool VideoView::has_event_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoView::set_has_event_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoView::clear_has_event_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoView::clear_event_timestamp() {
  event_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_event_timestamp();
}
inline ::google::protobuf::int64 VideoView::event_timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.event_timestamp)
  return event_timestamp_;
}
inline void VideoView::set_event_timestamp(::google::protobuf::int64 value) {
  set_has_event_timestamp();
  event_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoView.event_timestamp)
}

// optional string query = 5;
inline bool VideoView::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoView::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoView::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoView::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& VideoView::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoView.query)
  return query_.GetNoArena();
}
inline void VideoView::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoView.query)
}
#if LANG_CXX11
inline void VideoView::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoView.query)
}
#endif
inline void VideoView::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoView.query)
}
inline void VideoView::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoView.query)
}
inline ::std::string* VideoView::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoView.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoView::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoView.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoView::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoView.query)
}

// -------------------------------------------------------------------

// VideoViewsList

// repeated .ru.mail.go.webbase.blobs.VideoView views = 1;
inline int VideoViewsList::views_size() const {
  return views_.size();
}
inline void VideoViewsList::clear_views() {
  views_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VideoView& VideoViewsList::views(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return views_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VideoView* VideoViewsList::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return views_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VideoView* VideoViewsList::add_views() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return views_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoView >*
VideoViewsList::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return &views_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoView >&
VideoViewsList::views() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoViewsList.views)
  return views_;
}

// -------------------------------------------------------------------

// VideoViewForRecs

// required string video_url = 1;
inline bool VideoViewForRecs::has_video_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoViewForRecs::set_has_video_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoViewForRecs::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoViewForRecs::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
inline const ::std::string& VideoViewForRecs::video_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
  return video_url_.GetNoArena();
}
inline void VideoViewForRecs::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}
#if LANG_CXX11
inline void VideoViewForRecs::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}
#endif
inline void VideoViewForRecs::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}
inline void VideoViewForRecs::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}
inline ::std::string* VideoViewForRecs::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoViewForRecs::release_video_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoViewForRecs::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoViewForRecs.video_url)
}

// -------------------------------------------------------------------

// VkVideoSession

// optional int32 session_id = 1;
inline bool VkVideoSession::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkVideoSession::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkVideoSession::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkVideoSession::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 VkVideoSession::session_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoSession.session_id)
  return session_id_;
}
inline void VkVideoSession::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoSession.session_id)
}

// optional bool is_male_session = 2;
inline bool VkVideoSession::has_is_male_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkVideoSession::set_has_is_male_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkVideoSession::clear_has_is_male_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkVideoSession::clear_is_male_session() {
  is_male_session_ = false;
  clear_has_is_male_session();
}
inline bool VkVideoSession::is_male_session() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoSession.is_male_session)
  return is_male_session_;
}
inline void VkVideoSession::set_is_male_session(bool value) {
  set_has_is_male_session();
  is_male_session_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoSession.is_male_session)
}

// repeated .ru.mail.go.webbase.blobs.VkVideoView views = 3;
inline int VkVideoSession::views_size() const {
  return views_.size();
}
inline void VkVideoSession::clear_views() {
  views_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VkVideoView& VkVideoSession::views(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return views_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VkVideoView* VkVideoSession::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return views_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VkVideoView* VkVideoSession::add_views() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return views_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkVideoView >*
VkVideoSession::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return &views_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkVideoView >&
VkVideoSession::views() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkVideoSession.views)
  return views_;
}

// -------------------------------------------------------------------

// VideoJointWatchesData

// repeated .ru.mail.go.webbase.blobs.VideoViewForRecs common = 1;
inline int VideoJointWatchesData::common_size() const {
  return common_.size();
}
inline void VideoJointWatchesData::clear_common() {
  common_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VideoViewForRecs& VideoJointWatchesData::common(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return common_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VideoViewForRecs* VideoJointWatchesData::mutable_common(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return common_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VideoViewForRecs* VideoJointWatchesData::add_common() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return common_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >*
VideoJointWatchesData::mutable_common() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return &common_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >&
VideoJointWatchesData::common() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoJointWatchesData.common)
  return common_;
}

// repeated .ru.mail.go.webbase.blobs.VideoViewForRecs highly_recommended = 2;
inline int VideoJointWatchesData::highly_recommended_size() const {
  return highly_recommended_.size();
}
inline void VideoJointWatchesData::clear_highly_recommended() {
  highly_recommended_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VideoViewForRecs& VideoJointWatchesData::highly_recommended(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return highly_recommended_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VideoViewForRecs* VideoJointWatchesData::mutable_highly_recommended(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return highly_recommended_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VideoViewForRecs* VideoJointWatchesData::add_highly_recommended() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return highly_recommended_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >*
VideoJointWatchesData::mutable_highly_recommended() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return &highly_recommended_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VideoViewForRecs >&
VideoJointWatchesData::highly_recommended() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VideoJointWatchesData.highly_recommended)
  return highly_recommended_;
}

// -------------------------------------------------------------------

// VkSessionOrVideoInfo

// optional .ru.mail.go.webbase.blobs.VideoImportDoc video_metadata = 1;
inline bool VkSessionOrVideoInfo::has_video_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkSessionOrVideoInfo::set_has_video_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkSessionOrVideoInfo::clear_has_video_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkSessionOrVideoInfo::clear_video_metadata() {
  if (video_metadata_ != NULL) video_metadata_->::ru::mail::go::webbase::blobs::VideoImportDoc::Clear();
  clear_has_video_metadata();
}
inline const ::ru::mail::go::webbase::blobs::VideoImportDoc& VkSessionOrVideoInfo::video_metadata() const {
  const ::ru::mail::go::webbase::blobs::VideoImportDoc* p = video_metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.video_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VideoImportDoc*>(
      &::ru::mail::go::webbase::blobs::_VideoImportDoc_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* VkSessionOrVideoInfo::mutable_video_metadata() {
  set_has_video_metadata();
  if (video_metadata_ == NULL) {
    video_metadata_ = new ::ru::mail::go::webbase::blobs::VideoImportDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.video_metadata)
  return video_metadata_;
}
inline ::ru::mail::go::webbase::blobs::VideoImportDoc* VkSessionOrVideoInfo::release_video_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.video_metadata)
  clear_has_video_metadata();
  ::ru::mail::go::webbase::blobs::VideoImportDoc* temp = video_metadata_;
  video_metadata_ = NULL;
  return temp;
}
inline void VkSessionOrVideoInfo::set_allocated_video_metadata(::ru::mail::go::webbase::blobs::VideoImportDoc* video_metadata) {
  delete video_metadata_;
  video_metadata_ = video_metadata;
  if (video_metadata) {
    set_has_video_metadata();
  } else {
    clear_has_video_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.video_metadata)
}

// optional bool is_indexed = 2;
inline bool VkSessionOrVideoInfo::has_is_indexed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkSessionOrVideoInfo::set_has_is_indexed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkSessionOrVideoInfo::clear_has_is_indexed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkSessionOrVideoInfo::clear_is_indexed() {
  is_indexed_ = false;
  clear_has_is_indexed();
}
inline bool VkSessionOrVideoInfo::is_indexed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.is_indexed)
  return is_indexed_;
}
inline void VkSessionOrVideoInfo::set_is_indexed(bool value) {
  set_has_is_indexed();
  is_indexed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.is_indexed)
}

// optional int32 session_id = 3;
inline bool VkSessionOrVideoInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkSessionOrVideoInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkSessionOrVideoInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkSessionOrVideoInfo::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::google::protobuf::int32 VkSessionOrVideoInfo::session_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.session_id)
  return session_id_;
}
inline void VkSessionOrVideoInfo::set_session_id(::google::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.session_id)
}

// optional bool is_male_session = 4;
inline bool VkSessionOrVideoInfo::has_is_male_session() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkSessionOrVideoInfo::set_has_is_male_session() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkSessionOrVideoInfo::clear_has_is_male_session() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkSessionOrVideoInfo::clear_is_male_session() {
  is_male_session_ = false;
  clear_has_is_male_session();
}
inline bool VkSessionOrVideoInfo::is_male_session() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.is_male_session)
  return is_male_session_;
}
inline void VkSessionOrVideoInfo::set_is_male_session(bool value) {
  set_has_is_male_session();
  is_male_session_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.is_male_session)
}

// optional .ru.mail.go.webbase.blobs.VkVideoView view = 5;
inline bool VkSessionOrVideoInfo::has_view() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkSessionOrVideoInfo::set_has_view() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkSessionOrVideoInfo::clear_has_view() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkSessionOrVideoInfo::clear_view() {
  if (view_ != NULL) view_->::ru::mail::go::webbase::blobs::VkVideoView::Clear();
  clear_has_view();
}
inline const ::ru::mail::go::webbase::blobs::VkVideoView& VkSessionOrVideoInfo::view() const {
  const ::ru::mail::go::webbase::blobs::VkVideoView* p = view_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.view)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkVideoView*>(
      &::ru::mail::go::webbase::blobs::_VkVideoView_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkVideoView* VkSessionOrVideoInfo::mutable_view() {
  set_has_view();
  if (view_ == NULL) {
    view_ = new ::ru::mail::go::webbase::blobs::VkVideoView;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.view)
  return view_;
}
inline ::ru::mail::go::webbase::blobs::VkVideoView* VkSessionOrVideoInfo::release_view() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.view)
  clear_has_view();
  ::ru::mail::go::webbase::blobs::VkVideoView* temp = view_;
  view_ = NULL;
  return temp;
}
inline void VkSessionOrVideoInfo::set_allocated_view(::ru::mail::go::webbase::blobs::VkVideoView* view) {
  delete view_;
  view_ = view;
  if (view) {
    set_has_view();
  } else {
    clear_has_view();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkSessionOrVideoInfo.view)
}

// -------------------------------------------------------------------

// VkVideoIds

// repeated string ids = 1;
inline int VkVideoIds::ids_size() const {
  return ids_.size();
}
inline void VkVideoIds::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& VkVideoIds::ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return ids_.Get(index);
}
inline ::std::string* VkVideoIds::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return ids_.Mutable(index);
}
inline void VkVideoIds::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkVideoIds::set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkVideoIds::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
inline void VkVideoIds::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
inline ::std::string* VkVideoIds::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return ids_.Add();
}
inline void VkVideoIds::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
#if LANG_CXX11
inline void VkVideoIds::add_ids(::std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
#endif
inline void VkVideoIds::add_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
inline void VkVideoIds::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkVideoIds.ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkVideoIds::ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkVideoIds::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkVideoIds.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// SeriesEpisode

// optional int32 series_id = 1;
inline bool SeriesEpisode::has_series_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SeriesEpisode::set_has_series_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SeriesEpisode::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SeriesEpisode::clear_series_id() {
  series_id_ = 0;
  clear_has_series_id();
}
inline ::google::protobuf::int32 SeriesEpisode::series_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.series_id)
  return series_id_;
}
inline void SeriesEpisode::set_series_id(::google::protobuf::int32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.series_id)
}

// optional int32 season = 2;
inline bool SeriesEpisode::has_season() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SeriesEpisode::set_has_season() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SeriesEpisode::clear_has_season() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SeriesEpisode::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 SeriesEpisode::season() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.season)
  return season_;
}
inline void SeriesEpisode::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.season)
}

// optional int32 episode = 3;
inline bool SeriesEpisode::has_episode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SeriesEpisode::set_has_episode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SeriesEpisode::clear_has_episode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SeriesEpisode::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
inline ::google::protobuf::int32 SeriesEpisode::episode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.episode)
  return episode_;
}
inline void SeriesEpisode::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.episode)
}

// optional int32 duration = 4;
inline bool SeriesEpisode::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SeriesEpisode::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SeriesEpisode::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SeriesEpisode::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 SeriesEpisode::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.duration)
  return duration_;
}
inline void SeriesEpisode::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.duration)
}

// optional int32 sourceId = 5;
inline bool SeriesEpisode::has_sourceid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SeriesEpisode::set_has_sourceid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SeriesEpisode::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SeriesEpisode::clear_sourceid() {
  sourceid_ = 0;
  clear_has_sourceid();
}
inline ::google::protobuf::int32 SeriesEpisode::sourceid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.sourceId)
  return sourceid_;
}
inline void SeriesEpisode::set_sourceid(::google::protobuf::int32 value) {
  set_has_sourceid();
  sourceid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.sourceId)
}

// optional bytes video_table_key = 6;
inline bool SeriesEpisode::has_video_table_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeriesEpisode::set_has_video_table_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeriesEpisode::clear_has_video_table_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeriesEpisode::clear_video_table_key() {
  video_table_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_table_key();
}
inline const ::std::string& SeriesEpisode::video_table_key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
  return video_table_key_.GetNoArena();
}
inline void SeriesEpisode::set_video_table_key(const ::std::string& value) {
  set_has_video_table_key();
  video_table_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}
#if LANG_CXX11
inline void SeriesEpisode::set_video_table_key(::std::string&& value) {
  set_has_video_table_key();
  video_table_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}
#endif
inline void SeriesEpisode::set_video_table_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_table_key();
  video_table_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}
inline void SeriesEpisode::set_video_table_key(const void* value, size_t size) {
  set_has_video_table_key();
  video_table_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}
inline ::std::string* SeriesEpisode::mutable_video_table_key() {
  set_has_video_table_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
  return video_table_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeriesEpisode::release_video_table_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
  clear_has_video_table_key();
  return video_table_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeriesEpisode::set_allocated_video_table_key(::std::string* video_table_key) {
  if (video_table_key != NULL) {
    set_has_video_table_key();
  } else {
    clear_has_video_table_key();
  }
  video_table_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_table_key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SeriesEpisode.video_table_key)
}

// optional bool trusted_source = 7;
inline bool SeriesEpisode::has_trusted_source() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SeriesEpisode::set_has_trusted_source() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SeriesEpisode::clear_has_trusted_source() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SeriesEpisode::clear_trusted_source() {
  trusted_source_ = false;
  clear_has_trusted_source();
}
inline bool SeriesEpisode::trusted_source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.trusted_source)
  return trusted_source_;
}
inline void SeriesEpisode::set_trusted_source(bool value) {
  set_has_trusted_source();
  trusted_source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.trusted_source)
}

// optional string hosting = 8;
inline bool SeriesEpisode::has_hosting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeriesEpisode::set_has_hosting() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeriesEpisode::clear_has_hosting() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeriesEpisode::clear_hosting() {
  hosting_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hosting();
}
inline const ::std::string& SeriesEpisode::hosting() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
  return hosting_.GetNoArena();
}
inline void SeriesEpisode::set_hosting(const ::std::string& value) {
  set_has_hosting();
  hosting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}
#if LANG_CXX11
inline void SeriesEpisode::set_hosting(::std::string&& value) {
  set_has_hosting();
  hosting_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}
#endif
inline void SeriesEpisode::set_hosting(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hosting();
  hosting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}
inline void SeriesEpisode::set_hosting(const char* value, size_t size) {
  set_has_hosting();
  hosting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}
inline ::std::string* SeriesEpisode::mutable_hosting() {
  set_has_hosting();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
  return hosting_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeriesEpisode::release_hosting() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
  clear_has_hosting();
  return hosting_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeriesEpisode::set_allocated_hosting(::std::string* hosting) {
  if (hosting != NULL) {
    set_has_hosting();
  } else {
    clear_has_hosting();
  }
  hosting_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hosting);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SeriesEpisode.hosting)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus>() {
  return ::ru::mail::go::webbase::blobs::MovieMetadata_MovieStatus_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType>() {
  return ::ru::mail::go::webbase::blobs::VideoMarkupSchemaOrg_DeclarationType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::LiveVideoState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::LiveVideoState>() {
  return ::ru::mail::go::webbase::blobs::LiveVideoState_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::ProtobufSourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::ProtobufSourceType>() {
  return ::ru::mail::go::webbase::blobs::ProtobufSourceType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::ExclusiveProviders> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::ExclusiveProviders>() {
  return ::ru::mail::go::webbase::blobs::ExclusiveProviders_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoQualityValue> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoQualityValue>() {
  return ::ru::mail::go::webbase::blobs::VideoQualityValue_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoQueryClass> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoQueryClass>() {
  return ::ru::mail::go::webbase::blobs::VideoQueryClass_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoThumbnailStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoThumbnailStatus>() {
  return ::ru::mail::go::webbase::blobs::VideoThumbnailStatus_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoCheckType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoCheckType>() {
  return ::ru::mail::go::webbase::blobs::VideoCheckType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoLiveStreamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoLiveStreamType>() {
  return ::ru::mail::go::webbase::blobs::VideoLiveStreamType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::DzenCertainGrade> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::DzenCertainGrade>() {
  return ::ru::mail::go::webbase::blobs::DzenCertainGrade_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoOrientation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoOrientation>() {
  return ::ru::mail::go::webbase::blobs::VideoOrientation_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoType>() {
  return ::ru::mail::go::webbase::blobs::VideoType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VideoMarkupType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VideoMarkupType>() {
  return ::ru::mail::go::webbase::blobs::VideoMarkupType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_video_2eproto__INCLUDED
