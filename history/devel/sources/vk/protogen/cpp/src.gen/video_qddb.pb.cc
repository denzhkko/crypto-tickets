// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video_qddb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "video_qddb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace video_qddb {
class SourceRanksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceRanks>
     _instance;
} _SourceRanks_default_instance_;
class DocRanksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocRanks>
     _instance;
} _DocRanks_default_instance_;
class GeoRanksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GeoRanks>
     _instance;
} _GeoRanks_default_instance_;
class QueryRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryRecord>
     _instance;
} _QueryRecord_default_instance_;

namespace protobuf_video_5fqddb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, viewsall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, viewsshort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, viewsultrashort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, ctrinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, ctrinterestord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, viewsallfixedtimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, views10sviewed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, views60sviewed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, interestfixedtimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, ctrinterestfixedtimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, ctr10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, ctr60_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, durationless60sviewedpercent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, imps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, ctr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRanks, ctrord_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, dzen_vdo_srch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, vk_iph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, vk_droid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, vk_web_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, vk_mvk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, vk_all_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, vk_rest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocRanks, dzen_mlt_srch_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRanks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRanks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRanks, geo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRanks, doc_ranks_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRecord, geo_ranks_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(SourceRanks)},
  { 41, 55, sizeof(DocRanks)},
  { 64, 71, sizeof(GeoRanks)},
  { 73, 79, sizeof(QueryRecord)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceRanks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocRanks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GeoRanks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryRecord_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "video_qddb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SourceRanks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceRanks_default_instance_);_DocRanks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocRanks_default_instance_);_GeoRanks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GeoRanks_default_instance_);_QueryRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryRecord_default_instance_);_DocRanks_default_instance_._instance.get_mutable()->dzen_vdo_srch_ = const_cast< ::gogo::video_qddb::SourceRanks*>(
      ::gogo::video_qddb::SourceRanks::internal_default_instance());
  _DocRanks_default_instance_._instance.get_mutable()->vk_iph_ = const_cast< ::gogo::video_qddb::SourceRanks*>(
      ::gogo::video_qddb::SourceRanks::internal_default_instance());
  _DocRanks_default_instance_._instance.get_mutable()->vk_droid_ = const_cast< ::gogo::video_qddb::SourceRanks*>(
      ::gogo::video_qddb::SourceRanks::internal_default_instance());
  _DocRanks_default_instance_._instance.get_mutable()->vk_web_ = const_cast< ::gogo::video_qddb::SourceRanks*>(
      ::gogo::video_qddb::SourceRanks::internal_default_instance());
  _DocRanks_default_instance_._instance.get_mutable()->vk_mvk_ = const_cast< ::gogo::video_qddb::SourceRanks*>(
      ::gogo::video_qddb::SourceRanks::internal_default_instance());
  _DocRanks_default_instance_._instance.get_mutable()->vk_all_ = const_cast< ::gogo::video_qddb::SourceRanks*>(
      ::gogo::video_qddb::SourceRanks::internal_default_instance());
  _DocRanks_default_instance_._instance.get_mutable()->vk_rest_ = const_cast< ::gogo::video_qddb::SourceRanks*>(
      ::gogo::video_qddb::SourceRanks::internal_default_instance());
  _DocRanks_default_instance_._instance.get_mutable()->dzen_mlt_srch_ = const_cast< ::gogo::video_qddb::SourceRanks*>(
      ::gogo::video_qddb::SourceRanks::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020video_qddb.proto\022\017gogo.video_qddb\"\251\003\n\013"
      "SourceRanks\022\020\n\010viewsAll\030\001 \001(\r\022\022\n\nviewsSh"
      "ort\030\002 \001(\r\022\027\n\017viewsUltraShort\030\003 \001(\r\022\020\n\010in"
      "terest\030\004 \001(\002\022\023\n\013ctrInterest\030\005 \001(\002\022\026\n\016ctr"
      "InterestOrd\030\006 \001(\r\022\032\n\022viewsAllFixedTimes\030"
      "\007 \001(\r\022\026\n\016views10sViewed\030\010 \001(\r\022\026\n\016views60"
      "sViewed\030\t \001(\r\022\032\n\022interestFixedTimes\030\n \001("
      "\002\022\035\n\025ctrInterestFixedTimes\030\013 \001(\002\022\r\n\005ctr1"
      "0\030\014 \001(\002\022\r\n\005ctr60\030\r \001(\002\022$\n\034durationLess60"
      "sViewedPercent\030\016 \001(\002\022\014\n\004imps\030\017 \001(\r\022\016\n\006cl"
      "icks\030\020 \001(\r\022\013\n\003ctr\030\021 \001(\002\022\016\n\006ctrOrd\030\022 \001(\r\""
      "\026\n\007Version\022\013\n\007Current\020\001\"\263\003\n\010DocRanks\022\016\n\006"
      "doc_id\030\001 \002(\r\0223\n\rdzen_vdo_srch\030\002 \001(\0132\034.go"
      "go.video_qddb.SourceRanks\022,\n\006vk_iph\030\003 \001("
      "\0132\034.gogo.video_qddb.SourceRanks\022.\n\010vk_dr"
      "oid\030\004 \001(\0132\034.gogo.video_qddb.SourceRanks\022"
      ",\n\006vk_web\030\005 \001(\0132\034.gogo.video_qddb.Source"
      "Ranks\022,\n\006vk_mvk\030\006 \001(\0132\034.gogo.video_qddb."
      "SourceRanks\022,\n\006vk_all\030\007 \001(\0132\034.gogo.video"
      "_qddb.SourceRanks\022-\n\007vk_rest\030\010 \001(\0132\034.gog"
      "o.video_qddb.SourceRanks\0223\n\rdzen_mlt_src"
      "h\030\t \001(\0132\034.gogo.video_qddb.SourceRanks\"\026\n"
      "\007Version\022\013\n\007Current\020\002\"H\n\010GeoRanks\022\016\n\006geo"
      "_id\030\001 \002(\r\022,\n\tdoc_ranks\030\002 \003(\0132\031.gogo.vide"
      "o_qddb.DocRanks\";\n\013QueryRecord\022,\n\tgeo_ra"
      "nks\030\001 \003(\0132\031.gogo.video_qddb.GeoRanks"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1036);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "video_qddb.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_video_5fqddb_2eproto

const ::google::protobuf::EnumDescriptor* SourceRanks_Version_descriptor() {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_enum_descriptors[0];
}
bool SourceRanks_Version_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SourceRanks_Version SourceRanks::Current;
const SourceRanks_Version SourceRanks::Version_MIN;
const SourceRanks_Version SourceRanks::Version_MAX;
const int SourceRanks::Version_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DocRanks_Version_descriptor() {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_enum_descriptors[1];
}
bool DocRanks_Version_IsValid(int value) {
  switch (value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DocRanks_Version DocRanks::Current;
const DocRanks_Version DocRanks::Version_MIN;
const DocRanks_Version DocRanks::Version_MAX;
const int DocRanks::Version_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceRanks::kViewsAllFieldNumber;
const int SourceRanks::kViewsShortFieldNumber;
const int SourceRanks::kViewsUltraShortFieldNumber;
const int SourceRanks::kInterestFieldNumber;
const int SourceRanks::kCtrInterestFieldNumber;
const int SourceRanks::kCtrInterestOrdFieldNumber;
const int SourceRanks::kViewsAllFixedTimesFieldNumber;
const int SourceRanks::kViews10SViewedFieldNumber;
const int SourceRanks::kViews60SViewedFieldNumber;
const int SourceRanks::kInterestFixedTimesFieldNumber;
const int SourceRanks::kCtrInterestFixedTimesFieldNumber;
const int SourceRanks::kCtr10FieldNumber;
const int SourceRanks::kCtr60FieldNumber;
const int SourceRanks::kDurationLess60SViewedPercentFieldNumber;
const int SourceRanks::kImpsFieldNumber;
const int SourceRanks::kClicksFieldNumber;
const int SourceRanks::kCtrFieldNumber;
const int SourceRanks::kCtrOrdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceRanks::SourceRanks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_5fqddb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.video_qddb.SourceRanks)
}
SourceRanks::SourceRanks(const SourceRanks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&viewsall_, &from.viewsall_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctrord_) -
    reinterpret_cast<char*>(&viewsall_)) + sizeof(ctrord_));
  // @@protoc_insertion_point(copy_constructor:gogo.video_qddb.SourceRanks)
}

void SourceRanks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&viewsall_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctrord_) -
      reinterpret_cast<char*>(&viewsall_)) + sizeof(ctrord_));
}

SourceRanks::~SourceRanks() {
  // @@protoc_insertion_point(destructor:gogo.video_qddb.SourceRanks)
  SharedDtor();
}

void SourceRanks::SharedDtor() {
}

void SourceRanks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceRanks::descriptor() {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceRanks& SourceRanks::default_instance() {
  protobuf_video_5fqddb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceRanks* SourceRanks::New(::google::protobuf::Arena* arena) const {
  SourceRanks* n = new SourceRanks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceRanks::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.video_qddb.SourceRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&viewsall_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&views10sviewed_) -
        reinterpret_cast<char*>(&viewsall_)) + sizeof(views10sviewed_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&views60sviewed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clicks_) -
        reinterpret_cast<char*>(&views60sviewed_)) + sizeof(clicks_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&ctr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctrord_) -
        reinterpret_cast<char*>(&ctr_)) + sizeof(ctrord_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceRanks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.video_qddb.SourceRanks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 viewsAll = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_viewsall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewsall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 viewsShort = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_viewsshort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewsshort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 viewsUltraShort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_viewsultrashort();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewsultrashort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float interest = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ctrInterest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_ctrinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctrinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ctrInterestOrd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ctrinterestord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctrinterestord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 viewsAllFixedTimes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_viewsallfixedtimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewsallfixedtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views10sViewed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_views10sviewed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views10sviewed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views60sViewed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_views60sviewed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views60sviewed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float interestFixedTimes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_interestfixedtimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interestfixedtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ctrInterestFixedTimes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_ctrinterestfixedtimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctrinterestfixedtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ctr10 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_ctr10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctr10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ctr60 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_ctr60();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctr60_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float durationLess60sViewedPercent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_durationless60sviewedpercent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &durationless60sviewedpercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 imps = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_imps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicks = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ctr = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_ctr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ctrOrd = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_ctrord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctrord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.video_qddb.SourceRanks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.video_qddb.SourceRanks)
  return false;
#undef DO_
}

void SourceRanks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.video_qddb.SourceRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 viewsAll = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viewsall(), output);
  }

  // optional uint32 viewsShort = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->viewsshort(), output);
  }

  // optional uint32 viewsUltraShort = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->viewsultrashort(), output);
  }

  // optional float interest = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->interest(), output);
  }

  // optional float ctrInterest = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ctrinterest(), output);
  }

  // optional uint32 ctrInterestOrd = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ctrinterestord(), output);
  }

  // optional uint32 viewsAllFixedTimes = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viewsallfixedtimes(), output);
  }

  // optional uint32 views10sViewed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->views10sviewed(), output);
  }

  // optional uint32 views60sViewed = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->views60sviewed(), output);
  }

  // optional float interestFixedTimes = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->interestfixedtimes(), output);
  }

  // optional float ctrInterestFixedTimes = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ctrinterestfixedtimes(), output);
  }

  // optional float ctr10 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->ctr10(), output);
  }

  // optional float ctr60 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->ctr60(), output);
  }

  // optional float durationLess60sViewedPercent = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->durationless60sviewedpercent(), output);
  }

  // optional uint32 imps = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->imps(), output);
  }

  // optional uint32 clicks = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->clicks(), output);
  }

  // optional float ctr = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->ctr(), output);
  }

  // optional uint32 ctrOrd = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->ctrord(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.video_qddb.SourceRanks)
}

::google::protobuf::uint8* SourceRanks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.video_qddb.SourceRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 viewsAll = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->viewsall(), target);
  }

  // optional uint32 viewsShort = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->viewsshort(), target);
  }

  // optional uint32 viewsUltraShort = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->viewsultrashort(), target);
  }

  // optional float interest = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->interest(), target);
  }

  // optional float ctrInterest = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ctrinterest(), target);
  }

  // optional uint32 ctrInterestOrd = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ctrinterestord(), target);
  }

  // optional uint32 viewsAllFixedTimes = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viewsallfixedtimes(), target);
  }

  // optional uint32 views10sViewed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->views10sviewed(), target);
  }

  // optional uint32 views60sViewed = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->views60sviewed(), target);
  }

  // optional float interestFixedTimes = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->interestfixedtimes(), target);
  }

  // optional float ctrInterestFixedTimes = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ctrinterestfixedtimes(), target);
  }

  // optional float ctr10 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->ctr10(), target);
  }

  // optional float ctr60 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->ctr60(), target);
  }

  // optional float durationLess60sViewedPercent = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->durationless60sviewedpercent(), target);
  }

  // optional uint32 imps = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->imps(), target);
  }

  // optional uint32 clicks = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->clicks(), target);
  }

  // optional float ctr = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->ctr(), target);
  }

  // optional uint32 ctrOrd = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->ctrord(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.video_qddb.SourceRanks)
  return target;
}

size_t SourceRanks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.video_qddb.SourceRanks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 viewsAll = 1;
    if (has_viewsall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewsall());
    }

    // optional uint32 viewsShort = 2;
    if (has_viewsshort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewsshort());
    }

    // optional uint32 viewsUltraShort = 3;
    if (has_viewsultrashort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewsultrashort());
    }

    // optional float interest = 4;
    if (has_interest()) {
      total_size += 1 + 4;
    }

    // optional float ctrInterest = 5;
    if (has_ctrinterest()) {
      total_size += 1 + 4;
    }

    // optional uint32 ctrInterestOrd = 6;
    if (has_ctrinterestord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctrinterestord());
    }

    // optional uint32 viewsAllFixedTimes = 7;
    if (has_viewsallfixedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewsallfixedtimes());
    }

    // optional uint32 views10sViewed = 8;
    if (has_views10sviewed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views10sviewed());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 views60sViewed = 9;
    if (has_views60sviewed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views60sviewed());
    }

    // optional float interestFixedTimes = 10;
    if (has_interestfixedtimes()) {
      total_size += 1 + 4;
    }

    // optional float ctrInterestFixedTimes = 11;
    if (has_ctrinterestfixedtimes()) {
      total_size += 1 + 4;
    }

    // optional float ctr10 = 12;
    if (has_ctr10()) {
      total_size += 1 + 4;
    }

    // optional float ctr60 = 13;
    if (has_ctr60()) {
      total_size += 1 + 4;
    }

    // optional float durationLess60sViewedPercent = 14;
    if (has_durationless60sviewedpercent()) {
      total_size += 1 + 4;
    }

    // optional uint32 imps = 15;
    if (has_imps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imps());
    }

    // optional uint32 clicks = 16;
    if (has_clicks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional float ctr = 17;
    if (has_ctr()) {
      total_size += 2 + 4;
    }

    // optional uint32 ctrOrd = 18;
    if (has_ctrord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctrord());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceRanks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.video_qddb.SourceRanks)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceRanks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceRanks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.video_qddb.SourceRanks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.video_qddb.SourceRanks)
    MergeFrom(*source);
  }
}

void SourceRanks::MergeFrom(const SourceRanks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.video_qddb.SourceRanks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      viewsall_ = from.viewsall_;
    }
    if (cached_has_bits & 0x00000002u) {
      viewsshort_ = from.viewsshort_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewsultrashort_ = from.viewsultrashort_;
    }
    if (cached_has_bits & 0x00000008u) {
      interest_ = from.interest_;
    }
    if (cached_has_bits & 0x00000010u) {
      ctrinterest_ = from.ctrinterest_;
    }
    if (cached_has_bits & 0x00000020u) {
      ctrinterestord_ = from.ctrinterestord_;
    }
    if (cached_has_bits & 0x00000040u) {
      viewsallfixedtimes_ = from.viewsallfixedtimes_;
    }
    if (cached_has_bits & 0x00000080u) {
      views10sviewed_ = from.views10sviewed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      views60sviewed_ = from.views60sviewed_;
    }
    if (cached_has_bits & 0x00000200u) {
      interestfixedtimes_ = from.interestfixedtimes_;
    }
    if (cached_has_bits & 0x00000400u) {
      ctrinterestfixedtimes_ = from.ctrinterestfixedtimes_;
    }
    if (cached_has_bits & 0x00000800u) {
      ctr10_ = from.ctr10_;
    }
    if (cached_has_bits & 0x00001000u) {
      ctr60_ = from.ctr60_;
    }
    if (cached_has_bits & 0x00002000u) {
      durationless60sviewedpercent_ = from.durationless60sviewedpercent_;
    }
    if (cached_has_bits & 0x00004000u) {
      imps_ = from.imps_;
    }
    if (cached_has_bits & 0x00008000u) {
      clicks_ = from.clicks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      ctr_ = from.ctr_;
    }
    if (cached_has_bits & 0x00020000u) {
      ctrord_ = from.ctrord_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceRanks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.video_qddb.SourceRanks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceRanks::CopyFrom(const SourceRanks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.video_qddb.SourceRanks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceRanks::IsInitialized() const {
  return true;
}

void SourceRanks::Swap(SourceRanks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceRanks::InternalSwap(SourceRanks* other) {
  using std::swap;
  swap(viewsall_, other->viewsall_);
  swap(viewsshort_, other->viewsshort_);
  swap(viewsultrashort_, other->viewsultrashort_);
  swap(interest_, other->interest_);
  swap(ctrinterest_, other->ctrinterest_);
  swap(ctrinterestord_, other->ctrinterestord_);
  swap(viewsallfixedtimes_, other->viewsallfixedtimes_);
  swap(views10sviewed_, other->views10sviewed_);
  swap(views60sviewed_, other->views60sviewed_);
  swap(interestfixedtimes_, other->interestfixedtimes_);
  swap(ctrinterestfixedtimes_, other->ctrinterestfixedtimes_);
  swap(ctr10_, other->ctr10_);
  swap(ctr60_, other->ctr60_);
  swap(durationless60sviewedpercent_, other->durationless60sviewedpercent_);
  swap(imps_, other->imps_);
  swap(clicks_, other->clicks_);
  swap(ctr_, other->ctr_);
  swap(ctrord_, other->ctrord_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceRanks::GetMetadata() const {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceRanks

// optional uint32 viewsAll = 1;
bool SourceRanks::has_viewsall() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceRanks::set_has_viewsall() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceRanks::clear_has_viewsall() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceRanks::clear_viewsall() {
  viewsall_ = 0u;
  clear_has_viewsall();
}
::google::protobuf::uint32 SourceRanks::viewsall() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.viewsAll)
  return viewsall_;
}
void SourceRanks::set_viewsall(::google::protobuf::uint32 value) {
  set_has_viewsall();
  viewsall_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.viewsAll)
}

// optional uint32 viewsShort = 2;
bool SourceRanks::has_viewsshort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceRanks::set_has_viewsshort() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceRanks::clear_has_viewsshort() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceRanks::clear_viewsshort() {
  viewsshort_ = 0u;
  clear_has_viewsshort();
}
::google::protobuf::uint32 SourceRanks::viewsshort() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.viewsShort)
  return viewsshort_;
}
void SourceRanks::set_viewsshort(::google::protobuf::uint32 value) {
  set_has_viewsshort();
  viewsshort_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.viewsShort)
}

// optional uint32 viewsUltraShort = 3;
bool SourceRanks::has_viewsultrashort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceRanks::set_has_viewsultrashort() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceRanks::clear_has_viewsultrashort() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceRanks::clear_viewsultrashort() {
  viewsultrashort_ = 0u;
  clear_has_viewsultrashort();
}
::google::protobuf::uint32 SourceRanks::viewsultrashort() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.viewsUltraShort)
  return viewsultrashort_;
}
void SourceRanks::set_viewsultrashort(::google::protobuf::uint32 value) {
  set_has_viewsultrashort();
  viewsultrashort_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.viewsUltraShort)
}

// optional float interest = 4;
bool SourceRanks::has_interest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceRanks::set_has_interest() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceRanks::clear_has_interest() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceRanks::clear_interest() {
  interest_ = 0;
  clear_has_interest();
}
float SourceRanks::interest() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.interest)
  return interest_;
}
void SourceRanks::set_interest(float value) {
  set_has_interest();
  interest_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.interest)
}

// optional float ctrInterest = 5;
bool SourceRanks::has_ctrinterest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SourceRanks::set_has_ctrinterest() {
  _has_bits_[0] |= 0x00000010u;
}
void SourceRanks::clear_has_ctrinterest() {
  _has_bits_[0] &= ~0x00000010u;
}
void SourceRanks::clear_ctrinterest() {
  ctrinterest_ = 0;
  clear_has_ctrinterest();
}
float SourceRanks::ctrinterest() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.ctrInterest)
  return ctrinterest_;
}
void SourceRanks::set_ctrinterest(float value) {
  set_has_ctrinterest();
  ctrinterest_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.ctrInterest)
}

// optional uint32 ctrInterestOrd = 6;
bool SourceRanks::has_ctrinterestord() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SourceRanks::set_has_ctrinterestord() {
  _has_bits_[0] |= 0x00000020u;
}
void SourceRanks::clear_has_ctrinterestord() {
  _has_bits_[0] &= ~0x00000020u;
}
void SourceRanks::clear_ctrinterestord() {
  ctrinterestord_ = 0u;
  clear_has_ctrinterestord();
}
::google::protobuf::uint32 SourceRanks::ctrinterestord() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.ctrInterestOrd)
  return ctrinterestord_;
}
void SourceRanks::set_ctrinterestord(::google::protobuf::uint32 value) {
  set_has_ctrinterestord();
  ctrinterestord_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.ctrInterestOrd)
}

// optional uint32 viewsAllFixedTimes = 7;
bool SourceRanks::has_viewsallfixedtimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SourceRanks::set_has_viewsallfixedtimes() {
  _has_bits_[0] |= 0x00000040u;
}
void SourceRanks::clear_has_viewsallfixedtimes() {
  _has_bits_[0] &= ~0x00000040u;
}
void SourceRanks::clear_viewsallfixedtimes() {
  viewsallfixedtimes_ = 0u;
  clear_has_viewsallfixedtimes();
}
::google::protobuf::uint32 SourceRanks::viewsallfixedtimes() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.viewsAllFixedTimes)
  return viewsallfixedtimes_;
}
void SourceRanks::set_viewsallfixedtimes(::google::protobuf::uint32 value) {
  set_has_viewsallfixedtimes();
  viewsallfixedtimes_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.viewsAllFixedTimes)
}

// optional uint32 views10sViewed = 8;
bool SourceRanks::has_views10sviewed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SourceRanks::set_has_views10sviewed() {
  _has_bits_[0] |= 0x00000080u;
}
void SourceRanks::clear_has_views10sviewed() {
  _has_bits_[0] &= ~0x00000080u;
}
void SourceRanks::clear_views10sviewed() {
  views10sviewed_ = 0u;
  clear_has_views10sviewed();
}
::google::protobuf::uint32 SourceRanks::views10sviewed() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.views10sViewed)
  return views10sviewed_;
}
void SourceRanks::set_views10sviewed(::google::protobuf::uint32 value) {
  set_has_views10sviewed();
  views10sviewed_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.views10sViewed)
}

// optional uint32 views60sViewed = 9;
bool SourceRanks::has_views60sviewed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SourceRanks::set_has_views60sviewed() {
  _has_bits_[0] |= 0x00000100u;
}
void SourceRanks::clear_has_views60sviewed() {
  _has_bits_[0] &= ~0x00000100u;
}
void SourceRanks::clear_views60sviewed() {
  views60sviewed_ = 0u;
  clear_has_views60sviewed();
}
::google::protobuf::uint32 SourceRanks::views60sviewed() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.views60sViewed)
  return views60sviewed_;
}
void SourceRanks::set_views60sviewed(::google::protobuf::uint32 value) {
  set_has_views60sviewed();
  views60sviewed_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.views60sViewed)
}

// optional float interestFixedTimes = 10;
bool SourceRanks::has_interestfixedtimes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SourceRanks::set_has_interestfixedtimes() {
  _has_bits_[0] |= 0x00000200u;
}
void SourceRanks::clear_has_interestfixedtimes() {
  _has_bits_[0] &= ~0x00000200u;
}
void SourceRanks::clear_interestfixedtimes() {
  interestfixedtimes_ = 0;
  clear_has_interestfixedtimes();
}
float SourceRanks::interestfixedtimes() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.interestFixedTimes)
  return interestfixedtimes_;
}
void SourceRanks::set_interestfixedtimes(float value) {
  set_has_interestfixedtimes();
  interestfixedtimes_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.interestFixedTimes)
}

// optional float ctrInterestFixedTimes = 11;
bool SourceRanks::has_ctrinterestfixedtimes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SourceRanks::set_has_ctrinterestfixedtimes() {
  _has_bits_[0] |= 0x00000400u;
}
void SourceRanks::clear_has_ctrinterestfixedtimes() {
  _has_bits_[0] &= ~0x00000400u;
}
void SourceRanks::clear_ctrinterestfixedtimes() {
  ctrinterestfixedtimes_ = 0;
  clear_has_ctrinterestfixedtimes();
}
float SourceRanks::ctrinterestfixedtimes() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.ctrInterestFixedTimes)
  return ctrinterestfixedtimes_;
}
void SourceRanks::set_ctrinterestfixedtimes(float value) {
  set_has_ctrinterestfixedtimes();
  ctrinterestfixedtimes_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.ctrInterestFixedTimes)
}

// optional float ctr10 = 12;
bool SourceRanks::has_ctr10() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SourceRanks::set_has_ctr10() {
  _has_bits_[0] |= 0x00000800u;
}
void SourceRanks::clear_has_ctr10() {
  _has_bits_[0] &= ~0x00000800u;
}
void SourceRanks::clear_ctr10() {
  ctr10_ = 0;
  clear_has_ctr10();
}
float SourceRanks::ctr10() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.ctr10)
  return ctr10_;
}
void SourceRanks::set_ctr10(float value) {
  set_has_ctr10();
  ctr10_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.ctr10)
}

// optional float ctr60 = 13;
bool SourceRanks::has_ctr60() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SourceRanks::set_has_ctr60() {
  _has_bits_[0] |= 0x00001000u;
}
void SourceRanks::clear_has_ctr60() {
  _has_bits_[0] &= ~0x00001000u;
}
void SourceRanks::clear_ctr60() {
  ctr60_ = 0;
  clear_has_ctr60();
}
float SourceRanks::ctr60() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.ctr60)
  return ctr60_;
}
void SourceRanks::set_ctr60(float value) {
  set_has_ctr60();
  ctr60_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.ctr60)
}

// optional float durationLess60sViewedPercent = 14;
bool SourceRanks::has_durationless60sviewedpercent() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SourceRanks::set_has_durationless60sviewedpercent() {
  _has_bits_[0] |= 0x00002000u;
}
void SourceRanks::clear_has_durationless60sviewedpercent() {
  _has_bits_[0] &= ~0x00002000u;
}
void SourceRanks::clear_durationless60sviewedpercent() {
  durationless60sviewedpercent_ = 0;
  clear_has_durationless60sviewedpercent();
}
float SourceRanks::durationless60sviewedpercent() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.durationLess60sViewedPercent)
  return durationless60sviewedpercent_;
}
void SourceRanks::set_durationless60sviewedpercent(float value) {
  set_has_durationless60sviewedpercent();
  durationless60sviewedpercent_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.durationLess60sViewedPercent)
}

// optional uint32 imps = 15;
bool SourceRanks::has_imps() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SourceRanks::set_has_imps() {
  _has_bits_[0] |= 0x00004000u;
}
void SourceRanks::clear_has_imps() {
  _has_bits_[0] &= ~0x00004000u;
}
void SourceRanks::clear_imps() {
  imps_ = 0u;
  clear_has_imps();
}
::google::protobuf::uint32 SourceRanks::imps() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.imps)
  return imps_;
}
void SourceRanks::set_imps(::google::protobuf::uint32 value) {
  set_has_imps();
  imps_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.imps)
}

// optional uint32 clicks = 16;
bool SourceRanks::has_clicks() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SourceRanks::set_has_clicks() {
  _has_bits_[0] |= 0x00008000u;
}
void SourceRanks::clear_has_clicks() {
  _has_bits_[0] &= ~0x00008000u;
}
void SourceRanks::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
::google::protobuf::uint32 SourceRanks::clicks() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.clicks)
  return clicks_;
}
void SourceRanks::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.clicks)
}

// optional float ctr = 17;
bool SourceRanks::has_ctr() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SourceRanks::set_has_ctr() {
  _has_bits_[0] |= 0x00010000u;
}
void SourceRanks::clear_has_ctr() {
  _has_bits_[0] &= ~0x00010000u;
}
void SourceRanks::clear_ctr() {
  ctr_ = 0;
  clear_has_ctr();
}
float SourceRanks::ctr() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.ctr)
  return ctr_;
}
void SourceRanks::set_ctr(float value) {
  set_has_ctr();
  ctr_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.ctr)
}

// optional uint32 ctrOrd = 18;
bool SourceRanks::has_ctrord() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SourceRanks::set_has_ctrord() {
  _has_bits_[0] |= 0x00020000u;
}
void SourceRanks::clear_has_ctrord() {
  _has_bits_[0] &= ~0x00020000u;
}
void SourceRanks::clear_ctrord() {
  ctrord_ = 0u;
  clear_has_ctrord();
}
::google::protobuf::uint32 SourceRanks::ctrord() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.SourceRanks.ctrOrd)
  return ctrord_;
}
void SourceRanks::set_ctrord(::google::protobuf::uint32 value) {
  set_has_ctrord();
  ctrord_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.SourceRanks.ctrOrd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocRanks::kDocIdFieldNumber;
const int DocRanks::kDzenVdoSrchFieldNumber;
const int DocRanks::kVkIphFieldNumber;
const int DocRanks::kVkDroidFieldNumber;
const int DocRanks::kVkWebFieldNumber;
const int DocRanks::kVkMvkFieldNumber;
const int DocRanks::kVkAllFieldNumber;
const int DocRanks::kVkRestFieldNumber;
const int DocRanks::kDzenMltSrchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocRanks::DocRanks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_5fqddb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.video_qddb.DocRanks)
}
DocRanks::DocRanks(const DocRanks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dzen_vdo_srch()) {
    dzen_vdo_srch_ = new ::gogo::video_qddb::SourceRanks(*from.dzen_vdo_srch_);
  } else {
    dzen_vdo_srch_ = NULL;
  }
  if (from.has_vk_iph()) {
    vk_iph_ = new ::gogo::video_qddb::SourceRanks(*from.vk_iph_);
  } else {
    vk_iph_ = NULL;
  }
  if (from.has_vk_droid()) {
    vk_droid_ = new ::gogo::video_qddb::SourceRanks(*from.vk_droid_);
  } else {
    vk_droid_ = NULL;
  }
  if (from.has_vk_web()) {
    vk_web_ = new ::gogo::video_qddb::SourceRanks(*from.vk_web_);
  } else {
    vk_web_ = NULL;
  }
  if (from.has_vk_mvk()) {
    vk_mvk_ = new ::gogo::video_qddb::SourceRanks(*from.vk_mvk_);
  } else {
    vk_mvk_ = NULL;
  }
  if (from.has_vk_all()) {
    vk_all_ = new ::gogo::video_qddb::SourceRanks(*from.vk_all_);
  } else {
    vk_all_ = NULL;
  }
  if (from.has_vk_rest()) {
    vk_rest_ = new ::gogo::video_qddb::SourceRanks(*from.vk_rest_);
  } else {
    vk_rest_ = NULL;
  }
  if (from.has_dzen_mlt_srch()) {
    dzen_mlt_srch_ = new ::gogo::video_qddb::SourceRanks(*from.dzen_mlt_srch_);
  } else {
    dzen_mlt_srch_ = NULL;
  }
  doc_id_ = from.doc_id_;
  // @@protoc_insertion_point(copy_constructor:gogo.video_qddb.DocRanks)
}

void DocRanks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dzen_vdo_srch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doc_id_) -
      reinterpret_cast<char*>(&dzen_vdo_srch_)) + sizeof(doc_id_));
}

DocRanks::~DocRanks() {
  // @@protoc_insertion_point(destructor:gogo.video_qddb.DocRanks)
  SharedDtor();
}

void DocRanks::SharedDtor() {
  if (this != internal_default_instance()) delete dzen_vdo_srch_;
  if (this != internal_default_instance()) delete vk_iph_;
  if (this != internal_default_instance()) delete vk_droid_;
  if (this != internal_default_instance()) delete vk_web_;
  if (this != internal_default_instance()) delete vk_mvk_;
  if (this != internal_default_instance()) delete vk_all_;
  if (this != internal_default_instance()) delete vk_rest_;
  if (this != internal_default_instance()) delete dzen_mlt_srch_;
}

void DocRanks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocRanks::descriptor() {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocRanks& DocRanks::default_instance() {
  protobuf_video_5fqddb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocRanks* DocRanks::New(::google::protobuf::Arena* arena) const {
  DocRanks* n = new DocRanks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocRanks::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.video_qddb.DocRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dzen_vdo_srch_ != NULL);
      dzen_vdo_srch_->::gogo::video_qddb::SourceRanks::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vk_iph_ != NULL);
      vk_iph_->::gogo::video_qddb::SourceRanks::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vk_droid_ != NULL);
      vk_droid_->::gogo::video_qddb::SourceRanks::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vk_web_ != NULL);
      vk_web_->::gogo::video_qddb::SourceRanks::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(vk_mvk_ != NULL);
      vk_mvk_->::gogo::video_qddb::SourceRanks::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(vk_all_ != NULL);
      vk_all_->::gogo::video_qddb::SourceRanks::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(vk_rest_ != NULL);
      vk_rest_->::gogo::video_qddb::SourceRanks::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(dzen_mlt_srch_ != NULL);
      dzen_mlt_srch_->::gogo::video_qddb::SourceRanks::Clear();
    }
  }
  doc_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocRanks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.video_qddb.DocRanks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.video_qddb.SourceRanks dzen_vdo_srch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dzen_vdo_srch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.video_qddb.SourceRanks vk_iph = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_iph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.video_qddb.SourceRanks vk_droid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_droid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.video_qddb.SourceRanks vk_web = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_web()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.video_qddb.SourceRanks vk_mvk = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_mvk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.video_qddb.SourceRanks vk_all = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_all()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.video_qddb.SourceRanks vk_rest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_rest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.video_qddb.SourceRanks dzen_mlt_srch = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dzen_mlt_srch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.video_qddb.DocRanks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.video_qddb.DocRanks)
  return false;
#undef DO_
}

void DocRanks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.video_qddb.DocRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 doc_id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->doc_id(), output);
  }

  // optional .gogo.video_qddb.SourceRanks dzen_vdo_srch = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dzen_vdo_srch_, output);
  }

  // optional .gogo.video_qddb.SourceRanks vk_iph = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vk_iph_, output);
  }

  // optional .gogo.video_qddb.SourceRanks vk_droid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->vk_droid_, output);
  }

  // optional .gogo.video_qddb.SourceRanks vk_web = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->vk_web_, output);
  }

  // optional .gogo.video_qddb.SourceRanks vk_mvk = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->vk_mvk_, output);
  }

  // optional .gogo.video_qddb.SourceRanks vk_all = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->vk_all_, output);
  }

  // optional .gogo.video_qddb.SourceRanks vk_rest = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->vk_rest_, output);
  }

  // optional .gogo.video_qddb.SourceRanks dzen_mlt_srch = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->dzen_mlt_srch_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.video_qddb.DocRanks)
}

::google::protobuf::uint8* DocRanks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.video_qddb.DocRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 doc_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->doc_id(), target);
  }

  // optional .gogo.video_qddb.SourceRanks dzen_vdo_srch = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dzen_vdo_srch_, deterministic, target);
  }

  // optional .gogo.video_qddb.SourceRanks vk_iph = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vk_iph_, deterministic, target);
  }

  // optional .gogo.video_qddb.SourceRanks vk_droid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->vk_droid_, deterministic, target);
  }

  // optional .gogo.video_qddb.SourceRanks vk_web = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->vk_web_, deterministic, target);
  }

  // optional .gogo.video_qddb.SourceRanks vk_mvk = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->vk_mvk_, deterministic, target);
  }

  // optional .gogo.video_qddb.SourceRanks vk_all = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->vk_all_, deterministic, target);
  }

  // optional .gogo.video_qddb.SourceRanks vk_rest = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->vk_rest_, deterministic, target);
  }

  // optional .gogo.video_qddb.SourceRanks dzen_mlt_srch = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->dzen_mlt_srch_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.video_qddb.DocRanks)
  return target;
}

size_t DocRanks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.video_qddb.DocRanks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 doc_id = 1;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->doc_id());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .gogo.video_qddb.SourceRanks dzen_vdo_srch = 2;
    if (has_dzen_vdo_srch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dzen_vdo_srch_);
    }

    // optional .gogo.video_qddb.SourceRanks vk_iph = 3;
    if (has_vk_iph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_iph_);
    }

    // optional .gogo.video_qddb.SourceRanks vk_droid = 4;
    if (has_vk_droid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_droid_);
    }

    // optional .gogo.video_qddb.SourceRanks vk_web = 5;
    if (has_vk_web()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_web_);
    }

    // optional .gogo.video_qddb.SourceRanks vk_mvk = 6;
    if (has_vk_mvk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_mvk_);
    }

    // optional .gogo.video_qddb.SourceRanks vk_all = 7;
    if (has_vk_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_all_);
    }

    // optional .gogo.video_qddb.SourceRanks vk_rest = 8;
    if (has_vk_rest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_rest_);
    }

    // optional .gogo.video_qddb.SourceRanks dzen_mlt_srch = 9;
    if (has_dzen_mlt_srch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dzen_mlt_srch_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocRanks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.video_qddb.DocRanks)
  GOOGLE_DCHECK_NE(&from, this);
  const DocRanks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocRanks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.video_qddb.DocRanks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.video_qddb.DocRanks)
    MergeFrom(*source);
  }
}

void DocRanks::MergeFrom(const DocRanks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.video_qddb.DocRanks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dzen_vdo_srch()->::gogo::video_qddb::SourceRanks::MergeFrom(from.dzen_vdo_srch());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vk_iph()->::gogo::video_qddb::SourceRanks::MergeFrom(from.vk_iph());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_vk_droid()->::gogo::video_qddb::SourceRanks::MergeFrom(from.vk_droid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_vk_web()->::gogo::video_qddb::SourceRanks::MergeFrom(from.vk_web());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_vk_mvk()->::gogo::video_qddb::SourceRanks::MergeFrom(from.vk_mvk());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_vk_all()->::gogo::video_qddb::SourceRanks::MergeFrom(from.vk_all());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_vk_rest()->::gogo::video_qddb::SourceRanks::MergeFrom(from.vk_rest());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_dzen_mlt_srch()->::gogo::video_qddb::SourceRanks::MergeFrom(from.dzen_mlt_srch());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_doc_id(from.doc_id());
  }
}

void DocRanks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.video_qddb.DocRanks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocRanks::CopyFrom(const DocRanks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.video_qddb.DocRanks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocRanks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void DocRanks::Swap(DocRanks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocRanks::InternalSwap(DocRanks* other) {
  using std::swap;
  swap(dzen_vdo_srch_, other->dzen_vdo_srch_);
  swap(vk_iph_, other->vk_iph_);
  swap(vk_droid_, other->vk_droid_);
  swap(vk_web_, other->vk_web_);
  swap(vk_mvk_, other->vk_mvk_);
  swap(vk_all_, other->vk_all_);
  swap(vk_rest_, other->vk_rest_);
  swap(dzen_mlt_srch_, other->dzen_mlt_srch_);
  swap(doc_id_, other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocRanks::GetMetadata() const {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocRanks

// required uint32 doc_id = 1;
bool DocRanks::has_doc_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DocRanks::set_has_doc_id() {
  _has_bits_[0] |= 0x00000100u;
}
void DocRanks::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void DocRanks::clear_doc_id() {
  doc_id_ = 0u;
  clear_has_doc_id();
}
::google::protobuf::uint32 DocRanks::doc_id() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.doc_id)
  return doc_id_;
}
void DocRanks::set_doc_id(::google::protobuf::uint32 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.DocRanks.doc_id)
}

// optional .gogo.video_qddb.SourceRanks dzen_vdo_srch = 2;
bool DocRanks::has_dzen_vdo_srch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocRanks::set_has_dzen_vdo_srch() {
  _has_bits_[0] |= 0x00000001u;
}
void DocRanks::clear_has_dzen_vdo_srch() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocRanks::clear_dzen_vdo_srch() {
  if (dzen_vdo_srch_ != NULL) dzen_vdo_srch_->::gogo::video_qddb::SourceRanks::Clear();
  clear_has_dzen_vdo_srch();
}
const ::gogo::video_qddb::SourceRanks& DocRanks::dzen_vdo_srch() const {
  const ::gogo::video_qddb::SourceRanks* p = dzen_vdo_srch_;
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.dzen_vdo_srch)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::video_qddb::SourceRanks*>(
      &::gogo::video_qddb::_SourceRanks_default_instance_);
}
::gogo::video_qddb::SourceRanks* DocRanks::mutable_dzen_vdo_srch() {
  set_has_dzen_vdo_srch();
  if (dzen_vdo_srch_ == NULL) {
    dzen_vdo_srch_ = new ::gogo::video_qddb::SourceRanks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.DocRanks.dzen_vdo_srch)
  return dzen_vdo_srch_;
}
::gogo::video_qddb::SourceRanks* DocRanks::release_dzen_vdo_srch() {
  // @@protoc_insertion_point(field_release:gogo.video_qddb.DocRanks.dzen_vdo_srch)
  clear_has_dzen_vdo_srch();
  ::gogo::video_qddb::SourceRanks* temp = dzen_vdo_srch_;
  dzen_vdo_srch_ = NULL;
  return temp;
}
void DocRanks::set_allocated_dzen_vdo_srch(::gogo::video_qddb::SourceRanks* dzen_vdo_srch) {
  delete dzen_vdo_srch_;
  dzen_vdo_srch_ = dzen_vdo_srch;
  if (dzen_vdo_srch) {
    set_has_dzen_vdo_srch();
  } else {
    clear_has_dzen_vdo_srch();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.video_qddb.DocRanks.dzen_vdo_srch)
}

// optional .gogo.video_qddb.SourceRanks vk_iph = 3;
bool DocRanks::has_vk_iph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocRanks::set_has_vk_iph() {
  _has_bits_[0] |= 0x00000002u;
}
void DocRanks::clear_has_vk_iph() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocRanks::clear_vk_iph() {
  if (vk_iph_ != NULL) vk_iph_->::gogo::video_qddb::SourceRanks::Clear();
  clear_has_vk_iph();
}
const ::gogo::video_qddb::SourceRanks& DocRanks::vk_iph() const {
  const ::gogo::video_qddb::SourceRanks* p = vk_iph_;
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.vk_iph)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::video_qddb::SourceRanks*>(
      &::gogo::video_qddb::_SourceRanks_default_instance_);
}
::gogo::video_qddb::SourceRanks* DocRanks::mutable_vk_iph() {
  set_has_vk_iph();
  if (vk_iph_ == NULL) {
    vk_iph_ = new ::gogo::video_qddb::SourceRanks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.DocRanks.vk_iph)
  return vk_iph_;
}
::gogo::video_qddb::SourceRanks* DocRanks::release_vk_iph() {
  // @@protoc_insertion_point(field_release:gogo.video_qddb.DocRanks.vk_iph)
  clear_has_vk_iph();
  ::gogo::video_qddb::SourceRanks* temp = vk_iph_;
  vk_iph_ = NULL;
  return temp;
}
void DocRanks::set_allocated_vk_iph(::gogo::video_qddb::SourceRanks* vk_iph) {
  delete vk_iph_;
  vk_iph_ = vk_iph;
  if (vk_iph) {
    set_has_vk_iph();
  } else {
    clear_has_vk_iph();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.video_qddb.DocRanks.vk_iph)
}

// optional .gogo.video_qddb.SourceRanks vk_droid = 4;
bool DocRanks::has_vk_droid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocRanks::set_has_vk_droid() {
  _has_bits_[0] |= 0x00000004u;
}
void DocRanks::clear_has_vk_droid() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocRanks::clear_vk_droid() {
  if (vk_droid_ != NULL) vk_droid_->::gogo::video_qddb::SourceRanks::Clear();
  clear_has_vk_droid();
}
const ::gogo::video_qddb::SourceRanks& DocRanks::vk_droid() const {
  const ::gogo::video_qddb::SourceRanks* p = vk_droid_;
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.vk_droid)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::video_qddb::SourceRanks*>(
      &::gogo::video_qddb::_SourceRanks_default_instance_);
}
::gogo::video_qddb::SourceRanks* DocRanks::mutable_vk_droid() {
  set_has_vk_droid();
  if (vk_droid_ == NULL) {
    vk_droid_ = new ::gogo::video_qddb::SourceRanks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.DocRanks.vk_droid)
  return vk_droid_;
}
::gogo::video_qddb::SourceRanks* DocRanks::release_vk_droid() {
  // @@protoc_insertion_point(field_release:gogo.video_qddb.DocRanks.vk_droid)
  clear_has_vk_droid();
  ::gogo::video_qddb::SourceRanks* temp = vk_droid_;
  vk_droid_ = NULL;
  return temp;
}
void DocRanks::set_allocated_vk_droid(::gogo::video_qddb::SourceRanks* vk_droid) {
  delete vk_droid_;
  vk_droid_ = vk_droid;
  if (vk_droid) {
    set_has_vk_droid();
  } else {
    clear_has_vk_droid();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.video_qddb.DocRanks.vk_droid)
}

// optional .gogo.video_qddb.SourceRanks vk_web = 5;
bool DocRanks::has_vk_web() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocRanks::set_has_vk_web() {
  _has_bits_[0] |= 0x00000008u;
}
void DocRanks::clear_has_vk_web() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocRanks::clear_vk_web() {
  if (vk_web_ != NULL) vk_web_->::gogo::video_qddb::SourceRanks::Clear();
  clear_has_vk_web();
}
const ::gogo::video_qddb::SourceRanks& DocRanks::vk_web() const {
  const ::gogo::video_qddb::SourceRanks* p = vk_web_;
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.vk_web)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::video_qddb::SourceRanks*>(
      &::gogo::video_qddb::_SourceRanks_default_instance_);
}
::gogo::video_qddb::SourceRanks* DocRanks::mutable_vk_web() {
  set_has_vk_web();
  if (vk_web_ == NULL) {
    vk_web_ = new ::gogo::video_qddb::SourceRanks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.DocRanks.vk_web)
  return vk_web_;
}
::gogo::video_qddb::SourceRanks* DocRanks::release_vk_web() {
  // @@protoc_insertion_point(field_release:gogo.video_qddb.DocRanks.vk_web)
  clear_has_vk_web();
  ::gogo::video_qddb::SourceRanks* temp = vk_web_;
  vk_web_ = NULL;
  return temp;
}
void DocRanks::set_allocated_vk_web(::gogo::video_qddb::SourceRanks* vk_web) {
  delete vk_web_;
  vk_web_ = vk_web;
  if (vk_web) {
    set_has_vk_web();
  } else {
    clear_has_vk_web();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.video_qddb.DocRanks.vk_web)
}

// optional .gogo.video_qddb.SourceRanks vk_mvk = 6;
bool DocRanks::has_vk_mvk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocRanks::set_has_vk_mvk() {
  _has_bits_[0] |= 0x00000010u;
}
void DocRanks::clear_has_vk_mvk() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocRanks::clear_vk_mvk() {
  if (vk_mvk_ != NULL) vk_mvk_->::gogo::video_qddb::SourceRanks::Clear();
  clear_has_vk_mvk();
}
const ::gogo::video_qddb::SourceRanks& DocRanks::vk_mvk() const {
  const ::gogo::video_qddb::SourceRanks* p = vk_mvk_;
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.vk_mvk)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::video_qddb::SourceRanks*>(
      &::gogo::video_qddb::_SourceRanks_default_instance_);
}
::gogo::video_qddb::SourceRanks* DocRanks::mutable_vk_mvk() {
  set_has_vk_mvk();
  if (vk_mvk_ == NULL) {
    vk_mvk_ = new ::gogo::video_qddb::SourceRanks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.DocRanks.vk_mvk)
  return vk_mvk_;
}
::gogo::video_qddb::SourceRanks* DocRanks::release_vk_mvk() {
  // @@protoc_insertion_point(field_release:gogo.video_qddb.DocRanks.vk_mvk)
  clear_has_vk_mvk();
  ::gogo::video_qddb::SourceRanks* temp = vk_mvk_;
  vk_mvk_ = NULL;
  return temp;
}
void DocRanks::set_allocated_vk_mvk(::gogo::video_qddb::SourceRanks* vk_mvk) {
  delete vk_mvk_;
  vk_mvk_ = vk_mvk;
  if (vk_mvk) {
    set_has_vk_mvk();
  } else {
    clear_has_vk_mvk();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.video_qddb.DocRanks.vk_mvk)
}

// optional .gogo.video_qddb.SourceRanks vk_all = 7;
bool DocRanks::has_vk_all() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocRanks::set_has_vk_all() {
  _has_bits_[0] |= 0x00000020u;
}
void DocRanks::clear_has_vk_all() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocRanks::clear_vk_all() {
  if (vk_all_ != NULL) vk_all_->::gogo::video_qddb::SourceRanks::Clear();
  clear_has_vk_all();
}
const ::gogo::video_qddb::SourceRanks& DocRanks::vk_all() const {
  const ::gogo::video_qddb::SourceRanks* p = vk_all_;
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.vk_all)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::video_qddb::SourceRanks*>(
      &::gogo::video_qddb::_SourceRanks_default_instance_);
}
::gogo::video_qddb::SourceRanks* DocRanks::mutable_vk_all() {
  set_has_vk_all();
  if (vk_all_ == NULL) {
    vk_all_ = new ::gogo::video_qddb::SourceRanks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.DocRanks.vk_all)
  return vk_all_;
}
::gogo::video_qddb::SourceRanks* DocRanks::release_vk_all() {
  // @@protoc_insertion_point(field_release:gogo.video_qddb.DocRanks.vk_all)
  clear_has_vk_all();
  ::gogo::video_qddb::SourceRanks* temp = vk_all_;
  vk_all_ = NULL;
  return temp;
}
void DocRanks::set_allocated_vk_all(::gogo::video_qddb::SourceRanks* vk_all) {
  delete vk_all_;
  vk_all_ = vk_all;
  if (vk_all) {
    set_has_vk_all();
  } else {
    clear_has_vk_all();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.video_qddb.DocRanks.vk_all)
}

// optional .gogo.video_qddb.SourceRanks vk_rest = 8;
bool DocRanks::has_vk_rest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DocRanks::set_has_vk_rest() {
  _has_bits_[0] |= 0x00000040u;
}
void DocRanks::clear_has_vk_rest() {
  _has_bits_[0] &= ~0x00000040u;
}
void DocRanks::clear_vk_rest() {
  if (vk_rest_ != NULL) vk_rest_->::gogo::video_qddb::SourceRanks::Clear();
  clear_has_vk_rest();
}
const ::gogo::video_qddb::SourceRanks& DocRanks::vk_rest() const {
  const ::gogo::video_qddb::SourceRanks* p = vk_rest_;
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.vk_rest)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::video_qddb::SourceRanks*>(
      &::gogo::video_qddb::_SourceRanks_default_instance_);
}
::gogo::video_qddb::SourceRanks* DocRanks::mutable_vk_rest() {
  set_has_vk_rest();
  if (vk_rest_ == NULL) {
    vk_rest_ = new ::gogo::video_qddb::SourceRanks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.DocRanks.vk_rest)
  return vk_rest_;
}
::gogo::video_qddb::SourceRanks* DocRanks::release_vk_rest() {
  // @@protoc_insertion_point(field_release:gogo.video_qddb.DocRanks.vk_rest)
  clear_has_vk_rest();
  ::gogo::video_qddb::SourceRanks* temp = vk_rest_;
  vk_rest_ = NULL;
  return temp;
}
void DocRanks::set_allocated_vk_rest(::gogo::video_qddb::SourceRanks* vk_rest) {
  delete vk_rest_;
  vk_rest_ = vk_rest;
  if (vk_rest) {
    set_has_vk_rest();
  } else {
    clear_has_vk_rest();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.video_qddb.DocRanks.vk_rest)
}

// optional .gogo.video_qddb.SourceRanks dzen_mlt_srch = 9;
bool DocRanks::has_dzen_mlt_srch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DocRanks::set_has_dzen_mlt_srch() {
  _has_bits_[0] |= 0x00000080u;
}
void DocRanks::clear_has_dzen_mlt_srch() {
  _has_bits_[0] &= ~0x00000080u;
}
void DocRanks::clear_dzen_mlt_srch() {
  if (dzen_mlt_srch_ != NULL) dzen_mlt_srch_->::gogo::video_qddb::SourceRanks::Clear();
  clear_has_dzen_mlt_srch();
}
const ::gogo::video_qddb::SourceRanks& DocRanks::dzen_mlt_srch() const {
  const ::gogo::video_qddb::SourceRanks* p = dzen_mlt_srch_;
  // @@protoc_insertion_point(field_get:gogo.video_qddb.DocRanks.dzen_mlt_srch)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::video_qddb::SourceRanks*>(
      &::gogo::video_qddb::_SourceRanks_default_instance_);
}
::gogo::video_qddb::SourceRanks* DocRanks::mutable_dzen_mlt_srch() {
  set_has_dzen_mlt_srch();
  if (dzen_mlt_srch_ == NULL) {
    dzen_mlt_srch_ = new ::gogo::video_qddb::SourceRanks;
  }
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.DocRanks.dzen_mlt_srch)
  return dzen_mlt_srch_;
}
::gogo::video_qddb::SourceRanks* DocRanks::release_dzen_mlt_srch() {
  // @@protoc_insertion_point(field_release:gogo.video_qddb.DocRanks.dzen_mlt_srch)
  clear_has_dzen_mlt_srch();
  ::gogo::video_qddb::SourceRanks* temp = dzen_mlt_srch_;
  dzen_mlt_srch_ = NULL;
  return temp;
}
void DocRanks::set_allocated_dzen_mlt_srch(::gogo::video_qddb::SourceRanks* dzen_mlt_srch) {
  delete dzen_mlt_srch_;
  dzen_mlt_srch_ = dzen_mlt_srch;
  if (dzen_mlt_srch) {
    set_has_dzen_mlt_srch();
  } else {
    clear_has_dzen_mlt_srch();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.video_qddb.DocRanks.dzen_mlt_srch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoRanks::kGeoIdFieldNumber;
const int GeoRanks::kDocRanksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoRanks::GeoRanks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_5fqddb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.video_qddb.GeoRanks)
}
GeoRanks::GeoRanks(const GeoRanks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      doc_ranks_(from.doc_ranks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geo_id_ = from.geo_id_;
  // @@protoc_insertion_point(copy_constructor:gogo.video_qddb.GeoRanks)
}

void GeoRanks::SharedCtor() {
  _cached_size_ = 0;
  geo_id_ = 0u;
}

GeoRanks::~GeoRanks() {
  // @@protoc_insertion_point(destructor:gogo.video_qddb.GeoRanks)
  SharedDtor();
}

void GeoRanks::SharedDtor() {
}

void GeoRanks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoRanks::descriptor() {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoRanks& GeoRanks::default_instance() {
  protobuf_video_5fqddb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GeoRanks* GeoRanks::New(::google::protobuf::Arena* arena) const {
  GeoRanks* n = new GeoRanks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoRanks::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.video_qddb.GeoRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_ranks_.Clear();
  geo_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeoRanks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.video_qddb.GeoRanks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.video_qddb.DocRanks doc_ranks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doc_ranks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.video_qddb.GeoRanks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.video_qddb.GeoRanks)
  return false;
#undef DO_
}

void GeoRanks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.video_qddb.GeoRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo_id(), output);
  }

  // repeated .gogo.video_qddb.DocRanks doc_ranks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_ranks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doc_ranks(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.video_qddb.GeoRanks)
}

::google::protobuf::uint8* GeoRanks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.video_qddb.GeoRanks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo_id(), target);
  }

  // repeated .gogo.video_qddb.DocRanks doc_ranks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_ranks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->doc_ranks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.video_qddb.GeoRanks)
  return target;
}

size_t GeoRanks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.video_qddb.GeoRanks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 geo_id = 1;
  if (has_geo_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo_id());
  }
  // repeated .gogo.video_qddb.DocRanks doc_ranks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->doc_ranks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc_ranks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoRanks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.video_qddb.GeoRanks)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoRanks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoRanks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.video_qddb.GeoRanks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.video_qddb.GeoRanks)
    MergeFrom(*source);
  }
}

void GeoRanks::MergeFrom(const GeoRanks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.video_qddb.GeoRanks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doc_ranks_.MergeFrom(from.doc_ranks_);
  if (from.has_geo_id()) {
    set_geo_id(from.geo_id());
  }
}

void GeoRanks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.video_qddb.GeoRanks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRanks::CopyFrom(const GeoRanks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.video_qddb.GeoRanks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRanks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->doc_ranks())) return false;
  return true;
}

void GeoRanks::Swap(GeoRanks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoRanks::InternalSwap(GeoRanks* other) {
  using std::swap;
  doc_ranks_.InternalSwap(&other->doc_ranks_);
  swap(geo_id_, other->geo_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoRanks::GetMetadata() const {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoRanks

// required uint32 geo_id = 1;
bool GeoRanks::has_geo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoRanks::set_has_geo_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoRanks::clear_has_geo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoRanks::clear_geo_id() {
  geo_id_ = 0u;
  clear_has_geo_id();
}
::google::protobuf::uint32 GeoRanks::geo_id() const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.GeoRanks.geo_id)
  return geo_id_;
}
void GeoRanks::set_geo_id(::google::protobuf::uint32 value) {
  set_has_geo_id();
  geo_id_ = value;
  // @@protoc_insertion_point(field_set:gogo.video_qddb.GeoRanks.geo_id)
}

// repeated .gogo.video_qddb.DocRanks doc_ranks = 2;
int GeoRanks::doc_ranks_size() const {
  return doc_ranks_.size();
}
void GeoRanks::clear_doc_ranks() {
  doc_ranks_.Clear();
}
const ::gogo::video_qddb::DocRanks& GeoRanks::doc_ranks(int index) const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.GeoRanks.doc_ranks)
  return doc_ranks_.Get(index);
}
::gogo::video_qddb::DocRanks* GeoRanks::mutable_doc_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.GeoRanks.doc_ranks)
  return doc_ranks_.Mutable(index);
}
::gogo::video_qddb::DocRanks* GeoRanks::add_doc_ranks() {
  // @@protoc_insertion_point(field_add:gogo.video_qddb.GeoRanks.doc_ranks)
  return doc_ranks_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::video_qddb::DocRanks >*
GeoRanks::mutable_doc_ranks() {
  // @@protoc_insertion_point(field_mutable_list:gogo.video_qddb.GeoRanks.doc_ranks)
  return &doc_ranks_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::video_qddb::DocRanks >&
GeoRanks::doc_ranks() const {
  // @@protoc_insertion_point(field_list:gogo.video_qddb.GeoRanks.doc_ranks)
  return doc_ranks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryRecord::kGeoRanksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRecord::QueryRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_video_5fqddb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.video_qddb.QueryRecord)
}
QueryRecord::QueryRecord(const QueryRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      geo_ranks_(from.geo_ranks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gogo.video_qddb.QueryRecord)
}

void QueryRecord::SharedCtor() {
  _cached_size_ = 0;
}

QueryRecord::~QueryRecord() {
  // @@protoc_insertion_point(destructor:gogo.video_qddb.QueryRecord)
  SharedDtor();
}

void QueryRecord::SharedDtor() {
}

void QueryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRecord::descriptor() {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryRecord& QueryRecord::default_instance() {
  protobuf_video_5fqddb_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryRecord* QueryRecord::New(::google::protobuf::Arena* arena) const {
  QueryRecord* n = new QueryRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.video_qddb.QueryRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_ranks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.video_qddb.QueryRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.video_qddb.GeoRanks geo_ranks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geo_ranks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.video_qddb.QueryRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.video_qddb.QueryRecord)
  return false;
#undef DO_
}

void QueryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.video_qddb.QueryRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.video_qddb.GeoRanks geo_ranks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_ranks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geo_ranks(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.video_qddb.QueryRecord)
}

::google::protobuf::uint8* QueryRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.video_qddb.QueryRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.video_qddb.GeoRanks geo_ranks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_ranks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->geo_ranks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.video_qddb.QueryRecord)
  return target;
}

size_t QueryRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.video_qddb.QueryRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.video_qddb.GeoRanks geo_ranks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_ranks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_ranks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.video_qddb.QueryRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.video_qddb.QueryRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.video_qddb.QueryRecord)
    MergeFrom(*source);
  }
}

void QueryRecord::MergeFrom(const QueryRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.video_qddb.QueryRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_ranks_.MergeFrom(from.geo_ranks_);
}

void QueryRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.video_qddb.QueryRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRecord::CopyFrom(const QueryRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.video_qddb.QueryRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRecord::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->geo_ranks())) return false;
  return true;
}

void QueryRecord::Swap(QueryRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRecord::InternalSwap(QueryRecord* other) {
  using std::swap;
  geo_ranks_.InternalSwap(&other->geo_ranks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryRecord::GetMetadata() const {
  protobuf_video_5fqddb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_video_5fqddb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRecord

// repeated .gogo.video_qddb.GeoRanks geo_ranks = 1;
int QueryRecord::geo_ranks_size() const {
  return geo_ranks_.size();
}
void QueryRecord::clear_geo_ranks() {
  geo_ranks_.Clear();
}
const ::gogo::video_qddb::GeoRanks& QueryRecord::geo_ranks(int index) const {
  // @@protoc_insertion_point(field_get:gogo.video_qddb.QueryRecord.geo_ranks)
  return geo_ranks_.Get(index);
}
::gogo::video_qddb::GeoRanks* QueryRecord::mutable_geo_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.video_qddb.QueryRecord.geo_ranks)
  return geo_ranks_.Mutable(index);
}
::gogo::video_qddb::GeoRanks* QueryRecord::add_geo_ranks() {
  // @@protoc_insertion_point(field_add:gogo.video_qddb.QueryRecord.geo_ranks)
  return geo_ranks_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::video_qddb::GeoRanks >*
QueryRecord::mutable_geo_ranks() {
  // @@protoc_insertion_point(field_mutable_list:gogo.video_qddb.QueryRecord.geo_ranks)
  return &geo_ranks_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::video_qddb::GeoRanks >&
QueryRecord::geo_ranks() const {
  // @@protoc_insertion_point(field_list:gogo.video_qddb.QueryRecord.geo_ranks)
  return geo_ranks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace video_qddb
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
