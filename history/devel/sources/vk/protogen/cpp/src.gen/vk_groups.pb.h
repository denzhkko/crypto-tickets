// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_groups.proto

#ifndef PROTOBUF_vk_5fgroups_2eproto__INCLUDED
#define PROTOBUF_vk_5fgroups_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class VkGroup;
class VkGroupDefaultTypeInternal;
extern VkGroupDefaultTypeInternal _VkGroup_default_instance_;
class VkGroupContactInfo;
class VkGroupContactInfoDefaultTypeInternal;
extern VkGroupContactInfoDefaultTypeInternal _VkGroupContactInfo_default_instance_;
class VkGroupCoverInfo;
class VkGroupCoverInfoDefaultTypeInternal;
extern VkGroupCoverInfoDefaultTypeInternal _VkGroupCoverInfo_default_instance_;
class VkGroupImageInfo;
class VkGroupImageInfoDefaultTypeInternal;
extern VkGroupImageInfoDefaultTypeInternal _VkGroupImageInfo_default_instance_;
class VkGroupLocation;
class VkGroupLocationDefaultTypeInternal;
extern VkGroupLocationDefaultTypeInternal _VkGroupLocation_default_instance_;
class VkGroupMarketInfo;
class VkGroupMarketInfoDefaultTypeInternal;
extern VkGroupMarketInfoDefaultTypeInternal _VkGroupMarketInfo_default_instance_;
class VkGroupPlaceInfo;
class VkGroupPlaceInfoDefaultTypeInternal;
extern VkGroupPlaceInfoDefaultTypeInternal _VkGroupPlaceInfo_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_vk_5fgroups_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_vk_5fgroups_2eproto

enum VkGroupAccessType {
  OPEN = 0,
  CLOSED = 1,
  PRIVATE = 2
};
bool VkGroupAccessType_IsValid(int value);
const VkGroupAccessType VkGroupAccessType_MIN = OPEN;
const VkGroupAccessType VkGroupAccessType_MAX = PRIVATE;
const int VkGroupAccessType_ARRAYSIZE = VkGroupAccessType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkGroupAccessType_descriptor();
inline const ::std::string& VkGroupAccessType_Name(VkGroupAccessType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkGroupAccessType_descriptor(), value);
}
inline bool VkGroupAccessType_Parse(
    const ::std::string& name, VkGroupAccessType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkGroupAccessType>(
    VkGroupAccessType_descriptor(), name, value);
}
enum VkGroupType {
  GROUP = 0,
  PAGE = 1,
  EVENT = 2
};
bool VkGroupType_IsValid(int value);
const VkGroupType VkGroupType_MIN = GROUP;
const VkGroupType VkGroupType_MAX = EVENT;
const int VkGroupType_ARRAYSIZE = VkGroupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkGroupType_descriptor();
inline const ::std::string& VkGroupType_Name(VkGroupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkGroupType_descriptor(), value);
}
inline bool VkGroupType_Parse(
    const ::std::string& name, VkGroupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkGroupType>(
    VkGroupType_descriptor(), name, value);
}
enum VkGroupAgeLimit {
  NO_LIMIT = 0,
  FROM_16 = 1,
  FROM_18 = 2
};
bool VkGroupAgeLimit_IsValid(int value);
const VkGroupAgeLimit VkGroupAgeLimit_MIN = NO_LIMIT;
const VkGroupAgeLimit VkGroupAgeLimit_MAX = FROM_18;
const int VkGroupAgeLimit_ARRAYSIZE = VkGroupAgeLimit_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkGroupAgeLimit_descriptor();
inline const ::std::string& VkGroupAgeLimit_Name(VkGroupAgeLimit value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkGroupAgeLimit_descriptor(), value);
}
inline bool VkGroupAgeLimit_Parse(
    const ::std::string& name, VkGroupAgeLimit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkGroupAgeLimit>(
    VkGroupAgeLimit_descriptor(), name, value);
}
enum VkGroupDeactivationReason {
  DELETED = 0,
  BANNED = 1
};
bool VkGroupDeactivationReason_IsValid(int value);
const VkGroupDeactivationReason VkGroupDeactivationReason_MIN = DELETED;
const VkGroupDeactivationReason VkGroupDeactivationReason_MAX = BANNED;
const int VkGroupDeactivationReason_ARRAYSIZE = VkGroupDeactivationReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkGroupDeactivationReason_descriptor();
inline const ::std::string& VkGroupDeactivationReason_Name(VkGroupDeactivationReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkGroupDeactivationReason_descriptor(), value);
}
inline bool VkGroupDeactivationReason_Parse(
    const ::std::string& name, VkGroupDeactivationReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkGroupDeactivationReason>(
    VkGroupDeactivationReason_descriptor(), name, value);
}
enum VkGroupMainSectionType {
  NONE = 0,
  PHOTOS = 1,
  TOPICS = 2,
  AUDIOS = 3,
  VIDEOS = 4,
  MARKET = 5
};
bool VkGroupMainSectionType_IsValid(int value);
const VkGroupMainSectionType VkGroupMainSectionType_MIN = NONE;
const VkGroupMainSectionType VkGroupMainSectionType_MAX = MARKET;
const int VkGroupMainSectionType_ARRAYSIZE = VkGroupMainSectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkGroupMainSectionType_descriptor();
inline const ::std::string& VkGroupMainSectionType_Name(VkGroupMainSectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkGroupMainSectionType_descriptor(), value);
}
inline bool VkGroupMainSectionType_Parse(
    const ::std::string& name, VkGroupMainSectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkGroupMainSectionType>(
    VkGroupMainSectionType_descriptor(), name, value);
}
// ===================================================================

class VkGroupLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkGroupLocation) */ {
 public:
  VkGroupLocation();
  virtual ~VkGroupLocation();

  VkGroupLocation(const VkGroupLocation& from);

  inline VkGroupLocation& operator=(const VkGroupLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkGroupLocation(VkGroupLocation&& from) noexcept
    : VkGroupLocation() {
    *this = ::std::move(from);
  }

  inline VkGroupLocation& operator=(VkGroupLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkGroupLocation& default_instance();

  static inline const VkGroupLocation* internal_default_instance() {
    return reinterpret_cast<const VkGroupLocation*>(
               &_VkGroupLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VkGroupLocation* other);
  friend void swap(VkGroupLocation& a, VkGroupLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkGroupLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  VkGroupLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkGroupLocation& from);
  void MergeFrom(const VkGroupLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkGroupLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkGroupLocation)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_title();
  void clear_has_title();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int64 id_;
  friend struct protobuf_vk_5fgroups_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkGroupContactInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkGroupContactInfo) */ {
 public:
  VkGroupContactInfo();
  virtual ~VkGroupContactInfo();

  VkGroupContactInfo(const VkGroupContactInfo& from);

  inline VkGroupContactInfo& operator=(const VkGroupContactInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkGroupContactInfo(VkGroupContactInfo&& from) noexcept
    : VkGroupContactInfo() {
    *this = ::std::move(from);
  }

  inline VkGroupContactInfo& operator=(VkGroupContactInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkGroupContactInfo& default_instance();

  static inline const VkGroupContactInfo* internal_default_instance() {
    return reinterpret_cast<const VkGroupContactInfo*>(
               &_VkGroupContactInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VkGroupContactInfo* other);
  friend void swap(VkGroupContactInfo& a, VkGroupContactInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkGroupContactInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VkGroupContactInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkGroupContactInfo& from);
  void MergeFrom(const VkGroupContactInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkGroupContactInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // optional string phone = 3;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 3;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // optional string email = 4;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional int64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkGroupContactInfo)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_desc();
  void clear_has_desc();
  void set_has_phone();
  void clear_has_phone();
  void set_has_email();
  void clear_has_email();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int64 user_id_;
  friend struct protobuf_vk_5fgroups_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkGroupImageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkGroupImageInfo) */ {
 public:
  VkGroupImageInfo();
  virtual ~VkGroupImageInfo();

  VkGroupImageInfo(const VkGroupImageInfo& from);

  inline VkGroupImageInfo& operator=(const VkGroupImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkGroupImageInfo(VkGroupImageInfo&& from) noexcept
    : VkGroupImageInfo() {
    *this = ::std::move(from);
  }

  inline VkGroupImageInfo& operator=(VkGroupImageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkGroupImageInfo& default_instance();

  static inline const VkGroupImageInfo* internal_default_instance() {
    return reinterpret_cast<const VkGroupImageInfo*>(
               &_VkGroupImageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VkGroupImageInfo* other);
  friend void swap(VkGroupImageInfo& a, VkGroupImageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkGroupImageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VkGroupImageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkGroupImageInfo& from);
  void MergeFrom(const VkGroupImageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkGroupImageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional int32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkGroupImageInfo)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend struct protobuf_vk_5fgroups_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkGroupCoverInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkGroupCoverInfo) */ {
 public:
  VkGroupCoverInfo();
  virtual ~VkGroupCoverInfo();

  VkGroupCoverInfo(const VkGroupCoverInfo& from);

  inline VkGroupCoverInfo& operator=(const VkGroupCoverInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkGroupCoverInfo(VkGroupCoverInfo&& from) noexcept
    : VkGroupCoverInfo() {
    *this = ::std::move(from);
  }

  inline VkGroupCoverInfo& operator=(VkGroupCoverInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkGroupCoverInfo& default_instance();

  static inline const VkGroupCoverInfo* internal_default_instance() {
    return reinterpret_cast<const VkGroupCoverInfo*>(
               &_VkGroupCoverInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VkGroupCoverInfo* other);
  friend void swap(VkGroupCoverInfo& a, VkGroupCoverInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkGroupCoverInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VkGroupCoverInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkGroupCoverInfo& from);
  void MergeFrom(const VkGroupCoverInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkGroupCoverInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VkGroupImageInfo images = 2;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::VkGroupImageInfo& images(int index) const;
  ::ru::mail::go::webbase::blobs::VkGroupImageInfo* mutable_images(int index);
  ::ru::mail::go::webbase::blobs::VkGroupImageInfo* add_images();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupImageInfo >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupImageInfo >&
      images() const;

  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkGroupCoverInfo)
 private:
  void set_has_enabled();
  void clear_has_enabled();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupImageInfo > images_;
  bool enabled_;
  friend struct protobuf_vk_5fgroups_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkGroupMarketInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkGroupMarketInfo) */ {
 public:
  VkGroupMarketInfo();
  virtual ~VkGroupMarketInfo();

  VkGroupMarketInfo(const VkGroupMarketInfo& from);

  inline VkGroupMarketInfo& operator=(const VkGroupMarketInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkGroupMarketInfo(VkGroupMarketInfo&& from) noexcept
    : VkGroupMarketInfo() {
    *this = ::std::move(from);
  }

  inline VkGroupMarketInfo& operator=(VkGroupMarketInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkGroupMarketInfo& default_instance();

  static inline const VkGroupMarketInfo* internal_default_instance() {
    return reinterpret_cast<const VkGroupMarketInfo*>(
               &_VkGroupMarketInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VkGroupMarketInfo* other);
  friend void swap(VkGroupMarketInfo& a, VkGroupMarketInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkGroupMarketInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VkGroupMarketInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkGroupMarketInfo& from);
  void MergeFrom(const VkGroupMarketInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkGroupMarketInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string currency_sign = 7;
  bool has_currency_sign() const;
  void clear_currency_sign();
  static const int kCurrencySignFieldNumber = 7;
  const ::std::string& currency_sign() const;
  void set_currency_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_currency_sign(::std::string&& value);
  #endif
  void set_currency_sign(const char* value);
  void set_currency_sign(const char* value, size_t size);
  ::std::string* mutable_currency_sign();
  ::std::string* release_currency_sign();
  void set_allocated_currency_sign(::std::string* currency_sign);

  // optional string currency_text = 8;
  bool has_currency_text() const;
  void clear_currency_text();
  static const int kCurrencyTextFieldNumber = 8;
  const ::std::string& currency_text() const;
  void set_currency_text(const ::std::string& value);
  #if LANG_CXX11
  void set_currency_text(::std::string&& value);
  #endif
  void set_currency_text(const char* value);
  void set_currency_text(const char* value, size_t size);
  ::std::string* mutable_currency_text();
  ::std::string* release_currency_text();
  void set_allocated_currency_text(::std::string* currency_text);

  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // optional int32 price_min = 2;
  bool has_price_min() const;
  void clear_price_min();
  static const int kPriceMinFieldNumber = 2;
  ::google::protobuf::int32 price_min() const;
  void set_price_min(::google::protobuf::int32 value);

  // optional int64 main_album_id = 4;
  bool has_main_album_id() const;
  void clear_main_album_id();
  static const int kMainAlbumIdFieldNumber = 4;
  ::google::protobuf::int64 main_album_id() const;
  void set_main_album_id(::google::protobuf::int64 value);

  // optional int64 contact_id = 5;
  bool has_contact_id() const;
  void clear_contact_id();
  static const int kContactIdFieldNumber = 5;
  ::google::protobuf::int64 contact_id() const;
  void set_contact_id(::google::protobuf::int64 value);

  // optional int64 currency_id = 6;
  bool has_currency_id() const;
  void clear_currency_id();
  static const int kCurrencyIdFieldNumber = 6;
  ::google::protobuf::int64 currency_id() const;
  void set_currency_id(::google::protobuf::int64 value);

  // optional int32 price_max = 3;
  bool has_price_max() const;
  void clear_price_max();
  static const int kPriceMaxFieldNumber = 3;
  ::google::protobuf::int32 price_max() const;
  void set_price_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkGroupMarketInfo)
 private:
  void set_has_enabled();
  void clear_has_enabled();
  void set_has_price_min();
  void clear_has_price_min();
  void set_has_price_max();
  void clear_has_price_max();
  void set_has_main_album_id();
  void clear_has_main_album_id();
  void set_has_contact_id();
  void clear_has_contact_id();
  void set_has_currency_id();
  void clear_has_currency_id();
  void set_has_currency_sign();
  void clear_has_currency_sign();
  void set_has_currency_text();
  void clear_has_currency_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr currency_sign_;
  ::google::protobuf::internal::ArenaStringPtr currency_text_;
  bool enabled_;
  ::google::protobuf::int32 price_min_;
  ::google::protobuf::int64 main_album_id_;
  ::google::protobuf::int64 contact_id_;
  ::google::protobuf::int64 currency_id_;
  ::google::protobuf::int32 price_max_;
  friend struct protobuf_vk_5fgroups_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkGroupPlaceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkGroupPlaceInfo) */ {
 public:
  VkGroupPlaceInfo();
  virtual ~VkGroupPlaceInfo();

  VkGroupPlaceInfo(const VkGroupPlaceInfo& from);

  inline VkGroupPlaceInfo& operator=(const VkGroupPlaceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkGroupPlaceInfo(VkGroupPlaceInfo&& from) noexcept
    : VkGroupPlaceInfo() {
    *this = ::std::move(from);
  }

  inline VkGroupPlaceInfo& operator=(VkGroupPlaceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkGroupPlaceInfo& default_instance();

  static inline const VkGroupPlaceInfo* internal_default_instance() {
    return reinterpret_cast<const VkGroupPlaceInfo*>(
               &_VkGroupPlaceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VkGroupPlaceInfo* other);
  friend void swap(VkGroupPlaceInfo& a, VkGroupPlaceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkGroupPlaceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VkGroupPlaceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkGroupPlaceInfo& from);
  void MergeFrom(const VkGroupPlaceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkGroupPlaceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string address = 8;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 8;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional double latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // optional int64 country_id = 6;
  bool has_country_id() const;
  void clear_country_id();
  static const int kCountryIdFieldNumber = 6;
  ::google::protobuf::int64 country_id() const;
  void set_country_id(::google::protobuf::int64 value);

  // optional int64 city_id = 7;
  bool has_city_id() const;
  void clear_city_id();
  static const int kCityIdFieldNumber = 7;
  ::google::protobuf::int64 city_id() const;
  void set_city_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkGroupPlaceInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_title();
  void clear_has_title();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_type();
  void clear_has_type();
  void set_has_country_id();
  void clear_has_country_id();
  void set_has_city_id();
  void clear_has_city_id();
  void set_has_address();
  void clear_has_address();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int64 id_;
  double latitude_;
  double longitude_;
  ::google::protobuf::int64 country_id_;
  ::google::protobuf::int64 city_id_;
  friend struct protobuf_vk_5fgroups_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VkGroup) */ {
 public:
  VkGroup();
  virtual ~VkGroup();

  VkGroup(const VkGroup& from);

  inline VkGroup& operator=(const VkGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkGroup(VkGroup&& from) noexcept
    : VkGroup() {
    *this = ::std::move(from);
  }

  inline VkGroup& operator=(VkGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkGroup& default_instance();

  static inline const VkGroup* internal_default_instance() {
    return reinterpret_cast<const VkGroup*>(
               &_VkGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VkGroup* other);
  friend void swap(VkGroup& a, VkGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  VkGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkGroup& from);
  void MergeFrom(const VkGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.VkGroupContactInfo contacts = 11;
  int contacts_size() const;
  void clear_contacts();
  static const int kContactsFieldNumber = 11;
  const ::ru::mail::go::webbase::blobs::VkGroupContactInfo& contacts(int index) const;
  ::ru::mail::go::webbase::blobs::VkGroupContactInfo* mutable_contacts(int index);
  ::ru::mail::go::webbase::blobs::VkGroupContactInfo* add_contacts();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupContactInfo >*
      mutable_contacts();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupContactInfo >&
      contacts() const;

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string screen_name = 3;
  bool has_screen_name() const;
  void clear_screen_name();
  static const int kScreenNameFieldNumber = 3;
  const ::std::string& screen_name() const;
  void set_screen_name(const ::std::string& value);
  #if LANG_CXX11
  void set_screen_name(::std::string&& value);
  #endif
  void set_screen_name(const char* value);
  void set_screen_name(const char* value, size_t size);
  ::std::string* mutable_screen_name();
  ::std::string* release_screen_name();
  void set_allocated_screen_name(::std::string* screen_name);

  // optional string page_status_bar = 8;
  bool has_page_status_bar() const;
  void clear_page_status_bar();
  static const int kPageStatusBarFieldNumber = 8;
  const ::std::string& page_status_bar() const;
  void set_page_status_bar(const ::std::string& value);
  #if LANG_CXX11
  void set_page_status_bar(::std::string&& value);
  #endif
  void set_page_status_bar(const char* value);
  void set_page_status_bar(const char* value, size_t size);
  ::std::string* mutable_page_status_bar();
  ::std::string* release_page_status_bar();
  void set_allocated_page_status_bar(::std::string* page_status_bar);

  // optional string description = 14;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 14;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string public_date_label = 21;
  bool has_public_date_label() const;
  void clear_public_date_label();
  static const int kPublicDateLabelFieldNumber = 21;
  const ::std::string& public_date_label() const;
  void set_public_date_label(const ::std::string& value);
  #if LANG_CXX11
  void set_public_date_label(::std::string&& value);
  #endif
  void set_public_date_label(const char* value);
  void set_public_date_label(const char* value, size_t size);
  ::std::string* mutable_public_date_label();
  ::std::string* release_public_date_label();
  void set_allocated_public_date_label(::std::string* public_date_label);

  // optional string site_url = 22;
  bool has_site_url() const;
  void clear_site_url();
  static const int kSiteUrlFieldNumber = 22;
  const ::std::string& site_url() const;
  void set_site_url(const ::std::string& value);
  #if LANG_CXX11
  void set_site_url(::std::string&& value);
  #endif
  void set_site_url(const char* value);
  void set_site_url(const char* value, size_t size);
  ::std::string* mutable_site_url();
  ::std::string* release_site_url();
  void set_allocated_site_url(::std::string* site_url);

  // optional string group_status = 25;
  bool has_group_status() const;
  void clear_group_status();
  static const int kGroupStatusFieldNumber = 25;
  const ::std::string& group_status() const;
  void set_group_status(const ::std::string& value);
  #if LANG_CXX11
  void set_group_status(::std::string&& value);
  #endif
  void set_group_status(const char* value);
  void set_group_status(const char* value, size_t size);
  ::std::string* mutable_group_status();
  ::std::string* release_group_status();
  void set_allocated_group_status(::std::string* group_status);

  // optional string wiki_page = 28;
  bool has_wiki_page() const;
  void clear_wiki_page();
  static const int kWikiPageFieldNumber = 28;
  const ::std::string& wiki_page() const;
  void set_wiki_page(const ::std::string& value);
  #if LANG_CXX11
  void set_wiki_page(::std::string&& value);
  #endif
  void set_wiki_page(const char* value);
  void set_wiki_page(const char* value, size_t size);
  ::std::string* mutable_wiki_page();
  ::std::string* release_wiki_page();
  void set_allocated_wiki_page(::std::string* wiki_page);

  // optional .ru.mail.go.webbase.blobs.VkGroupLocation city = 10;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 10;
  const ::ru::mail::go::webbase::blobs::VkGroupLocation& city() const;
  ::ru::mail::go::webbase::blobs::VkGroupLocation* mutable_city();
  ::ru::mail::go::webbase::blobs::VkGroupLocation* release_city();
  void set_allocated_city(::ru::mail::go::webbase::blobs::VkGroupLocation* city);

  // optional .ru.mail.go.webbase.blobs.VkGroupLocation country = 12;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 12;
  const ::ru::mail::go::webbase::blobs::VkGroupLocation& country() const;
  ::ru::mail::go::webbase::blobs::VkGroupLocation* mutable_country();
  ::ru::mail::go::webbase::blobs::VkGroupLocation* release_country();
  void set_allocated_country(::ru::mail::go::webbase::blobs::VkGroupLocation* country);

  // optional .ru.mail.go.webbase.blobs.VkGroupCoverInfo cover = 13;
  bool has_cover() const;
  void clear_cover();
  static const int kCoverFieldNumber = 13;
  const ::ru::mail::go::webbase::blobs::VkGroupCoverInfo& cover() const;
  ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* mutable_cover();
  ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* release_cover();
  void set_allocated_cover(::ru::mail::go::webbase::blobs::VkGroupCoverInfo* cover);

  // optional .ru.mail.go.webbase.blobs.VkGroupMarketInfo market = 18;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 18;
  const ::ru::mail::go::webbase::blobs::VkGroupMarketInfo& market() const;
  ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* mutable_market();
  ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* release_market();
  void set_allocated_market(::ru::mail::go::webbase::blobs::VkGroupMarketInfo* market);

  // optional .ru.mail.go.webbase.blobs.VkGroupPlaceInfo place = 20;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 20;
  const ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo& place() const;
  ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* mutable_place();
  ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* release_place();
  void set_allocated_place(::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* place);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .ru.mail.go.webbase.blobs.VkGroupAccessType access_level = 4;
  bool has_access_level() const;
  void clear_access_level();
  static const int kAccessLevelFieldNumber = 4;
  ::ru::mail::go::webbase::blobs::VkGroupAccessType access_level() const;
  void set_access_level(::ru::mail::go::webbase::blobs::VkGroupAccessType value);

  // optional .ru.mail.go.webbase.blobs.VkGroupDeactivationReason deactivation_reason = 5;
  bool has_deactivation_reason() const;
  void clear_deactivation_reason();
  static const int kDeactivationReasonFieldNumber = 5;
  ::ru::mail::go::webbase::blobs::VkGroupDeactivationReason deactivation_reason() const;
  void set_deactivation_reason(::ru::mail::go::webbase::blobs::VkGroupDeactivationReason value);

  // optional .ru.mail.go.webbase.blobs.VkGroupType type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::ru::mail::go::webbase::blobs::VkGroupType type() const;
  void set_type(::ru::mail::go::webbase::blobs::VkGroupType value);

  // optional .ru.mail.go.webbase.blobs.VkGroupAgeLimit age_limits = 9;
  bool has_age_limits() const;
  void clear_age_limits();
  static const int kAgeLimitsFieldNumber = 9;
  ::ru::mail::go::webbase::blobs::VkGroupAgeLimit age_limits() const;
  void set_age_limits(::ru::mail::go::webbase::blobs::VkGroupAgeLimit value);

  // optional int64 fixed_wall_post_id = 15;
  bool has_fixed_wall_post_id() const;
  void clear_fixed_wall_post_id();
  static const int kFixedWallPostIdFieldNumber = 15;
  ::google::protobuf::int64 fixed_wall_post_id() const;
  void set_fixed_wall_post_id(::google::protobuf::int64 value);

  // optional int64 main_album_id = 16;
  bool has_main_album_id() const;
  void clear_main_album_id();
  static const int kMainAlbumIdFieldNumber = 16;
  ::google::protobuf::int64 main_album_id() const;
  void set_main_album_id(::google::protobuf::int64 value);

  // optional int64 members_count = 19;
  bool has_members_count() const;
  void clear_members_count();
  static const int kMembersCountFieldNumber = 19;
  ::google::protobuf::int64 members_count() const;
  void set_members_count(::google::protobuf::int64 value);

  // optional .ru.mail.go.webbase.blobs.VkGroupMainSectionType main_section = 17;
  bool has_main_section() const;
  void clear_main_section();
  static const int kMainSectionFieldNumber = 17;
  ::ru::mail::go::webbase::blobs::VkGroupMainSectionType main_section() const;
  void set_main_section(::ru::mail::go::webbase::blobs::VkGroupMainSectionType value);

  // optional bool has_photo = 7;
  bool has_has_photo() const;
  void clear_has_photo();
  static const int kHasPhotoFieldNumber = 7;
  bool has_photo() const;
  void set_has_photo(bool value);

  // optional bool trending = 26;
  bool has_trending() const;
  void clear_trending();
  static const int kTrendingFieldNumber = 26;
  bool trending() const;
  void set_trending(bool value);

  // optional bool verified = 27;
  bool has_verified() const;
  void clear_verified();
  static const int kVerifiedFieldNumber = 27;
  bool verified() const;
  void set_verified(bool value);

  // optional int64 start_date_ts = 23;
  bool has_start_date_ts() const;
  void clear_start_date_ts();
  static const int kStartDateTsFieldNumber = 23;
  ::google::protobuf::int64 start_date_ts() const;
  void set_start_date_ts(::google::protobuf::int64 value);

  // optional int64 finish_date_ts = 24;
  bool has_finish_date_ts() const;
  void clear_finish_date_ts();
  static const int kFinishDateTsFieldNumber = 24;
  ::google::protobuf::int64 finish_date_ts() const;
  void set_finish_date_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VkGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_screen_name();
  void clear_has_screen_name();
  void set_has_access_level();
  void clear_has_access_level();
  void set_has_deactivation_reason();
  void clear_has_deactivation_reason();
  void set_has_type();
  void clear_has_type();
  void set_has_has_photo();
  void clear_has_has_photo();
  void set_has_page_status_bar();
  void clear_has_page_status_bar();
  void set_has_age_limits();
  void clear_has_age_limits();
  void set_has_city();
  void clear_has_city();
  void set_has_country();
  void clear_has_country();
  void set_has_cover();
  void clear_has_cover();
  void set_has_description();
  void clear_has_description();
  void set_has_fixed_wall_post_id();
  void clear_has_fixed_wall_post_id();
  void set_has_main_album_id();
  void clear_has_main_album_id();
  void set_has_main_section();
  void clear_has_main_section();
  void set_has_market();
  void clear_has_market();
  void set_has_members_count();
  void clear_has_members_count();
  void set_has_place();
  void clear_has_place();
  void set_has_public_date_label();
  void clear_has_public_date_label();
  void set_has_site_url();
  void clear_has_site_url();
  void set_has_start_date_ts();
  void clear_has_start_date_ts();
  void set_has_finish_date_ts();
  void clear_has_finish_date_ts();
  void set_has_group_status();
  void clear_has_group_status();
  void set_has_trending();
  void clear_has_trending();
  void set_has_verified();
  void clear_has_verified();
  void set_has_wiki_page();
  void clear_has_wiki_page();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupContactInfo > contacts_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr screen_name_;
  ::google::protobuf::internal::ArenaStringPtr page_status_bar_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr public_date_label_;
  ::google::protobuf::internal::ArenaStringPtr site_url_;
  ::google::protobuf::internal::ArenaStringPtr group_status_;
  ::google::protobuf::internal::ArenaStringPtr wiki_page_;
  ::ru::mail::go::webbase::blobs::VkGroupLocation* city_;
  ::ru::mail::go::webbase::blobs::VkGroupLocation* country_;
  ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* cover_;
  ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* market_;
  ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* place_;
  ::google::protobuf::int64 id_;
  int access_level_;
  int deactivation_reason_;
  int type_;
  int age_limits_;
  ::google::protobuf::int64 fixed_wall_post_id_;
  ::google::protobuf::int64 main_album_id_;
  ::google::protobuf::int64 members_count_;
  int main_section_;
  bool has_photo_;
  bool trending_;
  bool verified_;
  ::google::protobuf::int64 start_date_ts_;
  ::google::protobuf::int64 finish_date_ts_;
  friend struct protobuf_vk_5fgroups_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VkGroupLocation

// optional int64 id = 1;
inline bool VkGroupLocation::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkGroupLocation::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkGroupLocation::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkGroupLocation::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 VkGroupLocation::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupLocation.id)
  return id_;
}
inline void VkGroupLocation::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupLocation.id)
}

// optional string title = 2;
inline bool VkGroupLocation::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkGroupLocation::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkGroupLocation::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkGroupLocation::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VkGroupLocation::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupLocation.title)
  return title_.GetNoArena();
}
inline void VkGroupLocation::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}
#if LANG_CXX11
inline void VkGroupLocation::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}
#endif
inline void VkGroupLocation::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}
inline void VkGroupLocation::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}
inline ::std::string* VkGroupLocation::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupLocation.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupLocation::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupLocation.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupLocation::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupLocation.title)
}

// -------------------------------------------------------------------

// VkGroupContactInfo

// optional int64 user_id = 1;
inline bool VkGroupContactInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkGroupContactInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkGroupContactInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkGroupContactInfo::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 VkGroupContactInfo::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupContactInfo.user_id)
  return user_id_;
}
inline void VkGroupContactInfo::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupContactInfo.user_id)
}

// optional string desc = 2;
inline bool VkGroupContactInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkGroupContactInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkGroupContactInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkGroupContactInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& VkGroupContactInfo::desc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
  return desc_.GetNoArena();
}
inline void VkGroupContactInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}
#if LANG_CXX11
inline void VkGroupContactInfo::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}
#endif
inline void VkGroupContactInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}
inline void VkGroupContactInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}
inline ::std::string* VkGroupContactInfo::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupContactInfo::release_desc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupContactInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupContactInfo.desc)
}

// optional string phone = 3;
inline bool VkGroupContactInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkGroupContactInfo::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkGroupContactInfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkGroupContactInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
inline const ::std::string& VkGroupContactInfo::phone() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
  return phone_.GetNoArena();
}
inline void VkGroupContactInfo::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}
#if LANG_CXX11
inline void VkGroupContactInfo::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}
#endif
inline void VkGroupContactInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}
inline void VkGroupContactInfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}
inline ::std::string* VkGroupContactInfo::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupContactInfo::release_phone() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupContactInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupContactInfo.phone)
}

// optional string email = 4;
inline bool VkGroupContactInfo::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkGroupContactInfo::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkGroupContactInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkGroupContactInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& VkGroupContactInfo::email() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
  return email_.GetNoArena();
}
inline void VkGroupContactInfo::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}
#if LANG_CXX11
inline void VkGroupContactInfo::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}
#endif
inline void VkGroupContactInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}
inline void VkGroupContactInfo::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}
inline ::std::string* VkGroupContactInfo::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupContactInfo::release_email() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupContactInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupContactInfo.email)
}

// -------------------------------------------------------------------

// VkGroupImageInfo

// optional string url = 1;
inline bool VkGroupImageInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkGroupImageInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkGroupImageInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkGroupImageInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& VkGroupImageInfo::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
  return url_.GetNoArena();
}
inline void VkGroupImageInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}
#if LANG_CXX11
inline void VkGroupImageInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}
#endif
inline void VkGroupImageInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}
inline void VkGroupImageInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}
inline ::std::string* VkGroupImageInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupImageInfo::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupImageInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupImageInfo.url)
}

// optional int32 width = 2;
inline bool VkGroupImageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkGroupImageInfo::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkGroupImageInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkGroupImageInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 VkGroupImageInfo::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupImageInfo.width)
  return width_;
}
inline void VkGroupImageInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupImageInfo.width)
}

// optional int32 height = 3;
inline bool VkGroupImageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkGroupImageInfo::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkGroupImageInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkGroupImageInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 VkGroupImageInfo::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupImageInfo.height)
  return height_;
}
inline void VkGroupImageInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupImageInfo.height)
}

// -------------------------------------------------------------------

// VkGroupCoverInfo

// optional bool enabled = 1;
inline bool VkGroupCoverInfo::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkGroupCoverInfo::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkGroupCoverInfo::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkGroupCoverInfo::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool VkGroupCoverInfo::enabled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupCoverInfo.enabled)
  return enabled_;
}
inline void VkGroupCoverInfo::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupCoverInfo.enabled)
}

// repeated .ru.mail.go.webbase.blobs.VkGroupImageInfo images = 2;
inline int VkGroupCoverInfo::images_size() const {
  return images_.size();
}
inline void VkGroupCoverInfo::clear_images() {
  images_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VkGroupImageInfo& VkGroupCoverInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return images_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VkGroupImageInfo* VkGroupCoverInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return images_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VkGroupImageInfo* VkGroupCoverInfo::add_images() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupImageInfo >*
VkGroupCoverInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupImageInfo >&
VkGroupCoverInfo::images() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkGroupCoverInfo.images)
  return images_;
}

// -------------------------------------------------------------------

// VkGroupMarketInfo

// optional bool enabled = 1;
inline bool VkGroupMarketInfo::has_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkGroupMarketInfo::set_has_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkGroupMarketInfo::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkGroupMarketInfo::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool VkGroupMarketInfo::enabled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.enabled)
  return enabled_;
}
inline void VkGroupMarketInfo::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.enabled)
}

// optional int32 price_min = 2;
inline bool VkGroupMarketInfo::has_price_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkGroupMarketInfo::set_has_price_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkGroupMarketInfo::clear_has_price_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkGroupMarketInfo::clear_price_min() {
  price_min_ = 0;
  clear_has_price_min();
}
inline ::google::protobuf::int32 VkGroupMarketInfo::price_min() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.price_min)
  return price_min_;
}
inline void VkGroupMarketInfo::set_price_min(::google::protobuf::int32 value) {
  set_has_price_min();
  price_min_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.price_min)
}

// optional int32 price_max = 3;
inline bool VkGroupMarketInfo::has_price_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkGroupMarketInfo::set_has_price_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkGroupMarketInfo::clear_has_price_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkGroupMarketInfo::clear_price_max() {
  price_max_ = 0;
  clear_has_price_max();
}
inline ::google::protobuf::int32 VkGroupMarketInfo::price_max() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.price_max)
  return price_max_;
}
inline void VkGroupMarketInfo::set_price_max(::google::protobuf::int32 value) {
  set_has_price_max();
  price_max_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.price_max)
}

// optional int64 main_album_id = 4;
inline bool VkGroupMarketInfo::has_main_album_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkGroupMarketInfo::set_has_main_album_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkGroupMarketInfo::clear_has_main_album_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkGroupMarketInfo::clear_main_album_id() {
  main_album_id_ = GOOGLE_LONGLONG(0);
  clear_has_main_album_id();
}
inline ::google::protobuf::int64 VkGroupMarketInfo::main_album_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.main_album_id)
  return main_album_id_;
}
inline void VkGroupMarketInfo::set_main_album_id(::google::protobuf::int64 value) {
  set_has_main_album_id();
  main_album_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.main_album_id)
}

// optional int64 contact_id = 5;
inline bool VkGroupMarketInfo::has_contact_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkGroupMarketInfo::set_has_contact_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkGroupMarketInfo::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkGroupMarketInfo::clear_contact_id() {
  contact_id_ = GOOGLE_LONGLONG(0);
  clear_has_contact_id();
}
inline ::google::protobuf::int64 VkGroupMarketInfo::contact_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.contact_id)
  return contact_id_;
}
inline void VkGroupMarketInfo::set_contact_id(::google::protobuf::int64 value) {
  set_has_contact_id();
  contact_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.contact_id)
}

// optional int64 currency_id = 6;
inline bool VkGroupMarketInfo::has_currency_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkGroupMarketInfo::set_has_currency_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkGroupMarketInfo::clear_has_currency_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkGroupMarketInfo::clear_currency_id() {
  currency_id_ = GOOGLE_LONGLONG(0);
  clear_has_currency_id();
}
inline ::google::protobuf::int64 VkGroupMarketInfo::currency_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_id)
  return currency_id_;
}
inline void VkGroupMarketInfo::set_currency_id(::google::protobuf::int64 value) {
  set_has_currency_id();
  currency_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_id)
}

// optional string currency_sign = 7;
inline bool VkGroupMarketInfo::has_currency_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkGroupMarketInfo::set_has_currency_sign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkGroupMarketInfo::clear_has_currency_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkGroupMarketInfo::clear_currency_sign() {
  currency_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency_sign();
}
inline const ::std::string& VkGroupMarketInfo::currency_sign() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
  return currency_sign_.GetNoArena();
}
inline void VkGroupMarketInfo::set_currency_sign(const ::std::string& value) {
  set_has_currency_sign();
  currency_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}
#if LANG_CXX11
inline void VkGroupMarketInfo::set_currency_sign(::std::string&& value) {
  set_has_currency_sign();
  currency_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}
#endif
inline void VkGroupMarketInfo::set_currency_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currency_sign();
  currency_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}
inline void VkGroupMarketInfo::set_currency_sign(const char* value, size_t size) {
  set_has_currency_sign();
  currency_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}
inline ::std::string* VkGroupMarketInfo::mutable_currency_sign() {
  set_has_currency_sign();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
  return currency_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupMarketInfo::release_currency_sign() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
  clear_has_currency_sign();
  return currency_sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupMarketInfo::set_allocated_currency_sign(::std::string* currency_sign) {
  if (currency_sign != NULL) {
    set_has_currency_sign();
  } else {
    clear_has_currency_sign();
  }
  currency_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_sign);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_sign)
}

// optional string currency_text = 8;
inline bool VkGroupMarketInfo::has_currency_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkGroupMarketInfo::set_has_currency_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkGroupMarketInfo::clear_has_currency_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkGroupMarketInfo::clear_currency_text() {
  currency_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency_text();
}
inline const ::std::string& VkGroupMarketInfo::currency_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
  return currency_text_.GetNoArena();
}
inline void VkGroupMarketInfo::set_currency_text(const ::std::string& value) {
  set_has_currency_text();
  currency_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}
#if LANG_CXX11
inline void VkGroupMarketInfo::set_currency_text(::std::string&& value) {
  set_has_currency_text();
  currency_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}
#endif
inline void VkGroupMarketInfo::set_currency_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currency_text();
  currency_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}
inline void VkGroupMarketInfo::set_currency_text(const char* value, size_t size) {
  set_has_currency_text();
  currency_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}
inline ::std::string* VkGroupMarketInfo::mutable_currency_text() {
  set_has_currency_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
  return currency_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupMarketInfo::release_currency_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
  clear_has_currency_text();
  return currency_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupMarketInfo::set_allocated_currency_text(::std::string* currency_text) {
  if (currency_text != NULL) {
    set_has_currency_text();
  } else {
    clear_has_currency_text();
  }
  currency_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupMarketInfo.currency_text)
}

// -------------------------------------------------------------------

// VkGroupPlaceInfo

// optional int64 id = 1;
inline bool VkGroupPlaceInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkGroupPlaceInfo::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkGroupPlaceInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkGroupPlaceInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 VkGroupPlaceInfo::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.id)
  return id_;
}
inline void VkGroupPlaceInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.id)
}

// optional string title = 2;
inline bool VkGroupPlaceInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkGroupPlaceInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkGroupPlaceInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkGroupPlaceInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& VkGroupPlaceInfo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
  return title_.GetNoArena();
}
inline void VkGroupPlaceInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}
#if LANG_CXX11
inline void VkGroupPlaceInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}
#endif
inline void VkGroupPlaceInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}
inline void VkGroupPlaceInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}
inline ::std::string* VkGroupPlaceInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupPlaceInfo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupPlaceInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.title)
}

// optional double latitude = 3;
inline bool VkGroupPlaceInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkGroupPlaceInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkGroupPlaceInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkGroupPlaceInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double VkGroupPlaceInfo::latitude() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.latitude)
  return latitude_;
}
inline void VkGroupPlaceInfo::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.latitude)
}

// optional double longitude = 4;
inline bool VkGroupPlaceInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkGroupPlaceInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkGroupPlaceInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkGroupPlaceInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double VkGroupPlaceInfo::longitude() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.longitude)
  return longitude_;
}
inline void VkGroupPlaceInfo::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.longitude)
}

// optional string type = 5;
inline bool VkGroupPlaceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkGroupPlaceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkGroupPlaceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkGroupPlaceInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& VkGroupPlaceInfo::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
  return type_.GetNoArena();
}
inline void VkGroupPlaceInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}
#if LANG_CXX11
inline void VkGroupPlaceInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}
#endif
inline void VkGroupPlaceInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}
inline void VkGroupPlaceInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}
inline ::std::string* VkGroupPlaceInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupPlaceInfo::release_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupPlaceInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.type)
}

// optional int64 country_id = 6;
inline bool VkGroupPlaceInfo::has_country_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkGroupPlaceInfo::set_has_country_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkGroupPlaceInfo::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkGroupPlaceInfo::clear_country_id() {
  country_id_ = GOOGLE_LONGLONG(0);
  clear_has_country_id();
}
inline ::google::protobuf::int64 VkGroupPlaceInfo::country_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.country_id)
  return country_id_;
}
inline void VkGroupPlaceInfo::set_country_id(::google::protobuf::int64 value) {
  set_has_country_id();
  country_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.country_id)
}

// optional int64 city_id = 7;
inline bool VkGroupPlaceInfo::has_city_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkGroupPlaceInfo::set_has_city_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkGroupPlaceInfo::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkGroupPlaceInfo::clear_city_id() {
  city_id_ = GOOGLE_LONGLONG(0);
  clear_has_city_id();
}
inline ::google::protobuf::int64 VkGroupPlaceInfo::city_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.city_id)
  return city_id_;
}
inline void VkGroupPlaceInfo::set_city_id(::google::protobuf::int64 value) {
  set_has_city_id();
  city_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.city_id)
}

// optional string address = 8;
inline bool VkGroupPlaceInfo::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkGroupPlaceInfo::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkGroupPlaceInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkGroupPlaceInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& VkGroupPlaceInfo::address() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
  return address_.GetNoArena();
}
inline void VkGroupPlaceInfo::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}
#if LANG_CXX11
inline void VkGroupPlaceInfo::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}
#endif
inline void VkGroupPlaceInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}
inline void VkGroupPlaceInfo::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}
inline ::std::string* VkGroupPlaceInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroupPlaceInfo::release_address() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroupPlaceInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroupPlaceInfo.address)
}

// -------------------------------------------------------------------

// VkGroup

// optional int64 id = 1;
inline bool VkGroup::has_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VkGroup::set_has_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VkGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VkGroup::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 VkGroup::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.id)
  return id_;
}
inline void VkGroup::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.id)
}

// optional string name = 2;
inline bool VkGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& VkGroup::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.name)
  return name_.GetNoArena();
}
inline void VkGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.name)
}
#if LANG_CXX11
inline void VkGroup::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.name)
}
#endif
inline void VkGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.name)
}
inline void VkGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.name)
}
inline ::std::string* VkGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroup::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.name)
}

// optional string screen_name = 3;
inline bool VkGroup::has_screen_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkGroup::set_has_screen_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkGroup::clear_has_screen_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkGroup::clear_screen_name() {
  screen_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_screen_name();
}
inline const ::std::string& VkGroup::screen_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.screen_name)
  return screen_name_.GetNoArena();
}
inline void VkGroup::set_screen_name(const ::std::string& value) {
  set_has_screen_name();
  screen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}
#if LANG_CXX11
inline void VkGroup::set_screen_name(::std::string&& value) {
  set_has_screen_name();
  screen_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}
#endif
inline void VkGroup::set_screen_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_screen_name();
  screen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}
inline void VkGroup::set_screen_name(const char* value, size_t size) {
  set_has_screen_name();
  screen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}
inline ::std::string* VkGroup::mutable_screen_name() {
  set_has_screen_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.screen_name)
  return screen_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroup::release_screen_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.screen_name)
  clear_has_screen_name();
  return screen_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroup::set_allocated_screen_name(::std::string* screen_name) {
  if (screen_name != NULL) {
    set_has_screen_name();
  } else {
    clear_has_screen_name();
  }
  screen_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), screen_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.screen_name)
}

// optional .ru.mail.go.webbase.blobs.VkGroupAccessType access_level = 4;
inline bool VkGroup::has_access_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VkGroup::set_has_access_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VkGroup::clear_has_access_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VkGroup::clear_access_level() {
  access_level_ = 0;
  clear_has_access_level();
}
inline ::ru::mail::go::webbase::blobs::VkGroupAccessType VkGroup::access_level() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.access_level)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupAccessType >(access_level_);
}
inline void VkGroup::set_access_level(::ru::mail::go::webbase::blobs::VkGroupAccessType value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupAccessType_IsValid(value));
  set_has_access_level();
  access_level_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.access_level)
}

// optional .ru.mail.go.webbase.blobs.VkGroupDeactivationReason deactivation_reason = 5;
inline bool VkGroup::has_deactivation_reason() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VkGroup::set_has_deactivation_reason() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VkGroup::clear_has_deactivation_reason() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VkGroup::clear_deactivation_reason() {
  deactivation_reason_ = 0;
  clear_has_deactivation_reason();
}
inline ::ru::mail::go::webbase::blobs::VkGroupDeactivationReason VkGroup::deactivation_reason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.deactivation_reason)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupDeactivationReason >(deactivation_reason_);
}
inline void VkGroup::set_deactivation_reason(::ru::mail::go::webbase::blobs::VkGroupDeactivationReason value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupDeactivationReason_IsValid(value));
  set_has_deactivation_reason();
  deactivation_reason_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.deactivation_reason)
}

// optional .ru.mail.go.webbase.blobs.VkGroupType type = 6;
inline bool VkGroup::has_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VkGroup::set_has_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VkGroup::clear_has_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VkGroup::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::VkGroupType VkGroup::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.type)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupType >(type_);
}
inline void VkGroup::set_type(::ru::mail::go::webbase::blobs::VkGroupType value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.type)
}

// optional bool has_photo = 7;
inline bool VkGroup::has_has_photo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void VkGroup::set_has_has_photo() {
  _has_bits_[0] |= 0x00400000u;
}
inline void VkGroup::clear_has_has_photo() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void VkGroup::clear_has_photo() {
  has_photo_ = false;
  clear_has_has_photo();
}
inline bool VkGroup::has_photo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.has_photo)
  return has_photo_;
}
inline void VkGroup::set_has_photo(bool value) {
  set_has_has_photo();
  has_photo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.has_photo)
}

// optional string page_status_bar = 8;
inline bool VkGroup::has_page_status_bar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkGroup::set_has_page_status_bar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkGroup::clear_has_page_status_bar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkGroup::clear_page_status_bar() {
  page_status_bar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_status_bar();
}
inline const ::std::string& VkGroup::page_status_bar() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
  return page_status_bar_.GetNoArena();
}
inline void VkGroup::set_page_status_bar(const ::std::string& value) {
  set_has_page_status_bar();
  page_status_bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}
#if LANG_CXX11
inline void VkGroup::set_page_status_bar(::std::string&& value) {
  set_has_page_status_bar();
  page_status_bar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}
#endif
inline void VkGroup::set_page_status_bar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_status_bar();
  page_status_bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}
inline void VkGroup::set_page_status_bar(const char* value, size_t size) {
  set_has_page_status_bar();
  page_status_bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}
inline ::std::string* VkGroup::mutable_page_status_bar() {
  set_has_page_status_bar();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
  return page_status_bar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroup::release_page_status_bar() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
  clear_has_page_status_bar();
  return page_status_bar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroup::set_allocated_page_status_bar(::std::string* page_status_bar) {
  if (page_status_bar != NULL) {
    set_has_page_status_bar();
  } else {
    clear_has_page_status_bar();
  }
  page_status_bar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_status_bar);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.page_status_bar)
}

// optional .ru.mail.go.webbase.blobs.VkGroupAgeLimit age_limits = 9;
inline bool VkGroup::has_age_limits() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VkGroup::set_has_age_limits() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VkGroup::clear_has_age_limits() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VkGroup::clear_age_limits() {
  age_limits_ = 0;
  clear_has_age_limits();
}
inline ::ru::mail::go::webbase::blobs::VkGroupAgeLimit VkGroup::age_limits() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.age_limits)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupAgeLimit >(age_limits_);
}
inline void VkGroup::set_age_limits(::ru::mail::go::webbase::blobs::VkGroupAgeLimit value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupAgeLimit_IsValid(value));
  set_has_age_limits();
  age_limits_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.age_limits)
}

// optional .ru.mail.go.webbase.blobs.VkGroupLocation city = 10;
inline bool VkGroup::has_city() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VkGroup::set_has_city() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VkGroup::clear_has_city() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VkGroup::clear_city() {
  if (city_ != NULL) city_->::ru::mail::go::webbase::blobs::VkGroupLocation::Clear();
  clear_has_city();
}
inline const ::ru::mail::go::webbase::blobs::VkGroupLocation& VkGroup::city() const {
  const ::ru::mail::go::webbase::blobs::VkGroupLocation* p = city_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.city)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupLocation*>(
      &::ru::mail::go::webbase::blobs::_VkGroupLocation_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkGroupLocation* VkGroup::mutable_city() {
  set_has_city();
  if (city_ == NULL) {
    city_ = new ::ru::mail::go::webbase::blobs::VkGroupLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.city)
  return city_;
}
inline ::ru::mail::go::webbase::blobs::VkGroupLocation* VkGroup::release_city() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.city)
  clear_has_city();
  ::ru::mail::go::webbase::blobs::VkGroupLocation* temp = city_;
  city_ = NULL;
  return temp;
}
inline void VkGroup::set_allocated_city(::ru::mail::go::webbase::blobs::VkGroupLocation* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.city)
}

// repeated .ru.mail.go.webbase.blobs.VkGroupContactInfo contacts = 11;
inline int VkGroup::contacts_size() const {
  return contacts_.size();
}
inline void VkGroup::clear_contacts() {
  contacts_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::VkGroupContactInfo& VkGroup::contacts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return contacts_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::VkGroupContactInfo* VkGroup::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return contacts_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::VkGroupContactInfo* VkGroup::add_contacts() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return contacts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupContactInfo >*
VkGroup::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return &contacts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkGroupContactInfo >&
VkGroup::contacts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkGroup.contacts)
  return contacts_;
}

// optional .ru.mail.go.webbase.blobs.VkGroupLocation country = 12;
inline bool VkGroup::has_country() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VkGroup::set_has_country() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VkGroup::clear_has_country() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VkGroup::clear_country() {
  if (country_ != NULL) country_->::ru::mail::go::webbase::blobs::VkGroupLocation::Clear();
  clear_has_country();
}
inline const ::ru::mail::go::webbase::blobs::VkGroupLocation& VkGroup::country() const {
  const ::ru::mail::go::webbase::blobs::VkGroupLocation* p = country_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.country)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupLocation*>(
      &::ru::mail::go::webbase::blobs::_VkGroupLocation_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkGroupLocation* VkGroup::mutable_country() {
  set_has_country();
  if (country_ == NULL) {
    country_ = new ::ru::mail::go::webbase::blobs::VkGroupLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.country)
  return country_;
}
inline ::ru::mail::go::webbase::blobs::VkGroupLocation* VkGroup::release_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.country)
  clear_has_country();
  ::ru::mail::go::webbase::blobs::VkGroupLocation* temp = country_;
  country_ = NULL;
  return temp;
}
inline void VkGroup::set_allocated_country(::ru::mail::go::webbase::blobs::VkGroupLocation* country) {
  delete country_;
  country_ = country;
  if (country) {
    set_has_country();
  } else {
    clear_has_country();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.country)
}

// optional .ru.mail.go.webbase.blobs.VkGroupCoverInfo cover = 13;
inline bool VkGroup::has_cover() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VkGroup::set_has_cover() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VkGroup::clear_has_cover() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VkGroup::clear_cover() {
  if (cover_ != NULL) cover_->::ru::mail::go::webbase::blobs::VkGroupCoverInfo::Clear();
  clear_has_cover();
}
inline const ::ru::mail::go::webbase::blobs::VkGroupCoverInfo& VkGroup::cover() const {
  const ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* p = cover_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.cover)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupCoverInfo*>(
      &::ru::mail::go::webbase::blobs::_VkGroupCoverInfo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* VkGroup::mutable_cover() {
  set_has_cover();
  if (cover_ == NULL) {
    cover_ = new ::ru::mail::go::webbase::blobs::VkGroupCoverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.cover)
  return cover_;
}
inline ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* VkGroup::release_cover() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.cover)
  clear_has_cover();
  ::ru::mail::go::webbase::blobs::VkGroupCoverInfo* temp = cover_;
  cover_ = NULL;
  return temp;
}
inline void VkGroup::set_allocated_cover(::ru::mail::go::webbase::blobs::VkGroupCoverInfo* cover) {
  delete cover_;
  cover_ = cover;
  if (cover) {
    set_has_cover();
  } else {
    clear_has_cover();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.cover)
}

// optional string description = 14;
inline bool VkGroup::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkGroup::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkGroup::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkGroup::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& VkGroup::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.description)
  return description_.GetNoArena();
}
inline void VkGroup::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.description)
}
#if LANG_CXX11
inline void VkGroup::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.description)
}
#endif
inline void VkGroup::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.description)
}
inline void VkGroup::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.description)
}
inline ::std::string* VkGroup::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroup::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroup::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.description)
}

// optional int64 fixed_wall_post_id = 15;
inline bool VkGroup::has_fixed_wall_post_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VkGroup::set_has_fixed_wall_post_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VkGroup::clear_has_fixed_wall_post_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VkGroup::clear_fixed_wall_post_id() {
  fixed_wall_post_id_ = GOOGLE_LONGLONG(0);
  clear_has_fixed_wall_post_id();
}
inline ::google::protobuf::int64 VkGroup::fixed_wall_post_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.fixed_wall_post_id)
  return fixed_wall_post_id_;
}
inline void VkGroup::set_fixed_wall_post_id(::google::protobuf::int64 value) {
  set_has_fixed_wall_post_id();
  fixed_wall_post_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.fixed_wall_post_id)
}

// optional int64 main_album_id = 16;
inline bool VkGroup::has_main_album_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VkGroup::set_has_main_album_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VkGroup::clear_has_main_album_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VkGroup::clear_main_album_id() {
  main_album_id_ = GOOGLE_LONGLONG(0);
  clear_has_main_album_id();
}
inline ::google::protobuf::int64 VkGroup::main_album_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.main_album_id)
  return main_album_id_;
}
inline void VkGroup::set_main_album_id(::google::protobuf::int64 value) {
  set_has_main_album_id();
  main_album_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.main_album_id)
}

// optional .ru.mail.go.webbase.blobs.VkGroupMainSectionType main_section = 17;
inline bool VkGroup::has_main_section() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void VkGroup::set_has_main_section() {
  _has_bits_[0] |= 0x00200000u;
}
inline void VkGroup::clear_has_main_section() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void VkGroup::clear_main_section() {
  main_section_ = 0;
  clear_has_main_section();
}
inline ::ru::mail::go::webbase::blobs::VkGroupMainSectionType VkGroup::main_section() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.main_section)
  return static_cast< ::ru::mail::go::webbase::blobs::VkGroupMainSectionType >(main_section_);
}
inline void VkGroup::set_main_section(::ru::mail::go::webbase::blobs::VkGroupMainSectionType value) {
  assert(::ru::mail::go::webbase::blobs::VkGroupMainSectionType_IsValid(value));
  set_has_main_section();
  main_section_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.main_section)
}

// optional .ru.mail.go.webbase.blobs.VkGroupMarketInfo market = 18;
inline bool VkGroup::has_market() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VkGroup::set_has_market() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VkGroup::clear_has_market() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VkGroup::clear_market() {
  if (market_ != NULL) market_->::ru::mail::go::webbase::blobs::VkGroupMarketInfo::Clear();
  clear_has_market();
}
inline const ::ru::mail::go::webbase::blobs::VkGroupMarketInfo& VkGroup::market() const {
  const ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* p = market_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.market)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupMarketInfo*>(
      &::ru::mail::go::webbase::blobs::_VkGroupMarketInfo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* VkGroup::mutable_market() {
  set_has_market();
  if (market_ == NULL) {
    market_ = new ::ru::mail::go::webbase::blobs::VkGroupMarketInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.market)
  return market_;
}
inline ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* VkGroup::release_market() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.market)
  clear_has_market();
  ::ru::mail::go::webbase::blobs::VkGroupMarketInfo* temp = market_;
  market_ = NULL;
  return temp;
}
inline void VkGroup::set_allocated_market(::ru::mail::go::webbase::blobs::VkGroupMarketInfo* market) {
  delete market_;
  market_ = market;
  if (market) {
    set_has_market();
  } else {
    clear_has_market();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.market)
}

// optional int64 members_count = 19;
inline bool VkGroup::has_members_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VkGroup::set_has_members_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VkGroup::clear_has_members_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VkGroup::clear_members_count() {
  members_count_ = GOOGLE_LONGLONG(0);
  clear_has_members_count();
}
inline ::google::protobuf::int64 VkGroup::members_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.members_count)
  return members_count_;
}
inline void VkGroup::set_members_count(::google::protobuf::int64 value) {
  set_has_members_count();
  members_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.members_count)
}

// optional .ru.mail.go.webbase.blobs.VkGroupPlaceInfo place = 20;
inline bool VkGroup::has_place() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VkGroup::set_has_place() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VkGroup::clear_has_place() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VkGroup::clear_place() {
  if (place_ != NULL) place_->::ru::mail::go::webbase::blobs::VkGroupPlaceInfo::Clear();
  clear_has_place();
}
inline const ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo& VkGroup::place() const {
  const ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* p = place_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.place)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo*>(
      &::ru::mail::go::webbase::blobs::_VkGroupPlaceInfo_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* VkGroup::mutable_place() {
  set_has_place();
  if (place_ == NULL) {
    place_ = new ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.place)
  return place_;
}
inline ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* VkGroup::release_place() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.place)
  clear_has_place();
  ::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* temp = place_;
  place_ = NULL;
  return temp;
}
inline void VkGroup::set_allocated_place(::ru::mail::go::webbase::blobs::VkGroupPlaceInfo* place) {
  delete place_;
  place_ = place;
  if (place) {
    set_has_place();
  } else {
    clear_has_place();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.place)
}

// optional string public_date_label = 21;
inline bool VkGroup::has_public_date_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkGroup::set_has_public_date_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkGroup::clear_has_public_date_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkGroup::clear_public_date_label() {
  public_date_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_date_label();
}
inline const ::std::string& VkGroup::public_date_label() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
  return public_date_label_.GetNoArena();
}
inline void VkGroup::set_public_date_label(const ::std::string& value) {
  set_has_public_date_label();
  public_date_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}
#if LANG_CXX11
inline void VkGroup::set_public_date_label(::std::string&& value) {
  set_has_public_date_label();
  public_date_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}
#endif
inline void VkGroup::set_public_date_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_date_label();
  public_date_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}
inline void VkGroup::set_public_date_label(const char* value, size_t size) {
  set_has_public_date_label();
  public_date_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}
inline ::std::string* VkGroup::mutable_public_date_label() {
  set_has_public_date_label();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
  return public_date_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroup::release_public_date_label() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
  clear_has_public_date_label();
  return public_date_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroup::set_allocated_public_date_label(::std::string* public_date_label) {
  if (public_date_label != NULL) {
    set_has_public_date_label();
  } else {
    clear_has_public_date_label();
  }
  public_date_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_date_label);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.public_date_label)
}

// optional string site_url = 22;
inline bool VkGroup::has_site_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkGroup::set_has_site_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkGroup::clear_has_site_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkGroup::clear_site_url() {
  site_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_url();
}
inline const ::std::string& VkGroup::site_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.site_url)
  return site_url_.GetNoArena();
}
inline void VkGroup::set_site_url(const ::std::string& value) {
  set_has_site_url();
  site_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.site_url)
}
#if LANG_CXX11
inline void VkGroup::set_site_url(::std::string&& value) {
  set_has_site_url();
  site_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.site_url)
}
#endif
inline void VkGroup::set_site_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_url();
  site_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.site_url)
}
inline void VkGroup::set_site_url(const char* value, size_t size) {
  set_has_site_url();
  site_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.site_url)
}
inline ::std::string* VkGroup::mutable_site_url() {
  set_has_site_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.site_url)
  return site_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroup::release_site_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.site_url)
  clear_has_site_url();
  return site_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroup::set_allocated_site_url(::std::string* site_url) {
  if (site_url != NULL) {
    set_has_site_url();
  } else {
    clear_has_site_url();
  }
  site_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.site_url)
}

// optional int64 start_date_ts = 23;
inline bool VkGroup::has_start_date_ts() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void VkGroup::set_has_start_date_ts() {
  _has_bits_[0] |= 0x02000000u;
}
inline void VkGroup::clear_has_start_date_ts() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void VkGroup::clear_start_date_ts() {
  start_date_ts_ = GOOGLE_LONGLONG(0);
  clear_has_start_date_ts();
}
inline ::google::protobuf::int64 VkGroup::start_date_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.start_date_ts)
  return start_date_ts_;
}
inline void VkGroup::set_start_date_ts(::google::protobuf::int64 value) {
  set_has_start_date_ts();
  start_date_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.start_date_ts)
}

// optional int64 finish_date_ts = 24;
inline bool VkGroup::has_finish_date_ts() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void VkGroup::set_has_finish_date_ts() {
  _has_bits_[0] |= 0x04000000u;
}
inline void VkGroup::clear_has_finish_date_ts() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void VkGroup::clear_finish_date_ts() {
  finish_date_ts_ = GOOGLE_LONGLONG(0);
  clear_has_finish_date_ts();
}
inline ::google::protobuf::int64 VkGroup::finish_date_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.finish_date_ts)
  return finish_date_ts_;
}
inline void VkGroup::set_finish_date_ts(::google::protobuf::int64 value) {
  set_has_finish_date_ts();
  finish_date_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.finish_date_ts)
}

// optional string group_status = 25;
inline bool VkGroup::has_group_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkGroup::set_has_group_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkGroup::clear_has_group_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkGroup::clear_group_status() {
  group_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_status();
}
inline const ::std::string& VkGroup::group_status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.group_status)
  return group_status_.GetNoArena();
}
inline void VkGroup::set_group_status(const ::std::string& value) {
  set_has_group_status();
  group_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.group_status)
}
#if LANG_CXX11
inline void VkGroup::set_group_status(::std::string&& value) {
  set_has_group_status();
  group_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.group_status)
}
#endif
inline void VkGroup::set_group_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_status();
  group_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.group_status)
}
inline void VkGroup::set_group_status(const char* value, size_t size) {
  set_has_group_status();
  group_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.group_status)
}
inline ::std::string* VkGroup::mutable_group_status() {
  set_has_group_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.group_status)
  return group_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroup::release_group_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.group_status)
  clear_has_group_status();
  return group_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroup::set_allocated_group_status(::std::string* group_status) {
  if (group_status != NULL) {
    set_has_group_status();
  } else {
    clear_has_group_status();
  }
  group_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.group_status)
}

// optional bool trending = 26;
inline bool VkGroup::has_trending() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void VkGroup::set_has_trending() {
  _has_bits_[0] |= 0x00800000u;
}
inline void VkGroup::clear_has_trending() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void VkGroup::clear_trending() {
  trending_ = false;
  clear_has_trending();
}
inline bool VkGroup::trending() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.trending)
  return trending_;
}
inline void VkGroup::set_trending(bool value) {
  set_has_trending();
  trending_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.trending)
}

// optional bool verified = 27;
inline bool VkGroup::has_verified() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void VkGroup::set_has_verified() {
  _has_bits_[0] |= 0x01000000u;
}
inline void VkGroup::clear_has_verified() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void VkGroup::clear_verified() {
  verified_ = false;
  clear_has_verified();
}
inline bool VkGroup::verified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.verified)
  return verified_;
}
inline void VkGroup::set_verified(bool value) {
  set_has_verified();
  verified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.verified)
}

// optional string wiki_page = 28;
inline bool VkGroup::has_wiki_page() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkGroup::set_has_wiki_page() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkGroup::clear_has_wiki_page() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkGroup::clear_wiki_page() {
  wiki_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wiki_page();
}
inline const ::std::string& VkGroup::wiki_page() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
  return wiki_page_.GetNoArena();
}
inline void VkGroup::set_wiki_page(const ::std::string& value) {
  set_has_wiki_page();
  wiki_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}
#if LANG_CXX11
inline void VkGroup::set_wiki_page(::std::string&& value) {
  set_has_wiki_page();
  wiki_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}
#endif
inline void VkGroup::set_wiki_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wiki_page();
  wiki_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}
inline void VkGroup::set_wiki_page(const char* value, size_t size) {
  set_has_wiki_page();
  wiki_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}
inline ::std::string* VkGroup::mutable_wiki_page() {
  set_has_wiki_page();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
  return wiki_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkGroup::release_wiki_page() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
  clear_has_wiki_page();
  return wiki_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkGroup::set_allocated_wiki_page(::std::string* wiki_page) {
  if (wiki_page != NULL) {
    set_has_wiki_page();
  } else {
    clear_has_wiki_page();
  }
  wiki_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wiki_page);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkGroup.wiki_page)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkGroupAccessType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkGroupAccessType>() {
  return ::ru::mail::go::webbase::blobs::VkGroupAccessType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkGroupType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkGroupType>() {
  return ::ru::mail::go::webbase::blobs::VkGroupType_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkGroupAgeLimit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkGroupAgeLimit>() {
  return ::ru::mail::go::webbase::blobs::VkGroupAgeLimit_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkGroupDeactivationReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkGroupDeactivationReason>() {
  return ::ru::mail::go::webbase::blobs::VkGroupDeactivationReason_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkGroupMainSectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkGroupMainSectionType>() {
  return ::ru::mail::go::webbase::blobs::VkGroupMainSectionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vk_5fgroups_2eproto__INCLUDED
