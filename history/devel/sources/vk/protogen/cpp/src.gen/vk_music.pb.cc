// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_music.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vk_music.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class VkMusicTrackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicTrack>
     _instance;
} _VkMusicTrack_default_instance_;
class VkMusicLyricsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicLyrics>
     _instance;
} _VkMusicLyrics_default_instance_;
class VkMusicTrackOrLyricsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicTrackOrLyrics>
     _instance;
} _VkMusicTrackOrLyrics_default_instance_;
class VkMusicUserEventListenDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicUserEventListen>
     _instance;
} _VkMusicUserEventListen_default_instance_;
class VkTrackListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkTrackList>
     _instance;
} _VkTrackList_default_instance_;
class VkMusicPlaylistDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicPlaylist>
     _instance;
} _VkMusicPlaylist_default_instance_;
class VkMusicUMAAlbumMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicUMAAlbumMeta>
     _instance;
} _VkMusicUMAAlbumMeta_default_instance_;
class VkMusicUserPrivacyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicUserPrivacy>
     _instance;
} _VkMusicUserPrivacy_default_instance_;
class TrackOrPlaylistOrUserPrivacyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrackOrPlaylistOrUserPrivacy>
     _instance;
} _TrackOrPlaylistOrUserPrivacy_default_instance_;
class TrackOrPlaylistOrListenEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrackOrPlaylistOrListenEvent>
     _instance;
} _TrackOrPlaylistOrListenEvent_default_instance_;
class VkUserEventHistoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkUserEventHistory>
     _instance;
} _VkUserEventHistory_default_instance_;
class VkMusicExtraDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicExtraData>
     _instance;
} _VkMusicExtraData_default_instance_;
class VkMusicEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicEvent>
     _instance;
} _VkMusicEvent_default_instance_;
class SessionOrVkMusicEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SessionOrVkMusicEvent>
     _instance;
} _SessionOrVkMusicEvent_default_instance_;
class VkMusicSpellcheckerResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicSpellcheckerResponse>
     _instance;
} _VkMusicSpellcheckerResponse_default_instance_;
class VkMusicSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicSession>
     _instance;
} _VkMusicSession_default_instance_;
class VkMusicTrackStatsForQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicTrackStatsForQuery>
     _instance;
} _VkMusicTrackStatsForQuery_default_instance_;
class VkMusicPerformerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicPerformer>
     _instance;
} _VkMusicPerformer_default_instance_;
class VkMusicClickDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicClick>
     _instance;
} _VkMusicClick_default_instance_;
class VkMusicClickOrQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicClickOrQuery>
     _instance;
} _VkMusicClickOrQuery_default_instance_;
class VkMusicQueryBlockClicks_BlockDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicQueryBlockClicks_Block>
     _instance;
} _VkMusicQueryBlockClicks_Block_default_instance_;
class VkMusicQueryBlockClicks_ServiceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicQueryBlockClicks_Service>
     _instance;
} _VkMusicQueryBlockClicks_Service_default_instance_;
class VkMusicQueryBlockClicksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicQueryBlockClicks>
     _instance;
} _VkMusicQueryBlockClicks_default_instance_;
class VkMusicFrontendExtradataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkMusicFrontendExtradata>
     _instance;
} _VkMusicFrontendExtradata_default_instance_;

namespace protobuf_vk_5fmusic_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, audio_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, performer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, added_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, genre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, bitrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, lyrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, official_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, times_listened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, extra_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, deleted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, copy_owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, copy_audio_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, hashgroup_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, crcgroup_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, times_listened_last_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, times_listened_last_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, extra_performer_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, extra_title_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, global_crcgroup_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, global_times_listened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, global_times_listened_last_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, global_times_listened_last_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, uma_release_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, alternative_track_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, subtitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, source_owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, source_audio_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, timestamp_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, from_offline_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, title_alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, performer_alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, uma_lyrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, album_release_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, rightholder_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, rightholder_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, is_copy_of_mastercopy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, is_boostable_rightholder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrack, is_new_boostable_release_),
  8,
  9,
  0,
  1,
  ~0u,
  10,
  11,
  12,
  13,
  27,
  28,
  2,
  14,
  15,
  ~0u,
  29,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  22,
  23,
  24,
  25,
  26,
  ~0u,
  34,
  35,
  3,
  36,
  37,
  38,
  30,
  4,
  5,
  7,
  39,
  40,
  6,
  31,
  32,
  33,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicLyrics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicLyrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicLyrics, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicLyrics, release_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicLyrics, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicLyrics, timecodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicLyrics, timestamp_),
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackOrLyrics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackOrLyrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackOrLyrics, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackOrLyrics, lyrics_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, start_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, audio_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, performer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, master_track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, audio_section_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, is_mail_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, playlist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, uma_release_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, device_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, os_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, prev_audio_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, prev_playlist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, vk_qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, block_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserEventListen, app_id_),
  11,
  12,
  13,
  0,
  1,
  2,
  14,
  3,
  15,
  4,
  16,
  5,
  6,
  7,
  8,
  9,
  17,
  10,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackList, track_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, playlist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, performer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, number_of_tracks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, is_official_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, times_listened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, followers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, times_listened_last_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, times_listened_last_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, tracks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, track_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, tracks_times_listened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, tracks_times_listened_last_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, tracks_times_listened_last_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, subtitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, timestamp_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, uma_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, title_alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPlaylist, performer_alternatives_),
  6,
  7,
  0,
  1,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  5,
  ~0u,
  15,
  16,
  17,
  2,
  19,
  ~0u,
  18,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUMAAlbumMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUMAAlbumMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUMAAlbumMeta, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUMAAlbumMeta, playlist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUMAAlbumMeta, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUMAAlbumMeta, json_str_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserPrivacy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserPrivacy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserPrivacy, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserPrivacy, is_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserPrivacy, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicUserPrivacy, timestamp_ms_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrUserPrivacy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrUserPrivacy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrUserPrivacy, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrUserPrivacy, playlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrUserPrivacy, privacy_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrListenEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrListenEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrListenEvent, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrListenEvent, listen_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackOrPlaylistOrListenEvent, playlist_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkUserEventHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkUserEventHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkUserEventHistory, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkUserEventHistory, history_entry_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicExtraData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicExtraData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicExtraData, remove_ugc_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicEvent, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicEvent, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicEvent, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicEvent, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicEvent, extra_),
  1,
  2,
  5,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOrVkMusicEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOrVkMusicEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOrVkMusicEvent, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOrVkMusicEvent, event_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSpellcheckerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSpellcheckerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSpellcheckerResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSpellcheckerResponse, fixed_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSpellcheckerResponse, applied_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, items_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, official_tracks_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, vk_qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, reply_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, query_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, as_events_found_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, favourite_tracks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, favourite_tracks_boosted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, qddb_sessions_num_log2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, spellchecker_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, user_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, user_sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicSession, ref_),
  0,
  6,
  7,
  ~0u,
  ~0u,
  18,
  12,
  1,
  8,
  9,
  10,
  11,
  2,
  14,
  15,
  16,
  13,
  3,
  5,
  17,
  19,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, sessioncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, performerfiltersessioncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, timesclicked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, timeslongclicked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, timeslastclicked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicTrackStatsForQuery, track_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, performer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, followers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, times_listened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, times_listened_last_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, times_listened_last_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, timestamp_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicPerformer, name_alternatives_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, click_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, click_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, block_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClick, timestamp_),
  5,
  6,
  0,
  7,
  1,
  2,
  3,
  4,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClickOrQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClickOrQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClickOrQuery, click_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicClickOrQuery, query_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks_Block, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks_Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks_Block, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks_Block, clicks_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks_Service, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks_Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks_Service, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks_Service, blocks_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicQueryBlockClicks, services_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicFrontendExtradata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicFrontendExtradata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicFrontendExtradata, orig_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicFrontendExtradata, fixed_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkMusicFrontendExtradata, orig_turn_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 51, sizeof(VkMusicTrack)},
  { 97, 107, sizeof(VkMusicLyrics)},
  { 112, 119, sizeof(VkMusicTrackOrLyrics)},
  { 121, 145, sizeof(VkMusicUserEventListen)},
  { 164, 170, sizeof(VkTrackList)},
  { 171, 199, sizeof(VkMusicPlaylist)},
  { 222, 231, sizeof(VkMusicUMAAlbumMeta)},
  { 235, 244, sizeof(VkMusicUserPrivacy)},
  { 248, 256, sizeof(TrackOrPlaylistOrUserPrivacy)},
  { 259, 267, sizeof(TrackOrPlaylistOrListenEvent)},
  { 270, 277, sizeof(VkUserEventHistory)},
  { 279, 285, sizeof(VkMusicExtraData)},
  { 286, 297, sizeof(VkMusicEvent)},
  { 303, 310, sizeof(SessionOrVkMusicEvent)},
  { 312, 320, sizeof(VkMusicSpellcheckerResponse)},
  { 323, 350, sizeof(VkMusicSession)},
  { 372, 384, sizeof(VkMusicTrackStatsForQuery)},
  { 391, 406, sizeof(VkMusicPerformer)},
  { 416, 432, sizeof(VkMusicClick)},
  { 443, 450, sizeof(VkMusicClickOrQuery)},
  { 452, 459, sizeof(VkMusicQueryBlockClicks_Block)},
  { 461, 468, sizeof(VkMusicQueryBlockClicks_Service)},
  { 470, 477, sizeof(VkMusicQueryBlockClicks)},
  { 479, 487, sizeof(VkMusicFrontendExtradata)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicTrack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicLyrics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicTrackOrLyrics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicUserEventListen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkTrackList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicPlaylist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicUMAAlbumMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicUserPrivacy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrackOrPlaylistOrUserPrivacy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrackOrPlaylistOrListenEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkUserEventHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicExtraData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionOrVkMusicEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicSpellcheckerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicTrackStatsForQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicPerformer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicClick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicClickOrQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicQueryBlockClicks_Block_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicQueryBlockClicks_Service_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicQueryBlockClicks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkMusicFrontendExtradata_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vk_music.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_parsed_5fblobs_2eproto::InitDefaults();
  _VkMusicTrack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicTrack_default_instance_);_VkMusicLyrics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicLyrics_default_instance_);_VkMusicTrackOrLyrics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicTrackOrLyrics_default_instance_);_VkMusicUserEventListen_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicUserEventListen_default_instance_);_VkTrackList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkTrackList_default_instance_);_VkMusicPlaylist_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicPlaylist_default_instance_);_VkMusicUMAAlbumMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicUMAAlbumMeta_default_instance_);_VkMusicUserPrivacy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicUserPrivacy_default_instance_);_TrackOrPlaylistOrUserPrivacy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrackOrPlaylistOrUserPrivacy_default_instance_);_TrackOrPlaylistOrListenEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrackOrPlaylistOrListenEvent_default_instance_);_VkUserEventHistory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkUserEventHistory_default_instance_);_VkMusicExtraData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicExtraData_default_instance_);_VkMusicEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicEvent_default_instance_);_SessionOrVkMusicEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SessionOrVkMusicEvent_default_instance_);_VkMusicSpellcheckerResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicSpellcheckerResponse_default_instance_);_VkMusicSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicSession_default_instance_);_VkMusicTrackStatsForQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicTrackStatsForQuery_default_instance_);_VkMusicPerformer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicPerformer_default_instance_);_VkMusicClick_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicClick_default_instance_);_VkMusicClickOrQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicClickOrQuery_default_instance_);_VkMusicQueryBlockClicks_Block_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicQueryBlockClicks_Block_default_instance_);_VkMusicQueryBlockClicks_Service_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicQueryBlockClicks_Service_default_instance_);_VkMusicQueryBlockClicks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicQueryBlockClicks_default_instance_);_VkMusicFrontendExtradata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkMusicFrontendExtradata_default_instance_);_VkMusicTrack_default_instance_._instance.get_mutable()->uma_lyrics_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicLyrics*>(
      ::ru::mail::go::webbase::blobs::VkMusicLyrics::internal_default_instance());
  _VkMusicTrackOrLyrics_default_instance_._instance.get_mutable()->track_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      ::ru::mail::go::webbase::blobs::VkMusicTrack::internal_default_instance());
  _VkMusicTrackOrLyrics_default_instance_._instance.get_mutable()->lyrics_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicLyrics*>(
      ::ru::mail::go::webbase::blobs::VkMusicLyrics::internal_default_instance());
  _VkMusicPlaylist_default_instance_._instance.get_mutable()->tracks_ = const_cast< ::ru::mail::go::webbase::blobs::VkTrackList*>(
      ::ru::mail::go::webbase::blobs::VkTrackList::internal_default_instance());
  _TrackOrPlaylistOrUserPrivacy_default_instance_._instance.get_mutable()->track_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      ::ru::mail::go::webbase::blobs::VkMusicTrack::internal_default_instance());
  _TrackOrPlaylistOrUserPrivacy_default_instance_._instance.get_mutable()->playlist_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicPlaylist*>(
      ::ru::mail::go::webbase::blobs::VkMusicPlaylist::internal_default_instance());
  _TrackOrPlaylistOrUserPrivacy_default_instance_._instance.get_mutable()->privacy_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy*>(
      ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy::internal_default_instance());
  _TrackOrPlaylistOrListenEvent_default_instance_._instance.get_mutable()->track_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      ::ru::mail::go::webbase::blobs::VkMusicTrack::internal_default_instance());
  _TrackOrPlaylistOrListenEvent_default_instance_._instance.get_mutable()->listen_event_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicUserEventListen*>(
      ::ru::mail::go::webbase::blobs::VkMusicUserEventListen::internal_default_instance());
  _TrackOrPlaylistOrListenEvent_default_instance_._instance.get_mutable()->playlist_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicPlaylist*>(
      ::ru::mail::go::webbase::blobs::VkMusicPlaylist::internal_default_instance());
  _SessionOrVkMusicEvent_default_instance_._instance.get_mutable()->session_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicSession*>(
      ::ru::mail::go::webbase::blobs::VkMusicSession::internal_default_instance());
  _SessionOrVkMusicEvent_default_instance_._instance.get_mutable()->event_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicEvent*>(
      ::ru::mail::go::webbase::blobs::VkMusicEvent::internal_default_instance());
  _VkMusicSession_default_instance_._instance.get_mutable()->spellchecker_response_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse*>(
      ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse::internal_default_instance());
  _VkMusicTrackStatsForQuery_default_instance_._instance.get_mutable()->track_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      ::ru::mail::go::webbase::blobs::VkMusicTrack::internal_default_instance());
  _VkMusicClickOrQuery_default_instance_._instance.get_mutable()->click_ = const_cast< ::ru::mail::go::webbase::blobs::VkMusicClick*>(
      ::ru::mail::go::webbase::blobs::VkMusicClick::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016vk_music.proto\022\030ru.mail.go.webbase.blo"
      "bs\032\022parsed_blobs.proto\"\213\t\n\014VkMusicTrack\022"
      "\020\n\010owner_id\030\001 \002(\003\022\020\n\010audio_id\030\002 \002(\003\022\r\n\005t"
      "itle\030\003 \001(\t\022\021\n\tperformer\030\004 \001(\t\022\014\n\004tags\030\005 "
      "\003(\t\022\020\n\010duration\030\006 \001(\005\022\r\n\005added\030\007 \001(\005\022\r\n\005"
      "genre\030\010 \001(\005\022\017\n\007bitrate\030\t \001(\005\022\016\n\006lyrics\030\n"
      " \001(\010\022\020\n\010official\030\013 \001(\010\022\014\n\004hash\030\014 \002(\t\022\021\n\t"
      "timestamp\030\r \002(\003\022\026\n\016times_listened\030\016 \001(\003\022"
      "\023\n\013extra_names\030\017 \003(\t\022\017\n\007deleted\030\020 \001(\010\022\025\n"
      "\rcopy_owner_id\030\021 \001(\003\022\025\n\rcopy_audio_id\030\022 "
      "\001(\003\022\026\n\016hashgroup_size\030\023 \001(\003\022\025\n\rcrcgroup_"
      "size\030\024 \001(\003\022!\n\031times_listened_last_month\030"
      "\025 \001(\003\022 \n\030times_listened_last_week\030\026 \001(\003\022"
      "\035\n\025extra_performer_names\030\027 \003(\t\022\031\n\021extra_"
      "title_names\030\030 \003(\t\022\034\n\024global_crcgroup_siz"
      "e\030\031 \001(\003\022\035\n\025global_times_listened\030\032 \001(\003\022("
      "\n global_times_listened_last_month\030\033 \001(\003"
      "\022\'\n\037global_times_listened_last_week\030\034 \001("
      "\003\022\026\n\016uma_release_id\030\035 \001(\003\022\035\n\025alternative"
      "_track_ids\030\036 \003(\t\022\020\n\010track_id\030\037 \001(\003\022\022\n\ncl"
      "uster_id\030  \001(\003\022\020\n\010subtitle\030! \001(\t\022\027\n\017sour"
      "ce_owner_id\030\" \001(\003\022\027\n\017source_audio_id\030# \001"
      "(\003\022\024\n\014timestamp_ms\030$ \001(\003\022\032\n\022from_offline"
      "_index\030% \001(\010\022\032\n\022title_alternatives\030& \001(\t"
      "\022\036\n\026performer_alternatives\030\' \001(\t\022;\n\numa_"
      "lyrics\030( \001(\0132\'.ru.mail.go.webbase.blobs."
      "VkMusicLyrics\022\030\n\020album_release_ts\030) \001(\003\022"
      "\026\n\016rightholder_id\030* \001(\003\022\030\n\020rightholder_n"
      "ame\030+ \001(\t\022\035\n\025is_copy_of_mastercopy\030, \001(\010"
      "\022 \n\030is_boostable_rightholder\030- \001(\010\022 \n\030is"
      "_new_boostable_release\030. \001(\010\"i\n\rVkMusicL"
      "yrics\022\014\n\004text\030\001 \001(\t\022\022\n\nrelease_id\030\002 \001(\003\022"
      "\020\n\010track_id\030\003 \001(\003\022\021\n\ttimecodes\030\004 \001(\010\022\021\n\t"
      "timestamp\030\005 \001(\003\"\206\001\n\024VkMusicTrackOrLyrics"
      "\0225\n\005track\030\001 \001(\0132&.ru.mail.go.webbase.blo"
      "bs.VkMusicTrack\0227\n\006lyrics\030\002 \001(\0132\'.ru.mai"
      "l.go.webbase.blobs.VkMusicLyrics\"\216\003\n\026VkM"
      "usicUserEventListen\022\017\n\007user_id\030\001 \001(\003\022\020\n\010"
      "start_ts\030\002 \001(\003\022\020\n\010duration\030\003 \001(\005\022\020\n\010audi"
      "o_id\030\004 \001(\t\022\r\n\005title\030\005 \001(\t\022\021\n\tperformer\030\006"
      " \001(\t\022\024\n\014master_track\030\007 \001(\010\022\025\n\raudio_sect"
      "ion\030\010 \001(\t\022\026\n\016is_mail_search\030\t \001(\010\022\023\n\013pla"
      "ylist_id\030\n \001(\t\022\026\n\016uma_release_id\030\013 \001(\003\022\023"
      "\n\013device_type\030\014 \001(\t\022\017\n\007os_type\030\r \001(\t\022\016\n\006"
      "source\030\016 \001(\t\022\025\n\rprev_audio_id\030\017 \001(\t\022\030\n\020p"
      "rev_playlist_id\030\020 \001(\t\022\016\n\006vk_qid\030\021 \001(\003\022\022\n"
      "\nblock_name\030\022 \001(\t\022\016\n\006app_id\030\023 \001(\003\" \n\013VkT"
      "rackList\022\021\n\ttrack_ids\030\001 \003(\t\"\334\004\n\017VkMusicP"
      "laylist\022\020\n\010owner_id\030\001 \001(\003\022\023\n\013playlist_id"
      "\030\002 \001(\003\022\r\n\005title\030\003 \001(\t\022\021\n\tperformer\030\004 \001(\t"
      "\022\030\n\020number_of_tracks\030\005 \001(\005\022\023\n\013is_officia"
      "l\030\006 \001(\010\022\026\n\016times_listened\030\007 \001(\003\022\021\n\ttimes"
      "tamp\030\010 \001(\003\022\021\n\tfollowers\030\t \001(\003\022!\n\031times_l"
      "istened_last_month\030\n \001(\003\022 \n\030times_listen"
      "ed_last_week\030\013 \001(\003\0225\n\006tracks\030\014 \001(\0132%.ru."
      "mail.go.webbase.blobs.VkTrackList\022\023\n\013tra"
      "ck_names\030\r \003(\t\022\035\n\025tracks_times_listened\030"
      "\016 \001(\003\022(\n tracks_times_listened_last_mont"
      "h\030\017 \001(\003\022\'\n\037tracks_times_listened_last_we"
      "ek\030\020 \001(\003\022\020\n\010subtitle\030\021 \001(\t\022\014\n\004year\030\022 \001(\r"
      "\022\014\n\004tags\030\023 \003(\t\022\024\n\014timestamp_ms\030\024 \001(\003\022\020\n\010"
      "uma_tags\030\025 \003(\t\022\032\n\022title_alternatives\030\026 \001"
      "(\t\022\036\n\026performer_alternatives\030\027 \001(\t\"a\n\023Vk"
      "MusicUMAAlbumMeta\022\020\n\010owner_id\030\001 \001(\003\022\023\n\013p"
      "laylist_id\030\002 \001(\003\022\021\n\ttimestamp\030\003 \001(\003\022\020\n\010j"
      "son_str\030\004 \001(\t\"b\n\022VkMusicUserPrivacy\022\020\n\010o"
      "wner_id\030\001 \002(\003\022\021\n\tis_public\030\002 \002(\010\022\021\n\ttime"
      "stamp\030\003 \001(\003\022\024\n\014timestamp_ms\030\004 \001(\003\"\321\001\n\034Tr"
      "ackOrPlaylistOrUserPrivacy\0225\n\005track\030\001 \001("
      "\0132&.ru.mail.go.webbase.blobs.VkMusicTrac"
      "k\022;\n\010playlist\030\002 \001(\0132).ru.mail.go.webbase"
      ".blobs.VkMusicPlaylist\022=\n\007privacy\030\003 \001(\0132"
      ",.ru.mail.go.webbase.blobs.VkMusicUserPr"
      "ivacy\"\332\001\n\034TrackOrPlaylistOrListenEvent\0225"
      "\n\005track\030\001 \001(\0132&.ru.mail.go.webbase.blobs"
      ".VkMusicTrack\022F\n\014listen_event\030\002 \001(\01320.ru"
      ".mail.go.webbase.blobs.VkMusicUserEventL"
      "isten\022;\n\010playlist\030\003 \001(\0132).ru.mail.go.web"
      "base.blobs.VkMusicPlaylist\"t\n\022VkUserEven"
      "tHistory\022\017\n\007user_id\030\001 \001(\003\022M\n\rhistory_ent"
      "ry\030\002 \003(\01326.ru.mail.go.webbase.blobs.Trac"
      "kOrPlaylistOrListenEvent\"&\n\020VkMusicExtra"
      "Data\022\022\n\nremove_ugc\030\001 \001(\010\"\226\001\n\014VkMusicEven"
      "t\022\014\n\004time\030\001 \001(\004\022\020\n\010position\030\002 \001(\r\0228\n\004typ"
      "e\030\003 \001(\0162*.ru.mail.go.webbase.blobs.VkMus"
      "icEventType\022\020\n\010duration\030\004 \001(\r\022\013\n\003uid\030\005 \001"
      "(\004\022\r\n\005extra\030\006 \001(\t\"\211\001\n\025SessionOrVkMusicEv"
      "ent\0229\n\007session\030\001 \001(\0132(.ru.mail.go.webbas"
      "e.blobs.VkMusicSession\0225\n\005event\030\002 \001(\0132&."
      "ru.mail.go.webbase.blobs.VkMusicEvent\"\251\001"
      "\n\033VkMusicSpellcheckerResponse\022H\n\004type\030\001 "
      "\001(\0162:.ru.mail.go.webbase.blobs.VkMusicSp"
      "ellcheckerResponse.Type\022\023\n\013fixed_query\030\002"
      " \001(\t\022\017\n\007applied\030\003 \001(\010\"\032\n\004Type\022\010\n\004AUTO\020\001\022"
      "\010\n\004SUGG\020\002\"\234\005\n\016VkMusicSession\022\r\n\005query\030\001 "
      "\001(\t\022\013\n\003uid\030\002 \001(\004\022\014\n\004time\030\003 \001(\004\0226\n\006events"
      "\030\004 \003(\0132&.ru.mail.go.webbase.blobs.VkMusi"
      "cEvent\022\r\n\005items\030\005 \003(\t\022:\n\004type\030\006 \001(\0162,.ru"
      ".mail.go.webbase.blobs.VkMusicSessionTyp"
      "e\022\r\n\005split\030\007 \001(\r\022\013\n\003qid\030\010 \001(\t\022\021\n\titems_n"
      "um\030\t \001(\004\022\033\n\023official_tracks_num\030\n \001(\004\022\016\n"
      "\006vk_qid\030\013 \001(\003\022\025\n\rreply_quality\030\014 \001(\001\022\023\n\013"
      "query_class\030\r \001(\t\022\027\n\017as_events_found\030\016 \001"
      "(\003\022\030\n\020favourite_tracks\030\017 \001(\003\022 \n\030favourit"
      "e_tracks_boosted\030\020 \001(\003\022\036\n\026qddb_sessions_"
      "num_log2\030\021 \001(\r\022\016\n\006client\030\022 \001(\t\022T\n\025spellc"
      "hecker_response\030\023 \001(\01325.ru.mail.go.webba"
      "se.blobs.VkMusicSpellcheckerResponse\022\020\n\010"
      "user_age\030\024 \001(\r\022>\n\010user_sex\030\025 \001(\0162,.ru.ma"
      "il.go.webbase.blobs.VkMusicSession.Sex\022\013"
      "\n\003ref\030\026 \001(\t\"\033\n\003Sex\022\n\n\006FEMALE\020\001\022\010\n\004MALE\020\002"
      "\"\346\001\n\031VkMusicTrackStatsForQuery\022\r\n\005query\030"
      "\001 \001(\t\022\024\n\014sessionCount\030\002 \001(\004\022#\n\033performer"
      "FilterSessionCount\030\003 \001(\004\022\024\n\014timesClicked"
      "\030\004 \001(\004\022\030\n\020timesLongClicked\030\005 \001(\004\022\030\n\020time"
      "sLastClicked\030\006 \001(\004\0225\n\005track\030\007 \001(\0132&.ru.m"
      "ail.go.webbase.blobs.VkMusicTrack\"\370\001\n\020Vk"
      "MusicPerformer\022\024\n\014performer_id\030\001 \001(\003\022\014\n\004"
      "name\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\003\022\021\n\tfollowe"
      "rs\030\004 \001(\003\022\026\n\016times_listened\030\005 \001(\003\022!\n\031time"
      "s_listened_last_month\030\006 \001(\003\022 \n\030times_lis"
      "tened_last_week\030\007 \001(\003\022\014\n\004tags\030\010 \003(\t\022\024\n\014t"
      "imestamp_ms\030\t \001(\003\022\031\n\021name_alternatives\030\n"
      " \001(\t\"\335\001\n\014VkMusicClick\022\013\n\003qid\030\001 \001(\003\022\017\n\007us"
      "er_id\030\002 \001(\003\022\022\n\nclick_type\030\003 \001(\t\022\026\n\016click"
      "_position\030\004 \001(\004\022\022\n\nquery_text\030\005 \001(\t\022\024\n\014s"
      "ervice_name\030\006 \001(\t\022\022\n\nblock_name\030\007 \001(\t\022\020\n"
      "\010platform\030\010 \001(\t\022\020\n\010owner_id\030\t \001(\003\022\016\n\006doc"
      "_id\030\n \001(\003\022\021\n\ttimestamp\030\013 \001(\004\"[\n\023VkMusicC"
      "lickOrQuery\0225\n\005click\030\001 \001(\0132&.ru.mail.go."
      "webbase.blobs.VkMusicClick\022\r\n\005query\030\002 \001("
      "\t\"\203\002\n\027VkMusicQueryBlockClicks\022\022\n\nquery_t"
      "ext\030\001 \001(\t\022K\n\010services\030\002 \003(\01329.ru.mail.go"
      ".webbase.blobs.VkMusicQueryBlockClicks.S"
      "ervice\032%\n\005Block\022\014\n\004name\030\001 \001(\t\022\016\n\006clicks\030"
      "\002 \001(\004\032`\n\007Service\022\014\n\004name\030\001 \001(\t\022G\n\006blocks"
      "\030\002 \003(\01327.ru.mail.go.webbase.blobs.VkMusi"
      "cQueryBlockClicks.Block\"R\n\030VkMusicFronte"
      "ndExtradata\022\020\n\010orig_pos\030\001 \001(\r\022\021\n\tfixed_p"
      "os\030\002 \001(\r\022\021\n\torig_turn\030\003 \001(\010**\n\022VkMusicSe"
      "ssionType\022\t\n\005TRACK\020\001\022\t\n\005ALBUM\020\002*/\n\020VkMus"
      "icEventType\022\n\n\006SEARCH\020\001\022\017\n\013TRACK_CLICK\020\002"
      "B\tB\007VkMusic"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5691);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vk_music.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_parsed_5fblobs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_vk_5fmusic_2eproto

const ::google::protobuf::EnumDescriptor* VkMusicSpellcheckerResponse_Type_descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_enum_descriptors[0];
}
bool VkMusicSpellcheckerResponse_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VkMusicSpellcheckerResponse_Type VkMusicSpellcheckerResponse::AUTO;
const VkMusicSpellcheckerResponse_Type VkMusicSpellcheckerResponse::SUGG;
const VkMusicSpellcheckerResponse_Type VkMusicSpellcheckerResponse::Type_MIN;
const VkMusicSpellcheckerResponse_Type VkMusicSpellcheckerResponse::Type_MAX;
const int VkMusicSpellcheckerResponse::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VkMusicSession_Sex_descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_enum_descriptors[1];
}
bool VkMusicSession_Sex_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VkMusicSession_Sex VkMusicSession::FEMALE;
const VkMusicSession_Sex VkMusicSession::MALE;
const VkMusicSession_Sex VkMusicSession::Sex_MIN;
const VkMusicSession_Sex VkMusicSession::Sex_MAX;
const int VkMusicSession::Sex_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VkMusicSessionType_descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_enum_descriptors[2];
}
bool VkMusicSessionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VkMusicEventType_descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_enum_descriptors[3];
}
bool VkMusicEventType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicTrack::kOwnerIdFieldNumber;
const int VkMusicTrack::kAudioIdFieldNumber;
const int VkMusicTrack::kTitleFieldNumber;
const int VkMusicTrack::kPerformerFieldNumber;
const int VkMusicTrack::kTagsFieldNumber;
const int VkMusicTrack::kDurationFieldNumber;
const int VkMusicTrack::kAddedFieldNumber;
const int VkMusicTrack::kGenreFieldNumber;
const int VkMusicTrack::kBitrateFieldNumber;
const int VkMusicTrack::kLyricsFieldNumber;
const int VkMusicTrack::kOfficialFieldNumber;
const int VkMusicTrack::kHashFieldNumber;
const int VkMusicTrack::kTimestampFieldNumber;
const int VkMusicTrack::kTimesListenedFieldNumber;
const int VkMusicTrack::kExtraNamesFieldNumber;
const int VkMusicTrack::kDeletedFieldNumber;
const int VkMusicTrack::kCopyOwnerIdFieldNumber;
const int VkMusicTrack::kCopyAudioIdFieldNumber;
const int VkMusicTrack::kHashgroupSizeFieldNumber;
const int VkMusicTrack::kCrcgroupSizeFieldNumber;
const int VkMusicTrack::kTimesListenedLastMonthFieldNumber;
const int VkMusicTrack::kTimesListenedLastWeekFieldNumber;
const int VkMusicTrack::kExtraPerformerNamesFieldNumber;
const int VkMusicTrack::kExtraTitleNamesFieldNumber;
const int VkMusicTrack::kGlobalCrcgroupSizeFieldNumber;
const int VkMusicTrack::kGlobalTimesListenedFieldNumber;
const int VkMusicTrack::kGlobalTimesListenedLastMonthFieldNumber;
const int VkMusicTrack::kGlobalTimesListenedLastWeekFieldNumber;
const int VkMusicTrack::kUmaReleaseIdFieldNumber;
const int VkMusicTrack::kAlternativeTrackIdsFieldNumber;
const int VkMusicTrack::kTrackIdFieldNumber;
const int VkMusicTrack::kClusterIdFieldNumber;
const int VkMusicTrack::kSubtitleFieldNumber;
const int VkMusicTrack::kSourceOwnerIdFieldNumber;
const int VkMusicTrack::kSourceAudioIdFieldNumber;
const int VkMusicTrack::kTimestampMsFieldNumber;
const int VkMusicTrack::kFromOfflineIndexFieldNumber;
const int VkMusicTrack::kTitleAlternativesFieldNumber;
const int VkMusicTrack::kPerformerAlternativesFieldNumber;
const int VkMusicTrack::kUmaLyricsFieldNumber;
const int VkMusicTrack::kAlbumReleaseTsFieldNumber;
const int VkMusicTrack::kRightholderIdFieldNumber;
const int VkMusicTrack::kRightholderNameFieldNumber;
const int VkMusicTrack::kIsCopyOfMastercopyFieldNumber;
const int VkMusicTrack::kIsBoostableRightholderFieldNumber;
const int VkMusicTrack::kIsNewBoostableReleaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicTrack::VkMusicTrack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicTrack)
}
VkMusicTrack::VkMusicTrack(const VkMusicTrack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tags_(from.tags_),
      extra_names_(from.extra_names_),
      extra_performer_names_(from.extra_performer_names_),
      extra_title_names_(from.extra_title_names_),
      alternative_track_ids_(from.alternative_track_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  performer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_performer()) {
    performer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  subtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_subtitle()) {
    subtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
  }
  title_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title_alternatives()) {
    title_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_alternatives_);
  }
  performer_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_performer_alternatives()) {
    performer_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_alternatives_);
  }
  rightholder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rightholder_name()) {
    rightholder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rightholder_name_);
  }
  if (from.has_uma_lyrics()) {
    uma_lyrics_ = new ::ru::mail::go::webbase::blobs::VkMusicLyrics(*from.uma_lyrics_);
  } else {
    uma_lyrics_ = NULL;
  }
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightholder_id_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(rightholder_id_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicTrack)
}

void VkMusicTrack::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rightholder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uma_lyrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightholder_id_) -
      reinterpret_cast<char*>(&uma_lyrics_)) + sizeof(rightholder_id_));
  _cached_size_ = 0;
}

VkMusicTrack::~VkMusicTrack() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicTrack)
  SharedDtor();
}

void VkMusicTrack::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_alternatives_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_alternatives_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rightholder_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uma_lyrics_;
}

void VkMusicTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicTrack::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicTrack& VkMusicTrack::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicTrack* VkMusicTrack::New(::google::protobuf::Arena* arena) const {
  VkMusicTrack* n = new VkMusicTrack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  extra_names_.Clear();
  extra_performer_names_.Clear();
  extra_title_names_.Clear();
  alternative_track_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!performer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*performer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!subtitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*subtitle_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!title_alternatives_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_alternatives_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!performer_alternatives_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*performer_alternatives_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!rightholder_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rightholder_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(uma_lyrics_ != NULL);
      uma_lyrics_->::ru::mail::go::webbase::blobs::VkMusicLyrics::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_listened_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(times_listened_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&copy_owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&global_times_listened_) -
        reinterpret_cast<char*>(&copy_owner_id_)) + sizeof(global_times_listened_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&global_times_listened_last_month_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_copy_of_mastercopy_) -
        reinterpret_cast<char*>(&global_times_listened_last_month_)) + sizeof(is_copy_of_mastercopy_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&is_boostable_rightholder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&album_release_ts_) -
        reinterpret_cast<char*>(&is_boostable_rightholder_)) + sizeof(album_release_ts_));
  }
  rightholder_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 owner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 audio_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_audio_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &audio_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string performer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_performer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->performer().data(), static_cast<int>(this->performer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.performer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 added = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_added();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 genre = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_genre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bitrate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_bitrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lyrics = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_lyrics();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lyrics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool official = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_official();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &official_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hash = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_times_listened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string extra_names = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_extra_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_names(this->extra_names_size() - 1).data(),
            static_cast<int>(this->extra_names(this->extra_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.extra_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deleted = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_deleted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 copy_owner_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_copy_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &copy_owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 copy_audio_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_copy_audio_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &copy_audio_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hashgroup_size = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_hashgroup_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hashgroup_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 crcgroup_size = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_crcgroup_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crcgroup_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened_last_month = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_times_listened_last_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_last_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened_last_week = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_times_listened_last_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_last_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string extra_performer_names = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_extra_performer_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_performer_names(this->extra_performer_names_size() - 1).data(),
            static_cast<int>(this->extra_performer_names(this->extra_performer_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string extra_title_names = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_extra_title_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_title_names(this->extra_title_names_size() - 1).data(),
            static_cast<int>(this->extra_title_names(this->extra_title_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 global_crcgroup_size = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_global_crcgroup_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &global_crcgroup_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 global_times_listened = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_global_times_listened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &global_times_listened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 global_times_listened_last_month = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_global_times_listened_last_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &global_times_listened_last_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 global_times_listened_last_week = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_global_times_listened_last_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &global_times_listened_last_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 uma_release_id = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_uma_release_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uma_release_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string alternative_track_ids = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alternative_track_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alternative_track_ids(this->alternative_track_ids_size() - 1).data(),
            static_cast<int>(this->alternative_track_ids(this->alternative_track_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 track_id = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_track_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cluster_id = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subtitle = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtitle().data(), static_cast<int>(this->subtitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.subtitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 source_owner_id = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_source_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 source_audio_id = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_source_audio_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_audio_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_ms = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_offline_index = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_from_offline_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_offline_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title_alternatives = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title_alternatives()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title_alternatives().data(), static_cast<int>(this->title_alternatives().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string performer_alternatives = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_performer_alternatives()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->performer_alternatives().data(), static_cast<int>(this->performer_alternatives().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicLyrics uma_lyrics = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uma_lyrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 album_release_ts = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_album_release_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &album_release_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rightholder_id = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_rightholder_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rightholder_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rightholder_name = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rightholder_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rightholder_name().data(), static_cast<int>(this->rightholder_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_copy_of_mastercopy = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_is_copy_of_mastercopy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_copy_of_mastercopy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_boostable_rightholder = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_is_boostable_rightholder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_boostable_rightholder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_new_boostable_release = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_is_new_boostable_release();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_boostable_release_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicTrack)
  return false;
#undef DO_
}

void VkMusicTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 owner_id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->owner_id(), output);
  }

  // required int64 audio_id = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->audio_id(), output);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string performer = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer().data(), static_cast<int>(this->performer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.performer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->performer(), output);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tags(i), output);
  }

  // optional int32 duration = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->duration(), output);
  }

  // optional int32 added = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->added(), output);
  }

  // optional int32 genre = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->genre(), output);
  }

  // optional int32 bitrate = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bitrate(), output);
  }

  // optional bool lyrics = 10;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->lyrics(), output);
  }

  // optional bool official = 11;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->official(), output);
  }

  // required string hash = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->hash(), output);
  }

  // required int64 timestamp = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->timestamp(), output);
  }

  // optional int64 times_listened = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->times_listened(), output);
  }

  // repeated string extra_names = 15;
  for (int i = 0, n = this->extra_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_names(i).data(), static_cast<int>(this->extra_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.extra_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->extra_names(i), output);
  }

  // optional bool deleted = 16;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->deleted(), output);
  }

  // optional int64 copy_owner_id = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->copy_owner_id(), output);
  }

  // optional int64 copy_audio_id = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->copy_audio_id(), output);
  }

  // optional int64 hashgroup_size = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->hashgroup_size(), output);
  }

  // optional int64 crcgroup_size = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->crcgroup_size(), output);
  }

  // optional int64 times_listened_last_month = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->times_listened_last_month(), output);
  }

  // optional int64 times_listened_last_week = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->times_listened_last_week(), output);
  }

  // repeated string extra_performer_names = 23;
  for (int i = 0, n = this->extra_performer_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_performer_names(i).data(), static_cast<int>(this->extra_performer_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->extra_performer_names(i), output);
  }

  // repeated string extra_title_names = 24;
  for (int i = 0, n = this->extra_title_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_title_names(i).data(), static_cast<int>(this->extra_title_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->extra_title_names(i), output);
  }

  // optional int64 global_crcgroup_size = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->global_crcgroup_size(), output);
  }

  // optional int64 global_times_listened = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->global_times_listened(), output);
  }

  // optional int64 global_times_listened_last_month = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->global_times_listened_last_month(), output);
  }

  // optional int64 global_times_listened_last_week = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->global_times_listened_last_week(), output);
  }

  // optional int64 uma_release_id = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->uma_release_id(), output);
  }

  // repeated string alternative_track_ids = 30;
  for (int i = 0, n = this->alternative_track_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alternative_track_ids(i).data(), static_cast<int>(this->alternative_track_ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->alternative_track_ids(i), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 track_id = 31;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->track_id(), output);
  }

  // optional int64 cluster_id = 32;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->cluster_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string subtitle = 33;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtitle().data(), static_cast<int>(this->subtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.subtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->subtitle(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 source_owner_id = 34;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->source_owner_id(), output);
  }

  // optional int64 source_audio_id = 35;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->source_audio_id(), output);
  }

  // optional int64 timestamp_ms = 36;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->timestamp_ms(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool from_offline_index = 37;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->from_offline_index(), output);
  }

  // optional string title_alternatives = 38;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title_alternatives().data(), static_cast<int>(this->title_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->title_alternatives(), output);
  }

  // optional string performer_alternatives = 39;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer_alternatives().data(), static_cast<int>(this->performer_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->performer_alternatives(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicLyrics uma_lyrics = 40;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->uma_lyrics_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 album_release_ts = 41;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->album_release_ts(), output);
  }

  // optional int64 rightholder_id = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->rightholder_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string rightholder_name = 43;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rightholder_name().data(), static_cast<int>(this->rightholder_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->rightholder_name(), output);
  }

  // optional bool is_copy_of_mastercopy = 44;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->is_copy_of_mastercopy(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_boostable_rightholder = 45;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->is_boostable_rightholder(), output);
  }

  // optional bool is_new_boostable_release = 46;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->is_new_boostable_release(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicTrack)
}

::google::protobuf::uint8* VkMusicTrack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 owner_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->owner_id(), target);
  }

  // required int64 audio_id = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->audio_id(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string performer = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer().data(), static_cast<int>(this->performer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.performer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->performer(), target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->tags(i), target);
  }

  // optional int32 duration = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->duration(), target);
  }

  // optional int32 added = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->added(), target);
  }

  // optional int32 genre = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->genre(), target);
  }

  // optional int32 bitrate = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bitrate(), target);
  }

  // optional bool lyrics = 10;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->lyrics(), target);
  }

  // optional bool official = 11;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->official(), target);
  }

  // required string hash = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->hash(), target);
  }

  // required int64 timestamp = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->timestamp(), target);
  }

  // optional int64 times_listened = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->times_listened(), target);
  }

  // repeated string extra_names = 15;
  for (int i = 0, n = this->extra_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_names(i).data(), static_cast<int>(this->extra_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.extra_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->extra_names(i), target);
  }

  // optional bool deleted = 16;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->deleted(), target);
  }

  // optional int64 copy_owner_id = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->copy_owner_id(), target);
  }

  // optional int64 copy_audio_id = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->copy_audio_id(), target);
  }

  // optional int64 hashgroup_size = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->hashgroup_size(), target);
  }

  // optional int64 crcgroup_size = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->crcgroup_size(), target);
  }

  // optional int64 times_listened_last_month = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->times_listened_last_month(), target);
  }

  // optional int64 times_listened_last_week = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->times_listened_last_week(), target);
  }

  // repeated string extra_performer_names = 23;
  for (int i = 0, n = this->extra_performer_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_performer_names(i).data(), static_cast<int>(this->extra_performer_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(23, this->extra_performer_names(i), target);
  }

  // repeated string extra_title_names = 24;
  for (int i = 0, n = this->extra_title_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_title_names(i).data(), static_cast<int>(this->extra_title_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(24, this->extra_title_names(i), target);
  }

  // optional int64 global_crcgroup_size = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->global_crcgroup_size(), target);
  }

  // optional int64 global_times_listened = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->global_times_listened(), target);
  }

  // optional int64 global_times_listened_last_month = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->global_times_listened_last_month(), target);
  }

  // optional int64 global_times_listened_last_week = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->global_times_listened_last_week(), target);
  }

  // optional int64 uma_release_id = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->uma_release_id(), target);
  }

  // repeated string alternative_track_ids = 30;
  for (int i = 0, n = this->alternative_track_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alternative_track_ids(i).data(), static_cast<int>(this->alternative_track_ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(30, this->alternative_track_ids(i), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 track_id = 31;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->track_id(), target);
  }

  // optional int64 cluster_id = 32;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->cluster_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string subtitle = 33;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtitle().data(), static_cast<int>(this->subtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.subtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->subtitle(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 source_owner_id = 34;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->source_owner_id(), target);
  }

  // optional int64 source_audio_id = 35;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->source_audio_id(), target);
  }

  // optional int64 timestamp_ms = 36;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->timestamp_ms(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool from_offline_index = 37;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->from_offline_index(), target);
  }

  // optional string title_alternatives = 38;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title_alternatives().data(), static_cast<int>(this->title_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->title_alternatives(), target);
  }

  // optional string performer_alternatives = 39;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer_alternatives().data(), static_cast<int>(this->performer_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->performer_alternatives(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicLyrics uma_lyrics = 40;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->uma_lyrics_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 album_release_ts = 41;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->album_release_ts(), target);
  }

  // optional int64 rightholder_id = 42;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->rightholder_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string rightholder_name = 43;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rightholder_name().data(), static_cast<int>(this->rightholder_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->rightholder_name(), target);
  }

  // optional bool is_copy_of_mastercopy = 44;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->is_copy_of_mastercopy(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_boostable_rightholder = 45;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->is_boostable_rightholder(), target);
  }

  // optional bool is_new_boostable_release = 46;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->is_new_boostable_release(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicTrack)
  return target;
}

size_t VkMusicTrack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  size_t total_size = 0;

  if (has_hash()) {
    // required string hash = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  if (has_owner_id()) {
    // required int64 owner_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  if (has_audio_id()) {
    // required int64 audio_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->audio_id());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  return total_size;
}
size_t VkMusicTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00004304) ^ 0x00004304) == 0) {  // All required fields are present.
    // required string hash = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

    // required int64 owner_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());

    // required int64 audio_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->audio_id());

    // required int64 timestamp = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string tags = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string extra_names = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->extra_names_size());
  for (int i = 0, n = this->extra_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->extra_names(i));
  }

  // repeated string extra_performer_names = 23;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->extra_performer_names_size());
  for (int i = 0, n = this->extra_performer_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->extra_performer_names(i));
  }

  // repeated string extra_title_names = 24;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->extra_title_names_size());
  for (int i = 0, n = this->extra_title_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->extra_title_names(i));
  }

  // repeated string alternative_track_ids = 30;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->alternative_track_ids_size());
  for (int i = 0, n = this->alternative_track_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alternative_track_ids(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string performer = 4;
    if (has_performer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->performer());
    }

  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional string subtitle = 33;
    if (has_subtitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtitle());
    }

    // optional string title_alternatives = 38;
    if (has_title_alternatives()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title_alternatives());
    }

    // optional string performer_alternatives = 39;
    if (has_performer_alternatives()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->performer_alternatives());
    }

    // optional string rightholder_name = 43;
    if (has_rightholder_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rightholder_name());
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicLyrics uma_lyrics = 40;
    if (has_uma_lyrics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uma_lyrics_);
    }

  }
  if (_has_bits_[8 / 32] & 15360u) {
    // optional int32 duration = 6;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 added = 7;
    if (has_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added());
    }

    // optional int32 genre = 8;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genre());
    }

    // optional int32 bitrate = 9;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate());
    }

  }
  // optional int64 times_listened = 14;
  if (has_times_listened()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->times_listened());
  }

  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int64 copy_owner_id = 17;
    if (has_copy_owner_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->copy_owner_id());
    }

    // optional int64 copy_audio_id = 18;
    if (has_copy_audio_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->copy_audio_id());
    }

    // optional int64 hashgroup_size = 19;
    if (has_hashgroup_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hashgroup_size());
    }

    // optional int64 crcgroup_size = 20;
    if (has_crcgroup_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crcgroup_size());
    }

    // optional int64 times_listened_last_month = 21;
    if (has_times_listened_last_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times_listened_last_month());
    }

    // optional int64 times_listened_last_week = 22;
    if (has_times_listened_last_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times_listened_last_week());
    }

    // optional int64 global_crcgroup_size = 25;
    if (has_global_crcgroup_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->global_crcgroup_size());
    }

    // optional int64 global_times_listened = 26;
    if (has_global_times_listened()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->global_times_listened());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int64 global_times_listened_last_month = 27;
    if (has_global_times_listened_last_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->global_times_listened_last_month());
    }

    // optional int64 global_times_listened_last_week = 28;
    if (has_global_times_listened_last_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->global_times_listened_last_week());
    }

    // optional int64 uma_release_id = 29;
    if (has_uma_release_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uma_release_id());
    }

    // optional bool lyrics = 10;
    if (has_lyrics()) {
      total_size += 1 + 1;
    }

    // optional bool official = 11;
    if (has_official()) {
      total_size += 1 + 1;
    }

    // optional bool deleted = 16;
    if (has_deleted()) {
      total_size += 2 + 1;
    }

    // optional bool from_offline_index = 37;
    if (has_from_offline_index()) {
      total_size += 2 + 1;
    }

    // optional bool is_copy_of_mastercopy = 44;
    if (has_is_copy_of_mastercopy()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool is_boostable_rightholder = 45;
    if (has_is_boostable_rightholder()) {
      total_size += 2 + 1;
    }

    // optional bool is_new_boostable_release = 46;
    if (has_is_new_boostable_release()) {
      total_size += 2 + 1;
    }

    // optional int64 track_id = 31;
    if (has_track_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->track_id());
    }

    // optional int64 cluster_id = 32;
    if (has_cluster_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cluster_id());
    }

    // optional int64 source_owner_id = 34;
    if (has_source_owner_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_owner_id());
    }

    // optional int64 source_audio_id = 35;
    if (has_source_audio_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_audio_id());
    }

    // optional int64 timestamp_ms = 36;
    if (has_timestamp_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 album_release_ts = 41;
    if (has_album_release_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->album_release_ts());
    }

  }
  // optional int64 rightholder_id = 42;
  if (has_rightholder_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rightholder_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicTrack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicTrack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicTrack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicTrack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicTrack)
    MergeFrom(*source);
  }
}

void VkMusicTrack::MergeFrom(const VkMusicTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  extra_names_.MergeFrom(from.extra_names_);
  extra_performer_names_.MergeFrom(from.extra_performer_names_);
  extra_title_names_.MergeFrom(from.extra_title_names_);
  alternative_track_ids_.MergeFrom(from.alternative_track_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_performer();
      performer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_subtitle();
      subtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_title_alternatives();
      title_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_alternatives_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_performer_alternatives();
      performer_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_alternatives_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_rightholder_name();
      rightholder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rightholder_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_uma_lyrics()->::ru::mail::go::webbase::blobs::VkMusicLyrics::MergeFrom(from.uma_lyrics());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      audio_id_ = from.audio_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000800u) {
      added_ = from.added_;
    }
    if (cached_has_bits & 0x00001000u) {
      genre_ = from.genre_;
    }
    if (cached_has_bits & 0x00002000u) {
      bitrate_ = from.bitrate_;
    }
    if (cached_has_bits & 0x00004000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00008000u) {
      times_listened_ = from.times_listened_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      copy_owner_id_ = from.copy_owner_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      copy_audio_id_ = from.copy_audio_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      hashgroup_size_ = from.hashgroup_size_;
    }
    if (cached_has_bits & 0x00080000u) {
      crcgroup_size_ = from.crcgroup_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      times_listened_last_month_ = from.times_listened_last_month_;
    }
    if (cached_has_bits & 0x00200000u) {
      times_listened_last_week_ = from.times_listened_last_week_;
    }
    if (cached_has_bits & 0x00400000u) {
      global_crcgroup_size_ = from.global_crcgroup_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      global_times_listened_ = from.global_times_listened_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      global_times_listened_last_month_ = from.global_times_listened_last_month_;
    }
    if (cached_has_bits & 0x02000000u) {
      global_times_listened_last_week_ = from.global_times_listened_last_week_;
    }
    if (cached_has_bits & 0x04000000u) {
      uma_release_id_ = from.uma_release_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      lyrics_ = from.lyrics_;
    }
    if (cached_has_bits & 0x10000000u) {
      official_ = from.official_;
    }
    if (cached_has_bits & 0x20000000u) {
      deleted_ = from.deleted_;
    }
    if (cached_has_bits & 0x40000000u) {
      from_offline_index_ = from.from_offline_index_;
    }
    if (cached_has_bits & 0x80000000u) {
      is_copy_of_mastercopy_ = from.is_copy_of_mastercopy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      is_boostable_rightholder_ = from.is_boostable_rightholder_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_new_boostable_release_ = from.is_new_boostable_release_;
    }
    if (cached_has_bits & 0x00000004u) {
      track_id_ = from.track_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cluster_id_ = from.cluster_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_owner_id_ = from.source_owner_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      source_audio_id_ = from.source_audio_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      album_release_ts_ = from.album_release_ts_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_rightholder_id(from.rightholder_id());
  }
}

void VkMusicTrack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicTrack::CopyFrom(const VkMusicTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicTrack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00004304) != 0x00004304) return false;
  return true;
}

void VkMusicTrack::Swap(VkMusicTrack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicTrack::InternalSwap(VkMusicTrack* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  extra_names_.InternalSwap(&other->extra_names_);
  extra_performer_names_.InternalSwap(&other->extra_performer_names_);
  extra_title_names_.InternalSwap(&other->extra_title_names_);
  alternative_track_ids_.InternalSwap(&other->alternative_track_ids_);
  title_.Swap(&other->title_);
  performer_.Swap(&other->performer_);
  hash_.Swap(&other->hash_);
  subtitle_.Swap(&other->subtitle_);
  title_alternatives_.Swap(&other->title_alternatives_);
  performer_alternatives_.Swap(&other->performer_alternatives_);
  rightholder_name_.Swap(&other->rightholder_name_);
  swap(uma_lyrics_, other->uma_lyrics_);
  swap(owner_id_, other->owner_id_);
  swap(audio_id_, other->audio_id_);
  swap(duration_, other->duration_);
  swap(added_, other->added_);
  swap(genre_, other->genre_);
  swap(bitrate_, other->bitrate_);
  swap(timestamp_, other->timestamp_);
  swap(times_listened_, other->times_listened_);
  swap(copy_owner_id_, other->copy_owner_id_);
  swap(copy_audio_id_, other->copy_audio_id_);
  swap(hashgroup_size_, other->hashgroup_size_);
  swap(crcgroup_size_, other->crcgroup_size_);
  swap(times_listened_last_month_, other->times_listened_last_month_);
  swap(times_listened_last_week_, other->times_listened_last_week_);
  swap(global_crcgroup_size_, other->global_crcgroup_size_);
  swap(global_times_listened_, other->global_times_listened_);
  swap(global_times_listened_last_month_, other->global_times_listened_last_month_);
  swap(global_times_listened_last_week_, other->global_times_listened_last_week_);
  swap(uma_release_id_, other->uma_release_id_);
  swap(lyrics_, other->lyrics_);
  swap(official_, other->official_);
  swap(deleted_, other->deleted_);
  swap(from_offline_index_, other->from_offline_index_);
  swap(is_copy_of_mastercopy_, other->is_copy_of_mastercopy_);
  swap(is_boostable_rightholder_, other->is_boostable_rightholder_);
  swap(is_new_boostable_release_, other->is_new_boostable_release_);
  swap(track_id_, other->track_id_);
  swap(cluster_id_, other->cluster_id_);
  swap(source_owner_id_, other->source_owner_id_);
  swap(source_audio_id_, other->source_audio_id_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(album_release_ts_, other->album_release_ts_);
  swap(rightholder_id_, other->rightholder_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicTrack::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicTrack

// required int64 owner_id = 1;
bool VkMusicTrack::has_owner_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VkMusicTrack::set_has_owner_id() {
  _has_bits_[0] |= 0x00000100u;
}
void VkMusicTrack::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void VkMusicTrack::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
::google::protobuf::int64 VkMusicTrack::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.owner_id)
  return owner_id_;
}
void VkMusicTrack::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.owner_id)
}

// required int64 audio_id = 2;
bool VkMusicTrack::has_audio_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VkMusicTrack::set_has_audio_id() {
  _has_bits_[0] |= 0x00000200u;
}
void VkMusicTrack::clear_has_audio_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void VkMusicTrack::clear_audio_id() {
  audio_id_ = GOOGLE_LONGLONG(0);
  clear_has_audio_id();
}
::google::protobuf::int64 VkMusicTrack::audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.audio_id)
  return audio_id_;
}
void VkMusicTrack::set_audio_id(::google::protobuf::int64 value) {
  set_has_audio_id();
  audio_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.audio_id)
}

// optional string title = 3;
bool VkMusicTrack::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicTrack::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicTrack::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicTrack::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VkMusicTrack::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.title)
  return title_.GetNoArena();
}
void VkMusicTrack::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}
#if LANG_CXX11
void VkMusicTrack::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}
#endif
void VkMusicTrack::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}
void VkMusicTrack::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}
::std::string* VkMusicTrack::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicTrack::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicTrack::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.title)
}

// optional string performer = 4;
bool VkMusicTrack::has_performer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicTrack::set_has_performer() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicTrack::clear_has_performer() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicTrack::clear_performer() {
  performer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer();
}
const ::std::string& VkMusicTrack::performer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
  return performer_.GetNoArena();
}
void VkMusicTrack::set_performer(const ::std::string& value) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}
#if LANG_CXX11
void VkMusicTrack::set_performer(::std::string&& value) {
  set_has_performer();
  performer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}
#endif
void VkMusicTrack::set_performer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}
void VkMusicTrack::set_performer(const char* value, size_t size) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}
::std::string* VkMusicTrack::mutable_performer() {
  set_has_performer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
  return performer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicTrack::release_performer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
  clear_has_performer();
  return performer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicTrack::set_allocated_performer(::std::string* performer) {
  if (performer != NULL) {
    set_has_performer();
  } else {
    clear_has_performer();
  }
  performer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.performer)
}

// repeated string tags = 5;
int VkMusicTrack::tags_size() const {
  return tags_.size();
}
void VkMusicTrack::clear_tags() {
  tags_.Clear();
}
const ::std::string& VkMusicTrack::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return tags_.Get(index);
}
::std::string* VkMusicTrack::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return tags_.Mutable(index);
}
void VkMusicTrack::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicTrack::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicTrack::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
void VkMusicTrack::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
::std::string* VkMusicTrack::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return tags_.Add();
}
void VkMusicTrack::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
#if LANG_CXX11
void VkMusicTrack::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
#endif
void VkMusicTrack::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
void VkMusicTrack::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.tags)
  return &tags_;
}

// optional int32 duration = 6;
bool VkMusicTrack::has_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VkMusicTrack::set_has_duration() {
  _has_bits_[0] |= 0x00000400u;
}
void VkMusicTrack::clear_has_duration() {
  _has_bits_[0] &= ~0x00000400u;
}
void VkMusicTrack::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 VkMusicTrack::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.duration)
  return duration_;
}
void VkMusicTrack::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.duration)
}

// optional int32 added = 7;
bool VkMusicTrack::has_added() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VkMusicTrack::set_has_added() {
  _has_bits_[0] |= 0x00000800u;
}
void VkMusicTrack::clear_has_added() {
  _has_bits_[0] &= ~0x00000800u;
}
void VkMusicTrack::clear_added() {
  added_ = 0;
  clear_has_added();
}
::google::protobuf::int32 VkMusicTrack::added() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.added)
  return added_;
}
void VkMusicTrack::set_added(::google::protobuf::int32 value) {
  set_has_added();
  added_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.added)
}

// optional int32 genre = 8;
bool VkMusicTrack::has_genre() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VkMusicTrack::set_has_genre() {
  _has_bits_[0] |= 0x00001000u;
}
void VkMusicTrack::clear_has_genre() {
  _has_bits_[0] &= ~0x00001000u;
}
void VkMusicTrack::clear_genre() {
  genre_ = 0;
  clear_has_genre();
}
::google::protobuf::int32 VkMusicTrack::genre() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.genre)
  return genre_;
}
void VkMusicTrack::set_genre(::google::protobuf::int32 value) {
  set_has_genre();
  genre_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.genre)
}

// optional int32 bitrate = 9;
bool VkMusicTrack::has_bitrate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VkMusicTrack::set_has_bitrate() {
  _has_bits_[0] |= 0x00002000u;
}
void VkMusicTrack::clear_has_bitrate() {
  _has_bits_[0] &= ~0x00002000u;
}
void VkMusicTrack::clear_bitrate() {
  bitrate_ = 0;
  clear_has_bitrate();
}
::google::protobuf::int32 VkMusicTrack::bitrate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.bitrate)
  return bitrate_;
}
void VkMusicTrack::set_bitrate(::google::protobuf::int32 value) {
  set_has_bitrate();
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.bitrate)
}

// optional bool lyrics = 10;
bool VkMusicTrack::has_lyrics() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void VkMusicTrack::set_has_lyrics() {
  _has_bits_[0] |= 0x08000000u;
}
void VkMusicTrack::clear_has_lyrics() {
  _has_bits_[0] &= ~0x08000000u;
}
void VkMusicTrack::clear_lyrics() {
  lyrics_ = false;
  clear_has_lyrics();
}
bool VkMusicTrack::lyrics() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.lyrics)
  return lyrics_;
}
void VkMusicTrack::set_lyrics(bool value) {
  set_has_lyrics();
  lyrics_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.lyrics)
}

// optional bool official = 11;
bool VkMusicTrack::has_official() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void VkMusicTrack::set_has_official() {
  _has_bits_[0] |= 0x10000000u;
}
void VkMusicTrack::clear_has_official() {
  _has_bits_[0] &= ~0x10000000u;
}
void VkMusicTrack::clear_official() {
  official_ = false;
  clear_has_official();
}
bool VkMusicTrack::official() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.official)
  return official_;
}
void VkMusicTrack::set_official(bool value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.official)
}

// required string hash = 12;
bool VkMusicTrack::has_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicTrack::set_has_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicTrack::clear_has_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicTrack::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& VkMusicTrack::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
  return hash_.GetNoArena();
}
void VkMusicTrack::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}
#if LANG_CXX11
void VkMusicTrack::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}
#endif
void VkMusicTrack::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}
void VkMusicTrack::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}
::std::string* VkMusicTrack::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicTrack::release_hash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicTrack::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.hash)
}

// required int64 timestamp = 13;
bool VkMusicTrack::has_timestamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VkMusicTrack::set_has_timestamp() {
  _has_bits_[0] |= 0x00004000u;
}
void VkMusicTrack::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00004000u;
}
void VkMusicTrack::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 VkMusicTrack::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.timestamp)
  return timestamp_;
}
void VkMusicTrack::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.timestamp)
}

// optional int64 times_listened = 14;
bool VkMusicTrack::has_times_listened() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VkMusicTrack::set_has_times_listened() {
  _has_bits_[0] |= 0x00008000u;
}
void VkMusicTrack::clear_has_times_listened() {
  _has_bits_[0] &= ~0x00008000u;
}
void VkMusicTrack::clear_times_listened() {
  times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened();
}
::google::protobuf::int64 VkMusicTrack::times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened)
  return times_listened_;
}
void VkMusicTrack::set_times_listened(::google::protobuf::int64 value) {
  set_has_times_listened();
  times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened)
}

// repeated string extra_names = 15;
int VkMusicTrack::extra_names_size() const {
  return extra_names_.size();
}
void VkMusicTrack::clear_extra_names() {
  extra_names_.Clear();
}
const ::std::string& VkMusicTrack::extra_names(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return extra_names_.Get(index);
}
::std::string* VkMusicTrack::mutable_extra_names(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return extra_names_.Mutable(index);
}
void VkMusicTrack::set_extra_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  extra_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicTrack::set_extra_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  extra_names_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicTrack::set_extra_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
void VkMusicTrack::set_extra_names(int index, const char* value, size_t size) {
  extra_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
::std::string* VkMusicTrack::add_extra_names() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return extra_names_.Add();
}
void VkMusicTrack::add_extra_names(const ::std::string& value) {
  extra_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
#if LANG_CXX11
void VkMusicTrack::add_extra_names(::std::string&& value) {
  extra_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
#endif
void VkMusicTrack::add_extra_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
void VkMusicTrack::add_extra_names(const char* value, size_t size) {
  extra_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::extra_names() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return extra_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_extra_names() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_names)
  return &extra_names_;
}

// optional bool deleted = 16;
bool VkMusicTrack::has_deleted() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void VkMusicTrack::set_has_deleted() {
  _has_bits_[0] |= 0x20000000u;
}
void VkMusicTrack::clear_has_deleted() {
  _has_bits_[0] &= ~0x20000000u;
}
void VkMusicTrack::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
bool VkMusicTrack::deleted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.deleted)
  return deleted_;
}
void VkMusicTrack::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.deleted)
}

// optional int64 copy_owner_id = 17;
bool VkMusicTrack::has_copy_owner_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VkMusicTrack::set_has_copy_owner_id() {
  _has_bits_[0] |= 0x00010000u;
}
void VkMusicTrack::clear_has_copy_owner_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void VkMusicTrack::clear_copy_owner_id() {
  copy_owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_copy_owner_id();
}
::google::protobuf::int64 VkMusicTrack::copy_owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.copy_owner_id)
  return copy_owner_id_;
}
void VkMusicTrack::set_copy_owner_id(::google::protobuf::int64 value) {
  set_has_copy_owner_id();
  copy_owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.copy_owner_id)
}

// optional int64 copy_audio_id = 18;
bool VkMusicTrack::has_copy_audio_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VkMusicTrack::set_has_copy_audio_id() {
  _has_bits_[0] |= 0x00020000u;
}
void VkMusicTrack::clear_has_copy_audio_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void VkMusicTrack::clear_copy_audio_id() {
  copy_audio_id_ = GOOGLE_LONGLONG(0);
  clear_has_copy_audio_id();
}
::google::protobuf::int64 VkMusicTrack::copy_audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.copy_audio_id)
  return copy_audio_id_;
}
void VkMusicTrack::set_copy_audio_id(::google::protobuf::int64 value) {
  set_has_copy_audio_id();
  copy_audio_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.copy_audio_id)
}

// optional int64 hashgroup_size = 19;
bool VkMusicTrack::has_hashgroup_size() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VkMusicTrack::set_has_hashgroup_size() {
  _has_bits_[0] |= 0x00040000u;
}
void VkMusicTrack::clear_has_hashgroup_size() {
  _has_bits_[0] &= ~0x00040000u;
}
void VkMusicTrack::clear_hashgroup_size() {
  hashgroup_size_ = GOOGLE_LONGLONG(0);
  clear_has_hashgroup_size();
}
::google::protobuf::int64 VkMusicTrack::hashgroup_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.hashgroup_size)
  return hashgroup_size_;
}
void VkMusicTrack::set_hashgroup_size(::google::protobuf::int64 value) {
  set_has_hashgroup_size();
  hashgroup_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.hashgroup_size)
}

// optional int64 crcgroup_size = 20;
bool VkMusicTrack::has_crcgroup_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VkMusicTrack::set_has_crcgroup_size() {
  _has_bits_[0] |= 0x00080000u;
}
void VkMusicTrack::clear_has_crcgroup_size() {
  _has_bits_[0] &= ~0x00080000u;
}
void VkMusicTrack::clear_crcgroup_size() {
  crcgroup_size_ = GOOGLE_LONGLONG(0);
  clear_has_crcgroup_size();
}
::google::protobuf::int64 VkMusicTrack::crcgroup_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.crcgroup_size)
  return crcgroup_size_;
}
void VkMusicTrack::set_crcgroup_size(::google::protobuf::int64 value) {
  set_has_crcgroup_size();
  crcgroup_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.crcgroup_size)
}

// optional int64 times_listened_last_month = 21;
bool VkMusicTrack::has_times_listened_last_month() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void VkMusicTrack::set_has_times_listened_last_month() {
  _has_bits_[0] |= 0x00100000u;
}
void VkMusicTrack::clear_has_times_listened_last_month() {
  _has_bits_[0] &= ~0x00100000u;
}
void VkMusicTrack::clear_times_listened_last_month() {
  times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_month();
}
::google::protobuf::int64 VkMusicTrack::times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened_last_month)
  return times_listened_last_month_;
}
void VkMusicTrack::set_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_times_listened_last_month();
  times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened_last_month)
}

// optional int64 times_listened_last_week = 22;
bool VkMusicTrack::has_times_listened_last_week() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void VkMusicTrack::set_has_times_listened_last_week() {
  _has_bits_[0] |= 0x00200000u;
}
void VkMusicTrack::clear_has_times_listened_last_week() {
  _has_bits_[0] &= ~0x00200000u;
}
void VkMusicTrack::clear_times_listened_last_week() {
  times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_week();
}
::google::protobuf::int64 VkMusicTrack::times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened_last_week)
  return times_listened_last_week_;
}
void VkMusicTrack::set_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_times_listened_last_week();
  times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.times_listened_last_week)
}

// repeated string extra_performer_names = 23;
int VkMusicTrack::extra_performer_names_size() const {
  return extra_performer_names_.size();
}
void VkMusicTrack::clear_extra_performer_names() {
  extra_performer_names_.Clear();
}
const ::std::string& VkMusicTrack::extra_performer_names(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return extra_performer_names_.Get(index);
}
::std::string* VkMusicTrack::mutable_extra_performer_names(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return extra_performer_names_.Mutable(index);
}
void VkMusicTrack::set_extra_performer_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  extra_performer_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicTrack::set_extra_performer_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  extra_performer_names_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicTrack::set_extra_performer_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_performer_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
void VkMusicTrack::set_extra_performer_names(int index, const char* value, size_t size) {
  extra_performer_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
::std::string* VkMusicTrack::add_extra_performer_names() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return extra_performer_names_.Add();
}
void VkMusicTrack::add_extra_performer_names(const ::std::string& value) {
  extra_performer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
#if LANG_CXX11
void VkMusicTrack::add_extra_performer_names(::std::string&& value) {
  extra_performer_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
#endif
void VkMusicTrack::add_extra_performer_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_performer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
void VkMusicTrack::add_extra_performer_names(const char* value, size_t size) {
  extra_performer_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::extra_performer_names() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return extra_performer_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_extra_performer_names() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_performer_names)
  return &extra_performer_names_;
}

// repeated string extra_title_names = 24;
int VkMusicTrack::extra_title_names_size() const {
  return extra_title_names_.size();
}
void VkMusicTrack::clear_extra_title_names() {
  extra_title_names_.Clear();
}
const ::std::string& VkMusicTrack::extra_title_names(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return extra_title_names_.Get(index);
}
::std::string* VkMusicTrack::mutable_extra_title_names(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return extra_title_names_.Mutable(index);
}
void VkMusicTrack::set_extra_title_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  extra_title_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicTrack::set_extra_title_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  extra_title_names_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicTrack::set_extra_title_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_title_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
void VkMusicTrack::set_extra_title_names(int index, const char* value, size_t size) {
  extra_title_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
::std::string* VkMusicTrack::add_extra_title_names() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return extra_title_names_.Add();
}
void VkMusicTrack::add_extra_title_names(const ::std::string& value) {
  extra_title_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
#if LANG_CXX11
void VkMusicTrack::add_extra_title_names(::std::string&& value) {
  extra_title_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
#endif
void VkMusicTrack::add_extra_title_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_title_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
void VkMusicTrack::add_extra_title_names(const char* value, size_t size) {
  extra_title_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::extra_title_names() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return extra_title_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_extra_title_names() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.extra_title_names)
  return &extra_title_names_;
}

// optional int64 global_crcgroup_size = 25;
bool VkMusicTrack::has_global_crcgroup_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void VkMusicTrack::set_has_global_crcgroup_size() {
  _has_bits_[0] |= 0x00400000u;
}
void VkMusicTrack::clear_has_global_crcgroup_size() {
  _has_bits_[0] &= ~0x00400000u;
}
void VkMusicTrack::clear_global_crcgroup_size() {
  global_crcgroup_size_ = GOOGLE_LONGLONG(0);
  clear_has_global_crcgroup_size();
}
::google::protobuf::int64 VkMusicTrack::global_crcgroup_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.global_crcgroup_size)
  return global_crcgroup_size_;
}
void VkMusicTrack::set_global_crcgroup_size(::google::protobuf::int64 value) {
  set_has_global_crcgroup_size();
  global_crcgroup_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.global_crcgroup_size)
}

// optional int64 global_times_listened = 26;
bool VkMusicTrack::has_global_times_listened() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void VkMusicTrack::set_has_global_times_listened() {
  _has_bits_[0] |= 0x00800000u;
}
void VkMusicTrack::clear_has_global_times_listened() {
  _has_bits_[0] &= ~0x00800000u;
}
void VkMusicTrack::clear_global_times_listened() {
  global_times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_global_times_listened();
}
::google::protobuf::int64 VkMusicTrack::global_times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened)
  return global_times_listened_;
}
void VkMusicTrack::set_global_times_listened(::google::protobuf::int64 value) {
  set_has_global_times_listened();
  global_times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened)
}

// optional int64 global_times_listened_last_month = 27;
bool VkMusicTrack::has_global_times_listened_last_month() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void VkMusicTrack::set_has_global_times_listened_last_month() {
  _has_bits_[0] |= 0x01000000u;
}
void VkMusicTrack::clear_has_global_times_listened_last_month() {
  _has_bits_[0] &= ~0x01000000u;
}
void VkMusicTrack::clear_global_times_listened_last_month() {
  global_times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_global_times_listened_last_month();
}
::google::protobuf::int64 VkMusicTrack::global_times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened_last_month)
  return global_times_listened_last_month_;
}
void VkMusicTrack::set_global_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_global_times_listened_last_month();
  global_times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened_last_month)
}

// optional int64 global_times_listened_last_week = 28;
bool VkMusicTrack::has_global_times_listened_last_week() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void VkMusicTrack::set_has_global_times_listened_last_week() {
  _has_bits_[0] |= 0x02000000u;
}
void VkMusicTrack::clear_has_global_times_listened_last_week() {
  _has_bits_[0] &= ~0x02000000u;
}
void VkMusicTrack::clear_global_times_listened_last_week() {
  global_times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_global_times_listened_last_week();
}
::google::protobuf::int64 VkMusicTrack::global_times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened_last_week)
  return global_times_listened_last_week_;
}
void VkMusicTrack::set_global_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_global_times_listened_last_week();
  global_times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.global_times_listened_last_week)
}

// optional int64 uma_release_id = 29;
bool VkMusicTrack::has_uma_release_id() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void VkMusicTrack::set_has_uma_release_id() {
  _has_bits_[0] |= 0x04000000u;
}
void VkMusicTrack::clear_has_uma_release_id() {
  _has_bits_[0] &= ~0x04000000u;
}
void VkMusicTrack::clear_uma_release_id() {
  uma_release_id_ = GOOGLE_LONGLONG(0);
  clear_has_uma_release_id();
}
::google::protobuf::int64 VkMusicTrack::uma_release_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.uma_release_id)
  return uma_release_id_;
}
void VkMusicTrack::set_uma_release_id(::google::protobuf::int64 value) {
  set_has_uma_release_id();
  uma_release_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.uma_release_id)
}

// repeated string alternative_track_ids = 30;
int VkMusicTrack::alternative_track_ids_size() const {
  return alternative_track_ids_.size();
}
void VkMusicTrack::clear_alternative_track_ids() {
  alternative_track_ids_.Clear();
}
const ::std::string& VkMusicTrack::alternative_track_ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return alternative_track_ids_.Get(index);
}
::std::string* VkMusicTrack::mutable_alternative_track_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return alternative_track_ids_.Mutable(index);
}
void VkMusicTrack::set_alternative_track_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  alternative_track_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicTrack::set_alternative_track_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  alternative_track_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicTrack::set_alternative_track_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_track_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
void VkMusicTrack::set_alternative_track_ids(int index, const char* value, size_t size) {
  alternative_track_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
::std::string* VkMusicTrack::add_alternative_track_ids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return alternative_track_ids_.Add();
}
void VkMusicTrack::add_alternative_track_ids(const ::std::string& value) {
  alternative_track_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
#if LANG_CXX11
void VkMusicTrack::add_alternative_track_ids(::std::string&& value) {
  alternative_track_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
#endif
void VkMusicTrack::add_alternative_track_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_track_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
void VkMusicTrack::add_alternative_track_ids(const char* value, size_t size) {
  alternative_track_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicTrack::alternative_track_ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return alternative_track_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicTrack::mutable_alternative_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicTrack.alternative_track_ids)
  return &alternative_track_ids_;
}

// optional int64 track_id = 31;
bool VkMusicTrack::has_track_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void VkMusicTrack::set_has_track_id() {
  _has_bits_[1] |= 0x00000004u;
}
void VkMusicTrack::clear_has_track_id() {
  _has_bits_[1] &= ~0x00000004u;
}
void VkMusicTrack::clear_track_id() {
  track_id_ = GOOGLE_LONGLONG(0);
  clear_has_track_id();
}
::google::protobuf::int64 VkMusicTrack::track_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.track_id)
  return track_id_;
}
void VkMusicTrack::set_track_id(::google::protobuf::int64 value) {
  set_has_track_id();
  track_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.track_id)
}

// optional int64 cluster_id = 32;
bool VkMusicTrack::has_cluster_id() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void VkMusicTrack::set_has_cluster_id() {
  _has_bits_[1] |= 0x00000008u;
}
void VkMusicTrack::clear_has_cluster_id() {
  _has_bits_[1] &= ~0x00000008u;
}
void VkMusicTrack::clear_cluster_id() {
  cluster_id_ = GOOGLE_LONGLONG(0);
  clear_has_cluster_id();
}
::google::protobuf::int64 VkMusicTrack::cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.cluster_id)
  return cluster_id_;
}
void VkMusicTrack::set_cluster_id(::google::protobuf::int64 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.cluster_id)
}

// optional string subtitle = 33;
bool VkMusicTrack::has_subtitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicTrack::set_has_subtitle() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicTrack::clear_has_subtitle() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicTrack::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subtitle();
}
const ::std::string& VkMusicTrack::subtitle() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
  return subtitle_.GetNoArena();
}
void VkMusicTrack::set_subtitle(const ::std::string& value) {
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}
#if LANG_CXX11
void VkMusicTrack::set_subtitle(::std::string&& value) {
  set_has_subtitle();
  subtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}
#endif
void VkMusicTrack::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}
void VkMusicTrack::set_subtitle(const char* value, size_t size) {
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}
::std::string* VkMusicTrack::mutable_subtitle() {
  set_has_subtitle();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
  return subtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicTrack::release_subtitle() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
  clear_has_subtitle();
  return subtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicTrack::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle != NULL) {
    set_has_subtitle();
  } else {
    clear_has_subtitle();
  }
  subtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.subtitle)
}

// optional int64 source_owner_id = 34;
bool VkMusicTrack::has_source_owner_id() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void VkMusicTrack::set_has_source_owner_id() {
  _has_bits_[1] |= 0x00000010u;
}
void VkMusicTrack::clear_has_source_owner_id() {
  _has_bits_[1] &= ~0x00000010u;
}
void VkMusicTrack::clear_source_owner_id() {
  source_owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_owner_id();
}
::google::protobuf::int64 VkMusicTrack::source_owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.source_owner_id)
  return source_owner_id_;
}
void VkMusicTrack::set_source_owner_id(::google::protobuf::int64 value) {
  set_has_source_owner_id();
  source_owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.source_owner_id)
}

// optional int64 source_audio_id = 35;
bool VkMusicTrack::has_source_audio_id() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void VkMusicTrack::set_has_source_audio_id() {
  _has_bits_[1] |= 0x00000020u;
}
void VkMusicTrack::clear_has_source_audio_id() {
  _has_bits_[1] &= ~0x00000020u;
}
void VkMusicTrack::clear_source_audio_id() {
  source_audio_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_audio_id();
}
::google::protobuf::int64 VkMusicTrack::source_audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.source_audio_id)
  return source_audio_id_;
}
void VkMusicTrack::set_source_audio_id(::google::protobuf::int64 value) {
  set_has_source_audio_id();
  source_audio_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.source_audio_id)
}

// optional int64 timestamp_ms = 36;
bool VkMusicTrack::has_timestamp_ms() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void VkMusicTrack::set_has_timestamp_ms() {
  _has_bits_[1] |= 0x00000040u;
}
void VkMusicTrack::clear_has_timestamp_ms() {
  _has_bits_[1] &= ~0x00000040u;
}
void VkMusicTrack::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 VkMusicTrack::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.timestamp_ms)
  return timestamp_ms_;
}
void VkMusicTrack::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.timestamp_ms)
}

// optional bool from_offline_index = 37;
bool VkMusicTrack::has_from_offline_index() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void VkMusicTrack::set_has_from_offline_index() {
  _has_bits_[0] |= 0x40000000u;
}
void VkMusicTrack::clear_has_from_offline_index() {
  _has_bits_[0] &= ~0x40000000u;
}
void VkMusicTrack::clear_from_offline_index() {
  from_offline_index_ = false;
  clear_has_from_offline_index();
}
bool VkMusicTrack::from_offline_index() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.from_offline_index)
  return from_offline_index_;
}
void VkMusicTrack::set_from_offline_index(bool value) {
  set_has_from_offline_index();
  from_offline_index_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.from_offline_index)
}

// optional string title_alternatives = 38;
bool VkMusicTrack::has_title_alternatives() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicTrack::set_has_title_alternatives() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicTrack::clear_has_title_alternatives() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicTrack::clear_title_alternatives() {
  title_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title_alternatives();
}
const ::std::string& VkMusicTrack::title_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
  return title_alternatives_.GetNoArena();
}
void VkMusicTrack::set_title_alternatives(const ::std::string& value) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}
#if LANG_CXX11
void VkMusicTrack::set_title_alternatives(::std::string&& value) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}
#endif
void VkMusicTrack::set_title_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}
void VkMusicTrack::set_title_alternatives(const char* value, size_t size) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}
::std::string* VkMusicTrack::mutable_title_alternatives() {
  set_has_title_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
  return title_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicTrack::release_title_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
  clear_has_title_alternatives();
  return title_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicTrack::set_allocated_title_alternatives(::std::string* title_alternatives) {
  if (title_alternatives != NULL) {
    set_has_title_alternatives();
  } else {
    clear_has_title_alternatives();
  }
  title_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.title_alternatives)
}

// optional string performer_alternatives = 39;
bool VkMusicTrack::has_performer_alternatives() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkMusicTrack::set_has_performer_alternatives() {
  _has_bits_[0] |= 0x00000020u;
}
void VkMusicTrack::clear_has_performer_alternatives() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkMusicTrack::clear_performer_alternatives() {
  performer_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer_alternatives();
}
const ::std::string& VkMusicTrack::performer_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
  return performer_alternatives_.GetNoArena();
}
void VkMusicTrack::set_performer_alternatives(const ::std::string& value) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}
#if LANG_CXX11
void VkMusicTrack::set_performer_alternatives(::std::string&& value) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}
#endif
void VkMusicTrack::set_performer_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}
void VkMusicTrack::set_performer_alternatives(const char* value, size_t size) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}
::std::string* VkMusicTrack::mutable_performer_alternatives() {
  set_has_performer_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
  return performer_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicTrack::release_performer_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
  clear_has_performer_alternatives();
  return performer_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicTrack::set_allocated_performer_alternatives(::std::string* performer_alternatives) {
  if (performer_alternatives != NULL) {
    set_has_performer_alternatives();
  } else {
    clear_has_performer_alternatives();
  }
  performer_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.performer_alternatives)
}

// optional .ru.mail.go.webbase.blobs.VkMusicLyrics uma_lyrics = 40;
bool VkMusicTrack::has_uma_lyrics() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkMusicTrack::set_has_uma_lyrics() {
  _has_bits_[0] |= 0x00000080u;
}
void VkMusicTrack::clear_has_uma_lyrics() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkMusicTrack::clear_uma_lyrics() {
  if (uma_lyrics_ != NULL) uma_lyrics_->::ru::mail::go::webbase::blobs::VkMusicLyrics::Clear();
  clear_has_uma_lyrics();
}
const ::ru::mail::go::webbase::blobs::VkMusicLyrics& VkMusicTrack::uma_lyrics() const {
  const ::ru::mail::go::webbase::blobs::VkMusicLyrics* p = uma_lyrics_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.uma_lyrics)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicLyrics*>(
      &::ru::mail::go::webbase::blobs::_VkMusicLyrics_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicLyrics* VkMusicTrack::mutable_uma_lyrics() {
  set_has_uma_lyrics();
  if (uma_lyrics_ == NULL) {
    uma_lyrics_ = new ::ru::mail::go::webbase::blobs::VkMusicLyrics;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.uma_lyrics)
  return uma_lyrics_;
}
::ru::mail::go::webbase::blobs::VkMusicLyrics* VkMusicTrack::release_uma_lyrics() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.uma_lyrics)
  clear_has_uma_lyrics();
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* temp = uma_lyrics_;
  uma_lyrics_ = NULL;
  return temp;
}
void VkMusicTrack::set_allocated_uma_lyrics(::ru::mail::go::webbase::blobs::VkMusicLyrics* uma_lyrics) {
  delete uma_lyrics_;
  uma_lyrics_ = uma_lyrics;
  if (uma_lyrics) {
    set_has_uma_lyrics();
  } else {
    clear_has_uma_lyrics();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.uma_lyrics)
}

// optional int64 album_release_ts = 41;
bool VkMusicTrack::has_album_release_ts() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void VkMusicTrack::set_has_album_release_ts() {
  _has_bits_[1] |= 0x00000080u;
}
void VkMusicTrack::clear_has_album_release_ts() {
  _has_bits_[1] &= ~0x00000080u;
}
void VkMusicTrack::clear_album_release_ts() {
  album_release_ts_ = GOOGLE_LONGLONG(0);
  clear_has_album_release_ts();
}
::google::protobuf::int64 VkMusicTrack::album_release_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.album_release_ts)
  return album_release_ts_;
}
void VkMusicTrack::set_album_release_ts(::google::protobuf::int64 value) {
  set_has_album_release_ts();
  album_release_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.album_release_ts)
}

// optional int64 rightholder_id = 42;
bool VkMusicTrack::has_rightholder_id() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void VkMusicTrack::set_has_rightholder_id() {
  _has_bits_[1] |= 0x00000100u;
}
void VkMusicTrack::clear_has_rightholder_id() {
  _has_bits_[1] &= ~0x00000100u;
}
void VkMusicTrack::clear_rightholder_id() {
  rightholder_id_ = GOOGLE_LONGLONG(0);
  clear_has_rightholder_id();
}
::google::protobuf::int64 VkMusicTrack::rightholder_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_id)
  return rightholder_id_;
}
void VkMusicTrack::set_rightholder_id(::google::protobuf::int64 value) {
  set_has_rightholder_id();
  rightholder_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_id)
}

// optional string rightholder_name = 43;
bool VkMusicTrack::has_rightholder_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkMusicTrack::set_has_rightholder_name() {
  _has_bits_[0] |= 0x00000040u;
}
void VkMusicTrack::clear_has_rightholder_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkMusicTrack::clear_rightholder_name() {
  rightholder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rightholder_name();
}
const ::std::string& VkMusicTrack::rightholder_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
  return rightholder_name_.GetNoArena();
}
void VkMusicTrack::set_rightholder_name(const ::std::string& value) {
  set_has_rightholder_name();
  rightholder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}
#if LANG_CXX11
void VkMusicTrack::set_rightholder_name(::std::string&& value) {
  set_has_rightholder_name();
  rightholder_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}
#endif
void VkMusicTrack::set_rightholder_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rightholder_name();
  rightholder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}
void VkMusicTrack::set_rightholder_name(const char* value, size_t size) {
  set_has_rightholder_name();
  rightholder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}
::std::string* VkMusicTrack::mutable_rightholder_name() {
  set_has_rightholder_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
  return rightholder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicTrack::release_rightholder_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
  clear_has_rightholder_name();
  return rightholder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicTrack::set_allocated_rightholder_name(::std::string* rightholder_name) {
  if (rightholder_name != NULL) {
    set_has_rightholder_name();
  } else {
    clear_has_rightholder_name();
  }
  rightholder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rightholder_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrack.rightholder_name)
}

// optional bool is_copy_of_mastercopy = 44;
bool VkMusicTrack::has_is_copy_of_mastercopy() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void VkMusicTrack::set_has_is_copy_of_mastercopy() {
  _has_bits_[0] |= 0x80000000u;
}
void VkMusicTrack::clear_has_is_copy_of_mastercopy() {
  _has_bits_[0] &= ~0x80000000u;
}
void VkMusicTrack::clear_is_copy_of_mastercopy() {
  is_copy_of_mastercopy_ = false;
  clear_has_is_copy_of_mastercopy();
}
bool VkMusicTrack::is_copy_of_mastercopy() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.is_copy_of_mastercopy)
  return is_copy_of_mastercopy_;
}
void VkMusicTrack::set_is_copy_of_mastercopy(bool value) {
  set_has_is_copy_of_mastercopy();
  is_copy_of_mastercopy_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.is_copy_of_mastercopy)
}

// optional bool is_boostable_rightholder = 45;
bool VkMusicTrack::has_is_boostable_rightholder() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void VkMusicTrack::set_has_is_boostable_rightholder() {
  _has_bits_[1] |= 0x00000001u;
}
void VkMusicTrack::clear_has_is_boostable_rightholder() {
  _has_bits_[1] &= ~0x00000001u;
}
void VkMusicTrack::clear_is_boostable_rightholder() {
  is_boostable_rightholder_ = false;
  clear_has_is_boostable_rightholder();
}
bool VkMusicTrack::is_boostable_rightholder() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.is_boostable_rightholder)
  return is_boostable_rightholder_;
}
void VkMusicTrack::set_is_boostable_rightholder(bool value) {
  set_has_is_boostable_rightholder();
  is_boostable_rightholder_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.is_boostable_rightholder)
}

// optional bool is_new_boostable_release = 46;
bool VkMusicTrack::has_is_new_boostable_release() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void VkMusicTrack::set_has_is_new_boostable_release() {
  _has_bits_[1] |= 0x00000002u;
}
void VkMusicTrack::clear_has_is_new_boostable_release() {
  _has_bits_[1] &= ~0x00000002u;
}
void VkMusicTrack::clear_is_new_boostable_release() {
  is_new_boostable_release_ = false;
  clear_has_is_new_boostable_release();
}
bool VkMusicTrack::is_new_boostable_release() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrack.is_new_boostable_release)
  return is_new_boostable_release_;
}
void VkMusicTrack::set_is_new_boostable_release(bool value) {
  set_has_is_new_boostable_release();
  is_new_boostable_release_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrack.is_new_boostable_release)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicLyrics::kTextFieldNumber;
const int VkMusicLyrics::kReleaseIdFieldNumber;
const int VkMusicLyrics::kTrackIdFieldNumber;
const int VkMusicLyrics::kTimecodesFieldNumber;
const int VkMusicLyrics::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicLyrics::VkMusicLyrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicLyrics)
}
VkMusicLyrics::VkMusicLyrics(const VkMusicLyrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&release_id_, &from.release_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timecodes_) -
    reinterpret_cast<char*>(&release_id_)) + sizeof(timecodes_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicLyrics)
}

void VkMusicLyrics::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&release_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timecodes_) -
      reinterpret_cast<char*>(&release_id_)) + sizeof(timecodes_));
}

VkMusicLyrics::~VkMusicLyrics() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicLyrics)
  SharedDtor();
}

void VkMusicLyrics::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicLyrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicLyrics::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicLyrics& VkMusicLyrics::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicLyrics* VkMusicLyrics::New(::google::protobuf::Arena* arena) const {
  VkMusicLyrics* n = new VkMusicLyrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicLyrics::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&release_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timecodes_) -
        reinterpret_cast<char*>(&release_id_)) + sizeof(timecodes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicLyrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicLyrics.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 release_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_release_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &release_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 track_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_track_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool timecodes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timecodes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timecodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicLyrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicLyrics)
  return false;
#undef DO_
}

void VkMusicLyrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicLyrics.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional int64 release_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->release_id(), output);
  }

  // optional int64 track_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->track_id(), output);
  }

  // optional bool timecodes = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->timecodes(), output);
  }

  // optional int64 timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicLyrics)
}

::google::protobuf::uint8* VkMusicLyrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicLyrics.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional int64 release_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->release_id(), target);
  }

  // optional int64 track_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->track_id(), target);
  }

  // optional bool timecodes = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->timecodes(), target);
  }

  // optional int64 timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicLyrics)
  return target;
}

size_t VkMusicLyrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int64 release_id = 2;
    if (has_release_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->release_id());
    }

    // optional int64 track_id = 3;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->track_id());
    }

    // optional int64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional bool timecodes = 4;
    if (has_timecodes()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicLyrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicLyrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicLyrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicLyrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicLyrics)
    MergeFrom(*source);
  }
}

void VkMusicLyrics::MergeFrom(const VkMusicLyrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      release_id_ = from.release_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      track_id_ = from.track_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      timecodes_ = from.timecodes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicLyrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicLyrics::CopyFrom(const VkMusicLyrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicLyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicLyrics::IsInitialized() const {
  return true;
}

void VkMusicLyrics::Swap(VkMusicLyrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicLyrics::InternalSwap(VkMusicLyrics* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(release_id_, other->release_id_);
  swap(track_id_, other->track_id_);
  swap(timestamp_, other->timestamp_);
  swap(timecodes_, other->timecodes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicLyrics::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicLyrics

// optional string text = 1;
bool VkMusicLyrics::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicLyrics::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicLyrics::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicLyrics::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& VkMusicLyrics::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
  return text_.GetNoArena();
}
void VkMusicLyrics::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}
#if LANG_CXX11
void VkMusicLyrics::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}
#endif
void VkMusicLyrics::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}
void VkMusicLyrics::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}
::std::string* VkMusicLyrics::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicLyrics::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicLyrics::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicLyrics.text)
}

// optional int64 release_id = 2;
bool VkMusicLyrics::has_release_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicLyrics::set_has_release_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicLyrics::clear_has_release_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicLyrics::clear_release_id() {
  release_id_ = GOOGLE_LONGLONG(0);
  clear_has_release_id();
}
::google::protobuf::int64 VkMusicLyrics::release_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.release_id)
  return release_id_;
}
void VkMusicLyrics::set_release_id(::google::protobuf::int64 value) {
  set_has_release_id();
  release_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.release_id)
}

// optional int64 track_id = 3;
bool VkMusicLyrics::has_track_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicLyrics::set_has_track_id() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicLyrics::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicLyrics::clear_track_id() {
  track_id_ = GOOGLE_LONGLONG(0);
  clear_has_track_id();
}
::google::protobuf::int64 VkMusicLyrics::track_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.track_id)
  return track_id_;
}
void VkMusicLyrics::set_track_id(::google::protobuf::int64 value) {
  set_has_track_id();
  track_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.track_id)
}

// optional bool timecodes = 4;
bool VkMusicLyrics::has_timecodes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicLyrics::set_has_timecodes() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicLyrics::clear_has_timecodes() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicLyrics::clear_timecodes() {
  timecodes_ = false;
  clear_has_timecodes();
}
bool VkMusicLyrics::timecodes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.timecodes)
  return timecodes_;
}
void VkMusicLyrics::set_timecodes(bool value) {
  set_has_timecodes();
  timecodes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.timecodes)
}

// optional int64 timestamp = 5;
bool VkMusicLyrics::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicLyrics::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicLyrics::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicLyrics::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 VkMusicLyrics::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicLyrics.timestamp)
  return timestamp_;
}
void VkMusicLyrics::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicLyrics.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicTrackOrLyrics::kTrackFieldNumber;
const int VkMusicTrackOrLyrics::kLyricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicTrackOrLyrics::VkMusicTrackOrLyrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
}
VkMusicTrackOrLyrics::VkMusicTrackOrLyrics(const VkMusicTrackOrLyrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_track()) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack(*from.track_);
  } else {
    track_ = NULL;
  }
  if (from.has_lyrics()) {
    lyrics_ = new ::ru::mail::go::webbase::blobs::VkMusicLyrics(*from.lyrics_);
  } else {
    lyrics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
}

void VkMusicTrackOrLyrics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&track_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lyrics_) -
      reinterpret_cast<char*>(&track_)) + sizeof(lyrics_));
}

VkMusicTrackOrLyrics::~VkMusicTrackOrLyrics() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  SharedDtor();
}

void VkMusicTrackOrLyrics::SharedDtor() {
  if (this != internal_default_instance()) delete track_;
  if (this != internal_default_instance()) delete lyrics_;
}

void VkMusicTrackOrLyrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicTrackOrLyrics::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicTrackOrLyrics& VkMusicTrackOrLyrics::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicTrackOrLyrics* VkMusicTrackOrLyrics::New(::google::protobuf::Arena* arena) const {
  VkMusicTrackOrLyrics* n = new VkMusicTrackOrLyrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicTrackOrLyrics::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(track_ != NULL);
      track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lyrics_ != NULL);
      lyrics_->::ru::mail::go::webbase::blobs::VkMusicLyrics::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicTrackOrLyrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicLyrics lyrics = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lyrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  return false;
#undef DO_
}

void VkMusicTrackOrLyrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->track_, output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicLyrics lyrics = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lyrics_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
}

::google::protobuf::uint8* VkMusicTrackOrLyrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->track_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicLyrics lyrics = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lyrics_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  return target;
}

size_t VkMusicTrackOrLyrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->track_);
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicLyrics lyrics = 2;
    if (has_lyrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lyrics_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicTrackOrLyrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicTrackOrLyrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicTrackOrLyrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
    MergeFrom(*source);
  }
}

void VkMusicTrackOrLyrics::MergeFrom(const VkMusicTrackOrLyrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_track()->::ru::mail::go::webbase::blobs::VkMusicTrack::MergeFrom(from.track());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lyrics()->::ru::mail::go::webbase::blobs::VkMusicLyrics::MergeFrom(from.lyrics());
    }
  }
}

void VkMusicTrackOrLyrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicTrackOrLyrics::CopyFrom(const VkMusicTrackOrLyrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicTrackOrLyrics::IsInitialized() const {
  if (has_track()) {
    if (!this->track_->IsInitialized()) return false;
  }
  return true;
}

void VkMusicTrackOrLyrics::Swap(VkMusicTrackOrLyrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicTrackOrLyrics::InternalSwap(VkMusicTrackOrLyrics* other) {
  using std::swap;
  swap(track_, other->track_);
  swap(lyrics_, other->lyrics_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicTrackOrLyrics::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicTrackOrLyrics

// optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
bool VkMusicTrackOrLyrics::has_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicTrackOrLyrics::set_has_track() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicTrackOrLyrics::clear_has_track() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicTrackOrLyrics::clear_track() {
  if (track_ != NULL) track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
  clear_has_track();
}
const ::ru::mail::go::webbase::blobs::VkMusicTrack& VkMusicTrackOrLyrics::track() const {
  const ::ru::mail::go::webbase::blobs::VkMusicTrack* p = track_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.track)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      &::ru::mail::go::webbase::blobs::_VkMusicTrack_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicTrack* VkMusicTrackOrLyrics::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.track)
  return track_;
}
::ru::mail::go::webbase::blobs::VkMusicTrack* VkMusicTrackOrLyrics::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.track)
  clear_has_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* temp = track_;
  track_ = NULL;
  return temp;
}
void VkMusicTrackOrLyrics::set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.track)
}

// optional .ru.mail.go.webbase.blobs.VkMusicLyrics lyrics = 2;
bool VkMusicTrackOrLyrics::has_lyrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicTrackOrLyrics::set_has_lyrics() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicTrackOrLyrics::clear_has_lyrics() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicTrackOrLyrics::clear_lyrics() {
  if (lyrics_ != NULL) lyrics_->::ru::mail::go::webbase::blobs::VkMusicLyrics::Clear();
  clear_has_lyrics();
}
const ::ru::mail::go::webbase::blobs::VkMusicLyrics& VkMusicTrackOrLyrics::lyrics() const {
  const ::ru::mail::go::webbase::blobs::VkMusicLyrics* p = lyrics_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.lyrics)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicLyrics*>(
      &::ru::mail::go::webbase::blobs::_VkMusicLyrics_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicLyrics* VkMusicTrackOrLyrics::mutable_lyrics() {
  set_has_lyrics();
  if (lyrics_ == NULL) {
    lyrics_ = new ::ru::mail::go::webbase::blobs::VkMusicLyrics;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.lyrics)
  return lyrics_;
}
::ru::mail::go::webbase::blobs::VkMusicLyrics* VkMusicTrackOrLyrics::release_lyrics() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.lyrics)
  clear_has_lyrics();
  ::ru::mail::go::webbase::blobs::VkMusicLyrics* temp = lyrics_;
  lyrics_ = NULL;
  return temp;
}
void VkMusicTrackOrLyrics::set_allocated_lyrics(::ru::mail::go::webbase::blobs::VkMusicLyrics* lyrics) {
  delete lyrics_;
  lyrics_ = lyrics;
  if (lyrics) {
    set_has_lyrics();
  } else {
    clear_has_lyrics();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrackOrLyrics.lyrics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicUserEventListen::kUserIdFieldNumber;
const int VkMusicUserEventListen::kStartTsFieldNumber;
const int VkMusicUserEventListen::kDurationFieldNumber;
const int VkMusicUserEventListen::kAudioIdFieldNumber;
const int VkMusicUserEventListen::kTitleFieldNumber;
const int VkMusicUserEventListen::kPerformerFieldNumber;
const int VkMusicUserEventListen::kMasterTrackFieldNumber;
const int VkMusicUserEventListen::kAudioSectionFieldNumber;
const int VkMusicUserEventListen::kIsMailSearchFieldNumber;
const int VkMusicUserEventListen::kPlaylistIdFieldNumber;
const int VkMusicUserEventListen::kUmaReleaseIdFieldNumber;
const int VkMusicUserEventListen::kDeviceTypeFieldNumber;
const int VkMusicUserEventListen::kOsTypeFieldNumber;
const int VkMusicUserEventListen::kSourceFieldNumber;
const int VkMusicUserEventListen::kPrevAudioIdFieldNumber;
const int VkMusicUserEventListen::kPrevPlaylistIdFieldNumber;
const int VkMusicUserEventListen::kVkQidFieldNumber;
const int VkMusicUserEventListen::kBlockNameFieldNumber;
const int VkMusicUserEventListen::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicUserEventListen::VkMusicUserEventListen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
}
VkMusicUserEventListen::VkMusicUserEventListen(const VkMusicUserEventListen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_id()) {
    audio_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_id_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  performer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_performer()) {
    performer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_);
  }
  audio_section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_section()) {
    audio_section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_section_);
  }
  playlist_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playlist_id()) {
    playlist_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playlist_id_);
  }
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_type()) {
    device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  os_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_type()) {
    os_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_type_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  prev_audio_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prev_audio_id()) {
    prev_audio_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_audio_id_);
  }
  prev_playlist_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prev_playlist_id()) {
    prev_playlist_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_playlist_id_);
  }
  block_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block_name()) {
    block_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
}

void VkMusicUserEventListen::SharedCtor() {
  _cached_size_ = 0;
  audio_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_section_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_audio_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_playlist_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(app_id_));
}

VkMusicUserEventListen::~VkMusicUserEventListen() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  SharedDtor();
}

void VkMusicUserEventListen::SharedDtor() {
  audio_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_section_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_audio_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_playlist_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicUserEventListen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicUserEventListen::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicUserEventListen& VkMusicUserEventListen::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicUserEventListen* VkMusicUserEventListen::New(::google::protobuf::Arena* arena) const {
  VkMusicUserEventListen* n = new VkMusicUserEventListen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicUserEventListen::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!audio_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*audio_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!performer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*performer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!audio_section_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*audio_section_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!playlist_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playlist_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!device_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!os_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!prev_audio_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prev_audio_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!prev_playlist_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prev_playlist_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!block_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*block_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 63488u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_mail_search_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(is_mail_search_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&uma_release_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&uma_release_id_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicUserEventListen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_start_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string audio_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audio_id().data(), static_cast<int>(this->audio_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string performer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_performer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->performer().data(), static_cast<int>(this->performer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool master_track = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_master_track();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string audio_section = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_section()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audio_section().data(), static_cast<int>(this->audio_section().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_mail_search = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_mail_search();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mail_search_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playlist_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playlist_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playlist_id().data(), static_cast<int>(this->playlist_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 uma_release_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_uma_release_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uma_release_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os_type().data(), static_cast<int>(this->os_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prev_audio_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_audio_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prev_audio_id().data(), static_cast<int>(this->prev_audio_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prev_playlist_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_playlist_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prev_playlist_id().data(), static_cast<int>(this->prev_playlist_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 vk_qid = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_vk_qid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vk_qid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string block_name = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->block_name().data(), static_cast<int>(this->block_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 app_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  return false;
#undef DO_
}

void VkMusicUserEventListen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional int64 start_ts = 2;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_ts(), output);
  }

  // optional int32 duration = 3;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // optional string audio_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_id().data(), static_cast<int>(this->audio_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->audio_id(), output);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional string performer = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer().data(), static_cast<int>(this->performer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->performer(), output);
  }

  // optional bool master_track = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->master_track(), output);
  }

  // optional string audio_section = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_section().data(), static_cast<int>(this->audio_section().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->audio_section(), output);
  }

  // optional bool is_mail_search = 9;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_mail_search(), output);
  }

  // optional string playlist_id = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playlist_id().data(), static_cast<int>(this->playlist_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->playlist_id(), output);
  }

  // optional int64 uma_release_id = 11;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->uma_release_id(), output);
  }

  // optional string device_type = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->device_type(), output);
  }

  // optional string os_type = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_type().data(), static_cast<int>(this->os_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->os_type(), output);
  }

  // optional string source = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->source(), output);
  }

  // optional string prev_audio_id = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prev_audio_id().data(), static_cast<int>(this->prev_audio_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->prev_audio_id(), output);
  }

  // optional string prev_playlist_id = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prev_playlist_id().data(), static_cast<int>(this->prev_playlist_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->prev_playlist_id(), output);
  }

  // optional int64 vk_qid = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->vk_qid(), output);
  }

  // optional string block_name = 18;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_name().data(), static_cast<int>(this->block_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->block_name(), output);
  }

  // optional int64 app_id = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
}

::google::protobuf::uint8* VkMusicUserEventListen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional int64 start_ts = 2;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_ts(), target);
  }

  // optional int32 duration = 3;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration(), target);
  }

  // optional string audio_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_id().data(), static_cast<int>(this->audio_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->audio_id(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string performer = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer().data(), static_cast<int>(this->performer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->performer(), target);
  }

  // optional bool master_track = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->master_track(), target);
  }

  // optional string audio_section = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_section().data(), static_cast<int>(this->audio_section().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->audio_section(), target);
  }

  // optional bool is_mail_search = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_mail_search(), target);
  }

  // optional string playlist_id = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playlist_id().data(), static_cast<int>(this->playlist_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playlist_id(), target);
  }

  // optional int64 uma_release_id = 11;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->uma_release_id(), target);
  }

  // optional string device_type = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->device_type(), target);
  }

  // optional string os_type = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_type().data(), static_cast<int>(this->os_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->os_type(), target);
  }

  // optional string source = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->source(), target);
  }

  // optional string prev_audio_id = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prev_audio_id().data(), static_cast<int>(this->prev_audio_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->prev_audio_id(), target);
  }

  // optional string prev_playlist_id = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prev_playlist_id().data(), static_cast<int>(this->prev_playlist_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->prev_playlist_id(), target);
  }

  // optional int64 vk_qid = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->vk_qid(), target);
  }

  // optional string block_name = 18;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_name().data(), static_cast<int>(this->block_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->block_name(), target);
  }

  // optional int64 app_id = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  return target;
}

size_t VkMusicUserEventListen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string audio_id = 4;
    if (has_audio_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_id());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string performer = 6;
    if (has_performer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->performer());
    }

    // optional string audio_section = 8;
    if (has_audio_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_section());
    }

    // optional string playlist_id = 10;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playlist_id());
    }

    // optional string device_type = 12;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_type());
    }

    // optional string os_type = 13;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_type());
    }

    // optional string source = 14;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string prev_audio_id = 15;
    if (has_prev_audio_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev_audio_id());
    }

    // optional string prev_playlist_id = 16;
    if (has_prev_playlist_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev_playlist_id());
    }

    // optional string block_name = 18;
    if (has_block_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }

    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int64 start_ts = 2;
    if (has_start_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_ts());
    }

    // optional int32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional bool master_track = 7;
    if (has_master_track()) {
      total_size += 1 + 1;
    }

    // optional bool is_mail_search = 9;
    if (has_is_mail_search()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int64 uma_release_id = 11;
    if (has_uma_release_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uma_release_id());
    }

    // optional int64 vk_qid = 17;
    if (has_vk_qid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vk_qid());
    }

    // optional int64 app_id = 19;
    if (has_app_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicUserEventListen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicUserEventListen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicUserEventListen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
    MergeFrom(*source);
  }
}

void VkMusicUserEventListen::MergeFrom(const VkMusicUserEventListen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_audio_id();
      audio_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_performer();
      performer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_audio_section();
      audio_section_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_section_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_playlist_id();
      playlist_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playlist_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_device_type();
      device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_os_type();
      os_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_type_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_prev_audio_id();
      prev_audio_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_audio_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_prev_playlist_id();
      prev_playlist_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_playlist_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_block_name();
      block_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_name_);
    }
    if (cached_has_bits & 0x00000800u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      start_ts_ = from.start_ts_;
    }
    if (cached_has_bits & 0x00002000u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00004000u) {
      master_track_ = from.master_track_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_mail_search_ = from.is_mail_search_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      uma_release_id_ = from.uma_release_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      vk_qid_ = from.vk_qid_;
    }
    if (cached_has_bits & 0x00040000u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicUserEventListen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicUserEventListen::CopyFrom(const VkMusicUserEventListen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicUserEventListen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicUserEventListen::IsInitialized() const {
  return true;
}

void VkMusicUserEventListen::Swap(VkMusicUserEventListen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicUserEventListen::InternalSwap(VkMusicUserEventListen* other) {
  using std::swap;
  audio_id_.Swap(&other->audio_id_);
  title_.Swap(&other->title_);
  performer_.Swap(&other->performer_);
  audio_section_.Swap(&other->audio_section_);
  playlist_id_.Swap(&other->playlist_id_);
  device_type_.Swap(&other->device_type_);
  os_type_.Swap(&other->os_type_);
  source_.Swap(&other->source_);
  prev_audio_id_.Swap(&other->prev_audio_id_);
  prev_playlist_id_.Swap(&other->prev_playlist_id_);
  block_name_.Swap(&other->block_name_);
  swap(user_id_, other->user_id_);
  swap(start_ts_, other->start_ts_);
  swap(duration_, other->duration_);
  swap(master_track_, other->master_track_);
  swap(is_mail_search_, other->is_mail_search_);
  swap(uma_release_id_, other->uma_release_id_);
  swap(vk_qid_, other->vk_qid_);
  swap(app_id_, other->app_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicUserEventListen::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicUserEventListen

// optional int64 user_id = 1;
bool VkMusicUserEventListen::has_user_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VkMusicUserEventListen::set_has_user_id() {
  _has_bits_[0] |= 0x00000800u;
}
void VkMusicUserEventListen::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void VkMusicUserEventListen::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 VkMusicUserEventListen::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.user_id)
  return user_id_;
}
void VkMusicUserEventListen::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.user_id)
}

// optional int64 start_ts = 2;
bool VkMusicUserEventListen::has_start_ts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VkMusicUserEventListen::set_has_start_ts() {
  _has_bits_[0] |= 0x00001000u;
}
void VkMusicUserEventListen::clear_has_start_ts() {
  _has_bits_[0] &= ~0x00001000u;
}
void VkMusicUserEventListen::clear_start_ts() {
  start_ts_ = GOOGLE_LONGLONG(0);
  clear_has_start_ts();
}
::google::protobuf::int64 VkMusicUserEventListen::start_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.start_ts)
  return start_ts_;
}
void VkMusicUserEventListen::set_start_ts(::google::protobuf::int64 value) {
  set_has_start_ts();
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.start_ts)
}

// optional int32 duration = 3;
bool VkMusicUserEventListen::has_duration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VkMusicUserEventListen::set_has_duration() {
  _has_bits_[0] |= 0x00002000u;
}
void VkMusicUserEventListen::clear_has_duration() {
  _has_bits_[0] &= ~0x00002000u;
}
void VkMusicUserEventListen::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 VkMusicUserEventListen::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.duration)
  return duration_;
}
void VkMusicUserEventListen::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.duration)
}

// optional string audio_id = 4;
bool VkMusicUserEventListen::has_audio_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicUserEventListen::set_has_audio_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicUserEventListen::clear_has_audio_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicUserEventListen::clear_audio_id() {
  audio_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_id();
}
const ::std::string& VkMusicUserEventListen::audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
  return audio_id_.GetNoArena();
}
void VkMusicUserEventListen::set_audio_id(const ::std::string& value) {
  set_has_audio_id();
  audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_audio_id(::std::string&& value) {
  set_has_audio_id();
  audio_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}
#endif
void VkMusicUserEventListen::set_audio_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_id();
  audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}
void VkMusicUserEventListen::set_audio_id(const char* value, size_t size) {
  set_has_audio_id();
  audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}
::std::string* VkMusicUserEventListen::mutable_audio_id() {
  set_has_audio_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
  return audio_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_audio_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
  clear_has_audio_id();
  return audio_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_audio_id(::std::string* audio_id) {
  if (audio_id != NULL) {
    set_has_audio_id();
  } else {
    clear_has_audio_id();
  }
  audio_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_id)
}

// optional string title = 5;
bool VkMusicUserEventListen::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicUserEventListen::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicUserEventListen::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicUserEventListen::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VkMusicUserEventListen::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
  return title_.GetNoArena();
}
void VkMusicUserEventListen::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}
#endif
void VkMusicUserEventListen::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}
void VkMusicUserEventListen::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}
::std::string* VkMusicUserEventListen::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.title)
}

// optional string performer = 6;
bool VkMusicUserEventListen::has_performer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicUserEventListen::set_has_performer() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicUserEventListen::clear_has_performer() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicUserEventListen::clear_performer() {
  performer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer();
}
const ::std::string& VkMusicUserEventListen::performer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
  return performer_.GetNoArena();
}
void VkMusicUserEventListen::set_performer(const ::std::string& value) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_performer(::std::string&& value) {
  set_has_performer();
  performer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}
#endif
void VkMusicUserEventListen::set_performer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}
void VkMusicUserEventListen::set_performer(const char* value, size_t size) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}
::std::string* VkMusicUserEventListen::mutable_performer() {
  set_has_performer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
  return performer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_performer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
  clear_has_performer();
  return performer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_performer(::std::string* performer) {
  if (performer != NULL) {
    set_has_performer();
  } else {
    clear_has_performer();
  }
  performer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.performer)
}

// optional bool master_track = 7;
bool VkMusicUserEventListen::has_master_track() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VkMusicUserEventListen::set_has_master_track() {
  _has_bits_[0] |= 0x00004000u;
}
void VkMusicUserEventListen::clear_has_master_track() {
  _has_bits_[0] &= ~0x00004000u;
}
void VkMusicUserEventListen::clear_master_track() {
  master_track_ = false;
  clear_has_master_track();
}
bool VkMusicUserEventListen::master_track() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.master_track)
  return master_track_;
}
void VkMusicUserEventListen::set_master_track(bool value) {
  set_has_master_track();
  master_track_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.master_track)
}

// optional string audio_section = 8;
bool VkMusicUserEventListen::has_audio_section() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicUserEventListen::set_has_audio_section() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicUserEventListen::clear_has_audio_section() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicUserEventListen::clear_audio_section() {
  audio_section_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_section();
}
const ::std::string& VkMusicUserEventListen::audio_section() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
  return audio_section_.GetNoArena();
}
void VkMusicUserEventListen::set_audio_section(const ::std::string& value) {
  set_has_audio_section();
  audio_section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_audio_section(::std::string&& value) {
  set_has_audio_section();
  audio_section_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}
#endif
void VkMusicUserEventListen::set_audio_section(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_section();
  audio_section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}
void VkMusicUserEventListen::set_audio_section(const char* value, size_t size) {
  set_has_audio_section();
  audio_section_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}
::std::string* VkMusicUserEventListen::mutable_audio_section() {
  set_has_audio_section();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
  return audio_section_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_audio_section() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
  clear_has_audio_section();
  return audio_section_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_audio_section(::std::string* audio_section) {
  if (audio_section != NULL) {
    set_has_audio_section();
  } else {
    clear_has_audio_section();
  }
  audio_section_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_section);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.audio_section)
}

// optional bool is_mail_search = 9;
bool VkMusicUserEventListen::has_is_mail_search() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VkMusicUserEventListen::set_has_is_mail_search() {
  _has_bits_[0] |= 0x00008000u;
}
void VkMusicUserEventListen::clear_has_is_mail_search() {
  _has_bits_[0] &= ~0x00008000u;
}
void VkMusicUserEventListen::clear_is_mail_search() {
  is_mail_search_ = false;
  clear_has_is_mail_search();
}
bool VkMusicUserEventListen::is_mail_search() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.is_mail_search)
  return is_mail_search_;
}
void VkMusicUserEventListen::set_is_mail_search(bool value) {
  set_has_is_mail_search();
  is_mail_search_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.is_mail_search)
}

// optional string playlist_id = 10;
bool VkMusicUserEventListen::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicUserEventListen::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicUserEventListen::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicUserEventListen::clear_playlist_id() {
  playlist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playlist_id();
}
const ::std::string& VkMusicUserEventListen::playlist_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
  return playlist_id_.GetNoArena();
}
void VkMusicUserEventListen::set_playlist_id(const ::std::string& value) {
  set_has_playlist_id();
  playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_playlist_id(::std::string&& value) {
  set_has_playlist_id();
  playlist_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}
#endif
void VkMusicUserEventListen::set_playlist_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playlist_id();
  playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}
void VkMusicUserEventListen::set_playlist_id(const char* value, size_t size) {
  set_has_playlist_id();
  playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}
::std::string* VkMusicUserEventListen::mutable_playlist_id() {
  set_has_playlist_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
  return playlist_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_playlist_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
  clear_has_playlist_id();
  return playlist_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_playlist_id(::std::string* playlist_id) {
  if (playlist_id != NULL) {
    set_has_playlist_id();
  } else {
    clear_has_playlist_id();
  }
  playlist_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playlist_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.playlist_id)
}

// optional int64 uma_release_id = 11;
bool VkMusicUserEventListen::has_uma_release_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VkMusicUserEventListen::set_has_uma_release_id() {
  _has_bits_[0] |= 0x00010000u;
}
void VkMusicUserEventListen::clear_has_uma_release_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void VkMusicUserEventListen::clear_uma_release_id() {
  uma_release_id_ = GOOGLE_LONGLONG(0);
  clear_has_uma_release_id();
}
::google::protobuf::int64 VkMusicUserEventListen::uma_release_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.uma_release_id)
  return uma_release_id_;
}
void VkMusicUserEventListen::set_uma_release_id(::google::protobuf::int64 value) {
  set_has_uma_release_id();
  uma_release_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.uma_release_id)
}

// optional string device_type = 12;
bool VkMusicUserEventListen::has_device_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkMusicUserEventListen::set_has_device_type() {
  _has_bits_[0] |= 0x00000020u;
}
void VkMusicUserEventListen::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkMusicUserEventListen::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_type();
}
const ::std::string& VkMusicUserEventListen::device_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
  return device_type_.GetNoArena();
}
void VkMusicUserEventListen::set_device_type(const ::std::string& value) {
  set_has_device_type();
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_device_type(::std::string&& value) {
  set_has_device_type();
  device_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}
#endif
void VkMusicUserEventListen::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_type();
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}
void VkMusicUserEventListen::set_device_type(const char* value, size_t size) {
  set_has_device_type();
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}
::std::string* VkMusicUserEventListen::mutable_device_type() {
  set_has_device_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_device_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
  clear_has_device_type();
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    set_has_device_type();
  } else {
    clear_has_device_type();
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.device_type)
}

// optional string os_type = 13;
bool VkMusicUserEventListen::has_os_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkMusicUserEventListen::set_has_os_type() {
  _has_bits_[0] |= 0x00000040u;
}
void VkMusicUserEventListen::clear_has_os_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkMusicUserEventListen::clear_os_type() {
  os_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_type();
}
const ::std::string& VkMusicUserEventListen::os_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
  return os_type_.GetNoArena();
}
void VkMusicUserEventListen::set_os_type(const ::std::string& value) {
  set_has_os_type();
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_os_type(::std::string&& value) {
  set_has_os_type();
  os_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}
#endif
void VkMusicUserEventListen::set_os_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_type();
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}
void VkMusicUserEventListen::set_os_type(const char* value, size_t size) {
  set_has_os_type();
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}
::std::string* VkMusicUserEventListen::mutable_os_type() {
  set_has_os_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
  return os_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_os_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
  clear_has_os_type();
  return os_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_os_type(::std::string* os_type) {
  if (os_type != NULL) {
    set_has_os_type();
  } else {
    clear_has_os_type();
  }
  os_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.os_type)
}

// optional string source = 14;
bool VkMusicUserEventListen::has_source() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkMusicUserEventListen::set_has_source() {
  _has_bits_[0] |= 0x00000080u;
}
void VkMusicUserEventListen::clear_has_source() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkMusicUserEventListen::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& VkMusicUserEventListen::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
  return source_.GetNoArena();
}
void VkMusicUserEventListen::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}
#endif
void VkMusicUserEventListen::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}
void VkMusicUserEventListen::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}
::std::string* VkMusicUserEventListen::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_source() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.source)
}

// optional string prev_audio_id = 15;
bool VkMusicUserEventListen::has_prev_audio_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VkMusicUserEventListen::set_has_prev_audio_id() {
  _has_bits_[0] |= 0x00000100u;
}
void VkMusicUserEventListen::clear_has_prev_audio_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void VkMusicUserEventListen::clear_prev_audio_id() {
  prev_audio_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_audio_id();
}
const ::std::string& VkMusicUserEventListen::prev_audio_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
  return prev_audio_id_.GetNoArena();
}
void VkMusicUserEventListen::set_prev_audio_id(const ::std::string& value) {
  set_has_prev_audio_id();
  prev_audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_prev_audio_id(::std::string&& value) {
  set_has_prev_audio_id();
  prev_audio_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}
#endif
void VkMusicUserEventListen::set_prev_audio_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev_audio_id();
  prev_audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}
void VkMusicUserEventListen::set_prev_audio_id(const char* value, size_t size) {
  set_has_prev_audio_id();
  prev_audio_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}
::std::string* VkMusicUserEventListen::mutable_prev_audio_id() {
  set_has_prev_audio_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
  return prev_audio_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_prev_audio_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
  clear_has_prev_audio_id();
  return prev_audio_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_prev_audio_id(::std::string* prev_audio_id) {
  if (prev_audio_id != NULL) {
    set_has_prev_audio_id();
  } else {
    clear_has_prev_audio_id();
  }
  prev_audio_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_audio_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_audio_id)
}

// optional string prev_playlist_id = 16;
bool VkMusicUserEventListen::has_prev_playlist_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VkMusicUserEventListen::set_has_prev_playlist_id() {
  _has_bits_[0] |= 0x00000200u;
}
void VkMusicUserEventListen::clear_has_prev_playlist_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void VkMusicUserEventListen::clear_prev_playlist_id() {
  prev_playlist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_playlist_id();
}
const ::std::string& VkMusicUserEventListen::prev_playlist_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
  return prev_playlist_id_.GetNoArena();
}
void VkMusicUserEventListen::set_prev_playlist_id(const ::std::string& value) {
  set_has_prev_playlist_id();
  prev_playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_prev_playlist_id(::std::string&& value) {
  set_has_prev_playlist_id();
  prev_playlist_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}
#endif
void VkMusicUserEventListen::set_prev_playlist_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev_playlist_id();
  prev_playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}
void VkMusicUserEventListen::set_prev_playlist_id(const char* value, size_t size) {
  set_has_prev_playlist_id();
  prev_playlist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}
::std::string* VkMusicUserEventListen::mutable_prev_playlist_id() {
  set_has_prev_playlist_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
  return prev_playlist_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_prev_playlist_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
  clear_has_prev_playlist_id();
  return prev_playlist_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_prev_playlist_id(::std::string* prev_playlist_id) {
  if (prev_playlist_id != NULL) {
    set_has_prev_playlist_id();
  } else {
    clear_has_prev_playlist_id();
  }
  prev_playlist_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_playlist_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.prev_playlist_id)
}

// optional int64 vk_qid = 17;
bool VkMusicUserEventListen::has_vk_qid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VkMusicUserEventListen::set_has_vk_qid() {
  _has_bits_[0] |= 0x00020000u;
}
void VkMusicUserEventListen::clear_has_vk_qid() {
  _has_bits_[0] &= ~0x00020000u;
}
void VkMusicUserEventListen::clear_vk_qid() {
  vk_qid_ = GOOGLE_LONGLONG(0);
  clear_has_vk_qid();
}
::google::protobuf::int64 VkMusicUserEventListen::vk_qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.vk_qid)
  return vk_qid_;
}
void VkMusicUserEventListen::set_vk_qid(::google::protobuf::int64 value) {
  set_has_vk_qid();
  vk_qid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.vk_qid)
}

// optional string block_name = 18;
bool VkMusicUserEventListen::has_block_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VkMusicUserEventListen::set_has_block_name() {
  _has_bits_[0] |= 0x00000400u;
}
void VkMusicUserEventListen::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000400u;
}
void VkMusicUserEventListen::clear_block_name() {
  block_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_name();
}
const ::std::string& VkMusicUserEventListen::block_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
  return block_name_.GetNoArena();
}
void VkMusicUserEventListen::set_block_name(const ::std::string& value) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}
#if LANG_CXX11
void VkMusicUserEventListen::set_block_name(::std::string&& value) {
  set_has_block_name();
  block_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}
#endif
void VkMusicUserEventListen::set_block_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}
void VkMusicUserEventListen::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}
::std::string* VkMusicUserEventListen::mutable_block_name() {
  set_has_block_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
  return block_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUserEventListen::release_block_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
  clear_has_block_name();
  return block_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUserEventListen::set_allocated_block_name(::std::string* block_name) {
  if (block_name != NULL) {
    set_has_block_name();
  } else {
    clear_has_block_name();
  }
  block_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUserEventListen.block_name)
}

// optional int64 app_id = 19;
bool VkMusicUserEventListen::has_app_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VkMusicUserEventListen::set_has_app_id() {
  _has_bits_[0] |= 0x00040000u;
}
void VkMusicUserEventListen::clear_has_app_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void VkMusicUserEventListen::clear_app_id() {
  app_id_ = GOOGLE_LONGLONG(0);
  clear_has_app_id();
}
::google::protobuf::int64 VkMusicUserEventListen::app_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserEventListen.app_id)
  return app_id_;
}
void VkMusicUserEventListen::set_app_id(::google::protobuf::int64 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserEventListen.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkTrackList::kTrackIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkTrackList::VkTrackList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkTrackList)
}
VkTrackList::VkTrackList(const VkTrackList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      track_ids_(from.track_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkTrackList)
}

void VkTrackList::SharedCtor() {
  _cached_size_ = 0;
}

VkTrackList::~VkTrackList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkTrackList)
  SharedDtor();
}

void VkTrackList::SharedDtor() {
}

void VkTrackList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkTrackList::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkTrackList& VkTrackList::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkTrackList* VkTrackList::New(::google::protobuf::Arena* arena) const {
  VkTrackList* n = new VkTrackList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkTrackList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkTrackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkTrackList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string track_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_track_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_ids(this->track_ids_size() - 1).data(),
            static_cast<int>(this->track_ids(this->track_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkTrackList.track_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkTrackList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkTrackList)
  return false;
#undef DO_
}

void VkTrackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string track_ids = 1;
  for (int i = 0, n = this->track_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_ids(i).data(), static_cast<int>(this->track_ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkTrackList.track_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->track_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkTrackList)
}

::google::protobuf::uint8* VkTrackList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string track_ids = 1;
  for (int i = 0, n = this->track_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_ids(i).data(), static_cast<int>(this->track_ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkTrackList.track_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->track_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkTrackList)
  return target;
}

size_t VkTrackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkTrackList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string track_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->track_ids_size());
  for (int i = 0, n = this->track_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->track_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkTrackList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkTrackList)
  GOOGLE_DCHECK_NE(&from, this);
  const VkTrackList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkTrackList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkTrackList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkTrackList)
    MergeFrom(*source);
  }
}

void VkTrackList::MergeFrom(const VkTrackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkTrackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  track_ids_.MergeFrom(from.track_ids_);
}

void VkTrackList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkTrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkTrackList::CopyFrom(const VkTrackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkTrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkTrackList::IsInitialized() const {
  return true;
}

void VkTrackList::Swap(VkTrackList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkTrackList::InternalSwap(VkTrackList* other) {
  using std::swap;
  track_ids_.InternalSwap(&other->track_ids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkTrackList::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkTrackList

// repeated string track_ids = 1;
int VkTrackList::track_ids_size() const {
  return track_ids_.size();
}
void VkTrackList::clear_track_ids() {
  track_ids_.Clear();
}
const ::std::string& VkTrackList::track_ids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return track_ids_.Get(index);
}
::std::string* VkTrackList::mutable_track_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return track_ids_.Mutable(index);
}
void VkTrackList::set_track_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  track_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkTrackList::set_track_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  track_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void VkTrackList::set_track_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
void VkTrackList::set_track_ids(int index, const char* value, size_t size) {
  track_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
::std::string* VkTrackList::add_track_ids() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return track_ids_.Add();
}
void VkTrackList::add_track_ids(const ::std::string& value) {
  track_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
#if LANG_CXX11
void VkTrackList::add_track_ids(::std::string&& value) {
  track_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
#endif
void VkTrackList::add_track_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
void VkTrackList::add_track_ids(const char* value, size_t size) {
  track_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkTrackList::track_ids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return track_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkTrackList::mutable_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkTrackList.track_ids)
  return &track_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicPlaylist::kOwnerIdFieldNumber;
const int VkMusicPlaylist::kPlaylistIdFieldNumber;
const int VkMusicPlaylist::kTitleFieldNumber;
const int VkMusicPlaylist::kPerformerFieldNumber;
const int VkMusicPlaylist::kNumberOfTracksFieldNumber;
const int VkMusicPlaylist::kIsOfficialFieldNumber;
const int VkMusicPlaylist::kTimesListenedFieldNumber;
const int VkMusicPlaylist::kTimestampFieldNumber;
const int VkMusicPlaylist::kFollowersFieldNumber;
const int VkMusicPlaylist::kTimesListenedLastMonthFieldNumber;
const int VkMusicPlaylist::kTimesListenedLastWeekFieldNumber;
const int VkMusicPlaylist::kTracksFieldNumber;
const int VkMusicPlaylist::kTrackNamesFieldNumber;
const int VkMusicPlaylist::kTracksTimesListenedFieldNumber;
const int VkMusicPlaylist::kTracksTimesListenedLastMonthFieldNumber;
const int VkMusicPlaylist::kTracksTimesListenedLastWeekFieldNumber;
const int VkMusicPlaylist::kSubtitleFieldNumber;
const int VkMusicPlaylist::kYearFieldNumber;
const int VkMusicPlaylist::kTagsFieldNumber;
const int VkMusicPlaylist::kTimestampMsFieldNumber;
const int VkMusicPlaylist::kUmaTagsFieldNumber;
const int VkMusicPlaylist::kTitleAlternativesFieldNumber;
const int VkMusicPlaylist::kPerformerAlternativesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicPlaylist::VkMusicPlaylist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicPlaylist)
}
VkMusicPlaylist::VkMusicPlaylist(const VkMusicPlaylist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      track_names_(from.track_names_),
      tags_(from.tags_),
      uma_tags_(from.uma_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  performer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_performer()) {
    performer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_);
  }
  subtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_subtitle()) {
    subtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
  }
  title_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title_alternatives()) {
    title_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_alternatives_);
  }
  performer_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_performer_alternatives()) {
    performer_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_alternatives_);
  }
  if (from.has_tracks()) {
    tracks_ = new ::ru::mail::go::webbase::blobs::VkTrackList(*from.tracks_);
  } else {
    tracks_ = NULL;
  }
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicPlaylist)
}

void VkMusicPlaylist::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tracks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&tracks_)) + sizeof(year_));
}

VkMusicPlaylist::~VkMusicPlaylist() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  SharedDtor();
}

void VkMusicPlaylist::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_alternatives_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  performer_alternatives_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tracks_;
}

void VkMusicPlaylist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicPlaylist::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicPlaylist& VkMusicPlaylist::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicPlaylist* VkMusicPlaylist::New(::google::protobuf::Arena* arena) const {
  VkMusicPlaylist* n = new VkMusicPlaylist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicPlaylist::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_names_.Clear();
  tags_.Clear();
  uma_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!performer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*performer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!subtitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*subtitle_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!title_alternatives_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_alternatives_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!performer_alternatives_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*performer_alternatives_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tracks_ != NULL);
      tracks_->::ru::mail::go::webbase::blobs::VkTrackList::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playlist_id_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(playlist_id_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&number_of_tracks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tracks_times_listened_) -
        reinterpret_cast<char*>(&number_of_tracks_)) + sizeof(tracks_times_listened_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&tracks_times_listened_last_month_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&year_) -
        reinterpret_cast<char*>(&tracks_times_listened_last_month_)) + sizeof(year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicPlaylist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 owner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 playlist_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_playlist_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playlist_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPlaylist.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string performer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_performer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->performer().data(), static_cast<int>(this->performer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPlaylist.performer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 number_of_tracks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_number_of_tracks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_tracks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_official = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_official();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_official_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_times_listened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 followers = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_followers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &followers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened_last_month = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_times_listened_last_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_last_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened_last_week = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_times_listened_last_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_last_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkTrackList tracks = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string track_names = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_track_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_names(this->track_names_size() - 1).data(),
            static_cast<int>(this->track_names(this->track_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tracks_times_listened = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_tracks_times_listened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracks_times_listened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tracks_times_listened_last_month = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_tracks_times_listened_last_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracks_times_listened_last_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tracks_times_listened_last_week = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_tracks_times_listened_last_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracks_times_listened_last_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subtitle = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtitle().data(), static_cast<int>(this->subtitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 year = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPlaylist.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_ms = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string uma_tags = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uma_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uma_tags(this->uma_tags_size() - 1).data(),
            static_cast<int>(this->uma_tags(this->uma_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title_alternatives = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title_alternatives()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title_alternatives().data(), static_cast<int>(this->title_alternatives().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string performer_alternatives = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_performer_alternatives()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->performer_alternatives().data(), static_cast<int>(this->performer_alternatives().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  return false;
#undef DO_
}

void VkMusicPlaylist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 owner_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->owner_id(), output);
  }

  // optional int64 playlist_id = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playlist_id(), output);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string performer = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer().data(), static_cast<int>(this->performer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.performer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->performer(), output);
  }

  // optional int32 number_of_tracks = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->number_of_tracks(), output);
  }

  // optional bool is_official = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_official(), output);
  }

  // optional int64 times_listened = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->times_listened(), output);
  }

  // optional int64 timestamp = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp(), output);
  }

  // optional int64 followers = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->followers(), output);
  }

  // optional int64 times_listened_last_month = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->times_listened_last_month(), output);
  }

  // optional int64 times_listened_last_week = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->times_listened_last_week(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkTrackList tracks = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->tracks_, output);
  }

  // repeated string track_names = 13;
  for (int i = 0, n = this->track_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_names(i).data(), static_cast<int>(this->track_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->track_names(i), output);
  }

  // optional int64 tracks_times_listened = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->tracks_times_listened(), output);
  }

  // optional int64 tracks_times_listened_last_month = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->tracks_times_listened_last_month(), output);
  }

  // optional int64 tracks_times_listened_last_week = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->tracks_times_listened_last_week(), output);
  }

  // optional string subtitle = 17;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtitle().data(), static_cast<int>(this->subtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->subtitle(), output);
  }

  // optional uint32 year = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->year(), output);
  }

  // repeated string tags = 19;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->tags(i), output);
  }

  // optional int64 timestamp_ms = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->timestamp_ms(), output);
  }

  // repeated string uma_tags = 21;
  for (int i = 0, n = this->uma_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uma_tags(i).data(), static_cast<int>(this->uma_tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->uma_tags(i), output);
  }

  // optional string title_alternatives = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title_alternatives().data(), static_cast<int>(this->title_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->title_alternatives(), output);
  }

  // optional string performer_alternatives = 23;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer_alternatives().data(), static_cast<int>(this->performer_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->performer_alternatives(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicPlaylist)
}

::google::protobuf::uint8* VkMusicPlaylist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 owner_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->owner_id(), target);
  }

  // optional int64 playlist_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playlist_id(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string performer = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer().data(), static_cast<int>(this->performer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.performer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->performer(), target);
  }

  // optional int32 number_of_tracks = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->number_of_tracks(), target);
  }

  // optional bool is_official = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_official(), target);
  }

  // optional int64 times_listened = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->times_listened(), target);
  }

  // optional int64 timestamp = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->timestamp(), target);
  }

  // optional int64 followers = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->followers(), target);
  }

  // optional int64 times_listened_last_month = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->times_listened_last_month(), target);
  }

  // optional int64 times_listened_last_week = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->times_listened_last_week(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkTrackList tracks = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->tracks_, deterministic, target);
  }

  // repeated string track_names = 13;
  for (int i = 0, n = this->track_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_names(i).data(), static_cast<int>(this->track_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->track_names(i), target);
  }

  // optional int64 tracks_times_listened = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->tracks_times_listened(), target);
  }

  // optional int64 tracks_times_listened_last_month = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->tracks_times_listened_last_month(), target);
  }

  // optional int64 tracks_times_listened_last_week = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->tracks_times_listened_last_week(), target);
  }

  // optional string subtitle = 17;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtitle().data(), static_cast<int>(this->subtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->subtitle(), target);
  }

  // optional uint32 year = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->year(), target);
  }

  // repeated string tags = 19;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->tags(i), target);
  }

  // optional int64 timestamp_ms = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->timestamp_ms(), target);
  }

  // repeated string uma_tags = 21;
  for (int i = 0, n = this->uma_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uma_tags(i).data(), static_cast<int>(this->uma_tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->uma_tags(i), target);
  }

  // optional string title_alternatives = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title_alternatives().data(), static_cast<int>(this->title_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->title_alternatives(), target);
  }

  // optional string performer_alternatives = 23;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->performer_alternatives().data(), static_cast<int>(this->performer_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->performer_alternatives(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  return target;
}

size_t VkMusicPlaylist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string track_names = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->track_names_size());
  for (int i = 0, n = this->track_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->track_names(i));
  }

  // repeated string tags = 19;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string uma_tags = 21;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->uma_tags_size());
  for (int i = 0, n = this->uma_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uma_tags(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string performer = 4;
    if (has_performer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->performer());
    }

    // optional string subtitle = 17;
    if (has_subtitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtitle());
    }

    // optional string title_alternatives = 22;
    if (has_title_alternatives()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title_alternatives());
    }

    // optional string performer_alternatives = 23;
    if (has_performer_alternatives()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->performer_alternatives());
    }

    // optional .ru.mail.go.webbase.blobs.VkTrackList tracks = 12;
    if (has_tracks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tracks_);
    }

    // optional int64 owner_id = 1;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_id());
    }

    // optional int64 playlist_id = 2;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playlist_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 number_of_tracks = 5;
    if (has_number_of_tracks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_of_tracks());
    }

    // optional bool is_official = 6;
    if (has_is_official()) {
      total_size += 1 + 1;
    }

    // optional int64 times_listened = 7;
    if (has_times_listened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times_listened());
    }

    // optional int64 timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 followers = 9;
    if (has_followers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->followers());
    }

    // optional int64 times_listened_last_month = 10;
    if (has_times_listened_last_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times_listened_last_month());
    }

    // optional int64 times_listened_last_week = 11;
    if (has_times_listened_last_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times_listened_last_week());
    }

    // optional int64 tracks_times_listened = 14;
    if (has_tracks_times_listened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tracks_times_listened());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional int64 tracks_times_listened_last_month = 15;
    if (has_tracks_times_listened_last_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tracks_times_listened_last_month());
    }

    // optional int64 tracks_times_listened_last_week = 16;
    if (has_tracks_times_listened_last_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tracks_times_listened_last_week());
    }

    // optional int64 timestamp_ms = 20;
    if (has_timestamp_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 year = 18;
    if (has_year()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicPlaylist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicPlaylist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicPlaylist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicPlaylist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicPlaylist)
    MergeFrom(*source);
  }
}

void VkMusicPlaylist::MergeFrom(const VkMusicPlaylist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  track_names_.MergeFrom(from.track_names_);
  tags_.MergeFrom(from.tags_);
  uma_tags_.MergeFrom(from.uma_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_performer();
      performer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_subtitle();
      subtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_title_alternatives();
      title_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_alternatives_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_performer_alternatives();
      performer_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.performer_alternatives_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_tracks()->::ru::mail::go::webbase::blobs::VkTrackList::MergeFrom(from.tracks());
    }
    if (cached_has_bits & 0x00000040u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      playlist_id_ = from.playlist_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      number_of_tracks_ = from.number_of_tracks_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_official_ = from.is_official_;
    }
    if (cached_has_bits & 0x00000400u) {
      times_listened_ = from.times_listened_;
    }
    if (cached_has_bits & 0x00000800u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00002000u) {
      times_listened_last_month_ = from.times_listened_last_month_;
    }
    if (cached_has_bits & 0x00004000u) {
      times_listened_last_week_ = from.times_listened_last_week_;
    }
    if (cached_has_bits & 0x00008000u) {
      tracks_times_listened_ = from.tracks_times_listened_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      tracks_times_listened_last_month_ = from.tracks_times_listened_last_month_;
    }
    if (cached_has_bits & 0x00020000u) {
      tracks_times_listened_last_week_ = from.tracks_times_listened_last_week_;
    }
    if (cached_has_bits & 0x00040000u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00080000u) {
      year_ = from.year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicPlaylist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicPlaylist::CopyFrom(const VkMusicPlaylist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicPlaylist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicPlaylist::IsInitialized() const {
  return true;
}

void VkMusicPlaylist::Swap(VkMusicPlaylist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicPlaylist::InternalSwap(VkMusicPlaylist* other) {
  using std::swap;
  track_names_.InternalSwap(&other->track_names_);
  tags_.InternalSwap(&other->tags_);
  uma_tags_.InternalSwap(&other->uma_tags_);
  title_.Swap(&other->title_);
  performer_.Swap(&other->performer_);
  subtitle_.Swap(&other->subtitle_);
  title_alternatives_.Swap(&other->title_alternatives_);
  performer_alternatives_.Swap(&other->performer_alternatives_);
  swap(tracks_, other->tracks_);
  swap(owner_id_, other->owner_id_);
  swap(playlist_id_, other->playlist_id_);
  swap(number_of_tracks_, other->number_of_tracks_);
  swap(is_official_, other->is_official_);
  swap(times_listened_, other->times_listened_);
  swap(timestamp_, other->timestamp_);
  swap(followers_, other->followers_);
  swap(times_listened_last_month_, other->times_listened_last_month_);
  swap(times_listened_last_week_, other->times_listened_last_week_);
  swap(tracks_times_listened_, other->tracks_times_listened_);
  swap(tracks_times_listened_last_month_, other->tracks_times_listened_last_month_);
  swap(tracks_times_listened_last_week_, other->tracks_times_listened_last_week_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(year_, other->year_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicPlaylist::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicPlaylist

// optional int64 owner_id = 1;
bool VkMusicPlaylist::has_owner_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkMusicPlaylist::set_has_owner_id() {
  _has_bits_[0] |= 0x00000040u;
}
void VkMusicPlaylist::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkMusicPlaylist::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
::google::protobuf::int64 VkMusicPlaylist::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.owner_id)
  return owner_id_;
}
void VkMusicPlaylist::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.owner_id)
}

// optional int64 playlist_id = 2;
bool VkMusicPlaylist::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkMusicPlaylist::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000080u;
}
void VkMusicPlaylist::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkMusicPlaylist::clear_playlist_id() {
  playlist_id_ = GOOGLE_LONGLONG(0);
  clear_has_playlist_id();
}
::google::protobuf::int64 VkMusicPlaylist::playlist_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.playlist_id)
  return playlist_id_;
}
void VkMusicPlaylist::set_playlist_id(::google::protobuf::int64 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.playlist_id)
}

// optional string title = 3;
bool VkMusicPlaylist::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicPlaylist::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicPlaylist::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicPlaylist::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& VkMusicPlaylist::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
  return title_.GetNoArena();
}
void VkMusicPlaylist::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}
#if LANG_CXX11
void VkMusicPlaylist::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}
#endif
void VkMusicPlaylist::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}
void VkMusicPlaylist::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}
::std::string* VkMusicPlaylist::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicPlaylist::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicPlaylist::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.title)
}

// optional string performer = 4;
bool VkMusicPlaylist::has_performer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicPlaylist::set_has_performer() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicPlaylist::clear_has_performer() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicPlaylist::clear_performer() {
  performer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer();
}
const ::std::string& VkMusicPlaylist::performer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
  return performer_.GetNoArena();
}
void VkMusicPlaylist::set_performer(const ::std::string& value) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}
#if LANG_CXX11
void VkMusicPlaylist::set_performer(::std::string&& value) {
  set_has_performer();
  performer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}
#endif
void VkMusicPlaylist::set_performer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}
void VkMusicPlaylist::set_performer(const char* value, size_t size) {
  set_has_performer();
  performer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}
::std::string* VkMusicPlaylist::mutable_performer() {
  set_has_performer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
  return performer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicPlaylist::release_performer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
  clear_has_performer();
  return performer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicPlaylist::set_allocated_performer(::std::string* performer) {
  if (performer != NULL) {
    set_has_performer();
  } else {
    clear_has_performer();
  }
  performer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer)
}

// optional int32 number_of_tracks = 5;
bool VkMusicPlaylist::has_number_of_tracks() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VkMusicPlaylist::set_has_number_of_tracks() {
  _has_bits_[0] |= 0x00000100u;
}
void VkMusicPlaylist::clear_has_number_of_tracks() {
  _has_bits_[0] &= ~0x00000100u;
}
void VkMusicPlaylist::clear_number_of_tracks() {
  number_of_tracks_ = 0;
  clear_has_number_of_tracks();
}
::google::protobuf::int32 VkMusicPlaylist::number_of_tracks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.number_of_tracks)
  return number_of_tracks_;
}
void VkMusicPlaylist::set_number_of_tracks(::google::protobuf::int32 value) {
  set_has_number_of_tracks();
  number_of_tracks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.number_of_tracks)
}

// optional bool is_official = 6;
bool VkMusicPlaylist::has_is_official() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VkMusicPlaylist::set_has_is_official() {
  _has_bits_[0] |= 0x00000200u;
}
void VkMusicPlaylist::clear_has_is_official() {
  _has_bits_[0] &= ~0x00000200u;
}
void VkMusicPlaylist::clear_is_official() {
  is_official_ = false;
  clear_has_is_official();
}
bool VkMusicPlaylist::is_official() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.is_official)
  return is_official_;
}
void VkMusicPlaylist::set_is_official(bool value) {
  set_has_is_official();
  is_official_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.is_official)
}

// optional int64 times_listened = 7;
bool VkMusicPlaylist::has_times_listened() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VkMusicPlaylist::set_has_times_listened() {
  _has_bits_[0] |= 0x00000400u;
}
void VkMusicPlaylist::clear_has_times_listened() {
  _has_bits_[0] &= ~0x00000400u;
}
void VkMusicPlaylist::clear_times_listened() {
  times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened();
}
::google::protobuf::int64 VkMusicPlaylist::times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened)
  return times_listened_;
}
void VkMusicPlaylist::set_times_listened(::google::protobuf::int64 value) {
  set_has_times_listened();
  times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened)
}

// optional int64 timestamp = 8;
bool VkMusicPlaylist::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VkMusicPlaylist::set_has_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
void VkMusicPlaylist::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
void VkMusicPlaylist::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 VkMusicPlaylist::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.timestamp)
  return timestamp_;
}
void VkMusicPlaylist::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.timestamp)
}

// optional int64 followers = 9;
bool VkMusicPlaylist::has_followers() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VkMusicPlaylist::set_has_followers() {
  _has_bits_[0] |= 0x00001000u;
}
void VkMusicPlaylist::clear_has_followers() {
  _has_bits_[0] &= ~0x00001000u;
}
void VkMusicPlaylist::clear_followers() {
  followers_ = GOOGLE_LONGLONG(0);
  clear_has_followers();
}
::google::protobuf::int64 VkMusicPlaylist::followers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.followers)
  return followers_;
}
void VkMusicPlaylist::set_followers(::google::protobuf::int64 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.followers)
}

// optional int64 times_listened_last_month = 10;
bool VkMusicPlaylist::has_times_listened_last_month() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VkMusicPlaylist::set_has_times_listened_last_month() {
  _has_bits_[0] |= 0x00002000u;
}
void VkMusicPlaylist::clear_has_times_listened_last_month() {
  _has_bits_[0] &= ~0x00002000u;
}
void VkMusicPlaylist::clear_times_listened_last_month() {
  times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_month();
}
::google::protobuf::int64 VkMusicPlaylist::times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened_last_month)
  return times_listened_last_month_;
}
void VkMusicPlaylist::set_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_times_listened_last_month();
  times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened_last_month)
}

// optional int64 times_listened_last_week = 11;
bool VkMusicPlaylist::has_times_listened_last_week() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VkMusicPlaylist::set_has_times_listened_last_week() {
  _has_bits_[0] |= 0x00004000u;
}
void VkMusicPlaylist::clear_has_times_listened_last_week() {
  _has_bits_[0] &= ~0x00004000u;
}
void VkMusicPlaylist::clear_times_listened_last_week() {
  times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_week();
}
::google::protobuf::int64 VkMusicPlaylist::times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened_last_week)
  return times_listened_last_week_;
}
void VkMusicPlaylist::set_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_times_listened_last_week();
  times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.times_listened_last_week)
}

// optional .ru.mail.go.webbase.blobs.VkTrackList tracks = 12;
bool VkMusicPlaylist::has_tracks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkMusicPlaylist::set_has_tracks() {
  _has_bits_[0] |= 0x00000020u;
}
void VkMusicPlaylist::clear_has_tracks() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkMusicPlaylist::clear_tracks() {
  if (tracks_ != NULL) tracks_->::ru::mail::go::webbase::blobs::VkTrackList::Clear();
  clear_has_tracks();
}
const ::ru::mail::go::webbase::blobs::VkTrackList& VkMusicPlaylist::tracks() const {
  const ::ru::mail::go::webbase::blobs::VkTrackList* p = tracks_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkTrackList*>(
      &::ru::mail::go::webbase::blobs::_VkTrackList_default_instance_);
}
::ru::mail::go::webbase::blobs::VkTrackList* VkMusicPlaylist::mutable_tracks() {
  set_has_tracks();
  if (tracks_ == NULL) {
    tracks_ = new ::ru::mail::go::webbase::blobs::VkTrackList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks)
  return tracks_;
}
::ru::mail::go::webbase::blobs::VkTrackList* VkMusicPlaylist::release_tracks() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks)
  clear_has_tracks();
  ::ru::mail::go::webbase::blobs::VkTrackList* temp = tracks_;
  tracks_ = NULL;
  return temp;
}
void VkMusicPlaylist::set_allocated_tracks(::ru::mail::go::webbase::blobs::VkTrackList* tracks) {
  delete tracks_;
  tracks_ = tracks;
  if (tracks) {
    set_has_tracks();
  } else {
    clear_has_tracks();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks)
}

// repeated string track_names = 13;
int VkMusicPlaylist::track_names_size() const {
  return track_names_.size();
}
void VkMusicPlaylist::clear_track_names() {
  track_names_.Clear();
}
const ::std::string& VkMusicPlaylist::track_names(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return track_names_.Get(index);
}
::std::string* VkMusicPlaylist::mutable_track_names(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return track_names_.Mutable(index);
}
void VkMusicPlaylist::set_track_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  track_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicPlaylist::set_track_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  track_names_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicPlaylist::set_track_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
void VkMusicPlaylist::set_track_names(int index, const char* value, size_t size) {
  track_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
::std::string* VkMusicPlaylist::add_track_names() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return track_names_.Add();
}
void VkMusicPlaylist::add_track_names(const ::std::string& value) {
  track_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
#if LANG_CXX11
void VkMusicPlaylist::add_track_names(::std::string&& value) {
  track_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
#endif
void VkMusicPlaylist::add_track_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  track_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
void VkMusicPlaylist::add_track_names(const char* value, size_t size) {
  track_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicPlaylist::track_names() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return track_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicPlaylist::mutable_track_names() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.track_names)
  return &track_names_;
}

// optional int64 tracks_times_listened = 14;
bool VkMusicPlaylist::has_tracks_times_listened() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VkMusicPlaylist::set_has_tracks_times_listened() {
  _has_bits_[0] |= 0x00008000u;
}
void VkMusicPlaylist::clear_has_tracks_times_listened() {
  _has_bits_[0] &= ~0x00008000u;
}
void VkMusicPlaylist::clear_tracks_times_listened() {
  tracks_times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_tracks_times_listened();
}
::google::protobuf::int64 VkMusicPlaylist::tracks_times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened)
  return tracks_times_listened_;
}
void VkMusicPlaylist::set_tracks_times_listened(::google::protobuf::int64 value) {
  set_has_tracks_times_listened();
  tracks_times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened)
}

// optional int64 tracks_times_listened_last_month = 15;
bool VkMusicPlaylist::has_tracks_times_listened_last_month() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VkMusicPlaylist::set_has_tracks_times_listened_last_month() {
  _has_bits_[0] |= 0x00010000u;
}
void VkMusicPlaylist::clear_has_tracks_times_listened_last_month() {
  _has_bits_[0] &= ~0x00010000u;
}
void VkMusicPlaylist::clear_tracks_times_listened_last_month() {
  tracks_times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_tracks_times_listened_last_month();
}
::google::protobuf::int64 VkMusicPlaylist::tracks_times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened_last_month)
  return tracks_times_listened_last_month_;
}
void VkMusicPlaylist::set_tracks_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_tracks_times_listened_last_month();
  tracks_times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened_last_month)
}

// optional int64 tracks_times_listened_last_week = 16;
bool VkMusicPlaylist::has_tracks_times_listened_last_week() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VkMusicPlaylist::set_has_tracks_times_listened_last_week() {
  _has_bits_[0] |= 0x00020000u;
}
void VkMusicPlaylist::clear_has_tracks_times_listened_last_week() {
  _has_bits_[0] &= ~0x00020000u;
}
void VkMusicPlaylist::clear_tracks_times_listened_last_week() {
  tracks_times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_tracks_times_listened_last_week();
}
::google::protobuf::int64 VkMusicPlaylist::tracks_times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened_last_week)
  return tracks_times_listened_last_week_;
}
void VkMusicPlaylist::set_tracks_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_tracks_times_listened_last_week();
  tracks_times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tracks_times_listened_last_week)
}

// optional string subtitle = 17;
bool VkMusicPlaylist::has_subtitle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicPlaylist::set_has_subtitle() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicPlaylist::clear_has_subtitle() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicPlaylist::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subtitle();
}
const ::std::string& VkMusicPlaylist::subtitle() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
  return subtitle_.GetNoArena();
}
void VkMusicPlaylist::set_subtitle(const ::std::string& value) {
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}
#if LANG_CXX11
void VkMusicPlaylist::set_subtitle(::std::string&& value) {
  set_has_subtitle();
  subtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}
#endif
void VkMusicPlaylist::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}
void VkMusicPlaylist::set_subtitle(const char* value, size_t size) {
  set_has_subtitle();
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}
::std::string* VkMusicPlaylist::mutable_subtitle() {
  set_has_subtitle();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
  return subtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicPlaylist::release_subtitle() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
  clear_has_subtitle();
  return subtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicPlaylist::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle != NULL) {
    set_has_subtitle();
  } else {
    clear_has_subtitle();
  }
  subtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.subtitle)
}

// optional uint32 year = 18;
bool VkMusicPlaylist::has_year() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VkMusicPlaylist::set_has_year() {
  _has_bits_[0] |= 0x00080000u;
}
void VkMusicPlaylist::clear_has_year() {
  _has_bits_[0] &= ~0x00080000u;
}
void VkMusicPlaylist::clear_year() {
  year_ = 0u;
  clear_has_year();
}
::google::protobuf::uint32 VkMusicPlaylist::year() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.year)
  return year_;
}
void VkMusicPlaylist::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.year)
}

// repeated string tags = 19;
int VkMusicPlaylist::tags_size() const {
  return tags_.size();
}
void VkMusicPlaylist::clear_tags() {
  tags_.Clear();
}
const ::std::string& VkMusicPlaylist::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return tags_.Get(index);
}
::std::string* VkMusicPlaylist::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return tags_.Mutable(index);
}
void VkMusicPlaylist::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicPlaylist::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicPlaylist::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
void VkMusicPlaylist::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
::std::string* VkMusicPlaylist::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return tags_.Add();
}
void VkMusicPlaylist::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
#if LANG_CXX11
void VkMusicPlaylist::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
#endif
void VkMusicPlaylist::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
void VkMusicPlaylist::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicPlaylist::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicPlaylist::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.tags)
  return &tags_;
}

// optional int64 timestamp_ms = 20;
bool VkMusicPlaylist::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VkMusicPlaylist::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00040000u;
}
void VkMusicPlaylist::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00040000u;
}
void VkMusicPlaylist::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 VkMusicPlaylist::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.timestamp_ms)
  return timestamp_ms_;
}
void VkMusicPlaylist::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.timestamp_ms)
}

// repeated string uma_tags = 21;
int VkMusicPlaylist::uma_tags_size() const {
  return uma_tags_.size();
}
void VkMusicPlaylist::clear_uma_tags() {
  uma_tags_.Clear();
}
const ::std::string& VkMusicPlaylist::uma_tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return uma_tags_.Get(index);
}
::std::string* VkMusicPlaylist::mutable_uma_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return uma_tags_.Mutable(index);
}
void VkMusicPlaylist::set_uma_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  uma_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicPlaylist::set_uma_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  uma_tags_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicPlaylist::set_uma_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uma_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
void VkMusicPlaylist::set_uma_tags(int index, const char* value, size_t size) {
  uma_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
::std::string* VkMusicPlaylist::add_uma_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return uma_tags_.Add();
}
void VkMusicPlaylist::add_uma_tags(const ::std::string& value) {
  uma_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
#if LANG_CXX11
void VkMusicPlaylist::add_uma_tags(::std::string&& value) {
  uma_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
#endif
void VkMusicPlaylist::add_uma_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uma_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
void VkMusicPlaylist::add_uma_tags(const char* value, size_t size) {
  uma_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicPlaylist::uma_tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return uma_tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicPlaylist::mutable_uma_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicPlaylist.uma_tags)
  return &uma_tags_;
}

// optional string title_alternatives = 22;
bool VkMusicPlaylist::has_title_alternatives() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicPlaylist::set_has_title_alternatives() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicPlaylist::clear_has_title_alternatives() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicPlaylist::clear_title_alternatives() {
  title_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title_alternatives();
}
const ::std::string& VkMusicPlaylist::title_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
  return title_alternatives_.GetNoArena();
}
void VkMusicPlaylist::set_title_alternatives(const ::std::string& value) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}
#if LANG_CXX11
void VkMusicPlaylist::set_title_alternatives(::std::string&& value) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}
#endif
void VkMusicPlaylist::set_title_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}
void VkMusicPlaylist::set_title_alternatives(const char* value, size_t size) {
  set_has_title_alternatives();
  title_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}
::std::string* VkMusicPlaylist::mutable_title_alternatives() {
  set_has_title_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
  return title_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicPlaylist::release_title_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
  clear_has_title_alternatives();
  return title_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicPlaylist::set_allocated_title_alternatives(::std::string* title_alternatives) {
  if (title_alternatives != NULL) {
    set_has_title_alternatives();
  } else {
    clear_has_title_alternatives();
  }
  title_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.title_alternatives)
}

// optional string performer_alternatives = 23;
bool VkMusicPlaylist::has_performer_alternatives() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicPlaylist::set_has_performer_alternatives() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicPlaylist::clear_has_performer_alternatives() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicPlaylist::clear_performer_alternatives() {
  performer_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_performer_alternatives();
}
const ::std::string& VkMusicPlaylist::performer_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
  return performer_alternatives_.GetNoArena();
}
void VkMusicPlaylist::set_performer_alternatives(const ::std::string& value) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}
#if LANG_CXX11
void VkMusicPlaylist::set_performer_alternatives(::std::string&& value) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}
#endif
void VkMusicPlaylist::set_performer_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}
void VkMusicPlaylist::set_performer_alternatives(const char* value, size_t size) {
  set_has_performer_alternatives();
  performer_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}
::std::string* VkMusicPlaylist::mutable_performer_alternatives() {
  set_has_performer_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
  return performer_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicPlaylist::release_performer_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
  clear_has_performer_alternatives();
  return performer_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicPlaylist::set_allocated_performer_alternatives(::std::string* performer_alternatives) {
  if (performer_alternatives != NULL) {
    set_has_performer_alternatives();
  } else {
    clear_has_performer_alternatives();
  }
  performer_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), performer_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPlaylist.performer_alternatives)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicUMAAlbumMeta::kOwnerIdFieldNumber;
const int VkMusicUMAAlbumMeta::kPlaylistIdFieldNumber;
const int VkMusicUMAAlbumMeta::kTimestampFieldNumber;
const int VkMusicUMAAlbumMeta::kJsonStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicUMAAlbumMeta::VkMusicUMAAlbumMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
}
VkMusicUMAAlbumMeta::VkMusicUMAAlbumMeta(const VkMusicUMAAlbumMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_str()) {
    json_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
  }
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
}

void VkMusicUMAAlbumMeta::SharedCtor() {
  _cached_size_ = 0;
  json_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&owner_id_)) + sizeof(timestamp_));
}

VkMusicUMAAlbumMeta::~VkMusicUMAAlbumMeta() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  SharedDtor();
}

void VkMusicUMAAlbumMeta::SharedDtor() {
  json_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicUMAAlbumMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicUMAAlbumMeta::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicUMAAlbumMeta& VkMusicUMAAlbumMeta::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicUMAAlbumMeta* VkMusicUMAAlbumMeta::New(::google::protobuf::Arena* arena) const {
  VkMusicUMAAlbumMeta* n = new VkMusicUMAAlbumMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicUMAAlbumMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_json_str()) {
    GOOGLE_DCHECK(!json_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*json_str_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicUMAAlbumMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 owner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 playlist_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_playlist_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playlist_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_str = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_str().data(), static_cast<int>(this->json_str().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  return false;
#undef DO_
}

void VkMusicUMAAlbumMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->owner_id(), output);
  }

  // optional int64 playlist_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playlist_id(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string json_str = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_str().data(), static_cast<int>(this->json_str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->json_str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
}

::google::protobuf::uint8* VkMusicUMAAlbumMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->owner_id(), target);
  }

  // optional int64 playlist_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playlist_id(), target);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional string json_str = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_str().data(), static_cast<int>(this->json_str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->json_str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  return target;
}

size_t VkMusicUMAAlbumMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string json_str = 4;
    if (has_json_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_str());
    }

    // optional int64 owner_id = 1;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_id());
    }

    // optional int64 playlist_id = 2;
    if (has_playlist_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playlist_id());
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicUMAAlbumMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicUMAAlbumMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicUMAAlbumMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
    MergeFrom(*source);
  }
}

void VkMusicUMAAlbumMeta::MergeFrom(const VkMusicUMAAlbumMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_str();
      json_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
    }
    if (cached_has_bits & 0x00000002u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      playlist_id_ = from.playlist_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicUMAAlbumMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicUMAAlbumMeta::CopyFrom(const VkMusicUMAAlbumMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicUMAAlbumMeta::IsInitialized() const {
  return true;
}

void VkMusicUMAAlbumMeta::Swap(VkMusicUMAAlbumMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicUMAAlbumMeta::InternalSwap(VkMusicUMAAlbumMeta* other) {
  using std::swap;
  json_str_.Swap(&other->json_str_);
  swap(owner_id_, other->owner_id_);
  swap(playlist_id_, other->playlist_id_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicUMAAlbumMeta::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicUMAAlbumMeta

// optional int64 owner_id = 1;
bool VkMusicUMAAlbumMeta::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicUMAAlbumMeta::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicUMAAlbumMeta::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicUMAAlbumMeta::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
::google::protobuf::int64 VkMusicUMAAlbumMeta::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.owner_id)
  return owner_id_;
}
void VkMusicUMAAlbumMeta::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.owner_id)
}

// optional int64 playlist_id = 2;
bool VkMusicUMAAlbumMeta::has_playlist_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicUMAAlbumMeta::set_has_playlist_id() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicUMAAlbumMeta::clear_has_playlist_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicUMAAlbumMeta::clear_playlist_id() {
  playlist_id_ = GOOGLE_LONGLONG(0);
  clear_has_playlist_id();
}
::google::protobuf::int64 VkMusicUMAAlbumMeta::playlist_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.playlist_id)
  return playlist_id_;
}
void VkMusicUMAAlbumMeta::set_playlist_id(::google::protobuf::int64 value) {
  set_has_playlist_id();
  playlist_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.playlist_id)
}

// optional int64 timestamp = 3;
bool VkMusicUMAAlbumMeta::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicUMAAlbumMeta::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicUMAAlbumMeta::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicUMAAlbumMeta::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 VkMusicUMAAlbumMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.timestamp)
  return timestamp_;
}
void VkMusicUMAAlbumMeta::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.timestamp)
}

// optional string json_str = 4;
bool VkMusicUMAAlbumMeta::has_json_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicUMAAlbumMeta::set_has_json_str() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicUMAAlbumMeta::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicUMAAlbumMeta::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
const ::std::string& VkMusicUMAAlbumMeta::json_str() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
  return json_str_.GetNoArena();
}
void VkMusicUMAAlbumMeta::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}
#if LANG_CXX11
void VkMusicUMAAlbumMeta::set_json_str(::std::string&& value) {
  set_has_json_str();
  json_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}
#endif
void VkMusicUMAAlbumMeta::set_json_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_str();
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}
void VkMusicUMAAlbumMeta::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}
::std::string* VkMusicUMAAlbumMeta::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
  return json_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicUMAAlbumMeta::release_json_str() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicUMAAlbumMeta::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicUMAAlbumMeta.json_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicUserPrivacy::kOwnerIdFieldNumber;
const int VkMusicUserPrivacy::kIsPublicFieldNumber;
const int VkMusicUserPrivacy::kTimestampFieldNumber;
const int VkMusicUserPrivacy::kTimestampMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicUserPrivacy::VkMusicUserPrivacy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
}
VkMusicUserPrivacy::VkMusicUserPrivacy(const VkMusicUserPrivacy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_public_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(is_public_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
}

void VkMusicUserPrivacy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_public_) -
      reinterpret_cast<char*>(&owner_id_)) + sizeof(is_public_));
}

VkMusicUserPrivacy::~VkMusicUserPrivacy() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  SharedDtor();
}

void VkMusicUserPrivacy::SharedDtor() {
}

void VkMusicUserPrivacy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicUserPrivacy::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicUserPrivacy& VkMusicUserPrivacy::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicUserPrivacy* VkMusicUserPrivacy::New(::google::protobuf::Arena* arena) const {
  VkMusicUserPrivacy* n = new VkMusicUserPrivacy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicUserPrivacy::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_public_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(is_public_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicUserPrivacy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 owner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_public = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_ms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  return false;
#undef DO_
}

void VkMusicUserPrivacy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->owner_id(), output);
  }

  // required bool is_public = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_public(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional int64 timestamp_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
}

::google::protobuf::uint8* VkMusicUserPrivacy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->owner_id(), target);
  }

  // required bool is_public = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_public(), target);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional int64 timestamp_ms = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  return target;
}

size_t VkMusicUserPrivacy::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  size_t total_size = 0;

  if (has_owner_id()) {
    // required int64 owner_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  if (has_is_public()) {
    // required bool is_public = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t VkMusicUserPrivacy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required int64 owner_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());

    // required bool is_public = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 timestamp_ms = 4;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicUserPrivacy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicUserPrivacy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicUserPrivacy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
    MergeFrom(*source);
  }
}

void VkMusicUserPrivacy::MergeFrom(const VkMusicUserPrivacy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_public_ = from.is_public_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicUserPrivacy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicUserPrivacy::CopyFrom(const VkMusicUserPrivacy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicUserPrivacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicUserPrivacy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void VkMusicUserPrivacy::Swap(VkMusicUserPrivacy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicUserPrivacy::InternalSwap(VkMusicUserPrivacy* other) {
  using std::swap;
  swap(owner_id_, other->owner_id_);
  swap(timestamp_, other->timestamp_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(is_public_, other->is_public_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicUserPrivacy::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicUserPrivacy

// required int64 owner_id = 1;
bool VkMusicUserPrivacy::has_owner_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicUserPrivacy::set_has_owner_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicUserPrivacy::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicUserPrivacy::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
::google::protobuf::int64 VkMusicUserPrivacy::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.owner_id)
  return owner_id_;
}
void VkMusicUserPrivacy::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.owner_id)
}

// required bool is_public = 2;
bool VkMusicUserPrivacy::has_is_public() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicUserPrivacy::set_has_is_public() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicUserPrivacy::clear_has_is_public() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicUserPrivacy::clear_is_public() {
  is_public_ = false;
  clear_has_is_public();
}
bool VkMusicUserPrivacy::is_public() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.is_public)
  return is_public_;
}
void VkMusicUserPrivacy::set_is_public(bool value) {
  set_has_is_public();
  is_public_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.is_public)
}

// optional int64 timestamp = 3;
bool VkMusicUserPrivacy::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicUserPrivacy::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicUserPrivacy::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicUserPrivacy::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 VkMusicUserPrivacy::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.timestamp)
  return timestamp_;
}
void VkMusicUserPrivacy::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.timestamp)
}

// optional int64 timestamp_ms = 4;
bool VkMusicUserPrivacy::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicUserPrivacy::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicUserPrivacy::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicUserPrivacy::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 VkMusicUserPrivacy::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.timestamp_ms)
  return timestamp_ms_;
}
void VkMusicUserPrivacy::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicUserPrivacy.timestamp_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackOrPlaylistOrUserPrivacy::kTrackFieldNumber;
const int TrackOrPlaylistOrUserPrivacy::kPlaylistFieldNumber;
const int TrackOrPlaylistOrUserPrivacy::kPrivacyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackOrPlaylistOrUserPrivacy::TrackOrPlaylistOrUserPrivacy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
}
TrackOrPlaylistOrUserPrivacy::TrackOrPlaylistOrUserPrivacy(const TrackOrPlaylistOrUserPrivacy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_track()) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack(*from.track_);
  } else {
    track_ = NULL;
  }
  if (from.has_playlist()) {
    playlist_ = new ::ru::mail::go::webbase::blobs::VkMusicPlaylist(*from.playlist_);
  } else {
    playlist_ = NULL;
  }
  if (from.has_privacy()) {
    privacy_ = new ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy(*from.privacy_);
  } else {
    privacy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
}

void TrackOrPlaylistOrUserPrivacy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&track_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privacy_) -
      reinterpret_cast<char*>(&track_)) + sizeof(privacy_));
}

TrackOrPlaylistOrUserPrivacy::~TrackOrPlaylistOrUserPrivacy() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  SharedDtor();
}

void TrackOrPlaylistOrUserPrivacy::SharedDtor() {
  if (this != internal_default_instance()) delete track_;
  if (this != internal_default_instance()) delete playlist_;
  if (this != internal_default_instance()) delete privacy_;
}

void TrackOrPlaylistOrUserPrivacy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackOrPlaylistOrUserPrivacy::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackOrPlaylistOrUserPrivacy& TrackOrPlaylistOrUserPrivacy::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrackOrPlaylistOrUserPrivacy* TrackOrPlaylistOrUserPrivacy::New(::google::protobuf::Arena* arena) const {
  TrackOrPlaylistOrUserPrivacy* n = new TrackOrPlaylistOrUserPrivacy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackOrPlaylistOrUserPrivacy::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(track_ != NULL);
      track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(playlist_ != NULL);
      playlist_->::ru::mail::go::webbase::blobs::VkMusicPlaylist::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(privacy_ != NULL);
      privacy_->::ru::mail::go::webbase::blobs::VkMusicUserPrivacy::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrackOrPlaylistOrUserPrivacy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicUserPrivacy privacy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  return false;
#undef DO_
}

void TrackOrPlaylistOrUserPrivacy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->track_, output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playlist_, output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicUserPrivacy privacy = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->privacy_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
}

::google::protobuf::uint8* TrackOrPlaylistOrUserPrivacy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->track_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->playlist_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicUserPrivacy privacy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->privacy_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  return target;
}

size_t TrackOrPlaylistOrUserPrivacy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->track_);
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 2;
    if (has_playlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playlist_);
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicUserPrivacy privacy = 3;
    if (has_privacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->privacy_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackOrPlaylistOrUserPrivacy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackOrPlaylistOrUserPrivacy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackOrPlaylistOrUserPrivacy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
    MergeFrom(*source);
  }
}

void TrackOrPlaylistOrUserPrivacy::MergeFrom(const TrackOrPlaylistOrUserPrivacy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_track()->::ru::mail::go::webbase::blobs::VkMusicTrack::MergeFrom(from.track());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_playlist()->::ru::mail::go::webbase::blobs::VkMusicPlaylist::MergeFrom(from.playlist());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_privacy()->::ru::mail::go::webbase::blobs::VkMusicUserPrivacy::MergeFrom(from.privacy());
    }
  }
}

void TrackOrPlaylistOrUserPrivacy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackOrPlaylistOrUserPrivacy::CopyFrom(const TrackOrPlaylistOrUserPrivacy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackOrPlaylistOrUserPrivacy::IsInitialized() const {
  if (has_track()) {
    if (!this->track_->IsInitialized()) return false;
  }
  if (has_privacy()) {
    if (!this->privacy_->IsInitialized()) return false;
  }
  return true;
}

void TrackOrPlaylistOrUserPrivacy::Swap(TrackOrPlaylistOrUserPrivacy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackOrPlaylistOrUserPrivacy::InternalSwap(TrackOrPlaylistOrUserPrivacy* other) {
  using std::swap;
  swap(track_, other->track_);
  swap(playlist_, other->playlist_);
  swap(privacy_, other->privacy_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackOrPlaylistOrUserPrivacy::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackOrPlaylistOrUserPrivacy

// optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
bool TrackOrPlaylistOrUserPrivacy::has_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackOrPlaylistOrUserPrivacy::set_has_track() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackOrPlaylistOrUserPrivacy::clear_has_track() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackOrPlaylistOrUserPrivacy::clear_track() {
  if (track_ != NULL) track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
  clear_has_track();
}
const ::ru::mail::go::webbase::blobs::VkMusicTrack& TrackOrPlaylistOrUserPrivacy::track() const {
  const ::ru::mail::go::webbase::blobs::VkMusicTrack* p = track_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.track)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      &::ru::mail::go::webbase::blobs::_VkMusicTrack_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicTrack* TrackOrPlaylistOrUserPrivacy::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.track)
  return track_;
}
::ru::mail::go::webbase::blobs::VkMusicTrack* TrackOrPlaylistOrUserPrivacy::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.track)
  clear_has_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* temp = track_;
  track_ = NULL;
  return temp;
}
void TrackOrPlaylistOrUserPrivacy::set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.track)
}

// optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 2;
bool TrackOrPlaylistOrUserPrivacy::has_playlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrackOrPlaylistOrUserPrivacy::set_has_playlist() {
  _has_bits_[0] |= 0x00000002u;
}
void TrackOrPlaylistOrUserPrivacy::clear_has_playlist() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrackOrPlaylistOrUserPrivacy::clear_playlist() {
  if (playlist_ != NULL) playlist_->::ru::mail::go::webbase::blobs::VkMusicPlaylist::Clear();
  clear_has_playlist();
}
const ::ru::mail::go::webbase::blobs::VkMusicPlaylist& TrackOrPlaylistOrUserPrivacy::playlist() const {
  const ::ru::mail::go::webbase::blobs::VkMusicPlaylist* p = playlist_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.playlist)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicPlaylist*>(
      &::ru::mail::go::webbase::blobs::_VkMusicPlaylist_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicPlaylist* TrackOrPlaylistOrUserPrivacy::mutable_playlist() {
  set_has_playlist();
  if (playlist_ == NULL) {
    playlist_ = new ::ru::mail::go::webbase::blobs::VkMusicPlaylist;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.playlist)
  return playlist_;
}
::ru::mail::go::webbase::blobs::VkMusicPlaylist* TrackOrPlaylistOrUserPrivacy::release_playlist() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.playlist)
  clear_has_playlist();
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* temp = playlist_;
  playlist_ = NULL;
  return temp;
}
void TrackOrPlaylistOrUserPrivacy::set_allocated_playlist(::ru::mail::go::webbase::blobs::VkMusicPlaylist* playlist) {
  delete playlist_;
  playlist_ = playlist;
  if (playlist) {
    set_has_playlist();
  } else {
    clear_has_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.playlist)
}

// optional .ru.mail.go.webbase.blobs.VkMusicUserPrivacy privacy = 3;
bool TrackOrPlaylistOrUserPrivacy::has_privacy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrackOrPlaylistOrUserPrivacy::set_has_privacy() {
  _has_bits_[0] |= 0x00000004u;
}
void TrackOrPlaylistOrUserPrivacy::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrackOrPlaylistOrUserPrivacy::clear_privacy() {
  if (privacy_ != NULL) privacy_->::ru::mail::go::webbase::blobs::VkMusicUserPrivacy::Clear();
  clear_has_privacy();
}
const ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy& TrackOrPlaylistOrUserPrivacy::privacy() const {
  const ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* p = privacy_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.privacy)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy*>(
      &::ru::mail::go::webbase::blobs::_VkMusicUserPrivacy_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* TrackOrPlaylistOrUserPrivacy::mutable_privacy() {
  set_has_privacy();
  if (privacy_ == NULL) {
    privacy_ = new ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.privacy)
  return privacy_;
}
::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* TrackOrPlaylistOrUserPrivacy::release_privacy() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.privacy)
  clear_has_privacy();
  ::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* temp = privacy_;
  privacy_ = NULL;
  return temp;
}
void TrackOrPlaylistOrUserPrivacy::set_allocated_privacy(::ru::mail::go::webbase::blobs::VkMusicUserPrivacy* privacy) {
  delete privacy_;
  privacy_ = privacy;
  if (privacy) {
    set_has_privacy();
  } else {
    clear_has_privacy();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrUserPrivacy.privacy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackOrPlaylistOrListenEvent::kTrackFieldNumber;
const int TrackOrPlaylistOrListenEvent::kListenEventFieldNumber;
const int TrackOrPlaylistOrListenEvent::kPlaylistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackOrPlaylistOrListenEvent::TrackOrPlaylistOrListenEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
}
TrackOrPlaylistOrListenEvent::TrackOrPlaylistOrListenEvent(const TrackOrPlaylistOrListenEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_track()) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack(*from.track_);
  } else {
    track_ = NULL;
  }
  if (from.has_listen_event()) {
    listen_event_ = new ::ru::mail::go::webbase::blobs::VkMusicUserEventListen(*from.listen_event_);
  } else {
    listen_event_ = NULL;
  }
  if (from.has_playlist()) {
    playlist_ = new ::ru::mail::go::webbase::blobs::VkMusicPlaylist(*from.playlist_);
  } else {
    playlist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
}

void TrackOrPlaylistOrListenEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&track_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playlist_) -
      reinterpret_cast<char*>(&track_)) + sizeof(playlist_));
}

TrackOrPlaylistOrListenEvent::~TrackOrPlaylistOrListenEvent() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  SharedDtor();
}

void TrackOrPlaylistOrListenEvent::SharedDtor() {
  if (this != internal_default_instance()) delete track_;
  if (this != internal_default_instance()) delete listen_event_;
  if (this != internal_default_instance()) delete playlist_;
}

void TrackOrPlaylistOrListenEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackOrPlaylistOrListenEvent::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackOrPlaylistOrListenEvent& TrackOrPlaylistOrListenEvent::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrackOrPlaylistOrListenEvent* TrackOrPlaylistOrListenEvent::New(::google::protobuf::Arena* arena) const {
  TrackOrPlaylistOrListenEvent* n = new TrackOrPlaylistOrListenEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackOrPlaylistOrListenEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(track_ != NULL);
      track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(listen_event_ != NULL);
      listen_event_->::ru::mail::go::webbase::blobs::VkMusicUserEventListen::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(playlist_ != NULL);
      playlist_->::ru::mail::go::webbase::blobs::VkMusicPlaylist::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrackOrPlaylistOrListenEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicUserEventListen listen_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listen_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  return false;
#undef DO_
}

void TrackOrPlaylistOrListenEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->track_, output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicUserEventListen listen_event = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->listen_event_, output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->playlist_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
}

::google::protobuf::uint8* TrackOrPlaylistOrListenEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->track_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicUserEventListen listen_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->listen_event_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->playlist_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  return target;
}

size_t TrackOrPlaylistOrListenEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->track_);
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicUserEventListen listen_event = 2;
    if (has_listen_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->listen_event_);
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 3;
    if (has_playlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playlist_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackOrPlaylistOrListenEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackOrPlaylistOrListenEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackOrPlaylistOrListenEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
    MergeFrom(*source);
  }
}

void TrackOrPlaylistOrListenEvent::MergeFrom(const TrackOrPlaylistOrListenEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_track()->::ru::mail::go::webbase::blobs::VkMusicTrack::MergeFrom(from.track());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_listen_event()->::ru::mail::go::webbase::blobs::VkMusicUserEventListen::MergeFrom(from.listen_event());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_playlist()->::ru::mail::go::webbase::blobs::VkMusicPlaylist::MergeFrom(from.playlist());
    }
  }
}

void TrackOrPlaylistOrListenEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackOrPlaylistOrListenEvent::CopyFrom(const TrackOrPlaylistOrListenEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackOrPlaylistOrListenEvent::IsInitialized() const {
  if (has_track()) {
    if (!this->track_->IsInitialized()) return false;
  }
  return true;
}

void TrackOrPlaylistOrListenEvent::Swap(TrackOrPlaylistOrListenEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackOrPlaylistOrListenEvent::InternalSwap(TrackOrPlaylistOrListenEvent* other) {
  using std::swap;
  swap(track_, other->track_);
  swap(listen_event_, other->listen_event_);
  swap(playlist_, other->playlist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackOrPlaylistOrListenEvent::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackOrPlaylistOrListenEvent

// optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 1;
bool TrackOrPlaylistOrListenEvent::has_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackOrPlaylistOrListenEvent::set_has_track() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackOrPlaylistOrListenEvent::clear_has_track() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackOrPlaylistOrListenEvent::clear_track() {
  if (track_ != NULL) track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
  clear_has_track();
}
const ::ru::mail::go::webbase::blobs::VkMusicTrack& TrackOrPlaylistOrListenEvent::track() const {
  const ::ru::mail::go::webbase::blobs::VkMusicTrack* p = track_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.track)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      &::ru::mail::go::webbase::blobs::_VkMusicTrack_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicTrack* TrackOrPlaylistOrListenEvent::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.track)
  return track_;
}
::ru::mail::go::webbase::blobs::VkMusicTrack* TrackOrPlaylistOrListenEvent::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.track)
  clear_has_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* temp = track_;
  track_ = NULL;
  return temp;
}
void TrackOrPlaylistOrListenEvent::set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.track)
}

// optional .ru.mail.go.webbase.blobs.VkMusicUserEventListen listen_event = 2;
bool TrackOrPlaylistOrListenEvent::has_listen_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrackOrPlaylistOrListenEvent::set_has_listen_event() {
  _has_bits_[0] |= 0x00000002u;
}
void TrackOrPlaylistOrListenEvent::clear_has_listen_event() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrackOrPlaylistOrListenEvent::clear_listen_event() {
  if (listen_event_ != NULL) listen_event_->::ru::mail::go::webbase::blobs::VkMusicUserEventListen::Clear();
  clear_has_listen_event();
}
const ::ru::mail::go::webbase::blobs::VkMusicUserEventListen& TrackOrPlaylistOrListenEvent::listen_event() const {
  const ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* p = listen_event_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.listen_event)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicUserEventListen*>(
      &::ru::mail::go::webbase::blobs::_VkMusicUserEventListen_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicUserEventListen* TrackOrPlaylistOrListenEvent::mutable_listen_event() {
  set_has_listen_event();
  if (listen_event_ == NULL) {
    listen_event_ = new ::ru::mail::go::webbase::blobs::VkMusicUserEventListen;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.listen_event)
  return listen_event_;
}
::ru::mail::go::webbase::blobs::VkMusicUserEventListen* TrackOrPlaylistOrListenEvent::release_listen_event() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.listen_event)
  clear_has_listen_event();
  ::ru::mail::go::webbase::blobs::VkMusicUserEventListen* temp = listen_event_;
  listen_event_ = NULL;
  return temp;
}
void TrackOrPlaylistOrListenEvent::set_allocated_listen_event(::ru::mail::go::webbase::blobs::VkMusicUserEventListen* listen_event) {
  delete listen_event_;
  listen_event_ = listen_event;
  if (listen_event) {
    set_has_listen_event();
  } else {
    clear_has_listen_event();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.listen_event)
}

// optional .ru.mail.go.webbase.blobs.VkMusicPlaylist playlist = 3;
bool TrackOrPlaylistOrListenEvent::has_playlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrackOrPlaylistOrListenEvent::set_has_playlist() {
  _has_bits_[0] |= 0x00000004u;
}
void TrackOrPlaylistOrListenEvent::clear_has_playlist() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrackOrPlaylistOrListenEvent::clear_playlist() {
  if (playlist_ != NULL) playlist_->::ru::mail::go::webbase::blobs::VkMusicPlaylist::Clear();
  clear_has_playlist();
}
const ::ru::mail::go::webbase::blobs::VkMusicPlaylist& TrackOrPlaylistOrListenEvent::playlist() const {
  const ::ru::mail::go::webbase::blobs::VkMusicPlaylist* p = playlist_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.playlist)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicPlaylist*>(
      &::ru::mail::go::webbase::blobs::_VkMusicPlaylist_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicPlaylist* TrackOrPlaylistOrListenEvent::mutable_playlist() {
  set_has_playlist();
  if (playlist_ == NULL) {
    playlist_ = new ::ru::mail::go::webbase::blobs::VkMusicPlaylist;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.playlist)
  return playlist_;
}
::ru::mail::go::webbase::blobs::VkMusicPlaylist* TrackOrPlaylistOrListenEvent::release_playlist() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.playlist)
  clear_has_playlist();
  ::ru::mail::go::webbase::blobs::VkMusicPlaylist* temp = playlist_;
  playlist_ = NULL;
  return temp;
}
void TrackOrPlaylistOrListenEvent::set_allocated_playlist(::ru::mail::go::webbase::blobs::VkMusicPlaylist* playlist) {
  delete playlist_;
  playlist_ = playlist;
  if (playlist) {
    set_has_playlist();
  } else {
    clear_has_playlist();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent.playlist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkUserEventHistory::kUserIdFieldNumber;
const int VkUserEventHistory::kHistoryEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkUserEventHistory::VkUserEventHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkUserEventHistory)
}
VkUserEventHistory::VkUserEventHistory(const VkUserEventHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      history_entry_(from.history_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkUserEventHistory)
}

void VkUserEventHistory::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
}

VkUserEventHistory::~VkUserEventHistory() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkUserEventHistory)
  SharedDtor();
}

void VkUserEventHistory::SharedDtor() {
}

void VkUserEventHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkUserEventHistory::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkUserEventHistory& VkUserEventHistory::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkUserEventHistory* VkUserEventHistory::New(::google::protobuf::Arena* arena) const {
  VkUserEventHistory* n = new VkUserEventHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkUserEventHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_entry_.Clear();
  user_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkUserEventHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent history_entry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkUserEventHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkUserEventHistory)
  return false;
#undef DO_
}

void VkUserEventHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent history_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_entry(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkUserEventHistory)
}

::google::protobuf::uint8* VkUserEventHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent history_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_entry_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->history_entry(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkUserEventHistory)
  return target;
}

size_t VkUserEventHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent history_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->history_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_entry(static_cast<int>(i)));
    }
  }

  // optional int64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkUserEventHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const VkUserEventHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkUserEventHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkUserEventHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkUserEventHistory)
    MergeFrom(*source);
  }
}

void VkUserEventHistory::MergeFrom(const VkUserEventHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_entry_.MergeFrom(from.history_entry_);
  if (from.has_user_id()) {
    set_user_id(from.user_id());
  }
}

void VkUserEventHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkUserEventHistory::CopyFrom(const VkUserEventHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkUserEventHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkUserEventHistory::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->history_entry())) return false;
  return true;
}

void VkUserEventHistory::Swap(VkUserEventHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkUserEventHistory::InternalSwap(VkUserEventHistory* other) {
  using std::swap;
  history_entry_.InternalSwap(&other->history_entry_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkUserEventHistory::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkUserEventHistory

// optional int64 user_id = 1;
bool VkUserEventHistory::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkUserEventHistory::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VkUserEventHistory::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkUserEventHistory::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 VkUserEventHistory::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkUserEventHistory.user_id)
  return user_id_;
}
void VkUserEventHistory::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkUserEventHistory.user_id)
}

// repeated .ru.mail.go.webbase.blobs.TrackOrPlaylistOrListenEvent history_entry = 2;
int VkUserEventHistory::history_entry_size() const {
  return history_entry_.size();
}
void VkUserEventHistory::clear_history_entry() {
  history_entry_.Clear();
}
const ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent& VkUserEventHistory::history_entry(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return history_entry_.Get(index);
}
::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent* VkUserEventHistory::mutable_history_entry(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return history_entry_.Mutable(index);
}
::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent* VkUserEventHistory::add_history_entry() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return history_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent >*
VkUserEventHistory::mutable_history_entry() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return &history_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TrackOrPlaylistOrListenEvent >&
VkUserEventHistory::history_entry() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkUserEventHistory.history_entry)
  return history_entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicExtraData::kRemoveUgcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicExtraData::VkMusicExtraData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicExtraData)
}
VkMusicExtraData::VkMusicExtraData(const VkMusicExtraData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remove_ugc_ = from.remove_ugc_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicExtraData)
}

void VkMusicExtraData::SharedCtor() {
  _cached_size_ = 0;
  remove_ugc_ = false;
}

VkMusicExtraData::~VkMusicExtraData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicExtraData)
  SharedDtor();
}

void VkMusicExtraData::SharedDtor() {
}

void VkMusicExtraData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicExtraData::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicExtraData& VkMusicExtraData::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicExtraData* VkMusicExtraData::New(::google::protobuf::Arena* arena) const {
  VkMusicExtraData* n = new VkMusicExtraData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicExtraData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_ugc_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicExtraData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool remove_ugc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_remove_ugc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_ugc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicExtraData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicExtraData)
  return false;
#undef DO_
}

void VkMusicExtraData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove_ugc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->remove_ugc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicExtraData)
}

::google::protobuf::uint8* VkMusicExtraData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove_ugc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->remove_ugc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicExtraData)
  return target;
}

size_t VkMusicExtraData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool remove_ugc = 1;
  if (has_remove_ugc()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicExtraData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicExtraData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicExtraData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicExtraData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicExtraData)
    MergeFrom(*source);
  }
}

void VkMusicExtraData::MergeFrom(const VkMusicExtraData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_remove_ugc()) {
    set_remove_ugc(from.remove_ugc());
  }
}

void VkMusicExtraData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicExtraData::CopyFrom(const VkMusicExtraData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicExtraData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicExtraData::IsInitialized() const {
  return true;
}

void VkMusicExtraData::Swap(VkMusicExtraData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicExtraData::InternalSwap(VkMusicExtraData* other) {
  using std::swap;
  swap(remove_ugc_, other->remove_ugc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicExtraData::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicExtraData

// optional bool remove_ugc = 1;
bool VkMusicExtraData::has_remove_ugc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicExtraData::set_has_remove_ugc() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicExtraData::clear_has_remove_ugc() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicExtraData::clear_remove_ugc() {
  remove_ugc_ = false;
  clear_has_remove_ugc();
}
bool VkMusicExtraData::remove_ugc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicExtraData.remove_ugc)
  return remove_ugc_;
}
void VkMusicExtraData::set_remove_ugc(bool value) {
  set_has_remove_ugc();
  remove_ugc_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicExtraData.remove_ugc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicEvent::kTimeFieldNumber;
const int VkMusicEvent::kPositionFieldNumber;
const int VkMusicEvent::kTypeFieldNumber;
const int VkMusicEvent::kDurationFieldNumber;
const int VkMusicEvent::kUidFieldNumber;
const int VkMusicEvent::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicEvent::VkMusicEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicEvent)
}
VkMusicEvent::VkMusicEvent(const VkMusicEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra()) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicEvent)
}

void VkMusicEvent::SharedCtor() {
  _cached_size_ = 0;
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&time_)) + sizeof(uid_));
  type_ = 1;
}

VkMusicEvent::~VkMusicEvent() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicEvent)
  SharedDtor();
}

void VkMusicEvent::SharedDtor() {
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicEvent::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicEvent& VkMusicEvent::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicEvent* VkMusicEvent::New(::google::protobuf::Arena* arena) const {
  VkMusicEvent* n = new VkMusicEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_extra()) {
    GOOGLE_DCHECK(!extra_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*extra_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&time_)) + sizeof(uid_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicEventType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkMusicEventType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::VkMusicEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extra = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra().data(), static_cast<int>(this->extra().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicEvent.extra");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicEvent)
  return false;
#undef DO_
}

void VkMusicEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicEventType type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }

  // optional uint64 uid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uid(), output);
  }

  // optional string extra = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicEvent.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->extra(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicEvent)
}

::google::protobuf::uint8* VkMusicEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicEventType type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }

  // optional uint64 uid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uid(), target);
  }

  // optional string extra = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicEvent.extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->extra(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicEvent)
  return target;
}

size_t VkMusicEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string extra = 6;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

    // optional uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 duration = 4;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint64 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicEventType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicEvent)
    MergeFrom(*source);
  }
}

void VkMusicEvent::MergeFrom(const VkMusicEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extra();
      extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicEvent::CopyFrom(const VkMusicEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicEvent::IsInitialized() const {
  return true;
}

void VkMusicEvent::Swap(VkMusicEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicEvent::InternalSwap(VkMusicEvent* other) {
  using std::swap;
  extra_.Swap(&other->extra_);
  swap(time_, other->time_);
  swap(position_, other->position_);
  swap(duration_, other->duration_);
  swap(uid_, other->uid_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicEvent::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicEvent

// optional uint64 time = 1;
bool VkMusicEvent::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicEvent::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicEvent::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 VkMusicEvent::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.time)
  return time_;
}
void VkMusicEvent::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.time)
}

// optional uint32 position = 2;
bool VkMusicEvent::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicEvent::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicEvent::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicEvent::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 VkMusicEvent::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.position)
  return position_;
}
void VkMusicEvent::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.position)
}

// optional .ru.mail.go.webbase.blobs.VkMusicEventType type = 3;
bool VkMusicEvent::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkMusicEvent::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void VkMusicEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkMusicEvent::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::VkMusicEventType VkMusicEvent::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.type)
  return static_cast< ::ru::mail::go::webbase::blobs::VkMusicEventType >(type_);
}
void VkMusicEvent::set_type(::ru::mail::go::webbase::blobs::VkMusicEventType value) {
  assert(::ru::mail::go::webbase::blobs::VkMusicEventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.type)
}

// optional uint32 duration = 4;
bool VkMusicEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicEvent::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 VkMusicEvent::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.duration)
  return duration_;
}
void VkMusicEvent::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.duration)
}

// optional uint64 uid = 5;
bool VkMusicEvent::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicEvent::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicEvent::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicEvent::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 VkMusicEvent::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.uid)
  return uid_;
}
void VkMusicEvent::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.uid)
}

// optional string extra = 6;
bool VkMusicEvent::has_extra() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicEvent::set_has_extra() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicEvent::clear_has_extra() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicEvent::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
const ::std::string& VkMusicEvent::extra() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
  return extra_.GetNoArena();
}
void VkMusicEvent::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}
#if LANG_CXX11
void VkMusicEvent::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}
#endif
void VkMusicEvent::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}
void VkMusicEvent::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}
::std::string* VkMusicEvent::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicEvent::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicEvent::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicEvent.extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionOrVkMusicEvent::kSessionFieldNumber;
const int SessionOrVkMusicEvent::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionOrVkMusicEvent::SessionOrVkMusicEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
}
SessionOrVkMusicEvent::SessionOrVkMusicEvent(const SessionOrVkMusicEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session()) {
    session_ = new ::ru::mail::go::webbase::blobs::VkMusicSession(*from.session_);
  } else {
    session_ = NULL;
  }
  if (from.has_event()) {
    event_ = new ::ru::mail::go::webbase::blobs::VkMusicEvent(*from.event_);
  } else {
    event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
}

void SessionOrVkMusicEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&session_)) + sizeof(event_));
}

SessionOrVkMusicEvent::~SessionOrVkMusicEvent() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  SharedDtor();
}

void SessionOrVkMusicEvent::SharedDtor() {
  if (this != internal_default_instance()) delete session_;
  if (this != internal_default_instance()) delete event_;
}

void SessionOrVkMusicEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionOrVkMusicEvent::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionOrVkMusicEvent& SessionOrVkMusicEvent::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionOrVkMusicEvent* SessionOrVkMusicEvent::New(::google::protobuf::Arena* arena) const {
  SessionOrVkMusicEvent* n = new SessionOrVkMusicEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionOrVkMusicEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(session_ != NULL);
      session_->::ru::mail::go::webbase::blobs::VkMusicSession::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(event_ != NULL);
      event_->::ru::mail::go::webbase::blobs::VkMusicEvent::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionOrVkMusicEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.VkMusicSession session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicEvent event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  return false;
#undef DO_
}

void SessionOrVkMusicEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicSession session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->session_, output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicEvent event = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->event_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
}

::google::protobuf::uint8* SessionOrVkMusicEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicSession session = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->session_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicEvent event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->event_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  return target;
}

size_t SessionOrVkMusicEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ru.mail.go.webbase.blobs.VkMusicSession session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->session_);
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicEvent event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->event_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionOrVkMusicEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionOrVkMusicEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionOrVkMusicEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
    MergeFrom(*source);
  }
}

void SessionOrVkMusicEvent::MergeFrom(const SessionOrVkMusicEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_session()->::ru::mail::go::webbase::blobs::VkMusicSession::MergeFrom(from.session());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_event()->::ru::mail::go::webbase::blobs::VkMusicEvent::MergeFrom(from.event());
    }
  }
}

void SessionOrVkMusicEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionOrVkMusicEvent::CopyFrom(const SessionOrVkMusicEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionOrVkMusicEvent::IsInitialized() const {
  return true;
}

void SessionOrVkMusicEvent::Swap(SessionOrVkMusicEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionOrVkMusicEvent::InternalSwap(SessionOrVkMusicEvent* other) {
  using std::swap;
  swap(session_, other->session_);
  swap(event_, other->event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionOrVkMusicEvent::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionOrVkMusicEvent

// optional .ru.mail.go.webbase.blobs.VkMusicSession session = 1;
bool SessionOrVkMusicEvent::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionOrVkMusicEvent::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionOrVkMusicEvent::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionOrVkMusicEvent::clear_session() {
  if (session_ != NULL) session_->::ru::mail::go::webbase::blobs::VkMusicSession::Clear();
  clear_has_session();
}
const ::ru::mail::go::webbase::blobs::VkMusicSession& SessionOrVkMusicEvent::session() const {
  const ::ru::mail::go::webbase::blobs::VkMusicSession* p = session_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.session)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicSession*>(
      &::ru::mail::go::webbase::blobs::_VkMusicSession_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicSession* SessionOrVkMusicEvent::mutable_session() {
  set_has_session();
  if (session_ == NULL) {
    session_ = new ::ru::mail::go::webbase::blobs::VkMusicSession;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.session)
  return session_;
}
::ru::mail::go::webbase::blobs::VkMusicSession* SessionOrVkMusicEvent::release_session() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.session)
  clear_has_session();
  ::ru::mail::go::webbase::blobs::VkMusicSession* temp = session_;
  session_ = NULL;
  return temp;
}
void SessionOrVkMusicEvent::set_allocated_session(::ru::mail::go::webbase::blobs::VkMusicSession* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.session)
}

// optional .ru.mail.go.webbase.blobs.VkMusicEvent event = 2;
bool SessionOrVkMusicEvent::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionOrVkMusicEvent::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionOrVkMusicEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionOrVkMusicEvent::clear_event() {
  if (event_ != NULL) event_->::ru::mail::go::webbase::blobs::VkMusicEvent::Clear();
  clear_has_event();
}
const ::ru::mail::go::webbase::blobs::VkMusicEvent& SessionOrVkMusicEvent::event() const {
  const ::ru::mail::go::webbase::blobs::VkMusicEvent* p = event_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.event)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicEvent*>(
      &::ru::mail::go::webbase::blobs::_VkMusicEvent_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicEvent* SessionOrVkMusicEvent::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    event_ = new ::ru::mail::go::webbase::blobs::VkMusicEvent;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.event)
  return event_;
}
::ru::mail::go::webbase::blobs::VkMusicEvent* SessionOrVkMusicEvent::release_event() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.event)
  clear_has_event();
  ::ru::mail::go::webbase::blobs::VkMusicEvent* temp = event_;
  event_ = NULL;
  return temp;
}
void SessionOrVkMusicEvent::set_allocated_event(::ru::mail::go::webbase::blobs::VkMusicEvent* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SessionOrVkMusicEvent.event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicSpellcheckerResponse::kTypeFieldNumber;
const int VkMusicSpellcheckerResponse::kFixedQueryFieldNumber;
const int VkMusicSpellcheckerResponse::kAppliedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicSpellcheckerResponse::VkMusicSpellcheckerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
}
VkMusicSpellcheckerResponse::VkMusicSpellcheckerResponse(const VkMusicSpellcheckerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fixed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fixed_query()) {
    fixed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fixed_query_);
  }
  ::memcpy(&applied_, &from.applied_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&applied_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
}

void VkMusicSpellcheckerResponse::SharedCtor() {
  _cached_size_ = 0;
  fixed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applied_ = false;
  type_ = 1;
}

VkMusicSpellcheckerResponse::~VkMusicSpellcheckerResponse() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  SharedDtor();
}

void VkMusicSpellcheckerResponse::SharedDtor() {
  fixed_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicSpellcheckerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicSpellcheckerResponse::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicSpellcheckerResponse& VkMusicSpellcheckerResponse::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicSpellcheckerResponse* VkMusicSpellcheckerResponse::New(::google::protobuf::Arena* arena) const {
  VkMusicSpellcheckerResponse* n = new VkMusicSpellcheckerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicSpellcheckerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_fixed_query()) {
    GOOGLE_DCHECK(!fixed_query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*fixed_query_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    applied_ = false;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicSpellcheckerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fixed_query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fixed_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fixed_query().data(), static_cast<int>(this->fixed_query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool applied = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_applied();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  return false;
#undef DO_
}

void VkMusicSpellcheckerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string fixed_query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fixed_query().data(), static_cast<int>(this->fixed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fixed_query(), output);
  }

  // optional bool applied = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->applied(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
}

::google::protobuf::uint8* VkMusicSpellcheckerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string fixed_query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fixed_query().data(), static_cast<int>(this->fixed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fixed_query(), target);
  }

  // optional bool applied = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->applied(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  return target;
}

size_t VkMusicSpellcheckerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string fixed_query = 2;
    if (has_fixed_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fixed_query());
    }

    // optional bool applied = 3;
    if (has_applied()) {
      total_size += 1 + 1;
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicSpellcheckerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicSpellcheckerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicSpellcheckerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
    MergeFrom(*source);
  }
}

void VkMusicSpellcheckerResponse::MergeFrom(const VkMusicSpellcheckerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fixed_query();
      fixed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fixed_query_);
    }
    if (cached_has_bits & 0x00000002u) {
      applied_ = from.applied_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicSpellcheckerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicSpellcheckerResponse::CopyFrom(const VkMusicSpellcheckerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicSpellcheckerResponse::IsInitialized() const {
  return true;
}

void VkMusicSpellcheckerResponse::Swap(VkMusicSpellcheckerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicSpellcheckerResponse::InternalSwap(VkMusicSpellcheckerResponse* other) {
  using std::swap;
  fixed_query_.Swap(&other->fixed_query_);
  swap(applied_, other->applied_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicSpellcheckerResponse::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicSpellcheckerResponse

// optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.Type type = 1;
bool VkMusicSpellcheckerResponse::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicSpellcheckerResponse::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicSpellcheckerResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicSpellcheckerResponse::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type VkMusicSpellcheckerResponse::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.type)
  return static_cast< ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type >(type_);
}
void VkMusicSpellcheckerResponse::set_type(::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type value) {
  assert(::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.type)
}

// optional string fixed_query = 2;
bool VkMusicSpellcheckerResponse::has_fixed_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicSpellcheckerResponse::set_has_fixed_query() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicSpellcheckerResponse::clear_has_fixed_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicSpellcheckerResponse::clear_fixed_query() {
  fixed_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fixed_query();
}
const ::std::string& VkMusicSpellcheckerResponse::fixed_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
  return fixed_query_.GetNoArena();
}
void VkMusicSpellcheckerResponse::set_fixed_query(const ::std::string& value) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}
#if LANG_CXX11
void VkMusicSpellcheckerResponse::set_fixed_query(::std::string&& value) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}
#endif
void VkMusicSpellcheckerResponse::set_fixed_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}
void VkMusicSpellcheckerResponse::set_fixed_query(const char* value, size_t size) {
  set_has_fixed_query();
  fixed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}
::std::string* VkMusicSpellcheckerResponse::mutable_fixed_query() {
  set_has_fixed_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
  return fixed_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicSpellcheckerResponse::release_fixed_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
  clear_has_fixed_query();
  return fixed_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicSpellcheckerResponse::set_allocated_fixed_query(::std::string* fixed_query) {
  if (fixed_query != NULL) {
    set_has_fixed_query();
  } else {
    clear_has_fixed_query();
  }
  fixed_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fixed_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.fixed_query)
}

// optional bool applied = 3;
bool VkMusicSpellcheckerResponse::has_applied() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicSpellcheckerResponse::set_has_applied() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicSpellcheckerResponse::clear_has_applied() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicSpellcheckerResponse::clear_applied() {
  applied_ = false;
  clear_has_applied();
}
bool VkMusicSpellcheckerResponse::applied() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.applied)
  return applied_;
}
void VkMusicSpellcheckerResponse::set_applied(bool value) {
  set_has_applied();
  applied_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse.applied)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicSession::kQueryFieldNumber;
const int VkMusicSession::kUidFieldNumber;
const int VkMusicSession::kTimeFieldNumber;
const int VkMusicSession::kEventsFieldNumber;
const int VkMusicSession::kItemsFieldNumber;
const int VkMusicSession::kTypeFieldNumber;
const int VkMusicSession::kSplitFieldNumber;
const int VkMusicSession::kQidFieldNumber;
const int VkMusicSession::kItemsNumFieldNumber;
const int VkMusicSession::kOfficialTracksNumFieldNumber;
const int VkMusicSession::kVkQidFieldNumber;
const int VkMusicSession::kReplyQualityFieldNumber;
const int VkMusicSession::kQueryClassFieldNumber;
const int VkMusicSession::kAsEventsFoundFieldNumber;
const int VkMusicSession::kFavouriteTracksFieldNumber;
const int VkMusicSession::kFavouriteTracksBoostedFieldNumber;
const int VkMusicSession::kQddbSessionsNumLog2FieldNumber;
const int VkMusicSession::kClientFieldNumber;
const int VkMusicSession::kSpellcheckerResponseFieldNumber;
const int VkMusicSession::kUserAgeFieldNumber;
const int VkMusicSession::kUserSexFieldNumber;
const int VkMusicSession::kRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicSession::VkMusicSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicSession)
}
VkMusicSession::VkMusicSession(const VkMusicSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      events_(from.events_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qid()) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  query_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_class()) {
    query_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_class_);
  }
  client_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client()) {
    client_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_);
  }
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ref()) {
    ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  if (from.has_spellchecker_response()) {
    spellchecker_response_ = new ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse(*from.spellchecker_response_);
  } else {
    spellchecker_response_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_sex_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(user_sex_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicSession)
}

void VkMusicSession::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&spellchecker_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_age_) -
      reinterpret_cast<char*>(&spellchecker_response_)) + sizeof(user_age_));
  type_ = 1;
  user_sex_ = 1;
}

VkMusicSession::~VkMusicSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicSession)
  SharedDtor();
}

void VkMusicSession::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spellchecker_response_;
}

void VkMusicSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicSession::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicSession& VkMusicSession::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicSession* VkMusicSession::New(::google::protobuf::Arena* arena) const {
  VkMusicSession* n = new VkMusicSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!qid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!query_class_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_class_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!client_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!ref_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ref_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(spellchecker_response_ != NULL);
      spellchecker_response_->::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(time_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&items_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&favourite_tracks_) -
        reinterpret_cast<char*>(&items_num_)) + sizeof(favourite_tracks_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&favourite_tracks_boosted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_age_) -
        reinterpret_cast<char*>(&favourite_tracks_boosted_)) + sizeof(user_age_));
    type_ = 1;
    user_sex_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicSession.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VkMusicEvent events = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string items = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->items(this->items_size() - 1).data(),
            static_cast<int>(this->items(this->items_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicSession.items");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicSessionType type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkMusicSessionType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::VkMusicSessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 split = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_split();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string qid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicSession.qid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 items_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_items_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &items_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 official_tracks_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_official_tracks_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &official_tracks_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 vk_qid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_vk_qid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vk_qid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reply_quality = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_reply_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reply_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_class = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_class().data(), static_cast<int>(this->query_class().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicSession.query_class");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 as_events_found = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_as_events_found();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &as_events_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 favourite_tracks = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_favourite_tracks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &favourite_tracks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 favourite_tracks_boosted = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_favourite_tracks_boosted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &favourite_tracks_boosted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 qddb_sessions_num_log2 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_qddb_sessions_num_log2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qddb_sessions_num_log2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client().data(), static_cast<int>(this->client().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicSession.client");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse spellchecker_response = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spellchecker_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_age = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_user_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicSession.Sex user_sex = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkMusicSession_Sex_IsValid(value)) {
            set_user_sex(static_cast< ::ru::mail::go::webbase::blobs::VkMusicSession_Sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ref = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref().data(), static_cast<int>(this->ref().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicSession.ref");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicSession)
  return false;
#undef DO_
}

void VkMusicSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // optional uint64 uid = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VkMusicEvent events = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->events(static_cast<int>(i)), output);
  }

  // repeated string items = 5;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items(i).data(), static_cast<int>(this->items(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.items");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->items(i), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicSessionType type = 6;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional uint32 split = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->split(), output);
  }

  // optional string qid = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->qid(), output);
  }

  // optional uint64 items_num = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->items_num(), output);
  }

  // optional uint64 official_tracks_num = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->official_tracks_num(), output);
  }

  // optional int64 vk_qid = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->vk_qid(), output);
  }

  // optional double reply_quality = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->reply_quality(), output);
  }

  // optional string query_class = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_class().data(), static_cast<int>(this->query_class().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.query_class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->query_class(), output);
  }

  // optional int64 as_events_found = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->as_events_found(), output);
  }

  // optional int64 favourite_tracks = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->favourite_tracks(), output);
  }

  // optional int64 favourite_tracks_boosted = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->favourite_tracks_boosted(), output);
  }

  // optional uint32 qddb_sessions_num_log2 = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->qddb_sessions_num_log2(), output);
  }

  // optional string client = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client().data(), static_cast<int>(this->client().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.client");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->client(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse spellchecker_response = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->spellchecker_response_, output);
  }

  // optional uint32 user_age = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->user_age(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicSession.Sex user_sex = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->user_sex(), output);
  }

  // optional string ref = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->ref(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicSession)
}

::google::protobuf::uint8* VkMusicSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // optional uint64 uid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.VkMusicEvent events = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->events(static_cast<int>(i)), deterministic, target);
  }

  // repeated string items = 5;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items(i).data(), static_cast<int>(this->items(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.items");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->items(i), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicSessionType type = 6;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional uint32 split = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->split(), target);
  }

  // optional string qid = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->qid(), target);
  }

  // optional uint64 items_num = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->items_num(), target);
  }

  // optional uint64 official_tracks_num = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->official_tracks_num(), target);
  }

  // optional int64 vk_qid = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->vk_qid(), target);
  }

  // optional double reply_quality = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->reply_quality(), target);
  }

  // optional string query_class = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_class().data(), static_cast<int>(this->query_class().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.query_class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->query_class(), target);
  }

  // optional int64 as_events_found = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->as_events_found(), target);
  }

  // optional int64 favourite_tracks = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->favourite_tracks(), target);
  }

  // optional int64 favourite_tracks_boosted = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->favourite_tracks_boosted(), target);
  }

  // optional uint32 qddb_sessions_num_log2 = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->qddb_sessions_num_log2(), target);
  }

  // optional string client = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client().data(), static_cast<int>(this->client().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.client");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->client(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse spellchecker_response = 19;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->spellchecker_response_, deterministic, target);
  }

  // optional uint32 user_age = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->user_age(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicSession.Sex user_sex = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->user_sex(), target);
  }

  // optional string ref = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicSession.ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->ref(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicSession)
  return target;
}

size_t VkMusicSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VkMusicEvent events = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated string items = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->items_size());
  for (int i = 0, n = this->items_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->items(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string qid = 8;
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qid());
    }

    // optional string query_class = 13;
    if (has_query_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_class());
    }

    // optional string client = 18;
    if (has_client()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client());
    }

    // optional string ref = 22;
    if (has_ref()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse spellchecker_response = 19;
    if (has_spellchecker_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spellchecker_response_);
    }

    // optional uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 items_num = 9;
    if (has_items_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->items_num());
    }

    // optional uint64 official_tracks_num = 10;
    if (has_official_tracks_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->official_tracks_num());
    }

    // optional int64 vk_qid = 11;
    if (has_vk_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vk_qid());
    }

    // optional double reply_quality = 12;
    if (has_reply_quality()) {
      total_size += 1 + 8;
    }

    // optional uint32 split = 7;
    if (has_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->split());
    }

    // optional uint32 qddb_sessions_num_log2 = 17;
    if (has_qddb_sessions_num_log2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qddb_sessions_num_log2());
    }

    // optional int64 as_events_found = 14;
    if (has_as_events_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->as_events_found());
    }

    // optional int64 favourite_tracks = 15;
    if (has_favourite_tracks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->favourite_tracks());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional int64 favourite_tracks_boosted = 16;
    if (has_favourite_tracks_boosted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->favourite_tracks_boosted());
    }

    // optional uint32 user_age = 20;
    if (has_user_age()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_age());
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicSessionType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicSession.Sex user_sex = 21;
    if (has_user_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_sex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicSession)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicSession)
    MergeFrom(*source);
  }
}

void VkMusicSession::MergeFrom(const VkMusicSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_qid();
      qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_query_class();
      query_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_class_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_client();
      client_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_ref();
      ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_spellchecker_response()->::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse::MergeFrom(from.spellchecker_response());
    }
    if (cached_has_bits & 0x00000040u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      items_num_ = from.items_num_;
    }
    if (cached_has_bits & 0x00000200u) {
      official_tracks_num_ = from.official_tracks_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      vk_qid_ = from.vk_qid_;
    }
    if (cached_has_bits & 0x00000800u) {
      reply_quality_ = from.reply_quality_;
    }
    if (cached_has_bits & 0x00001000u) {
      split_ = from.split_;
    }
    if (cached_has_bits & 0x00002000u) {
      qddb_sessions_num_log2_ = from.qddb_sessions_num_log2_;
    }
    if (cached_has_bits & 0x00004000u) {
      as_events_found_ = from.as_events_found_;
    }
    if (cached_has_bits & 0x00008000u) {
      favourite_tracks_ = from.favourite_tracks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      favourite_tracks_boosted_ = from.favourite_tracks_boosted_;
    }
    if (cached_has_bits & 0x00020000u) {
      user_age_ = from.user_age_;
    }
    if (cached_has_bits & 0x00040000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00080000u) {
      user_sex_ = from.user_sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicSession::CopyFrom(const VkMusicSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicSession::IsInitialized() const {
  return true;
}

void VkMusicSession::Swap(VkMusicSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicSession::InternalSwap(VkMusicSession* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  items_.InternalSwap(&other->items_);
  query_.Swap(&other->query_);
  qid_.Swap(&other->qid_);
  query_class_.Swap(&other->query_class_);
  client_.Swap(&other->client_);
  ref_.Swap(&other->ref_);
  swap(spellchecker_response_, other->spellchecker_response_);
  swap(uid_, other->uid_);
  swap(time_, other->time_);
  swap(items_num_, other->items_num_);
  swap(official_tracks_num_, other->official_tracks_num_);
  swap(vk_qid_, other->vk_qid_);
  swap(reply_quality_, other->reply_quality_);
  swap(split_, other->split_);
  swap(qddb_sessions_num_log2_, other->qddb_sessions_num_log2_);
  swap(as_events_found_, other->as_events_found_);
  swap(favourite_tracks_, other->favourite_tracks_);
  swap(favourite_tracks_boosted_, other->favourite_tracks_boosted_);
  swap(user_age_, other->user_age_);
  swap(type_, other->type_);
  swap(user_sex_, other->user_sex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicSession::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicSession

// optional string query = 1;
bool VkMusicSession::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicSession::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicSession::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicSession::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& VkMusicSession::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.query)
  return query_.GetNoArena();
}
void VkMusicSession::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.query)
}
#if LANG_CXX11
void VkMusicSession::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.query)
}
#endif
void VkMusicSession::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.query)
}
void VkMusicSession::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.query)
}
::std::string* VkMusicSession::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicSession::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicSession::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.query)
}

// optional uint64 uid = 2;
bool VkMusicSession::has_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkMusicSession::set_has_uid() {
  _has_bits_[0] |= 0x00000040u;
}
void VkMusicSession::clear_has_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkMusicSession::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 VkMusicSession::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.uid)
  return uid_;
}
void VkMusicSession::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.uid)
}

// optional uint64 time = 3;
bool VkMusicSession::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkMusicSession::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
void VkMusicSession::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkMusicSession::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 VkMusicSession::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.time)
  return time_;
}
void VkMusicSession::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.time)
}

// repeated .ru.mail.go.webbase.blobs.VkMusicEvent events = 4;
int VkMusicSession::events_size() const {
  return events_.size();
}
void VkMusicSession::clear_events() {
  events_.Clear();
}
const ::ru::mail::go::webbase::blobs::VkMusicEvent& VkMusicSession::events(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return events_.Get(index);
}
::ru::mail::go::webbase::blobs::VkMusicEvent* VkMusicSession::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return events_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VkMusicEvent* VkMusicSession::add_events() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicEvent >*
VkMusicSession::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicEvent >&
VkMusicSession::events() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicSession.events)
  return events_;
}

// repeated string items = 5;
int VkMusicSession::items_size() const {
  return items_.size();
}
void VkMusicSession::clear_items() {
  items_.Clear();
}
const ::std::string& VkMusicSession::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return items_.Get(index);
}
::std::string* VkMusicSession::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return items_.Mutable(index);
}
void VkMusicSession::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.items)
  items_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicSession::set_items(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.items)
  items_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicSession::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
void VkMusicSession::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
::std::string* VkMusicSession::add_items() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return items_.Add();
}
void VkMusicSession::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
#if LANG_CXX11
void VkMusicSession::add_items(::std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
#endif
void VkMusicSession::add_items(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
void VkMusicSession::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicSession.items)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicSession::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return items_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicSession::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicSession.items)
  return &items_;
}

// optional .ru.mail.go.webbase.blobs.VkMusicSessionType type = 6;
bool VkMusicSession::has_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VkMusicSession::set_has_type() {
  _has_bits_[0] |= 0x00040000u;
}
void VkMusicSession::clear_has_type() {
  _has_bits_[0] &= ~0x00040000u;
}
void VkMusicSession::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::VkMusicSessionType VkMusicSession::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.type)
  return static_cast< ::ru::mail::go::webbase::blobs::VkMusicSessionType >(type_);
}
void VkMusicSession::set_type(::ru::mail::go::webbase::blobs::VkMusicSessionType value) {
  assert(::ru::mail::go::webbase::blobs::VkMusicSessionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.type)
}

// optional uint32 split = 7;
bool VkMusicSession::has_split() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VkMusicSession::set_has_split() {
  _has_bits_[0] |= 0x00001000u;
}
void VkMusicSession::clear_has_split() {
  _has_bits_[0] &= ~0x00001000u;
}
void VkMusicSession::clear_split() {
  split_ = 0u;
  clear_has_split();
}
::google::protobuf::uint32 VkMusicSession::split() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.split)
  return split_;
}
void VkMusicSession::set_split(::google::protobuf::uint32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.split)
}

// optional string qid = 8;
bool VkMusicSession::has_qid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicSession::set_has_qid() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicSession::clear_has_qid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicSession::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
const ::std::string& VkMusicSession::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.qid)
  return qid_.GetNoArena();
}
void VkMusicSession::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}
#if LANG_CXX11
void VkMusicSession::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}
#endif
void VkMusicSession::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}
void VkMusicSession::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}
::std::string* VkMusicSession::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicSession::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicSession::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.qid)
}

// optional uint64 items_num = 9;
bool VkMusicSession::has_items_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VkMusicSession::set_has_items_num() {
  _has_bits_[0] |= 0x00000100u;
}
void VkMusicSession::clear_has_items_num() {
  _has_bits_[0] &= ~0x00000100u;
}
void VkMusicSession::clear_items_num() {
  items_num_ = GOOGLE_ULONGLONG(0);
  clear_has_items_num();
}
::google::protobuf::uint64 VkMusicSession::items_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.items_num)
  return items_num_;
}
void VkMusicSession::set_items_num(::google::protobuf::uint64 value) {
  set_has_items_num();
  items_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.items_num)
}

// optional uint64 official_tracks_num = 10;
bool VkMusicSession::has_official_tracks_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VkMusicSession::set_has_official_tracks_num() {
  _has_bits_[0] |= 0x00000200u;
}
void VkMusicSession::clear_has_official_tracks_num() {
  _has_bits_[0] &= ~0x00000200u;
}
void VkMusicSession::clear_official_tracks_num() {
  official_tracks_num_ = GOOGLE_ULONGLONG(0);
  clear_has_official_tracks_num();
}
::google::protobuf::uint64 VkMusicSession::official_tracks_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.official_tracks_num)
  return official_tracks_num_;
}
void VkMusicSession::set_official_tracks_num(::google::protobuf::uint64 value) {
  set_has_official_tracks_num();
  official_tracks_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.official_tracks_num)
}

// optional int64 vk_qid = 11;
bool VkMusicSession::has_vk_qid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VkMusicSession::set_has_vk_qid() {
  _has_bits_[0] |= 0x00000400u;
}
void VkMusicSession::clear_has_vk_qid() {
  _has_bits_[0] &= ~0x00000400u;
}
void VkMusicSession::clear_vk_qid() {
  vk_qid_ = GOOGLE_LONGLONG(0);
  clear_has_vk_qid();
}
::google::protobuf::int64 VkMusicSession::vk_qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.vk_qid)
  return vk_qid_;
}
void VkMusicSession::set_vk_qid(::google::protobuf::int64 value) {
  set_has_vk_qid();
  vk_qid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.vk_qid)
}

// optional double reply_quality = 12;
bool VkMusicSession::has_reply_quality() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VkMusicSession::set_has_reply_quality() {
  _has_bits_[0] |= 0x00000800u;
}
void VkMusicSession::clear_has_reply_quality() {
  _has_bits_[0] &= ~0x00000800u;
}
void VkMusicSession::clear_reply_quality() {
  reply_quality_ = 0;
  clear_has_reply_quality();
}
double VkMusicSession::reply_quality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.reply_quality)
  return reply_quality_;
}
void VkMusicSession::set_reply_quality(double value) {
  set_has_reply_quality();
  reply_quality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.reply_quality)
}

// optional string query_class = 13;
bool VkMusicSession::has_query_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicSession::set_has_query_class() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicSession::clear_has_query_class() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicSession::clear_query_class() {
  query_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_class();
}
const ::std::string& VkMusicSession::query_class() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
  return query_class_.GetNoArena();
}
void VkMusicSession::set_query_class(const ::std::string& value) {
  set_has_query_class();
  query_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}
#if LANG_CXX11
void VkMusicSession::set_query_class(::std::string&& value) {
  set_has_query_class();
  query_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}
#endif
void VkMusicSession::set_query_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_class();
  query_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}
void VkMusicSession::set_query_class(const char* value, size_t size) {
  set_has_query_class();
  query_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}
::std::string* VkMusicSession::mutable_query_class() {
  set_has_query_class();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
  return query_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicSession::release_query_class() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
  clear_has_query_class();
  return query_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicSession::set_allocated_query_class(::std::string* query_class) {
  if (query_class != NULL) {
    set_has_query_class();
  } else {
    clear_has_query_class();
  }
  query_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_class);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.query_class)
}

// optional int64 as_events_found = 14;
bool VkMusicSession::has_as_events_found() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VkMusicSession::set_has_as_events_found() {
  _has_bits_[0] |= 0x00004000u;
}
void VkMusicSession::clear_has_as_events_found() {
  _has_bits_[0] &= ~0x00004000u;
}
void VkMusicSession::clear_as_events_found() {
  as_events_found_ = GOOGLE_LONGLONG(0);
  clear_has_as_events_found();
}
::google::protobuf::int64 VkMusicSession::as_events_found() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.as_events_found)
  return as_events_found_;
}
void VkMusicSession::set_as_events_found(::google::protobuf::int64 value) {
  set_has_as_events_found();
  as_events_found_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.as_events_found)
}

// optional int64 favourite_tracks = 15;
bool VkMusicSession::has_favourite_tracks() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VkMusicSession::set_has_favourite_tracks() {
  _has_bits_[0] |= 0x00008000u;
}
void VkMusicSession::clear_has_favourite_tracks() {
  _has_bits_[0] &= ~0x00008000u;
}
void VkMusicSession::clear_favourite_tracks() {
  favourite_tracks_ = GOOGLE_LONGLONG(0);
  clear_has_favourite_tracks();
}
::google::protobuf::int64 VkMusicSession::favourite_tracks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.favourite_tracks)
  return favourite_tracks_;
}
void VkMusicSession::set_favourite_tracks(::google::protobuf::int64 value) {
  set_has_favourite_tracks();
  favourite_tracks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.favourite_tracks)
}

// optional int64 favourite_tracks_boosted = 16;
bool VkMusicSession::has_favourite_tracks_boosted() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VkMusicSession::set_has_favourite_tracks_boosted() {
  _has_bits_[0] |= 0x00010000u;
}
void VkMusicSession::clear_has_favourite_tracks_boosted() {
  _has_bits_[0] &= ~0x00010000u;
}
void VkMusicSession::clear_favourite_tracks_boosted() {
  favourite_tracks_boosted_ = GOOGLE_LONGLONG(0);
  clear_has_favourite_tracks_boosted();
}
::google::protobuf::int64 VkMusicSession::favourite_tracks_boosted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.favourite_tracks_boosted)
  return favourite_tracks_boosted_;
}
void VkMusicSession::set_favourite_tracks_boosted(::google::protobuf::int64 value) {
  set_has_favourite_tracks_boosted();
  favourite_tracks_boosted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.favourite_tracks_boosted)
}

// optional uint32 qddb_sessions_num_log2 = 17;
bool VkMusicSession::has_qddb_sessions_num_log2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VkMusicSession::set_has_qddb_sessions_num_log2() {
  _has_bits_[0] |= 0x00002000u;
}
void VkMusicSession::clear_has_qddb_sessions_num_log2() {
  _has_bits_[0] &= ~0x00002000u;
}
void VkMusicSession::clear_qddb_sessions_num_log2() {
  qddb_sessions_num_log2_ = 0u;
  clear_has_qddb_sessions_num_log2();
}
::google::protobuf::uint32 VkMusicSession::qddb_sessions_num_log2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.qddb_sessions_num_log2)
  return qddb_sessions_num_log2_;
}
void VkMusicSession::set_qddb_sessions_num_log2(::google::protobuf::uint32 value) {
  set_has_qddb_sessions_num_log2();
  qddb_sessions_num_log2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.qddb_sessions_num_log2)
}

// optional string client = 18;
bool VkMusicSession::has_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicSession::set_has_client() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicSession::clear_has_client() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicSession::clear_client() {
  client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client();
}
const ::std::string& VkMusicSession::client() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.client)
  return client_.GetNoArena();
}
void VkMusicSession::set_client(const ::std::string& value) {
  set_has_client();
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.client)
}
#if LANG_CXX11
void VkMusicSession::set_client(::std::string&& value) {
  set_has_client();
  client_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.client)
}
#endif
void VkMusicSession::set_client(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client();
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.client)
}
void VkMusicSession::set_client(const char* value, size_t size) {
  set_has_client();
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.client)
}
::std::string* VkMusicSession::mutable_client() {
  set_has_client();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.client)
  return client_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicSession::release_client() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.client)
  clear_has_client();
  return client_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicSession::set_allocated_client(::std::string* client) {
  if (client != NULL) {
    set_has_client();
  } else {
    clear_has_client();
  }
  client_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.client)
}

// optional .ru.mail.go.webbase.blobs.VkMusicSpellcheckerResponse spellchecker_response = 19;
bool VkMusicSession::has_spellchecker_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkMusicSession::set_has_spellchecker_response() {
  _has_bits_[0] |= 0x00000020u;
}
void VkMusicSession::clear_has_spellchecker_response() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkMusicSession::clear_spellchecker_response() {
  if (spellchecker_response_ != NULL) spellchecker_response_->::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse::Clear();
  clear_has_spellchecker_response();
}
const ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse& VkMusicSession::spellchecker_response() const {
  const ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* p = spellchecker_response_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.spellchecker_response)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse*>(
      &::ru::mail::go::webbase::blobs::_VkMusicSpellcheckerResponse_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* VkMusicSession::mutable_spellchecker_response() {
  set_has_spellchecker_response();
  if (spellchecker_response_ == NULL) {
    spellchecker_response_ = new ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.spellchecker_response)
  return spellchecker_response_;
}
::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* VkMusicSession::release_spellchecker_response() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.spellchecker_response)
  clear_has_spellchecker_response();
  ::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* temp = spellchecker_response_;
  spellchecker_response_ = NULL;
  return temp;
}
void VkMusicSession::set_allocated_spellchecker_response(::ru::mail::go::webbase::blobs::VkMusicSpellcheckerResponse* spellchecker_response) {
  delete spellchecker_response_;
  spellchecker_response_ = spellchecker_response;
  if (spellchecker_response) {
    set_has_spellchecker_response();
  } else {
    clear_has_spellchecker_response();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.spellchecker_response)
}

// optional uint32 user_age = 20;
bool VkMusicSession::has_user_age() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VkMusicSession::set_has_user_age() {
  _has_bits_[0] |= 0x00020000u;
}
void VkMusicSession::clear_has_user_age() {
  _has_bits_[0] &= ~0x00020000u;
}
void VkMusicSession::clear_user_age() {
  user_age_ = 0u;
  clear_has_user_age();
}
::google::protobuf::uint32 VkMusicSession::user_age() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.user_age)
  return user_age_;
}
void VkMusicSession::set_user_age(::google::protobuf::uint32 value) {
  set_has_user_age();
  user_age_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.user_age)
}

// optional .ru.mail.go.webbase.blobs.VkMusicSession.Sex user_sex = 21;
bool VkMusicSession::has_user_sex() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VkMusicSession::set_has_user_sex() {
  _has_bits_[0] |= 0x00080000u;
}
void VkMusicSession::clear_has_user_sex() {
  _has_bits_[0] &= ~0x00080000u;
}
void VkMusicSession::clear_user_sex() {
  user_sex_ = 1;
  clear_has_user_sex();
}
::ru::mail::go::webbase::blobs::VkMusicSession_Sex VkMusicSession::user_sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.user_sex)
  return static_cast< ::ru::mail::go::webbase::blobs::VkMusicSession_Sex >(user_sex_);
}
void VkMusicSession::set_user_sex(::ru::mail::go::webbase::blobs::VkMusicSession_Sex value) {
  assert(::ru::mail::go::webbase::blobs::VkMusicSession_Sex_IsValid(value));
  set_has_user_sex();
  user_sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.user_sex)
}

// optional string ref = 22;
bool VkMusicSession::has_ref() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicSession::set_has_ref() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicSession::clear_has_ref() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicSession::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ref();
}
const ::std::string& VkMusicSession::ref() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicSession.ref)
  return ref_.GetNoArena();
}
void VkMusicSession::set_ref(const ::std::string& value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}
#if LANG_CXX11
void VkMusicSession::set_ref(::std::string&& value) {
  set_has_ref();
  ref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}
#endif
void VkMusicSession::set_ref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}
void VkMusicSession::set_ref(const char* value, size_t size) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}
::std::string* VkMusicSession::mutable_ref() {
  set_has_ref();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicSession.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicSession::release_ref() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicSession.ref)
  clear_has_ref();
  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicSession::set_allocated_ref(::std::string* ref) {
  if (ref != NULL) {
    set_has_ref();
  } else {
    clear_has_ref();
  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicSession.ref)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicTrackStatsForQuery::kQueryFieldNumber;
const int VkMusicTrackStatsForQuery::kSessionCountFieldNumber;
const int VkMusicTrackStatsForQuery::kPerformerFilterSessionCountFieldNumber;
const int VkMusicTrackStatsForQuery::kTimesClickedFieldNumber;
const int VkMusicTrackStatsForQuery::kTimesLongClickedFieldNumber;
const int VkMusicTrackStatsForQuery::kTimesLastClickedFieldNumber;
const int VkMusicTrackStatsForQuery::kTrackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicTrackStatsForQuery::VkMusicTrackStatsForQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
}
VkMusicTrackStatsForQuery::VkMusicTrackStatsForQuery(const VkMusicTrackStatsForQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.has_track()) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack(*from.track_);
  } else {
    track_ = NULL;
  }
  ::memcpy(&sessioncount_, &from.sessioncount_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeslastclicked_) -
    reinterpret_cast<char*>(&sessioncount_)) + sizeof(timeslastclicked_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
}

void VkMusicTrackStatsForQuery::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&track_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeslastclicked_) -
      reinterpret_cast<char*>(&track_)) + sizeof(timeslastclicked_));
}

VkMusicTrackStatsForQuery::~VkMusicTrackStatsForQuery() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  SharedDtor();
}

void VkMusicTrackStatsForQuery::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete track_;
}

void VkMusicTrackStatsForQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicTrackStatsForQuery::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicTrackStatsForQuery& VkMusicTrackStatsForQuery::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicTrackStatsForQuery* VkMusicTrackStatsForQuery::New(::google::protobuf::Arena* arena) const {
  VkMusicTrackStatsForQuery* n = new VkMusicTrackStatsForQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicTrackStatsForQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(track_ != NULL);
      track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&sessioncount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeslastclicked_) -
        reinterpret_cast<char*>(&sessioncount_)) + sizeof(timeslastclicked_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicTrackStatsForQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sessionCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sessioncount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessioncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 performerFilterSessionCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_performerfiltersessioncount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &performerfiltersessioncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timesClicked = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timesclicked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timesclicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timesLongClicked = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timeslongclicked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeslongclicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timesLastClicked = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timeslastclicked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeslastclicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  return false;
#undef DO_
}

void VkMusicTrackStatsForQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // optional uint64 sessionCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessioncount(), output);
  }

  // optional uint64 performerFilterSessionCount = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->performerfiltersessioncount(), output);
  }

  // optional uint64 timesClicked = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timesclicked(), output);
  }

  // optional uint64 timesLongClicked = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timeslongclicked(), output);
  }

  // optional uint64 timesLastClicked = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timeslastclicked(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->track_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
}

::google::protobuf::uint8* VkMusicTrackStatsForQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // optional uint64 sessionCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sessioncount(), target);
  }

  // optional uint64 performerFilterSessionCount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->performerfiltersessioncount(), target);
  }

  // optional uint64 timesClicked = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timesclicked(), target);
  }

  // optional uint64 timesLongClicked = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timeslongclicked(), target);
  }

  // optional uint64 timesLastClicked = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timeslastclicked(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->track_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  return target;
}

size_t VkMusicTrackStatsForQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 7;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->track_);
    }

    // optional uint64 sessionCount = 2;
    if (has_sessioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessioncount());
    }

    // optional uint64 performerFilterSessionCount = 3;
    if (has_performerfiltersessioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->performerfiltersessioncount());
    }

    // optional uint64 timesClicked = 4;
    if (has_timesclicked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timesclicked());
    }

    // optional uint64 timesLongClicked = 5;
    if (has_timeslongclicked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeslongclicked());
    }

    // optional uint64 timesLastClicked = 6;
    if (has_timeslastclicked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeslastclicked());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicTrackStatsForQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicTrackStatsForQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicTrackStatsForQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
    MergeFrom(*source);
  }
}

void VkMusicTrackStatsForQuery::MergeFrom(const VkMusicTrackStatsForQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_track()->::ru::mail::go::webbase::blobs::VkMusicTrack::MergeFrom(from.track());
    }
    if (cached_has_bits & 0x00000004u) {
      sessioncount_ = from.sessioncount_;
    }
    if (cached_has_bits & 0x00000008u) {
      performerfiltersessioncount_ = from.performerfiltersessioncount_;
    }
    if (cached_has_bits & 0x00000010u) {
      timesclicked_ = from.timesclicked_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeslongclicked_ = from.timeslongclicked_;
    }
    if (cached_has_bits & 0x00000040u) {
      timeslastclicked_ = from.timeslastclicked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicTrackStatsForQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicTrackStatsForQuery::CopyFrom(const VkMusicTrackStatsForQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicTrackStatsForQuery::IsInitialized() const {
  if (has_track()) {
    if (!this->track_->IsInitialized()) return false;
  }
  return true;
}

void VkMusicTrackStatsForQuery::Swap(VkMusicTrackStatsForQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicTrackStatsForQuery::InternalSwap(VkMusicTrackStatsForQuery* other) {
  using std::swap;
  query_.Swap(&other->query_);
  swap(track_, other->track_);
  swap(sessioncount_, other->sessioncount_);
  swap(performerfiltersessioncount_, other->performerfiltersessioncount_);
  swap(timesclicked_, other->timesclicked_);
  swap(timeslongclicked_, other->timeslongclicked_);
  swap(timeslastclicked_, other->timeslastclicked_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicTrackStatsForQuery::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicTrackStatsForQuery

// optional string query = 1;
bool VkMusicTrackStatsForQuery::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicTrackStatsForQuery::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicTrackStatsForQuery::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicTrackStatsForQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& VkMusicTrackStatsForQuery::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
  return query_.GetNoArena();
}
void VkMusicTrackStatsForQuery::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}
#if LANG_CXX11
void VkMusicTrackStatsForQuery::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}
#endif
void VkMusicTrackStatsForQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}
void VkMusicTrackStatsForQuery::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}
::std::string* VkMusicTrackStatsForQuery::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicTrackStatsForQuery::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicTrackStatsForQuery::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.query)
}

// optional uint64 sessionCount = 2;
bool VkMusicTrackStatsForQuery::has_sessioncount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicTrackStatsForQuery::set_has_sessioncount() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicTrackStatsForQuery::clear_has_sessioncount() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicTrackStatsForQuery::clear_sessioncount() {
  sessioncount_ = GOOGLE_ULONGLONG(0);
  clear_has_sessioncount();
}
::google::protobuf::uint64 VkMusicTrackStatsForQuery::sessioncount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.sessionCount)
  return sessioncount_;
}
void VkMusicTrackStatsForQuery::set_sessioncount(::google::protobuf::uint64 value) {
  set_has_sessioncount();
  sessioncount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.sessionCount)
}

// optional uint64 performerFilterSessionCount = 3;
bool VkMusicTrackStatsForQuery::has_performerfiltersessioncount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicTrackStatsForQuery::set_has_performerfiltersessioncount() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicTrackStatsForQuery::clear_has_performerfiltersessioncount() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicTrackStatsForQuery::clear_performerfiltersessioncount() {
  performerfiltersessioncount_ = GOOGLE_ULONGLONG(0);
  clear_has_performerfiltersessioncount();
}
::google::protobuf::uint64 VkMusicTrackStatsForQuery::performerfiltersessioncount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.performerFilterSessionCount)
  return performerfiltersessioncount_;
}
void VkMusicTrackStatsForQuery::set_performerfiltersessioncount(::google::protobuf::uint64 value) {
  set_has_performerfiltersessioncount();
  performerfiltersessioncount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.performerFilterSessionCount)
}

// optional uint64 timesClicked = 4;
bool VkMusicTrackStatsForQuery::has_timesclicked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicTrackStatsForQuery::set_has_timesclicked() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicTrackStatsForQuery::clear_has_timesclicked() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicTrackStatsForQuery::clear_timesclicked() {
  timesclicked_ = GOOGLE_ULONGLONG(0);
  clear_has_timesclicked();
}
::google::protobuf::uint64 VkMusicTrackStatsForQuery::timesclicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesClicked)
  return timesclicked_;
}
void VkMusicTrackStatsForQuery::set_timesclicked(::google::protobuf::uint64 value) {
  set_has_timesclicked();
  timesclicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesClicked)
}

// optional uint64 timesLongClicked = 5;
bool VkMusicTrackStatsForQuery::has_timeslongclicked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkMusicTrackStatsForQuery::set_has_timeslongclicked() {
  _has_bits_[0] |= 0x00000020u;
}
void VkMusicTrackStatsForQuery::clear_has_timeslongclicked() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkMusicTrackStatsForQuery::clear_timeslongclicked() {
  timeslongclicked_ = GOOGLE_ULONGLONG(0);
  clear_has_timeslongclicked();
}
::google::protobuf::uint64 VkMusicTrackStatsForQuery::timeslongclicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesLongClicked)
  return timeslongclicked_;
}
void VkMusicTrackStatsForQuery::set_timeslongclicked(::google::protobuf::uint64 value) {
  set_has_timeslongclicked();
  timeslongclicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesLongClicked)
}

// optional uint64 timesLastClicked = 6;
bool VkMusicTrackStatsForQuery::has_timeslastclicked() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkMusicTrackStatsForQuery::set_has_timeslastclicked() {
  _has_bits_[0] |= 0x00000040u;
}
void VkMusicTrackStatsForQuery::clear_has_timeslastclicked() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkMusicTrackStatsForQuery::clear_timeslastclicked() {
  timeslastclicked_ = GOOGLE_ULONGLONG(0);
  clear_has_timeslastclicked();
}
::google::protobuf::uint64 VkMusicTrackStatsForQuery::timeslastclicked() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesLastClicked)
  return timeslastclicked_;
}
void VkMusicTrackStatsForQuery::set_timeslastclicked(::google::protobuf::uint64 value) {
  set_has_timeslastclicked();
  timeslastclicked_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.timesLastClicked)
}

// optional .ru.mail.go.webbase.blobs.VkMusicTrack track = 7;
bool VkMusicTrackStatsForQuery::has_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicTrackStatsForQuery::set_has_track() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicTrackStatsForQuery::clear_has_track() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicTrackStatsForQuery::clear_track() {
  if (track_ != NULL) track_->::ru::mail::go::webbase::blobs::VkMusicTrack::Clear();
  clear_has_track();
}
const ::ru::mail::go::webbase::blobs::VkMusicTrack& VkMusicTrackStatsForQuery::track() const {
  const ::ru::mail::go::webbase::blobs::VkMusicTrack* p = track_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.track)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicTrack*>(
      &::ru::mail::go::webbase::blobs::_VkMusicTrack_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicTrack* VkMusicTrackStatsForQuery::mutable_track() {
  set_has_track();
  if (track_ == NULL) {
    track_ = new ::ru::mail::go::webbase::blobs::VkMusicTrack;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.track)
  return track_;
}
::ru::mail::go::webbase::blobs::VkMusicTrack* VkMusicTrackStatsForQuery::release_track() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.track)
  clear_has_track();
  ::ru::mail::go::webbase::blobs::VkMusicTrack* temp = track_;
  track_ = NULL;
  return temp;
}
void VkMusicTrackStatsForQuery::set_allocated_track(::ru::mail::go::webbase::blobs::VkMusicTrack* track) {
  delete track_;
  track_ = track;
  if (track) {
    set_has_track();
  } else {
    clear_has_track();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicTrackStatsForQuery.track)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicPerformer::kPerformerIdFieldNumber;
const int VkMusicPerformer::kNameFieldNumber;
const int VkMusicPerformer::kTimestampFieldNumber;
const int VkMusicPerformer::kFollowersFieldNumber;
const int VkMusicPerformer::kTimesListenedFieldNumber;
const int VkMusicPerformer::kTimesListenedLastMonthFieldNumber;
const int VkMusicPerformer::kTimesListenedLastWeekFieldNumber;
const int VkMusicPerformer::kTagsFieldNumber;
const int VkMusicPerformer::kTimestampMsFieldNumber;
const int VkMusicPerformer::kNameAlternativesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicPerformer::VkMusicPerformer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicPerformer)
}
VkMusicPerformer::VkMusicPerformer(const VkMusicPerformer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  name_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name_alternatives()) {
    name_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_alternatives_);
  }
  ::memcpy(&performer_id_, &from.performer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_ms_) -
    reinterpret_cast<char*>(&performer_id_)) + sizeof(timestamp_ms_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicPerformer)
}

void VkMusicPerformer::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_alternatives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&performer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_ms_) -
      reinterpret_cast<char*>(&performer_id_)) + sizeof(timestamp_ms_));
}

VkMusicPerformer::~VkMusicPerformer() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicPerformer)
  SharedDtor();
}

void VkMusicPerformer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_alternatives_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicPerformer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicPerformer::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicPerformer& VkMusicPerformer::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicPerformer* VkMusicPerformer::New(::google::protobuf::Arena* arena) const {
  VkMusicPerformer* n = new VkMusicPerformer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicPerformer::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_alternatives_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_alternatives_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&performer_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_listened_last_week_) -
        reinterpret_cast<char*>(&performer_id_)) + sizeof(times_listened_last_week_));
  }
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicPerformer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 performer_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_performer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &performer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPerformer.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 followers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_followers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &followers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_times_listened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened_last_month = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_times_listened_last_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_last_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 times_listened_last_week = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_times_listened_last_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_listened_last_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPerformer.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_ms = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name_alternatives = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_alternatives()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_alternatives().data(), static_cast<int>(this->name_alternatives().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicPerformer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicPerformer)
  return false;
#undef DO_
}

void VkMusicPerformer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 performer_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->performer_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPerformer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional int64 followers = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->followers(), output);
  }

  // optional int64 times_listened = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->times_listened(), output);
  }

  // optional int64 times_listened_last_month = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->times_listened_last_month(), output);
  }

  // optional int64 times_listened_last_week = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->times_listened_last_week(), output);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPerformer.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tags(i), output);
  }

  // optional int64 timestamp_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->timestamp_ms(), output);
  }

  // optional string name_alternatives = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_alternatives().data(), static_cast<int>(this->name_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name_alternatives(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicPerformer)
}

::google::protobuf::uint8* VkMusicPerformer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 performer_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->performer_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPerformer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional int64 followers = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->followers(), target);
  }

  // optional int64 times_listened = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->times_listened(), target);
  }

  // optional int64 times_listened_last_month = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->times_listened_last_month(), target);
  }

  // optional int64 times_listened_last_week = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->times_listened_last_week(), target);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPerformer.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->tags(i), target);
  }

  // optional int64 timestamp_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->timestamp_ms(), target);
  }

  // optional string name_alternatives = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_alternatives().data(), static_cast<int>(this->name_alternatives().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name_alternatives(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicPerformer)
  return target;
}

size_t VkMusicPerformer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string tags = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string name_alternatives = 10;
    if (has_name_alternatives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_alternatives());
    }

    // optional int64 performer_id = 1;
    if (has_performer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->performer_id());
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 followers = 4;
    if (has_followers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->followers());
    }

    // optional int64 times_listened = 5;
    if (has_times_listened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times_listened());
    }

    // optional int64 times_listened_last_month = 6;
    if (has_times_listened_last_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times_listened_last_month());
    }

    // optional int64 times_listened_last_week = 7;
    if (has_times_listened_last_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times_listened_last_week());
    }

  }
  // optional int64 timestamp_ms = 9;
  if (has_timestamp_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicPerformer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicPerformer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicPerformer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicPerformer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicPerformer)
    MergeFrom(*source);
  }
}

void VkMusicPerformer::MergeFrom(const VkMusicPerformer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name_alternatives();
      name_alternatives_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_alternatives_);
    }
    if (cached_has_bits & 0x00000004u) {
      performer_id_ = from.performer_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00000020u) {
      times_listened_ = from.times_listened_;
    }
    if (cached_has_bits & 0x00000040u) {
      times_listened_last_month_ = from.times_listened_last_month_;
    }
    if (cached_has_bits & 0x00000080u) {
      times_listened_last_week_ = from.times_listened_last_week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void VkMusicPerformer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicPerformer::CopyFrom(const VkMusicPerformer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicPerformer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicPerformer::IsInitialized() const {
  return true;
}

void VkMusicPerformer::Swap(VkMusicPerformer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicPerformer::InternalSwap(VkMusicPerformer* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  name_.Swap(&other->name_);
  name_alternatives_.Swap(&other->name_alternatives_);
  swap(performer_id_, other->performer_id_);
  swap(timestamp_, other->timestamp_);
  swap(followers_, other->followers_);
  swap(times_listened_, other->times_listened_);
  swap(times_listened_last_month_, other->times_listened_last_month_);
  swap(times_listened_last_week_, other->times_listened_last_week_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicPerformer::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicPerformer

// optional int64 performer_id = 1;
bool VkMusicPerformer::has_performer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicPerformer::set_has_performer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicPerformer::clear_has_performer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicPerformer::clear_performer_id() {
  performer_id_ = GOOGLE_LONGLONG(0);
  clear_has_performer_id();
}
::google::protobuf::int64 VkMusicPerformer::performer_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.performer_id)
  return performer_id_;
}
void VkMusicPerformer::set_performer_id(::google::protobuf::int64 value) {
  set_has_performer_id();
  performer_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.performer_id)
}

// optional string name = 2;
bool VkMusicPerformer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicPerformer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicPerformer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicPerformer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& VkMusicPerformer::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
  return name_.GetNoArena();
}
void VkMusicPerformer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}
#if LANG_CXX11
void VkMusicPerformer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}
#endif
void VkMusicPerformer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}
void VkMusicPerformer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}
::std::string* VkMusicPerformer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicPerformer::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicPerformer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPerformer.name)
}

// optional int64 timestamp = 3;
bool VkMusicPerformer::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicPerformer::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicPerformer::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicPerformer::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 VkMusicPerformer::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.timestamp)
  return timestamp_;
}
void VkMusicPerformer::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.timestamp)
}

// optional int64 followers = 4;
bool VkMusicPerformer::has_followers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicPerformer::set_has_followers() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicPerformer::clear_has_followers() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicPerformer::clear_followers() {
  followers_ = GOOGLE_LONGLONG(0);
  clear_has_followers();
}
::google::protobuf::int64 VkMusicPerformer::followers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.followers)
  return followers_;
}
void VkMusicPerformer::set_followers(::google::protobuf::int64 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.followers)
}

// optional int64 times_listened = 5;
bool VkMusicPerformer::has_times_listened() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkMusicPerformer::set_has_times_listened() {
  _has_bits_[0] |= 0x00000020u;
}
void VkMusicPerformer::clear_has_times_listened() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkMusicPerformer::clear_times_listened() {
  times_listened_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened();
}
::google::protobuf::int64 VkMusicPerformer::times_listened() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened)
  return times_listened_;
}
void VkMusicPerformer::set_times_listened(::google::protobuf::int64 value) {
  set_has_times_listened();
  times_listened_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened)
}

// optional int64 times_listened_last_month = 6;
bool VkMusicPerformer::has_times_listened_last_month() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkMusicPerformer::set_has_times_listened_last_month() {
  _has_bits_[0] |= 0x00000040u;
}
void VkMusicPerformer::clear_has_times_listened_last_month() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkMusicPerformer::clear_times_listened_last_month() {
  times_listened_last_month_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_month();
}
::google::protobuf::int64 VkMusicPerformer::times_listened_last_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened_last_month)
  return times_listened_last_month_;
}
void VkMusicPerformer::set_times_listened_last_month(::google::protobuf::int64 value) {
  set_has_times_listened_last_month();
  times_listened_last_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened_last_month)
}

// optional int64 times_listened_last_week = 7;
bool VkMusicPerformer::has_times_listened_last_week() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkMusicPerformer::set_has_times_listened_last_week() {
  _has_bits_[0] |= 0x00000080u;
}
void VkMusicPerformer::clear_has_times_listened_last_week() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkMusicPerformer::clear_times_listened_last_week() {
  times_listened_last_week_ = GOOGLE_LONGLONG(0);
  clear_has_times_listened_last_week();
}
::google::protobuf::int64 VkMusicPerformer::times_listened_last_week() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened_last_week)
  return times_listened_last_week_;
}
void VkMusicPerformer::set_times_listened_last_week(::google::protobuf::int64 value) {
  set_has_times_listened_last_week();
  times_listened_last_week_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.times_listened_last_week)
}

// repeated string tags = 8;
int VkMusicPerformer::tags_size() const {
  return tags_.size();
}
void VkMusicPerformer::clear_tags() {
  tags_.Clear();
}
const ::std::string& VkMusicPerformer::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return tags_.Get(index);
}
::std::string* VkMusicPerformer::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return tags_.Mutable(index);
}
void VkMusicPerformer::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkMusicPerformer::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void VkMusicPerformer::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
void VkMusicPerformer::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
::std::string* VkMusicPerformer::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return tags_.Add();
}
void VkMusicPerformer::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
#if LANG_CXX11
void VkMusicPerformer::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
#endif
void VkMusicPerformer::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
void VkMusicPerformer::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkMusicPerformer::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkMusicPerformer::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicPerformer.tags)
  return &tags_;
}

// optional int64 timestamp_ms = 9;
bool VkMusicPerformer::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VkMusicPerformer::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000100u;
}
void VkMusicPerformer::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000100u;
}
void VkMusicPerformer::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
::google::protobuf::int64 VkMusicPerformer::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.timestamp_ms)
  return timestamp_ms_;
}
void VkMusicPerformer::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.timestamp_ms)
}

// optional string name_alternatives = 10;
bool VkMusicPerformer::has_name_alternatives() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicPerformer::set_has_name_alternatives() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicPerformer::clear_has_name_alternatives() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicPerformer::clear_name_alternatives() {
  name_alternatives_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_alternatives();
}
const ::std::string& VkMusicPerformer::name_alternatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
  return name_alternatives_.GetNoArena();
}
void VkMusicPerformer::set_name_alternatives(const ::std::string& value) {
  set_has_name_alternatives();
  name_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}
#if LANG_CXX11
void VkMusicPerformer::set_name_alternatives(::std::string&& value) {
  set_has_name_alternatives();
  name_alternatives_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}
#endif
void VkMusicPerformer::set_name_alternatives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name_alternatives();
  name_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}
void VkMusicPerformer::set_name_alternatives(const char* value, size_t size) {
  set_has_name_alternatives();
  name_alternatives_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}
::std::string* VkMusicPerformer::mutable_name_alternatives() {
  set_has_name_alternatives();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
  return name_alternatives_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicPerformer::release_name_alternatives() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
  clear_has_name_alternatives();
  return name_alternatives_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicPerformer::set_allocated_name_alternatives(::std::string* name_alternatives) {
  if (name_alternatives != NULL) {
    set_has_name_alternatives();
  } else {
    clear_has_name_alternatives();
  }
  name_alternatives_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_alternatives);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicPerformer.name_alternatives)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicClick::kQidFieldNumber;
const int VkMusicClick::kUserIdFieldNumber;
const int VkMusicClick::kClickTypeFieldNumber;
const int VkMusicClick::kClickPositionFieldNumber;
const int VkMusicClick::kQueryTextFieldNumber;
const int VkMusicClick::kServiceNameFieldNumber;
const int VkMusicClick::kBlockNameFieldNumber;
const int VkMusicClick::kPlatformFieldNumber;
const int VkMusicClick::kOwnerIdFieldNumber;
const int VkMusicClick::kDocIdFieldNumber;
const int VkMusicClick::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicClick::VkMusicClick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicClick)
}
VkMusicClick::VkMusicClick(const VkMusicClick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  click_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_click_type()) {
    click_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.click_type_);
  }
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_name()) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  block_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block_name()) {
    block_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_name_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  ::memcpy(&qid_, &from.qid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&qid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicClick)
}

void VkMusicClick::SharedCtor() {
  _cached_size_ = 0;
  click_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&qid_)) + sizeof(timestamp_));
}

VkMusicClick::~VkMusicClick() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicClick)
  SharedDtor();
}

void VkMusicClick::SharedDtor() {
  click_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicClick::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicClick& VkMusicClick::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicClick* VkMusicClick::New(::google::protobuf::Arena* arena) const {
  VkMusicClick* n = new VkMusicClick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicClick::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!click_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*click_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!service_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*service_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!block_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*block_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!platform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platform_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&qid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&click_position_) -
        reinterpret_cast<char*>(&qid_)) + sizeof(click_position_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicClick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 qid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_qid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string click_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_type().data(), static_cast<int>(this->click_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicClick.click_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 click_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_click_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &click_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_text = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicClick.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicClick.service_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string block_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->block_name().data(), static_cast<int>(this->block_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicClick.block_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string platform = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicClick.platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 owner_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 doc_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicClick)
  return false;
#undef DO_
}

void VkMusicClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 qid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->qid(), output);
  }

  // optional int64 user_id = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // optional string click_type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_type().data(), static_cast<int>(this->click_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.click_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->click_type(), output);
  }

  // optional uint64 click_position = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->click_position(), output);
  }

  // optional string query_text = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->query_text(), output);
  }

  // optional string service_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->service_name(), output);
  }

  // optional string block_name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_name().data(), static_cast<int>(this->block_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.block_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->block_name(), output);
  }

  // optional string platform = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->platform(), output);
  }

  // optional int64 owner_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->owner_id(), output);
  }

  // optional int64 doc_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->doc_id(), output);
  }

  // optional uint64 timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicClick)
}

::google::protobuf::uint8* VkMusicClick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 qid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->qid(), target);
  }

  // optional int64 user_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->user_id(), target);
  }

  // optional string click_type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_type().data(), static_cast<int>(this->click_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.click_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->click_type(), target);
  }

  // optional uint64 click_position = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->click_position(), target);
  }

  // optional string query_text = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->query_text(), target);
  }

  // optional string service_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->service_name(), target);
  }

  // optional string block_name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_name().data(), static_cast<int>(this->block_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.block_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->block_name(), target);
  }

  // optional string platform = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClick.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->platform(), target);
  }

  // optional int64 owner_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->owner_id(), target);
  }

  // optional int64 doc_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->doc_id(), target);
  }

  // optional uint64 timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicClick)
  return target;
}

size_t VkMusicClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicClick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string click_type = 3;
    if (has_click_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_type());
    }

    // optional string query_text = 5;
    if (has_query_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_text());
    }

    // optional string service_name = 6;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional string block_name = 7;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }

    // optional string platform = 8;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional int64 qid = 1;
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->qid());
    }

    // optional int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional uint64 click_position = 4;
    if (has_click_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->click_position());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int64 owner_id = 9;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_id());
    }

    // optional int64 doc_id = 10;
    if (has_doc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->doc_id());
    }

    // optional uint64 timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicClick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicClick)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicClick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicClick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicClick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicClick)
    MergeFrom(*source);
  }
}

void VkMusicClick::MergeFrom(const VkMusicClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_click_type();
      click_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.click_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query_text();
      query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_service_name();
      service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_block_name();
      block_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000020u) {
      qid_ = from.qid_;
    }
    if (cached_has_bits & 0x00000040u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      click_position_ = from.click_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicClick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicClick::CopyFrom(const VkMusicClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicClick::IsInitialized() const {
  return true;
}

void VkMusicClick::Swap(VkMusicClick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicClick::InternalSwap(VkMusicClick* other) {
  using std::swap;
  click_type_.Swap(&other->click_type_);
  query_text_.Swap(&other->query_text_);
  service_name_.Swap(&other->service_name_);
  block_name_.Swap(&other->block_name_);
  platform_.Swap(&other->platform_);
  swap(qid_, other->qid_);
  swap(user_id_, other->user_id_);
  swap(click_position_, other->click_position_);
  swap(owner_id_, other->owner_id_);
  swap(doc_id_, other->doc_id_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicClick::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicClick

// optional int64 qid = 1;
bool VkMusicClick::has_qid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkMusicClick::set_has_qid() {
  _has_bits_[0] |= 0x00000020u;
}
void VkMusicClick::clear_has_qid() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkMusicClick::clear_qid() {
  qid_ = GOOGLE_LONGLONG(0);
  clear_has_qid();
}
::google::protobuf::int64 VkMusicClick::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.qid)
  return qid_;
}
void VkMusicClick::set_qid(::google::protobuf::int64 value) {
  set_has_qid();
  qid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.qid)
}

// optional int64 user_id = 2;
bool VkMusicClick::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkMusicClick::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
void VkMusicClick::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkMusicClick::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 VkMusicClick::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.user_id)
  return user_id_;
}
void VkMusicClick::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.user_id)
}

// optional string click_type = 3;
bool VkMusicClick::has_click_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicClick::set_has_click_type() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicClick::clear_has_click_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicClick::clear_click_type() {
  click_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_click_type();
}
const ::std::string& VkMusicClick::click_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
  return click_type_.GetNoArena();
}
void VkMusicClick::set_click_type(const ::std::string& value) {
  set_has_click_type();
  click_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}
#if LANG_CXX11
void VkMusicClick::set_click_type(::std::string&& value) {
  set_has_click_type();
  click_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}
#endif
void VkMusicClick::set_click_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_click_type();
  click_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}
void VkMusicClick::set_click_type(const char* value, size_t size) {
  set_has_click_type();
  click_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}
::std::string* VkMusicClick::mutable_click_type() {
  set_has_click_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
  return click_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicClick::release_click_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
  clear_has_click_type();
  return click_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicClick::set_allocated_click_type(::std::string* click_type) {
  if (click_type != NULL) {
    set_has_click_type();
  } else {
    clear_has_click_type();
  }
  click_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), click_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.click_type)
}

// optional uint64 click_position = 4;
bool VkMusicClick::has_click_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkMusicClick::set_has_click_position() {
  _has_bits_[0] |= 0x00000080u;
}
void VkMusicClick::clear_has_click_position() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkMusicClick::clear_click_position() {
  click_position_ = GOOGLE_ULONGLONG(0);
  clear_has_click_position();
}
::google::protobuf::uint64 VkMusicClick::click_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.click_position)
  return click_position_;
}
void VkMusicClick::set_click_position(::google::protobuf::uint64 value) {
  set_has_click_position();
  click_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.click_position)
}

// optional string query_text = 5;
bool VkMusicClick::has_query_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicClick::set_has_query_text() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicClick::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicClick::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& VkMusicClick::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
  return query_text_.GetNoArena();
}
void VkMusicClick::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}
#if LANG_CXX11
void VkMusicClick::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}
#endif
void VkMusicClick::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}
void VkMusicClick::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}
::std::string* VkMusicClick::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicClick::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicClick::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.query_text)
}

// optional string service_name = 6;
bool VkMusicClick::has_service_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicClick::set_has_service_name() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicClick::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicClick::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_name();
}
const ::std::string& VkMusicClick::service_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
  return service_name_.GetNoArena();
}
void VkMusicClick::set_service_name(const ::std::string& value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}
#if LANG_CXX11
void VkMusicClick::set_service_name(::std::string&& value) {
  set_has_service_name();
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}
#endif
void VkMusicClick::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}
void VkMusicClick::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}
::std::string* VkMusicClick::mutable_service_name() {
  set_has_service_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicClick::release_service_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
  clear_has_service_name();
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicClick::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    set_has_service_name();
  } else {
    clear_has_service_name();
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.service_name)
}

// optional string block_name = 7;
bool VkMusicClick::has_block_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkMusicClick::set_has_block_name() {
  _has_bits_[0] |= 0x00000008u;
}
void VkMusicClick::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkMusicClick::clear_block_name() {
  block_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_name();
}
const ::std::string& VkMusicClick::block_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
  return block_name_.GetNoArena();
}
void VkMusicClick::set_block_name(const ::std::string& value) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}
#if LANG_CXX11
void VkMusicClick::set_block_name(::std::string&& value) {
  set_has_block_name();
  block_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}
#endif
void VkMusicClick::set_block_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}
void VkMusicClick::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}
::std::string* VkMusicClick::mutable_block_name() {
  set_has_block_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
  return block_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicClick::release_block_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
  clear_has_block_name();
  return block_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicClick::set_allocated_block_name(::std::string* block_name) {
  if (block_name != NULL) {
    set_has_block_name();
  } else {
    clear_has_block_name();
  }
  block_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.block_name)
}

// optional string platform = 8;
bool VkMusicClick::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkMusicClick::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
void VkMusicClick::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkMusicClick::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
const ::std::string& VkMusicClick::platform() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.platform)
  return platform_.GetNoArena();
}
void VkMusicClick::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}
#if LANG_CXX11
void VkMusicClick::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}
#endif
void VkMusicClick::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}
void VkMusicClick::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}
::std::string* VkMusicClick::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClick.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicClick::release_platform() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClick.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicClick::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClick.platform)
}

// optional int64 owner_id = 9;
bool VkMusicClick::has_owner_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VkMusicClick::set_has_owner_id() {
  _has_bits_[0] |= 0x00000100u;
}
void VkMusicClick::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void VkMusicClick::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
  clear_has_owner_id();
}
::google::protobuf::int64 VkMusicClick::owner_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.owner_id)
  return owner_id_;
}
void VkMusicClick::set_owner_id(::google::protobuf::int64 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.owner_id)
}

// optional int64 doc_id = 10;
bool VkMusicClick::has_doc_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VkMusicClick::set_has_doc_id() {
  _has_bits_[0] |= 0x00000200u;
}
void VkMusicClick::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void VkMusicClick::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 VkMusicClick::doc_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.doc_id)
  return doc_id_;
}
void VkMusicClick::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.doc_id)
}

// optional uint64 timestamp = 11;
bool VkMusicClick::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VkMusicClick::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
void VkMusicClick::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
void VkMusicClick::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 VkMusicClick::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClick.timestamp)
  return timestamp_;
}
void VkMusicClick::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClick.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicClickOrQuery::kClickFieldNumber;
const int VkMusicClickOrQuery::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicClickOrQuery::VkMusicClickOrQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
}
VkMusicClickOrQuery::VkMusicClickOrQuery(const VkMusicClickOrQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.has_click()) {
    click_ = new ::ru::mail::go::webbase::blobs::VkMusicClick(*from.click_);
  } else {
    click_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
}

void VkMusicClickOrQuery::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_ = NULL;
}

VkMusicClickOrQuery::~VkMusicClickOrQuery() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  SharedDtor();
}

void VkMusicClickOrQuery::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete click_;
}

void VkMusicClickOrQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicClickOrQuery::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicClickOrQuery& VkMusicClickOrQuery::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicClickOrQuery* VkMusicClickOrQuery::New(::google::protobuf::Arena* arena) const {
  VkMusicClickOrQuery* n = new VkMusicClickOrQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicClickOrQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(click_ != NULL);
      click_->::ru::mail::go::webbase::blobs::VkMusicClick::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicClickOrQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.VkMusicClick click = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_click()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  return false;
#undef DO_
}

void VkMusicClickOrQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicClick click = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->click_, output);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
}

::google::protobuf::uint8* VkMusicClickOrQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.VkMusicClick click = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->click_, deterministic, target);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  return target;
}

size_t VkMusicClickOrQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional .ru.mail.go.webbase.blobs.VkMusicClick click = 1;
    if (has_click()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->click_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicClickOrQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicClickOrQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicClickOrQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
    MergeFrom(*source);
  }
}

void VkMusicClickOrQuery::MergeFrom(const VkMusicClickOrQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_click()->::ru::mail::go::webbase::blobs::VkMusicClick::MergeFrom(from.click());
    }
  }
}

void VkMusicClickOrQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicClickOrQuery::CopyFrom(const VkMusicClickOrQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicClickOrQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicClickOrQuery::IsInitialized() const {
  return true;
}

void VkMusicClickOrQuery::Swap(VkMusicClickOrQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicClickOrQuery::InternalSwap(VkMusicClickOrQuery* other) {
  using std::swap;
  query_.Swap(&other->query_);
  swap(click_, other->click_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicClickOrQuery::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicClickOrQuery

// optional .ru.mail.go.webbase.blobs.VkMusicClick click = 1;
bool VkMusicClickOrQuery::has_click() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicClickOrQuery::set_has_click() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicClickOrQuery::clear_has_click() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicClickOrQuery::clear_click() {
  if (click_ != NULL) click_->::ru::mail::go::webbase::blobs::VkMusicClick::Clear();
  clear_has_click();
}
const ::ru::mail::go::webbase::blobs::VkMusicClick& VkMusicClickOrQuery::click() const {
  const ::ru::mail::go::webbase::blobs::VkMusicClick* p = click_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.click)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkMusicClick*>(
      &::ru::mail::go::webbase::blobs::_VkMusicClick_default_instance_);
}
::ru::mail::go::webbase::blobs::VkMusicClick* VkMusicClickOrQuery::mutable_click() {
  set_has_click();
  if (click_ == NULL) {
    click_ = new ::ru::mail::go::webbase::blobs::VkMusicClick;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.click)
  return click_;
}
::ru::mail::go::webbase::blobs::VkMusicClick* VkMusicClickOrQuery::release_click() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.click)
  clear_has_click();
  ::ru::mail::go::webbase::blobs::VkMusicClick* temp = click_;
  click_ = NULL;
  return temp;
}
void VkMusicClickOrQuery::set_allocated_click(::ru::mail::go::webbase::blobs::VkMusicClick* click) {
  delete click_;
  click_ = click;
  if (click) {
    set_has_click();
  } else {
    clear_has_click();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.click)
}

// optional string query = 2;
bool VkMusicClickOrQuery::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicClickOrQuery::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicClickOrQuery::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicClickOrQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& VkMusicClickOrQuery::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
  return query_.GetNoArena();
}
void VkMusicClickOrQuery::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}
#if LANG_CXX11
void VkMusicClickOrQuery::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}
#endif
void VkMusicClickOrQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}
void VkMusicClickOrQuery::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}
::std::string* VkMusicClickOrQuery::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicClickOrQuery::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicClickOrQuery::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicClickOrQuery.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicQueryBlockClicks_Block::kNameFieldNumber;
const int VkMusicQueryBlockClicks_Block::kClicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicQueryBlockClicks_Block::VkMusicQueryBlockClicks_Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
}
VkMusicQueryBlockClicks_Block::VkMusicQueryBlockClicks_Block(const VkMusicQueryBlockClicks_Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clicks_ = from.clicks_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
}

void VkMusicQueryBlockClicks_Block::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clicks_ = GOOGLE_ULONGLONG(0);
}

VkMusicQueryBlockClicks_Block::~VkMusicQueryBlockClicks_Block() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  SharedDtor();
}

void VkMusicQueryBlockClicks_Block::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicQueryBlockClicks_Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicQueryBlockClicks_Block::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicQueryBlockClicks_Block& VkMusicQueryBlockClicks_Block::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicQueryBlockClicks_Block* VkMusicQueryBlockClicks_Block::New(::google::protobuf::Arena* arena) const {
  VkMusicQueryBlockClicks_Block* n = new VkMusicQueryBlockClicks_Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicQueryBlockClicks_Block::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  clicks_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicQueryBlockClicks_Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  return false;
#undef DO_
}

void VkMusicQueryBlockClicks_Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clicks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
}

::google::protobuf::uint8* VkMusicQueryBlockClicks_Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clicks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  return target;
}

size_t VkMusicQueryBlockClicks_Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 clicks = 2;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clicks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicQueryBlockClicks_Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicQueryBlockClicks_Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicQueryBlockClicks_Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
    MergeFrom(*source);
  }
}

void VkMusicQueryBlockClicks_Block::MergeFrom(const VkMusicQueryBlockClicks_Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      clicks_ = from.clicks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicQueryBlockClicks_Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicQueryBlockClicks_Block::CopyFrom(const VkMusicQueryBlockClicks_Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicQueryBlockClicks_Block::IsInitialized() const {
  return true;
}

void VkMusicQueryBlockClicks_Block::Swap(VkMusicQueryBlockClicks_Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicQueryBlockClicks_Block::InternalSwap(VkMusicQueryBlockClicks_Block* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(clicks_, other->clicks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicQueryBlockClicks_Block::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicQueryBlockClicks_Block

// optional string name = 1;
bool VkMusicQueryBlockClicks_Block::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicQueryBlockClicks_Block::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicQueryBlockClicks_Block::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicQueryBlockClicks_Block::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& VkMusicQueryBlockClicks_Block::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
  return name_.GetNoArena();
}
void VkMusicQueryBlockClicks_Block::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}
#if LANG_CXX11
void VkMusicQueryBlockClicks_Block::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}
#endif
void VkMusicQueryBlockClicks_Block::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}
void VkMusicQueryBlockClicks_Block::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}
::std::string* VkMusicQueryBlockClicks_Block::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicQueryBlockClicks_Block::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicQueryBlockClicks_Block::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.name)
}

// optional uint64 clicks = 2;
bool VkMusicQueryBlockClicks_Block::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicQueryBlockClicks_Block::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicQueryBlockClicks_Block::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicQueryBlockClicks_Block::clear_clicks() {
  clicks_ = GOOGLE_ULONGLONG(0);
  clear_has_clicks();
}
::google::protobuf::uint64 VkMusicQueryBlockClicks_Block::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.clicks)
  return clicks_;
}
void VkMusicQueryBlockClicks_Block::set_clicks(::google::protobuf::uint64 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block.clicks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicQueryBlockClicks_Service::kNameFieldNumber;
const int VkMusicQueryBlockClicks_Service::kBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicQueryBlockClicks_Service::VkMusicQueryBlockClicks_Service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
}
VkMusicQueryBlockClicks_Service::VkMusicQueryBlockClicks_Service(const VkMusicQueryBlockClicks_Service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
}

void VkMusicQueryBlockClicks_Service::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VkMusicQueryBlockClicks_Service::~VkMusicQueryBlockClicks_Service() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  SharedDtor();
}

void VkMusicQueryBlockClicks_Service::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicQueryBlockClicks_Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicQueryBlockClicks_Service::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicQueryBlockClicks_Service& VkMusicQueryBlockClicks_Service::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicQueryBlockClicks_Service* VkMusicQueryBlockClicks_Service::New(::google::protobuf::Arena* arena) const {
  VkMusicQueryBlockClicks_Service* n = new VkMusicQueryBlockClicks_Service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicQueryBlockClicks_Service::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicQueryBlockClicks_Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block blocks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  return false;
#undef DO_
}

void VkMusicQueryBlockClicks_Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blocks(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
}

::google::protobuf::uint8* VkMusicQueryBlockClicks_Service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->blocks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  return target;
}

size_t VkMusicQueryBlockClicks_Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block blocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocks(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicQueryBlockClicks_Service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicQueryBlockClicks_Service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicQueryBlockClicks_Service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
    MergeFrom(*source);
  }
}

void VkMusicQueryBlockClicks_Service::MergeFrom(const VkMusicQueryBlockClicks_Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void VkMusicQueryBlockClicks_Service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicQueryBlockClicks_Service::CopyFrom(const VkMusicQueryBlockClicks_Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicQueryBlockClicks_Service::IsInitialized() const {
  return true;
}

void VkMusicQueryBlockClicks_Service::Swap(VkMusicQueryBlockClicks_Service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicQueryBlockClicks_Service::InternalSwap(VkMusicQueryBlockClicks_Service* other) {
  using std::swap;
  blocks_.InternalSwap(&other->blocks_);
  name_.Swap(&other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicQueryBlockClicks_Service::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicQueryBlockClicks_Service

// optional string name = 1;
bool VkMusicQueryBlockClicks_Service::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicQueryBlockClicks_Service::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicQueryBlockClicks_Service::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicQueryBlockClicks_Service::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& VkMusicQueryBlockClicks_Service::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
  return name_.GetNoArena();
}
void VkMusicQueryBlockClicks_Service::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}
#if LANG_CXX11
void VkMusicQueryBlockClicks_Service::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}
#endif
void VkMusicQueryBlockClicks_Service::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}
void VkMusicQueryBlockClicks_Service::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}
::std::string* VkMusicQueryBlockClicks_Service::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicQueryBlockClicks_Service::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicQueryBlockClicks_Service::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.name)
}

// repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Block blocks = 2;
int VkMusicQueryBlockClicks_Service::blocks_size() const {
  return blocks_.size();
}
void VkMusicQueryBlockClicks_Service::clear_blocks() {
  blocks_.Clear();
}
const ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block& VkMusicQueryBlockClicks_Service::blocks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return blocks_.Get(index);
}
::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block* VkMusicQueryBlockClicks_Service::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return blocks_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block* VkMusicQueryBlockClicks_Service::add_blocks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block >*
VkMusicQueryBlockClicks_Service::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return &blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Block >&
VkMusicQueryBlockClicks_Service::blocks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service.blocks)
  return blocks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicQueryBlockClicks::kQueryTextFieldNumber;
const int VkMusicQueryBlockClicks::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicQueryBlockClicks::VkMusicQueryBlockClicks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
}
VkMusicQueryBlockClicks::VkMusicQueryBlockClicks(const VkMusicQueryBlockClicks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
}

void VkMusicQueryBlockClicks::SharedCtor() {
  _cached_size_ = 0;
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VkMusicQueryBlockClicks::~VkMusicQueryBlockClicks() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  SharedDtor();
}

void VkMusicQueryBlockClicks::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkMusicQueryBlockClicks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicQueryBlockClicks::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicQueryBlockClicks& VkMusicQueryBlockClicks::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicQueryBlockClicks* VkMusicQueryBlockClicks::New(::google::protobuf::Arena* arena) const {
  VkMusicQueryBlockClicks* n = new VkMusicQueryBlockClicks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicQueryBlockClicks::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  if (has_query_text()) {
    GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicQueryBlockClicks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service services = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  return false;
#undef DO_
}

void VkMusicQueryBlockClicks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service services = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->services(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
}

::google::protobuf::uint8* VkMusicQueryBlockClicks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service services = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->services(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  return target;
}

size_t VkMusicQueryBlockClicks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service services = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->services(static_cast<int>(i)));
    }
  }

  // optional string query_text = 1;
  if (has_query_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicQueryBlockClicks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicQueryBlockClicks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicQueryBlockClicks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
    MergeFrom(*source);
  }
}

void VkMusicQueryBlockClicks::MergeFrom(const VkMusicQueryBlockClicks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.has_query_text()) {
    set_has_query_text();
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
}

void VkMusicQueryBlockClicks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicQueryBlockClicks::CopyFrom(const VkMusicQueryBlockClicks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicQueryBlockClicks::IsInitialized() const {
  return true;
}

void VkMusicQueryBlockClicks::Swap(VkMusicQueryBlockClicks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicQueryBlockClicks::InternalSwap(VkMusicQueryBlockClicks* other) {
  using std::swap;
  services_.InternalSwap(&other->services_);
  query_text_.Swap(&other->query_text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicQueryBlockClicks::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicQueryBlockClicks

// optional string query_text = 1;
bool VkMusicQueryBlockClicks::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicQueryBlockClicks::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicQueryBlockClicks::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicQueryBlockClicks::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& VkMusicQueryBlockClicks::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
  return query_text_.GetNoArena();
}
void VkMusicQueryBlockClicks::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}
#if LANG_CXX11
void VkMusicQueryBlockClicks::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}
#endif
void VkMusicQueryBlockClicks::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}
void VkMusicQueryBlockClicks::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}
::std::string* VkMusicQueryBlockClicks::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkMusicQueryBlockClicks::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkMusicQueryBlockClicks::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.query_text)
}

// repeated .ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.Service services = 2;
int VkMusicQueryBlockClicks::services_size() const {
  return services_.size();
}
void VkMusicQueryBlockClicks::clear_services() {
  services_.Clear();
}
const ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service& VkMusicQueryBlockClicks::services(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return services_.Get(index);
}
::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service* VkMusicQueryBlockClicks::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return services_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service* VkMusicQueryBlockClicks::add_services() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return services_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service >*
VkMusicQueryBlockClicks::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return &services_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkMusicQueryBlockClicks_Service >&
VkMusicQueryBlockClicks::services() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkMusicQueryBlockClicks.services)
  return services_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkMusicFrontendExtradata::kOrigPosFieldNumber;
const int VkMusicFrontendExtradata::kFixedPosFieldNumber;
const int VkMusicFrontendExtradata::kOrigTurnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkMusicFrontendExtradata::VkMusicFrontendExtradata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fmusic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
}
VkMusicFrontendExtradata::VkMusicFrontendExtradata(const VkMusicFrontendExtradata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&orig_pos_, &from.orig_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&orig_turn_) -
    reinterpret_cast<char*>(&orig_pos_)) + sizeof(orig_turn_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
}

void VkMusicFrontendExtradata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&orig_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orig_turn_) -
      reinterpret_cast<char*>(&orig_pos_)) + sizeof(orig_turn_));
}

VkMusicFrontendExtradata::~VkMusicFrontendExtradata() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  SharedDtor();
}

void VkMusicFrontendExtradata::SharedDtor() {
}

void VkMusicFrontendExtradata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkMusicFrontendExtradata::descriptor() {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkMusicFrontendExtradata& VkMusicFrontendExtradata::default_instance() {
  protobuf_vk_5fmusic_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkMusicFrontendExtradata* VkMusicFrontendExtradata::New(::google::protobuf::Arena* arena) const {
  VkMusicFrontendExtradata* n = new VkMusicFrontendExtradata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkMusicFrontendExtradata::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&orig_pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orig_turn_) -
        reinterpret_cast<char*>(&orig_pos_)) + sizeof(orig_turn_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkMusicFrontendExtradata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 orig_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_orig_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orig_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fixed_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_fixed_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixed_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool orig_turn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_orig_turn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orig_turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  return false;
#undef DO_
}

void VkMusicFrontendExtradata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 orig_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->orig_pos(), output);
  }

  // optional uint32 fixed_pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fixed_pos(), output);
  }

  // optional bool orig_turn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->orig_turn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
}

::google::protobuf::uint8* VkMusicFrontendExtradata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 orig_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->orig_pos(), target);
  }

  // optional uint32 fixed_pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fixed_pos(), target);
  }

  // optional bool orig_turn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->orig_turn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  return target;
}

size_t VkMusicFrontendExtradata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 orig_pos = 1;
    if (has_orig_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orig_pos());
    }

    // optional uint32 fixed_pos = 2;
    if (has_fixed_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixed_pos());
    }

    // optional bool orig_turn = 3;
    if (has_orig_turn()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkMusicFrontendExtradata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  GOOGLE_DCHECK_NE(&from, this);
  const VkMusicFrontendExtradata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkMusicFrontendExtradata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
    MergeFrom(*source);
  }
}

void VkMusicFrontendExtradata::MergeFrom(const VkMusicFrontendExtradata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      orig_pos_ = from.orig_pos_;
    }
    if (cached_has_bits & 0x00000002u) {
      fixed_pos_ = from.fixed_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      orig_turn_ = from.orig_turn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkMusicFrontendExtradata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkMusicFrontendExtradata::CopyFrom(const VkMusicFrontendExtradata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkMusicFrontendExtradata::IsInitialized() const {
  return true;
}

void VkMusicFrontendExtradata::Swap(VkMusicFrontendExtradata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkMusicFrontendExtradata::InternalSwap(VkMusicFrontendExtradata* other) {
  using std::swap;
  swap(orig_pos_, other->orig_pos_);
  swap(fixed_pos_, other->fixed_pos_);
  swap(orig_turn_, other->orig_turn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkMusicFrontendExtradata::GetMetadata() const {
  protobuf_vk_5fmusic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fmusic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkMusicFrontendExtradata

// optional uint32 orig_pos = 1;
bool VkMusicFrontendExtradata::has_orig_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkMusicFrontendExtradata::set_has_orig_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void VkMusicFrontendExtradata::clear_has_orig_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkMusicFrontendExtradata::clear_orig_pos() {
  orig_pos_ = 0u;
  clear_has_orig_pos();
}
::google::protobuf::uint32 VkMusicFrontendExtradata::orig_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.orig_pos)
  return orig_pos_;
}
void VkMusicFrontendExtradata::set_orig_pos(::google::protobuf::uint32 value) {
  set_has_orig_pos();
  orig_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.orig_pos)
}

// optional uint32 fixed_pos = 2;
bool VkMusicFrontendExtradata::has_fixed_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkMusicFrontendExtradata::set_has_fixed_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void VkMusicFrontendExtradata::clear_has_fixed_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkMusicFrontendExtradata::clear_fixed_pos() {
  fixed_pos_ = 0u;
  clear_has_fixed_pos();
}
::google::protobuf::uint32 VkMusicFrontendExtradata::fixed_pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.fixed_pos)
  return fixed_pos_;
}
void VkMusicFrontendExtradata::set_fixed_pos(::google::protobuf::uint32 value) {
  set_has_fixed_pos();
  fixed_pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.fixed_pos)
}

// optional bool orig_turn = 3;
bool VkMusicFrontendExtradata::has_orig_turn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkMusicFrontendExtradata::set_has_orig_turn() {
  _has_bits_[0] |= 0x00000004u;
}
void VkMusicFrontendExtradata::clear_has_orig_turn() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkMusicFrontendExtradata::clear_orig_turn() {
  orig_turn_ = false;
  clear_has_orig_turn();
}
bool VkMusicFrontendExtradata::orig_turn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.orig_turn)
  return orig_turn_;
}
void VkMusicFrontendExtradata::set_orig_turn(bool value) {
  set_has_orig_turn();
  orig_turn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkMusicFrontendExtradata.orig_turn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
