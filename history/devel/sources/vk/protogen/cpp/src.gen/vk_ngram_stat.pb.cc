// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_ngram_stat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vk_ngram_stat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace trends_vkd {
namespace pb {
class NgramStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NgramStat>
     _instance;
} _NgramStat_default_instance_;
class WindowStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WindowStat>
     _instance;
} _WindowStat_default_instance_;
class ScoreInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScoreInfo>
     _instance;
} _ScoreInfo_default_instance_;
class NgramScoresDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NgramScores>
     _instance;
} _NgramScores_default_instance_;
class VkNgramStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkNgramStat>
     _instance;
} _VkNgramStat_default_instance_;

namespace protobuf_vk_5fngram_5fstat_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramStat, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramStat, freq_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowStat, unigram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowStat, bigram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowStat, trigram_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, score_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramScores, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramScores, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramScores, unigram_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramScores, bigram_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramScores, trigram_info_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkNgramStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkNgramStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkNgramStat, now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkNgramStat, day_ago_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkNgramStat, week_ago_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkNgramStat, trend_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkNgramStat, index_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkNgramStat, ngram_scores_),
  0,
  1,
  2,
  4,
  5,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(NgramStat)},
  { 9, 17, sizeof(WindowStat)},
  { 20, 27, sizeof(ScoreInfo)},
  { 29, 37, sizeof(NgramScores)},
  { 40, 51, sizeof(VkNgramStat)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NgramStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WindowStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScoreInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NgramScores_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkNgramStat_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vk_ngram_stat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NgramStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NgramStat_default_instance_);_WindowStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WindowStat_default_instance_);_ScoreInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScoreInfo_default_instance_);_NgramScores_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NgramScores_default_instance_);_VkNgramStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkNgramStat_default_instance_);_NgramScores_default_instance_._instance.get_mutable()->unigram_info_ = const_cast< ::trends_vkd::pb::ScoreInfo*>(
      ::trends_vkd::pb::ScoreInfo::internal_default_instance());
  _NgramScores_default_instance_._instance.get_mutable()->bigram_info_ = const_cast< ::trends_vkd::pb::ScoreInfo*>(
      ::trends_vkd::pb::ScoreInfo::internal_default_instance());
  _NgramScores_default_instance_._instance.get_mutable()->trigram_info_ = const_cast< ::trends_vkd::pb::ScoreInfo*>(
      ::trends_vkd::pb::ScoreInfo::internal_default_instance());
  _VkNgramStat_default_instance_._instance.get_mutable()->now_ = const_cast< ::trends_vkd::pb::WindowStat*>(
      ::trends_vkd::pb::WindowStat::internal_default_instance());
  _VkNgramStat_default_instance_._instance.get_mutable()->day_ago_ = const_cast< ::trends_vkd::pb::WindowStat*>(
      ::trends_vkd::pb::WindowStat::internal_default_instance());
  _VkNgramStat_default_instance_._instance.get_mutable()->week_ago_ = const_cast< ::trends_vkd::pb::WindowStat*>(
      ::trends_vkd::pb::WindowStat::internal_default_instance());
  _VkNgramStat_default_instance_._instance.get_mutable()->ngram_scores_ = const_cast< ::trends_vkd::pb::NgramScores*>(
      ::trends_vkd::pb::NgramScores::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023vk_ngram_stat.proto\022\rtrends_vkd.pb\"\'\n\t"
      "NgramStat\022\014\n\004text\030\001 \001(\t\022\014\n\004freq\030\002 \002(\004\"\214\001"
      "\n\nWindowStat\022)\n\007unigram\030\001 \003(\0132\030.trends_v"
      "kd.pb.NgramStat\022(\n\006bigram\030\002 \003(\0132\030.trends"
      "_vkd.pb.NgramStat\022)\n\007trigram\030\003 \003(\0132\030.tre"
      "nds_vkd.pb.NgramStat\"(\n\tScoreInfo\022\014\n\004tex"
      "t\030\001 \001(\t\022\r\n\005score\030\002 \001(\001\"\234\001\n\013NgramScores\022."
      "\n\014unigram_info\030\001 \001(\0132\030.trends_vkd.pb.Sco"
      "reInfo\022-\n\013bigram_info\030\002 \001(\0132\030.trends_vkd"
      ".pb.ScoreInfo\022.\n\014trigram_info\030\003 \001(\0132\030.tr"
      "ends_vkd.pb.ScoreInfo\"\354\001\n\013VkNgramStat\022&\n"
      "\003now\030\001 \001(\0132\031.trends_vkd.pb.WindowStat\022*\n"
      "\007day_ago\030\002 \001(\0132\031.trends_vkd.pb.WindowSta"
      "t\022+\n\010week_ago\030\003 \001(\0132\031.trends_vkd.pb.Wind"
      "owStat\022\023\n\013trend_score\030\004 \001(\001\022\025\n\rindex_ver"
      "sion\030\005 \001(\004\0220\n\014ngram_scores\030\006 \001(\0132\032.trend"
      "s_vkd.pb.NgramScores"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vk_ngram_stat.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_vk_5fngram_5fstat_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NgramStat::kTextFieldNumber;
const int NgramStat::kFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NgramStat::NgramStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trends_vkd.pb.NgramStat)
}
NgramStat::NgramStat(const NgramStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  freq_ = from.freq_;
  // @@protoc_insertion_point(copy_constructor:trends_vkd.pb.NgramStat)
}

void NgramStat::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freq_ = GOOGLE_ULONGLONG(0);
}

NgramStat::~NgramStat() {
  // @@protoc_insertion_point(destructor:trends_vkd.pb.NgramStat)
  SharedDtor();
}

void NgramStat::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NgramStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NgramStat::descriptor() {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NgramStat& NgramStat::default_instance() {
  protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  return *internal_default_instance();
}

NgramStat* NgramStat::New(::google::protobuf::Arena* arena) const {
  NgramStat* n = new NgramStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NgramStat::Clear() {
// @@protoc_insertion_point(message_clear_start:trends_vkd.pb.NgramStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  freq_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NgramStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trends_vkd.pb.NgramStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trends_vkd.pb.NgramStat.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 freq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trends_vkd.pb.NgramStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trends_vkd.pb.NgramStat)
  return false;
#undef DO_
}

void NgramStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trends_vkd.pb.NgramStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trends_vkd.pb.NgramStat.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // required uint64 freq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->freq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trends_vkd.pb.NgramStat)
}

::google::protobuf::uint8* NgramStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trends_vkd.pb.NgramStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trends_vkd.pb.NgramStat.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // required uint64 freq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->freq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trends_vkd.pb.NgramStat)
  return target;
}

size_t NgramStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trends_vkd.pb.NgramStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 freq = 2;
  if (has_freq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->freq());
  }
  // optional string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NgramStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trends_vkd.pb.NgramStat)
  GOOGLE_DCHECK_NE(&from, this);
  const NgramStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NgramStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trends_vkd.pb.NgramStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trends_vkd.pb.NgramStat)
    MergeFrom(*source);
  }
}

void NgramStat::MergeFrom(const NgramStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trends_vkd.pb.NgramStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      freq_ = from.freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NgramStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trends_vkd.pb.NgramStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NgramStat::CopyFrom(const NgramStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trends_vkd.pb.NgramStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NgramStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void NgramStat::Swap(NgramStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NgramStat::InternalSwap(NgramStat* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(freq_, other->freq_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NgramStat::GetMetadata() const {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NgramStat

// optional string text = 1;
bool NgramStat::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NgramStat::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void NgramStat::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void NgramStat::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& NgramStat::text() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramStat.text)
  return text_.GetNoArena();
}
void NgramStat::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trends_vkd.pb.NgramStat.text)
}
#if LANG_CXX11
void NgramStat::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trends_vkd.pb.NgramStat.text)
}
#endif
void NgramStat::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trends_vkd.pb.NgramStat.text)
}
void NgramStat::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trends_vkd.pb.NgramStat.text)
}
::std::string* NgramStat::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.NgramStat.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NgramStat::release_text() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.NgramStat.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NgramStat::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.NgramStat.text)
}

// required uint64 freq = 2;
bool NgramStat::has_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NgramStat::set_has_freq() {
  _has_bits_[0] |= 0x00000002u;
}
void NgramStat::clear_has_freq() {
  _has_bits_[0] &= ~0x00000002u;
}
void NgramStat::clear_freq() {
  freq_ = GOOGLE_ULONGLONG(0);
  clear_has_freq();
}
::google::protobuf::uint64 NgramStat::freq() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramStat.freq)
  return freq_;
}
void NgramStat::set_freq(::google::protobuf::uint64 value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:trends_vkd.pb.NgramStat.freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowStat::kUnigramFieldNumber;
const int WindowStat::kBigramFieldNumber;
const int WindowStat::kTrigramFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowStat::WindowStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trends_vkd.pb.WindowStat)
}
WindowStat::WindowStat(const WindowStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      unigram_(from.unigram_),
      bigram_(from.bigram_),
      trigram_(from.trigram_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trends_vkd.pb.WindowStat)
}

void WindowStat::SharedCtor() {
  _cached_size_ = 0;
}

WindowStat::~WindowStat() {
  // @@protoc_insertion_point(destructor:trends_vkd.pb.WindowStat)
  SharedDtor();
}

void WindowStat::SharedDtor() {
}

void WindowStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowStat::descriptor() {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WindowStat& WindowStat::default_instance() {
  protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  return *internal_default_instance();
}

WindowStat* WindowStat::New(::google::protobuf::Arena* arena) const {
  WindowStat* n = new WindowStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindowStat::Clear() {
// @@protoc_insertion_point(message_clear_start:trends_vkd.pb.WindowStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unigram_.Clear();
  bigram_.Clear();
  trigram_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WindowStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trends_vkd.pb.WindowStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .trends_vkd.pb.NgramStat unigram = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unigram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .trends_vkd.pb.NgramStat bigram = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bigram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .trends_vkd.pb.NgramStat trigram = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trigram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trends_vkd.pb.WindowStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trends_vkd.pb.WindowStat)
  return false;
#undef DO_
}

void WindowStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trends_vkd.pb.WindowStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trends_vkd.pb.NgramStat unigram = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unigram_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unigram(static_cast<int>(i)), output);
  }

  // repeated .trends_vkd.pb.NgramStat bigram = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bigram_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bigram(static_cast<int>(i)), output);
  }

  // repeated .trends_vkd.pb.NgramStat trigram = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trigram_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trigram(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trends_vkd.pb.WindowStat)
}

::google::protobuf::uint8* WindowStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trends_vkd.pb.WindowStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trends_vkd.pb.NgramStat unigram = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unigram_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->unigram(static_cast<int>(i)), deterministic, target);
  }

  // repeated .trends_vkd.pb.NgramStat bigram = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bigram_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->bigram(static_cast<int>(i)), deterministic, target);
  }

  // repeated .trends_vkd.pb.NgramStat trigram = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trigram_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->trigram(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trends_vkd.pb.WindowStat)
  return target;
}

size_t WindowStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trends_vkd.pb.WindowStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .trends_vkd.pb.NgramStat unigram = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->unigram_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unigram(static_cast<int>(i)));
    }
  }

  // repeated .trends_vkd.pb.NgramStat bigram = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->bigram_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bigram(static_cast<int>(i)));
    }
  }

  // repeated .trends_vkd.pb.NgramStat trigram = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->trigram_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trigram(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trends_vkd.pb.WindowStat)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WindowStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trends_vkd.pb.WindowStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trends_vkd.pb.WindowStat)
    MergeFrom(*source);
  }
}

void WindowStat::MergeFrom(const WindowStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trends_vkd.pb.WindowStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unigram_.MergeFrom(from.unigram_);
  bigram_.MergeFrom(from.bigram_);
  trigram_.MergeFrom(from.trigram_);
}

void WindowStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trends_vkd.pb.WindowStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowStat::CopyFrom(const WindowStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trends_vkd.pb.WindowStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowStat::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->unigram())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bigram())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->trigram())) return false;
  return true;
}

void WindowStat::Swap(WindowStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindowStat::InternalSwap(WindowStat* other) {
  using std::swap;
  unigram_.InternalSwap(&other->unigram_);
  bigram_.InternalSwap(&other->bigram_);
  trigram_.InternalSwap(&other->trigram_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowStat::GetMetadata() const {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowStat

// repeated .trends_vkd.pb.NgramStat unigram = 1;
int WindowStat::unigram_size() const {
  return unigram_.size();
}
void WindowStat::clear_unigram() {
  unigram_.Clear();
}
const ::trends_vkd::pb::NgramStat& WindowStat::unigram(int index) const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.WindowStat.unigram)
  return unigram_.Get(index);
}
::trends_vkd::pb::NgramStat* WindowStat::mutable_unigram(int index) {
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.WindowStat.unigram)
  return unigram_.Mutable(index);
}
::trends_vkd::pb::NgramStat* WindowStat::add_unigram() {
  // @@protoc_insertion_point(field_add:trends_vkd.pb.WindowStat.unigram)
  return unigram_.Add();
}
::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
WindowStat::mutable_unigram() {
  // @@protoc_insertion_point(field_mutable_list:trends_vkd.pb.WindowStat.unigram)
  return &unigram_;
}
const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
WindowStat::unigram() const {
  // @@protoc_insertion_point(field_list:trends_vkd.pb.WindowStat.unigram)
  return unigram_;
}

// repeated .trends_vkd.pb.NgramStat bigram = 2;
int WindowStat::bigram_size() const {
  return bigram_.size();
}
void WindowStat::clear_bigram() {
  bigram_.Clear();
}
const ::trends_vkd::pb::NgramStat& WindowStat::bigram(int index) const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.WindowStat.bigram)
  return bigram_.Get(index);
}
::trends_vkd::pb::NgramStat* WindowStat::mutable_bigram(int index) {
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.WindowStat.bigram)
  return bigram_.Mutable(index);
}
::trends_vkd::pb::NgramStat* WindowStat::add_bigram() {
  // @@protoc_insertion_point(field_add:trends_vkd.pb.WindowStat.bigram)
  return bigram_.Add();
}
::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
WindowStat::mutable_bigram() {
  // @@protoc_insertion_point(field_mutable_list:trends_vkd.pb.WindowStat.bigram)
  return &bigram_;
}
const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
WindowStat::bigram() const {
  // @@protoc_insertion_point(field_list:trends_vkd.pb.WindowStat.bigram)
  return bigram_;
}

// repeated .trends_vkd.pb.NgramStat trigram = 3;
int WindowStat::trigram_size() const {
  return trigram_.size();
}
void WindowStat::clear_trigram() {
  trigram_.Clear();
}
const ::trends_vkd::pb::NgramStat& WindowStat::trigram(int index) const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.WindowStat.trigram)
  return trigram_.Get(index);
}
::trends_vkd::pb::NgramStat* WindowStat::mutable_trigram(int index) {
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.WindowStat.trigram)
  return trigram_.Mutable(index);
}
::trends_vkd::pb::NgramStat* WindowStat::add_trigram() {
  // @@protoc_insertion_point(field_add:trends_vkd.pb.WindowStat.trigram)
  return trigram_.Add();
}
::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
WindowStat::mutable_trigram() {
  // @@protoc_insertion_point(field_mutable_list:trends_vkd.pb.WindowStat.trigram)
  return &trigram_;
}
const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
WindowStat::trigram() const {
  // @@protoc_insertion_point(field_list:trends_vkd.pb.WindowStat.trigram)
  return trigram_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreInfo::kTextFieldNumber;
const int ScoreInfo::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreInfo::ScoreInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trends_vkd.pb.ScoreInfo)
}
ScoreInfo::ScoreInfo(const ScoreInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:trends_vkd.pb.ScoreInfo)
}

void ScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

ScoreInfo::~ScoreInfo() {
  // @@protoc_insertion_point(destructor:trends_vkd.pb.ScoreInfo)
  SharedDtor();
}

void ScoreInfo::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreInfo::descriptor() {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScoreInfo& ScoreInfo::default_instance() {
  protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScoreInfo* ScoreInfo::New(::google::protobuf::Arena* arena) const {
  ScoreInfo* n = new ScoreInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:trends_vkd.pb.ScoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  score_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trends_vkd.pb.ScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trends_vkd.pb.ScoreInfo.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trends_vkd.pb.ScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trends_vkd.pb.ScoreInfo)
  return false;
#undef DO_
}

void ScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trends_vkd.pb.ScoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trends_vkd.pb.ScoreInfo.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional double score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trends_vkd.pb.ScoreInfo)
}

::google::protobuf::uint8* ScoreInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trends_vkd.pb.ScoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trends_vkd.pb.ScoreInfo.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional double score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trends_vkd.pb.ScoreInfo)
  return target;
}

size_t ScoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trends_vkd.pb.ScoreInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional double score = 2;
    if (has_score()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trends_vkd.pb.ScoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trends_vkd.pb.ScoreInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trends_vkd.pb.ScoreInfo)
    MergeFrom(*source);
  }
}

void ScoreInfo::MergeFrom(const ScoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trends_vkd.pb.ScoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trends_vkd.pb.ScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreInfo::CopyFrom(const ScoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trends_vkd.pb.ScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreInfo::IsInitialized() const {
  return true;
}

void ScoreInfo::Swap(ScoreInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreInfo::InternalSwap(ScoreInfo* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScoreInfo::GetMetadata() const {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScoreInfo

// optional string text = 1;
bool ScoreInfo::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScoreInfo::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void ScoreInfo::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScoreInfo::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& ScoreInfo::text() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.ScoreInfo.text)
  return text_.GetNoArena();
}
void ScoreInfo::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trends_vkd.pb.ScoreInfo.text)
}
#if LANG_CXX11
void ScoreInfo::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trends_vkd.pb.ScoreInfo.text)
}
#endif
void ScoreInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trends_vkd.pb.ScoreInfo.text)
}
void ScoreInfo::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trends_vkd.pb.ScoreInfo.text)
}
::std::string* ScoreInfo::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.ScoreInfo.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScoreInfo::release_text() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.ScoreInfo.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScoreInfo::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.ScoreInfo.text)
}

// optional double score = 2;
bool ScoreInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScoreInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void ScoreInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScoreInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
double ScoreInfo::score() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.ScoreInfo.score)
  return score_;
}
void ScoreInfo::set_score(double value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:trends_vkd.pb.ScoreInfo.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NgramScores::kUnigramInfoFieldNumber;
const int NgramScores::kBigramInfoFieldNumber;
const int NgramScores::kTrigramInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NgramScores::NgramScores()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trends_vkd.pb.NgramScores)
}
NgramScores::NgramScores(const NgramScores& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unigram_info()) {
    unigram_info_ = new ::trends_vkd::pb::ScoreInfo(*from.unigram_info_);
  } else {
    unigram_info_ = NULL;
  }
  if (from.has_bigram_info()) {
    bigram_info_ = new ::trends_vkd::pb::ScoreInfo(*from.bigram_info_);
  } else {
    bigram_info_ = NULL;
  }
  if (from.has_trigram_info()) {
    trigram_info_ = new ::trends_vkd::pb::ScoreInfo(*from.trigram_info_);
  } else {
    trigram_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:trends_vkd.pb.NgramScores)
}

void NgramScores::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&unigram_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigram_info_) -
      reinterpret_cast<char*>(&unigram_info_)) + sizeof(trigram_info_));
}

NgramScores::~NgramScores() {
  // @@protoc_insertion_point(destructor:trends_vkd.pb.NgramScores)
  SharedDtor();
}

void NgramScores::SharedDtor() {
  if (this != internal_default_instance()) delete unigram_info_;
  if (this != internal_default_instance()) delete bigram_info_;
  if (this != internal_default_instance()) delete trigram_info_;
}

void NgramScores::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NgramScores::descriptor() {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NgramScores& NgramScores::default_instance() {
  protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  return *internal_default_instance();
}

NgramScores* NgramScores::New(::google::protobuf::Arena* arena) const {
  NgramScores* n = new NgramScores;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NgramScores::Clear() {
// @@protoc_insertion_point(message_clear_start:trends_vkd.pb.NgramScores)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(unigram_info_ != NULL);
      unigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bigram_info_ != NULL);
      bigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trigram_info_ != NULL);
      trigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NgramScores::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trends_vkd.pb.NgramScores)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trends_vkd.pb.ScoreInfo unigram_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unigram_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .trends_vkd.pb.ScoreInfo bigram_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bigram_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .trends_vkd.pb.ScoreInfo trigram_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trigram_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trends_vkd.pb.NgramScores)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trends_vkd.pb.NgramScores)
  return false;
#undef DO_
}

void NgramScores::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trends_vkd.pb.NgramScores)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .trends_vkd.pb.ScoreInfo unigram_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->unigram_info_, output);
  }

  // optional .trends_vkd.pb.ScoreInfo bigram_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bigram_info_, output);
  }

  // optional .trends_vkd.pb.ScoreInfo trigram_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->trigram_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trends_vkd.pb.NgramScores)
}

::google::protobuf::uint8* NgramScores::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trends_vkd.pb.NgramScores)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .trends_vkd.pb.ScoreInfo unigram_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->unigram_info_, deterministic, target);
  }

  // optional .trends_vkd.pb.ScoreInfo bigram_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bigram_info_, deterministic, target);
  }

  // optional .trends_vkd.pb.ScoreInfo trigram_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->trigram_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trends_vkd.pb.NgramScores)
  return target;
}

size_t NgramScores::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trends_vkd.pb.NgramScores)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .trends_vkd.pb.ScoreInfo unigram_info = 1;
    if (has_unigram_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unigram_info_);
    }

    // optional .trends_vkd.pb.ScoreInfo bigram_info = 2;
    if (has_bigram_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bigram_info_);
    }

    // optional .trends_vkd.pb.ScoreInfo trigram_info = 3;
    if (has_trigram_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trigram_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NgramScores::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trends_vkd.pb.NgramScores)
  GOOGLE_DCHECK_NE(&from, this);
  const NgramScores* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NgramScores>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trends_vkd.pb.NgramScores)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trends_vkd.pb.NgramScores)
    MergeFrom(*source);
  }
}

void NgramScores::MergeFrom(const NgramScores& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trends_vkd.pb.NgramScores)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_unigram_info()->::trends_vkd::pb::ScoreInfo::MergeFrom(from.unigram_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bigram_info()->::trends_vkd::pb::ScoreInfo::MergeFrom(from.bigram_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_trigram_info()->::trends_vkd::pb::ScoreInfo::MergeFrom(from.trigram_info());
    }
  }
}

void NgramScores::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trends_vkd.pb.NgramScores)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NgramScores::CopyFrom(const NgramScores& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trends_vkd.pb.NgramScores)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NgramScores::IsInitialized() const {
  return true;
}

void NgramScores::Swap(NgramScores* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NgramScores::InternalSwap(NgramScores* other) {
  using std::swap;
  swap(unigram_info_, other->unigram_info_);
  swap(bigram_info_, other->bigram_info_);
  swap(trigram_info_, other->trigram_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NgramScores::GetMetadata() const {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NgramScores

// optional .trends_vkd.pb.ScoreInfo unigram_info = 1;
bool NgramScores::has_unigram_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NgramScores::set_has_unigram_info() {
  _has_bits_[0] |= 0x00000001u;
}
void NgramScores::clear_has_unigram_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void NgramScores::clear_unigram_info() {
  if (unigram_info_ != NULL) unigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
  clear_has_unigram_info();
}
const ::trends_vkd::pb::ScoreInfo& NgramScores::unigram_info() const {
  const ::trends_vkd::pb::ScoreInfo* p = unigram_info_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramScores.unigram_info)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::ScoreInfo*>(
      &::trends_vkd::pb::_ScoreInfo_default_instance_);
}
::trends_vkd::pb::ScoreInfo* NgramScores::mutable_unigram_info() {
  set_has_unigram_info();
  if (unigram_info_ == NULL) {
    unigram_info_ = new ::trends_vkd::pb::ScoreInfo;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.NgramScores.unigram_info)
  return unigram_info_;
}
::trends_vkd::pb::ScoreInfo* NgramScores::release_unigram_info() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.NgramScores.unigram_info)
  clear_has_unigram_info();
  ::trends_vkd::pb::ScoreInfo* temp = unigram_info_;
  unigram_info_ = NULL;
  return temp;
}
void NgramScores::set_allocated_unigram_info(::trends_vkd::pb::ScoreInfo* unigram_info) {
  delete unigram_info_;
  unigram_info_ = unigram_info;
  if (unigram_info) {
    set_has_unigram_info();
  } else {
    clear_has_unigram_info();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.NgramScores.unigram_info)
}

// optional .trends_vkd.pb.ScoreInfo bigram_info = 2;
bool NgramScores::has_bigram_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NgramScores::set_has_bigram_info() {
  _has_bits_[0] |= 0x00000002u;
}
void NgramScores::clear_has_bigram_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void NgramScores::clear_bigram_info() {
  if (bigram_info_ != NULL) bigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
  clear_has_bigram_info();
}
const ::trends_vkd::pb::ScoreInfo& NgramScores::bigram_info() const {
  const ::trends_vkd::pb::ScoreInfo* p = bigram_info_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramScores.bigram_info)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::ScoreInfo*>(
      &::trends_vkd::pb::_ScoreInfo_default_instance_);
}
::trends_vkd::pb::ScoreInfo* NgramScores::mutable_bigram_info() {
  set_has_bigram_info();
  if (bigram_info_ == NULL) {
    bigram_info_ = new ::trends_vkd::pb::ScoreInfo;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.NgramScores.bigram_info)
  return bigram_info_;
}
::trends_vkd::pb::ScoreInfo* NgramScores::release_bigram_info() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.NgramScores.bigram_info)
  clear_has_bigram_info();
  ::trends_vkd::pb::ScoreInfo* temp = bigram_info_;
  bigram_info_ = NULL;
  return temp;
}
void NgramScores::set_allocated_bigram_info(::trends_vkd::pb::ScoreInfo* bigram_info) {
  delete bigram_info_;
  bigram_info_ = bigram_info;
  if (bigram_info) {
    set_has_bigram_info();
  } else {
    clear_has_bigram_info();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.NgramScores.bigram_info)
}

// optional .trends_vkd.pb.ScoreInfo trigram_info = 3;
bool NgramScores::has_trigram_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NgramScores::set_has_trigram_info() {
  _has_bits_[0] |= 0x00000004u;
}
void NgramScores::clear_has_trigram_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void NgramScores::clear_trigram_info() {
  if (trigram_info_ != NULL) trigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
  clear_has_trigram_info();
}
const ::trends_vkd::pb::ScoreInfo& NgramScores::trigram_info() const {
  const ::trends_vkd::pb::ScoreInfo* p = trigram_info_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramScores.trigram_info)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::ScoreInfo*>(
      &::trends_vkd::pb::_ScoreInfo_default_instance_);
}
::trends_vkd::pb::ScoreInfo* NgramScores::mutable_trigram_info() {
  set_has_trigram_info();
  if (trigram_info_ == NULL) {
    trigram_info_ = new ::trends_vkd::pb::ScoreInfo;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.NgramScores.trigram_info)
  return trigram_info_;
}
::trends_vkd::pb::ScoreInfo* NgramScores::release_trigram_info() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.NgramScores.trigram_info)
  clear_has_trigram_info();
  ::trends_vkd::pb::ScoreInfo* temp = trigram_info_;
  trigram_info_ = NULL;
  return temp;
}
void NgramScores::set_allocated_trigram_info(::trends_vkd::pb::ScoreInfo* trigram_info) {
  delete trigram_info_;
  trigram_info_ = trigram_info;
  if (trigram_info) {
    set_has_trigram_info();
  } else {
    clear_has_trigram_info();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.NgramScores.trigram_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkNgramStat::kNowFieldNumber;
const int VkNgramStat::kDayAgoFieldNumber;
const int VkNgramStat::kWeekAgoFieldNumber;
const int VkNgramStat::kTrendScoreFieldNumber;
const int VkNgramStat::kIndexVersionFieldNumber;
const int VkNgramStat::kNgramScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkNgramStat::VkNgramStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trends_vkd.pb.VkNgramStat)
}
VkNgramStat::VkNgramStat(const VkNgramStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_now()) {
    now_ = new ::trends_vkd::pb::WindowStat(*from.now_);
  } else {
    now_ = NULL;
  }
  if (from.has_day_ago()) {
    day_ago_ = new ::trends_vkd::pb::WindowStat(*from.day_ago_);
  } else {
    day_ago_ = NULL;
  }
  if (from.has_week_ago()) {
    week_ago_ = new ::trends_vkd::pb::WindowStat(*from.week_ago_);
  } else {
    week_ago_ = NULL;
  }
  if (from.has_ngram_scores()) {
    ngram_scores_ = new ::trends_vkd::pb::NgramScores(*from.ngram_scores_);
  } else {
    ngram_scores_ = NULL;
  }
  ::memcpy(&trend_score_, &from.trend_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_version_) -
    reinterpret_cast<char*>(&trend_score_)) + sizeof(index_version_));
  // @@protoc_insertion_point(copy_constructor:trends_vkd.pb.VkNgramStat)
}

void VkNgramStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&now_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_version_) -
      reinterpret_cast<char*>(&now_)) + sizeof(index_version_));
}

VkNgramStat::~VkNgramStat() {
  // @@protoc_insertion_point(destructor:trends_vkd.pb.VkNgramStat)
  SharedDtor();
}

void VkNgramStat::SharedDtor() {
  if (this != internal_default_instance()) delete now_;
  if (this != internal_default_instance()) delete day_ago_;
  if (this != internal_default_instance()) delete week_ago_;
  if (this != internal_default_instance()) delete ngram_scores_;
}

void VkNgramStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkNgramStat::descriptor() {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkNgramStat& VkNgramStat::default_instance() {
  protobuf_vk_5fngram_5fstat_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkNgramStat* VkNgramStat::New(::google::protobuf::Arena* arena) const {
  VkNgramStat* n = new VkNgramStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkNgramStat::Clear() {
// @@protoc_insertion_point(message_clear_start:trends_vkd.pb.VkNgramStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(now_ != NULL);
      now_->::trends_vkd::pb::WindowStat::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(day_ago_ != NULL);
      day_ago_->::trends_vkd::pb::WindowStat::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(week_ago_ != NULL);
      week_ago_->::trends_vkd::pb::WindowStat::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ngram_scores_ != NULL);
      ngram_scores_->::trends_vkd::pb::NgramScores::Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&trend_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_version_) -
        reinterpret_cast<char*>(&trend_score_)) + sizeof(index_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkNgramStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trends_vkd.pb.VkNgramStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trends_vkd.pb.WindowStat now = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .trends_vkd.pb.WindowStat day_ago = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_day_ago()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .trends_vkd.pb.WindowStat week_ago = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_week_ago()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trend_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_trend_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trend_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 index_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_index_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .trends_vkd.pb.NgramScores ngram_scores = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ngram_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trends_vkd.pb.VkNgramStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trends_vkd.pb.VkNgramStat)
  return false;
#undef DO_
}

void VkNgramStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trends_vkd.pb.VkNgramStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .trends_vkd.pb.WindowStat now = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->now_, output);
  }

  // optional .trends_vkd.pb.WindowStat day_ago = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->day_ago_, output);
  }

  // optional .trends_vkd.pb.WindowStat week_ago = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->week_ago_, output);
  }

  // optional double trend_score = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->trend_score(), output);
  }

  // optional uint64 index_version = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->index_version(), output);
  }

  // optional .trends_vkd.pb.NgramScores ngram_scores = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ngram_scores_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trends_vkd.pb.VkNgramStat)
}

::google::protobuf::uint8* VkNgramStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trends_vkd.pb.VkNgramStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .trends_vkd.pb.WindowStat now = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->now_, deterministic, target);
  }

  // optional .trends_vkd.pb.WindowStat day_ago = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->day_ago_, deterministic, target);
  }

  // optional .trends_vkd.pb.WindowStat week_ago = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->week_ago_, deterministic, target);
  }

  // optional double trend_score = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->trend_score(), target);
  }

  // optional uint64 index_version = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->index_version(), target);
  }

  // optional .trends_vkd.pb.NgramScores ngram_scores = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ngram_scores_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trends_vkd.pb.VkNgramStat)
  return target;
}

size_t VkNgramStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trends_vkd.pb.VkNgramStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .trends_vkd.pb.WindowStat now = 1;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->now_);
    }

    // optional .trends_vkd.pb.WindowStat day_ago = 2;
    if (has_day_ago()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->day_ago_);
    }

    // optional .trends_vkd.pb.WindowStat week_ago = 3;
    if (has_week_ago()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->week_ago_);
    }

    // optional .trends_vkd.pb.NgramScores ngram_scores = 6;
    if (has_ngram_scores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ngram_scores_);
    }

    // optional double trend_score = 4;
    if (has_trend_score()) {
      total_size += 1 + 8;
    }

    // optional uint64 index_version = 5;
    if (has_index_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkNgramStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trends_vkd.pb.VkNgramStat)
  GOOGLE_DCHECK_NE(&from, this);
  const VkNgramStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkNgramStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trends_vkd.pb.VkNgramStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trends_vkd.pb.VkNgramStat)
    MergeFrom(*source);
  }
}

void VkNgramStat::MergeFrom(const VkNgramStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trends_vkd.pb.VkNgramStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_now()->::trends_vkd::pb::WindowStat::MergeFrom(from.now());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_day_ago()->::trends_vkd::pb::WindowStat::MergeFrom(from.day_ago());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_week_ago()->::trends_vkd::pb::WindowStat::MergeFrom(from.week_ago());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ngram_scores()->::trends_vkd::pb::NgramScores::MergeFrom(from.ngram_scores());
    }
    if (cached_has_bits & 0x00000010u) {
      trend_score_ = from.trend_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      index_version_ = from.index_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkNgramStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trends_vkd.pb.VkNgramStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkNgramStat::CopyFrom(const VkNgramStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trends_vkd.pb.VkNgramStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkNgramStat::IsInitialized() const {
  if (has_now()) {
    if (!this->now_->IsInitialized()) return false;
  }
  if (has_day_ago()) {
    if (!this->day_ago_->IsInitialized()) return false;
  }
  if (has_week_ago()) {
    if (!this->week_ago_->IsInitialized()) return false;
  }
  return true;
}

void VkNgramStat::Swap(VkNgramStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkNgramStat::InternalSwap(VkNgramStat* other) {
  using std::swap;
  swap(now_, other->now_);
  swap(day_ago_, other->day_ago_);
  swap(week_ago_, other->week_ago_);
  swap(ngram_scores_, other->ngram_scores_);
  swap(trend_score_, other->trend_score_);
  swap(index_version_, other->index_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkNgramStat::GetMetadata() const {
  protobuf_vk_5fngram_5fstat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5fngram_5fstat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkNgramStat

// optional .trends_vkd.pb.WindowStat now = 1;
bool VkNgramStat::has_now() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkNgramStat::set_has_now() {
  _has_bits_[0] |= 0x00000001u;
}
void VkNgramStat::clear_has_now() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkNgramStat::clear_now() {
  if (now_ != NULL) now_->::trends_vkd::pb::WindowStat::Clear();
  clear_has_now();
}
const ::trends_vkd::pb::WindowStat& VkNgramStat::now() const {
  const ::trends_vkd::pb::WindowStat* p = now_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.now)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::WindowStat*>(
      &::trends_vkd::pb::_WindowStat_default_instance_);
}
::trends_vkd::pb::WindowStat* VkNgramStat::mutable_now() {
  set_has_now();
  if (now_ == NULL) {
    now_ = new ::trends_vkd::pb::WindowStat;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.VkNgramStat.now)
  return now_;
}
::trends_vkd::pb::WindowStat* VkNgramStat::release_now() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.VkNgramStat.now)
  clear_has_now();
  ::trends_vkd::pb::WindowStat* temp = now_;
  now_ = NULL;
  return temp;
}
void VkNgramStat::set_allocated_now(::trends_vkd::pb::WindowStat* now) {
  delete now_;
  now_ = now;
  if (now) {
    set_has_now();
  } else {
    clear_has_now();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.VkNgramStat.now)
}

// optional .trends_vkd.pb.WindowStat day_ago = 2;
bool VkNgramStat::has_day_ago() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkNgramStat::set_has_day_ago() {
  _has_bits_[0] |= 0x00000002u;
}
void VkNgramStat::clear_has_day_ago() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkNgramStat::clear_day_ago() {
  if (day_ago_ != NULL) day_ago_->::trends_vkd::pb::WindowStat::Clear();
  clear_has_day_ago();
}
const ::trends_vkd::pb::WindowStat& VkNgramStat::day_ago() const {
  const ::trends_vkd::pb::WindowStat* p = day_ago_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.day_ago)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::WindowStat*>(
      &::trends_vkd::pb::_WindowStat_default_instance_);
}
::trends_vkd::pb::WindowStat* VkNgramStat::mutable_day_ago() {
  set_has_day_ago();
  if (day_ago_ == NULL) {
    day_ago_ = new ::trends_vkd::pb::WindowStat;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.VkNgramStat.day_ago)
  return day_ago_;
}
::trends_vkd::pb::WindowStat* VkNgramStat::release_day_ago() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.VkNgramStat.day_ago)
  clear_has_day_ago();
  ::trends_vkd::pb::WindowStat* temp = day_ago_;
  day_ago_ = NULL;
  return temp;
}
void VkNgramStat::set_allocated_day_ago(::trends_vkd::pb::WindowStat* day_ago) {
  delete day_ago_;
  day_ago_ = day_ago;
  if (day_ago) {
    set_has_day_ago();
  } else {
    clear_has_day_ago();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.VkNgramStat.day_ago)
}

// optional .trends_vkd.pb.WindowStat week_ago = 3;
bool VkNgramStat::has_week_ago() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkNgramStat::set_has_week_ago() {
  _has_bits_[0] |= 0x00000004u;
}
void VkNgramStat::clear_has_week_ago() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkNgramStat::clear_week_ago() {
  if (week_ago_ != NULL) week_ago_->::trends_vkd::pb::WindowStat::Clear();
  clear_has_week_ago();
}
const ::trends_vkd::pb::WindowStat& VkNgramStat::week_ago() const {
  const ::trends_vkd::pb::WindowStat* p = week_ago_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.week_ago)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::WindowStat*>(
      &::trends_vkd::pb::_WindowStat_default_instance_);
}
::trends_vkd::pb::WindowStat* VkNgramStat::mutable_week_ago() {
  set_has_week_ago();
  if (week_ago_ == NULL) {
    week_ago_ = new ::trends_vkd::pb::WindowStat;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.VkNgramStat.week_ago)
  return week_ago_;
}
::trends_vkd::pb::WindowStat* VkNgramStat::release_week_ago() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.VkNgramStat.week_ago)
  clear_has_week_ago();
  ::trends_vkd::pb::WindowStat* temp = week_ago_;
  week_ago_ = NULL;
  return temp;
}
void VkNgramStat::set_allocated_week_ago(::trends_vkd::pb::WindowStat* week_ago) {
  delete week_ago_;
  week_ago_ = week_ago;
  if (week_ago) {
    set_has_week_ago();
  } else {
    clear_has_week_ago();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.VkNgramStat.week_ago)
}

// optional double trend_score = 4;
bool VkNgramStat::has_trend_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkNgramStat::set_has_trend_score() {
  _has_bits_[0] |= 0x00000010u;
}
void VkNgramStat::clear_has_trend_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkNgramStat::clear_trend_score() {
  trend_score_ = 0;
  clear_has_trend_score();
}
double VkNgramStat::trend_score() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.trend_score)
  return trend_score_;
}
void VkNgramStat::set_trend_score(double value) {
  set_has_trend_score();
  trend_score_ = value;
  // @@protoc_insertion_point(field_set:trends_vkd.pb.VkNgramStat.trend_score)
}

// optional uint64 index_version = 5;
bool VkNgramStat::has_index_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkNgramStat::set_has_index_version() {
  _has_bits_[0] |= 0x00000020u;
}
void VkNgramStat::clear_has_index_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkNgramStat::clear_index_version() {
  index_version_ = GOOGLE_ULONGLONG(0);
  clear_has_index_version();
}
::google::protobuf::uint64 VkNgramStat::index_version() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.index_version)
  return index_version_;
}
void VkNgramStat::set_index_version(::google::protobuf::uint64 value) {
  set_has_index_version();
  index_version_ = value;
  // @@protoc_insertion_point(field_set:trends_vkd.pb.VkNgramStat.index_version)
}

// optional .trends_vkd.pb.NgramScores ngram_scores = 6;
bool VkNgramStat::has_ngram_scores() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkNgramStat::set_has_ngram_scores() {
  _has_bits_[0] |= 0x00000008u;
}
void VkNgramStat::clear_has_ngram_scores() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkNgramStat::clear_ngram_scores() {
  if (ngram_scores_ != NULL) ngram_scores_->::trends_vkd::pb::NgramScores::Clear();
  clear_has_ngram_scores();
}
const ::trends_vkd::pb::NgramScores& VkNgramStat::ngram_scores() const {
  const ::trends_vkd::pb::NgramScores* p = ngram_scores_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.ngram_scores)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::NgramScores*>(
      &::trends_vkd::pb::_NgramScores_default_instance_);
}
::trends_vkd::pb::NgramScores* VkNgramStat::mutable_ngram_scores() {
  set_has_ngram_scores();
  if (ngram_scores_ == NULL) {
    ngram_scores_ = new ::trends_vkd::pb::NgramScores;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.VkNgramStat.ngram_scores)
  return ngram_scores_;
}
::trends_vkd::pb::NgramScores* VkNgramStat::release_ngram_scores() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.VkNgramStat.ngram_scores)
  clear_has_ngram_scores();
  ::trends_vkd::pb::NgramScores* temp = ngram_scores_;
  ngram_scores_ = NULL;
  return temp;
}
void VkNgramStat::set_allocated_ngram_scores(::trends_vkd::pb::NgramScores* ngram_scores) {
  delete ngram_scores_;
  ngram_scores_ = ngram_scores;
  if (ngram_scores) {
    set_has_ngram_scores();
  } else {
    clear_has_ngram_scores();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.VkNgramStat.ngram_scores)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace trends_vkd

// @@protoc_insertion_point(global_scope)
