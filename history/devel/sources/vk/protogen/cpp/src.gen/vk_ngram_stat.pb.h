// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_ngram_stat.proto

#ifndef PROTOBUF_vk_5fngram_5fstat_2eproto__INCLUDED
#define PROTOBUF_vk_5fngram_5fstat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace trends_vkd {
namespace pb {
class NgramScores;
class NgramScoresDefaultTypeInternal;
extern NgramScoresDefaultTypeInternal _NgramScores_default_instance_;
class NgramStat;
class NgramStatDefaultTypeInternal;
extern NgramStatDefaultTypeInternal _NgramStat_default_instance_;
class ScoreInfo;
class ScoreInfoDefaultTypeInternal;
extern ScoreInfoDefaultTypeInternal _ScoreInfo_default_instance_;
class VkNgramStat;
class VkNgramStatDefaultTypeInternal;
extern VkNgramStatDefaultTypeInternal _VkNgramStat_default_instance_;
class WindowStat;
class WindowStatDefaultTypeInternal;
extern WindowStatDefaultTypeInternal _WindowStat_default_instance_;
}  // namespace pb
}  // namespace trends_vkd

namespace trends_vkd {
namespace pb {

namespace protobuf_vk_5fngram_5fstat_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_vk_5fngram_5fstat_2eproto

// ===================================================================

class NgramStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trends_vkd.pb.NgramStat) */ {
 public:
  NgramStat();
  virtual ~NgramStat();

  NgramStat(const NgramStat& from);

  inline NgramStat& operator=(const NgramStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NgramStat(NgramStat&& from) noexcept
    : NgramStat() {
    *this = ::std::move(from);
  }

  inline NgramStat& operator=(NgramStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NgramStat& default_instance();

  static inline const NgramStat* internal_default_instance() {
    return reinterpret_cast<const NgramStat*>(
               &_NgramStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NgramStat* other);
  friend void swap(NgramStat& a, NgramStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NgramStat* New() const PROTOBUF_FINAL { return New(NULL); }

  NgramStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NgramStat& from);
  void MergeFrom(const NgramStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NgramStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required uint64 freq = 2;
  bool has_freq() const;
  void clear_freq();
  static const int kFreqFieldNumber = 2;
  ::google::protobuf::uint64 freq() const;
  void set_freq(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:trends_vkd.pb.NgramStat)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_freq();
  void clear_has_freq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint64 freq_;
  friend struct protobuf_vk_5fngram_5fstat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WindowStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trends_vkd.pb.WindowStat) */ {
 public:
  WindowStat();
  virtual ~WindowStat();

  WindowStat(const WindowStat& from);

  inline WindowStat& operator=(const WindowStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WindowStat(WindowStat&& from) noexcept
    : WindowStat() {
    *this = ::std::move(from);
  }

  inline WindowStat& operator=(WindowStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowStat& default_instance();

  static inline const WindowStat* internal_default_instance() {
    return reinterpret_cast<const WindowStat*>(
               &_WindowStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(WindowStat* other);
  friend void swap(WindowStat& a, WindowStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WindowStat* New() const PROTOBUF_FINAL { return New(NULL); }

  WindowStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WindowStat& from);
  void MergeFrom(const WindowStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WindowStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .trends_vkd.pb.NgramStat unigram = 1;
  int unigram_size() const;
  void clear_unigram();
  static const int kUnigramFieldNumber = 1;
  const ::trends_vkd::pb::NgramStat& unigram(int index) const;
  ::trends_vkd::pb::NgramStat* mutable_unigram(int index);
  ::trends_vkd::pb::NgramStat* add_unigram();
  ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
      mutable_unigram();
  const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
      unigram() const;

  // repeated .trends_vkd.pb.NgramStat bigram = 2;
  int bigram_size() const;
  void clear_bigram();
  static const int kBigramFieldNumber = 2;
  const ::trends_vkd::pb::NgramStat& bigram(int index) const;
  ::trends_vkd::pb::NgramStat* mutable_bigram(int index);
  ::trends_vkd::pb::NgramStat* add_bigram();
  ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
      mutable_bigram();
  const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
      bigram() const;

  // repeated .trends_vkd.pb.NgramStat trigram = 3;
  int trigram_size() const;
  void clear_trigram();
  static const int kTrigramFieldNumber = 3;
  const ::trends_vkd::pb::NgramStat& trigram(int index) const;
  ::trends_vkd::pb::NgramStat* mutable_trigram(int index);
  ::trends_vkd::pb::NgramStat* add_trigram();
  ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
      mutable_trigram();
  const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
      trigram() const;

  // @@protoc_insertion_point(class_scope:trends_vkd.pb.WindowStat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat > unigram_;
  ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat > bigram_;
  ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat > trigram_;
  friend struct protobuf_vk_5fngram_5fstat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScoreInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trends_vkd.pb.ScoreInfo) */ {
 public:
  ScoreInfo();
  virtual ~ScoreInfo();

  ScoreInfo(const ScoreInfo& from);

  inline ScoreInfo& operator=(const ScoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScoreInfo(ScoreInfo&& from) noexcept
    : ScoreInfo() {
    *this = ::std::move(from);
  }

  inline ScoreInfo& operator=(ScoreInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreInfo& default_instance();

  static inline const ScoreInfo* internal_default_instance() {
    return reinterpret_cast<const ScoreInfo*>(
               &_ScoreInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ScoreInfo* other);
  friend void swap(ScoreInfo& a, ScoreInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScoreInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ScoreInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScoreInfo& from);
  void MergeFrom(const ScoreInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScoreInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional double score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  double score() const;
  void set_score(double value);

  // @@protoc_insertion_point(class_scope:trends_vkd.pb.ScoreInfo)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_score();
  void clear_has_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  double score_;
  friend struct protobuf_vk_5fngram_5fstat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NgramScores : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trends_vkd.pb.NgramScores) */ {
 public:
  NgramScores();
  virtual ~NgramScores();

  NgramScores(const NgramScores& from);

  inline NgramScores& operator=(const NgramScores& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NgramScores(NgramScores&& from) noexcept
    : NgramScores() {
    *this = ::std::move(from);
  }

  inline NgramScores& operator=(NgramScores&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NgramScores& default_instance();

  static inline const NgramScores* internal_default_instance() {
    return reinterpret_cast<const NgramScores*>(
               &_NgramScores_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(NgramScores* other);
  friend void swap(NgramScores& a, NgramScores& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NgramScores* New() const PROTOBUF_FINAL { return New(NULL); }

  NgramScores* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NgramScores& from);
  void MergeFrom(const NgramScores& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NgramScores* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .trends_vkd.pb.ScoreInfo unigram_info = 1;
  bool has_unigram_info() const;
  void clear_unigram_info();
  static const int kUnigramInfoFieldNumber = 1;
  const ::trends_vkd::pb::ScoreInfo& unigram_info() const;
  ::trends_vkd::pb::ScoreInfo* mutable_unigram_info();
  ::trends_vkd::pb::ScoreInfo* release_unigram_info();
  void set_allocated_unigram_info(::trends_vkd::pb::ScoreInfo* unigram_info);

  // optional .trends_vkd.pb.ScoreInfo bigram_info = 2;
  bool has_bigram_info() const;
  void clear_bigram_info();
  static const int kBigramInfoFieldNumber = 2;
  const ::trends_vkd::pb::ScoreInfo& bigram_info() const;
  ::trends_vkd::pb::ScoreInfo* mutable_bigram_info();
  ::trends_vkd::pb::ScoreInfo* release_bigram_info();
  void set_allocated_bigram_info(::trends_vkd::pb::ScoreInfo* bigram_info);

  // optional .trends_vkd.pb.ScoreInfo trigram_info = 3;
  bool has_trigram_info() const;
  void clear_trigram_info();
  static const int kTrigramInfoFieldNumber = 3;
  const ::trends_vkd::pb::ScoreInfo& trigram_info() const;
  ::trends_vkd::pb::ScoreInfo* mutable_trigram_info();
  ::trends_vkd::pb::ScoreInfo* release_trigram_info();
  void set_allocated_trigram_info(::trends_vkd::pb::ScoreInfo* trigram_info);

  // @@protoc_insertion_point(class_scope:trends_vkd.pb.NgramScores)
 private:
  void set_has_unigram_info();
  void clear_has_unigram_info();
  void set_has_bigram_info();
  void clear_has_bigram_info();
  void set_has_trigram_info();
  void clear_has_trigram_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::trends_vkd::pb::ScoreInfo* unigram_info_;
  ::trends_vkd::pb::ScoreInfo* bigram_info_;
  ::trends_vkd::pb::ScoreInfo* trigram_info_;
  friend struct protobuf_vk_5fngram_5fstat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkNgramStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trends_vkd.pb.VkNgramStat) */ {
 public:
  VkNgramStat();
  virtual ~VkNgramStat();

  VkNgramStat(const VkNgramStat& from);

  inline VkNgramStat& operator=(const VkNgramStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkNgramStat(VkNgramStat&& from) noexcept
    : VkNgramStat() {
    *this = ::std::move(from);
  }

  inline VkNgramStat& operator=(VkNgramStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkNgramStat& default_instance();

  static inline const VkNgramStat* internal_default_instance() {
    return reinterpret_cast<const VkNgramStat*>(
               &_VkNgramStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VkNgramStat* other);
  friend void swap(VkNgramStat& a, VkNgramStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkNgramStat* New() const PROTOBUF_FINAL { return New(NULL); }

  VkNgramStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkNgramStat& from);
  void MergeFrom(const VkNgramStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkNgramStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .trends_vkd.pb.WindowStat now = 1;
  bool has_now() const;
  void clear_now();
  static const int kNowFieldNumber = 1;
  const ::trends_vkd::pb::WindowStat& now() const;
  ::trends_vkd::pb::WindowStat* mutable_now();
  ::trends_vkd::pb::WindowStat* release_now();
  void set_allocated_now(::trends_vkd::pb::WindowStat* now);

  // optional .trends_vkd.pb.WindowStat day_ago = 2;
  bool has_day_ago() const;
  void clear_day_ago();
  static const int kDayAgoFieldNumber = 2;
  const ::trends_vkd::pb::WindowStat& day_ago() const;
  ::trends_vkd::pb::WindowStat* mutable_day_ago();
  ::trends_vkd::pb::WindowStat* release_day_ago();
  void set_allocated_day_ago(::trends_vkd::pb::WindowStat* day_ago);

  // optional .trends_vkd.pb.WindowStat week_ago = 3;
  bool has_week_ago() const;
  void clear_week_ago();
  static const int kWeekAgoFieldNumber = 3;
  const ::trends_vkd::pb::WindowStat& week_ago() const;
  ::trends_vkd::pb::WindowStat* mutable_week_ago();
  ::trends_vkd::pb::WindowStat* release_week_ago();
  void set_allocated_week_ago(::trends_vkd::pb::WindowStat* week_ago);

  // optional .trends_vkd.pb.NgramScores ngram_scores = 6;
  bool has_ngram_scores() const;
  void clear_ngram_scores();
  static const int kNgramScoresFieldNumber = 6;
  const ::trends_vkd::pb::NgramScores& ngram_scores() const;
  ::trends_vkd::pb::NgramScores* mutable_ngram_scores();
  ::trends_vkd::pb::NgramScores* release_ngram_scores();
  void set_allocated_ngram_scores(::trends_vkd::pb::NgramScores* ngram_scores);

  // optional double trend_score = 4;
  bool has_trend_score() const;
  void clear_trend_score();
  static const int kTrendScoreFieldNumber = 4;
  double trend_score() const;
  void set_trend_score(double value);

  // optional uint64 index_version = 5;
  bool has_index_version() const;
  void clear_index_version();
  static const int kIndexVersionFieldNumber = 5;
  ::google::protobuf::uint64 index_version() const;
  void set_index_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:trends_vkd.pb.VkNgramStat)
 private:
  void set_has_now();
  void clear_has_now();
  void set_has_day_ago();
  void clear_has_day_ago();
  void set_has_week_ago();
  void clear_has_week_ago();
  void set_has_trend_score();
  void clear_has_trend_score();
  void set_has_index_version();
  void clear_has_index_version();
  void set_has_ngram_scores();
  void clear_has_ngram_scores();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::trends_vkd::pb::WindowStat* now_;
  ::trends_vkd::pb::WindowStat* day_ago_;
  ::trends_vkd::pb::WindowStat* week_ago_;
  ::trends_vkd::pb::NgramScores* ngram_scores_;
  double trend_score_;
  ::google::protobuf::uint64 index_version_;
  friend struct protobuf_vk_5fngram_5fstat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NgramStat

// optional string text = 1;
inline bool NgramStat::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NgramStat::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NgramStat::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NgramStat::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& NgramStat::text() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramStat.text)
  return text_.GetNoArena();
}
inline void NgramStat::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trends_vkd.pb.NgramStat.text)
}
#if LANG_CXX11
inline void NgramStat::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trends_vkd.pb.NgramStat.text)
}
#endif
inline void NgramStat::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trends_vkd.pb.NgramStat.text)
}
inline void NgramStat::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trends_vkd.pb.NgramStat.text)
}
inline ::std::string* NgramStat::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.NgramStat.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NgramStat::release_text() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.NgramStat.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NgramStat::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.NgramStat.text)
}

// required uint64 freq = 2;
inline bool NgramStat::has_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NgramStat::set_has_freq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NgramStat::clear_has_freq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NgramStat::clear_freq() {
  freq_ = GOOGLE_ULONGLONG(0);
  clear_has_freq();
}
inline ::google::protobuf::uint64 NgramStat::freq() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramStat.freq)
  return freq_;
}
inline void NgramStat::set_freq(::google::protobuf::uint64 value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:trends_vkd.pb.NgramStat.freq)
}

// -------------------------------------------------------------------

// WindowStat

// repeated .trends_vkd.pb.NgramStat unigram = 1;
inline int WindowStat::unigram_size() const {
  return unigram_.size();
}
inline void WindowStat::clear_unigram() {
  unigram_.Clear();
}
inline const ::trends_vkd::pb::NgramStat& WindowStat::unigram(int index) const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.WindowStat.unigram)
  return unigram_.Get(index);
}
inline ::trends_vkd::pb::NgramStat* WindowStat::mutable_unigram(int index) {
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.WindowStat.unigram)
  return unigram_.Mutable(index);
}
inline ::trends_vkd::pb::NgramStat* WindowStat::add_unigram() {
  // @@protoc_insertion_point(field_add:trends_vkd.pb.WindowStat.unigram)
  return unigram_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
WindowStat::mutable_unigram() {
  // @@protoc_insertion_point(field_mutable_list:trends_vkd.pb.WindowStat.unigram)
  return &unigram_;
}
inline const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
WindowStat::unigram() const {
  // @@protoc_insertion_point(field_list:trends_vkd.pb.WindowStat.unigram)
  return unigram_;
}

// repeated .trends_vkd.pb.NgramStat bigram = 2;
inline int WindowStat::bigram_size() const {
  return bigram_.size();
}
inline void WindowStat::clear_bigram() {
  bigram_.Clear();
}
inline const ::trends_vkd::pb::NgramStat& WindowStat::bigram(int index) const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.WindowStat.bigram)
  return bigram_.Get(index);
}
inline ::trends_vkd::pb::NgramStat* WindowStat::mutable_bigram(int index) {
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.WindowStat.bigram)
  return bigram_.Mutable(index);
}
inline ::trends_vkd::pb::NgramStat* WindowStat::add_bigram() {
  // @@protoc_insertion_point(field_add:trends_vkd.pb.WindowStat.bigram)
  return bigram_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
WindowStat::mutable_bigram() {
  // @@protoc_insertion_point(field_mutable_list:trends_vkd.pb.WindowStat.bigram)
  return &bigram_;
}
inline const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
WindowStat::bigram() const {
  // @@protoc_insertion_point(field_list:trends_vkd.pb.WindowStat.bigram)
  return bigram_;
}

// repeated .trends_vkd.pb.NgramStat trigram = 3;
inline int WindowStat::trigram_size() const {
  return trigram_.size();
}
inline void WindowStat::clear_trigram() {
  trigram_.Clear();
}
inline const ::trends_vkd::pb::NgramStat& WindowStat::trigram(int index) const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.WindowStat.trigram)
  return trigram_.Get(index);
}
inline ::trends_vkd::pb::NgramStat* WindowStat::mutable_trigram(int index) {
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.WindowStat.trigram)
  return trigram_.Mutable(index);
}
inline ::trends_vkd::pb::NgramStat* WindowStat::add_trigram() {
  // @@protoc_insertion_point(field_add:trends_vkd.pb.WindowStat.trigram)
  return trigram_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >*
WindowStat::mutable_trigram() {
  // @@protoc_insertion_point(field_mutable_list:trends_vkd.pb.WindowStat.trigram)
  return &trigram_;
}
inline const ::google::protobuf::RepeatedPtrField< ::trends_vkd::pb::NgramStat >&
WindowStat::trigram() const {
  // @@protoc_insertion_point(field_list:trends_vkd.pb.WindowStat.trigram)
  return trigram_;
}

// -------------------------------------------------------------------

// ScoreInfo

// optional string text = 1;
inline bool ScoreInfo::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreInfo::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreInfo::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreInfo::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& ScoreInfo::text() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.ScoreInfo.text)
  return text_.GetNoArena();
}
inline void ScoreInfo::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trends_vkd.pb.ScoreInfo.text)
}
#if LANG_CXX11
inline void ScoreInfo::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trends_vkd.pb.ScoreInfo.text)
}
#endif
inline void ScoreInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trends_vkd.pb.ScoreInfo.text)
}
inline void ScoreInfo::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trends_vkd.pb.ScoreInfo.text)
}
inline ::std::string* ScoreInfo::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.ScoreInfo.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScoreInfo::release_text() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.ScoreInfo.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreInfo::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.ScoreInfo.text)
}

// optional double score = 2;
inline bool ScoreInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline double ScoreInfo::score() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.ScoreInfo.score)
  return score_;
}
inline void ScoreInfo::set_score(double value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:trends_vkd.pb.ScoreInfo.score)
}

// -------------------------------------------------------------------

// NgramScores

// optional .trends_vkd.pb.ScoreInfo unigram_info = 1;
inline bool NgramScores::has_unigram_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NgramScores::set_has_unigram_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NgramScores::clear_has_unigram_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NgramScores::clear_unigram_info() {
  if (unigram_info_ != NULL) unigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
  clear_has_unigram_info();
}
inline const ::trends_vkd::pb::ScoreInfo& NgramScores::unigram_info() const {
  const ::trends_vkd::pb::ScoreInfo* p = unigram_info_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramScores.unigram_info)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::ScoreInfo*>(
      &::trends_vkd::pb::_ScoreInfo_default_instance_);
}
inline ::trends_vkd::pb::ScoreInfo* NgramScores::mutable_unigram_info() {
  set_has_unigram_info();
  if (unigram_info_ == NULL) {
    unigram_info_ = new ::trends_vkd::pb::ScoreInfo;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.NgramScores.unigram_info)
  return unigram_info_;
}
inline ::trends_vkd::pb::ScoreInfo* NgramScores::release_unigram_info() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.NgramScores.unigram_info)
  clear_has_unigram_info();
  ::trends_vkd::pb::ScoreInfo* temp = unigram_info_;
  unigram_info_ = NULL;
  return temp;
}
inline void NgramScores::set_allocated_unigram_info(::trends_vkd::pb::ScoreInfo* unigram_info) {
  delete unigram_info_;
  unigram_info_ = unigram_info;
  if (unigram_info) {
    set_has_unigram_info();
  } else {
    clear_has_unigram_info();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.NgramScores.unigram_info)
}

// optional .trends_vkd.pb.ScoreInfo bigram_info = 2;
inline bool NgramScores::has_bigram_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NgramScores::set_has_bigram_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NgramScores::clear_has_bigram_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NgramScores::clear_bigram_info() {
  if (bigram_info_ != NULL) bigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
  clear_has_bigram_info();
}
inline const ::trends_vkd::pb::ScoreInfo& NgramScores::bigram_info() const {
  const ::trends_vkd::pb::ScoreInfo* p = bigram_info_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramScores.bigram_info)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::ScoreInfo*>(
      &::trends_vkd::pb::_ScoreInfo_default_instance_);
}
inline ::trends_vkd::pb::ScoreInfo* NgramScores::mutable_bigram_info() {
  set_has_bigram_info();
  if (bigram_info_ == NULL) {
    bigram_info_ = new ::trends_vkd::pb::ScoreInfo;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.NgramScores.bigram_info)
  return bigram_info_;
}
inline ::trends_vkd::pb::ScoreInfo* NgramScores::release_bigram_info() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.NgramScores.bigram_info)
  clear_has_bigram_info();
  ::trends_vkd::pb::ScoreInfo* temp = bigram_info_;
  bigram_info_ = NULL;
  return temp;
}
inline void NgramScores::set_allocated_bigram_info(::trends_vkd::pb::ScoreInfo* bigram_info) {
  delete bigram_info_;
  bigram_info_ = bigram_info;
  if (bigram_info) {
    set_has_bigram_info();
  } else {
    clear_has_bigram_info();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.NgramScores.bigram_info)
}

// optional .trends_vkd.pb.ScoreInfo trigram_info = 3;
inline bool NgramScores::has_trigram_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NgramScores::set_has_trigram_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NgramScores::clear_has_trigram_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NgramScores::clear_trigram_info() {
  if (trigram_info_ != NULL) trigram_info_->::trends_vkd::pb::ScoreInfo::Clear();
  clear_has_trigram_info();
}
inline const ::trends_vkd::pb::ScoreInfo& NgramScores::trigram_info() const {
  const ::trends_vkd::pb::ScoreInfo* p = trigram_info_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.NgramScores.trigram_info)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::ScoreInfo*>(
      &::trends_vkd::pb::_ScoreInfo_default_instance_);
}
inline ::trends_vkd::pb::ScoreInfo* NgramScores::mutable_trigram_info() {
  set_has_trigram_info();
  if (trigram_info_ == NULL) {
    trigram_info_ = new ::trends_vkd::pb::ScoreInfo;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.NgramScores.trigram_info)
  return trigram_info_;
}
inline ::trends_vkd::pb::ScoreInfo* NgramScores::release_trigram_info() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.NgramScores.trigram_info)
  clear_has_trigram_info();
  ::trends_vkd::pb::ScoreInfo* temp = trigram_info_;
  trigram_info_ = NULL;
  return temp;
}
inline void NgramScores::set_allocated_trigram_info(::trends_vkd::pb::ScoreInfo* trigram_info) {
  delete trigram_info_;
  trigram_info_ = trigram_info;
  if (trigram_info) {
    set_has_trigram_info();
  } else {
    clear_has_trigram_info();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.NgramScores.trigram_info)
}

// -------------------------------------------------------------------

// VkNgramStat

// optional .trends_vkd.pb.WindowStat now = 1;
inline bool VkNgramStat::has_now() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkNgramStat::set_has_now() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkNgramStat::clear_has_now() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkNgramStat::clear_now() {
  if (now_ != NULL) now_->::trends_vkd::pb::WindowStat::Clear();
  clear_has_now();
}
inline const ::trends_vkd::pb::WindowStat& VkNgramStat::now() const {
  const ::trends_vkd::pb::WindowStat* p = now_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.now)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::WindowStat*>(
      &::trends_vkd::pb::_WindowStat_default_instance_);
}
inline ::trends_vkd::pb::WindowStat* VkNgramStat::mutable_now() {
  set_has_now();
  if (now_ == NULL) {
    now_ = new ::trends_vkd::pb::WindowStat;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.VkNgramStat.now)
  return now_;
}
inline ::trends_vkd::pb::WindowStat* VkNgramStat::release_now() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.VkNgramStat.now)
  clear_has_now();
  ::trends_vkd::pb::WindowStat* temp = now_;
  now_ = NULL;
  return temp;
}
inline void VkNgramStat::set_allocated_now(::trends_vkd::pb::WindowStat* now) {
  delete now_;
  now_ = now;
  if (now) {
    set_has_now();
  } else {
    clear_has_now();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.VkNgramStat.now)
}

// optional .trends_vkd.pb.WindowStat day_ago = 2;
inline bool VkNgramStat::has_day_ago() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkNgramStat::set_has_day_ago() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkNgramStat::clear_has_day_ago() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkNgramStat::clear_day_ago() {
  if (day_ago_ != NULL) day_ago_->::trends_vkd::pb::WindowStat::Clear();
  clear_has_day_ago();
}
inline const ::trends_vkd::pb::WindowStat& VkNgramStat::day_ago() const {
  const ::trends_vkd::pb::WindowStat* p = day_ago_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.day_ago)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::WindowStat*>(
      &::trends_vkd::pb::_WindowStat_default_instance_);
}
inline ::trends_vkd::pb::WindowStat* VkNgramStat::mutable_day_ago() {
  set_has_day_ago();
  if (day_ago_ == NULL) {
    day_ago_ = new ::trends_vkd::pb::WindowStat;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.VkNgramStat.day_ago)
  return day_ago_;
}
inline ::trends_vkd::pb::WindowStat* VkNgramStat::release_day_ago() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.VkNgramStat.day_ago)
  clear_has_day_ago();
  ::trends_vkd::pb::WindowStat* temp = day_ago_;
  day_ago_ = NULL;
  return temp;
}
inline void VkNgramStat::set_allocated_day_ago(::trends_vkd::pb::WindowStat* day_ago) {
  delete day_ago_;
  day_ago_ = day_ago;
  if (day_ago) {
    set_has_day_ago();
  } else {
    clear_has_day_ago();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.VkNgramStat.day_ago)
}

// optional .trends_vkd.pb.WindowStat week_ago = 3;
inline bool VkNgramStat::has_week_ago() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkNgramStat::set_has_week_ago() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkNgramStat::clear_has_week_ago() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkNgramStat::clear_week_ago() {
  if (week_ago_ != NULL) week_ago_->::trends_vkd::pb::WindowStat::Clear();
  clear_has_week_ago();
}
inline const ::trends_vkd::pb::WindowStat& VkNgramStat::week_ago() const {
  const ::trends_vkd::pb::WindowStat* p = week_ago_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.week_ago)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::WindowStat*>(
      &::trends_vkd::pb::_WindowStat_default_instance_);
}
inline ::trends_vkd::pb::WindowStat* VkNgramStat::mutable_week_ago() {
  set_has_week_ago();
  if (week_ago_ == NULL) {
    week_ago_ = new ::trends_vkd::pb::WindowStat;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.VkNgramStat.week_ago)
  return week_ago_;
}
inline ::trends_vkd::pb::WindowStat* VkNgramStat::release_week_ago() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.VkNgramStat.week_ago)
  clear_has_week_ago();
  ::trends_vkd::pb::WindowStat* temp = week_ago_;
  week_ago_ = NULL;
  return temp;
}
inline void VkNgramStat::set_allocated_week_ago(::trends_vkd::pb::WindowStat* week_ago) {
  delete week_ago_;
  week_ago_ = week_ago;
  if (week_ago) {
    set_has_week_ago();
  } else {
    clear_has_week_ago();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.VkNgramStat.week_ago)
}

// optional double trend_score = 4;
inline bool VkNgramStat::has_trend_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkNgramStat::set_has_trend_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkNgramStat::clear_has_trend_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkNgramStat::clear_trend_score() {
  trend_score_ = 0;
  clear_has_trend_score();
}
inline double VkNgramStat::trend_score() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.trend_score)
  return trend_score_;
}
inline void VkNgramStat::set_trend_score(double value) {
  set_has_trend_score();
  trend_score_ = value;
  // @@protoc_insertion_point(field_set:trends_vkd.pb.VkNgramStat.trend_score)
}

// optional uint64 index_version = 5;
inline bool VkNgramStat::has_index_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkNgramStat::set_has_index_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkNgramStat::clear_has_index_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkNgramStat::clear_index_version() {
  index_version_ = GOOGLE_ULONGLONG(0);
  clear_has_index_version();
}
inline ::google::protobuf::uint64 VkNgramStat::index_version() const {
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.index_version)
  return index_version_;
}
inline void VkNgramStat::set_index_version(::google::protobuf::uint64 value) {
  set_has_index_version();
  index_version_ = value;
  // @@protoc_insertion_point(field_set:trends_vkd.pb.VkNgramStat.index_version)
}

// optional .trends_vkd.pb.NgramScores ngram_scores = 6;
inline bool VkNgramStat::has_ngram_scores() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkNgramStat::set_has_ngram_scores() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkNgramStat::clear_has_ngram_scores() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkNgramStat::clear_ngram_scores() {
  if (ngram_scores_ != NULL) ngram_scores_->::trends_vkd::pb::NgramScores::Clear();
  clear_has_ngram_scores();
}
inline const ::trends_vkd::pb::NgramScores& VkNgramStat::ngram_scores() const {
  const ::trends_vkd::pb::NgramScores* p = ngram_scores_;
  // @@protoc_insertion_point(field_get:trends_vkd.pb.VkNgramStat.ngram_scores)
  return p != NULL ? *p : *reinterpret_cast<const ::trends_vkd::pb::NgramScores*>(
      &::trends_vkd::pb::_NgramScores_default_instance_);
}
inline ::trends_vkd::pb::NgramScores* VkNgramStat::mutable_ngram_scores() {
  set_has_ngram_scores();
  if (ngram_scores_ == NULL) {
    ngram_scores_ = new ::trends_vkd::pb::NgramScores;
  }
  // @@protoc_insertion_point(field_mutable:trends_vkd.pb.VkNgramStat.ngram_scores)
  return ngram_scores_;
}
inline ::trends_vkd::pb::NgramScores* VkNgramStat::release_ngram_scores() {
  // @@protoc_insertion_point(field_release:trends_vkd.pb.VkNgramStat.ngram_scores)
  clear_has_ngram_scores();
  ::trends_vkd::pb::NgramScores* temp = ngram_scores_;
  ngram_scores_ = NULL;
  return temp;
}
inline void VkNgramStat::set_allocated_ngram_scores(::trends_vkd::pb::NgramScores* ngram_scores) {
  delete ngram_scores_;
  ngram_scores_ = ngram_scores;
  if (ngram_scores) {
    set_has_ngram_scores();
  } else {
    clear_has_ngram_scores();
  }
  // @@protoc_insertion_point(field_set_allocated:trends_vkd.pb.VkNgramStat.ngram_scores)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace trends_vkd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vk_5fngram_5fstat_2eproto__INCLUDED
