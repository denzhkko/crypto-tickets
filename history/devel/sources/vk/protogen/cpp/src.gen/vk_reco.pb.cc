// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_reco.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vk_reco.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class VkRecoContainerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkRecoContainer>
     _instance;
} _VkRecoContainer_default_instance_;
class VkRecoItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkRecoItem>
     _instance;
} _VkRecoItem_default_instance_;
class VkRecoItemMetadataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkRecoItemMetadata>
     _instance;
} _VkRecoItemMetadata_default_instance_;

namespace protobuf_vk_5freco_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoContainer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoContainer, common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoContainer, highly_recommended_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItem, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItem, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItem, num_encountered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItem, metadata_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItemMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItemMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItemMetadata, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItemMetadata, statviews_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkRecoItemMetadata, official_),
  1,
  0,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(VkRecoContainer)},
  { 9, 18, sizeof(VkRecoItem)},
  { 22, 30, sizeof(VkRecoItemMetadata)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkRecoContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkRecoItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkRecoItemMetadata_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vk_reco.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  _VkRecoContainer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkRecoContainer_default_instance_);_VkRecoItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkRecoItem_default_instance_);_VkRecoItemMetadata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkRecoItemMetadata_default_instance_);_VkRecoItem_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::ru::mail::go::webbase::blobs::VkRecoItemMetadata*>(
      ::ru::mail::go::webbase::blobs::VkRecoItemMetadata::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rvk_reco.proto\022\030ru.mail.go.webbase.blob"
      "s\032\024document_enums.proto\"\211\001\n\017VkRecoContai"
      "ner\0224\n\006common\030\001 \003(\0132$.ru.mail.go.webbase"
      ".blobs.VkRecoItem\022@\n\022highly_recommended\030"
      "\002 \003(\0132$.ru.mail.go.webbase.blobs.VkRecoI"
      "tem\"\207\001\n\nVkRecoItem\022\017\n\007user_id\030\001 \002(\003\022\017\n\007i"
      "tem_id\030\002 \002(\003\022\027\n\017num_encountered\030\003 \001(\003\022>\n"
      "\010metadata\030\004 \001(\0132,.ru.mail.go.webbase.blo"
      "bs.VkRecoItemMetadata\"K\n\022VkRecoItemMetad"
      "ata\022\020\n\010duration\030\001 \001(\005\022\021\n\tstatViews\030\002 \001(\003"
      "\022\020\n\010official\030\003 \001(\010B\010B\006VkReco"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vk_reco.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_vk_5freco_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkRecoContainer::kCommonFieldNumber;
const int VkRecoContainer::kHighlyRecommendedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkRecoContainer::VkRecoContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5freco_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkRecoContainer)
}
VkRecoContainer::VkRecoContainer(const VkRecoContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      common_(from.common_),
      highly_recommended_(from.highly_recommended_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkRecoContainer)
}

void VkRecoContainer::SharedCtor() {
  _cached_size_ = 0;
}

VkRecoContainer::~VkRecoContainer() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkRecoContainer)
  SharedDtor();
}

void VkRecoContainer::SharedDtor() {
}

void VkRecoContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkRecoContainer::descriptor() {
  protobuf_vk_5freco_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5freco_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkRecoContainer& VkRecoContainer::default_instance() {
  protobuf_vk_5freco_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkRecoContainer* VkRecoContainer::New(::google::protobuf::Arena* arena) const {
  VkRecoContainer* n = new VkRecoContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkRecoContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  common_.Clear();
  highly_recommended_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkRecoContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.VkRecoItem common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VkRecoItem highly_recommended = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_highly_recommended()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkRecoContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkRecoContainer)
  return false;
#undef DO_
}

void VkRecoContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.VkRecoItem common = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->common_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VkRecoItem highly_recommended = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->highly_recommended_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->highly_recommended(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkRecoContainer)
}

::google::protobuf::uint8* VkRecoContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.VkRecoItem common = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->common_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->common(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.VkRecoItem highly_recommended = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->highly_recommended_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->highly_recommended(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkRecoContainer)
  return target;
}

size_t VkRecoContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VkRecoItem common = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->common_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.VkRecoItem highly_recommended = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->highly_recommended_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highly_recommended(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkRecoContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const VkRecoContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkRecoContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkRecoContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkRecoContainer)
    MergeFrom(*source);
  }
}

void VkRecoContainer::MergeFrom(const VkRecoContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  common_.MergeFrom(from.common_);
  highly_recommended_.MergeFrom(from.highly_recommended_);
}

void VkRecoContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkRecoContainer::CopyFrom(const VkRecoContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkRecoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkRecoContainer::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->common())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->highly_recommended())) return false;
  return true;
}

void VkRecoContainer::Swap(VkRecoContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkRecoContainer::InternalSwap(VkRecoContainer* other) {
  using std::swap;
  common_.InternalSwap(&other->common_);
  highly_recommended_.InternalSwap(&other->highly_recommended_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkRecoContainer::GetMetadata() const {
  protobuf_vk_5freco_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5freco_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkRecoContainer

// repeated .ru.mail.go.webbase.blobs.VkRecoItem common = 1;
int VkRecoContainer::common_size() const {
  return common_.size();
}
void VkRecoContainer::clear_common() {
  common_.Clear();
}
const ::ru::mail::go::webbase::blobs::VkRecoItem& VkRecoContainer::common(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoContainer.common)
  return common_.Get(index);
}
::ru::mail::go::webbase::blobs::VkRecoItem* VkRecoContainer::mutable_common(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkRecoContainer.common)
  return common_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VkRecoItem* VkRecoContainer::add_common() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkRecoContainer.common)
  return common_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkRecoItem >*
VkRecoContainer::mutable_common() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkRecoContainer.common)
  return &common_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkRecoItem >&
VkRecoContainer::common() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkRecoContainer.common)
  return common_;
}

// repeated .ru.mail.go.webbase.blobs.VkRecoItem highly_recommended = 2;
int VkRecoContainer::highly_recommended_size() const {
  return highly_recommended_.size();
}
void VkRecoContainer::clear_highly_recommended() {
  highly_recommended_.Clear();
}
const ::ru::mail::go::webbase::blobs::VkRecoItem& VkRecoContainer::highly_recommended(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoContainer.highly_recommended)
  return highly_recommended_.Get(index);
}
::ru::mail::go::webbase::blobs::VkRecoItem* VkRecoContainer::mutable_highly_recommended(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkRecoContainer.highly_recommended)
  return highly_recommended_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VkRecoItem* VkRecoContainer::add_highly_recommended() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VkRecoContainer.highly_recommended)
  return highly_recommended_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkRecoItem >*
VkRecoContainer::mutable_highly_recommended() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VkRecoContainer.highly_recommended)
  return &highly_recommended_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VkRecoItem >&
VkRecoContainer::highly_recommended() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VkRecoContainer.highly_recommended)
  return highly_recommended_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkRecoItem::kUserIdFieldNumber;
const int VkRecoItem::kItemIdFieldNumber;
const int VkRecoItem::kNumEncounteredFieldNumber;
const int VkRecoItem::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkRecoItem::VkRecoItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5freco_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkRecoItem)
}
VkRecoItem::VkRecoItem(const VkRecoItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::ru::mail::go::webbase::blobs::VkRecoItemMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_encountered_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(num_encountered_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkRecoItem)
}

void VkRecoItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_encountered_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(num_encountered_));
}

VkRecoItem::~VkRecoItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkRecoItem)
  SharedDtor();
}

void VkRecoItem::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
}

void VkRecoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkRecoItem::descriptor() {
  protobuf_vk_5freco_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5freco_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkRecoItem& VkRecoItem::default_instance() {
  protobuf_vk_5freco_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkRecoItem* VkRecoItem::New(::google::protobuf::Arena* arena) const {
  VkRecoItem* n = new VkRecoItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkRecoItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkRecoItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_metadata()) {
    GOOGLE_DCHECK(metadata_ != NULL);
    metadata_->::ru::mail::go::webbase::blobs::VkRecoItemMetadata::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_encountered_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(num_encountered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkRecoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkRecoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_encountered = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_encountered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_encountered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkRecoItemMetadata metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkRecoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkRecoItem)
  return false;
#undef DO_
}

void VkRecoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkRecoItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int64 item_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item_id(), output);
  }

  // optional int64 num_encountered = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_encountered(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkRecoItemMetadata metadata = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metadata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkRecoItem)
}

::google::protobuf::uint8* VkRecoItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkRecoItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // required int64 item_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->item_id(), target);
  }

  // optional int64 num_encountered = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_encountered(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkRecoItemMetadata metadata = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->metadata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkRecoItem)
  return target;
}

size_t VkRecoItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VkRecoItem)
  size_t total_size = 0;

  if (has_user_id()) {
    // required int64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  if (has_item_id()) {
    // required int64 item_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->item_id());
  }

  return total_size;
}
size_t VkRecoItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkRecoItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());

    // required int64 item_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->item_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ru.mail.go.webbase.blobs.VkRecoItemMetadata metadata = 4;
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional int64 num_encountered = 3;
  if (has_num_encountered()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_encountered());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkRecoItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkRecoItem)
  GOOGLE_DCHECK_NE(&from, this);
  const VkRecoItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkRecoItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkRecoItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkRecoItem)
    MergeFrom(*source);
  }
}

void VkRecoItem::MergeFrom(const VkRecoItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkRecoItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_metadata()->::ru::mail::go::webbase::blobs::VkRecoItemMetadata::MergeFrom(from.metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_encountered_ = from.num_encountered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkRecoItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkRecoItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkRecoItem::CopyFrom(const VkRecoItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkRecoItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkRecoItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void VkRecoItem::Swap(VkRecoItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkRecoItem::InternalSwap(VkRecoItem* other) {
  using std::swap;
  swap(metadata_, other->metadata_);
  swap(user_id_, other->user_id_);
  swap(item_id_, other->item_id_);
  swap(num_encountered_, other->num_encountered_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkRecoItem::GetMetadata() const {
  protobuf_vk_5freco_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5freco_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkRecoItem

// required int64 user_id = 1;
bool VkRecoItem::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkRecoItem::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VkRecoItem::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkRecoItem::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 VkRecoItem::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoItem.user_id)
  return user_id_;
}
void VkRecoItem::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkRecoItem.user_id)
}

// required int64 item_id = 2;
bool VkRecoItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkRecoItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
void VkRecoItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkRecoItem::clear_item_id() {
  item_id_ = GOOGLE_LONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::int64 VkRecoItem::item_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoItem.item_id)
  return item_id_;
}
void VkRecoItem::set_item_id(::google::protobuf::int64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkRecoItem.item_id)
}

// optional int64 num_encountered = 3;
bool VkRecoItem::has_num_encountered() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkRecoItem::set_has_num_encountered() {
  _has_bits_[0] |= 0x00000008u;
}
void VkRecoItem::clear_has_num_encountered() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkRecoItem::clear_num_encountered() {
  num_encountered_ = GOOGLE_LONGLONG(0);
  clear_has_num_encountered();
}
::google::protobuf::int64 VkRecoItem::num_encountered() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoItem.num_encountered)
  return num_encountered_;
}
void VkRecoItem::set_num_encountered(::google::protobuf::int64 value) {
  set_has_num_encountered();
  num_encountered_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkRecoItem.num_encountered)
}

// optional .ru.mail.go.webbase.blobs.VkRecoItemMetadata metadata = 4;
bool VkRecoItem::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkRecoItem::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void VkRecoItem::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkRecoItem::clear_metadata() {
  if (metadata_ != NULL) metadata_->::ru::mail::go::webbase::blobs::VkRecoItemMetadata::Clear();
  clear_has_metadata();
}
const ::ru::mail::go::webbase::blobs::VkRecoItemMetadata& VkRecoItem::metadata() const {
  const ::ru::mail::go::webbase::blobs::VkRecoItemMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoItem.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VkRecoItemMetadata*>(
      &::ru::mail::go::webbase::blobs::_VkRecoItemMetadata_default_instance_);
}
::ru::mail::go::webbase::blobs::VkRecoItemMetadata* VkRecoItem::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) {
    metadata_ = new ::ru::mail::go::webbase::blobs::VkRecoItemMetadata;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VkRecoItem.metadata)
  return metadata_;
}
::ru::mail::go::webbase::blobs::VkRecoItemMetadata* VkRecoItem::release_metadata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VkRecoItem.metadata)
  clear_has_metadata();
  ::ru::mail::go::webbase::blobs::VkRecoItemMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void VkRecoItem::set_allocated_metadata(::ru::mail::go::webbase::blobs::VkRecoItemMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VkRecoItem.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkRecoItemMetadata::kDurationFieldNumber;
const int VkRecoItemMetadata::kStatViewsFieldNumber;
const int VkRecoItemMetadata::kOfficialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkRecoItemMetadata::VkRecoItemMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5freco_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
}
VkRecoItemMetadata::VkRecoItemMetadata(const VkRecoItemMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statviews_, &from.statviews_,
    static_cast<size_t>(reinterpret_cast<char*>(&official_) -
    reinterpret_cast<char*>(&statviews_)) + sizeof(official_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
}

void VkRecoItemMetadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&statviews_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&official_) -
      reinterpret_cast<char*>(&statviews_)) + sizeof(official_));
}

VkRecoItemMetadata::~VkRecoItemMetadata() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  SharedDtor();
}

void VkRecoItemMetadata::SharedDtor() {
}

void VkRecoItemMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkRecoItemMetadata::descriptor() {
  protobuf_vk_5freco_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5freco_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkRecoItemMetadata& VkRecoItemMetadata::default_instance() {
  protobuf_vk_5freco_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkRecoItemMetadata* VkRecoItemMetadata::New(::google::protobuf::Arena* arena) const {
  VkRecoItemMetadata* n = new VkRecoItemMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkRecoItemMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&statviews_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&official_) -
        reinterpret_cast<char*>(&statviews_)) + sizeof(official_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkRecoItemMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 statViews = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_statviews();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &statviews_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool official = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_official();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &official_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  return false;
#undef DO_
}

void VkRecoItemMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 duration = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional int64 statViews = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->statviews(), output);
  }

  // optional bool official = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->official(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
}

::google::protobuf::uint8* VkRecoItemMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 duration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // optional int64 statViews = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->statviews(), target);
  }

  // optional bool official = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->official(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  return target;
}

size_t VkRecoItemMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 statViews = 2;
    if (has_statviews()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->statviews());
    }

    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional bool official = 3;
    if (has_official()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkRecoItemMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const VkRecoItemMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkRecoItemMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
    MergeFrom(*source);
  }
}

void VkRecoItemMetadata::MergeFrom(const VkRecoItemMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      statviews_ = from.statviews_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      official_ = from.official_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkRecoItemMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkRecoItemMetadata::CopyFrom(const VkRecoItemMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VkRecoItemMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkRecoItemMetadata::IsInitialized() const {
  return true;
}

void VkRecoItemMetadata::Swap(VkRecoItemMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkRecoItemMetadata::InternalSwap(VkRecoItemMetadata* other) {
  using std::swap;
  swap(statviews_, other->statviews_);
  swap(duration_, other->duration_);
  swap(official_, other->official_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkRecoItemMetadata::GetMetadata() const {
  protobuf_vk_5freco_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5freco_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkRecoItemMetadata

// optional int32 duration = 1;
bool VkRecoItemMetadata::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkRecoItemMetadata::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void VkRecoItemMetadata::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkRecoItemMetadata::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 VkRecoItemMetadata::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoItemMetadata.duration)
  return duration_;
}
void VkRecoItemMetadata::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkRecoItemMetadata.duration)
}

// optional int64 statViews = 2;
bool VkRecoItemMetadata::has_statviews() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkRecoItemMetadata::set_has_statviews() {
  _has_bits_[0] |= 0x00000001u;
}
void VkRecoItemMetadata::clear_has_statviews() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkRecoItemMetadata::clear_statviews() {
  statviews_ = GOOGLE_LONGLONG(0);
  clear_has_statviews();
}
::google::protobuf::int64 VkRecoItemMetadata::statviews() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoItemMetadata.statViews)
  return statviews_;
}
void VkRecoItemMetadata::set_statviews(::google::protobuf::int64 value) {
  set_has_statviews();
  statviews_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkRecoItemMetadata.statViews)
}

// optional bool official = 3;
bool VkRecoItemMetadata::has_official() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkRecoItemMetadata::set_has_official() {
  _has_bits_[0] |= 0x00000004u;
}
void VkRecoItemMetadata::clear_has_official() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkRecoItemMetadata::clear_official() {
  official_ = false;
  clear_has_official();
}
bool VkRecoItemMetadata::official() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VkRecoItemMetadata.official)
  return official_;
}
void VkRecoItemMetadata::set_official(bool value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VkRecoItemMetadata.official)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
