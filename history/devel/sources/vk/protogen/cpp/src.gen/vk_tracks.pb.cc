// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_tracks.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vk_tracks.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace srch {
class VkTrackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkTrack>
     _instance;
} _VkTrack_default_instance_;
class VkTrackNailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkTrackNail>
     _instance;
} _VkTrackNail_default_instance_;
class NailFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NailFilter>
     _instance;
} _NailFilter_default_instance_;
class NailDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NailData>
     _instance;
} _NailData_default_instance_;
class MonitorDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MonitorData>
     _instance;
} _MonitorData_default_instance_;

namespace protobuf_vk_5ftracks_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, official_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, explicit__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrack, blacklist_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackNail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackNail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackNail, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackNail, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailFilter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailFilter, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailFilter, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailFilter, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailFilter, album_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, official_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, explicit__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailData, blacklist_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, storage_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, nails_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, storage_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, nails_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, monitor_file_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, storage_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, nails_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, monitor_file_age_),
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(VkTrack)},
  { 21, 28, sizeof(VkTrackNail)},
  { 30, 39, sizeof(NailFilter)},
  { 43, 56, sizeof(NailData)},
  { 64, 77, sizeof(MonitorData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkTrack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkTrackNail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NailFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NailData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MonitorData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vk_tracks.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gogo::protobuf_options_2eproto::InitDefaults();
  _VkTrack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkTrack_default_instance_);_VkTrackNail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkTrackNail_default_instance_);_NailFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NailFilter_default_instance_);_NailData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NailData_default_instance_);_MonitorData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MonitorData_default_instance_);_VkTrackNail_default_instance_._instance.get_mutable()->filter_ = const_cast< ::pb::srch::NailFilter*>(
      ::pb::srch::NailFilter::internal_default_instance());
  _VkTrackNail_default_instance_._instance.get_mutable()->data_ = const_cast< ::pb::srch::NailData*>(
      ::pb::srch::NailData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017vk_tracks.proto\022\007pb.srch\032\roptions.prot"
      "o\"\233\002\n\007VkTrack\022\034\n\nquery_text\030\001 \001(\tB\010\222\265\030\004\n"
      "\002id\022\032\n\005track\030\002 \001(\tB\013\222\265\030\007\n\005title\022\034\n\006artis"
      "t\030\003 \001(\tB\014\222\265\030\010\n\006artist\022\032\n\005album\030\004 \001(\tB\013\222\265"
      "\030\007\n\005album\022&\n\010official\030\005 \001(\005B\024\222\265\030\n\n\010offic"
      "ial\222\265\030\002\020\001\022&\n\010explicit\030\006 \001(\005B\024\222\265\030\n\n\010expli"
      "cit\222\265\030\002\020\001\022 \n\005child\030\007 \001(\005B\021\222\265\030\007\n\005child\222\265\030"
      "\002\020\001\022*\n\tblacklist\030\010 \001(\005B\027\222\265\030\r\n\013blackliste"
      "d\222\265\030\002\020\001\"m\n\013VkTrackNail\0221\n\006filter\030\001 \002(\0132\023"
      ".pb.srch.NailFilterB\014\222\265\030\010\n\006filter\022+\n\004dat"
      "a\030\002 \002(\0132\021.pb.srch.NailDataB\n\222\265\030\006\n\004data\"~"
      "\n\nNailFilter\022\032\n\010track_id\030\001 \001(\tB\010\222\265\030\004\n\002id"
      "\022\032\n\005track\030\002 \001(\tB\013\222\265\030\007\n\005title\022\034\n\006artist\030\003"
      " \001(\tB\014\222\265\030\010\n\006artist\022\032\n\005album\030\004 \001(\tB\013\222\265\030\007\n"
      "\005album\"\232\002\n\010NailData\022\032\n\010track_id\030\001 \001(\tB\010\222"
      "\265\030\004\n\002id\022\032\n\005track\030\002 \001(\tB\013\222\265\030\007\n\005title\022\034\n\006a"
      "rtist\030\003 \001(\tB\014\222\265\030\010\n\006artist\022\032\n\005album\030\004 \001(\t"
      "B\013\222\265\030\007\n\005album\022&\n\010official\030\005 \001(\005B\024\222\265\030\n\n\010o"
      "fficial\222\265\030\002\020\001\022&\n\010explicit\030\006 \001(\005B\024\222\265\030\n\n\010e"
      "xplicit\222\265\030\002\020\001\022 \n\005child\030\007 \001(\005B\021\222\265\030\007\n\005chil"
      "d\222\265\030\002\020\001\022*\n\tblacklist\030\010 \001(\005B\027\222\265\030\r\n\013blackl"
      "isted\222\265\030\002\020\001\"\346\002\n\013MonitorData\022(\n\014storage_s"
      "ize\030\001 \001(\rB\022\222\265\030\016\n\014storage_size\022$\n\nnails_s"
      "ize\030\002 \001(\rB\020\222\265\030\014\n\nnails_size\022.\n\017storage_v"
      "ersion\030\003 \001(\tB\025\222\265\030\021\n\017storage_version\022*\n\rn"
      "ails_version\030\004 \001(\tB\023\222\265\030\017\n\rnails_version\022"
      "-\n\021monitor_file_data\030\005 \001(\tB\022\222\265\030\016\n\014monito"
      "r_file\022&\n\013storage_age\030\006 \001(\tB\021\222\265\030\r\n\013stora"
      "ge_age\022\"\n\tnails_age\030\007 \001(\tB\017\222\265\030\013\n\tnails_a"
      "ge\0220\n\020monitor_file_age\030\010 \001(\tB\026\222\265\030\022\n\020moni"
      "tor_file_age"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vk_tracks.proto", &protobuf_RegisterTypes);
  ::gogo::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_vk_5ftracks_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkTrack::kQueryTextFieldNumber;
const int VkTrack::kTrackFieldNumber;
const int VkTrack::kArtistFieldNumber;
const int VkTrack::kAlbumFieldNumber;
const int VkTrack::kOfficialFieldNumber;
const int VkTrack::kExplicitFieldNumber;
const int VkTrack::kChildFieldNumber;
const int VkTrack::kBlacklistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkTrack::VkTrack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5ftracks_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.VkTrack)
}
VkTrack::VkTrack(const VkTrack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track()) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_artist()) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_album()) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  ::memcpy(&official_, &from.official_,
    static_cast<size_t>(reinterpret_cast<char*>(&blacklist_) -
    reinterpret_cast<char*>(&official_)) + sizeof(blacklist_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.VkTrack)
}

void VkTrack::SharedCtor() {
  _cached_size_ = 0;
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&official_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blacklist_) -
      reinterpret_cast<char*>(&official_)) + sizeof(blacklist_));
}

VkTrack::~VkTrack() {
  // @@protoc_insertion_point(destructor:pb.srch.VkTrack)
  SharedDtor();
}

void VkTrack::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkTrack::descriptor() {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkTrack& VkTrack::default_instance() {
  protobuf_vk_5ftracks_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkTrack* VkTrack::New(::google::protobuf::Arena* arena) const {
  VkTrack* n = new VkTrack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.VkTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!track_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!artist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*artist_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!album_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*album_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&official_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blacklist_) -
        reinterpret_cast<char*>(&official_)) + sizeof(blacklist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.VkTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_text = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.VkTrack.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string track = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.VkTrack.track");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string artist = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.VkTrack.artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string album = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.VkTrack.album");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 official = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_official();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 explicit = 6 [(.gogo.json) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_explicit_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explicit__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 child = 7 [(.gogo.json) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_child();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 blacklist = 8 [(.gogo.json) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_blacklist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blacklist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.VkTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.VkTrack)
  return false;
#undef DO_
}

void VkTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.VkTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.VkTrack.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // optional string track = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.VkTrack.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->track(), output);
  }

  // optional string artist = 3 [(.gogo.json) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.VkTrack.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->artist(), output);
  }

  // optional string album = 4 [(.gogo.json) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.VkTrack.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album(), output);
  }

  // optional int32 official = 5 [(.gogo.json) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->official(), output);
  }

  // optional int32 explicit = 6 [(.gogo.json) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->explicit_(), output);
  }

  // optional int32 child = 7 [(.gogo.json) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->child(), output);
  }

  // optional int32 blacklist = 8 [(.gogo.json) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->blacklist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.VkTrack)
}

::google::protobuf::uint8* VkTrack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.VkTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.VkTrack.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // optional string track = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.VkTrack.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track(), target);
  }

  // optional string artist = 3 [(.gogo.json) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.VkTrack.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artist(), target);
  }

  // optional string album = 4 [(.gogo.json) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.VkTrack.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }

  // optional int32 official = 5 [(.gogo.json) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->official(), target);
  }

  // optional int32 explicit = 6 [(.gogo.json) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->explicit_(), target);
  }

  // optional int32 child = 7 [(.gogo.json) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->child(), target);
  }

  // optional int32 blacklist = 8 [(.gogo.json) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->blacklist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.VkTrack)
  return target;
}

size_t VkTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.VkTrack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string query_text = 1 [(.gogo.json) = {
    if (has_query_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_text());
    }

    // optional string track = 2 [(.gogo.json) = {
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track());
    }

    // optional string artist = 3 [(.gogo.json) = {
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // optional string album = 4 [(.gogo.json) = {
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }

    // optional int32 official = 5 [(.gogo.json) = {
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official());
    }

    // optional int32 explicit = 6 [(.gogo.json) = {
    if (has_explicit_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->explicit_());
    }

    // optional int32 child = 7 [(.gogo.json) = {
    if (has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child());
    }

    // optional int32 blacklist = 8 [(.gogo.json) = {
    if (has_blacklist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blacklist());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkTrack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.VkTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const VkTrack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkTrack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.VkTrack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.VkTrack)
    MergeFrom(*source);
  }
}

void VkTrack::MergeFrom(const VkTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.VkTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query_text();
      query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_track();
      track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_artist();
      artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_album();
      album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
    }
    if (cached_has_bits & 0x00000010u) {
      official_ = from.official_;
    }
    if (cached_has_bits & 0x00000020u) {
      explicit__ = from.explicit__;
    }
    if (cached_has_bits & 0x00000040u) {
      child_ = from.child_;
    }
    if (cached_has_bits & 0x00000080u) {
      blacklist_ = from.blacklist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VkTrack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.VkTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkTrack::CopyFrom(const VkTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.VkTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkTrack::IsInitialized() const {
  return true;
}

void VkTrack::Swap(VkTrack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkTrack::InternalSwap(VkTrack* other) {
  using std::swap;
  query_text_.Swap(&other->query_text_);
  track_.Swap(&other->track_);
  artist_.Swap(&other->artist_);
  album_.Swap(&other->album_);
  swap(official_, other->official_);
  swap(explicit__, other->explicit__);
  swap(child_, other->child_);
  swap(blacklist_, other->blacklist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkTrack::GetMetadata() const {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkTrack

// optional string query_text = 1 [(.gogo.json) = {
bool VkTrack::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkTrack::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
void VkTrack::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkTrack::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& VkTrack::query_text() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.query_text)
  return query_text_.GetNoArena();
}
void VkTrack::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.query_text)
}
#if LANG_CXX11
void VkTrack::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.VkTrack.query_text)
}
#endif
void VkTrack::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.VkTrack.query_text)
}
void VkTrack::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.VkTrack.query_text)
}
::std::string* VkTrack::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrack.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrack::release_query_text() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrack.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrack::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrack.query_text)
}

// optional string track = 2 [(.gogo.json) = {
bool VkTrack::has_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkTrack::set_has_track() {
  _has_bits_[0] |= 0x00000002u;
}
void VkTrack::clear_has_track() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkTrack::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
const ::std::string& VkTrack::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.track)
  return track_.GetNoArena();
}
void VkTrack::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.track)
}
#if LANG_CXX11
void VkTrack::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.VkTrack.track)
}
#endif
void VkTrack::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.VkTrack.track)
}
void VkTrack::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.VkTrack.track)
}
::std::string* VkTrack::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrack.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrack::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrack.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrack::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrack.track)
}

// optional string artist = 3 [(.gogo.json) = {
bool VkTrack::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VkTrack::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
void VkTrack::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
void VkTrack::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
const ::std::string& VkTrack::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.artist)
  return artist_.GetNoArena();
}
void VkTrack::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.artist)
}
#if LANG_CXX11
void VkTrack::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.VkTrack.artist)
}
#endif
void VkTrack::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.VkTrack.artist)
}
void VkTrack::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.VkTrack.artist)
}
::std::string* VkTrack::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrack.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrack::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrack.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrack::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrack.artist)
}

// optional string album = 4 [(.gogo.json) = {
bool VkTrack::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VkTrack::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
void VkTrack::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
void VkTrack::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
const ::std::string& VkTrack::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.album)
  return album_.GetNoArena();
}
void VkTrack::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.album)
}
#if LANG_CXX11
void VkTrack::set_album(::std::string&& value) {
  set_has_album();
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.VkTrack.album)
}
#endif
void VkTrack::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.VkTrack.album)
}
void VkTrack::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.VkTrack.album)
}
::std::string* VkTrack::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrack.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrack::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrack.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrack::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrack.album)
}

// optional int32 official = 5 [(.gogo.json) = {
bool VkTrack::has_official() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VkTrack::set_has_official() {
  _has_bits_[0] |= 0x00000010u;
}
void VkTrack::clear_has_official() {
  _has_bits_[0] &= ~0x00000010u;
}
void VkTrack::clear_official() {
  official_ = 0;
  clear_has_official();
}
::google::protobuf::int32 VkTrack::official() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.official)
  return official_;
}
void VkTrack::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.official)
}

// optional int32 explicit = 6 [(.gogo.json) = {
bool VkTrack::has_explicit_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VkTrack::set_has_explicit_() {
  _has_bits_[0] |= 0x00000020u;
}
void VkTrack::clear_has_explicit_() {
  _has_bits_[0] &= ~0x00000020u;
}
void VkTrack::clear_explicit_() {
  explicit__ = 0;
  clear_has_explicit_();
}
::google::protobuf::int32 VkTrack::explicit_() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.explicit)
  return explicit__;
}
void VkTrack::set_explicit_(::google::protobuf::int32 value) {
  set_has_explicit_();
  explicit__ = value;
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.explicit)
}

// optional int32 child = 7 [(.gogo.json) = {
bool VkTrack::has_child() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VkTrack::set_has_child() {
  _has_bits_[0] |= 0x00000040u;
}
void VkTrack::clear_has_child() {
  _has_bits_[0] &= ~0x00000040u;
}
void VkTrack::clear_child() {
  child_ = 0;
  clear_has_child();
}
::google::protobuf::int32 VkTrack::child() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.child)
  return child_;
}
void VkTrack::set_child(::google::protobuf::int32 value) {
  set_has_child();
  child_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.child)
}

// optional int32 blacklist = 8 [(.gogo.json) = {
bool VkTrack::has_blacklist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VkTrack::set_has_blacklist() {
  _has_bits_[0] |= 0x00000080u;
}
void VkTrack::clear_has_blacklist() {
  _has_bits_[0] &= ~0x00000080u;
}
void VkTrack::clear_blacklist() {
  blacklist_ = 0;
  clear_has_blacklist();
}
::google::protobuf::int32 VkTrack::blacklist() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.blacklist)
  return blacklist_;
}
void VkTrack::set_blacklist(::google::protobuf::int32 value) {
  set_has_blacklist();
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.blacklist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkTrackNail::kFilterFieldNumber;
const int VkTrackNail::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkTrackNail::VkTrackNail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5ftracks_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.VkTrackNail)
}
VkTrackNail::VkTrackNail(const VkTrackNail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter()) {
    filter_ = new ::pb::srch::NailFilter(*from.filter_);
  } else {
    filter_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::pb::srch::NailData(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.srch.VkTrackNail)
}

void VkTrackNail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(data_));
}

VkTrackNail::~VkTrackNail() {
  // @@protoc_insertion_point(destructor:pb.srch.VkTrackNail)
  SharedDtor();
}

void VkTrackNail::SharedDtor() {
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete data_;
}

void VkTrackNail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkTrackNail::descriptor() {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkTrackNail& VkTrackNail::default_instance() {
  protobuf_vk_5ftracks_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkTrackNail* VkTrackNail::New(::google::protobuf::Arena* arena) const {
  VkTrackNail* n = new VkTrackNail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkTrackNail::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.VkTrackNail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filter_ != NULL);
      filter_->::pb::srch::NailFilter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::pb::srch::NailData::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VkTrackNail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.VkTrackNail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.srch.NailFilter filter = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.srch.NailData data = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.VkTrackNail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.VkTrackNail)
  return false;
#undef DO_
}

void VkTrackNail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.VkTrackNail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pb.srch.NailFilter filter = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->filter_, output);
  }

  // required .pb.srch.NailData data = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.VkTrackNail)
}

::google::protobuf::uint8* VkTrackNail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.VkTrackNail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pb.srch.NailFilter filter = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->filter_, deterministic, target);
  }

  // required .pb.srch.NailData data = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.VkTrackNail)
  return target;
}

size_t VkTrackNail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.srch.VkTrackNail)
  size_t total_size = 0;

  if (has_filter()) {
    // required .pb.srch.NailFilter filter = 1 [(.gogo.json) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);
  }

  if (has_data()) {
    // required .pb.srch.NailData data = 2 [(.gogo.json) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  return total_size;
}
size_t VkTrackNail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.VkTrackNail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pb.srch.NailFilter filter = 1 [(.gogo.json) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);

    // required .pb.srch.NailData data = 2 [(.gogo.json) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkTrackNail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.VkTrackNail)
  GOOGLE_DCHECK_NE(&from, this);
  const VkTrackNail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkTrackNail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.VkTrackNail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.VkTrackNail)
    MergeFrom(*source);
  }
}

void VkTrackNail::MergeFrom(const VkTrackNail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.VkTrackNail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_filter()->::pb::srch::NailFilter::MergeFrom(from.filter());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::pb::srch::NailData::MergeFrom(from.data());
    }
  }
}

void VkTrackNail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.VkTrackNail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkTrackNail::CopyFrom(const VkTrackNail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.VkTrackNail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkTrackNail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void VkTrackNail::Swap(VkTrackNail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkTrackNail::InternalSwap(VkTrackNail* other) {
  using std::swap;
  swap(filter_, other->filter_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkTrackNail::GetMetadata() const {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkTrackNail

// required .pb.srch.NailFilter filter = 1 [(.gogo.json) = {
bool VkTrackNail::has_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VkTrackNail::set_has_filter() {
  _has_bits_[0] |= 0x00000001u;
}
void VkTrackNail::clear_has_filter() {
  _has_bits_[0] &= ~0x00000001u;
}
void VkTrackNail::clear_filter() {
  if (filter_ != NULL) filter_->::pb::srch::NailFilter::Clear();
  clear_has_filter();
}
const ::pb::srch::NailFilter& VkTrackNail::filter() const {
  const ::pb::srch::NailFilter* p = filter_;
  // @@protoc_insertion_point(field_get:pb.srch.VkTrackNail.filter)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::NailFilter*>(
      &::pb::srch::_NailFilter_default_instance_);
}
::pb::srch::NailFilter* VkTrackNail::mutable_filter() {
  set_has_filter();
  if (filter_ == NULL) {
    filter_ = new ::pb::srch::NailFilter;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrackNail.filter)
  return filter_;
}
::pb::srch::NailFilter* VkTrackNail::release_filter() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrackNail.filter)
  clear_has_filter();
  ::pb::srch::NailFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
void VkTrackNail::set_allocated_filter(::pb::srch::NailFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrackNail.filter)
}

// required .pb.srch.NailData data = 2 [(.gogo.json) = {
bool VkTrackNail::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VkTrackNail::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void VkTrackNail::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void VkTrackNail::clear_data() {
  if (data_ != NULL) data_->::pb::srch::NailData::Clear();
  clear_has_data();
}
const ::pb::srch::NailData& VkTrackNail::data() const {
  const ::pb::srch::NailData* p = data_;
  // @@protoc_insertion_point(field_get:pb.srch.VkTrackNail.data)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::NailData*>(
      &::pb::srch::_NailData_default_instance_);
}
::pb::srch::NailData* VkTrackNail::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::pb::srch::NailData;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrackNail.data)
  return data_;
}
::pb::srch::NailData* VkTrackNail::release_data() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrackNail.data)
  clear_has_data();
  ::pb::srch::NailData* temp = data_;
  data_ = NULL;
  return temp;
}
void VkTrackNail::set_allocated_data(::pb::srch::NailData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrackNail.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NailFilter::kTrackIdFieldNumber;
const int NailFilter::kTrackFieldNumber;
const int NailFilter::kArtistFieldNumber;
const int NailFilter::kAlbumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NailFilter::NailFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5ftracks_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.NailFilter)
}
NailFilter::NailFilter(const NailFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track_id()) {
    track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track()) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_artist()) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_album()) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.srch.NailFilter)
}

void NailFilter::SharedCtor() {
  _cached_size_ = 0;
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NailFilter::~NailFilter() {
  // @@protoc_insertion_point(destructor:pb.srch.NailFilter)
  SharedDtor();
}

void NailFilter::SharedDtor() {
  track_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NailFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NailFilter::descriptor() {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NailFilter& NailFilter::default_instance() {
  protobuf_vk_5ftracks_2eproto::InitDefaults();
  return *internal_default_instance();
}

NailFilter* NailFilter::New(::google::protobuf::Arena* arena) const {
  NailFilter* n = new NailFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NailFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.NailFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!track_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!track_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!artist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*artist_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!album_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*album_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NailFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.NailFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string track_id = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_id().data(), static_cast<int>(this->track_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.NailFilter.track_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string track = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.NailFilter.track");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string artist = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.NailFilter.artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string album = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.NailFilter.album");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.NailFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.NailFilter)
  return false;
#undef DO_
}

void NailFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.NailFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string track_id = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailFilter.track_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->track_id(), output);
  }

  // optional string track = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailFilter.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->track(), output);
  }

  // optional string artist = 3 [(.gogo.json) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailFilter.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->artist(), output);
  }

  // optional string album = 4 [(.gogo.json) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailFilter.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.NailFilter)
}

::google::protobuf::uint8* NailFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.NailFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string track_id = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailFilter.track_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->track_id(), target);
  }

  // optional string track = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailFilter.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track(), target);
  }

  // optional string artist = 3 [(.gogo.json) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailFilter.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artist(), target);
  }

  // optional string album = 4 [(.gogo.json) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailFilter.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.NailFilter)
  return target;
}

size_t NailFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.NailFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string track_id = 1 [(.gogo.json) = {
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_id());
    }

    // optional string track = 2 [(.gogo.json) = {
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track());
    }

    // optional string artist = 3 [(.gogo.json) = {
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // optional string album = 4 [(.gogo.json) = {
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NailFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.NailFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const NailFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NailFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.NailFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.NailFilter)
    MergeFrom(*source);
  }
}

void NailFilter::MergeFrom(const NailFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.NailFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_track_id();
      track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_track();
      track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_artist();
      artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_album();
      album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
    }
  }
}

void NailFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.NailFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NailFilter::CopyFrom(const NailFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.NailFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NailFilter::IsInitialized() const {
  return true;
}

void NailFilter::Swap(NailFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NailFilter::InternalSwap(NailFilter* other) {
  using std::swap;
  track_id_.Swap(&other->track_id_);
  track_.Swap(&other->track_);
  artist_.Swap(&other->artist_);
  album_.Swap(&other->album_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NailFilter::GetMetadata() const {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NailFilter

// optional string track_id = 1 [(.gogo.json) = {
bool NailFilter::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NailFilter::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NailFilter::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NailFilter::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_id();
}
const ::std::string& NailFilter::track_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailFilter.track_id)
  return track_id_.GetNoArena();
}
void NailFilter::set_track_id(const ::std::string& value) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailFilter.track_id)
}
#if LANG_CXX11
void NailFilter::set_track_id(::std::string&& value) {
  set_has_track_id();
  track_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailFilter.track_id)
}
#endif
void NailFilter::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailFilter.track_id)
}
void NailFilter::set_track_id(const char* value, size_t size) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailFilter.track_id)
}
::std::string* NailFilter::mutable_track_id() {
  set_has_track_id();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailFilter.track_id)
  return track_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NailFilter::release_track_id() {
  // @@protoc_insertion_point(field_release:pb.srch.NailFilter.track_id)
  clear_has_track_id();
  return track_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NailFilter::set_allocated_track_id(::std::string* track_id) {
  if (track_id != NULL) {
    set_has_track_id();
  } else {
    clear_has_track_id();
  }
  track_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailFilter.track_id)
}

// optional string track = 2 [(.gogo.json) = {
bool NailFilter::has_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NailFilter::set_has_track() {
  _has_bits_[0] |= 0x00000002u;
}
void NailFilter::clear_has_track() {
  _has_bits_[0] &= ~0x00000002u;
}
void NailFilter::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
const ::std::string& NailFilter::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailFilter.track)
  return track_.GetNoArena();
}
void NailFilter::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailFilter.track)
}
#if LANG_CXX11
void NailFilter::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailFilter.track)
}
#endif
void NailFilter::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailFilter.track)
}
void NailFilter::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailFilter.track)
}
::std::string* NailFilter::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailFilter.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NailFilter::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.NailFilter.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NailFilter::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailFilter.track)
}

// optional string artist = 3 [(.gogo.json) = {
bool NailFilter::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NailFilter::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
void NailFilter::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
void NailFilter::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
const ::std::string& NailFilter::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailFilter.artist)
  return artist_.GetNoArena();
}
void NailFilter::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailFilter.artist)
}
#if LANG_CXX11
void NailFilter::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailFilter.artist)
}
#endif
void NailFilter::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailFilter.artist)
}
void NailFilter::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailFilter.artist)
}
::std::string* NailFilter::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailFilter.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NailFilter::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.NailFilter.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NailFilter::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailFilter.artist)
}

// optional string album = 4 [(.gogo.json) = {
bool NailFilter::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NailFilter::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
void NailFilter::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
void NailFilter::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
const ::std::string& NailFilter::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailFilter.album)
  return album_.GetNoArena();
}
void NailFilter::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailFilter.album)
}
#if LANG_CXX11
void NailFilter::set_album(::std::string&& value) {
  set_has_album();
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailFilter.album)
}
#endif
void NailFilter::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailFilter.album)
}
void NailFilter::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailFilter.album)
}
::std::string* NailFilter::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailFilter.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NailFilter::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.NailFilter.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NailFilter::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailFilter.album)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NailData::kTrackIdFieldNumber;
const int NailData::kTrackFieldNumber;
const int NailData::kArtistFieldNumber;
const int NailData::kAlbumFieldNumber;
const int NailData::kOfficialFieldNumber;
const int NailData::kExplicitFieldNumber;
const int NailData::kChildFieldNumber;
const int NailData::kBlacklistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NailData::NailData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5ftracks_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.NailData)
}
NailData::NailData(const NailData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track_id()) {
    track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track()) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_artist()) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_album()) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  ::memcpy(&official_, &from.official_,
    static_cast<size_t>(reinterpret_cast<char*>(&blacklist_) -
    reinterpret_cast<char*>(&official_)) + sizeof(blacklist_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.NailData)
}

void NailData::SharedCtor() {
  _cached_size_ = 0;
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&official_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blacklist_) -
      reinterpret_cast<char*>(&official_)) + sizeof(blacklist_));
}

NailData::~NailData() {
  // @@protoc_insertion_point(destructor:pb.srch.NailData)
  SharedDtor();
}

void NailData::SharedDtor() {
  track_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NailData::descriptor() {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NailData& NailData::default_instance() {
  protobuf_vk_5ftracks_2eproto::InitDefaults();
  return *internal_default_instance();
}

NailData* NailData::New(::google::protobuf::Arena* arena) const {
  NailData* n = new NailData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NailData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.NailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!track_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!track_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!artist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*artist_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!album_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*album_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&official_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blacklist_) -
        reinterpret_cast<char*>(&official_)) + sizeof(blacklist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.NailData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string track_id = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_id().data(), static_cast<int>(this->track_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.NailData.track_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string track = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.NailData.track");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string artist = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.NailData.artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string album = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.NailData.album");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 official = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_official();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 explicit = 6 [(.gogo.json) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_explicit_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explicit__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 child = 7 [(.gogo.json) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_child();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 blacklist = 8 [(.gogo.json) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_blacklist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blacklist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.NailData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.NailData)
  return false;
#undef DO_
}

void NailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.NailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string track_id = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailData.track_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->track_id(), output);
  }

  // optional string track = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailData.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->track(), output);
  }

  // optional string artist = 3 [(.gogo.json) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailData.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->artist(), output);
  }

  // optional string album = 4 [(.gogo.json) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailData.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album(), output);
  }

  // optional int32 official = 5 [(.gogo.json) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->official(), output);
  }

  // optional int32 explicit = 6 [(.gogo.json) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->explicit_(), output);
  }

  // optional int32 child = 7 [(.gogo.json) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->child(), output);
  }

  // optional int32 blacklist = 8 [(.gogo.json) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->blacklist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.NailData)
}

::google::protobuf::uint8* NailData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.NailData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string track_id = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailData.track_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->track_id(), target);
  }

  // optional string track = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailData.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track(), target);
  }

  // optional string artist = 3 [(.gogo.json) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailData.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artist(), target);
  }

  // optional string album = 4 [(.gogo.json) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.NailData.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }

  // optional int32 official = 5 [(.gogo.json) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->official(), target);
  }

  // optional int32 explicit = 6 [(.gogo.json) = {
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->explicit_(), target);
  }

  // optional int32 child = 7 [(.gogo.json) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->child(), target);
  }

  // optional int32 blacklist = 8 [(.gogo.json) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->blacklist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.NailData)
  return target;
}

size_t NailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.NailData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string track_id = 1 [(.gogo.json) = {
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_id());
    }

    // optional string track = 2 [(.gogo.json) = {
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track());
    }

    // optional string artist = 3 [(.gogo.json) = {
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // optional string album = 4 [(.gogo.json) = {
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }

    // optional int32 official = 5 [(.gogo.json) = {
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official());
    }

    // optional int32 explicit = 6 [(.gogo.json) = {
    if (has_explicit_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->explicit_());
    }

    // optional int32 child = 7 [(.gogo.json) = {
    if (has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child());
    }

    // optional int32 blacklist = 8 [(.gogo.json) = {
    if (has_blacklist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blacklist());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NailData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.NailData)
  GOOGLE_DCHECK_NE(&from, this);
  const NailData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NailData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.NailData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.NailData)
    MergeFrom(*source);
  }
}

void NailData::MergeFrom(const NailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.NailData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_track_id();
      track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_track();
      track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_artist();
      artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_album();
      album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
    }
    if (cached_has_bits & 0x00000010u) {
      official_ = from.official_;
    }
    if (cached_has_bits & 0x00000020u) {
      explicit__ = from.explicit__;
    }
    if (cached_has_bits & 0x00000040u) {
      child_ = from.child_;
    }
    if (cached_has_bits & 0x00000080u) {
      blacklist_ = from.blacklist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NailData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.NailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NailData::CopyFrom(const NailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.NailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NailData::IsInitialized() const {
  return true;
}

void NailData::Swap(NailData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NailData::InternalSwap(NailData* other) {
  using std::swap;
  track_id_.Swap(&other->track_id_);
  track_.Swap(&other->track_);
  artist_.Swap(&other->artist_);
  album_.Swap(&other->album_);
  swap(official_, other->official_);
  swap(explicit__, other->explicit__);
  swap(child_, other->child_);
  swap(blacklist_, other->blacklist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NailData::GetMetadata() const {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NailData

// optional string track_id = 1 [(.gogo.json) = {
bool NailData::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NailData::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NailData::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NailData::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_id();
}
const ::std::string& NailData::track_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.track_id)
  return track_id_.GetNoArena();
}
void NailData::set_track_id(const ::std::string& value) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailData.track_id)
}
#if LANG_CXX11
void NailData::set_track_id(::std::string&& value) {
  set_has_track_id();
  track_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailData.track_id)
}
#endif
void NailData::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailData.track_id)
}
void NailData::set_track_id(const char* value, size_t size) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailData.track_id)
}
::std::string* NailData::mutable_track_id() {
  set_has_track_id();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailData.track_id)
  return track_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NailData::release_track_id() {
  // @@protoc_insertion_point(field_release:pb.srch.NailData.track_id)
  clear_has_track_id();
  return track_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NailData::set_allocated_track_id(::std::string* track_id) {
  if (track_id != NULL) {
    set_has_track_id();
  } else {
    clear_has_track_id();
  }
  track_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailData.track_id)
}

// optional string track = 2 [(.gogo.json) = {
bool NailData::has_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NailData::set_has_track() {
  _has_bits_[0] |= 0x00000002u;
}
void NailData::clear_has_track() {
  _has_bits_[0] &= ~0x00000002u;
}
void NailData::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
const ::std::string& NailData::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.track)
  return track_.GetNoArena();
}
void NailData::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailData.track)
}
#if LANG_CXX11
void NailData::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailData.track)
}
#endif
void NailData::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailData.track)
}
void NailData::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailData.track)
}
::std::string* NailData::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailData.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NailData::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.NailData.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NailData::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailData.track)
}

// optional string artist = 3 [(.gogo.json) = {
bool NailData::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NailData::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
void NailData::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
void NailData::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
const ::std::string& NailData::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.artist)
  return artist_.GetNoArena();
}
void NailData::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailData.artist)
}
#if LANG_CXX11
void NailData::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailData.artist)
}
#endif
void NailData::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailData.artist)
}
void NailData::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailData.artist)
}
::std::string* NailData::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailData.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NailData::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.NailData.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NailData::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailData.artist)
}

// optional string album = 4 [(.gogo.json) = {
bool NailData::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NailData::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
void NailData::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
void NailData::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
const ::std::string& NailData::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.album)
  return album_.GetNoArena();
}
void NailData::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailData.album)
}
#if LANG_CXX11
void NailData::set_album(::std::string&& value) {
  set_has_album();
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailData.album)
}
#endif
void NailData::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailData.album)
}
void NailData::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailData.album)
}
::std::string* NailData::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailData.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NailData::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.NailData.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NailData::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailData.album)
}

// optional int32 official = 5 [(.gogo.json) = {
bool NailData::has_official() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NailData::set_has_official() {
  _has_bits_[0] |= 0x00000010u;
}
void NailData::clear_has_official() {
  _has_bits_[0] &= ~0x00000010u;
}
void NailData::clear_official() {
  official_ = 0;
  clear_has_official();
}
::google::protobuf::int32 NailData::official() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.official)
  return official_;
}
void NailData::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.NailData.official)
}

// optional int32 explicit = 6 [(.gogo.json) = {
bool NailData::has_explicit_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NailData::set_has_explicit_() {
  _has_bits_[0] |= 0x00000020u;
}
void NailData::clear_has_explicit_() {
  _has_bits_[0] &= ~0x00000020u;
}
void NailData::clear_explicit_() {
  explicit__ = 0;
  clear_has_explicit_();
}
::google::protobuf::int32 NailData::explicit_() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.explicit)
  return explicit__;
}
void NailData::set_explicit_(::google::protobuf::int32 value) {
  set_has_explicit_();
  explicit__ = value;
  // @@protoc_insertion_point(field_set:pb.srch.NailData.explicit)
}

// optional int32 child = 7 [(.gogo.json) = {
bool NailData::has_child() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NailData::set_has_child() {
  _has_bits_[0] |= 0x00000040u;
}
void NailData::clear_has_child() {
  _has_bits_[0] &= ~0x00000040u;
}
void NailData::clear_child() {
  child_ = 0;
  clear_has_child();
}
::google::protobuf::int32 NailData::child() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.child)
  return child_;
}
void NailData::set_child(::google::protobuf::int32 value) {
  set_has_child();
  child_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.NailData.child)
}

// optional int32 blacklist = 8 [(.gogo.json) = {
bool NailData::has_blacklist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NailData::set_has_blacklist() {
  _has_bits_[0] |= 0x00000080u;
}
void NailData::clear_has_blacklist() {
  _has_bits_[0] &= ~0x00000080u;
}
void NailData::clear_blacklist() {
  blacklist_ = 0;
  clear_has_blacklist();
}
::google::protobuf::int32 NailData::blacklist() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.blacklist)
  return blacklist_;
}
void NailData::set_blacklist(::google::protobuf::int32 value) {
  set_has_blacklist();
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.NailData.blacklist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitorData::kStorageSizeFieldNumber;
const int MonitorData::kNailsSizeFieldNumber;
const int MonitorData::kStorageVersionFieldNumber;
const int MonitorData::kNailsVersionFieldNumber;
const int MonitorData::kMonitorFileDataFieldNumber;
const int MonitorData::kStorageAgeFieldNumber;
const int MonitorData::kNailsAgeFieldNumber;
const int MonitorData::kMonitorFileAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitorData::MonitorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vk_5ftracks_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.MonitorData)
}
MonitorData::MonitorData(const MonitorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  storage_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_storage_version()) {
    storage_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_version_);
  }
  nails_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nails_version()) {
    nails_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nails_version_);
  }
  monitor_file_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_monitor_file_data()) {
    monitor_file_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_file_data_);
  }
  storage_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_storage_age()) {
    storage_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_age_);
  }
  nails_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nails_age()) {
    nails_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nails_age_);
  }
  monitor_file_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_monitor_file_age()) {
    monitor_file_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_file_age_);
  }
  ::memcpy(&storage_size_, &from.storage_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&nails_size_) -
    reinterpret_cast<char*>(&storage_size_)) + sizeof(nails_size_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.MonitorData)
}

void MonitorData::SharedCtor() {
  _cached_size_ = 0;
  storage_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nails_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_file_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nails_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_file_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&storage_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nails_size_) -
      reinterpret_cast<char*>(&storage_size_)) + sizeof(nails_size_));
}

MonitorData::~MonitorData() {
  // @@protoc_insertion_point(destructor:pb.srch.MonitorData)
  SharedDtor();
}

void MonitorData::SharedDtor() {
  storage_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nails_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_file_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_age_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nails_age_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_file_age_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MonitorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorData::descriptor() {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MonitorData& MonitorData::default_instance() {
  protobuf_vk_5ftracks_2eproto::InitDefaults();
  return *internal_default_instance();
}

MonitorData* MonitorData::New(::google::protobuf::Arena* arena) const {
  MonitorData* n = new MonitorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonitorData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.MonitorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!storage_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*storage_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!nails_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nails_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!monitor_file_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*monitor_file_data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!storage_age_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*storage_age_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!nails_age_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nails_age_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!monitor_file_age_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*monitor_file_age_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&storage_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nails_size_) -
        reinterpret_cast<char*>(&storage_size_)) + sizeof(nails_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MonitorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.MonitorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 storage_size = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_storage_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nails_size = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nails_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nails_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string storage_version = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storage_version().data(), static_cast<int>(this->storage_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.MonitorData.storage_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nails_version = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nails_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nails_version().data(), static_cast<int>(this->nails_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.MonitorData.nails_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string monitor_file_data = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor_file_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monitor_file_data().data(), static_cast<int>(this->monitor_file_data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.MonitorData.monitor_file_data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string storage_age = 6 [(.gogo.json) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_age()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storage_age().data(), static_cast<int>(this->storage_age().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.MonitorData.storage_age");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nails_age = 7 [(.gogo.json) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nails_age()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nails_age().data(), static_cast<int>(this->nails_age().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.MonitorData.nails_age");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string monitor_file_age = 8 [(.gogo.json) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor_file_age()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monitor_file_age().data(), static_cast<int>(this->monitor_file_age().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.MonitorData.monitor_file_age");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.MonitorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.MonitorData)
  return false;
#undef DO_
}

void MonitorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.MonitorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 storage_size = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storage_size(), output);
  }

  // optional uint32 nails_size = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nails_size(), output);
  }

  // optional string storage_version = 3 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storage_version().data(), static_cast<int>(this->storage_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.storage_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->storage_version(), output);
  }

  // optional string nails_version = 4 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nails_version().data(), static_cast<int>(this->nails_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.nails_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nails_version(), output);
  }

  // optional string monitor_file_data = 5 [(.gogo.json) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_file_data().data(), static_cast<int>(this->monitor_file_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.monitor_file_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->monitor_file_data(), output);
  }

  // optional string storage_age = 6 [(.gogo.json) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storage_age().data(), static_cast<int>(this->storage_age().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.storage_age");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->storage_age(), output);
  }

  // optional string nails_age = 7 [(.gogo.json) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nails_age().data(), static_cast<int>(this->nails_age().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.nails_age");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->nails_age(), output);
  }

  // optional string monitor_file_age = 8 [(.gogo.json) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_file_age().data(), static_cast<int>(this->monitor_file_age().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.monitor_file_age");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->monitor_file_age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.MonitorData)
}

::google::protobuf::uint8* MonitorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.MonitorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 storage_size = 1 [(.gogo.json) = {
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storage_size(), target);
  }

  // optional uint32 nails_size = 2 [(.gogo.json) = {
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nails_size(), target);
  }

  // optional string storage_version = 3 [(.gogo.json) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storage_version().data(), static_cast<int>(this->storage_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.storage_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->storage_version(), target);
  }

  // optional string nails_version = 4 [(.gogo.json) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nails_version().data(), static_cast<int>(this->nails_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.nails_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nails_version(), target);
  }

  // optional string monitor_file_data = 5 [(.gogo.json) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_file_data().data(), static_cast<int>(this->monitor_file_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.monitor_file_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->monitor_file_data(), target);
  }

  // optional string storage_age = 6 [(.gogo.json) = {
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storage_age().data(), static_cast<int>(this->storage_age().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.storage_age");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->storage_age(), target);
  }

  // optional string nails_age = 7 [(.gogo.json) = {
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nails_age().data(), static_cast<int>(this->nails_age().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.nails_age");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nails_age(), target);
  }

  // optional string monitor_file_age = 8 [(.gogo.json) = {
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_file_age().data(), static_cast<int>(this->monitor_file_age().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.MonitorData.monitor_file_age");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->monitor_file_age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.MonitorData)
  return target;
}

size_t MonitorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.MonitorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string storage_version = 3 [(.gogo.json) = {
    if (has_storage_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_version());
    }

    // optional string nails_version = 4 [(.gogo.json) = {
    if (has_nails_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nails_version());
    }

    // optional string monitor_file_data = 5 [(.gogo.json) = {
    if (has_monitor_file_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monitor_file_data());
    }

    // optional string storage_age = 6 [(.gogo.json) = {
    if (has_storage_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_age());
    }

    // optional string nails_age = 7 [(.gogo.json) = {
    if (has_nails_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nails_age());
    }

    // optional string monitor_file_age = 8 [(.gogo.json) = {
    if (has_monitor_file_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monitor_file_age());
    }

    // optional uint32 storage_size = 1 [(.gogo.json) = {
    if (has_storage_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_size());
    }

    // optional uint32 nails_size = 2 [(.gogo.json) = {
    if (has_nails_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nails_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.MonitorData)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MonitorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.MonitorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.MonitorData)
    MergeFrom(*source);
  }
}

void MonitorData::MergeFrom(const MonitorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.MonitorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_storage_version();
      storage_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nails_version();
      nails_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nails_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_monitor_file_data();
      monitor_file_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_file_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_storage_age();
      storage_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_age_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_nails_age();
      nails_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nails_age_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_monitor_file_age();
      monitor_file_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_file_age_);
    }
    if (cached_has_bits & 0x00000040u) {
      storage_size_ = from.storage_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      nails_size_ = from.nails_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MonitorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.MonitorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorData::CopyFrom(const MonitorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.MonitorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorData::IsInitialized() const {
  return true;
}

void MonitorData::Swap(MonitorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonitorData::InternalSwap(MonitorData* other) {
  using std::swap;
  storage_version_.Swap(&other->storage_version_);
  nails_version_.Swap(&other->nails_version_);
  monitor_file_data_.Swap(&other->monitor_file_data_);
  storage_age_.Swap(&other->storage_age_);
  nails_age_.Swap(&other->nails_age_);
  monitor_file_age_.Swap(&other->monitor_file_age_);
  swap(storage_size_, other->storage_size_);
  swap(nails_size_, other->nails_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MonitorData::GetMetadata() const {
  protobuf_vk_5ftracks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vk_5ftracks_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MonitorData

// optional uint32 storage_size = 1 [(.gogo.json) = {
bool MonitorData::has_storage_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MonitorData::set_has_storage_size() {
  _has_bits_[0] |= 0x00000040u;
}
void MonitorData::clear_has_storage_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void MonitorData::clear_storage_size() {
  storage_size_ = 0u;
  clear_has_storage_size();
}
::google::protobuf::uint32 MonitorData::storage_size() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.storage_size)
  return storage_size_;
}
void MonitorData::set_storage_size(::google::protobuf::uint32 value) {
  set_has_storage_size();
  storage_size_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.storage_size)
}

// optional uint32 nails_size = 2 [(.gogo.json) = {
bool MonitorData::has_nails_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MonitorData::set_has_nails_size() {
  _has_bits_[0] |= 0x00000080u;
}
void MonitorData::clear_has_nails_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void MonitorData::clear_nails_size() {
  nails_size_ = 0u;
  clear_has_nails_size();
}
::google::protobuf::uint32 MonitorData::nails_size() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.nails_size)
  return nails_size_;
}
void MonitorData::set_nails_size(::google::protobuf::uint32 value) {
  set_has_nails_size();
  nails_size_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.nails_size)
}

// optional string storage_version = 3 [(.gogo.json) = {
bool MonitorData::has_storage_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MonitorData::set_has_storage_version() {
  _has_bits_[0] |= 0x00000001u;
}
void MonitorData::clear_has_storage_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void MonitorData::clear_storage_version() {
  storage_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_version();
}
const ::std::string& MonitorData::storage_version() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.storage_version)
  return storage_version_.GetNoArena();
}
void MonitorData::set_storage_version(const ::std::string& value) {
  set_has_storage_version();
  storage_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.storage_version)
}
#if LANG_CXX11
void MonitorData::set_storage_version(::std::string&& value) {
  set_has_storage_version();
  storage_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.storage_version)
}
#endif
void MonitorData::set_storage_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_storage_version();
  storage_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.storage_version)
}
void MonitorData::set_storage_version(const char* value, size_t size) {
  set_has_storage_version();
  storage_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.storage_version)
}
::std::string* MonitorData::mutable_storage_version() {
  set_has_storage_version();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.storage_version)
  return storage_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MonitorData::release_storage_version() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.storage_version)
  clear_has_storage_version();
  return storage_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MonitorData::set_allocated_storage_version(::std::string* storage_version) {
  if (storage_version != NULL) {
    set_has_storage_version();
  } else {
    clear_has_storage_version();
  }
  storage_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_version);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.storage_version)
}

// optional string nails_version = 4 [(.gogo.json) = {
bool MonitorData::has_nails_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MonitorData::set_has_nails_version() {
  _has_bits_[0] |= 0x00000002u;
}
void MonitorData::clear_has_nails_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void MonitorData::clear_nails_version() {
  nails_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nails_version();
}
const ::std::string& MonitorData::nails_version() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.nails_version)
  return nails_version_.GetNoArena();
}
void MonitorData::set_nails_version(const ::std::string& value) {
  set_has_nails_version();
  nails_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.nails_version)
}
#if LANG_CXX11
void MonitorData::set_nails_version(::std::string&& value) {
  set_has_nails_version();
  nails_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.nails_version)
}
#endif
void MonitorData::set_nails_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nails_version();
  nails_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.nails_version)
}
void MonitorData::set_nails_version(const char* value, size_t size) {
  set_has_nails_version();
  nails_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.nails_version)
}
::std::string* MonitorData::mutable_nails_version() {
  set_has_nails_version();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.nails_version)
  return nails_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MonitorData::release_nails_version() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.nails_version)
  clear_has_nails_version();
  return nails_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MonitorData::set_allocated_nails_version(::std::string* nails_version) {
  if (nails_version != NULL) {
    set_has_nails_version();
  } else {
    clear_has_nails_version();
  }
  nails_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nails_version);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.nails_version)
}

// optional string monitor_file_data = 5 [(.gogo.json) = {
bool MonitorData::has_monitor_file_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MonitorData::set_has_monitor_file_data() {
  _has_bits_[0] |= 0x00000004u;
}
void MonitorData::clear_has_monitor_file_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void MonitorData::clear_monitor_file_data() {
  monitor_file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_monitor_file_data();
}
const ::std::string& MonitorData::monitor_file_data() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.monitor_file_data)
  return monitor_file_data_.GetNoArena();
}
void MonitorData::set_monitor_file_data(const ::std::string& value) {
  set_has_monitor_file_data();
  monitor_file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.monitor_file_data)
}
#if LANG_CXX11
void MonitorData::set_monitor_file_data(::std::string&& value) {
  set_has_monitor_file_data();
  monitor_file_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.monitor_file_data)
}
#endif
void MonitorData::set_monitor_file_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_monitor_file_data();
  monitor_file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.monitor_file_data)
}
void MonitorData::set_monitor_file_data(const char* value, size_t size) {
  set_has_monitor_file_data();
  monitor_file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.monitor_file_data)
}
::std::string* MonitorData::mutable_monitor_file_data() {
  set_has_monitor_file_data();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.monitor_file_data)
  return monitor_file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MonitorData::release_monitor_file_data() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.monitor_file_data)
  clear_has_monitor_file_data();
  return monitor_file_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MonitorData::set_allocated_monitor_file_data(::std::string* monitor_file_data) {
  if (monitor_file_data != NULL) {
    set_has_monitor_file_data();
  } else {
    clear_has_monitor_file_data();
  }
  monitor_file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitor_file_data);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.monitor_file_data)
}

// optional string storage_age = 6 [(.gogo.json) = {
bool MonitorData::has_storage_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MonitorData::set_has_storage_age() {
  _has_bits_[0] |= 0x00000008u;
}
void MonitorData::clear_has_storage_age() {
  _has_bits_[0] &= ~0x00000008u;
}
void MonitorData::clear_storage_age() {
  storage_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_age();
}
const ::std::string& MonitorData::storage_age() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.storage_age)
  return storage_age_.GetNoArena();
}
void MonitorData::set_storage_age(const ::std::string& value) {
  set_has_storage_age();
  storage_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.storage_age)
}
#if LANG_CXX11
void MonitorData::set_storage_age(::std::string&& value) {
  set_has_storage_age();
  storage_age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.storage_age)
}
#endif
void MonitorData::set_storage_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_storage_age();
  storage_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.storage_age)
}
void MonitorData::set_storage_age(const char* value, size_t size) {
  set_has_storage_age();
  storage_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.storage_age)
}
::std::string* MonitorData::mutable_storage_age() {
  set_has_storage_age();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.storage_age)
  return storage_age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MonitorData::release_storage_age() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.storage_age)
  clear_has_storage_age();
  return storage_age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MonitorData::set_allocated_storage_age(::std::string* storage_age) {
  if (storage_age != NULL) {
    set_has_storage_age();
  } else {
    clear_has_storage_age();
  }
  storage_age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_age);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.storage_age)
}

// optional string nails_age = 7 [(.gogo.json) = {
bool MonitorData::has_nails_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MonitorData::set_has_nails_age() {
  _has_bits_[0] |= 0x00000010u;
}
void MonitorData::clear_has_nails_age() {
  _has_bits_[0] &= ~0x00000010u;
}
void MonitorData::clear_nails_age() {
  nails_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nails_age();
}
const ::std::string& MonitorData::nails_age() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.nails_age)
  return nails_age_.GetNoArena();
}
void MonitorData::set_nails_age(const ::std::string& value) {
  set_has_nails_age();
  nails_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.nails_age)
}
#if LANG_CXX11
void MonitorData::set_nails_age(::std::string&& value) {
  set_has_nails_age();
  nails_age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.nails_age)
}
#endif
void MonitorData::set_nails_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nails_age();
  nails_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.nails_age)
}
void MonitorData::set_nails_age(const char* value, size_t size) {
  set_has_nails_age();
  nails_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.nails_age)
}
::std::string* MonitorData::mutable_nails_age() {
  set_has_nails_age();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.nails_age)
  return nails_age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MonitorData::release_nails_age() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.nails_age)
  clear_has_nails_age();
  return nails_age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MonitorData::set_allocated_nails_age(::std::string* nails_age) {
  if (nails_age != NULL) {
    set_has_nails_age();
  } else {
    clear_has_nails_age();
  }
  nails_age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nails_age);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.nails_age)
}

// optional string monitor_file_age = 8 [(.gogo.json) = {
bool MonitorData::has_monitor_file_age() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MonitorData::set_has_monitor_file_age() {
  _has_bits_[0] |= 0x00000020u;
}
void MonitorData::clear_has_monitor_file_age() {
  _has_bits_[0] &= ~0x00000020u;
}
void MonitorData::clear_monitor_file_age() {
  monitor_file_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_monitor_file_age();
}
const ::std::string& MonitorData::monitor_file_age() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.monitor_file_age)
  return monitor_file_age_.GetNoArena();
}
void MonitorData::set_monitor_file_age(const ::std::string& value) {
  set_has_monitor_file_age();
  monitor_file_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.monitor_file_age)
}
#if LANG_CXX11
void MonitorData::set_monitor_file_age(::std::string&& value) {
  set_has_monitor_file_age();
  monitor_file_age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.monitor_file_age)
}
#endif
void MonitorData::set_monitor_file_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_monitor_file_age();
  monitor_file_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.monitor_file_age)
}
void MonitorData::set_monitor_file_age(const char* value, size_t size) {
  set_has_monitor_file_age();
  monitor_file_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.monitor_file_age)
}
::std::string* MonitorData::mutable_monitor_file_age() {
  set_has_monitor_file_age();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.monitor_file_age)
  return monitor_file_age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MonitorData::release_monitor_file_age() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.monitor_file_age)
  clear_has_monitor_file_age();
  return monitor_file_age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MonitorData::set_allocated_monitor_file_age(::std::string* monitor_file_age) {
  if (monitor_file_age != NULL) {
    set_has_monitor_file_age();
  } else {
    clear_has_monitor_file_age();
  }
  monitor_file_age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitor_file_age);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.monitor_file_age)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace srch
}  // namespace pb

// @@protoc_insertion_point(global_scope)
