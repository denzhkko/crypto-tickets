// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vk_tracks.proto

#ifndef PROTOBUF_vk_5ftracks_2eproto__INCLUDED
#define PROTOBUF_vk_5ftracks_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace pb {
namespace srch {
class MonitorData;
class MonitorDataDefaultTypeInternal;
extern MonitorDataDefaultTypeInternal _MonitorData_default_instance_;
class NailData;
class NailDataDefaultTypeInternal;
extern NailDataDefaultTypeInternal _NailData_default_instance_;
class NailFilter;
class NailFilterDefaultTypeInternal;
extern NailFilterDefaultTypeInternal _NailFilter_default_instance_;
class VkTrack;
class VkTrackDefaultTypeInternal;
extern VkTrackDefaultTypeInternal _VkTrack_default_instance_;
class VkTrackNail;
class VkTrackNailDefaultTypeInternal;
extern VkTrackNailDefaultTypeInternal _VkTrackNail_default_instance_;
}  // namespace srch
}  // namespace pb

namespace pb {
namespace srch {

namespace protobuf_vk_5ftracks_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_vk_5ftracks_2eproto

// ===================================================================

class VkTrack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.VkTrack) */ {
 public:
  VkTrack();
  virtual ~VkTrack();

  VkTrack(const VkTrack& from);

  inline VkTrack& operator=(const VkTrack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkTrack(VkTrack&& from) noexcept
    : VkTrack() {
    *this = ::std::move(from);
  }

  inline VkTrack& operator=(VkTrack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkTrack& default_instance();

  static inline const VkTrack* internal_default_instance() {
    return reinterpret_cast<const VkTrack*>(
               &_VkTrack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VkTrack* other);
  friend void swap(VkTrack& a, VkTrack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkTrack* New() const PROTOBUF_FINAL { return New(NULL); }

  VkTrack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkTrack& from);
  void MergeFrom(const VkTrack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkTrack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query_text = 1 [(.gogo.json) = {
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // optional string track = 2 [(.gogo.json) = {
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 2;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // optional string artist = 3 [(.gogo.json) = {
  bool has_artist() const;
  void clear_artist();
  static const int kArtistFieldNumber = 3;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional string album = 4 [(.gogo.json) = {
  bool has_album() const;
  void clear_album();
  static const int kAlbumFieldNumber = 4;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // optional int32 official = 5 [(.gogo.json) = {
  bool has_official() const;
  void clear_official();
  static const int kOfficialFieldNumber = 5;
  ::google::protobuf::int32 official() const;
  void set_official(::google::protobuf::int32 value);

  // optional int32 explicit = 6 [(.gogo.json) = {
  bool has_explicit_() const;
  void clear_explicit_();
  static const int kExplicitFieldNumber = 6;
  ::google::protobuf::int32 explicit_() const;
  void set_explicit_(::google::protobuf::int32 value);

  // optional int32 child = 7 [(.gogo.json) = {
  bool has_child() const;
  void clear_child();
  static const int kChildFieldNumber = 7;
  ::google::protobuf::int32 child() const;
  void set_child(::google::protobuf::int32 value);

  // optional int32 blacklist = 8 [(.gogo.json) = {
  bool has_blacklist() const;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 8;
  ::google::protobuf::int32 blacklist() const;
  void set_blacklist(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.VkTrack)
 private:
  void set_has_query_text();
  void clear_has_query_text();
  void set_has_track();
  void clear_has_track();
  void set_has_artist();
  void clear_has_artist();
  void set_has_album();
  void clear_has_album();
  void set_has_official();
  void clear_has_official();
  void set_has_explicit_();
  void clear_has_explicit_();
  void set_has_child();
  void clear_has_child();
  void set_has_blacklist();
  void clear_has_blacklist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::int32 official_;
  ::google::protobuf::int32 explicit__;
  ::google::protobuf::int32 child_;
  ::google::protobuf::int32 blacklist_;
  friend struct protobuf_vk_5ftracks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkTrackNail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.VkTrackNail) */ {
 public:
  VkTrackNail();
  virtual ~VkTrackNail();

  VkTrackNail(const VkTrackNail& from);

  inline VkTrackNail& operator=(const VkTrackNail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkTrackNail(VkTrackNail&& from) noexcept
    : VkTrackNail() {
    *this = ::std::move(from);
  }

  inline VkTrackNail& operator=(VkTrackNail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VkTrackNail& default_instance();

  static inline const VkTrackNail* internal_default_instance() {
    return reinterpret_cast<const VkTrackNail*>(
               &_VkTrackNail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VkTrackNail* other);
  friend void swap(VkTrackNail& a, VkTrackNail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkTrackNail* New() const PROTOBUF_FINAL { return New(NULL); }

  VkTrackNail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkTrackNail& from);
  void MergeFrom(const VkTrackNail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkTrackNail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.srch.NailFilter filter = 1 [(.gogo.json) = {
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 1;
  const ::pb::srch::NailFilter& filter() const;
  ::pb::srch::NailFilter* mutable_filter();
  ::pb::srch::NailFilter* release_filter();
  void set_allocated_filter(::pb::srch::NailFilter* filter);

  // required .pb.srch.NailData data = 2 [(.gogo.json) = {
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::pb::srch::NailData& data() const;
  ::pb::srch::NailData* mutable_data();
  ::pb::srch::NailData* release_data();
  void set_allocated_data(::pb::srch::NailData* data);

  // @@protoc_insertion_point(class_scope:pb.srch.VkTrackNail)
 private:
  void set_has_filter();
  void clear_has_filter();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::pb::srch::NailFilter* filter_;
  ::pb::srch::NailData* data_;
  friend struct protobuf_vk_5ftracks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NailFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.NailFilter) */ {
 public:
  NailFilter();
  virtual ~NailFilter();

  NailFilter(const NailFilter& from);

  inline NailFilter& operator=(const NailFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NailFilter(NailFilter&& from) noexcept
    : NailFilter() {
    *this = ::std::move(from);
  }

  inline NailFilter& operator=(NailFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NailFilter& default_instance();

  static inline const NailFilter* internal_default_instance() {
    return reinterpret_cast<const NailFilter*>(
               &_NailFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NailFilter* other);
  friend void swap(NailFilter& a, NailFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NailFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  NailFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NailFilter& from);
  void MergeFrom(const NailFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NailFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string track_id = 1 [(.gogo.json) = {
  bool has_track_id() const;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 1;
  const ::std::string& track_id() const;
  void set_track_id(const ::std::string& value);
  #if LANG_CXX11
  void set_track_id(::std::string&& value);
  #endif
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  ::std::string* mutable_track_id();
  ::std::string* release_track_id();
  void set_allocated_track_id(::std::string* track_id);

  // optional string track = 2 [(.gogo.json) = {
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 2;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // optional string artist = 3 [(.gogo.json) = {
  bool has_artist() const;
  void clear_artist();
  static const int kArtistFieldNumber = 3;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional string album = 4 [(.gogo.json) = {
  bool has_album() const;
  void clear_album();
  static const int kAlbumFieldNumber = 4;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // @@protoc_insertion_point(class_scope:pb.srch.NailFilter)
 private:
  void set_has_track_id();
  void clear_has_track_id();
  void set_has_track();
  void clear_has_track();
  void set_has_artist();
  void clear_has_artist();
  void set_has_album();
  void clear_has_album();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr track_id_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  friend struct protobuf_vk_5ftracks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NailData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.NailData) */ {
 public:
  NailData();
  virtual ~NailData();

  NailData(const NailData& from);

  inline NailData& operator=(const NailData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NailData(NailData&& from) noexcept
    : NailData() {
    *this = ::std::move(from);
  }

  inline NailData& operator=(NailData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NailData& default_instance();

  static inline const NailData* internal_default_instance() {
    return reinterpret_cast<const NailData*>(
               &_NailData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(NailData* other);
  friend void swap(NailData& a, NailData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NailData* New() const PROTOBUF_FINAL { return New(NULL); }

  NailData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NailData& from);
  void MergeFrom(const NailData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NailData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string track_id = 1 [(.gogo.json) = {
  bool has_track_id() const;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 1;
  const ::std::string& track_id() const;
  void set_track_id(const ::std::string& value);
  #if LANG_CXX11
  void set_track_id(::std::string&& value);
  #endif
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  ::std::string* mutable_track_id();
  ::std::string* release_track_id();
  void set_allocated_track_id(::std::string* track_id);

  // optional string track = 2 [(.gogo.json) = {
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 2;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // optional string artist = 3 [(.gogo.json) = {
  bool has_artist() const;
  void clear_artist();
  static const int kArtistFieldNumber = 3;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional string album = 4 [(.gogo.json) = {
  bool has_album() const;
  void clear_album();
  static const int kAlbumFieldNumber = 4;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // optional int32 official = 5 [(.gogo.json) = {
  bool has_official() const;
  void clear_official();
  static const int kOfficialFieldNumber = 5;
  ::google::protobuf::int32 official() const;
  void set_official(::google::protobuf::int32 value);

  // optional int32 explicit = 6 [(.gogo.json) = {
  bool has_explicit_() const;
  void clear_explicit_();
  static const int kExplicitFieldNumber = 6;
  ::google::protobuf::int32 explicit_() const;
  void set_explicit_(::google::protobuf::int32 value);

  // optional int32 child = 7 [(.gogo.json) = {
  bool has_child() const;
  void clear_child();
  static const int kChildFieldNumber = 7;
  ::google::protobuf::int32 child() const;
  void set_child(::google::protobuf::int32 value);

  // optional int32 blacklist = 8 [(.gogo.json) = {
  bool has_blacklist() const;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 8;
  ::google::protobuf::int32 blacklist() const;
  void set_blacklist(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.NailData)
 private:
  void set_has_track_id();
  void clear_has_track_id();
  void set_has_track();
  void clear_has_track();
  void set_has_artist();
  void clear_has_artist();
  void set_has_album();
  void clear_has_album();
  void set_has_official();
  void clear_has_official();
  void set_has_explicit_();
  void clear_has_explicit_();
  void set_has_child();
  void clear_has_child();
  void set_has_blacklist();
  void clear_has_blacklist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr track_id_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::int32 official_;
  ::google::protobuf::int32 explicit__;
  ::google::protobuf::int32 child_;
  ::google::protobuf::int32 blacklist_;
  friend struct protobuf_vk_5ftracks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.MonitorData) */ {
 public:
  MonitorData();
  virtual ~MonitorData();

  MonitorData(const MonitorData& from);

  inline MonitorData& operator=(const MonitorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitorData(MonitorData&& from) noexcept
    : MonitorData() {
    *this = ::std::move(from);
  }

  inline MonitorData& operator=(MonitorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorData& default_instance();

  static inline const MonitorData* internal_default_instance() {
    return reinterpret_cast<const MonitorData*>(
               &_MonitorData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MonitorData* other);
  friend void swap(MonitorData& a, MonitorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitorData* New() const PROTOBUF_FINAL { return New(NULL); }

  MonitorData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MonitorData& from);
  void MergeFrom(const MonitorData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MonitorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string storage_version = 3 [(.gogo.json) = {
  bool has_storage_version() const;
  void clear_storage_version();
  static const int kStorageVersionFieldNumber = 3;
  const ::std::string& storage_version() const;
  void set_storage_version(const ::std::string& value);
  #if LANG_CXX11
  void set_storage_version(::std::string&& value);
  #endif
  void set_storage_version(const char* value);
  void set_storage_version(const char* value, size_t size);
  ::std::string* mutable_storage_version();
  ::std::string* release_storage_version();
  void set_allocated_storage_version(::std::string* storage_version);

  // optional string nails_version = 4 [(.gogo.json) = {
  bool has_nails_version() const;
  void clear_nails_version();
  static const int kNailsVersionFieldNumber = 4;
  const ::std::string& nails_version() const;
  void set_nails_version(const ::std::string& value);
  #if LANG_CXX11
  void set_nails_version(::std::string&& value);
  #endif
  void set_nails_version(const char* value);
  void set_nails_version(const char* value, size_t size);
  ::std::string* mutable_nails_version();
  ::std::string* release_nails_version();
  void set_allocated_nails_version(::std::string* nails_version);

  // optional string monitor_file_data = 5 [(.gogo.json) = {
  bool has_monitor_file_data() const;
  void clear_monitor_file_data();
  static const int kMonitorFileDataFieldNumber = 5;
  const ::std::string& monitor_file_data() const;
  void set_monitor_file_data(const ::std::string& value);
  #if LANG_CXX11
  void set_monitor_file_data(::std::string&& value);
  #endif
  void set_monitor_file_data(const char* value);
  void set_monitor_file_data(const char* value, size_t size);
  ::std::string* mutable_monitor_file_data();
  ::std::string* release_monitor_file_data();
  void set_allocated_monitor_file_data(::std::string* monitor_file_data);

  // optional string storage_age = 6 [(.gogo.json) = {
  bool has_storage_age() const;
  void clear_storage_age();
  static const int kStorageAgeFieldNumber = 6;
  const ::std::string& storage_age() const;
  void set_storage_age(const ::std::string& value);
  #if LANG_CXX11
  void set_storage_age(::std::string&& value);
  #endif
  void set_storage_age(const char* value);
  void set_storage_age(const char* value, size_t size);
  ::std::string* mutable_storage_age();
  ::std::string* release_storage_age();
  void set_allocated_storage_age(::std::string* storage_age);

  // optional string nails_age = 7 [(.gogo.json) = {
  bool has_nails_age() const;
  void clear_nails_age();
  static const int kNailsAgeFieldNumber = 7;
  const ::std::string& nails_age() const;
  void set_nails_age(const ::std::string& value);
  #if LANG_CXX11
  void set_nails_age(::std::string&& value);
  #endif
  void set_nails_age(const char* value);
  void set_nails_age(const char* value, size_t size);
  ::std::string* mutable_nails_age();
  ::std::string* release_nails_age();
  void set_allocated_nails_age(::std::string* nails_age);

  // optional string monitor_file_age = 8 [(.gogo.json) = {
  bool has_monitor_file_age() const;
  void clear_monitor_file_age();
  static const int kMonitorFileAgeFieldNumber = 8;
  const ::std::string& monitor_file_age() const;
  void set_monitor_file_age(const ::std::string& value);
  #if LANG_CXX11
  void set_monitor_file_age(::std::string&& value);
  #endif
  void set_monitor_file_age(const char* value);
  void set_monitor_file_age(const char* value, size_t size);
  ::std::string* mutable_monitor_file_age();
  ::std::string* release_monitor_file_age();
  void set_allocated_monitor_file_age(::std::string* monitor_file_age);

  // optional uint32 storage_size = 1 [(.gogo.json) = {
  bool has_storage_size() const;
  void clear_storage_size();
  static const int kStorageSizeFieldNumber = 1;
  ::google::protobuf::uint32 storage_size() const;
  void set_storage_size(::google::protobuf::uint32 value);

  // optional uint32 nails_size = 2 [(.gogo.json) = {
  bool has_nails_size() const;
  void clear_nails_size();
  static const int kNailsSizeFieldNumber = 2;
  ::google::protobuf::uint32 nails_size() const;
  void set_nails_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.MonitorData)
 private:
  void set_has_storage_size();
  void clear_has_storage_size();
  void set_has_nails_size();
  void clear_has_nails_size();
  void set_has_storage_version();
  void clear_has_storage_version();
  void set_has_nails_version();
  void clear_has_nails_version();
  void set_has_monitor_file_data();
  void clear_has_monitor_file_data();
  void set_has_storage_age();
  void clear_has_storage_age();
  void set_has_nails_age();
  void clear_has_nails_age();
  void set_has_monitor_file_age();
  void clear_has_monitor_file_age();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr storage_version_;
  ::google::protobuf::internal::ArenaStringPtr nails_version_;
  ::google::protobuf::internal::ArenaStringPtr monitor_file_data_;
  ::google::protobuf::internal::ArenaStringPtr storage_age_;
  ::google::protobuf::internal::ArenaStringPtr nails_age_;
  ::google::protobuf::internal::ArenaStringPtr monitor_file_age_;
  ::google::protobuf::uint32 storage_size_;
  ::google::protobuf::uint32 nails_size_;
  friend struct protobuf_vk_5ftracks_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VkTrack

// optional string query_text = 1 [(.gogo.json) = {
inline bool VkTrack::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkTrack::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkTrack::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkTrack::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& VkTrack::query_text() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.query_text)
  return query_text_.GetNoArena();
}
inline void VkTrack::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.query_text)
}
#if LANG_CXX11
inline void VkTrack::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.VkTrack.query_text)
}
#endif
inline void VkTrack::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.VkTrack.query_text)
}
inline void VkTrack::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.VkTrack.query_text)
}
inline ::std::string* VkTrack::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrack.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrack::release_query_text() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrack.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrack::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrack.query_text)
}

// optional string track = 2 [(.gogo.json) = {
inline bool VkTrack::has_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkTrack::set_has_track() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkTrack::clear_has_track() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkTrack::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
inline const ::std::string& VkTrack::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.track)
  return track_.GetNoArena();
}
inline void VkTrack::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.track)
}
#if LANG_CXX11
inline void VkTrack::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.VkTrack.track)
}
#endif
inline void VkTrack::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.VkTrack.track)
}
inline void VkTrack::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.VkTrack.track)
}
inline ::std::string* VkTrack::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrack.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrack::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrack.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrack::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrack.track)
}

// optional string artist = 3 [(.gogo.json) = {
inline bool VkTrack::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VkTrack::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VkTrack::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VkTrack::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
inline const ::std::string& VkTrack::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.artist)
  return artist_.GetNoArena();
}
inline void VkTrack::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.artist)
}
#if LANG_CXX11
inline void VkTrack::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.VkTrack.artist)
}
#endif
inline void VkTrack::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.VkTrack.artist)
}
inline void VkTrack::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.VkTrack.artist)
}
inline ::std::string* VkTrack::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrack.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrack::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrack.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrack::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrack.artist)
}

// optional string album = 4 [(.gogo.json) = {
inline bool VkTrack::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VkTrack::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VkTrack::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VkTrack::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
inline const ::std::string& VkTrack::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.album)
  return album_.GetNoArena();
}
inline void VkTrack::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.album)
}
#if LANG_CXX11
inline void VkTrack::set_album(::std::string&& value) {
  set_has_album();
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.VkTrack.album)
}
#endif
inline void VkTrack::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.VkTrack.album)
}
inline void VkTrack::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.VkTrack.album)
}
inline ::std::string* VkTrack::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrack.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrack::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrack.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrack::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrack.album)
}

// optional int32 official = 5 [(.gogo.json) = {
inline bool VkTrack::has_official() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VkTrack::set_has_official() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VkTrack::clear_has_official() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VkTrack::clear_official() {
  official_ = 0;
  clear_has_official();
}
inline ::google::protobuf::int32 VkTrack::official() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.official)
  return official_;
}
inline void VkTrack::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.official)
}

// optional int32 explicit = 6 [(.gogo.json) = {
inline bool VkTrack::has_explicit_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VkTrack::set_has_explicit_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VkTrack::clear_has_explicit_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VkTrack::clear_explicit_() {
  explicit__ = 0;
  clear_has_explicit_();
}
inline ::google::protobuf::int32 VkTrack::explicit_() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.explicit)
  return explicit__;
}
inline void VkTrack::set_explicit_(::google::protobuf::int32 value) {
  set_has_explicit_();
  explicit__ = value;
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.explicit)
}

// optional int32 child = 7 [(.gogo.json) = {
inline bool VkTrack::has_child() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VkTrack::set_has_child() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VkTrack::clear_has_child() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VkTrack::clear_child() {
  child_ = 0;
  clear_has_child();
}
inline ::google::protobuf::int32 VkTrack::child() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.child)
  return child_;
}
inline void VkTrack::set_child(::google::protobuf::int32 value) {
  set_has_child();
  child_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.child)
}

// optional int32 blacklist = 8 [(.gogo.json) = {
inline bool VkTrack::has_blacklist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VkTrack::set_has_blacklist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VkTrack::clear_has_blacklist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VkTrack::clear_blacklist() {
  blacklist_ = 0;
  clear_has_blacklist();
}
inline ::google::protobuf::int32 VkTrack::blacklist() const {
  // @@protoc_insertion_point(field_get:pb.srch.VkTrack.blacklist)
  return blacklist_;
}
inline void VkTrack::set_blacklist(::google::protobuf::int32 value) {
  set_has_blacklist();
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.VkTrack.blacklist)
}

// -------------------------------------------------------------------

// VkTrackNail

// required .pb.srch.NailFilter filter = 1 [(.gogo.json) = {
inline bool VkTrackNail::has_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VkTrackNail::set_has_filter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VkTrackNail::clear_has_filter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VkTrackNail::clear_filter() {
  if (filter_ != NULL) filter_->::pb::srch::NailFilter::Clear();
  clear_has_filter();
}
inline const ::pb::srch::NailFilter& VkTrackNail::filter() const {
  const ::pb::srch::NailFilter* p = filter_;
  // @@protoc_insertion_point(field_get:pb.srch.VkTrackNail.filter)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::NailFilter*>(
      &::pb::srch::_NailFilter_default_instance_);
}
inline ::pb::srch::NailFilter* VkTrackNail::mutable_filter() {
  set_has_filter();
  if (filter_ == NULL) {
    filter_ = new ::pb::srch::NailFilter;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrackNail.filter)
  return filter_;
}
inline ::pb::srch::NailFilter* VkTrackNail::release_filter() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrackNail.filter)
  clear_has_filter();
  ::pb::srch::NailFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void VkTrackNail::set_allocated_filter(::pb::srch::NailFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrackNail.filter)
}

// required .pb.srch.NailData data = 2 [(.gogo.json) = {
inline bool VkTrackNail::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VkTrackNail::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VkTrackNail::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VkTrackNail::clear_data() {
  if (data_ != NULL) data_->::pb::srch::NailData::Clear();
  clear_has_data();
}
inline const ::pb::srch::NailData& VkTrackNail::data() const {
  const ::pb::srch::NailData* p = data_;
  // @@protoc_insertion_point(field_get:pb.srch.VkTrackNail.data)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::NailData*>(
      &::pb::srch::_NailData_default_instance_);
}
inline ::pb::srch::NailData* VkTrackNail::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::pb::srch::NailData;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.VkTrackNail.data)
  return data_;
}
inline ::pb::srch::NailData* VkTrackNail::release_data() {
  // @@protoc_insertion_point(field_release:pb.srch.VkTrackNail.data)
  clear_has_data();
  ::pb::srch::NailData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void VkTrackNail::set_allocated_data(::pb::srch::NailData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.VkTrackNail.data)
}

// -------------------------------------------------------------------

// NailFilter

// optional string track_id = 1 [(.gogo.json) = {
inline bool NailFilter::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NailFilter::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NailFilter::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NailFilter::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_id();
}
inline const ::std::string& NailFilter::track_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailFilter.track_id)
  return track_id_.GetNoArena();
}
inline void NailFilter::set_track_id(const ::std::string& value) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailFilter.track_id)
}
#if LANG_CXX11
inline void NailFilter::set_track_id(::std::string&& value) {
  set_has_track_id();
  track_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailFilter.track_id)
}
#endif
inline void NailFilter::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailFilter.track_id)
}
inline void NailFilter::set_track_id(const char* value, size_t size) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailFilter.track_id)
}
inline ::std::string* NailFilter::mutable_track_id() {
  set_has_track_id();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailFilter.track_id)
  return track_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NailFilter::release_track_id() {
  // @@protoc_insertion_point(field_release:pb.srch.NailFilter.track_id)
  clear_has_track_id();
  return track_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NailFilter::set_allocated_track_id(::std::string* track_id) {
  if (track_id != NULL) {
    set_has_track_id();
  } else {
    clear_has_track_id();
  }
  track_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailFilter.track_id)
}

// optional string track = 2 [(.gogo.json) = {
inline bool NailFilter::has_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NailFilter::set_has_track() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NailFilter::clear_has_track() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NailFilter::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
inline const ::std::string& NailFilter::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailFilter.track)
  return track_.GetNoArena();
}
inline void NailFilter::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailFilter.track)
}
#if LANG_CXX11
inline void NailFilter::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailFilter.track)
}
#endif
inline void NailFilter::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailFilter.track)
}
inline void NailFilter::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailFilter.track)
}
inline ::std::string* NailFilter::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailFilter.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NailFilter::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.NailFilter.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NailFilter::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailFilter.track)
}

// optional string artist = 3 [(.gogo.json) = {
inline bool NailFilter::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NailFilter::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NailFilter::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NailFilter::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
inline const ::std::string& NailFilter::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailFilter.artist)
  return artist_.GetNoArena();
}
inline void NailFilter::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailFilter.artist)
}
#if LANG_CXX11
inline void NailFilter::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailFilter.artist)
}
#endif
inline void NailFilter::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailFilter.artist)
}
inline void NailFilter::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailFilter.artist)
}
inline ::std::string* NailFilter::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailFilter.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NailFilter::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.NailFilter.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NailFilter::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailFilter.artist)
}

// optional string album = 4 [(.gogo.json) = {
inline bool NailFilter::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NailFilter::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NailFilter::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NailFilter::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
inline const ::std::string& NailFilter::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailFilter.album)
  return album_.GetNoArena();
}
inline void NailFilter::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailFilter.album)
}
#if LANG_CXX11
inline void NailFilter::set_album(::std::string&& value) {
  set_has_album();
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailFilter.album)
}
#endif
inline void NailFilter::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailFilter.album)
}
inline void NailFilter::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailFilter.album)
}
inline ::std::string* NailFilter::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailFilter.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NailFilter::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.NailFilter.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NailFilter::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailFilter.album)
}

// -------------------------------------------------------------------

// NailData

// optional string track_id = 1 [(.gogo.json) = {
inline bool NailData::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NailData::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NailData::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NailData::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_id();
}
inline const ::std::string& NailData::track_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.track_id)
  return track_id_.GetNoArena();
}
inline void NailData::set_track_id(const ::std::string& value) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailData.track_id)
}
#if LANG_CXX11
inline void NailData::set_track_id(::std::string&& value) {
  set_has_track_id();
  track_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailData.track_id)
}
#endif
inline void NailData::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailData.track_id)
}
inline void NailData::set_track_id(const char* value, size_t size) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailData.track_id)
}
inline ::std::string* NailData::mutable_track_id() {
  set_has_track_id();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailData.track_id)
  return track_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NailData::release_track_id() {
  // @@protoc_insertion_point(field_release:pb.srch.NailData.track_id)
  clear_has_track_id();
  return track_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NailData::set_allocated_track_id(::std::string* track_id) {
  if (track_id != NULL) {
    set_has_track_id();
  } else {
    clear_has_track_id();
  }
  track_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailData.track_id)
}

// optional string track = 2 [(.gogo.json) = {
inline bool NailData::has_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NailData::set_has_track() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NailData::clear_has_track() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NailData::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
inline const ::std::string& NailData::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.track)
  return track_.GetNoArena();
}
inline void NailData::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailData.track)
}
#if LANG_CXX11
inline void NailData::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailData.track)
}
#endif
inline void NailData::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailData.track)
}
inline void NailData::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailData.track)
}
inline ::std::string* NailData::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailData.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NailData::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.NailData.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NailData::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailData.track)
}

// optional string artist = 3 [(.gogo.json) = {
inline bool NailData::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NailData::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NailData::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NailData::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
inline const ::std::string& NailData::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.artist)
  return artist_.GetNoArena();
}
inline void NailData::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailData.artist)
}
#if LANG_CXX11
inline void NailData::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailData.artist)
}
#endif
inline void NailData::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailData.artist)
}
inline void NailData::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailData.artist)
}
inline ::std::string* NailData::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailData.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NailData::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.NailData.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NailData::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailData.artist)
}

// optional string album = 4 [(.gogo.json) = {
inline bool NailData::has_album() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NailData::set_has_album() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NailData::clear_has_album() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NailData::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_album();
}
inline const ::std::string& NailData::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.album)
  return album_.GetNoArena();
}
inline void NailData::set_album(const ::std::string& value) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.NailData.album)
}
#if LANG_CXX11
inline void NailData::set_album(::std::string&& value) {
  set_has_album();
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.NailData.album)
}
#endif
inline void NailData::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.NailData.album)
}
inline void NailData::set_album(const char* value, size_t size) {
  set_has_album();
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.NailData.album)
}
inline ::std::string* NailData::mutable_album() {
  set_has_album();
  // @@protoc_insertion_point(field_mutable:pb.srch.NailData.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NailData::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.NailData.album)
  clear_has_album();
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NailData::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    set_has_album();
  } else {
    clear_has_album();
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.NailData.album)
}

// optional int32 official = 5 [(.gogo.json) = {
inline bool NailData::has_official() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NailData::set_has_official() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NailData::clear_has_official() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NailData::clear_official() {
  official_ = 0;
  clear_has_official();
}
inline ::google::protobuf::int32 NailData::official() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.official)
  return official_;
}
inline void NailData::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.NailData.official)
}

// optional int32 explicit = 6 [(.gogo.json) = {
inline bool NailData::has_explicit_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NailData::set_has_explicit_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NailData::clear_has_explicit_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NailData::clear_explicit_() {
  explicit__ = 0;
  clear_has_explicit_();
}
inline ::google::protobuf::int32 NailData::explicit_() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.explicit)
  return explicit__;
}
inline void NailData::set_explicit_(::google::protobuf::int32 value) {
  set_has_explicit_();
  explicit__ = value;
  // @@protoc_insertion_point(field_set:pb.srch.NailData.explicit)
}

// optional int32 child = 7 [(.gogo.json) = {
inline bool NailData::has_child() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NailData::set_has_child() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NailData::clear_has_child() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NailData::clear_child() {
  child_ = 0;
  clear_has_child();
}
inline ::google::protobuf::int32 NailData::child() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.child)
  return child_;
}
inline void NailData::set_child(::google::protobuf::int32 value) {
  set_has_child();
  child_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.NailData.child)
}

// optional int32 blacklist = 8 [(.gogo.json) = {
inline bool NailData::has_blacklist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NailData::set_has_blacklist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NailData::clear_has_blacklist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NailData::clear_blacklist() {
  blacklist_ = 0;
  clear_has_blacklist();
}
inline ::google::protobuf::int32 NailData::blacklist() const {
  // @@protoc_insertion_point(field_get:pb.srch.NailData.blacklist)
  return blacklist_;
}
inline void NailData::set_blacklist(::google::protobuf::int32 value) {
  set_has_blacklist();
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.NailData.blacklist)
}

// -------------------------------------------------------------------

// MonitorData

// optional uint32 storage_size = 1 [(.gogo.json) = {
inline bool MonitorData::has_storage_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MonitorData::set_has_storage_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MonitorData::clear_has_storage_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MonitorData::clear_storage_size() {
  storage_size_ = 0u;
  clear_has_storage_size();
}
inline ::google::protobuf::uint32 MonitorData::storage_size() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.storage_size)
  return storage_size_;
}
inline void MonitorData::set_storage_size(::google::protobuf::uint32 value) {
  set_has_storage_size();
  storage_size_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.storage_size)
}

// optional uint32 nails_size = 2 [(.gogo.json) = {
inline bool MonitorData::has_nails_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MonitorData::set_has_nails_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MonitorData::clear_has_nails_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MonitorData::clear_nails_size() {
  nails_size_ = 0u;
  clear_has_nails_size();
}
inline ::google::protobuf::uint32 MonitorData::nails_size() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.nails_size)
  return nails_size_;
}
inline void MonitorData::set_nails_size(::google::protobuf::uint32 value) {
  set_has_nails_size();
  nails_size_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.nails_size)
}

// optional string storage_version = 3 [(.gogo.json) = {
inline bool MonitorData::has_storage_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonitorData::set_has_storage_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonitorData::clear_has_storage_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonitorData::clear_storage_version() {
  storage_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_version();
}
inline const ::std::string& MonitorData::storage_version() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.storage_version)
  return storage_version_.GetNoArena();
}
inline void MonitorData::set_storage_version(const ::std::string& value) {
  set_has_storage_version();
  storage_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.storage_version)
}
#if LANG_CXX11
inline void MonitorData::set_storage_version(::std::string&& value) {
  set_has_storage_version();
  storage_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.storage_version)
}
#endif
inline void MonitorData::set_storage_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_storage_version();
  storage_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.storage_version)
}
inline void MonitorData::set_storage_version(const char* value, size_t size) {
  set_has_storage_version();
  storage_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.storage_version)
}
inline ::std::string* MonitorData::mutable_storage_version() {
  set_has_storage_version();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.storage_version)
  return storage_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorData::release_storage_version() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.storage_version)
  clear_has_storage_version();
  return storage_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorData::set_allocated_storage_version(::std::string* storage_version) {
  if (storage_version != NULL) {
    set_has_storage_version();
  } else {
    clear_has_storage_version();
  }
  storage_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_version);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.storage_version)
}

// optional string nails_version = 4 [(.gogo.json) = {
inline bool MonitorData::has_nails_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonitorData::set_has_nails_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonitorData::clear_has_nails_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonitorData::clear_nails_version() {
  nails_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nails_version();
}
inline const ::std::string& MonitorData::nails_version() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.nails_version)
  return nails_version_.GetNoArena();
}
inline void MonitorData::set_nails_version(const ::std::string& value) {
  set_has_nails_version();
  nails_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.nails_version)
}
#if LANG_CXX11
inline void MonitorData::set_nails_version(::std::string&& value) {
  set_has_nails_version();
  nails_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.nails_version)
}
#endif
inline void MonitorData::set_nails_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nails_version();
  nails_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.nails_version)
}
inline void MonitorData::set_nails_version(const char* value, size_t size) {
  set_has_nails_version();
  nails_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.nails_version)
}
inline ::std::string* MonitorData::mutable_nails_version() {
  set_has_nails_version();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.nails_version)
  return nails_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorData::release_nails_version() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.nails_version)
  clear_has_nails_version();
  return nails_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorData::set_allocated_nails_version(::std::string* nails_version) {
  if (nails_version != NULL) {
    set_has_nails_version();
  } else {
    clear_has_nails_version();
  }
  nails_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nails_version);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.nails_version)
}

// optional string monitor_file_data = 5 [(.gogo.json) = {
inline bool MonitorData::has_monitor_file_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonitorData::set_has_monitor_file_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonitorData::clear_has_monitor_file_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonitorData::clear_monitor_file_data() {
  monitor_file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_monitor_file_data();
}
inline const ::std::string& MonitorData::monitor_file_data() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.monitor_file_data)
  return monitor_file_data_.GetNoArena();
}
inline void MonitorData::set_monitor_file_data(const ::std::string& value) {
  set_has_monitor_file_data();
  monitor_file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.monitor_file_data)
}
#if LANG_CXX11
inline void MonitorData::set_monitor_file_data(::std::string&& value) {
  set_has_monitor_file_data();
  monitor_file_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.monitor_file_data)
}
#endif
inline void MonitorData::set_monitor_file_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_monitor_file_data();
  monitor_file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.monitor_file_data)
}
inline void MonitorData::set_monitor_file_data(const char* value, size_t size) {
  set_has_monitor_file_data();
  monitor_file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.monitor_file_data)
}
inline ::std::string* MonitorData::mutable_monitor_file_data() {
  set_has_monitor_file_data();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.monitor_file_data)
  return monitor_file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorData::release_monitor_file_data() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.monitor_file_data)
  clear_has_monitor_file_data();
  return monitor_file_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorData::set_allocated_monitor_file_data(::std::string* monitor_file_data) {
  if (monitor_file_data != NULL) {
    set_has_monitor_file_data();
  } else {
    clear_has_monitor_file_data();
  }
  monitor_file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitor_file_data);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.monitor_file_data)
}

// optional string storage_age = 6 [(.gogo.json) = {
inline bool MonitorData::has_storage_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonitorData::set_has_storage_age() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonitorData::clear_has_storage_age() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonitorData::clear_storage_age() {
  storage_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage_age();
}
inline const ::std::string& MonitorData::storage_age() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.storage_age)
  return storage_age_.GetNoArena();
}
inline void MonitorData::set_storage_age(const ::std::string& value) {
  set_has_storage_age();
  storage_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.storage_age)
}
#if LANG_CXX11
inline void MonitorData::set_storage_age(::std::string&& value) {
  set_has_storage_age();
  storage_age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.storage_age)
}
#endif
inline void MonitorData::set_storage_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_storage_age();
  storage_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.storage_age)
}
inline void MonitorData::set_storage_age(const char* value, size_t size) {
  set_has_storage_age();
  storage_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.storage_age)
}
inline ::std::string* MonitorData::mutable_storage_age() {
  set_has_storage_age();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.storage_age)
  return storage_age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorData::release_storage_age() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.storage_age)
  clear_has_storage_age();
  return storage_age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorData::set_allocated_storage_age(::std::string* storage_age) {
  if (storage_age != NULL) {
    set_has_storage_age();
  } else {
    clear_has_storage_age();
  }
  storage_age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_age);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.storage_age)
}

// optional string nails_age = 7 [(.gogo.json) = {
inline bool MonitorData::has_nails_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonitorData::set_has_nails_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonitorData::clear_has_nails_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonitorData::clear_nails_age() {
  nails_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nails_age();
}
inline const ::std::string& MonitorData::nails_age() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.nails_age)
  return nails_age_.GetNoArena();
}
inline void MonitorData::set_nails_age(const ::std::string& value) {
  set_has_nails_age();
  nails_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.nails_age)
}
#if LANG_CXX11
inline void MonitorData::set_nails_age(::std::string&& value) {
  set_has_nails_age();
  nails_age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.nails_age)
}
#endif
inline void MonitorData::set_nails_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nails_age();
  nails_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.nails_age)
}
inline void MonitorData::set_nails_age(const char* value, size_t size) {
  set_has_nails_age();
  nails_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.nails_age)
}
inline ::std::string* MonitorData::mutable_nails_age() {
  set_has_nails_age();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.nails_age)
  return nails_age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorData::release_nails_age() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.nails_age)
  clear_has_nails_age();
  return nails_age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorData::set_allocated_nails_age(::std::string* nails_age) {
  if (nails_age != NULL) {
    set_has_nails_age();
  } else {
    clear_has_nails_age();
  }
  nails_age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nails_age);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.nails_age)
}

// optional string monitor_file_age = 8 [(.gogo.json) = {
inline bool MonitorData::has_monitor_file_age() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonitorData::set_has_monitor_file_age() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MonitorData::clear_has_monitor_file_age() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MonitorData::clear_monitor_file_age() {
  monitor_file_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_monitor_file_age();
}
inline const ::std::string& MonitorData::monitor_file_age() const {
  // @@protoc_insertion_point(field_get:pb.srch.MonitorData.monitor_file_age)
  return monitor_file_age_.GetNoArena();
}
inline void MonitorData::set_monitor_file_age(const ::std::string& value) {
  set_has_monitor_file_age();
  monitor_file_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.MonitorData.monitor_file_age)
}
#if LANG_CXX11
inline void MonitorData::set_monitor_file_age(::std::string&& value) {
  set_has_monitor_file_age();
  monitor_file_age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.MonitorData.monitor_file_age)
}
#endif
inline void MonitorData::set_monitor_file_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_monitor_file_age();
  monitor_file_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.MonitorData.monitor_file_age)
}
inline void MonitorData::set_monitor_file_age(const char* value, size_t size) {
  set_has_monitor_file_age();
  monitor_file_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.MonitorData.monitor_file_age)
}
inline ::std::string* MonitorData::mutable_monitor_file_age() {
  set_has_monitor_file_age();
  // @@protoc_insertion_point(field_mutable:pb.srch.MonitorData.monitor_file_age)
  return monitor_file_age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorData::release_monitor_file_age() {
  // @@protoc_insertion_point(field_release:pb.srch.MonitorData.monitor_file_age)
  clear_has_monitor_file_age();
  return monitor_file_age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorData::set_allocated_monitor_file_age(::std::string* monitor_file_age) {
  if (monitor_file_age != NULL) {
    set_has_monitor_file_age();
  } else {
    clear_has_monitor_file_age();
  }
  monitor_file_age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitor_file_age);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.MonitorData.monitor_file_age)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace srch
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vk_5ftracks_2eproto__INCLUDED
