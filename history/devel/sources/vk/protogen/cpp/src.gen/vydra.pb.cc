// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vydra.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vydra.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace vydra {
namespace data {
class VydraSourceDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VydraSourceDoc>
     _instance;
} _VydraSourceDoc_default_instance_;
class VydraResultInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VydraResultInfo>
     _instance;
} _VydraResultInfo_default_instance_;
class VydraResultDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VydraResultDoc>
     _instance;
} _VydraResultDoc_default_instance_;

namespace protobuf_vydra_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraSourceDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraSourceDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraSourceDoc, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraSourceDoc, html_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraSourceDoc, type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraResultInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraResultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraResultInfo, layer_words_count_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraResultDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraResultDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraResultDoc, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraResultDoc, silicondata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VydraResultDoc, info_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(VydraSourceDoc)},
  { 11, 17, sizeof(VydraResultInfo)},
  { 18, 26, sizeof(VydraResultDoc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VydraSourceDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VydraResultInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VydraResultDoc_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vydra.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_silicon_5fdata_2eproto::InitDefaults();
  _VydraSourceDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VydraSourceDoc_default_instance_);_VydraResultInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VydraResultInfo_default_instance_);_VydraResultDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VydraResultDoc_default_instance_);_VydraResultDoc_default_instance_._instance.get_mutable()->silicondata_ = const_cast< ::ru::mail::go::webbase::blobs::SiliconDocParserInfo*>(
      ::ru::mail::go::webbase::blobs::SiliconDocParserInfo::internal_default_instance());
  _VydraResultDoc_default_instance_._instance.get_mutable()->info_ = const_cast< ::ru::mail::go::vydra::data::VydraResultInfo*>(
      ::ru::mail::go::vydra::data::VydraResultInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013vydra.proto\022\025ru.mail.go.vydra.data\032\022si"
      "licon_data.proto\"\213\001\n\016VydraSourceDoc\022\013\n\003u"
      "rl\030\001 \002(\t\022\014\n\004html\030\002 \002(\t\022>\n\004type\030\003 \001(\0162*.r"
      "u.mail.go.vydra.data.VydraSourceDoc.Type"
      ":\004HTML\"\036\n\004Type\022\010\n\004HTML\020\000\022\014\n\010AMP_HTML\020\001\","
      "\n\017VydraResultInfo\022\031\n\021layer_words_count\030\001"
      " \001(\005\"\305\001\n\016VydraResultDoc\0228\n\006status\030\001 \002(\0162"
      "(.ru.mail.go.vydra.data.VydraResultStatu"
      "s\022C\n\013siliconData\030\002 \001(\0132..ru.mail.go.webb"
      "ase.blobs.SiliconDocParserInfo\0224\n\004info\030\003"
      " \001(\0132&.ru.mail.go.vydra.data.VydraResult"
      "Info*\225\001\n\021VydraResultStatus\022\006\n\002OK\020\000\022\010\n\004FA"
      "IL\020\001\022\r\n\tNO_PARSER\020\002\022\021\n\rINVALID_INPUT\020\003\022\022"
      "\n\016INPUT_TOO_LONG\020\004\022\026\n\022INVALID_SOURCE_URL"
      "\020\005\022\016\n\nBANNED_URL\020\006\022\020\n\014BAD_DOC_TYPE\020\007B\rB\t"
      "VydraDataH\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vydra.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_silicon_5fdata_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_vydra_2eproto

const ::google::protobuf::EnumDescriptor* VydraSourceDoc_Type_descriptor() {
  protobuf_vydra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vydra_2eproto::file_level_enum_descriptors[0];
}
bool VydraSourceDoc_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VydraSourceDoc_Type VydraSourceDoc::HTML;
const VydraSourceDoc_Type VydraSourceDoc::AMP_HTML;
const VydraSourceDoc_Type VydraSourceDoc::Type_MIN;
const VydraSourceDoc_Type VydraSourceDoc::Type_MAX;
const int VydraSourceDoc::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VydraResultStatus_descriptor() {
  protobuf_vydra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vydra_2eproto::file_level_enum_descriptors[1];
}
bool VydraResultStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VydraSourceDoc::kUrlFieldNumber;
const int VydraSourceDoc::kHtmlFieldNumber;
const int VydraSourceDoc::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VydraSourceDoc::VydraSourceDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vydra_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.vydra.data.VydraSourceDoc)
}
VydraSourceDoc::VydraSourceDoc(const VydraSourceDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_html()) {
    html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.vydra.data.VydraSourceDoc)
}

void VydraSourceDoc::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

VydraSourceDoc::~VydraSourceDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.vydra.data.VydraSourceDoc)
  SharedDtor();
}

void VydraSourceDoc::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VydraSourceDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VydraSourceDoc::descriptor() {
  protobuf_vydra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vydra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VydraSourceDoc& VydraSourceDoc::default_instance() {
  protobuf_vydra_2eproto::InitDefaults();
  return *internal_default_instance();
}

VydraSourceDoc* VydraSourceDoc::New(::google::protobuf::Arena* arena) const {
  VydraSourceDoc* n = new VydraSourceDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VydraSourceDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.vydra.data.VydraSourceDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!html_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*html_.UnsafeRawStringPointer())->clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VydraSourceDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.vydra.data.VydraSourceDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.vydra.data.VydraSourceDoc.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string html = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html().data(), static_cast<int>(this->html().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.vydra.data.VydraSourceDoc.html");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.vydra.data.VydraSourceDoc.Type type = 3 [default = HTML];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::vydra::data::VydraSourceDoc_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::vydra::data::VydraSourceDoc_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.vydra.data.VydraSourceDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.vydra.data.VydraSourceDoc)
  return false;
#undef DO_
}

void VydraSourceDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.vydra.data.VydraSourceDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.vydra.data.VydraSourceDoc.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required string html = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html().data(), static_cast<int>(this->html().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.vydra.data.VydraSourceDoc.html");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->html(), output);
  }

  // optional .ru.mail.go.vydra.data.VydraSourceDoc.Type type = 3 [default = HTML];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.vydra.data.VydraSourceDoc)
}

::google::protobuf::uint8* VydraSourceDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.vydra.data.VydraSourceDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.vydra.data.VydraSourceDoc.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required string html = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html().data(), static_cast<int>(this->html().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.vydra.data.VydraSourceDoc.html");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->html(), target);
  }

  // optional .ru.mail.go.vydra.data.VydraSourceDoc.Type type = 3 [default = HTML];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.vydra.data.VydraSourceDoc)
  return target;
}

size_t VydraSourceDoc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.vydra.data.VydraSourceDoc)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_html()) {
    // required string html = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html());
  }

  return total_size;
}
size_t VydraSourceDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.vydra.data.VydraSourceDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string html = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ru.mail.go.vydra.data.VydraSourceDoc.Type type = 3 [default = HTML];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VydraSourceDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.vydra.data.VydraSourceDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const VydraSourceDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VydraSourceDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.vydra.data.VydraSourceDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.vydra.data.VydraSourceDoc)
    MergeFrom(*source);
  }
}

void VydraSourceDoc::MergeFrom(const VydraSourceDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.vydra.data.VydraSourceDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_html();
      html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VydraSourceDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.vydra.data.VydraSourceDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VydraSourceDoc::CopyFrom(const VydraSourceDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.vydra.data.VydraSourceDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VydraSourceDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void VydraSourceDoc::Swap(VydraSourceDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VydraSourceDoc::InternalSwap(VydraSourceDoc* other) {
  using std::swap;
  url_.Swap(&other->url_);
  html_.Swap(&other->html_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VydraSourceDoc::GetMetadata() const {
  protobuf_vydra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vydra_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VydraSourceDoc

// required string url = 1;
bool VydraSourceDoc::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VydraSourceDoc::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void VydraSourceDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void VydraSourceDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& VydraSourceDoc::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.vydra.data.VydraSourceDoc.url)
  return url_.GetNoArena();
}
void VydraSourceDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.vydra.data.VydraSourceDoc.url)
}
#if LANG_CXX11
void VydraSourceDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.vydra.data.VydraSourceDoc.url)
}
#endif
void VydraSourceDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.vydra.data.VydraSourceDoc.url)
}
void VydraSourceDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.vydra.data.VydraSourceDoc.url)
}
::std::string* VydraSourceDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.vydra.data.VydraSourceDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VydraSourceDoc::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.vydra.data.VydraSourceDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VydraSourceDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.vydra.data.VydraSourceDoc.url)
}

// required string html = 2;
bool VydraSourceDoc::has_html() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VydraSourceDoc::set_has_html() {
  _has_bits_[0] |= 0x00000002u;
}
void VydraSourceDoc::clear_has_html() {
  _has_bits_[0] &= ~0x00000002u;
}
void VydraSourceDoc::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html();
}
const ::std::string& VydraSourceDoc::html() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.vydra.data.VydraSourceDoc.html)
  return html_.GetNoArena();
}
void VydraSourceDoc::set_html(const ::std::string& value) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.vydra.data.VydraSourceDoc.html)
}
#if LANG_CXX11
void VydraSourceDoc::set_html(::std::string&& value) {
  set_has_html();
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.vydra.data.VydraSourceDoc.html)
}
#endif
void VydraSourceDoc::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.vydra.data.VydraSourceDoc.html)
}
void VydraSourceDoc::set_html(const char* value, size_t size) {
  set_has_html();
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.vydra.data.VydraSourceDoc.html)
}
::std::string* VydraSourceDoc::mutable_html() {
  set_has_html();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.vydra.data.VydraSourceDoc.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VydraSourceDoc::release_html() {
  // @@protoc_insertion_point(field_release:ru.mail.go.vydra.data.VydraSourceDoc.html)
  clear_has_html();
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VydraSourceDoc::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    set_has_html();
  } else {
    clear_has_html();
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.vydra.data.VydraSourceDoc.html)
}

// optional .ru.mail.go.vydra.data.VydraSourceDoc.Type type = 3 [default = HTML];
bool VydraSourceDoc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VydraSourceDoc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void VydraSourceDoc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void VydraSourceDoc::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::vydra::data::VydraSourceDoc_Type VydraSourceDoc::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.vydra.data.VydraSourceDoc.type)
  return static_cast< ::ru::mail::go::vydra::data::VydraSourceDoc_Type >(type_);
}
void VydraSourceDoc::set_type(::ru::mail::go::vydra::data::VydraSourceDoc_Type value) {
  assert(::ru::mail::go::vydra::data::VydraSourceDoc_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.vydra.data.VydraSourceDoc.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VydraResultInfo::kLayerWordsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VydraResultInfo::VydraResultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vydra_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.vydra.data.VydraResultInfo)
}
VydraResultInfo::VydraResultInfo(const VydraResultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_words_count_ = from.layer_words_count_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.vydra.data.VydraResultInfo)
}

void VydraResultInfo::SharedCtor() {
  _cached_size_ = 0;
  layer_words_count_ = 0;
}

VydraResultInfo::~VydraResultInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.vydra.data.VydraResultInfo)
  SharedDtor();
}

void VydraResultInfo::SharedDtor() {
}

void VydraResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VydraResultInfo::descriptor() {
  protobuf_vydra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vydra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VydraResultInfo& VydraResultInfo::default_instance() {
  protobuf_vydra_2eproto::InitDefaults();
  return *internal_default_instance();
}

VydraResultInfo* VydraResultInfo::New(::google::protobuf::Arena* arena) const {
  VydraResultInfo* n = new VydraResultInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VydraResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.vydra.data.VydraResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_words_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VydraResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.vydra.data.VydraResultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer_words_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_layer_words_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_words_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.vydra.data.VydraResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.vydra.data.VydraResultInfo)
  return false;
#undef DO_
}

void VydraResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.vydra.data.VydraResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer_words_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer_words_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.vydra.data.VydraResultInfo)
}

::google::protobuf::uint8* VydraResultInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.vydra.data.VydraResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer_words_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer_words_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.vydra.data.VydraResultInfo)
  return target;
}

size_t VydraResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.vydra.data.VydraResultInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 layer_words_count = 1;
  if (has_layer_words_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->layer_words_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VydraResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.vydra.data.VydraResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VydraResultInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VydraResultInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.vydra.data.VydraResultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.vydra.data.VydraResultInfo)
    MergeFrom(*source);
  }
}

void VydraResultInfo::MergeFrom(const VydraResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.vydra.data.VydraResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_layer_words_count()) {
    set_layer_words_count(from.layer_words_count());
  }
}

void VydraResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.vydra.data.VydraResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VydraResultInfo::CopyFrom(const VydraResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.vydra.data.VydraResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VydraResultInfo::IsInitialized() const {
  return true;
}

void VydraResultInfo::Swap(VydraResultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VydraResultInfo::InternalSwap(VydraResultInfo* other) {
  using std::swap;
  swap(layer_words_count_, other->layer_words_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VydraResultInfo::GetMetadata() const {
  protobuf_vydra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vydra_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VydraResultInfo

// optional int32 layer_words_count = 1;
bool VydraResultInfo::has_layer_words_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VydraResultInfo::set_has_layer_words_count() {
  _has_bits_[0] |= 0x00000001u;
}
void VydraResultInfo::clear_has_layer_words_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void VydraResultInfo::clear_layer_words_count() {
  layer_words_count_ = 0;
  clear_has_layer_words_count();
}
::google::protobuf::int32 VydraResultInfo::layer_words_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.vydra.data.VydraResultInfo.layer_words_count)
  return layer_words_count_;
}
void VydraResultInfo::set_layer_words_count(::google::protobuf::int32 value) {
  set_has_layer_words_count();
  layer_words_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.vydra.data.VydraResultInfo.layer_words_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VydraResultDoc::kStatusFieldNumber;
const int VydraResultDoc::kSiliconDataFieldNumber;
const int VydraResultDoc::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VydraResultDoc::VydraResultDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vydra_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.vydra.data.VydraResultDoc)
}
VydraResultDoc::VydraResultDoc(const VydraResultDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_silicondata()) {
    silicondata_ = new ::ru::mail::go::webbase::blobs::SiliconDocParserInfo(*from.silicondata_);
  } else {
    silicondata_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::ru::mail::go::vydra::data::VydraResultInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.vydra.data.VydraResultDoc)
}

void VydraResultDoc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&silicondata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&silicondata_)) + sizeof(status_));
}

VydraResultDoc::~VydraResultDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.vydra.data.VydraResultDoc)
  SharedDtor();
}

void VydraResultDoc::SharedDtor() {
  if (this != internal_default_instance()) delete silicondata_;
  if (this != internal_default_instance()) delete info_;
}

void VydraResultDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VydraResultDoc::descriptor() {
  protobuf_vydra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vydra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VydraResultDoc& VydraResultDoc::default_instance() {
  protobuf_vydra_2eproto::InitDefaults();
  return *internal_default_instance();
}

VydraResultDoc* VydraResultDoc::New(::google::protobuf::Arena* arena) const {
  VydraResultDoc* n = new VydraResultDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VydraResultDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.vydra.data.VydraResultDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(silicondata_ != NULL);
      silicondata_->::ru::mail::go::webbase::blobs::SiliconDocParserInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::ru::mail::go::vydra::data::VydraResultInfo::Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VydraResultDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.vydra.data.VydraResultDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.vydra.data.VydraResultStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::vydra::data::VydraResultStatus_IsValid(value)) {
            set_status(static_cast< ::ru::mail::go::vydra::data::VydraResultStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfo siliconData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_silicondata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.vydra.data.VydraResultInfo info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.vydra.data.VydraResultDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.vydra.data.VydraResultDoc)
  return false;
#undef DO_
}

void VydraResultDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.vydra.data.VydraResultDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.vydra.data.VydraResultStatus status = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfo siliconData = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->silicondata_, output);
  }

  // optional .ru.mail.go.vydra.data.VydraResultInfo info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.vydra.data.VydraResultDoc)
}

::google::protobuf::uint8* VydraResultDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.vydra.data.VydraResultDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.vydra.data.VydraResultStatus status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfo siliconData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->silicondata_, deterministic, target);
  }

  // optional .ru.mail.go.vydra.data.VydraResultInfo info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.vydra.data.VydraResultDoc)
  return target;
}

size_t VydraResultDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.vydra.data.VydraResultDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.vydra.data.VydraResultStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ru.mail.go.webbase.blobs.SiliconDocParserInfo siliconData = 2;
    if (has_silicondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->silicondata_);
    }

    // optional .ru.mail.go.vydra.data.VydraResultInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VydraResultDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.vydra.data.VydraResultDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const VydraResultDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VydraResultDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.vydra.data.VydraResultDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.vydra.data.VydraResultDoc)
    MergeFrom(*source);
  }
}

void VydraResultDoc::MergeFrom(const VydraResultDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.vydra.data.VydraResultDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_silicondata()->::ru::mail::go::webbase::blobs::SiliconDocParserInfo::MergeFrom(from.silicondata());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::ru::mail::go::vydra::data::VydraResultInfo::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VydraResultDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.vydra.data.VydraResultDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VydraResultDoc::CopyFrom(const VydraResultDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.vydra.data.VydraResultDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VydraResultDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_silicondata()) {
    if (!this->silicondata_->IsInitialized()) return false;
  }
  return true;
}

void VydraResultDoc::Swap(VydraResultDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VydraResultDoc::InternalSwap(VydraResultDoc* other) {
  using std::swap;
  swap(silicondata_, other->silicondata_);
  swap(info_, other->info_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VydraResultDoc::GetMetadata() const {
  protobuf_vydra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vydra_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VydraResultDoc

// required .ru.mail.go.vydra.data.VydraResultStatus status = 1;
bool VydraResultDoc::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VydraResultDoc::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void VydraResultDoc::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void VydraResultDoc::clear_status() {
  status_ = 0;
  clear_has_status();
}
::ru::mail::go::vydra::data::VydraResultStatus VydraResultDoc::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.vydra.data.VydraResultDoc.status)
  return static_cast< ::ru::mail::go::vydra::data::VydraResultStatus >(status_);
}
void VydraResultDoc::set_status(::ru::mail::go::vydra::data::VydraResultStatus value) {
  assert(::ru::mail::go::vydra::data::VydraResultStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.vydra.data.VydraResultDoc.status)
}

// optional .ru.mail.go.webbase.blobs.SiliconDocParserInfo siliconData = 2;
bool VydraResultDoc::has_silicondata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VydraResultDoc::set_has_silicondata() {
  _has_bits_[0] |= 0x00000001u;
}
void VydraResultDoc::clear_has_silicondata() {
  _has_bits_[0] &= ~0x00000001u;
}
void VydraResultDoc::clear_silicondata() {
  if (silicondata_ != NULL) silicondata_->::ru::mail::go::webbase::blobs::SiliconDocParserInfo::Clear();
  clear_has_silicondata();
}
const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo& VydraResultDoc::silicondata() const {
  const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* p = silicondata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.vydra.data.VydraResultDoc.siliconData)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiliconDocParserInfo*>(
      &::ru::mail::go::webbase::blobs::_SiliconDocParserInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::SiliconDocParserInfo* VydraResultDoc::mutable_silicondata() {
  set_has_silicondata();
  if (silicondata_ == NULL) {
    silicondata_ = new ::ru::mail::go::webbase::blobs::SiliconDocParserInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.vydra.data.VydraResultDoc.siliconData)
  return silicondata_;
}
::ru::mail::go::webbase::blobs::SiliconDocParserInfo* VydraResultDoc::release_silicondata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.vydra.data.VydraResultDoc.siliconData)
  clear_has_silicondata();
  ::ru::mail::go::webbase::blobs::SiliconDocParserInfo* temp = silicondata_;
  silicondata_ = NULL;
  return temp;
}
void VydraResultDoc::set_allocated_silicondata(::ru::mail::go::webbase::blobs::SiliconDocParserInfo* silicondata) {
  delete silicondata_;
  silicondata_ = silicondata;
  if (silicondata) {
    set_has_silicondata();
  } else {
    clear_has_silicondata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.vydra.data.VydraResultDoc.siliconData)
}

// optional .ru.mail.go.vydra.data.VydraResultInfo info = 3;
bool VydraResultDoc::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VydraResultDoc::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void VydraResultDoc::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void VydraResultDoc::clear_info() {
  if (info_ != NULL) info_->::ru::mail::go::vydra::data::VydraResultInfo::Clear();
  clear_has_info();
}
const ::ru::mail::go::vydra::data::VydraResultInfo& VydraResultDoc::info() const {
  const ::ru::mail::go::vydra::data::VydraResultInfo* p = info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.vydra.data.VydraResultDoc.info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::vydra::data::VydraResultInfo*>(
      &::ru::mail::go::vydra::data::_VydraResultInfo_default_instance_);
}
::ru::mail::go::vydra::data::VydraResultInfo* VydraResultDoc::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::ru::mail::go::vydra::data::VydraResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.vydra.data.VydraResultDoc.info)
  return info_;
}
::ru::mail::go::vydra::data::VydraResultInfo* VydraResultDoc::release_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.vydra.data.VydraResultDoc.info)
  clear_has_info();
  ::ru::mail::go::vydra::data::VydraResultInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void VydraResultDoc::set_allocated_info(::ru::mail::go::vydra::data::VydraResultInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.vydra.data.VydraResultDoc.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace vydra
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
