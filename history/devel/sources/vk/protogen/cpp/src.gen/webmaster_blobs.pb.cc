// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webmaster_blobs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "webmaster_blobs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class FetcherDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FetcherData>
     _instance;
} _FetcherData_default_instance_;
class RankingDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RankingData>
     _instance;
} _RankingData_default_instance_;
class LinkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Link>
     _instance;
} _Link_default_instance_;
class LinksDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LinksData>
     _instance;
} _LinksData_default_instance_;
class QuerySessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QuerySession>
     _instance;
} _QuerySession_default_instance_;
class QueryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryInfo>
     _instance;
} _QueryInfo_default_instance_;
class GeoQueryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GeoQueryInfo>
     _instance;
} _GeoQueryInfo_default_instance_;
class QueryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryData>
     _instance;
} _QueryData_default_instance_;
class DailyQueryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DailyQueryData>
     _instance;
} _DailyQueryData_default_instance_;
class SekiteiQuotaDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SekiteiQuotaData>
     _instance;
} _SekiteiQuotaData_default_instance_;
class SiteDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiteData>
     _instance;
} _SiteData_default_instance_;
class ResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Result>
     _instance;
} _Result_default_instance_;
class SqInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SqInfo>
     _instance;
} _SqInfo_default_instance_;
class RobotsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Robots>
     _instance;
} _Robots_default_instance_;

namespace protobuf_webmaster_5fblobs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, current_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, disabled_by_robots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, index_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, full_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, first_index_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, first_crawl_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, content_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherData, should_be_indexed_),
  2,
  5,
  0,
  3,
  1,
  4,
  8,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, brsq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, brv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, uruq_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, count_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinksData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinksData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinksData, backlinks_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinksData, unique_texts_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinksData, url_backlinks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinksData, site_backlinks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinksData, back_redirects_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, avg_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, min_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, max_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, min_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, max_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, shows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySession, last_clicks_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, attractability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, satisfactibility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, actuality_),
  0,
  ~0u,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoQueryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoQueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoQueryInfo, geo_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoQueryInfo, queries_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryData, geo_queries_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQueryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQueryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQueryData, query_data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SekiteiQuotaData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SekiteiQuotaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SekiteiQuotaData, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SekiteiQuotaData, maxquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SekiteiQuotaData, urlsinquota_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteData, maxquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteData, urlsinquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteData, sekiteiquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteData, isbanned_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, fetcher_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, ranking_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, links_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, query_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, pik_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, daily_query_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, site_data_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, serp_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, http_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, http_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, http_redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, raw_html_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, rendered_html_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqInfo, parser_output_),
  0,
  1,
  8,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots, robots_txt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots, robots_txt_www_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots, robots_txt_https_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots, robots_txt_https_www_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(FetcherData)},
  { 23, 31, sizeof(RankingData)},
  { 34, 43, sizeof(Link)},
  { 47, 57, sizeof(LinksData)},
  { 62, 77, sizeof(QuerySession)},
  { 87, 98, sizeof(QueryInfo)},
  { 104, 111, sizeof(GeoQueryInfo)},
  { 113, 119, sizeof(QueryData)},
  { 120, 126, sizeof(DailyQueryData)},
  { 127, 135, sizeof(SekiteiQuotaData)},
  { 138, 147, sizeof(SiteData)},
  { 151, 164, sizeof(Result)},
  { 172, 186, sizeof(SqInfo)},
  { 195, 204, sizeof(Robots)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FetcherData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Link_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinksData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuerySession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GeoQueryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DailyQueryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SekiteiQuotaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiteData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SqInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Robots_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "webmaster_blobs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_crawl_5fstate_2eproto::InitDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::InitDefaults();
  _FetcherData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FetcherData_default_instance_);_RankingData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RankingData_default_instance_);_Link_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Link_default_instance_);_LinksData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LinksData_default_instance_);_QuerySession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QuerySession_default_instance_);_QueryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryInfo_default_instance_);_GeoQueryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GeoQueryInfo_default_instance_);_QueryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryData_default_instance_);_DailyQueryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DailyQueryData_default_instance_);_SekiteiQuotaData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SekiteiQuotaData_default_instance_);_SiteData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiteData_default_instance_);_Result_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Result_default_instance_);_SqInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SqInfo_default_instance_);_Robots_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Robots_default_instance_);_FetcherData_default_instance_._instance.get_mutable()->current_status_ = const_cast< ::ru::mail::go::webbase::blobs::CrawlDetails*>(
      ::ru::mail::go::webbase::blobs::CrawlDetails::internal_default_instance());
  _Result_default_instance_._instance.get_mutable()->fetcher_data_ = const_cast< ::ru::mail::go::webbase::blobs::FetcherData*>(
      ::ru::mail::go::webbase::blobs::FetcherData::internal_default_instance());
  _Result_default_instance_._instance.get_mutable()->ranking_data_ = const_cast< ::ru::mail::go::webbase::blobs::RankingData*>(
      ::ru::mail::go::webbase::blobs::RankingData::internal_default_instance());
  _Result_default_instance_._instance.get_mutable()->links_data_ = const_cast< ::ru::mail::go::webbase::blobs::LinksData*>(
      ::ru::mail::go::webbase::blobs::LinksData::internal_default_instance());
  _Result_default_instance_._instance.get_mutable()->query_data_ = const_cast< ::ru::mail::go::webbase::blobs::QueryData*>(
      ::ru::mail::go::webbase::blobs::QueryData::internal_default_instance());
  _Result_default_instance_._instance.get_mutable()->daily_query_data_ = const_cast< ::ru::mail::go::webbase::blobs::DailyQueryData*>(
      ::ru::mail::go::webbase::blobs::DailyQueryData::internal_default_instance());
  _Result_default_instance_._instance.get_mutable()->site_data_ = const_cast< ::ru::mail::go::webbase::blobs::SiteData*>(
      ::ru::mail::go::webbase::blobs::SiteData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025webmaster_blobs.proto\022\030ru.mail.go.webb"
      "ase.blobs\032\021crawl_state.proto\032\024document_e"
      "nums.proto\032\020image_defs.proto\"\255\002\n\013Fetcher"
      "Data\022>\n\016current_status\030\001 \001(\0132&.ru.mail.g"
      "o.webbase.blobs.CrawlDetails\022\032\n\022disabled"
      "_by_robots\030\002 \001(\010\022\020\n\010redirect\030\003 \001(\t\022\022\n\nin"
      "dex_time\030\004 \001(\003\022\020\n\010full_url\030\005 \001(\t\022\030\n\020firs"
      "t_index_time\030\006 \001(\003\022\030\n\020first_crawl_time\030\007"
      " \001(\003\022;\n\014content_type\030\010 \001(\0162%.ru.mail.go."
      "webbase.blobs.ContentType\022\031\n\021should_be_i"
      "ndexed\030\t \001(\010\"\?\n\013RankingData\022\017\n\004BRSQ\030\001 \001("
      "\003:\0010\022\016\n\003BRV\030\002 \001(\001:\0010\022\017\n\004URUQ\030\003 \001(\003:\0010\"E\n"
      "\004Link\022\014\n\004from\030\001 \002(\t\022\014\n\004text\030\002 \001(\t\022\017\n\004ran"
      "k\030\003 \001(\001:\0010\022\020\n\005count\030\004 \001(\r:\0011\"\355\001\n\tLinksDa"
      "ta\022\032\n\017backlinks_count\030\001 \001(\005:\0010\022\035\n\022unique"
      "_texts_count\030\002 \001(\005:\0010\0225\n\rurl_backlinks\030\003"
      " \003(\0132\036.ru.mail.go.webbase.blobs.Link\0226\n\016"
      "site_backlinks\030\004 \003(\0132\036.ru.mail.go.webbas"
      "e.blobs.Link\0226\n\016back_redirects\030\005 \003(\0132\036.r"
      "u.mail.go.webbase.blobs.Link\"\301\001\n\014QuerySe"
      "ssion\022\014\n\004date\030\001 \001(\003\022\r\n\005views\030\002 \001(\005\022\016\n\006cl"
      "icks\030\003 \001(\005\022\024\n\014avg_position\030\004 \001(\001\022\024\n\014min_"
      "position\030\005 \001(\005\022\024\n\014max_position\030\006 \001(\005\022\016\n\006"
      "min_ts\030\007 \001(\003\022\016\n\006max_ts\030\010 \001(\003\022\r\n\005shows\030\t "
      "\001(\005\022\023\n\013last_clicks\030\n \001(\005\"\247\001\n\tQueryInfo\022\014"
      "\n\004text\030\001 \002(\t\0228\n\010sessions\030\002 \003(\0132&.ru.mail"
      ".go.webbase.blobs.QuerySession\022\026\n\016attrac"
      "tability\030\003 \001(\001\022\030\n\020satisfactibility\030\004 \001(\001"
      "\022\r\n\005users\030\005 \001(\005\022\021\n\tactuality\030\006 \001(\001\"V\n\014Ge"
      "oQueryInfo\022\020\n\010geo_code\030\001 \002(\005\0224\n\007queries\030"
      "\002 \003(\0132#.ru.mail.go.webbase.blobs.QueryIn"
      "fo\"H\n\tQueryData\022;\n\013geo_queries\030\001 \003(\0132&.r"
      "u.mail.go.webbase.blobs.GeoQueryInfo\"I\n\016"
      "DailyQueryData\0227\n\nquery_data\030\001 \003(\0132#.ru."
      "mail.go.webbase.blobs.QueryData\"N\n\020Sekit"
      "eiQuotaData\022\023\n\013description\030\001 \002(\t\022\020\n\010maxQ"
      "uota\030\002 \002(\005\022\023\n\013urlsInQuota\030\003 \002(\005\"\205\001\n\010Site"
      "Data\022\020\n\010maxQuota\030\001 \001(\005\022\023\n\013urlsInQuota\030\002 "
      "\001(\005\022@\n\014sekiteiQuota\030\003 \003(\0132*.ru.mail.go.w"
      "ebbase.blobs.SekiteiQuotaData\022\020\n\010isBanne"
      "d\030\004 \001(\010\"\211\003\n\006Result\022\013\n\003url\030\001 \002(\t\022;\n\014fetch"
      "er_data\030\002 \002(\0132%.ru.mail.go.webbase.blobs"
      ".FetcherData\022;\n\014ranking_data\030\003 \002(\0132%.ru."
      "mail.go.webbase.blobs.RankingData\0227\n\nlin"
      "ks_data\030\004 \002(\0132#.ru.mail.go.webbase.blobs"
      ".LinksData\0227\n\nquery_data\030\005 \002(\0132#.ru.mail"
      ".go.webbase.blobs.QueryData\022\013\n\003pik\030\006 \001(\005"
      "\022B\n\020daily_query_data\030\007 \002(\0132(.ru.mail.go."
      "webbase.blobs.DailyQueryData\0225\n\tsite_dat"
      "a\030\010 \001(\0132\".ru.mail.go.webbase.blobs.SiteD"
      "ata\"\305\001\n\006SqInfo\022\022\n\nquery_text\030\001 \001(\t\022\020\n\010se"
      "rp_url\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\003\022\024\n\014http_"
      "request\030\004 \001(\t\022\025\n\rhttp_response\030\005 \001(\t\022\025\n\r"
      "http_redirect\030\006 \001(\t\022\020\n\010raw_html\030\007 \001(\014\022\025\n"
      "\rrendered_html\030\010 \001(\014\022\025\n\rparser_output\030\t "
      "\001(\t\"l\n\006Robots\022\022\n\nrobots_txt\030\001 \001(\014\022\026\n\016rob"
      "ots_txt_www\030\002 \001(\014\022\030\n\020robots_txt_https\030\003 "
      "\001(\014\022\034\n\024robots_txt_https_www\030\004 \001(\014B\020B\016Web"
      "masterBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "webmaster_blobs.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_crawl_5fstate_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_webmaster_5fblobs_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetcherData::kCurrentStatusFieldNumber;
const int FetcherData::kDisabledByRobotsFieldNumber;
const int FetcherData::kRedirectFieldNumber;
const int FetcherData::kIndexTimeFieldNumber;
const int FetcherData::kFullUrlFieldNumber;
const int FetcherData::kFirstIndexTimeFieldNumber;
const int FetcherData::kFirstCrawlTimeFieldNumber;
const int FetcherData::kContentTypeFieldNumber;
const int FetcherData::kShouldBeIndexedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetcherData::FetcherData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FetcherData)
}
FetcherData::FetcherData(const FetcherData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect()) {
    redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
  }
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_url()) {
    full_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url_);
  }
  if (from.has_current_status()) {
    current_status_ = new ::ru::mail::go::webbase::blobs::CrawlDetails(*from.current_status_);
  } else {
    current_status_ = NULL;
  }
  ::memcpy(&index_time_, &from.index_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_crawl_time_) -
    reinterpret_cast<char*>(&index_time_)) + sizeof(first_crawl_time_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FetcherData)
}

void FetcherData::SharedCtor() {
  _cached_size_ = 0;
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_crawl_time_) -
      reinterpret_cast<char*>(&current_status_)) + sizeof(first_crawl_time_));
}

FetcherData::~FetcherData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FetcherData)
  SharedDtor();
}

void FetcherData::SharedDtor() {
  redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_status_;
}

void FetcherData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetcherData::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetcherData& FetcherData::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

FetcherData* FetcherData::New(::google::protobuf::Arena* arena) const {
  FetcherData* n = new FetcherData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetcherData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FetcherData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!redirect_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*redirect_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!full_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*full_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(current_status_ != NULL);
      current_status_->::ru::mail::go::webbase::blobs::CrawlDetails::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&index_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&content_type_) -
        reinterpret_cast<char*>(&index_time_)) + sizeof(content_type_));
  }
  first_crawl_time_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetcherData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FetcherData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.CrawlDetails current_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disabled_by_robots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_disabled_by_robots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_by_robots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect().data(), static_cast<int>(this->redirect().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetcherData.redirect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 index_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_index_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string full_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_url().data(), static_cast<int>(this->full_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetcherData.full_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 first_index_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_first_index_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_index_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 first_crawl_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_first_crawl_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_crawl_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ContentType content_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ContentType_IsValid(value)) {
            set_content_type(static_cast< ::ru::mail::go::webbase::blobs::ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool should_be_indexed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_should_be_indexed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_be_indexed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FetcherData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FetcherData)
  return false;
#undef DO_
}

void FetcherData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FetcherData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CrawlDetails current_status = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->current_status_, output);
  }

  // optional bool disabled_by_robots = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disabled_by_robots(), output);
  }

  // optional string redirect = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), static_cast<int>(this->redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetcherData.redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->redirect(), output);
  }

  // optional int64 index_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->index_time(), output);
  }

  // optional string full_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetcherData.full_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->full_url(), output);
  }

  // optional int64 first_index_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->first_index_time(), output);
  }

  // optional int64 first_crawl_time = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->first_crawl_time(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType content_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->content_type(), output);
  }

  // optional bool should_be_indexed = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->should_be_indexed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FetcherData)
}

::google::protobuf::uint8* FetcherData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FetcherData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CrawlDetails current_status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->current_status_, deterministic, target);
  }

  // optional bool disabled_by_robots = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disabled_by_robots(), target);
  }

  // optional string redirect = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), static_cast<int>(this->redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetcherData.redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->redirect(), target);
  }

  // optional int64 index_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->index_time(), target);
  }

  // optional string full_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetcherData.full_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->full_url(), target);
  }

  // optional int64 first_index_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->first_index_time(), target);
  }

  // optional int64 first_crawl_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->first_crawl_time(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType content_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->content_type(), target);
  }

  // optional bool should_be_indexed = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->should_be_indexed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FetcherData)
  return target;
}

size_t FetcherData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FetcherData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string redirect = 3;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect());
    }

    // optional string full_url = 5;
    if (has_full_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_url());
    }

    // optional .ru.mail.go.webbase.blobs.CrawlDetails current_status = 1;
    if (has_current_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->current_status_);
    }

    // optional int64 index_time = 4;
    if (has_index_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index_time());
    }

    // optional int64 first_index_time = 6;
    if (has_first_index_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_index_time());
    }

    // optional bool disabled_by_robots = 2;
    if (has_disabled_by_robots()) {
      total_size += 1 + 1;
    }

    // optional bool should_be_indexed = 9;
    if (has_should_be_indexed()) {
      total_size += 1 + 1;
    }

    // optional .ru.mail.go.webbase.blobs.ContentType content_type = 8;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->content_type());
    }

  }
  // optional int64 first_crawl_time = 7;
  if (has_first_crawl_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->first_crawl_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetcherData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FetcherData)
  GOOGLE_DCHECK_NE(&from, this);
  const FetcherData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetcherData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FetcherData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FetcherData)
    MergeFrom(*source);
  }
}

void FetcherData::MergeFrom(const FetcherData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FetcherData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_redirect();
      redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_full_url();
      full_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_current_status()->::ru::mail::go::webbase::blobs::CrawlDetails::MergeFrom(from.current_status());
    }
    if (cached_has_bits & 0x00000008u) {
      index_time_ = from.index_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_index_time_ = from.first_index_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      disabled_by_robots_ = from.disabled_by_robots_;
    }
    if (cached_has_bits & 0x00000040u) {
      should_be_indexed_ = from.should_be_indexed_;
    }
    if (cached_has_bits & 0x00000080u) {
      content_type_ = from.content_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_first_crawl_time(from.first_crawl_time());
  }
}

void FetcherData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FetcherData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetcherData::CopyFrom(const FetcherData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FetcherData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetcherData::IsInitialized() const {
  if (has_current_status()) {
    if (!this->current_status_->IsInitialized()) return false;
  }
  return true;
}

void FetcherData::Swap(FetcherData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetcherData::InternalSwap(FetcherData* other) {
  using std::swap;
  redirect_.Swap(&other->redirect_);
  full_url_.Swap(&other->full_url_);
  swap(current_status_, other->current_status_);
  swap(index_time_, other->index_time_);
  swap(first_index_time_, other->first_index_time_);
  swap(disabled_by_robots_, other->disabled_by_robots_);
  swap(should_be_indexed_, other->should_be_indexed_);
  swap(content_type_, other->content_type_);
  swap(first_crawl_time_, other->first_crawl_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetcherData::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetcherData

// optional .ru.mail.go.webbase.blobs.CrawlDetails current_status = 1;
bool FetcherData::has_current_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FetcherData::set_has_current_status() {
  _has_bits_[0] |= 0x00000004u;
}
void FetcherData::clear_has_current_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void FetcherData::clear_current_status() {
  if (current_status_ != NULL) current_status_->::ru::mail::go::webbase::blobs::CrawlDetails::Clear();
  clear_has_current_status();
}
const ::ru::mail::go::webbase::blobs::CrawlDetails& FetcherData::current_status() const {
  const ::ru::mail::go::webbase::blobs::CrawlDetails* p = current_status_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.current_status)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CrawlDetails*>(
      &::ru::mail::go::webbase::blobs::_CrawlDetails_default_instance_);
}
::ru::mail::go::webbase::blobs::CrawlDetails* FetcherData::mutable_current_status() {
  set_has_current_status();
  if (current_status_ == NULL) {
    current_status_ = new ::ru::mail::go::webbase::blobs::CrawlDetails;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetcherData.current_status)
  return current_status_;
}
::ru::mail::go::webbase::blobs::CrawlDetails* FetcherData::release_current_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetcherData.current_status)
  clear_has_current_status();
  ::ru::mail::go::webbase::blobs::CrawlDetails* temp = current_status_;
  current_status_ = NULL;
  return temp;
}
void FetcherData::set_allocated_current_status(::ru::mail::go::webbase::blobs::CrawlDetails* current_status) {
  delete current_status_;
  current_status_ = current_status;
  if (current_status) {
    set_has_current_status();
  } else {
    clear_has_current_status();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetcherData.current_status)
}

// optional bool disabled_by_robots = 2;
bool FetcherData::has_disabled_by_robots() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FetcherData::set_has_disabled_by_robots() {
  _has_bits_[0] |= 0x00000020u;
}
void FetcherData::clear_has_disabled_by_robots() {
  _has_bits_[0] &= ~0x00000020u;
}
void FetcherData::clear_disabled_by_robots() {
  disabled_by_robots_ = false;
  clear_has_disabled_by_robots();
}
bool FetcherData::disabled_by_robots() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.disabled_by_robots)
  return disabled_by_robots_;
}
void FetcherData::set_disabled_by_robots(bool value) {
  set_has_disabled_by_robots();
  disabled_by_robots_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.disabled_by_robots)
}

// optional string redirect = 3;
bool FetcherData::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FetcherData::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
void FetcherData::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
void FetcherData::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
const ::std::string& FetcherData::redirect() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.redirect)
  return redirect_.GetNoArena();
}
void FetcherData::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.redirect)
}
#if LANG_CXX11
void FetcherData::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetcherData.redirect)
}
#endif
void FetcherData::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetcherData.redirect)
}
void FetcherData::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetcherData.redirect)
}
::std::string* FetcherData::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetcherData.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetcherData::release_redirect() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetcherData.redirect)
  clear_has_redirect();
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetcherData::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetcherData.redirect)
}

// optional int64 index_time = 4;
bool FetcherData::has_index_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FetcherData::set_has_index_time() {
  _has_bits_[0] |= 0x00000008u;
}
void FetcherData::clear_has_index_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void FetcherData::clear_index_time() {
  index_time_ = GOOGLE_LONGLONG(0);
  clear_has_index_time();
}
::google::protobuf::int64 FetcherData::index_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.index_time)
  return index_time_;
}
void FetcherData::set_index_time(::google::protobuf::int64 value) {
  set_has_index_time();
  index_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.index_time)
}

// optional string full_url = 5;
bool FetcherData::has_full_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FetcherData::set_has_full_url() {
  _has_bits_[0] |= 0x00000002u;
}
void FetcherData::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void FetcherData::clear_full_url() {
  full_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_url();
}
const ::std::string& FetcherData::full_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.full_url)
  return full_url_.GetNoArena();
}
void FetcherData::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.full_url)
}
#if LANG_CXX11
void FetcherData::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetcherData.full_url)
}
#endif
void FetcherData::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetcherData.full_url)
}
void FetcherData::set_full_url(const char* value, size_t size) {
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetcherData.full_url)
}
::std::string* FetcherData::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetcherData.full_url)
  return full_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetcherData::release_full_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetcherData.full_url)
  clear_has_full_url();
  return full_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetcherData::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetcherData.full_url)
}

// optional int64 first_index_time = 6;
bool FetcherData::has_first_index_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FetcherData::set_has_first_index_time() {
  _has_bits_[0] |= 0x00000010u;
}
void FetcherData::clear_has_first_index_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void FetcherData::clear_first_index_time() {
  first_index_time_ = GOOGLE_LONGLONG(0);
  clear_has_first_index_time();
}
::google::protobuf::int64 FetcherData::first_index_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.first_index_time)
  return first_index_time_;
}
void FetcherData::set_first_index_time(::google::protobuf::int64 value) {
  set_has_first_index_time();
  first_index_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.first_index_time)
}

// optional int64 first_crawl_time = 7;
bool FetcherData::has_first_crawl_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FetcherData::set_has_first_crawl_time() {
  _has_bits_[0] |= 0x00000100u;
}
void FetcherData::clear_has_first_crawl_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void FetcherData::clear_first_crawl_time() {
  first_crawl_time_ = GOOGLE_LONGLONG(0);
  clear_has_first_crawl_time();
}
::google::protobuf::int64 FetcherData::first_crawl_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.first_crawl_time)
  return first_crawl_time_;
}
void FetcherData::set_first_crawl_time(::google::protobuf::int64 value) {
  set_has_first_crawl_time();
  first_crawl_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.first_crawl_time)
}

// optional .ru.mail.go.webbase.blobs.ContentType content_type = 8;
bool FetcherData::has_content_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FetcherData::set_has_content_type() {
  _has_bits_[0] |= 0x00000080u;
}
void FetcherData::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void FetcherData::clear_content_type() {
  content_type_ = 0;
  clear_has_content_type();
}
::ru::mail::go::webbase::blobs::ContentType FetcherData::content_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.content_type)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(content_type_);
}
void FetcherData::set_content_type(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.content_type)
}

// optional bool should_be_indexed = 9;
bool FetcherData::has_should_be_indexed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FetcherData::set_has_should_be_indexed() {
  _has_bits_[0] |= 0x00000040u;
}
void FetcherData::clear_has_should_be_indexed() {
  _has_bits_[0] &= ~0x00000040u;
}
void FetcherData::clear_should_be_indexed() {
  should_be_indexed_ = false;
  clear_has_should_be_indexed();
}
bool FetcherData::should_be_indexed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.should_be_indexed)
  return should_be_indexed_;
}
void FetcherData::set_should_be_indexed(bool value) {
  set_has_should_be_indexed();
  should_be_indexed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.should_be_indexed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankingData::kBRSQFieldNumber;
const int RankingData::kBRVFieldNumber;
const int RankingData::kURUQFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankingData::RankingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.RankingData)
}
RankingData::RankingData(const RankingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brsq_, &from.brsq_,
    static_cast<size_t>(reinterpret_cast<char*>(&uruq_) -
    reinterpret_cast<char*>(&brsq_)) + sizeof(uruq_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.RankingData)
}

void RankingData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&brsq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uruq_) -
      reinterpret_cast<char*>(&brsq_)) + sizeof(uruq_));
}

RankingData::~RankingData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.RankingData)
  SharedDtor();
}

void RankingData::SharedDtor() {
}

void RankingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankingData::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankingData& RankingData::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankingData* RankingData::New(::google::protobuf::Arena* arena) const {
  RankingData* n = new RankingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankingData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.RankingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&brsq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uruq_) -
        reinterpret_cast<char*>(&brsq_)) + sizeof(uruq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.RankingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 BRSQ = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_brsq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brsq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double BRV = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_brv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 URUQ = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_uruq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uruq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.RankingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.RankingData)
  return false;
#undef DO_
}

void RankingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.RankingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 BRSQ = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->brsq(), output);
  }

  // optional double BRV = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brv(), output);
  }

  // optional int64 URUQ = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uruq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.RankingData)
}

::google::protobuf::uint8* RankingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.RankingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 BRSQ = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->brsq(), target);
  }

  // optional double BRV = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brv(), target);
  }

  // optional int64 URUQ = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uruq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.RankingData)
  return target;
}

size_t RankingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.RankingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 BRSQ = 1 [default = 0];
    if (has_brsq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brsq());
    }

    // optional double BRV = 2 [default = 0];
    if (has_brv()) {
      total_size += 1 + 8;
    }

    // optional int64 URUQ = 3 [default = 0];
    if (has_uruq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uruq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.RankingData)
  GOOGLE_DCHECK_NE(&from, this);
  const RankingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.RankingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.RankingData)
    MergeFrom(*source);
  }
}

void RankingData::MergeFrom(const RankingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.RankingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      brsq_ = from.brsq_;
    }
    if (cached_has_bits & 0x00000002u) {
      brv_ = from.brv_;
    }
    if (cached_has_bits & 0x00000004u) {
      uruq_ = from.uruq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RankingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.RankingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankingData::CopyFrom(const RankingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.RankingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingData::IsInitialized() const {
  return true;
}

void RankingData::Swap(RankingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankingData::InternalSwap(RankingData* other) {
  using std::swap;
  swap(brsq_, other->brsq_);
  swap(brv_, other->brv_);
  swap(uruq_, other->uruq_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankingData::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankingData

// optional int64 BRSQ = 1 [default = 0];
bool RankingData::has_brsq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RankingData::set_has_brsq() {
  _has_bits_[0] |= 0x00000001u;
}
void RankingData::clear_has_brsq() {
  _has_bits_[0] &= ~0x00000001u;
}
void RankingData::clear_brsq() {
  brsq_ = GOOGLE_LONGLONG(0);
  clear_has_brsq();
}
::google::protobuf::int64 RankingData::brsq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RankingData.BRSQ)
  return brsq_;
}
void RankingData::set_brsq(::google::protobuf::int64 value) {
  set_has_brsq();
  brsq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RankingData.BRSQ)
}

// optional double BRV = 2 [default = 0];
bool RankingData::has_brv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RankingData::set_has_brv() {
  _has_bits_[0] |= 0x00000002u;
}
void RankingData::clear_has_brv() {
  _has_bits_[0] &= ~0x00000002u;
}
void RankingData::clear_brv() {
  brv_ = 0;
  clear_has_brv();
}
double RankingData::brv() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RankingData.BRV)
  return brv_;
}
void RankingData::set_brv(double value) {
  set_has_brv();
  brv_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RankingData.BRV)
}

// optional int64 URUQ = 3 [default = 0];
bool RankingData::has_uruq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RankingData::set_has_uruq() {
  _has_bits_[0] |= 0x00000004u;
}
void RankingData::clear_has_uruq() {
  _has_bits_[0] &= ~0x00000004u;
}
void RankingData::clear_uruq() {
  uruq_ = GOOGLE_LONGLONG(0);
  clear_has_uruq();
}
::google::protobuf::int64 RankingData::uruq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RankingData.URUQ)
  return uruq_;
}
void RankingData::set_uruq(::google::protobuf::int64 value) {
  set_has_uruq();
  uruq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RankingData.URUQ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kFromFieldNumber;
const int Link::kTextFieldNumber;
const int Link::kRankFieldNumber;
const int Link::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Link)
}
Link::Link(const Link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from()) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Link)
}

void Link::SharedCtor() {
  _cached_size_ = 0;
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_ = 0;
  count_ = 1u;
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Link& Link::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    rank_ = 0;
    count_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), static_cast<int>(this->from().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Link.from");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Link.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rank = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Link.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Link.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional double rank = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rank(), output);
  }

  // optional uint32 count = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Link)
}

::google::protobuf::uint8* Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Link.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Link.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional double rank = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rank(), target);
  }

  // optional uint32 count = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Link)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string from = 1;
  if (has_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional double rank = 3 [default = 0];
    if (has_rank()) {
      total_size += 1 + 8;
    }

    // optional uint32 count = 4 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from();
      from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  using std::swap;
  from_.Swap(&other->from_);
  text_.Swap(&other->text_);
  swap(rank_, other->rank_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link

// required string from = 1;
bool Link::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Link::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
void Link::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void Link::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
const ::std::string& Link::from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Link.from)
  return from_.GetNoArena();
}
void Link::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Link.from)
}
#if LANG_CXX11
void Link::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Link.from)
}
#endif
void Link::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Link.from)
}
void Link::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Link.from)
}
::std::string* Link::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Link.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Link::release_from() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Link.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Link::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Link.from)
}

// optional string text = 2;
bool Link::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Link::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void Link::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void Link::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Link::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Link.text)
  return text_.GetNoArena();
}
void Link::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Link.text)
}
#if LANG_CXX11
void Link::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Link.text)
}
#endif
void Link::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Link.text)
}
void Link::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Link.text)
}
::std::string* Link::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Link.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Link::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Link.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Link::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Link.text)
}

// optional double rank = 3 [default = 0];
bool Link::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Link::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
void Link::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
void Link::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
double Link::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Link.rank)
  return rank_;
}
void Link::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Link.rank)
}

// optional uint32 count = 4 [default = 1];
bool Link::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Link::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void Link::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void Link::clear_count() {
  count_ = 1u;
  clear_has_count();
}
::google::protobuf::uint32 Link::count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Link.count)
  return count_;
}
void Link::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Link.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinksData::kBacklinksCountFieldNumber;
const int LinksData::kUniqueTextsCountFieldNumber;
const int LinksData::kUrlBacklinksFieldNumber;
const int LinksData::kSiteBacklinksFieldNumber;
const int LinksData::kBackRedirectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinksData::LinksData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.LinksData)
}
LinksData::LinksData(const LinksData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_backlinks_(from.url_backlinks_),
      site_backlinks_(from.site_backlinks_),
      back_redirects_(from.back_redirects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&backlinks_count_, &from.backlinks_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_texts_count_) -
    reinterpret_cast<char*>(&backlinks_count_)) + sizeof(unique_texts_count_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.LinksData)
}

void LinksData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&backlinks_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_texts_count_) -
      reinterpret_cast<char*>(&backlinks_count_)) + sizeof(unique_texts_count_));
}

LinksData::~LinksData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.LinksData)
  SharedDtor();
}

void LinksData::SharedDtor() {
}

void LinksData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinksData::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinksData& LinksData::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinksData* LinksData::New(::google::protobuf::Arena* arena) const {
  LinksData* n = new LinksData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinksData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.LinksData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_backlinks_.Clear();
  site_backlinks_.Clear();
  back_redirects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&backlinks_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unique_texts_count_) -
        reinterpret_cast<char*>(&backlinks_count_)) + sizeof(unique_texts_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LinksData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.LinksData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 backlinks_count = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_backlinks_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backlinks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unique_texts_count = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_unique_texts_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unique_texts_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Link url_backlinks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_url_backlinks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Link site_backlinks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_site_backlinks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Link back_redirects = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_back_redirects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.LinksData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.LinksData)
  return false;
#undef DO_
}

void LinksData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.LinksData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 backlinks_count = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->backlinks_count(), output);
  }

  // optional int32 unique_texts_count = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unique_texts_count(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Link url_backlinks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->url_backlinks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->url_backlinks(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Link site_backlinks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_backlinks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->site_backlinks(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Link back_redirects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->back_redirects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->back_redirects(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.LinksData)
}

::google::protobuf::uint8* LinksData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.LinksData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 backlinks_count = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->backlinks_count(), target);
  }

  // optional int32 unique_texts_count = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unique_texts_count(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.Link url_backlinks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->url_backlinks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->url_backlinks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.Link site_backlinks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_backlinks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->site_backlinks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.Link back_redirects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->back_redirects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->back_redirects(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.LinksData)
  return target;
}

size_t LinksData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.LinksData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.Link url_backlinks = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->url_backlinks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->url_backlinks(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.Link site_backlinks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->site_backlinks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site_backlinks(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.Link back_redirects = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->back_redirects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->back_redirects(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 backlinks_count = 1 [default = 0];
    if (has_backlinks_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backlinks_count());
    }

    // optional int32 unique_texts_count = 2 [default = 0];
    if (has_unique_texts_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unique_texts_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinksData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.LinksData)
  GOOGLE_DCHECK_NE(&from, this);
  const LinksData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinksData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.LinksData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.LinksData)
    MergeFrom(*source);
  }
}

void LinksData::MergeFrom(const LinksData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.LinksData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_backlinks_.MergeFrom(from.url_backlinks_);
  site_backlinks_.MergeFrom(from.site_backlinks_);
  back_redirects_.MergeFrom(from.back_redirects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      backlinks_count_ = from.backlinks_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      unique_texts_count_ = from.unique_texts_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinksData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.LinksData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinksData::CopyFrom(const LinksData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.LinksData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinksData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->url_backlinks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->site_backlinks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->back_redirects())) return false;
  return true;
}

void LinksData::Swap(LinksData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinksData::InternalSwap(LinksData* other) {
  using std::swap;
  url_backlinks_.InternalSwap(&other->url_backlinks_);
  site_backlinks_.InternalSwap(&other->site_backlinks_);
  back_redirects_.InternalSwap(&other->back_redirects_);
  swap(backlinks_count_, other->backlinks_count_);
  swap(unique_texts_count_, other->unique_texts_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinksData::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinksData

// optional int32 backlinks_count = 1 [default = 0];
bool LinksData::has_backlinks_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LinksData::set_has_backlinks_count() {
  _has_bits_[0] |= 0x00000001u;
}
void LinksData::clear_has_backlinks_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void LinksData::clear_backlinks_count() {
  backlinks_count_ = 0;
  clear_has_backlinks_count();
}
::google::protobuf::int32 LinksData::backlinks_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.backlinks_count)
  return backlinks_count_;
}
void LinksData::set_backlinks_count(::google::protobuf::int32 value) {
  set_has_backlinks_count();
  backlinks_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LinksData.backlinks_count)
}

// optional int32 unique_texts_count = 2 [default = 0];
bool LinksData::has_unique_texts_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LinksData::set_has_unique_texts_count() {
  _has_bits_[0] |= 0x00000002u;
}
void LinksData::clear_has_unique_texts_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void LinksData::clear_unique_texts_count() {
  unique_texts_count_ = 0;
  clear_has_unique_texts_count();
}
::google::protobuf::int32 LinksData::unique_texts_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.unique_texts_count)
  return unique_texts_count_;
}
void LinksData::set_unique_texts_count(::google::protobuf::int32 value) {
  set_has_unique_texts_count();
  unique_texts_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LinksData.unique_texts_count)
}

// repeated .ru.mail.go.webbase.blobs.Link url_backlinks = 3;
int LinksData::url_backlinks_size() const {
  return url_backlinks_.size();
}
void LinksData::clear_url_backlinks() {
  url_backlinks_.Clear();
}
const ::ru::mail::go::webbase::blobs::Link& LinksData::url_backlinks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return url_backlinks_.Get(index);
}
::ru::mail::go::webbase::blobs::Link* LinksData::mutable_url_backlinks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return url_backlinks_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Link* LinksData::add_url_backlinks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return url_backlinks_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
LinksData::mutable_url_backlinks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return &url_backlinks_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
LinksData::url_backlinks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return url_backlinks_;
}

// repeated .ru.mail.go.webbase.blobs.Link site_backlinks = 4;
int LinksData::site_backlinks_size() const {
  return site_backlinks_.size();
}
void LinksData::clear_site_backlinks() {
  site_backlinks_.Clear();
}
const ::ru::mail::go::webbase::blobs::Link& LinksData::site_backlinks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return site_backlinks_.Get(index);
}
::ru::mail::go::webbase::blobs::Link* LinksData::mutable_site_backlinks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return site_backlinks_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Link* LinksData::add_site_backlinks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return site_backlinks_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
LinksData::mutable_site_backlinks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return &site_backlinks_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
LinksData::site_backlinks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return site_backlinks_;
}

// repeated .ru.mail.go.webbase.blobs.Link back_redirects = 5;
int LinksData::back_redirects_size() const {
  return back_redirects_.size();
}
void LinksData::clear_back_redirects() {
  back_redirects_.Clear();
}
const ::ru::mail::go::webbase::blobs::Link& LinksData::back_redirects(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return back_redirects_.Get(index);
}
::ru::mail::go::webbase::blobs::Link* LinksData::mutable_back_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return back_redirects_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Link* LinksData::add_back_redirects() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return back_redirects_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
LinksData::mutable_back_redirects() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return &back_redirects_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
LinksData::back_redirects() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return back_redirects_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuerySession::kDateFieldNumber;
const int QuerySession::kViewsFieldNumber;
const int QuerySession::kClicksFieldNumber;
const int QuerySession::kAvgPositionFieldNumber;
const int QuerySession::kMinPositionFieldNumber;
const int QuerySession::kMaxPositionFieldNumber;
const int QuerySession::kMinTsFieldNumber;
const int QuerySession::kMaxTsFieldNumber;
const int QuerySession::kShowsFieldNumber;
const int QuerySession::kLastClicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuerySession::QuerySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.QuerySession)
}
QuerySession::QuerySession(const QuerySession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&date_, &from.date_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_clicks_) -
    reinterpret_cast<char*>(&date_)) + sizeof(last_clicks_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.QuerySession)
}

void QuerySession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_clicks_) -
      reinterpret_cast<char*>(&date_)) + sizeof(last_clicks_));
}

QuerySession::~QuerySession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.QuerySession)
  SharedDtor();
}

void QuerySession::SharedDtor() {
}

void QuerySession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySession::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuerySession& QuerySession::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuerySession* QuerySession::New(::google::protobuf::Arena* arena) const {
  QuerySession* n = new QuerySession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuerySession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.QuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ts_) -
        reinterpret_cast<char*>(&date_)) + sizeof(max_ts_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&shows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_clicks_) -
        reinterpret_cast<char*>(&shows_)) + sizeof(last_clicks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuerySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.QuerySession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 views = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clicks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double avg_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_avg_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_min_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_max_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_ts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_min_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_ts = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_max_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shows = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_shows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_clicks = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_last_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.QuerySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.QuerySession)
  return false;
#undef DO_
}

void QuerySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.QuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 date = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->date(), output);
  }

  // optional int32 views = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->views(), output);
  }

  // optional int32 clicks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clicks(), output);
  }

  // optional double avg_position = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->avg_position(), output);
  }

  // optional int32 min_position = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_position(), output);
  }

  // optional int32 max_position = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_position(), output);
  }

  // optional int64 min_ts = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->min_ts(), output);
  }

  // optional int64 max_ts = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->max_ts(), output);
  }

  // optional int32 shows = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->shows(), output);
  }

  // optional int32 last_clicks = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->last_clicks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.QuerySession)
}

::google::protobuf::uint8* QuerySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.QuerySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->date(), target);
  }

  // optional int32 views = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->views(), target);
  }

  // optional int32 clicks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clicks(), target);
  }

  // optional double avg_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->avg_position(), target);
  }

  // optional int32 min_position = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_position(), target);
  }

  // optional int32 max_position = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_position(), target);
  }

  // optional int64 min_ts = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->min_ts(), target);
  }

  // optional int64 max_ts = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->max_ts(), target);
  }

  // optional int32 shows = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->shows(), target);
  }

  // optional int32 last_clicks = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->last_clicks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.QuerySession)
  return target;
}

size_t QuerySession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.QuerySession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }

    // optional int32 views = 2;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->views());
    }

    // optional int32 clicks = 3;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clicks());
    }

    // optional double avg_position = 4;
    if (has_avg_position()) {
      total_size += 1 + 8;
    }

    // optional int32 min_position = 5;
    if (has_min_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_position());
    }

    // optional int32 max_position = 6;
    if (has_max_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_position());
    }

    // optional int64 min_ts = 7;
    if (has_min_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_ts());
    }

    // optional int64 max_ts = 8;
    if (has_max_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_ts());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 shows = 9;
    if (has_shows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shows());
    }

    // optional int32 last_clicks = 10;
    if (has_last_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_clicks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.QuerySession)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuerySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.QuerySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.QuerySession)
    MergeFrom(*source);
  }
}

void QuerySession::MergeFrom(const QuerySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.QuerySession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      date_ = from.date_;
    }
    if (cached_has_bits & 0x00000002u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000004u) {
      clicks_ = from.clicks_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_position_ = from.avg_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_position_ = from.min_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_position_ = from.max_position_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_ts_ = from.min_ts_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_ts_ = from.max_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      shows_ = from.shows_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_clicks_ = from.last_clicks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuerySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.QuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySession::CopyFrom(const QuerySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.QuerySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySession::IsInitialized() const {
  return true;
}

void QuerySession::Swap(QuerySession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuerySession::InternalSwap(QuerySession* other) {
  using std::swap;
  swap(date_, other->date_);
  swap(views_, other->views_);
  swap(clicks_, other->clicks_);
  swap(avg_position_, other->avg_position_);
  swap(min_position_, other->min_position_);
  swap(max_position_, other->max_position_);
  swap(min_ts_, other->min_ts_);
  swap(max_ts_, other->max_ts_);
  swap(shows_, other->shows_);
  swap(last_clicks_, other->last_clicks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuerySession::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuerySession

// optional int64 date = 1;
bool QuerySession::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuerySession::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void QuerySession::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuerySession::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
::google::protobuf::int64 QuerySession::date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.date)
  return date_;
}
void QuerySession::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.date)
}

// optional int32 views = 2;
bool QuerySession::has_views() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuerySession::set_has_views() {
  _has_bits_[0] |= 0x00000002u;
}
void QuerySession::clear_has_views() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuerySession::clear_views() {
  views_ = 0;
  clear_has_views();
}
::google::protobuf::int32 QuerySession::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.views)
  return views_;
}
void QuerySession::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.views)
}

// optional int32 clicks = 3;
bool QuerySession::has_clicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QuerySession::set_has_clicks() {
  _has_bits_[0] |= 0x00000004u;
}
void QuerySession::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000004u;
}
void QuerySession::clear_clicks() {
  clicks_ = 0;
  clear_has_clicks();
}
::google::protobuf::int32 QuerySession::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.clicks)
  return clicks_;
}
void QuerySession::set_clicks(::google::protobuf::int32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.clicks)
}

// optional double avg_position = 4;
bool QuerySession::has_avg_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QuerySession::set_has_avg_position() {
  _has_bits_[0] |= 0x00000008u;
}
void QuerySession::clear_has_avg_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void QuerySession::clear_avg_position() {
  avg_position_ = 0;
  clear_has_avg_position();
}
double QuerySession::avg_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.avg_position)
  return avg_position_;
}
void QuerySession::set_avg_position(double value) {
  set_has_avg_position();
  avg_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.avg_position)
}

// optional int32 min_position = 5;
bool QuerySession::has_min_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QuerySession::set_has_min_position() {
  _has_bits_[0] |= 0x00000010u;
}
void QuerySession::clear_has_min_position() {
  _has_bits_[0] &= ~0x00000010u;
}
void QuerySession::clear_min_position() {
  min_position_ = 0;
  clear_has_min_position();
}
::google::protobuf::int32 QuerySession::min_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.min_position)
  return min_position_;
}
void QuerySession::set_min_position(::google::protobuf::int32 value) {
  set_has_min_position();
  min_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.min_position)
}

// optional int32 max_position = 6;
bool QuerySession::has_max_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QuerySession::set_has_max_position() {
  _has_bits_[0] |= 0x00000020u;
}
void QuerySession::clear_has_max_position() {
  _has_bits_[0] &= ~0x00000020u;
}
void QuerySession::clear_max_position() {
  max_position_ = 0;
  clear_has_max_position();
}
::google::protobuf::int32 QuerySession::max_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.max_position)
  return max_position_;
}
void QuerySession::set_max_position(::google::protobuf::int32 value) {
  set_has_max_position();
  max_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.max_position)
}

// optional int64 min_ts = 7;
bool QuerySession::has_min_ts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QuerySession::set_has_min_ts() {
  _has_bits_[0] |= 0x00000040u;
}
void QuerySession::clear_has_min_ts() {
  _has_bits_[0] &= ~0x00000040u;
}
void QuerySession::clear_min_ts() {
  min_ts_ = GOOGLE_LONGLONG(0);
  clear_has_min_ts();
}
::google::protobuf::int64 QuerySession::min_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.min_ts)
  return min_ts_;
}
void QuerySession::set_min_ts(::google::protobuf::int64 value) {
  set_has_min_ts();
  min_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.min_ts)
}

// optional int64 max_ts = 8;
bool QuerySession::has_max_ts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QuerySession::set_has_max_ts() {
  _has_bits_[0] |= 0x00000080u;
}
void QuerySession::clear_has_max_ts() {
  _has_bits_[0] &= ~0x00000080u;
}
void QuerySession::clear_max_ts() {
  max_ts_ = GOOGLE_LONGLONG(0);
  clear_has_max_ts();
}
::google::protobuf::int64 QuerySession::max_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.max_ts)
  return max_ts_;
}
void QuerySession::set_max_ts(::google::protobuf::int64 value) {
  set_has_max_ts();
  max_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.max_ts)
}

// optional int32 shows = 9;
bool QuerySession::has_shows() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QuerySession::set_has_shows() {
  _has_bits_[0] |= 0x00000100u;
}
void QuerySession::clear_has_shows() {
  _has_bits_[0] &= ~0x00000100u;
}
void QuerySession::clear_shows() {
  shows_ = 0;
  clear_has_shows();
}
::google::protobuf::int32 QuerySession::shows() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.shows)
  return shows_;
}
void QuerySession::set_shows(::google::protobuf::int32 value) {
  set_has_shows();
  shows_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.shows)
}

// optional int32 last_clicks = 10;
bool QuerySession::has_last_clicks() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void QuerySession::set_has_last_clicks() {
  _has_bits_[0] |= 0x00000200u;
}
void QuerySession::clear_has_last_clicks() {
  _has_bits_[0] &= ~0x00000200u;
}
void QuerySession::clear_last_clicks() {
  last_clicks_ = 0;
  clear_has_last_clicks();
}
::google::protobuf::int32 QuerySession::last_clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.last_clicks)
  return last_clicks_;
}
void QuerySession::set_last_clicks(::google::protobuf::int32 value) {
  set_has_last_clicks();
  last_clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.last_clicks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryInfo::kTextFieldNumber;
const int QueryInfo::kSessionsFieldNumber;
const int QueryInfo::kAttractabilityFieldNumber;
const int QueryInfo::kSatisfactibilityFieldNumber;
const int QueryInfo::kUsersFieldNumber;
const int QueryInfo::kActualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryInfo::QueryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.QueryInfo)
}
QueryInfo::QueryInfo(const QueryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&attractability_, &from.attractability_,
    static_cast<size_t>(reinterpret_cast<char*>(&users_) -
    reinterpret_cast<char*>(&attractability_)) + sizeof(users_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.QueryInfo)
}

void QueryInfo::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attractability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&users_) -
      reinterpret_cast<char*>(&attractability_)) + sizeof(users_));
}

QueryInfo::~QueryInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.QueryInfo)
  SharedDtor();
}

void QueryInfo::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryInfo::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryInfo& QueryInfo::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryInfo* QueryInfo::New(::google::protobuf::Arena* arena) const {
  QueryInfo* n = new QueryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&attractability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&users_) -
        reinterpret_cast<char*>(&attractability_)) + sizeof(users_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.QueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.QueryInfo.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.QuerySession sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double attractability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_attractability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attractability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double satisfactibility = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_satisfactibility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &satisfactibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 users = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_users();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double actuality = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_actuality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &actuality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.QueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.QueryInfo)
  return false;
#undef DO_
}

void QueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.QueryInfo.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.QuerySession sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sessions(static_cast<int>(i)), output);
  }

  // optional double attractability = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->attractability(), output);
  }

  // optional double satisfactibility = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->satisfactibility(), output);
  }

  // optional int32 users = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->users(), output);
  }

  // optional double actuality = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->actuality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.QueryInfo)
}

::google::protobuf::uint8* QueryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.QueryInfo.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.QuerySession sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  // optional double attractability = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->attractability(), target);
  }

  // optional double satisfactibility = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->satisfactibility(), target);
  }

  // optional int32 users = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->users(), target);
  }

  // optional double actuality = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->actuality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.QueryInfo)
  return target;
}

size_t QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.QueryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  // repeated .ru.mail.go.webbase.blobs.QuerySession sessions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 30u) {
    // optional double attractability = 3;
    if (has_attractability()) {
      total_size += 1 + 8;
    }

    // optional double satisfactibility = 4;
    if (has_satisfactibility()) {
      total_size += 1 + 8;
    }

    // optional double actuality = 6;
    if (has_actuality()) {
      total_size += 1 + 8;
    }

    // optional int32 users = 5;
    if (has_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->users());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.QueryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.QueryInfo)
    MergeFrom(*source);
  }
}

void QueryInfo::MergeFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      attractability_ = from.attractability_;
    }
    if (cached_has_bits & 0x00000004u) {
      satisfactibility_ = from.satisfactibility_;
    }
    if (cached_has_bits & 0x00000008u) {
      actuality_ = from.actuality_;
    }
    if (cached_has_bits & 0x00000010u) {
      users_ = from.users_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryInfo::CopyFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QueryInfo::Swap(QueryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryInfo::InternalSwap(QueryInfo* other) {
  using std::swap;
  sessions_.InternalSwap(&other->sessions_);
  text_.Swap(&other->text_);
  swap(attractability_, other->attractability_);
  swap(satisfactibility_, other->satisfactibility_);
  swap(actuality_, other->actuality_);
  swap(users_, other->users_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryInfo::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryInfo

// required string text = 1;
bool QueryInfo::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryInfo::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryInfo::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryInfo::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& QueryInfo::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.text)
  return text_.GetNoArena();
}
void QueryInfo::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.text)
}
#if LANG_CXX11
void QueryInfo::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.QueryInfo.text)
}
#endif
void QueryInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.QueryInfo.text)
}
void QueryInfo::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.QueryInfo.text)
}
::std::string* QueryInfo::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QueryInfo.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryInfo::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.QueryInfo.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryInfo::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.QueryInfo.text)
}

// repeated .ru.mail.go.webbase.blobs.QuerySession sessions = 2;
int QueryInfo::sessions_size() const {
  return sessions_.size();
}
void QueryInfo::clear_sessions() {
  sessions_.Clear();
}
const ::ru::mail::go::webbase::blobs::QuerySession& QueryInfo::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return sessions_.Get(index);
}
::ru::mail::go::webbase::blobs::QuerySession* QueryInfo::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return sessions_.Mutable(index);
}
::ru::mail::go::webbase::blobs::QuerySession* QueryInfo::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QuerySession >*
QueryInfo::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QuerySession >&
QueryInfo::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return sessions_;
}

// optional double attractability = 3;
bool QueryInfo::has_attractability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryInfo::set_has_attractability() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryInfo::clear_has_attractability() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryInfo::clear_attractability() {
  attractability_ = 0;
  clear_has_attractability();
}
double QueryInfo::attractability() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.attractability)
  return attractability_;
}
void QueryInfo::set_attractability(double value) {
  set_has_attractability();
  attractability_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.attractability)
}

// optional double satisfactibility = 4;
bool QueryInfo::has_satisfactibility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryInfo::set_has_satisfactibility() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryInfo::clear_has_satisfactibility() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryInfo::clear_satisfactibility() {
  satisfactibility_ = 0;
  clear_has_satisfactibility();
}
double QueryInfo::satisfactibility() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.satisfactibility)
  return satisfactibility_;
}
void QueryInfo::set_satisfactibility(double value) {
  set_has_satisfactibility();
  satisfactibility_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.satisfactibility)
}

// optional int32 users = 5;
bool QueryInfo::has_users() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QueryInfo::set_has_users() {
  _has_bits_[0] |= 0x00000010u;
}
void QueryInfo::clear_has_users() {
  _has_bits_[0] &= ~0x00000010u;
}
void QueryInfo::clear_users() {
  users_ = 0;
  clear_has_users();
}
::google::protobuf::int32 QueryInfo::users() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.users)
  return users_;
}
void QueryInfo::set_users(::google::protobuf::int32 value) {
  set_has_users();
  users_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.users)
}

// optional double actuality = 6;
bool QueryInfo::has_actuality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryInfo::set_has_actuality() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryInfo::clear_has_actuality() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryInfo::clear_actuality() {
  actuality_ = 0;
  clear_has_actuality();
}
double QueryInfo::actuality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.actuality)
  return actuality_;
}
void QueryInfo::set_actuality(double value) {
  set_has_actuality();
  actuality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.actuality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoQueryInfo::kGeoCodeFieldNumber;
const int GeoQueryInfo::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoQueryInfo::GeoQueryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.GeoQueryInfo)
}
GeoQueryInfo::GeoQueryInfo(const GeoQueryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      queries_(from.queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geo_code_ = from.geo_code_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.GeoQueryInfo)
}

void GeoQueryInfo::SharedCtor() {
  _cached_size_ = 0;
  geo_code_ = 0;
}

GeoQueryInfo::~GeoQueryInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.GeoQueryInfo)
  SharedDtor();
}

void GeoQueryInfo::SharedDtor() {
}

void GeoQueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoQueryInfo::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoQueryInfo& GeoQueryInfo::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

GeoQueryInfo* GeoQueryInfo::New(::google::protobuf::Arena* arena) const {
  GeoQueryInfo* n = new GeoQueryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoQueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  geo_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeoQueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 geo_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geo_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.QueryInfo queries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.GeoQueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.GeoQueryInfo)
  return false;
#undef DO_
}

void GeoQueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 geo_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->geo_code(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.QueryInfo queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queries(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.GeoQueryInfo)
}

::google::protobuf::uint8* GeoQueryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 geo_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->geo_code(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.QueryInfo queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->queries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.GeoQueryInfo)
  return target;
}

size_t GeoQueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 geo_code = 1;
  if (has_geo_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->geo_code());
  }
  // repeated .ru.mail.go.webbase.blobs.QueryInfo queries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoQueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoQueryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoQueryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.GeoQueryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.GeoQueryInfo)
    MergeFrom(*source);
  }
}

void GeoQueryInfo::MergeFrom(const GeoQueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  if (from.has_geo_code()) {
    set_geo_code(from.geo_code());
  }
}

void GeoQueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoQueryInfo::CopyFrom(const GeoQueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.GeoQueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoQueryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->queries())) return false;
  return true;
}

void GeoQueryInfo::Swap(GeoQueryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoQueryInfo::InternalSwap(GeoQueryInfo* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  swap(geo_code_, other->geo_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoQueryInfo::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoQueryInfo

// required int32 geo_code = 1;
bool GeoQueryInfo::has_geo_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoQueryInfo::set_has_geo_code() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoQueryInfo::clear_has_geo_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoQueryInfo::clear_geo_code() {
  geo_code_ = 0;
  clear_has_geo_code();
}
::google::protobuf::int32 GeoQueryInfo::geo_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GeoQueryInfo.geo_code)
  return geo_code_;
}
void GeoQueryInfo::set_geo_code(::google::protobuf::int32 value) {
  set_has_geo_code();
  geo_code_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.GeoQueryInfo.geo_code)
}

// repeated .ru.mail.go.webbase.blobs.QueryInfo queries = 2;
int GeoQueryInfo::queries_size() const {
  return queries_.size();
}
void GeoQueryInfo::clear_queries() {
  queries_.Clear();
}
const ::ru::mail::go::webbase::blobs::QueryInfo& GeoQueryInfo::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return queries_.Get(index);
}
::ru::mail::go::webbase::blobs::QueryInfo* GeoQueryInfo::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return queries_.Mutable(index);
}
::ru::mail::go::webbase::blobs::QueryInfo* GeoQueryInfo::add_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryInfo >*
GeoQueryInfo::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return &queries_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryInfo >&
GeoQueryInfo::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return queries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryData::kGeoQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryData::QueryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.QueryData)
}
QueryData::QueryData(const QueryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      geo_queries_(from.geo_queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.QueryData)
}

void QueryData::SharedCtor() {
  _cached_size_ = 0;
}

QueryData::~QueryData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.QueryData)
  SharedDtor();
}

void QueryData::SharedDtor() {
}

void QueryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryData::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryData& QueryData::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryData* QueryData::New(::google::protobuf::Arena* arena) const {
  QueryData* n = new QueryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.QueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_queries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.QueryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.GeoQueryInfo geo_queries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geo_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.QueryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.QueryData)
  return false;
#undef DO_
}

void QueryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.QueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.GeoQueryInfo geo_queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geo_queries(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.QueryData)
}

::google::protobuf::uint8* QueryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.QueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.GeoQueryInfo geo_queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->geo_queries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.QueryData)
  return target;
}

size_t QueryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.QueryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.GeoQueryInfo geo_queries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_queries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.QueryData)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.QueryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.QueryData)
    MergeFrom(*source);
  }
}

void QueryData::MergeFrom(const QueryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.QueryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_queries_.MergeFrom(from.geo_queries_);
}

void QueryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.QueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryData::CopyFrom(const QueryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.QueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->geo_queries())) return false;
  return true;
}

void QueryData::Swap(QueryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryData::InternalSwap(QueryData* other) {
  using std::swap;
  geo_queries_.InternalSwap(&other->geo_queries_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryData::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryData

// repeated .ru.mail.go.webbase.blobs.GeoQueryInfo geo_queries = 1;
int QueryData::geo_queries_size() const {
  return geo_queries_.size();
}
void QueryData::clear_geo_queries() {
  geo_queries_.Clear();
}
const ::ru::mail::go::webbase::blobs::GeoQueryInfo& QueryData::geo_queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return geo_queries_.Get(index);
}
::ru::mail::go::webbase::blobs::GeoQueryInfo* QueryData::mutable_geo_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return geo_queries_.Mutable(index);
}
::ru::mail::go::webbase::blobs::GeoQueryInfo* QueryData::add_geo_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return geo_queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GeoQueryInfo >*
QueryData::mutable_geo_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return &geo_queries_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GeoQueryInfo >&
QueryData::geo_queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return geo_queries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DailyQueryData::kQueryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DailyQueryData::DailyQueryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.DailyQueryData)
}
DailyQueryData::DailyQueryData(const DailyQueryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      query_data_(from.query_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.DailyQueryData)
}

void DailyQueryData::SharedCtor() {
  _cached_size_ = 0;
}

DailyQueryData::~DailyQueryData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.DailyQueryData)
  SharedDtor();
}

void DailyQueryData::SharedDtor() {
}

void DailyQueryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQueryData::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DailyQueryData& DailyQueryData::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DailyQueryData* DailyQueryData::New(::google::protobuf::Arena* arena) const {
  DailyQueryData* n = new DailyQueryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DailyQueryData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.DailyQueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DailyQueryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.DailyQueryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.QueryData query_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.DailyQueryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.DailyQueryData)
  return false;
#undef DO_
}

void DailyQueryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.DailyQueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.QueryData query_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query_data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.DailyQueryData)
}

::google::protobuf::uint8* DailyQueryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.DailyQueryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.QueryData query_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->query_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.DailyQueryData)
  return target;
}

size_t DailyQueryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.DailyQueryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.QueryData query_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->query_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQueryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.DailyQueryData)
  GOOGLE_DCHECK_NE(&from, this);
  const DailyQueryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DailyQueryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.DailyQueryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.DailyQueryData)
    MergeFrom(*source);
  }
}

void DailyQueryData::MergeFrom(const DailyQueryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.DailyQueryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_data_.MergeFrom(from.query_data_);
}

void DailyQueryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.DailyQueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQueryData::CopyFrom(const DailyQueryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.DailyQueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQueryData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->query_data())) return false;
  return true;
}

void DailyQueryData::Swap(DailyQueryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DailyQueryData::InternalSwap(DailyQueryData* other) {
  using std::swap;
  query_data_.InternalSwap(&other->query_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DailyQueryData::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DailyQueryData

// repeated .ru.mail.go.webbase.blobs.QueryData query_data = 1;
int DailyQueryData::query_data_size() const {
  return query_data_.size();
}
void DailyQueryData::clear_query_data() {
  query_data_.Clear();
}
const ::ru::mail::go::webbase::blobs::QueryData& DailyQueryData::query_data(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return query_data_.Get(index);
}
::ru::mail::go::webbase::blobs::QueryData* DailyQueryData::mutable_query_data(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return query_data_.Mutable(index);
}
::ru::mail::go::webbase::blobs::QueryData* DailyQueryData::add_query_data() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return query_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryData >*
DailyQueryData::mutable_query_data() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return &query_data_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryData >&
DailyQueryData::query_data() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return query_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SekiteiQuotaData::kDescriptionFieldNumber;
const int SekiteiQuotaData::kMaxQuotaFieldNumber;
const int SekiteiQuotaData::kUrlsInQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SekiteiQuotaData::SekiteiQuotaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SekiteiQuotaData)
}
SekiteiQuotaData::SekiteiQuotaData(const SekiteiQuotaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&maxquota_, &from.maxquota_,
    static_cast<size_t>(reinterpret_cast<char*>(&urlsinquota_) -
    reinterpret_cast<char*>(&maxquota_)) + sizeof(urlsinquota_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SekiteiQuotaData)
}

void SekiteiQuotaData::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxquota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&urlsinquota_) -
      reinterpret_cast<char*>(&maxquota_)) + sizeof(urlsinquota_));
}

SekiteiQuotaData::~SekiteiQuotaData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  SharedDtor();
}

void SekiteiQuotaData::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SekiteiQuotaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SekiteiQuotaData::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SekiteiQuotaData& SekiteiQuotaData::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SekiteiQuotaData* SekiteiQuotaData::New(::google::protobuf::Arena* arena) const {
  SekiteiQuotaData* n = new SekiteiQuotaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SekiteiQuotaData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&maxquota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&urlsinquota_) -
        reinterpret_cast<char*>(&maxquota_)) + sizeof(urlsinquota_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SekiteiQuotaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SekiteiQuotaData.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 maxQuota = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_maxquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 urlsInQuota = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_urlsinquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &urlsinquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  return false;
#undef DO_
}

void SekiteiQuotaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SekiteiQuotaData.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // required int32 maxQuota = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxquota(), output);
  }

  // required int32 urlsInQuota = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->urlsinquota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SekiteiQuotaData)
}

::google::protobuf::uint8* SekiteiQuotaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SekiteiQuotaData.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // required int32 maxQuota = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxquota(), target);
  }

  // required int32 urlsInQuota = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->urlsinquota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  return target;
}

size_t SekiteiQuotaData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  size_t total_size = 0;

  if (has_description()) {
    // required string description = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_maxquota()) {
    // required int32 maxQuota = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxquota());
  }

  if (has_urlsinquota()) {
    // required int32 urlsInQuota = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->urlsinquota());
  }

  return total_size;
}
size_t SekiteiQuotaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required int32 maxQuota = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxquota());

    // required int32 urlsInQuota = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->urlsinquota());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SekiteiQuotaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  GOOGLE_DCHECK_NE(&from, this);
  const SekiteiQuotaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SekiteiQuotaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SekiteiQuotaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SekiteiQuotaData)
    MergeFrom(*source);
  }
}

void SekiteiQuotaData::MergeFrom(const SekiteiQuotaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      maxquota_ = from.maxquota_;
    }
    if (cached_has_bits & 0x00000004u) {
      urlsinquota_ = from.urlsinquota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SekiteiQuotaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SekiteiQuotaData::CopyFrom(const SekiteiQuotaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SekiteiQuotaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SekiteiQuotaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SekiteiQuotaData::Swap(SekiteiQuotaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SekiteiQuotaData::InternalSwap(SekiteiQuotaData* other) {
  using std::swap;
  description_.Swap(&other->description_);
  swap(maxquota_, other->maxquota_);
  swap(urlsinquota_, other->urlsinquota_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SekiteiQuotaData::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SekiteiQuotaData

// required string description = 1;
bool SekiteiQuotaData::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SekiteiQuotaData::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void SekiteiQuotaData::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void SekiteiQuotaData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& SekiteiQuotaData::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
  return description_.GetNoArena();
}
void SekiteiQuotaData::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}
#if LANG_CXX11
void SekiteiQuotaData::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}
#endif
void SekiteiQuotaData::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}
void SekiteiQuotaData::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}
::std::string* SekiteiQuotaData::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SekiteiQuotaData::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SekiteiQuotaData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}

// required int32 maxQuota = 2;
bool SekiteiQuotaData::has_maxquota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SekiteiQuotaData::set_has_maxquota() {
  _has_bits_[0] |= 0x00000002u;
}
void SekiteiQuotaData::clear_has_maxquota() {
  _has_bits_[0] &= ~0x00000002u;
}
void SekiteiQuotaData::clear_maxquota() {
  maxquota_ = 0;
  clear_has_maxquota();
}
::google::protobuf::int32 SekiteiQuotaData::maxquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SekiteiQuotaData.maxQuota)
  return maxquota_;
}
void SekiteiQuotaData::set_maxquota(::google::protobuf::int32 value) {
  set_has_maxquota();
  maxquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SekiteiQuotaData.maxQuota)
}

// required int32 urlsInQuota = 3;
bool SekiteiQuotaData::has_urlsinquota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SekiteiQuotaData::set_has_urlsinquota() {
  _has_bits_[0] |= 0x00000004u;
}
void SekiteiQuotaData::clear_has_urlsinquota() {
  _has_bits_[0] &= ~0x00000004u;
}
void SekiteiQuotaData::clear_urlsinquota() {
  urlsinquota_ = 0;
  clear_has_urlsinquota();
}
::google::protobuf::int32 SekiteiQuotaData::urlsinquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SekiteiQuotaData.urlsInQuota)
  return urlsinquota_;
}
void SekiteiQuotaData::set_urlsinquota(::google::protobuf::int32 value) {
  set_has_urlsinquota();
  urlsinquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SekiteiQuotaData.urlsInQuota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteData::kMaxQuotaFieldNumber;
const int SiteData::kUrlsInQuotaFieldNumber;
const int SiteData::kSekiteiQuotaFieldNumber;
const int SiteData::kIsBannedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteData::SiteData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiteData)
}
SiteData::SiteData(const SiteData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sekiteiquota_(from.sekiteiquota_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maxquota_, &from.maxquota_,
    static_cast<size_t>(reinterpret_cast<char*>(&isbanned_) -
    reinterpret_cast<char*>(&maxquota_)) + sizeof(isbanned_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiteData)
}

void SiteData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&maxquota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isbanned_) -
      reinterpret_cast<char*>(&maxquota_)) + sizeof(isbanned_));
}

SiteData::~SiteData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiteData)
  SharedDtor();
}

void SiteData::SharedDtor() {
}

void SiteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiteData::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiteData& SiteData::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiteData* SiteData::New(::google::protobuf::Arena* arena) const {
  SiteData* n = new SiteData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiteData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sekiteiquota_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&maxquota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isbanned_) -
        reinterpret_cast<char*>(&maxquota_)) + sizeof(isbanned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxQuota = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_maxquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 urlsInQuota = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_urlsinquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &urlsinquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.SekiteiQuotaData sekiteiQuota = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sekiteiquota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isBanned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_isbanned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbanned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiteData)
  return false;
#undef DO_
}

void SiteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 maxQuota = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxquota(), output);
  }

  // optional int32 urlsInQuota = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->urlsinquota(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.SekiteiQuotaData sekiteiQuota = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sekiteiquota_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sekiteiquota(static_cast<int>(i)), output);
  }

  // optional bool isBanned = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbanned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiteData)
}

::google::protobuf::uint8* SiteData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 maxQuota = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxquota(), target);
  }

  // optional int32 urlsInQuota = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->urlsinquota(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.SekiteiQuotaData sekiteiQuota = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sekiteiquota_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sekiteiquota(static_cast<int>(i)), deterministic, target);
  }

  // optional bool isBanned = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbanned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiteData)
  return target;
}

size_t SiteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiteData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SekiteiQuotaData sekiteiQuota = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sekiteiquota_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sekiteiquota(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 maxQuota = 1;
    if (has_maxquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxquota());
    }

    // optional int32 urlsInQuota = 2;
    if (has_urlsinquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->urlsinquota());
    }

    // optional bool isBanned = 4;
    if (has_isbanned()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiteData)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiteData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiteData)
    MergeFrom(*source);
  }
}

void SiteData::MergeFrom(const SiteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sekiteiquota_.MergeFrom(from.sekiteiquota_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      maxquota_ = from.maxquota_;
    }
    if (cached_has_bits & 0x00000002u) {
      urlsinquota_ = from.urlsinquota_;
    }
    if (cached_has_bits & 0x00000004u) {
      isbanned_ = from.isbanned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteData::CopyFrom(const SiteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sekiteiquota())) return false;
  return true;
}

void SiteData::Swap(SiteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteData::InternalSwap(SiteData* other) {
  using std::swap;
  sekiteiquota_.InternalSwap(&other->sekiteiquota_);
  swap(maxquota_, other->maxquota_);
  swap(urlsinquota_, other->urlsinquota_);
  swap(isbanned_, other->isbanned_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiteData::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiteData

// optional int32 maxQuota = 1;
bool SiteData::has_maxquota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiteData::set_has_maxquota() {
  _has_bits_[0] |= 0x00000001u;
}
void SiteData::clear_has_maxquota() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiteData::clear_maxquota() {
  maxquota_ = 0;
  clear_has_maxquota();
}
::google::protobuf::int32 SiteData::maxquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteData.maxQuota)
  return maxquota_;
}
void SiteData::set_maxquota(::google::protobuf::int32 value) {
  set_has_maxquota();
  maxquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiteData.maxQuota)
}

// optional int32 urlsInQuota = 2;
bool SiteData::has_urlsinquota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiteData::set_has_urlsinquota() {
  _has_bits_[0] |= 0x00000002u;
}
void SiteData::clear_has_urlsinquota() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiteData::clear_urlsinquota() {
  urlsinquota_ = 0;
  clear_has_urlsinquota();
}
::google::protobuf::int32 SiteData::urlsinquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteData.urlsInQuota)
  return urlsinquota_;
}
void SiteData::set_urlsinquota(::google::protobuf::int32 value) {
  set_has_urlsinquota();
  urlsinquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiteData.urlsInQuota)
}

// repeated .ru.mail.go.webbase.blobs.SekiteiQuotaData sekiteiQuota = 3;
int SiteData::sekiteiquota_size() const {
  return sekiteiquota_.size();
}
void SiteData::clear_sekiteiquota() {
  sekiteiquota_.Clear();
}
const ::ru::mail::go::webbase::blobs::SekiteiQuotaData& SiteData::sekiteiquota(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return sekiteiquota_.Get(index);
}
::ru::mail::go::webbase::blobs::SekiteiQuotaData* SiteData::mutable_sekiteiquota(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return sekiteiquota_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SekiteiQuotaData* SiteData::add_sekiteiquota() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return sekiteiquota_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SekiteiQuotaData >*
SiteData::mutable_sekiteiquota() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return &sekiteiquota_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SekiteiQuotaData >&
SiteData::sekiteiquota() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return sekiteiquota_;
}

// optional bool isBanned = 4;
bool SiteData::has_isbanned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SiteData::set_has_isbanned() {
  _has_bits_[0] |= 0x00000004u;
}
void SiteData::clear_has_isbanned() {
  _has_bits_[0] &= ~0x00000004u;
}
void SiteData::clear_isbanned() {
  isbanned_ = false;
  clear_has_isbanned();
}
bool SiteData::isbanned() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteData.isBanned)
  return isbanned_;
}
void SiteData::set_isbanned(bool value) {
  set_has_isbanned();
  isbanned_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiteData.isBanned)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kUrlFieldNumber;
const int Result::kFetcherDataFieldNumber;
const int Result::kRankingDataFieldNumber;
const int Result::kLinksDataFieldNumber;
const int Result::kQueryDataFieldNumber;
const int Result::kPikFieldNumber;
const int Result::kDailyQueryDataFieldNumber;
const int Result::kSiteDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Result)
}
Result::Result(const Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_fetcher_data()) {
    fetcher_data_ = new ::ru::mail::go::webbase::blobs::FetcherData(*from.fetcher_data_);
  } else {
    fetcher_data_ = NULL;
  }
  if (from.has_ranking_data()) {
    ranking_data_ = new ::ru::mail::go::webbase::blobs::RankingData(*from.ranking_data_);
  } else {
    ranking_data_ = NULL;
  }
  if (from.has_links_data()) {
    links_data_ = new ::ru::mail::go::webbase::blobs::LinksData(*from.links_data_);
  } else {
    links_data_ = NULL;
  }
  if (from.has_query_data()) {
    query_data_ = new ::ru::mail::go::webbase::blobs::QueryData(*from.query_data_);
  } else {
    query_data_ = NULL;
  }
  if (from.has_daily_query_data()) {
    daily_query_data_ = new ::ru::mail::go::webbase::blobs::DailyQueryData(*from.daily_query_data_);
  } else {
    daily_query_data_ = NULL;
  }
  if (from.has_site_data()) {
    site_data_ = new ::ru::mail::go::webbase::blobs::SiteData(*from.site_data_);
  } else {
    site_data_ = NULL;
  }
  pik_ = from.pik_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Result)
}

void Result::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fetcher_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pik_) -
      reinterpret_cast<char*>(&fetcher_data_)) + sizeof(pik_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fetcher_data_;
  if (this != internal_default_instance()) delete ranking_data_;
  if (this != internal_default_instance()) delete links_data_;
  if (this != internal_default_instance()) delete query_data_;
  if (this != internal_default_instance()) delete daily_query_data_;
  if (this != internal_default_instance()) delete site_data_;
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Result& Result::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fetcher_data_ != NULL);
      fetcher_data_->::ru::mail::go::webbase::blobs::FetcherData::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ranking_data_ != NULL);
      ranking_data_->::ru::mail::go::webbase::blobs::RankingData::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(links_data_ != NULL);
      links_data_->::ru::mail::go::webbase::blobs::LinksData::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(query_data_ != NULL);
      query_data_->::ru::mail::go::webbase::blobs::QueryData::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(daily_query_data_ != NULL);
      daily_query_data_->::ru::mail::go::webbase::blobs::DailyQueryData::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(site_data_ != NULL);
      site_data_->::ru::mail::go::webbase::blobs::SiteData::Clear();
    }
  }
  pik_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Result.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.FetcherData fetcher_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetcher_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.RankingData ranking_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranking_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.LinksData links_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_links_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.QueryData query_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pik = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_pik();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pik_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.DailyQueryData daily_query_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_query_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SiteData site_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Result.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required .ru.mail.go.webbase.blobs.FetcherData fetcher_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fetcher_data_, output);
  }

  // required .ru.mail.go.webbase.blobs.RankingData ranking_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ranking_data_, output);
  }

  // required .ru.mail.go.webbase.blobs.LinksData links_data = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->links_data_, output);
  }

  // required .ru.mail.go.webbase.blobs.QueryData query_data = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->query_data_, output);
  }

  // optional int32 pik = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pik(), output);
  }

  // required .ru.mail.go.webbase.blobs.DailyQueryData daily_query_data = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->daily_query_data_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SiteData site_data = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->site_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Result.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required .ru.mail.go.webbase.blobs.FetcherData fetcher_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fetcher_data_, deterministic, target);
  }

  // required .ru.mail.go.webbase.blobs.RankingData ranking_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ranking_data_, deterministic, target);
  }

  // required .ru.mail.go.webbase.blobs.LinksData links_data = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->links_data_, deterministic, target);
  }

  // required .ru.mail.go.webbase.blobs.QueryData query_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->query_data_, deterministic, target);
  }

  // optional int32 pik = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pik(), target);
  }

  // required .ru.mail.go.webbase.blobs.DailyQueryData daily_query_data = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->daily_query_data_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SiteData site_data = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->site_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Result)
  return target;
}

size_t Result::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.Result)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_fetcher_data()) {
    // required .ru.mail.go.webbase.blobs.FetcherData fetcher_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fetcher_data_);
  }

  if (has_ranking_data()) {
    // required .ru.mail.go.webbase.blobs.RankingData ranking_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ranking_data_);
  }

  if (has_links_data()) {
    // required .ru.mail.go.webbase.blobs.LinksData links_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->links_data_);
  }

  if (has_query_data()) {
    // required .ru.mail.go.webbase.blobs.QueryData query_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_data_);
  }

  if (has_daily_query_data()) {
    // required .ru.mail.go.webbase.blobs.DailyQueryData daily_query_data = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->daily_query_data_);
  }

  return total_size;
}
size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required .ru.mail.go.webbase.blobs.FetcherData fetcher_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fetcher_data_);

    // required .ru.mail.go.webbase.blobs.RankingData ranking_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ranking_data_);

    // required .ru.mail.go.webbase.blobs.LinksData links_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->links_data_);

    // required .ru.mail.go.webbase.blobs.QueryData query_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_data_);

    // required .ru.mail.go.webbase.blobs.DailyQueryData daily_query_data = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->daily_query_data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional .ru.mail.go.webbase.blobs.SiteData site_data = 8;
    if (has_site_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->site_data_);
    }

    // optional int32 pik = 6;
    if (has_pik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pik());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fetcher_data()->::ru::mail::go::webbase::blobs::FetcherData::MergeFrom(from.fetcher_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ranking_data()->::ru::mail::go::webbase::blobs::RankingData::MergeFrom(from.ranking_data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_links_data()->::ru::mail::go::webbase::blobs::LinksData::MergeFrom(from.links_data());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_query_data()->::ru::mail::go::webbase::blobs::QueryData::MergeFrom(from.query_data());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_daily_query_data()->::ru::mail::go::webbase::blobs::DailyQueryData::MergeFrom(from.daily_query_data());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_site_data()->::ru::mail::go::webbase::blobs::SiteData::MergeFrom(from.site_data());
    }
    if (cached_has_bits & 0x00000080u) {
      pik_ = from.pik_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_fetcher_data()) {
    if (!this->fetcher_data_->IsInitialized()) return false;
  }
  if (has_links_data()) {
    if (!this->links_data_->IsInitialized()) return false;
  }
  if (has_query_data()) {
    if (!this->query_data_->IsInitialized()) return false;
  }
  if (has_daily_query_data()) {
    if (!this->daily_query_data_->IsInitialized()) return false;
  }
  if (has_site_data()) {
    if (!this->site_data_->IsInitialized()) return false;
  }
  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(fetcher_data_, other->fetcher_data_);
  swap(ranking_data_, other->ranking_data_);
  swap(links_data_, other->links_data_);
  swap(query_data_, other->query_data_);
  swap(daily_query_data_, other->daily_query_data_);
  swap(site_data_, other->site_data_);
  swap(pik_, other->pik_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// required string url = 1;
bool Result::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Result::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Result::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Result::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Result::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.url)
  return url_.GetNoArena();
}
void Result::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Result.url)
}
#if LANG_CXX11
void Result::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Result.url)
}
#endif
void Result::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Result.url)
}
void Result::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Result.url)
}
::std::string* Result::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Result::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Result::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.url)
}

// required .ru.mail.go.webbase.blobs.FetcherData fetcher_data = 2;
bool Result::has_fetcher_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Result::set_has_fetcher_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Result::clear_has_fetcher_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Result::clear_fetcher_data() {
  if (fetcher_data_ != NULL) fetcher_data_->::ru::mail::go::webbase::blobs::FetcherData::Clear();
  clear_has_fetcher_data();
}
const ::ru::mail::go::webbase::blobs::FetcherData& Result::fetcher_data() const {
  const ::ru::mail::go::webbase::blobs::FetcherData* p = fetcher_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.fetcher_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FetcherData*>(
      &::ru::mail::go::webbase::blobs::_FetcherData_default_instance_);
}
::ru::mail::go::webbase::blobs::FetcherData* Result::mutable_fetcher_data() {
  set_has_fetcher_data();
  if (fetcher_data_ == NULL) {
    fetcher_data_ = new ::ru::mail::go::webbase::blobs::FetcherData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.fetcher_data)
  return fetcher_data_;
}
::ru::mail::go::webbase::blobs::FetcherData* Result::release_fetcher_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.fetcher_data)
  clear_has_fetcher_data();
  ::ru::mail::go::webbase::blobs::FetcherData* temp = fetcher_data_;
  fetcher_data_ = NULL;
  return temp;
}
void Result::set_allocated_fetcher_data(::ru::mail::go::webbase::blobs::FetcherData* fetcher_data) {
  delete fetcher_data_;
  fetcher_data_ = fetcher_data;
  if (fetcher_data) {
    set_has_fetcher_data();
  } else {
    clear_has_fetcher_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.fetcher_data)
}

// required .ru.mail.go.webbase.blobs.RankingData ranking_data = 3;
bool Result::has_ranking_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Result::set_has_ranking_data() {
  _has_bits_[0] |= 0x00000004u;
}
void Result::clear_has_ranking_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void Result::clear_ranking_data() {
  if (ranking_data_ != NULL) ranking_data_->::ru::mail::go::webbase::blobs::RankingData::Clear();
  clear_has_ranking_data();
}
const ::ru::mail::go::webbase::blobs::RankingData& Result::ranking_data() const {
  const ::ru::mail::go::webbase::blobs::RankingData* p = ranking_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.ranking_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::RankingData*>(
      &::ru::mail::go::webbase::blobs::_RankingData_default_instance_);
}
::ru::mail::go::webbase::blobs::RankingData* Result::mutable_ranking_data() {
  set_has_ranking_data();
  if (ranking_data_ == NULL) {
    ranking_data_ = new ::ru::mail::go::webbase::blobs::RankingData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.ranking_data)
  return ranking_data_;
}
::ru::mail::go::webbase::blobs::RankingData* Result::release_ranking_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.ranking_data)
  clear_has_ranking_data();
  ::ru::mail::go::webbase::blobs::RankingData* temp = ranking_data_;
  ranking_data_ = NULL;
  return temp;
}
void Result::set_allocated_ranking_data(::ru::mail::go::webbase::blobs::RankingData* ranking_data) {
  delete ranking_data_;
  ranking_data_ = ranking_data;
  if (ranking_data) {
    set_has_ranking_data();
  } else {
    clear_has_ranking_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.ranking_data)
}

// required .ru.mail.go.webbase.blobs.LinksData links_data = 4;
bool Result::has_links_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Result::set_has_links_data() {
  _has_bits_[0] |= 0x00000008u;
}
void Result::clear_has_links_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void Result::clear_links_data() {
  if (links_data_ != NULL) links_data_->::ru::mail::go::webbase::blobs::LinksData::Clear();
  clear_has_links_data();
}
const ::ru::mail::go::webbase::blobs::LinksData& Result::links_data() const {
  const ::ru::mail::go::webbase::blobs::LinksData* p = links_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.links_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::LinksData*>(
      &::ru::mail::go::webbase::blobs::_LinksData_default_instance_);
}
::ru::mail::go::webbase::blobs::LinksData* Result::mutable_links_data() {
  set_has_links_data();
  if (links_data_ == NULL) {
    links_data_ = new ::ru::mail::go::webbase::blobs::LinksData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.links_data)
  return links_data_;
}
::ru::mail::go::webbase::blobs::LinksData* Result::release_links_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.links_data)
  clear_has_links_data();
  ::ru::mail::go::webbase::blobs::LinksData* temp = links_data_;
  links_data_ = NULL;
  return temp;
}
void Result::set_allocated_links_data(::ru::mail::go::webbase::blobs::LinksData* links_data) {
  delete links_data_;
  links_data_ = links_data;
  if (links_data) {
    set_has_links_data();
  } else {
    clear_has_links_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.links_data)
}

// required .ru.mail.go.webbase.blobs.QueryData query_data = 5;
bool Result::has_query_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Result::set_has_query_data() {
  _has_bits_[0] |= 0x00000010u;
}
void Result::clear_has_query_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void Result::clear_query_data() {
  if (query_data_ != NULL) query_data_->::ru::mail::go::webbase::blobs::QueryData::Clear();
  clear_has_query_data();
}
const ::ru::mail::go::webbase::blobs::QueryData& Result::query_data() const {
  const ::ru::mail::go::webbase::blobs::QueryData* p = query_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.query_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::QueryData*>(
      &::ru::mail::go::webbase::blobs::_QueryData_default_instance_);
}
::ru::mail::go::webbase::blobs::QueryData* Result::mutable_query_data() {
  set_has_query_data();
  if (query_data_ == NULL) {
    query_data_ = new ::ru::mail::go::webbase::blobs::QueryData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.query_data)
  return query_data_;
}
::ru::mail::go::webbase::blobs::QueryData* Result::release_query_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.query_data)
  clear_has_query_data();
  ::ru::mail::go::webbase::blobs::QueryData* temp = query_data_;
  query_data_ = NULL;
  return temp;
}
void Result::set_allocated_query_data(::ru::mail::go::webbase::blobs::QueryData* query_data) {
  delete query_data_;
  query_data_ = query_data;
  if (query_data) {
    set_has_query_data();
  } else {
    clear_has_query_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.query_data)
}

// optional int32 pik = 6;
bool Result::has_pik() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Result::set_has_pik() {
  _has_bits_[0] |= 0x00000080u;
}
void Result::clear_has_pik() {
  _has_bits_[0] &= ~0x00000080u;
}
void Result::clear_pik() {
  pik_ = 0;
  clear_has_pik();
}
::google::protobuf::int32 Result::pik() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.pik)
  return pik_;
}
void Result::set_pik(::google::protobuf::int32 value) {
  set_has_pik();
  pik_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Result.pik)
}

// required .ru.mail.go.webbase.blobs.DailyQueryData daily_query_data = 7;
bool Result::has_daily_query_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Result::set_has_daily_query_data() {
  _has_bits_[0] |= 0x00000020u;
}
void Result::clear_has_daily_query_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void Result::clear_daily_query_data() {
  if (daily_query_data_ != NULL) daily_query_data_->::ru::mail::go::webbase::blobs::DailyQueryData::Clear();
  clear_has_daily_query_data();
}
const ::ru::mail::go::webbase::blobs::DailyQueryData& Result::daily_query_data() const {
  const ::ru::mail::go::webbase::blobs::DailyQueryData* p = daily_query_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.daily_query_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::DailyQueryData*>(
      &::ru::mail::go::webbase::blobs::_DailyQueryData_default_instance_);
}
::ru::mail::go::webbase::blobs::DailyQueryData* Result::mutable_daily_query_data() {
  set_has_daily_query_data();
  if (daily_query_data_ == NULL) {
    daily_query_data_ = new ::ru::mail::go::webbase::blobs::DailyQueryData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.daily_query_data)
  return daily_query_data_;
}
::ru::mail::go::webbase::blobs::DailyQueryData* Result::release_daily_query_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.daily_query_data)
  clear_has_daily_query_data();
  ::ru::mail::go::webbase::blobs::DailyQueryData* temp = daily_query_data_;
  daily_query_data_ = NULL;
  return temp;
}
void Result::set_allocated_daily_query_data(::ru::mail::go::webbase::blobs::DailyQueryData* daily_query_data) {
  delete daily_query_data_;
  daily_query_data_ = daily_query_data;
  if (daily_query_data) {
    set_has_daily_query_data();
  } else {
    clear_has_daily_query_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.daily_query_data)
}

// optional .ru.mail.go.webbase.blobs.SiteData site_data = 8;
bool Result::has_site_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Result::set_has_site_data() {
  _has_bits_[0] |= 0x00000040u;
}
void Result::clear_has_site_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void Result::clear_site_data() {
  if (site_data_ != NULL) site_data_->::ru::mail::go::webbase::blobs::SiteData::Clear();
  clear_has_site_data();
}
const ::ru::mail::go::webbase::blobs::SiteData& Result::site_data() const {
  const ::ru::mail::go::webbase::blobs::SiteData* p = site_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.site_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiteData*>(
      &::ru::mail::go::webbase::blobs::_SiteData_default_instance_);
}
::ru::mail::go::webbase::blobs::SiteData* Result::mutable_site_data() {
  set_has_site_data();
  if (site_data_ == NULL) {
    site_data_ = new ::ru::mail::go::webbase::blobs::SiteData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.site_data)
  return site_data_;
}
::ru::mail::go::webbase::blobs::SiteData* Result::release_site_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.site_data)
  clear_has_site_data();
  ::ru::mail::go::webbase::blobs::SiteData* temp = site_data_;
  site_data_ = NULL;
  return temp;
}
void Result::set_allocated_site_data(::ru::mail::go::webbase::blobs::SiteData* site_data) {
  delete site_data_;
  site_data_ = site_data;
  if (site_data) {
    set_has_site_data();
  } else {
    clear_has_site_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.site_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SqInfo::kQueryTextFieldNumber;
const int SqInfo::kSerpUrlFieldNumber;
const int SqInfo::kTimestampFieldNumber;
const int SqInfo::kHttpRequestFieldNumber;
const int SqInfo::kHttpResponseFieldNumber;
const int SqInfo::kHttpRedirectFieldNumber;
const int SqInfo::kRawHtmlFieldNumber;
const int SqInfo::kRenderedHtmlFieldNumber;
const int SqInfo::kParserOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SqInfo::SqInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SqInfo)
}
SqInfo::SqInfo(const SqInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  serp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serp_url()) {
    serp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serp_url_);
  }
  http_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_request()) {
    http_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_request_);
  }
  http_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_response()) {
    http_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_response_);
  }
  http_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_http_redirect()) {
    http_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_redirect_);
  }
  raw_html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_html()) {
    raw_html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_html_);
  }
  rendered_html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rendered_html()) {
    rendered_html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendered_html_);
  }
  parser_output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parser_output()) {
    parser_output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parser_output_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SqInfo)
}

void SqInfo::SharedCtor() {
  _cached_size_ = 0;
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rendered_html_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parser_output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

SqInfo::~SqInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SqInfo)
  SharedDtor();
}

void SqInfo::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serp_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_html_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rendered_html_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parser_output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SqInfo::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SqInfo& SqInfo::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SqInfo* SqInfo::New(::google::protobuf::Arena* arena) const {
  SqInfo* n = new SqInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SqInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!serp_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serp_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!http_request_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_request_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!http_response_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_response_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!http_redirect_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*http_redirect_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!raw_html_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_html_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!rendered_html_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rendered_html_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!parser_output_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parser_output_.UnsafeRawStringPointer())->clear();
    }
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SqInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SqInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SqInfo.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serp_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serp_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serp_url().data(), static_cast<int>(this->serp_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SqInfo.serp_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_request().data(), static_cast<int>(this->http_request().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SqInfo.http_request");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_response().data(), static_cast<int>(this->http_response().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SqInfo.http_response");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string http_redirect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_redirect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_redirect().data(), static_cast<int>(this->http_redirect().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SqInfo.http_redirect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_html = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_html()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rendered_html = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rendered_html()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parser_output = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parser_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parser_output().data(), static_cast<int>(this->parser_output().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SqInfo.parser_output");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SqInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SqInfo)
  return false;
#undef DO_
}

void SqInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // optional string serp_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serp_url().data(), static_cast<int>(this->serp_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.serp_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serp_url(), output);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string http_request = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_request().data(), static_cast<int>(this->http_request().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.http_request");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->http_request(), output);
  }

  // optional string http_response = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_response().data(), static_cast<int>(this->http_response().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.http_response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->http_response(), output);
  }

  // optional string http_redirect = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_redirect().data(), static_cast<int>(this->http_redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.http_redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->http_redirect(), output);
  }

  // optional bytes raw_html = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->raw_html(), output);
  }

  // optional bytes rendered_html = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->rendered_html(), output);
  }

  // optional string parser_output = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parser_output().data(), static_cast<int>(this->parser_output().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.parser_output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->parser_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SqInfo)
}

::google::protobuf::uint8* SqInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SqInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // optional string serp_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serp_url().data(), static_cast<int>(this->serp_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.serp_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serp_url(), target);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional string http_request = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_request().data(), static_cast<int>(this->http_request().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.http_request");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->http_request(), target);
  }

  // optional string http_response = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_response().data(), static_cast<int>(this->http_response().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.http_response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->http_response(), target);
  }

  // optional string http_redirect = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_redirect().data(), static_cast<int>(this->http_redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.http_redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->http_redirect(), target);
  }

  // optional bytes raw_html = 7;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->raw_html(), target);
  }

  // optional bytes rendered_html = 8;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->rendered_html(), target);
  }

  // optional string parser_output = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parser_output().data(), static_cast<int>(this->parser_output().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SqInfo.parser_output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->parser_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SqInfo)
  return target;
}

size_t SqInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SqInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string query_text = 1;
    if (has_query_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_text());
    }

    // optional string serp_url = 2;
    if (has_serp_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serp_url());
    }

    // optional string http_request = 4;
    if (has_http_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_request());
    }

    // optional string http_response = 5;
    if (has_http_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_response());
    }

    // optional string http_redirect = 6;
    if (has_http_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_redirect());
    }

    // optional bytes raw_html = 7;
    if (has_raw_html()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_html());
    }

    // optional bytes rendered_html = 8;
    if (has_rendered_html()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rendered_html());
    }

    // optional string parser_output = 9;
    if (has_parser_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parser_output());
    }

  }
  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SqInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SqInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SqInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SqInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SqInfo)
    MergeFrom(*source);
  }
}

void SqInfo::MergeFrom(const SqInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query_text();
      query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_serp_url();
      serp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serp_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_http_request();
      http_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_request_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_http_response();
      http_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_response_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_http_redirect();
      http_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_redirect_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_raw_html();
      raw_html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_html_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_rendered_html();
      rendered_html_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendered_html_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_parser_output();
      parser_output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parser_output_);
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp(from.timestamp());
  }
}

void SqInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SqInfo::CopyFrom(const SqInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqInfo::IsInitialized() const {
  return true;
}

void SqInfo::Swap(SqInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SqInfo::InternalSwap(SqInfo* other) {
  using std::swap;
  query_text_.Swap(&other->query_text_);
  serp_url_.Swap(&other->serp_url_);
  http_request_.Swap(&other->http_request_);
  http_response_.Swap(&other->http_response_);
  http_redirect_.Swap(&other->http_redirect_);
  raw_html_.Swap(&other->raw_html_);
  rendered_html_.Swap(&other->rendered_html_);
  parser_output_.Swap(&other->parser_output_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SqInfo::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SqInfo

// optional string query_text = 1;
bool SqInfo::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SqInfo::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
void SqInfo::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void SqInfo::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& SqInfo::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.query_text)
  return query_text_.GetNoArena();
}
void SqInfo::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.query_text)
}
#if LANG_CXX11
void SqInfo::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.query_text)
}
#endif
void SqInfo::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.query_text)
}
void SqInfo::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.query_text)
}
::std::string* SqInfo::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqInfo::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqInfo::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.query_text)
}

// optional string serp_url = 2;
bool SqInfo::has_serp_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SqInfo::set_has_serp_url() {
  _has_bits_[0] |= 0x00000002u;
}
void SqInfo::clear_has_serp_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void SqInfo::clear_serp_url() {
  serp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serp_url();
}
const ::std::string& SqInfo::serp_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.serp_url)
  return serp_url_.GetNoArena();
}
void SqInfo::set_serp_url(const ::std::string& value) {
  set_has_serp_url();
  serp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}
#if LANG_CXX11
void SqInfo::set_serp_url(::std::string&& value) {
  set_has_serp_url();
  serp_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}
#endif
void SqInfo::set_serp_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serp_url();
  serp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}
void SqInfo::set_serp_url(const char* value, size_t size) {
  set_has_serp_url();
  serp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}
::std::string* SqInfo::mutable_serp_url() {
  set_has_serp_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.serp_url)
  return serp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqInfo::release_serp_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.serp_url)
  clear_has_serp_url();
  return serp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqInfo::set_allocated_serp_url(::std::string* serp_url) {
  if (serp_url != NULL) {
    set_has_serp_url();
  } else {
    clear_has_serp_url();
  }
  serp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serp_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}

// optional int64 timestamp = 3;
bool SqInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SqInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
void SqInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void SqInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 SqInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.timestamp)
  return timestamp_;
}
void SqInfo::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.timestamp)
}

// optional string http_request = 4;
bool SqInfo::has_http_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SqInfo::set_has_http_request() {
  _has_bits_[0] |= 0x00000004u;
}
void SqInfo::clear_has_http_request() {
  _has_bits_[0] &= ~0x00000004u;
}
void SqInfo::clear_http_request() {
  http_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_request();
}
const ::std::string& SqInfo::http_request() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.http_request)
  return http_request_.GetNoArena();
}
void SqInfo::set_http_request(const ::std::string& value) {
  set_has_http_request();
  http_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.http_request)
}
#if LANG_CXX11
void SqInfo::set_http_request(::std::string&& value) {
  set_has_http_request();
  http_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.http_request)
}
#endif
void SqInfo::set_http_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_request();
  http_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.http_request)
}
void SqInfo::set_http_request(const char* value, size_t size) {
  set_has_http_request();
  http_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.http_request)
}
::std::string* SqInfo::mutable_http_request() {
  set_has_http_request();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.http_request)
  return http_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqInfo::release_http_request() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.http_request)
  clear_has_http_request();
  return http_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqInfo::set_allocated_http_request(::std::string* http_request) {
  if (http_request != NULL) {
    set_has_http_request();
  } else {
    clear_has_http_request();
  }
  http_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_request);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.http_request)
}

// optional string http_response = 5;
bool SqInfo::has_http_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SqInfo::set_has_http_response() {
  _has_bits_[0] |= 0x00000008u;
}
void SqInfo::clear_has_http_response() {
  _has_bits_[0] &= ~0x00000008u;
}
void SqInfo::clear_http_response() {
  http_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_response();
}
const ::std::string& SqInfo::http_response() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.http_response)
  return http_response_.GetNoArena();
}
void SqInfo::set_http_response(const ::std::string& value) {
  set_has_http_response();
  http_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.http_response)
}
#if LANG_CXX11
void SqInfo::set_http_response(::std::string&& value) {
  set_has_http_response();
  http_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.http_response)
}
#endif
void SqInfo::set_http_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_response();
  http_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.http_response)
}
void SqInfo::set_http_response(const char* value, size_t size) {
  set_has_http_response();
  http_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.http_response)
}
::std::string* SqInfo::mutable_http_response() {
  set_has_http_response();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.http_response)
  return http_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqInfo::release_http_response() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.http_response)
  clear_has_http_response();
  return http_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqInfo::set_allocated_http_response(::std::string* http_response) {
  if (http_response != NULL) {
    set_has_http_response();
  } else {
    clear_has_http_response();
  }
  http_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_response);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.http_response)
}

// optional string http_redirect = 6;
bool SqInfo::has_http_redirect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SqInfo::set_has_http_redirect() {
  _has_bits_[0] |= 0x00000010u;
}
void SqInfo::clear_has_http_redirect() {
  _has_bits_[0] &= ~0x00000010u;
}
void SqInfo::clear_http_redirect() {
  http_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_redirect();
}
const ::std::string& SqInfo::http_redirect() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
  return http_redirect_.GetNoArena();
}
void SqInfo::set_http_redirect(const ::std::string& value) {
  set_has_http_redirect();
  http_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}
#if LANG_CXX11
void SqInfo::set_http_redirect(::std::string&& value) {
  set_has_http_redirect();
  http_redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}
#endif
void SqInfo::set_http_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_redirect();
  http_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}
void SqInfo::set_http_redirect(const char* value, size_t size) {
  set_has_http_redirect();
  http_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}
::std::string* SqInfo::mutable_http_redirect() {
  set_has_http_redirect();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
  return http_redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqInfo::release_http_redirect() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
  clear_has_http_redirect();
  return http_redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqInfo::set_allocated_http_redirect(::std::string* http_redirect) {
  if (http_redirect != NULL) {
    set_has_http_redirect();
  } else {
    clear_has_http_redirect();
  }
  http_redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_redirect);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}

// optional bytes raw_html = 7;
bool SqInfo::has_raw_html() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SqInfo::set_has_raw_html() {
  _has_bits_[0] |= 0x00000020u;
}
void SqInfo::clear_has_raw_html() {
  _has_bits_[0] &= ~0x00000020u;
}
void SqInfo::clear_raw_html() {
  raw_html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_html();
}
const ::std::string& SqInfo::raw_html() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.raw_html)
  return raw_html_.GetNoArena();
}
void SqInfo::set_raw_html(const ::std::string& value) {
  set_has_raw_html();
  raw_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}
#if LANG_CXX11
void SqInfo::set_raw_html(::std::string&& value) {
  set_has_raw_html();
  raw_html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}
#endif
void SqInfo::set_raw_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_html();
  raw_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}
void SqInfo::set_raw_html(const void* value, size_t size) {
  set_has_raw_html();
  raw_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}
::std::string* SqInfo::mutable_raw_html() {
  set_has_raw_html();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.raw_html)
  return raw_html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqInfo::release_raw_html() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.raw_html)
  clear_has_raw_html();
  return raw_html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqInfo::set_allocated_raw_html(::std::string* raw_html) {
  if (raw_html != NULL) {
    set_has_raw_html();
  } else {
    clear_has_raw_html();
  }
  raw_html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_html);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}

// optional bytes rendered_html = 8;
bool SqInfo::has_rendered_html() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SqInfo::set_has_rendered_html() {
  _has_bits_[0] |= 0x00000040u;
}
void SqInfo::clear_has_rendered_html() {
  _has_bits_[0] &= ~0x00000040u;
}
void SqInfo::clear_rendered_html() {
  rendered_html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rendered_html();
}
const ::std::string& SqInfo::rendered_html() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
  return rendered_html_.GetNoArena();
}
void SqInfo::set_rendered_html(const ::std::string& value) {
  set_has_rendered_html();
  rendered_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}
#if LANG_CXX11
void SqInfo::set_rendered_html(::std::string&& value) {
  set_has_rendered_html();
  rendered_html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}
#endif
void SqInfo::set_rendered_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rendered_html();
  rendered_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}
void SqInfo::set_rendered_html(const void* value, size_t size) {
  set_has_rendered_html();
  rendered_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}
::std::string* SqInfo::mutable_rendered_html() {
  set_has_rendered_html();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
  return rendered_html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqInfo::release_rendered_html() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
  clear_has_rendered_html();
  return rendered_html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqInfo::set_allocated_rendered_html(::std::string* rendered_html) {
  if (rendered_html != NULL) {
    set_has_rendered_html();
  } else {
    clear_has_rendered_html();
  }
  rendered_html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rendered_html);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}

// optional string parser_output = 9;
bool SqInfo::has_parser_output() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SqInfo::set_has_parser_output() {
  _has_bits_[0] |= 0x00000080u;
}
void SqInfo::clear_has_parser_output() {
  _has_bits_[0] &= ~0x00000080u;
}
void SqInfo::clear_parser_output() {
  parser_output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parser_output();
}
const ::std::string& SqInfo::parser_output() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.parser_output)
  return parser_output_.GetNoArena();
}
void SqInfo::set_parser_output(const ::std::string& value) {
  set_has_parser_output();
  parser_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}
#if LANG_CXX11
void SqInfo::set_parser_output(::std::string&& value) {
  set_has_parser_output();
  parser_output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}
#endif
void SqInfo::set_parser_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parser_output();
  parser_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}
void SqInfo::set_parser_output(const char* value, size_t size) {
  set_has_parser_output();
  parser_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}
::std::string* SqInfo::mutable_parser_output() {
  set_has_parser_output();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.parser_output)
  return parser_output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqInfo::release_parser_output() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.parser_output)
  clear_has_parser_output();
  return parser_output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqInfo::set_allocated_parser_output(::std::string* parser_output) {
  if (parser_output != NULL) {
    set_has_parser_output();
  } else {
    clear_has_parser_output();
  }
  parser_output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parser_output);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robots::kRobotsTxtFieldNumber;
const int Robots::kRobotsTxtWwwFieldNumber;
const int Robots::kRobotsTxtHttpsFieldNumber;
const int Robots::kRobotsTxtHttpsWwwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robots::Robots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Robots)
}
Robots::Robots(const Robots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  robots_txt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robots_txt()) {
    robots_txt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robots_txt_);
  }
  robots_txt_www_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robots_txt_www()) {
    robots_txt_www_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robots_txt_www_);
  }
  robots_txt_https_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robots_txt_https()) {
    robots_txt_https_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robots_txt_https_);
  }
  robots_txt_https_www_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_robots_txt_https_www()) {
    robots_txt_https_www_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robots_txt_https_www_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Robots)
}

void Robots::SharedCtor() {
  _cached_size_ = 0;
  robots_txt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robots_txt_www_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robots_txt_https_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robots_txt_https_www_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Robots::~Robots() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Robots)
  SharedDtor();
}

void Robots::SharedDtor() {
  robots_txt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robots_txt_www_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robots_txt_https_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robots_txt_https_www_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Robots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robots::descriptor() {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robots& Robots::default_instance() {
  protobuf_webmaster_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Robots* Robots::New(::google::protobuf::Arena* arena) const {
  Robots* n = new Robots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robots::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Robots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!robots_txt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*robots_txt_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!robots_txt_www_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*robots_txt_www_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!robots_txt_https_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*robots_txt_https_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!robots_txt_https_www_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*robots_txt_https_www_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Robots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes robots_txt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_robots_txt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes robots_txt_www = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_robots_txt_www()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes robots_txt_https = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_robots_txt_https()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes robots_txt_https_www = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_robots_txt_https_www()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Robots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Robots)
  return false;
#undef DO_
}

void Robots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Robots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes robots_txt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->robots_txt(), output);
  }

  // optional bytes robots_txt_www = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->robots_txt_www(), output);
  }

  // optional bytes robots_txt_https = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->robots_txt_https(), output);
  }

  // optional bytes robots_txt_https_www = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->robots_txt_https_www(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Robots)
}

::google::protobuf::uint8* Robots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Robots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes robots_txt = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->robots_txt(), target);
  }

  // optional bytes robots_txt_www = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->robots_txt_www(), target);
  }

  // optional bytes robots_txt_https = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->robots_txt_https(), target);
  }

  // optional bytes robots_txt_https_www = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->robots_txt_https_www(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Robots)
  return target;
}

size_t Robots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Robots)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes robots_txt = 1;
    if (has_robots_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->robots_txt());
    }

    // optional bytes robots_txt_www = 2;
    if (has_robots_txt_www()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->robots_txt_www());
    }

    // optional bytes robots_txt_https = 3;
    if (has_robots_txt_https()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->robots_txt_https());
    }

    // optional bytes robots_txt_https_www = 4;
    if (has_robots_txt_https_www()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->robots_txt_https_www());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Robots)
  GOOGLE_DCHECK_NE(&from, this);
  const Robots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Robots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Robots)
    MergeFrom(*source);
  }
}

void Robots::MergeFrom(const Robots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Robots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_robots_txt();
      robots_txt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robots_txt_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_robots_txt_www();
      robots_txt_www_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robots_txt_www_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_robots_txt_https();
      robots_txt_https_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robots_txt_https_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_robots_txt_https_www();
      robots_txt_https_www_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robots_txt_https_www_);
    }
  }
}

void Robots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Robots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots::CopyFrom(const Robots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Robots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots::IsInitialized() const {
  return true;
}

void Robots::Swap(Robots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robots::InternalSwap(Robots* other) {
  using std::swap;
  robots_txt_.Swap(&other->robots_txt_);
  robots_txt_www_.Swap(&other->robots_txt_www_);
  robots_txt_https_.Swap(&other->robots_txt_https_);
  robots_txt_https_www_.Swap(&other->robots_txt_https_www_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robots::GetMetadata() const {
  protobuf_webmaster_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_webmaster_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robots

// optional bytes robots_txt = 1;
bool Robots::has_robots_txt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Robots::set_has_robots_txt() {
  _has_bits_[0] |= 0x00000001u;
}
void Robots::clear_has_robots_txt() {
  _has_bits_[0] &= ~0x00000001u;
}
void Robots::clear_robots_txt() {
  robots_txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robots_txt();
}
const ::std::string& Robots::robots_txt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Robots.robots_txt)
  return robots_txt_.GetNoArena();
}
void Robots::set_robots_txt(const ::std::string& value) {
  set_has_robots_txt();
  robots_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Robots.robots_txt)
}
#if LANG_CXX11
void Robots::set_robots_txt(::std::string&& value) {
  set_has_robots_txt();
  robots_txt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Robots.robots_txt)
}
#endif
void Robots::set_robots_txt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robots_txt();
  robots_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Robots.robots_txt)
}
void Robots::set_robots_txt(const void* value, size_t size) {
  set_has_robots_txt();
  robots_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Robots.robots_txt)
}
::std::string* Robots::mutable_robots_txt() {
  set_has_robots_txt();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Robots.robots_txt)
  return robots_txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Robots::release_robots_txt() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Robots.robots_txt)
  clear_has_robots_txt();
  return robots_txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Robots::set_allocated_robots_txt(::std::string* robots_txt) {
  if (robots_txt != NULL) {
    set_has_robots_txt();
  } else {
    clear_has_robots_txt();
  }
  robots_txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robots_txt);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Robots.robots_txt)
}

// optional bytes robots_txt_www = 2;
bool Robots::has_robots_txt_www() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Robots::set_has_robots_txt_www() {
  _has_bits_[0] |= 0x00000002u;
}
void Robots::clear_has_robots_txt_www() {
  _has_bits_[0] &= ~0x00000002u;
}
void Robots::clear_robots_txt_www() {
  robots_txt_www_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robots_txt_www();
}
const ::std::string& Robots::robots_txt_www() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
  return robots_txt_www_.GetNoArena();
}
void Robots::set_robots_txt_www(const ::std::string& value) {
  set_has_robots_txt_www();
  robots_txt_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}
#if LANG_CXX11
void Robots::set_robots_txt_www(::std::string&& value) {
  set_has_robots_txt_www();
  robots_txt_www_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}
#endif
void Robots::set_robots_txt_www(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robots_txt_www();
  robots_txt_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}
void Robots::set_robots_txt_www(const void* value, size_t size) {
  set_has_robots_txt_www();
  robots_txt_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}
::std::string* Robots::mutable_robots_txt_www() {
  set_has_robots_txt_www();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
  return robots_txt_www_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Robots::release_robots_txt_www() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
  clear_has_robots_txt_www();
  return robots_txt_www_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Robots::set_allocated_robots_txt_www(::std::string* robots_txt_www) {
  if (robots_txt_www != NULL) {
    set_has_robots_txt_www();
  } else {
    clear_has_robots_txt_www();
  }
  robots_txt_www_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robots_txt_www);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}

// optional bytes robots_txt_https = 3;
bool Robots::has_robots_txt_https() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Robots::set_has_robots_txt_https() {
  _has_bits_[0] |= 0x00000004u;
}
void Robots::clear_has_robots_txt_https() {
  _has_bits_[0] &= ~0x00000004u;
}
void Robots::clear_robots_txt_https() {
  robots_txt_https_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robots_txt_https();
}
const ::std::string& Robots::robots_txt_https() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
  return robots_txt_https_.GetNoArena();
}
void Robots::set_robots_txt_https(const ::std::string& value) {
  set_has_robots_txt_https();
  robots_txt_https_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}
#if LANG_CXX11
void Robots::set_robots_txt_https(::std::string&& value) {
  set_has_robots_txt_https();
  robots_txt_https_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}
#endif
void Robots::set_robots_txt_https(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robots_txt_https();
  robots_txt_https_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}
void Robots::set_robots_txt_https(const void* value, size_t size) {
  set_has_robots_txt_https();
  robots_txt_https_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}
::std::string* Robots::mutable_robots_txt_https() {
  set_has_robots_txt_https();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
  return robots_txt_https_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Robots::release_robots_txt_https() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
  clear_has_robots_txt_https();
  return robots_txt_https_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Robots::set_allocated_robots_txt_https(::std::string* robots_txt_https) {
  if (robots_txt_https != NULL) {
    set_has_robots_txt_https();
  } else {
    clear_has_robots_txt_https();
  }
  robots_txt_https_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robots_txt_https);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}

// optional bytes robots_txt_https_www = 4;
bool Robots::has_robots_txt_https_www() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Robots::set_has_robots_txt_https_www() {
  _has_bits_[0] |= 0x00000008u;
}
void Robots::clear_has_robots_txt_https_www() {
  _has_bits_[0] &= ~0x00000008u;
}
void Robots::clear_robots_txt_https_www() {
  robots_txt_https_www_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robots_txt_https_www();
}
const ::std::string& Robots::robots_txt_https_www() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
  return robots_txt_https_www_.GetNoArena();
}
void Robots::set_robots_txt_https_www(const ::std::string& value) {
  set_has_robots_txt_https_www();
  robots_txt_https_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}
#if LANG_CXX11
void Robots::set_robots_txt_https_www(::std::string&& value) {
  set_has_robots_txt_https_www();
  robots_txt_https_www_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}
#endif
void Robots::set_robots_txt_https_www(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robots_txt_https_www();
  robots_txt_https_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}
void Robots::set_robots_txt_https_www(const void* value, size_t size) {
  set_has_robots_txt_https_www();
  robots_txt_https_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}
::std::string* Robots::mutable_robots_txt_https_www() {
  set_has_robots_txt_https_www();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
  return robots_txt_https_www_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Robots::release_robots_txt_https_www() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
  clear_has_robots_txt_https_www();
  return robots_txt_https_www_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Robots::set_allocated_robots_txt_https_www(::std::string* robots_txt_https_www) {
  if (robots_txt_https_www != NULL) {
    set_has_robots_txt_https_www();
  } else {
    clear_has_robots_txt_https_www();
  }
  robots_txt_https_www_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robots_txt_https_www);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
