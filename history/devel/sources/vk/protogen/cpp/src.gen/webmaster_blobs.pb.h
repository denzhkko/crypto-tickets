// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webmaster_blobs.proto

#ifndef PROTOBUF_webmaster_5fblobs_2eproto__INCLUDED
#define PROTOBUF_webmaster_5fblobs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crawl_state.pb.h"
#include "document_enums.pb.h"
#include "image_defs.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class DailyQueryData;
class DailyQueryDataDefaultTypeInternal;
extern DailyQueryDataDefaultTypeInternal _DailyQueryData_default_instance_;
class FetcherData;
class FetcherDataDefaultTypeInternal;
extern FetcherDataDefaultTypeInternal _FetcherData_default_instance_;
class GeoQueryInfo;
class GeoQueryInfoDefaultTypeInternal;
extern GeoQueryInfoDefaultTypeInternal _GeoQueryInfo_default_instance_;
class Link;
class LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
class LinksData;
class LinksDataDefaultTypeInternal;
extern LinksDataDefaultTypeInternal _LinksData_default_instance_;
class QueryData;
class QueryDataDefaultTypeInternal;
extern QueryDataDefaultTypeInternal _QueryData_default_instance_;
class QueryInfo;
class QueryInfoDefaultTypeInternal;
extern QueryInfoDefaultTypeInternal _QueryInfo_default_instance_;
class QuerySession;
class QuerySessionDefaultTypeInternal;
extern QuerySessionDefaultTypeInternal _QuerySession_default_instance_;
class RankingData;
class RankingDataDefaultTypeInternal;
extern RankingDataDefaultTypeInternal _RankingData_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Robots;
class RobotsDefaultTypeInternal;
extern RobotsDefaultTypeInternal _Robots_default_instance_;
class SekiteiQuotaData;
class SekiteiQuotaDataDefaultTypeInternal;
extern SekiteiQuotaDataDefaultTypeInternal _SekiteiQuotaData_default_instance_;
class SiteData;
class SiteDataDefaultTypeInternal;
extern SiteDataDefaultTypeInternal _SiteData_default_instance_;
class SqInfo;
class SqInfoDefaultTypeInternal;
extern SqInfoDefaultTypeInternal _SqInfo_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_webmaster_5fblobs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_webmaster_5fblobs_2eproto

// ===================================================================

class FetcherData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.FetcherData) */ {
 public:
  FetcherData();
  virtual ~FetcherData();

  FetcherData(const FetcherData& from);

  inline FetcherData& operator=(const FetcherData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetcherData(FetcherData&& from) noexcept
    : FetcherData() {
    *this = ::std::move(from);
  }

  inline FetcherData& operator=(FetcherData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetcherData& default_instance();

  static inline const FetcherData* internal_default_instance() {
    return reinterpret_cast<const FetcherData*>(
               &_FetcherData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FetcherData* other);
  friend void swap(FetcherData& a, FetcherData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetcherData* New() const PROTOBUF_FINAL { return New(NULL); }

  FetcherData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetcherData& from);
  void MergeFrom(const FetcherData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetcherData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 3;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 3;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // optional string full_url = 5;
  bool has_full_url() const;
  void clear_full_url();
  static const int kFullUrlFieldNumber = 5;
  const ::std::string& full_url() const;
  void set_full_url(const ::std::string& value);
  #if LANG_CXX11
  void set_full_url(::std::string&& value);
  #endif
  void set_full_url(const char* value);
  void set_full_url(const char* value, size_t size);
  ::std::string* mutable_full_url();
  ::std::string* release_full_url();
  void set_allocated_full_url(::std::string* full_url);

  // optional .ru.mail.go.webbase.blobs.CrawlDetails current_status = 1;
  bool has_current_status() const;
  void clear_current_status();
  static const int kCurrentStatusFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::CrawlDetails& current_status() const;
  ::ru::mail::go::webbase::blobs::CrawlDetails* mutable_current_status();
  ::ru::mail::go::webbase::blobs::CrawlDetails* release_current_status();
  void set_allocated_current_status(::ru::mail::go::webbase::blobs::CrawlDetails* current_status);

  // optional int64 index_time = 4;
  bool has_index_time() const;
  void clear_index_time();
  static const int kIndexTimeFieldNumber = 4;
  ::google::protobuf::int64 index_time() const;
  void set_index_time(::google::protobuf::int64 value);

  // optional int64 first_index_time = 6;
  bool has_first_index_time() const;
  void clear_first_index_time();
  static const int kFirstIndexTimeFieldNumber = 6;
  ::google::protobuf::int64 first_index_time() const;
  void set_first_index_time(::google::protobuf::int64 value);

  // optional bool disabled_by_robots = 2;
  bool has_disabled_by_robots() const;
  void clear_disabled_by_robots();
  static const int kDisabledByRobotsFieldNumber = 2;
  bool disabled_by_robots() const;
  void set_disabled_by_robots(bool value);

  // optional bool should_be_indexed = 9;
  bool has_should_be_indexed() const;
  void clear_should_be_indexed();
  static const int kShouldBeIndexedFieldNumber = 9;
  bool should_be_indexed() const;
  void set_should_be_indexed(bool value);

  // optional .ru.mail.go.webbase.blobs.ContentType content_type = 8;
  bool has_content_type() const;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 8;
  ::ru::mail::go::webbase::blobs::ContentType content_type() const;
  void set_content_type(::ru::mail::go::webbase::blobs::ContentType value);

  // optional int64 first_crawl_time = 7;
  bool has_first_crawl_time() const;
  void clear_first_crawl_time();
  static const int kFirstCrawlTimeFieldNumber = 7;
  ::google::protobuf::int64 first_crawl_time() const;
  void set_first_crawl_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.FetcherData)
 private:
  void set_has_current_status();
  void clear_has_current_status();
  void set_has_disabled_by_robots();
  void clear_has_disabled_by_robots();
  void set_has_redirect();
  void clear_has_redirect();
  void set_has_index_time();
  void clear_has_index_time();
  void set_has_full_url();
  void clear_has_full_url();
  void set_has_first_index_time();
  void clear_has_first_index_time();
  void set_has_first_crawl_time();
  void clear_has_first_crawl_time();
  void set_has_content_type();
  void clear_has_content_type();
  void set_has_should_be_indexed();
  void clear_has_should_be_indexed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::google::protobuf::internal::ArenaStringPtr full_url_;
  ::ru::mail::go::webbase::blobs::CrawlDetails* current_status_;
  ::google::protobuf::int64 index_time_;
  ::google::protobuf::int64 first_index_time_;
  bool disabled_by_robots_;
  bool should_be_indexed_;
  int content_type_;
  ::google::protobuf::int64 first_crawl_time_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.RankingData) */ {
 public:
  RankingData();
  virtual ~RankingData();

  RankingData(const RankingData& from);

  inline RankingData& operator=(const RankingData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankingData(RankingData&& from) noexcept
    : RankingData() {
    *this = ::std::move(from);
  }

  inline RankingData& operator=(RankingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingData& default_instance();

  static inline const RankingData* internal_default_instance() {
    return reinterpret_cast<const RankingData*>(
               &_RankingData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RankingData* other);
  friend void swap(RankingData& a, RankingData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankingData* New() const PROTOBUF_FINAL { return New(NULL); }

  RankingData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankingData& from);
  void MergeFrom(const RankingData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 BRSQ = 1 [default = 0];
  bool has_brsq() const;
  void clear_brsq();
  static const int kBRSQFieldNumber = 1;
  ::google::protobuf::int64 brsq() const;
  void set_brsq(::google::protobuf::int64 value);

  // optional double BRV = 2 [default = 0];
  bool has_brv() const;
  void clear_brv();
  static const int kBRVFieldNumber = 2;
  double brv() const;
  void set_brv(double value);

  // optional int64 URUQ = 3 [default = 0];
  bool has_uruq() const;
  void clear_uruq();
  static const int kURUQFieldNumber = 3;
  ::google::protobuf::int64 uruq() const;
  void set_uruq(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.RankingData)
 private:
  void set_has_brsq();
  void clear_has_brsq();
  void set_has_brv();
  void clear_has_brv();
  void set_has_uruq();
  void clear_has_uruq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 brsq_;
  double brv_;
  ::google::protobuf::int64 uruq_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Link : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Link* other);
  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const PROTOBUF_FINAL { return New(NULL); }

  Link* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional double rank = 3 [default = 0];
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 3;
  double rank() const;
  void set_rank(double value);

  // optional uint32 count = 4 [default = 1];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.Link)
 private:
  void set_has_from();
  void clear_has_from();
  void set_has_text();
  void clear_has_text();
  void set_has_rank();
  void clear_has_rank();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  double rank_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinksData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.LinksData) */ {
 public:
  LinksData();
  virtual ~LinksData();

  LinksData(const LinksData& from);

  inline LinksData& operator=(const LinksData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinksData(LinksData&& from) noexcept
    : LinksData() {
    *this = ::std::move(from);
  }

  inline LinksData& operator=(LinksData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinksData& default_instance();

  static inline const LinksData* internal_default_instance() {
    return reinterpret_cast<const LinksData*>(
               &_LinksData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LinksData* other);
  friend void swap(LinksData& a, LinksData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinksData* New() const PROTOBUF_FINAL { return New(NULL); }

  LinksData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinksData& from);
  void MergeFrom(const LinksData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinksData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.Link url_backlinks = 3;
  int url_backlinks_size() const;
  void clear_url_backlinks();
  static const int kUrlBacklinksFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::Link& url_backlinks(int index) const;
  ::ru::mail::go::webbase::blobs::Link* mutable_url_backlinks(int index);
  ::ru::mail::go::webbase::blobs::Link* add_url_backlinks();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
      mutable_url_backlinks();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
      url_backlinks() const;

  // repeated .ru.mail.go.webbase.blobs.Link site_backlinks = 4;
  int site_backlinks_size() const;
  void clear_site_backlinks();
  static const int kSiteBacklinksFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::Link& site_backlinks(int index) const;
  ::ru::mail::go::webbase::blobs::Link* mutable_site_backlinks(int index);
  ::ru::mail::go::webbase::blobs::Link* add_site_backlinks();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
      mutable_site_backlinks();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
      site_backlinks() const;

  // repeated .ru.mail.go.webbase.blobs.Link back_redirects = 5;
  int back_redirects_size() const;
  void clear_back_redirects();
  static const int kBackRedirectsFieldNumber = 5;
  const ::ru::mail::go::webbase::blobs::Link& back_redirects(int index) const;
  ::ru::mail::go::webbase::blobs::Link* mutable_back_redirects(int index);
  ::ru::mail::go::webbase::blobs::Link* add_back_redirects();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
      mutable_back_redirects();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
      back_redirects() const;

  // optional int32 backlinks_count = 1 [default = 0];
  bool has_backlinks_count() const;
  void clear_backlinks_count();
  static const int kBacklinksCountFieldNumber = 1;
  ::google::protobuf::int32 backlinks_count() const;
  void set_backlinks_count(::google::protobuf::int32 value);

  // optional int32 unique_texts_count = 2 [default = 0];
  bool has_unique_texts_count() const;
  void clear_unique_texts_count();
  static const int kUniqueTextsCountFieldNumber = 2;
  ::google::protobuf::int32 unique_texts_count() const;
  void set_unique_texts_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.LinksData)
 private:
  void set_has_backlinks_count();
  void clear_has_backlinks_count();
  void set_has_unique_texts_count();
  void clear_has_unique_texts_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link > url_backlinks_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link > site_backlinks_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link > back_redirects_;
  ::google::protobuf::int32 backlinks_count_;
  ::google::protobuf::int32 unique_texts_count_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuerySession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.QuerySession) */ {
 public:
  QuerySession();
  virtual ~QuerySession();

  QuerySession(const QuerySession& from);

  inline QuerySession& operator=(const QuerySession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuerySession(QuerySession&& from) noexcept
    : QuerySession() {
    *this = ::std::move(from);
  }

  inline QuerySession& operator=(QuerySession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySession& default_instance();

  static inline const QuerySession* internal_default_instance() {
    return reinterpret_cast<const QuerySession*>(
               &_QuerySession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(QuerySession* other);
  friend void swap(QuerySession& a, QuerySession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuerySession* New() const PROTOBUF_FINAL { return New(NULL); }

  QuerySession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuerySession& from);
  void MergeFrom(const QuerySession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuerySession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // optional int32 views = 2;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 2;
  ::google::protobuf::int32 views() const;
  void set_views(::google::protobuf::int32 value);

  // optional int32 clicks = 3;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 3;
  ::google::protobuf::int32 clicks() const;
  void set_clicks(::google::protobuf::int32 value);

  // optional double avg_position = 4;
  bool has_avg_position() const;
  void clear_avg_position();
  static const int kAvgPositionFieldNumber = 4;
  double avg_position() const;
  void set_avg_position(double value);

  // optional int32 min_position = 5;
  bool has_min_position() const;
  void clear_min_position();
  static const int kMinPositionFieldNumber = 5;
  ::google::protobuf::int32 min_position() const;
  void set_min_position(::google::protobuf::int32 value);

  // optional int32 max_position = 6;
  bool has_max_position() const;
  void clear_max_position();
  static const int kMaxPositionFieldNumber = 6;
  ::google::protobuf::int32 max_position() const;
  void set_max_position(::google::protobuf::int32 value);

  // optional int64 min_ts = 7;
  bool has_min_ts() const;
  void clear_min_ts();
  static const int kMinTsFieldNumber = 7;
  ::google::protobuf::int64 min_ts() const;
  void set_min_ts(::google::protobuf::int64 value);

  // optional int64 max_ts = 8;
  bool has_max_ts() const;
  void clear_max_ts();
  static const int kMaxTsFieldNumber = 8;
  ::google::protobuf::int64 max_ts() const;
  void set_max_ts(::google::protobuf::int64 value);

  // optional int32 shows = 9;
  bool has_shows() const;
  void clear_shows();
  static const int kShowsFieldNumber = 9;
  ::google::protobuf::int32 shows() const;
  void set_shows(::google::protobuf::int32 value);

  // optional int32 last_clicks = 10;
  bool has_last_clicks() const;
  void clear_last_clicks();
  static const int kLastClicksFieldNumber = 10;
  ::google::protobuf::int32 last_clicks() const;
  void set_last_clicks(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.QuerySession)
 private:
  void set_has_date();
  void clear_has_date();
  void set_has_views();
  void clear_has_views();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_avg_position();
  void clear_has_avg_position();
  void set_has_min_position();
  void clear_has_min_position();
  void set_has_max_position();
  void clear_has_max_position();
  void set_has_min_ts();
  void clear_has_min_ts();
  void set_has_max_ts();
  void clear_has_max_ts();
  void set_has_shows();
  void clear_has_shows();
  void set_has_last_clicks();
  void clear_has_last_clicks();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 date_;
  ::google::protobuf::int32 views_;
  ::google::protobuf::int32 clicks_;
  double avg_position_;
  ::google::protobuf::int32 min_position_;
  ::google::protobuf::int32 max_position_;
  ::google::protobuf::int64 min_ts_;
  ::google::protobuf::int64 max_ts_;
  ::google::protobuf::int32 shows_;
  ::google::protobuf::int32 last_clicks_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.QueryInfo) */ {
 public:
  QueryInfo();
  virtual ~QueryInfo();

  QueryInfo(const QueryInfo& from);

  inline QueryInfo& operator=(const QueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryInfo(QueryInfo&& from) noexcept
    : QueryInfo() {
    *this = ::std::move(from);
  }

  inline QueryInfo& operator=(QueryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryInfo& default_instance();

  static inline const QueryInfo* internal_default_instance() {
    return reinterpret_cast<const QueryInfo*>(
               &_QueryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(QueryInfo* other);
  friend void swap(QueryInfo& a, QueryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryInfo& from);
  void MergeFrom(const QueryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.QuerySession sessions = 2;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::QuerySession& sessions(int index) const;
  ::ru::mail::go::webbase::blobs::QuerySession* mutable_sessions(int index);
  ::ru::mail::go::webbase::blobs::QuerySession* add_sessions();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QuerySession >*
      mutable_sessions();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QuerySession >&
      sessions() const;

  // required string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional double attractability = 3;
  bool has_attractability() const;
  void clear_attractability();
  static const int kAttractabilityFieldNumber = 3;
  double attractability() const;
  void set_attractability(double value);

  // optional double satisfactibility = 4;
  bool has_satisfactibility() const;
  void clear_satisfactibility();
  static const int kSatisfactibilityFieldNumber = 4;
  double satisfactibility() const;
  void set_satisfactibility(double value);

  // optional double actuality = 6;
  bool has_actuality() const;
  void clear_actuality();
  static const int kActualityFieldNumber = 6;
  double actuality() const;
  void set_actuality(double value);

  // optional int32 users = 5;
  bool has_users() const;
  void clear_users();
  static const int kUsersFieldNumber = 5;
  ::google::protobuf::int32 users() const;
  void set_users(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.QueryInfo)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_attractability();
  void clear_has_attractability();
  void set_has_satisfactibility();
  void clear_has_satisfactibility();
  void set_has_users();
  void clear_has_users();
  void set_has_actuality();
  void clear_has_actuality();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QuerySession > sessions_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  double attractability_;
  double satisfactibility_;
  double actuality_;
  ::google::protobuf::int32 users_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeoQueryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.GeoQueryInfo) */ {
 public:
  GeoQueryInfo();
  virtual ~GeoQueryInfo();

  GeoQueryInfo(const GeoQueryInfo& from);

  inline GeoQueryInfo& operator=(const GeoQueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoQueryInfo(GeoQueryInfo&& from) noexcept
    : GeoQueryInfo() {
    *this = ::std::move(from);
  }

  inline GeoQueryInfo& operator=(GeoQueryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoQueryInfo& default_instance();

  static inline const GeoQueryInfo* internal_default_instance() {
    return reinterpret_cast<const GeoQueryInfo*>(
               &_GeoQueryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GeoQueryInfo* other);
  friend void swap(GeoQueryInfo& a, GeoQueryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoQueryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GeoQueryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeoQueryInfo& from);
  void MergeFrom(const GeoQueryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeoQueryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.QueryInfo queries = 2;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::QueryInfo& queries(int index) const;
  ::ru::mail::go::webbase::blobs::QueryInfo* mutable_queries(int index);
  ::ru::mail::go::webbase::blobs::QueryInfo* add_queries();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryInfo >*
      mutable_queries();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryInfo >&
      queries() const;

  // required int32 geo_code = 1;
  bool has_geo_code() const;
  void clear_geo_code();
  static const int kGeoCodeFieldNumber = 1;
  ::google::protobuf::int32 geo_code() const;
  void set_geo_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.GeoQueryInfo)
 private:
  void set_has_geo_code();
  void clear_has_geo_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryInfo > queries_;
  ::google::protobuf::int32 geo_code_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.QueryData) */ {
 public:
  QueryData();
  virtual ~QueryData();

  QueryData(const QueryData& from);

  inline QueryData& operator=(const QueryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryData(QueryData&& from) noexcept
    : QueryData() {
    *this = ::std::move(from);
  }

  inline QueryData& operator=(QueryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryData& default_instance();

  static inline const QueryData* internal_default_instance() {
    return reinterpret_cast<const QueryData*>(
               &_QueryData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(QueryData* other);
  friend void swap(QueryData& a, QueryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryData* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryData& from);
  void MergeFrom(const QueryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.GeoQueryInfo geo_queries = 1;
  int geo_queries_size() const;
  void clear_geo_queries();
  static const int kGeoQueriesFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::GeoQueryInfo& geo_queries(int index) const;
  ::ru::mail::go::webbase::blobs::GeoQueryInfo* mutable_geo_queries(int index);
  ::ru::mail::go::webbase::blobs::GeoQueryInfo* add_geo_queries();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GeoQueryInfo >*
      mutable_geo_queries();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GeoQueryInfo >&
      geo_queries() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.QueryData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GeoQueryInfo > geo_queries_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DailyQueryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.DailyQueryData) */ {
 public:
  DailyQueryData();
  virtual ~DailyQueryData();

  DailyQueryData(const DailyQueryData& from);

  inline DailyQueryData& operator=(const DailyQueryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DailyQueryData(DailyQueryData&& from) noexcept
    : DailyQueryData() {
    *this = ::std::move(from);
  }

  inline DailyQueryData& operator=(DailyQueryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyQueryData& default_instance();

  static inline const DailyQueryData* internal_default_instance() {
    return reinterpret_cast<const DailyQueryData*>(
               &_DailyQueryData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DailyQueryData* other);
  friend void swap(DailyQueryData& a, DailyQueryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DailyQueryData* New() const PROTOBUF_FINAL { return New(NULL); }

  DailyQueryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DailyQueryData& from);
  void MergeFrom(const DailyQueryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DailyQueryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.QueryData query_data = 1;
  int query_data_size() const;
  void clear_query_data();
  static const int kQueryDataFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::QueryData& query_data(int index) const;
  ::ru::mail::go::webbase::blobs::QueryData* mutable_query_data(int index);
  ::ru::mail::go::webbase::blobs::QueryData* add_query_data();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryData >*
      mutable_query_data();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryData >&
      query_data() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.DailyQueryData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryData > query_data_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SekiteiQuotaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SekiteiQuotaData) */ {
 public:
  SekiteiQuotaData();
  virtual ~SekiteiQuotaData();

  SekiteiQuotaData(const SekiteiQuotaData& from);

  inline SekiteiQuotaData& operator=(const SekiteiQuotaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SekiteiQuotaData(SekiteiQuotaData&& from) noexcept
    : SekiteiQuotaData() {
    *this = ::std::move(from);
  }

  inline SekiteiQuotaData& operator=(SekiteiQuotaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SekiteiQuotaData& default_instance();

  static inline const SekiteiQuotaData* internal_default_instance() {
    return reinterpret_cast<const SekiteiQuotaData*>(
               &_SekiteiQuotaData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SekiteiQuotaData* other);
  friend void swap(SekiteiQuotaData& a, SekiteiQuotaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SekiteiQuotaData* New() const PROTOBUF_FINAL { return New(NULL); }

  SekiteiQuotaData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SekiteiQuotaData& from);
  void MergeFrom(const SekiteiQuotaData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SekiteiQuotaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string description = 1;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required int32 maxQuota = 2;
  bool has_maxquota() const;
  void clear_maxquota();
  static const int kMaxQuotaFieldNumber = 2;
  ::google::protobuf::int32 maxquota() const;
  void set_maxquota(::google::protobuf::int32 value);

  // required int32 urlsInQuota = 3;
  bool has_urlsinquota() const;
  void clear_urlsinquota();
  static const int kUrlsInQuotaFieldNumber = 3;
  ::google::protobuf::int32 urlsinquota() const;
  void set_urlsinquota(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SekiteiQuotaData)
 private:
  void set_has_description();
  void clear_has_description();
  void set_has_maxquota();
  void clear_has_maxquota();
  void set_has_urlsinquota();
  void clear_has_urlsinquota();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 maxquota_;
  ::google::protobuf::int32 urlsinquota_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SiteData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SiteData) */ {
 public:
  SiteData();
  virtual ~SiteData();

  SiteData(const SiteData& from);

  inline SiteData& operator=(const SiteData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SiteData(SiteData&& from) noexcept
    : SiteData() {
    *this = ::std::move(from);
  }

  inline SiteData& operator=(SiteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiteData& default_instance();

  static inline const SiteData* internal_default_instance() {
    return reinterpret_cast<const SiteData*>(
               &_SiteData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SiteData* other);
  friend void swap(SiteData& a, SiteData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SiteData* New() const PROTOBUF_FINAL { return New(NULL); }

  SiteData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SiteData& from);
  void MergeFrom(const SiteData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SiteData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.SekiteiQuotaData sekiteiQuota = 3;
  int sekiteiquota_size() const;
  void clear_sekiteiquota();
  static const int kSekiteiQuotaFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::SekiteiQuotaData& sekiteiquota(int index) const;
  ::ru::mail::go::webbase::blobs::SekiteiQuotaData* mutable_sekiteiquota(int index);
  ::ru::mail::go::webbase::blobs::SekiteiQuotaData* add_sekiteiquota();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SekiteiQuotaData >*
      mutable_sekiteiquota();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SekiteiQuotaData >&
      sekiteiquota() const;

  // optional int32 maxQuota = 1;
  bool has_maxquota() const;
  void clear_maxquota();
  static const int kMaxQuotaFieldNumber = 1;
  ::google::protobuf::int32 maxquota() const;
  void set_maxquota(::google::protobuf::int32 value);

  // optional int32 urlsInQuota = 2;
  bool has_urlsinquota() const;
  void clear_urlsinquota();
  static const int kUrlsInQuotaFieldNumber = 2;
  ::google::protobuf::int32 urlsinquota() const;
  void set_urlsinquota(::google::protobuf::int32 value);

  // optional bool isBanned = 4;
  bool has_isbanned() const;
  void clear_isbanned();
  static const int kIsBannedFieldNumber = 4;
  bool isbanned() const;
  void set_isbanned(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SiteData)
 private:
  void set_has_maxquota();
  void clear_has_maxquota();
  void set_has_urlsinquota();
  void clear_has_urlsinquota();
  void set_has_isbanned();
  void clear_has_isbanned();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SekiteiQuotaData > sekiteiquota_;
  ::google::protobuf::int32 maxquota_;
  ::google::protobuf::int32 urlsinquota_;
  bool isbanned_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const PROTOBUF_FINAL { return New(NULL); }

  Result* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required .ru.mail.go.webbase.blobs.FetcherData fetcher_data = 2;
  bool has_fetcher_data() const;
  void clear_fetcher_data();
  static const int kFetcherDataFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::FetcherData& fetcher_data() const;
  ::ru::mail::go::webbase::blobs::FetcherData* mutable_fetcher_data();
  ::ru::mail::go::webbase::blobs::FetcherData* release_fetcher_data();
  void set_allocated_fetcher_data(::ru::mail::go::webbase::blobs::FetcherData* fetcher_data);

  // required .ru.mail.go.webbase.blobs.RankingData ranking_data = 3;
  bool has_ranking_data() const;
  void clear_ranking_data();
  static const int kRankingDataFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::RankingData& ranking_data() const;
  ::ru::mail::go::webbase::blobs::RankingData* mutable_ranking_data();
  ::ru::mail::go::webbase::blobs::RankingData* release_ranking_data();
  void set_allocated_ranking_data(::ru::mail::go::webbase::blobs::RankingData* ranking_data);

  // required .ru.mail.go.webbase.blobs.LinksData links_data = 4;
  bool has_links_data() const;
  void clear_links_data();
  static const int kLinksDataFieldNumber = 4;
  const ::ru::mail::go::webbase::blobs::LinksData& links_data() const;
  ::ru::mail::go::webbase::blobs::LinksData* mutable_links_data();
  ::ru::mail::go::webbase::blobs::LinksData* release_links_data();
  void set_allocated_links_data(::ru::mail::go::webbase::blobs::LinksData* links_data);

  // required .ru.mail.go.webbase.blobs.QueryData query_data = 5;
  bool has_query_data() const;
  void clear_query_data();
  static const int kQueryDataFieldNumber = 5;
  const ::ru::mail::go::webbase::blobs::QueryData& query_data() const;
  ::ru::mail::go::webbase::blobs::QueryData* mutable_query_data();
  ::ru::mail::go::webbase::blobs::QueryData* release_query_data();
  void set_allocated_query_data(::ru::mail::go::webbase::blobs::QueryData* query_data);

  // required .ru.mail.go.webbase.blobs.DailyQueryData daily_query_data = 7;
  bool has_daily_query_data() const;
  void clear_daily_query_data();
  static const int kDailyQueryDataFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::DailyQueryData& daily_query_data() const;
  ::ru::mail::go::webbase::blobs::DailyQueryData* mutable_daily_query_data();
  ::ru::mail::go::webbase::blobs::DailyQueryData* release_daily_query_data();
  void set_allocated_daily_query_data(::ru::mail::go::webbase::blobs::DailyQueryData* daily_query_data);

  // optional .ru.mail.go.webbase.blobs.SiteData site_data = 8;
  bool has_site_data() const;
  void clear_site_data();
  static const int kSiteDataFieldNumber = 8;
  const ::ru::mail::go::webbase::blobs::SiteData& site_data() const;
  ::ru::mail::go::webbase::blobs::SiteData* mutable_site_data();
  ::ru::mail::go::webbase::blobs::SiteData* release_site_data();
  void set_allocated_site_data(::ru::mail::go::webbase::blobs::SiteData* site_data);

  // optional int32 pik = 6;
  bool has_pik() const;
  void clear_pik();
  static const int kPikFieldNumber = 6;
  ::google::protobuf::int32 pik() const;
  void set_pik(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.Result)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_fetcher_data();
  void clear_has_fetcher_data();
  void set_has_ranking_data();
  void clear_has_ranking_data();
  void set_has_links_data();
  void clear_has_links_data();
  void set_has_query_data();
  void clear_has_query_data();
  void set_has_pik();
  void clear_has_pik();
  void set_has_daily_query_data();
  void clear_has_daily_query_data();
  void set_has_site_data();
  void clear_has_site_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::ru::mail::go::webbase::blobs::FetcherData* fetcher_data_;
  ::ru::mail::go::webbase::blobs::RankingData* ranking_data_;
  ::ru::mail::go::webbase::blobs::LinksData* links_data_;
  ::ru::mail::go::webbase::blobs::QueryData* query_data_;
  ::ru::mail::go::webbase::blobs::DailyQueryData* daily_query_data_;
  ::ru::mail::go::webbase::blobs::SiteData* site_data_;
  ::google::protobuf::int32 pik_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SqInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SqInfo) */ {
 public:
  SqInfo();
  virtual ~SqInfo();

  SqInfo(const SqInfo& from);

  inline SqInfo& operator=(const SqInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqInfo(SqInfo&& from) noexcept
    : SqInfo() {
    *this = ::std::move(from);
  }

  inline SqInfo& operator=(SqInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SqInfo& default_instance();

  static inline const SqInfo* internal_default_instance() {
    return reinterpret_cast<const SqInfo*>(
               &_SqInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SqInfo* other);
  friend void swap(SqInfo& a, SqInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SqInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SqInfo& from);
  void MergeFrom(const SqInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SqInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // optional string serp_url = 2;
  bool has_serp_url() const;
  void clear_serp_url();
  static const int kSerpUrlFieldNumber = 2;
  const ::std::string& serp_url() const;
  void set_serp_url(const ::std::string& value);
  #if LANG_CXX11
  void set_serp_url(::std::string&& value);
  #endif
  void set_serp_url(const char* value);
  void set_serp_url(const char* value, size_t size);
  ::std::string* mutable_serp_url();
  ::std::string* release_serp_url();
  void set_allocated_serp_url(::std::string* serp_url);

  // optional string http_request = 4;
  bool has_http_request() const;
  void clear_http_request();
  static const int kHttpRequestFieldNumber = 4;
  const ::std::string& http_request() const;
  void set_http_request(const ::std::string& value);
  #if LANG_CXX11
  void set_http_request(::std::string&& value);
  #endif
  void set_http_request(const char* value);
  void set_http_request(const char* value, size_t size);
  ::std::string* mutable_http_request();
  ::std::string* release_http_request();
  void set_allocated_http_request(::std::string* http_request);

  // optional string http_response = 5;
  bool has_http_response() const;
  void clear_http_response();
  static const int kHttpResponseFieldNumber = 5;
  const ::std::string& http_response() const;
  void set_http_response(const ::std::string& value);
  #if LANG_CXX11
  void set_http_response(::std::string&& value);
  #endif
  void set_http_response(const char* value);
  void set_http_response(const char* value, size_t size);
  ::std::string* mutable_http_response();
  ::std::string* release_http_response();
  void set_allocated_http_response(::std::string* http_response);

  // optional string http_redirect = 6;
  bool has_http_redirect() const;
  void clear_http_redirect();
  static const int kHttpRedirectFieldNumber = 6;
  const ::std::string& http_redirect() const;
  void set_http_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_http_redirect(::std::string&& value);
  #endif
  void set_http_redirect(const char* value);
  void set_http_redirect(const char* value, size_t size);
  ::std::string* mutable_http_redirect();
  ::std::string* release_http_redirect();
  void set_allocated_http_redirect(::std::string* http_redirect);

  // optional bytes raw_html = 7;
  bool has_raw_html() const;
  void clear_raw_html();
  static const int kRawHtmlFieldNumber = 7;
  const ::std::string& raw_html() const;
  void set_raw_html(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_html(::std::string&& value);
  #endif
  void set_raw_html(const char* value);
  void set_raw_html(const void* value, size_t size);
  ::std::string* mutable_raw_html();
  ::std::string* release_raw_html();
  void set_allocated_raw_html(::std::string* raw_html);

  // optional bytes rendered_html = 8;
  bool has_rendered_html() const;
  void clear_rendered_html();
  static const int kRenderedHtmlFieldNumber = 8;
  const ::std::string& rendered_html() const;
  void set_rendered_html(const ::std::string& value);
  #if LANG_CXX11
  void set_rendered_html(::std::string&& value);
  #endif
  void set_rendered_html(const char* value);
  void set_rendered_html(const void* value, size_t size);
  ::std::string* mutable_rendered_html();
  ::std::string* release_rendered_html();
  void set_allocated_rendered_html(::std::string* rendered_html);

  // optional string parser_output = 9;
  bool has_parser_output() const;
  void clear_parser_output();
  static const int kParserOutputFieldNumber = 9;
  const ::std::string& parser_output() const;
  void set_parser_output(const ::std::string& value);
  #if LANG_CXX11
  void set_parser_output(::std::string&& value);
  #endif
  void set_parser_output(const char* value);
  void set_parser_output(const char* value, size_t size);
  ::std::string* mutable_parser_output();
  ::std::string* release_parser_output();
  void set_allocated_parser_output(::std::string* parser_output);

  // optional int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SqInfo)
 private:
  void set_has_query_text();
  void clear_has_query_text();
  void set_has_serp_url();
  void clear_has_serp_url();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_http_request();
  void clear_has_http_request();
  void set_has_http_response();
  void clear_has_http_response();
  void set_has_http_redirect();
  void clear_has_http_redirect();
  void set_has_raw_html();
  void clear_has_raw_html();
  void set_has_rendered_html();
  void clear_has_rendered_html();
  void set_has_parser_output();
  void clear_has_parser_output();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  ::google::protobuf::internal::ArenaStringPtr serp_url_;
  ::google::protobuf::internal::ArenaStringPtr http_request_;
  ::google::protobuf::internal::ArenaStringPtr http_response_;
  ::google::protobuf::internal::ArenaStringPtr http_redirect_;
  ::google::protobuf::internal::ArenaStringPtr raw_html_;
  ::google::protobuf::internal::ArenaStringPtr rendered_html_;
  ::google::protobuf::internal::ArenaStringPtr parser_output_;
  ::google::protobuf::int64 timestamp_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Robots : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.Robots) */ {
 public:
  Robots();
  virtual ~Robots();

  Robots(const Robots& from);

  inline Robots& operator=(const Robots& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Robots(Robots&& from) noexcept
    : Robots() {
    *this = ::std::move(from);
  }

  inline Robots& operator=(Robots&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robots& default_instance();

  static inline const Robots* internal_default_instance() {
    return reinterpret_cast<const Robots*>(
               &_Robots_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Robots* other);
  friend void swap(Robots& a, Robots& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Robots* New() const PROTOBUF_FINAL { return New(NULL); }

  Robots* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Robots& from);
  void MergeFrom(const Robots& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Robots* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes robots_txt = 1;
  bool has_robots_txt() const;
  void clear_robots_txt();
  static const int kRobotsTxtFieldNumber = 1;
  const ::std::string& robots_txt() const;
  void set_robots_txt(const ::std::string& value);
  #if LANG_CXX11
  void set_robots_txt(::std::string&& value);
  #endif
  void set_robots_txt(const char* value);
  void set_robots_txt(const void* value, size_t size);
  ::std::string* mutable_robots_txt();
  ::std::string* release_robots_txt();
  void set_allocated_robots_txt(::std::string* robots_txt);

  // optional bytes robots_txt_www = 2;
  bool has_robots_txt_www() const;
  void clear_robots_txt_www();
  static const int kRobotsTxtWwwFieldNumber = 2;
  const ::std::string& robots_txt_www() const;
  void set_robots_txt_www(const ::std::string& value);
  #if LANG_CXX11
  void set_robots_txt_www(::std::string&& value);
  #endif
  void set_robots_txt_www(const char* value);
  void set_robots_txt_www(const void* value, size_t size);
  ::std::string* mutable_robots_txt_www();
  ::std::string* release_robots_txt_www();
  void set_allocated_robots_txt_www(::std::string* robots_txt_www);

  // optional bytes robots_txt_https = 3;
  bool has_robots_txt_https() const;
  void clear_robots_txt_https();
  static const int kRobotsTxtHttpsFieldNumber = 3;
  const ::std::string& robots_txt_https() const;
  void set_robots_txt_https(const ::std::string& value);
  #if LANG_CXX11
  void set_robots_txt_https(::std::string&& value);
  #endif
  void set_robots_txt_https(const char* value);
  void set_robots_txt_https(const void* value, size_t size);
  ::std::string* mutable_robots_txt_https();
  ::std::string* release_robots_txt_https();
  void set_allocated_robots_txt_https(::std::string* robots_txt_https);

  // optional bytes robots_txt_https_www = 4;
  bool has_robots_txt_https_www() const;
  void clear_robots_txt_https_www();
  static const int kRobotsTxtHttpsWwwFieldNumber = 4;
  const ::std::string& robots_txt_https_www() const;
  void set_robots_txt_https_www(const ::std::string& value);
  #if LANG_CXX11
  void set_robots_txt_https_www(::std::string&& value);
  #endif
  void set_robots_txt_https_www(const char* value);
  void set_robots_txt_https_www(const void* value, size_t size);
  ::std::string* mutable_robots_txt_https_www();
  ::std::string* release_robots_txt_https_www();
  void set_allocated_robots_txt_https_www(::std::string* robots_txt_https_www);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.Robots)
 private:
  void set_has_robots_txt();
  void clear_has_robots_txt();
  void set_has_robots_txt_www();
  void clear_has_robots_txt_www();
  void set_has_robots_txt_https();
  void clear_has_robots_txt_https();
  void set_has_robots_txt_https_www();
  void clear_has_robots_txt_https_www();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr robots_txt_;
  ::google::protobuf::internal::ArenaStringPtr robots_txt_www_;
  ::google::protobuf::internal::ArenaStringPtr robots_txt_https_;
  ::google::protobuf::internal::ArenaStringPtr robots_txt_https_www_;
  friend struct protobuf_webmaster_5fblobs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FetcherData

// optional .ru.mail.go.webbase.blobs.CrawlDetails current_status = 1;
inline bool FetcherData::has_current_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetcherData::set_has_current_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetcherData::clear_has_current_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetcherData::clear_current_status() {
  if (current_status_ != NULL) current_status_->::ru::mail::go::webbase::blobs::CrawlDetails::Clear();
  clear_has_current_status();
}
inline const ::ru::mail::go::webbase::blobs::CrawlDetails& FetcherData::current_status() const {
  const ::ru::mail::go::webbase::blobs::CrawlDetails* p = current_status_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.current_status)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CrawlDetails*>(
      &::ru::mail::go::webbase::blobs::_CrawlDetails_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::CrawlDetails* FetcherData::mutable_current_status() {
  set_has_current_status();
  if (current_status_ == NULL) {
    current_status_ = new ::ru::mail::go::webbase::blobs::CrawlDetails;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetcherData.current_status)
  return current_status_;
}
inline ::ru::mail::go::webbase::blobs::CrawlDetails* FetcherData::release_current_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetcherData.current_status)
  clear_has_current_status();
  ::ru::mail::go::webbase::blobs::CrawlDetails* temp = current_status_;
  current_status_ = NULL;
  return temp;
}
inline void FetcherData::set_allocated_current_status(::ru::mail::go::webbase::blobs::CrawlDetails* current_status) {
  delete current_status_;
  current_status_ = current_status;
  if (current_status) {
    set_has_current_status();
  } else {
    clear_has_current_status();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetcherData.current_status)
}

// optional bool disabled_by_robots = 2;
inline bool FetcherData::has_disabled_by_robots() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FetcherData::set_has_disabled_by_robots() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FetcherData::clear_has_disabled_by_robots() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FetcherData::clear_disabled_by_robots() {
  disabled_by_robots_ = false;
  clear_has_disabled_by_robots();
}
inline bool FetcherData::disabled_by_robots() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.disabled_by_robots)
  return disabled_by_robots_;
}
inline void FetcherData::set_disabled_by_robots(bool value) {
  set_has_disabled_by_robots();
  disabled_by_robots_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.disabled_by_robots)
}

// optional string redirect = 3;
inline bool FetcherData::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetcherData::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetcherData::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetcherData::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& FetcherData::redirect() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.redirect)
  return redirect_.GetNoArena();
}
inline void FetcherData::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.redirect)
}
#if LANG_CXX11
inline void FetcherData::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetcherData.redirect)
}
#endif
inline void FetcherData::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetcherData.redirect)
}
inline void FetcherData::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetcherData.redirect)
}
inline ::std::string* FetcherData::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetcherData.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetcherData::release_redirect() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetcherData.redirect)
  clear_has_redirect();
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetcherData::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetcherData.redirect)
}

// optional int64 index_time = 4;
inline bool FetcherData::has_index_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FetcherData::set_has_index_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FetcherData::clear_has_index_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FetcherData::clear_index_time() {
  index_time_ = GOOGLE_LONGLONG(0);
  clear_has_index_time();
}
inline ::google::protobuf::int64 FetcherData::index_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.index_time)
  return index_time_;
}
inline void FetcherData::set_index_time(::google::protobuf::int64 value) {
  set_has_index_time();
  index_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.index_time)
}

// optional string full_url = 5;
inline bool FetcherData::has_full_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetcherData::set_has_full_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetcherData::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetcherData::clear_full_url() {
  full_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_url();
}
inline const ::std::string& FetcherData::full_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.full_url)
  return full_url_.GetNoArena();
}
inline void FetcherData::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.full_url)
}
#if LANG_CXX11
inline void FetcherData::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetcherData.full_url)
}
#endif
inline void FetcherData::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetcherData.full_url)
}
inline void FetcherData::set_full_url(const char* value, size_t size) {
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetcherData.full_url)
}
inline ::std::string* FetcherData::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetcherData.full_url)
  return full_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetcherData::release_full_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetcherData.full_url)
  clear_has_full_url();
  return full_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetcherData::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetcherData.full_url)
}

// optional int64 first_index_time = 6;
inline bool FetcherData::has_first_index_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FetcherData::set_has_first_index_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FetcherData::clear_has_first_index_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FetcherData::clear_first_index_time() {
  first_index_time_ = GOOGLE_LONGLONG(0);
  clear_has_first_index_time();
}
inline ::google::protobuf::int64 FetcherData::first_index_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.first_index_time)
  return first_index_time_;
}
inline void FetcherData::set_first_index_time(::google::protobuf::int64 value) {
  set_has_first_index_time();
  first_index_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.first_index_time)
}

// optional int64 first_crawl_time = 7;
inline bool FetcherData::has_first_crawl_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FetcherData::set_has_first_crawl_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FetcherData::clear_has_first_crawl_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FetcherData::clear_first_crawl_time() {
  first_crawl_time_ = GOOGLE_LONGLONG(0);
  clear_has_first_crawl_time();
}
inline ::google::protobuf::int64 FetcherData::first_crawl_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.first_crawl_time)
  return first_crawl_time_;
}
inline void FetcherData::set_first_crawl_time(::google::protobuf::int64 value) {
  set_has_first_crawl_time();
  first_crawl_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.first_crawl_time)
}

// optional .ru.mail.go.webbase.blobs.ContentType content_type = 8;
inline bool FetcherData::has_content_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FetcherData::set_has_content_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FetcherData::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FetcherData::clear_content_type() {
  content_type_ = 0;
  clear_has_content_type();
}
inline ::ru::mail::go::webbase::blobs::ContentType FetcherData::content_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.content_type)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(content_type_);
}
inline void FetcherData::set_content_type(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.content_type)
}

// optional bool should_be_indexed = 9;
inline bool FetcherData::has_should_be_indexed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FetcherData::set_has_should_be_indexed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FetcherData::clear_has_should_be_indexed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FetcherData::clear_should_be_indexed() {
  should_be_indexed_ = false;
  clear_has_should_be_indexed();
}
inline bool FetcherData::should_be_indexed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetcherData.should_be_indexed)
  return should_be_indexed_;
}
inline void FetcherData::set_should_be_indexed(bool value) {
  set_has_should_be_indexed();
  should_be_indexed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetcherData.should_be_indexed)
}

// -------------------------------------------------------------------

// RankingData

// optional int64 BRSQ = 1 [default = 0];
inline bool RankingData::has_brsq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankingData::set_has_brsq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankingData::clear_has_brsq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankingData::clear_brsq() {
  brsq_ = GOOGLE_LONGLONG(0);
  clear_has_brsq();
}
inline ::google::protobuf::int64 RankingData::brsq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RankingData.BRSQ)
  return brsq_;
}
inline void RankingData::set_brsq(::google::protobuf::int64 value) {
  set_has_brsq();
  brsq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RankingData.BRSQ)
}

// optional double BRV = 2 [default = 0];
inline bool RankingData::has_brv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankingData::set_has_brv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankingData::clear_has_brv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankingData::clear_brv() {
  brv_ = 0;
  clear_has_brv();
}
inline double RankingData::brv() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RankingData.BRV)
  return brv_;
}
inline void RankingData::set_brv(double value) {
  set_has_brv();
  brv_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RankingData.BRV)
}

// optional int64 URUQ = 3 [default = 0];
inline bool RankingData::has_uruq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankingData::set_has_uruq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankingData::clear_has_uruq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankingData::clear_uruq() {
  uruq_ = GOOGLE_LONGLONG(0);
  clear_has_uruq();
}
inline ::google::protobuf::int64 RankingData::uruq() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RankingData.URUQ)
  return uruq_;
}
inline void RankingData::set_uruq(::google::protobuf::int64 value) {
  set_has_uruq();
  uruq_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RankingData.URUQ)
}

// -------------------------------------------------------------------

// Link

// required string from = 1;
inline bool Link::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Link::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Link::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Link::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& Link::from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Link.from)
  return from_.GetNoArena();
}
inline void Link::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Link.from)
}
#if LANG_CXX11
inline void Link::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Link.from)
}
#endif
inline void Link::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Link.from)
}
inline void Link::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Link.from)
}
inline ::std::string* Link::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Link.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_from() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Link.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Link.from)
}

// optional string text = 2;
inline bool Link::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Link::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Link::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Link::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Link::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Link.text)
  return text_.GetNoArena();
}
inline void Link::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Link.text)
}
#if LANG_CXX11
inline void Link::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Link.text)
}
#endif
inline void Link::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Link.text)
}
inline void Link::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Link.text)
}
inline ::std::string* Link::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Link.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Link.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Link.text)
}

// optional double rank = 3 [default = 0];
inline bool Link::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Link::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Link::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Link::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline double Link::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Link.rank)
  return rank_;
}
inline void Link::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Link.rank)
}

// optional uint32 count = 4 [default = 1];
inline bool Link::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Link::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Link::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Link::clear_count() {
  count_ = 1u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Link::count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Link.count)
  return count_;
}
inline void Link::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Link.count)
}

// -------------------------------------------------------------------

// LinksData

// optional int32 backlinks_count = 1 [default = 0];
inline bool LinksData::has_backlinks_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinksData::set_has_backlinks_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinksData::clear_has_backlinks_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinksData::clear_backlinks_count() {
  backlinks_count_ = 0;
  clear_has_backlinks_count();
}
inline ::google::protobuf::int32 LinksData::backlinks_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.backlinks_count)
  return backlinks_count_;
}
inline void LinksData::set_backlinks_count(::google::protobuf::int32 value) {
  set_has_backlinks_count();
  backlinks_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LinksData.backlinks_count)
}

// optional int32 unique_texts_count = 2 [default = 0];
inline bool LinksData::has_unique_texts_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinksData::set_has_unique_texts_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinksData::clear_has_unique_texts_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinksData::clear_unique_texts_count() {
  unique_texts_count_ = 0;
  clear_has_unique_texts_count();
}
inline ::google::protobuf::int32 LinksData::unique_texts_count() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.unique_texts_count)
  return unique_texts_count_;
}
inline void LinksData::set_unique_texts_count(::google::protobuf::int32 value) {
  set_has_unique_texts_count();
  unique_texts_count_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LinksData.unique_texts_count)
}

// repeated .ru.mail.go.webbase.blobs.Link url_backlinks = 3;
inline int LinksData::url_backlinks_size() const {
  return url_backlinks_.size();
}
inline void LinksData::clear_url_backlinks() {
  url_backlinks_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::Link& LinksData::url_backlinks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return url_backlinks_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::Link* LinksData::mutable_url_backlinks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return url_backlinks_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::Link* LinksData::add_url_backlinks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return url_backlinks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
LinksData::mutable_url_backlinks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return &url_backlinks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
LinksData::url_backlinks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.LinksData.url_backlinks)
  return url_backlinks_;
}

// repeated .ru.mail.go.webbase.blobs.Link site_backlinks = 4;
inline int LinksData::site_backlinks_size() const {
  return site_backlinks_.size();
}
inline void LinksData::clear_site_backlinks() {
  site_backlinks_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::Link& LinksData::site_backlinks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return site_backlinks_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::Link* LinksData::mutable_site_backlinks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return site_backlinks_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::Link* LinksData::add_site_backlinks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return site_backlinks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
LinksData::mutable_site_backlinks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return &site_backlinks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
LinksData::site_backlinks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.LinksData.site_backlinks)
  return site_backlinks_;
}

// repeated .ru.mail.go.webbase.blobs.Link back_redirects = 5;
inline int LinksData::back_redirects_size() const {
  return back_redirects_.size();
}
inline void LinksData::clear_back_redirects() {
  back_redirects_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::Link& LinksData::back_redirects(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return back_redirects_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::Link* LinksData::mutable_back_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return back_redirects_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::Link* LinksData::add_back_redirects() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return back_redirects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >*
LinksData::mutable_back_redirects() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return &back_redirects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Link >&
LinksData::back_redirects() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.LinksData.back_redirects)
  return back_redirects_;
}

// -------------------------------------------------------------------

// QuerySession

// optional int64 date = 1;
inline bool QuerySession::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuerySession::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuerySession::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuerySession::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::int64 QuerySession::date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.date)
  return date_;
}
inline void QuerySession::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.date)
}

// optional int32 views = 2;
inline bool QuerySession::has_views() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuerySession::set_has_views() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuerySession::clear_has_views() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuerySession::clear_views() {
  views_ = 0;
  clear_has_views();
}
inline ::google::protobuf::int32 QuerySession::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.views)
  return views_;
}
inline void QuerySession::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.views)
}

// optional int32 clicks = 3;
inline bool QuerySession::has_clicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuerySession::set_has_clicks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuerySession::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuerySession::clear_clicks() {
  clicks_ = 0;
  clear_has_clicks();
}
inline ::google::protobuf::int32 QuerySession::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.clicks)
  return clicks_;
}
inline void QuerySession::set_clicks(::google::protobuf::int32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.clicks)
}

// optional double avg_position = 4;
inline bool QuerySession::has_avg_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuerySession::set_has_avg_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuerySession::clear_has_avg_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuerySession::clear_avg_position() {
  avg_position_ = 0;
  clear_has_avg_position();
}
inline double QuerySession::avg_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.avg_position)
  return avg_position_;
}
inline void QuerySession::set_avg_position(double value) {
  set_has_avg_position();
  avg_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.avg_position)
}

// optional int32 min_position = 5;
inline bool QuerySession::has_min_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuerySession::set_has_min_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuerySession::clear_has_min_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuerySession::clear_min_position() {
  min_position_ = 0;
  clear_has_min_position();
}
inline ::google::protobuf::int32 QuerySession::min_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.min_position)
  return min_position_;
}
inline void QuerySession::set_min_position(::google::protobuf::int32 value) {
  set_has_min_position();
  min_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.min_position)
}

// optional int32 max_position = 6;
inline bool QuerySession::has_max_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuerySession::set_has_max_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuerySession::clear_has_max_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuerySession::clear_max_position() {
  max_position_ = 0;
  clear_has_max_position();
}
inline ::google::protobuf::int32 QuerySession::max_position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.max_position)
  return max_position_;
}
inline void QuerySession::set_max_position(::google::protobuf::int32 value) {
  set_has_max_position();
  max_position_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.max_position)
}

// optional int64 min_ts = 7;
inline bool QuerySession::has_min_ts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QuerySession::set_has_min_ts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QuerySession::clear_has_min_ts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QuerySession::clear_min_ts() {
  min_ts_ = GOOGLE_LONGLONG(0);
  clear_has_min_ts();
}
inline ::google::protobuf::int64 QuerySession::min_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.min_ts)
  return min_ts_;
}
inline void QuerySession::set_min_ts(::google::protobuf::int64 value) {
  set_has_min_ts();
  min_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.min_ts)
}

// optional int64 max_ts = 8;
inline bool QuerySession::has_max_ts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QuerySession::set_has_max_ts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QuerySession::clear_has_max_ts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QuerySession::clear_max_ts() {
  max_ts_ = GOOGLE_LONGLONG(0);
  clear_has_max_ts();
}
inline ::google::protobuf::int64 QuerySession::max_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.max_ts)
  return max_ts_;
}
inline void QuerySession::set_max_ts(::google::protobuf::int64 value) {
  set_has_max_ts();
  max_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.max_ts)
}

// optional int32 shows = 9;
inline bool QuerySession::has_shows() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QuerySession::set_has_shows() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QuerySession::clear_has_shows() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QuerySession::clear_shows() {
  shows_ = 0;
  clear_has_shows();
}
inline ::google::protobuf::int32 QuerySession::shows() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.shows)
  return shows_;
}
inline void QuerySession::set_shows(::google::protobuf::int32 value) {
  set_has_shows();
  shows_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.shows)
}

// optional int32 last_clicks = 10;
inline bool QuerySession::has_last_clicks() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QuerySession::set_has_last_clicks() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QuerySession::clear_has_last_clicks() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QuerySession::clear_last_clicks() {
  last_clicks_ = 0;
  clear_has_last_clicks();
}
inline ::google::protobuf::int32 QuerySession::last_clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QuerySession.last_clicks)
  return last_clicks_;
}
inline void QuerySession::set_last_clicks(::google::protobuf::int32 value) {
  set_has_last_clicks();
  last_clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QuerySession.last_clicks)
}

// -------------------------------------------------------------------

// QueryInfo

// required string text = 1;
inline bool QueryInfo::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryInfo::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryInfo::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryInfo::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& QueryInfo::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.text)
  return text_.GetNoArena();
}
inline void QueryInfo::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.text)
}
#if LANG_CXX11
inline void QueryInfo::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.QueryInfo.text)
}
#endif
inline void QueryInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.QueryInfo.text)
}
inline void QueryInfo::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.QueryInfo.text)
}
inline ::std::string* QueryInfo::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QueryInfo.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryInfo::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.QueryInfo.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryInfo::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.QueryInfo.text)
}

// repeated .ru.mail.go.webbase.blobs.QuerySession sessions = 2;
inline int QueryInfo::sessions_size() const {
  return sessions_.size();
}
inline void QueryInfo::clear_sessions() {
  sessions_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::QuerySession& QueryInfo::sessions(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return sessions_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::QuerySession* QueryInfo::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return sessions_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::QuerySession* QueryInfo::add_sessions() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QuerySession >*
QueryInfo::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return &sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QuerySession >&
QueryInfo::sessions() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.QueryInfo.sessions)
  return sessions_;
}

// optional double attractability = 3;
inline bool QueryInfo::has_attractability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryInfo::set_has_attractability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryInfo::clear_has_attractability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryInfo::clear_attractability() {
  attractability_ = 0;
  clear_has_attractability();
}
inline double QueryInfo::attractability() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.attractability)
  return attractability_;
}
inline void QueryInfo::set_attractability(double value) {
  set_has_attractability();
  attractability_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.attractability)
}

// optional double satisfactibility = 4;
inline bool QueryInfo::has_satisfactibility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryInfo::set_has_satisfactibility() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryInfo::clear_has_satisfactibility() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryInfo::clear_satisfactibility() {
  satisfactibility_ = 0;
  clear_has_satisfactibility();
}
inline double QueryInfo::satisfactibility() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.satisfactibility)
  return satisfactibility_;
}
inline void QueryInfo::set_satisfactibility(double value) {
  set_has_satisfactibility();
  satisfactibility_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.satisfactibility)
}

// optional int32 users = 5;
inline bool QueryInfo::has_users() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryInfo::set_has_users() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryInfo::clear_has_users() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryInfo::clear_users() {
  users_ = 0;
  clear_has_users();
}
inline ::google::protobuf::int32 QueryInfo::users() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.users)
  return users_;
}
inline void QueryInfo::set_users(::google::protobuf::int32 value) {
  set_has_users();
  users_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.users)
}

// optional double actuality = 6;
inline bool QueryInfo::has_actuality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryInfo::set_has_actuality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryInfo::clear_has_actuality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryInfo::clear_actuality() {
  actuality_ = 0;
  clear_has_actuality();
}
inline double QueryInfo::actuality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryInfo.actuality)
  return actuality_;
}
inline void QueryInfo::set_actuality(double value) {
  set_has_actuality();
  actuality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryInfo.actuality)
}

// -------------------------------------------------------------------

// GeoQueryInfo

// required int32 geo_code = 1;
inline bool GeoQueryInfo::has_geo_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoQueryInfo::set_has_geo_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoQueryInfo::clear_has_geo_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoQueryInfo::clear_geo_code() {
  geo_code_ = 0;
  clear_has_geo_code();
}
inline ::google::protobuf::int32 GeoQueryInfo::geo_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GeoQueryInfo.geo_code)
  return geo_code_;
}
inline void GeoQueryInfo::set_geo_code(::google::protobuf::int32 value) {
  set_has_geo_code();
  geo_code_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.GeoQueryInfo.geo_code)
}

// repeated .ru.mail.go.webbase.blobs.QueryInfo queries = 2;
inline int GeoQueryInfo::queries_size() const {
  return queries_.size();
}
inline void GeoQueryInfo::clear_queries() {
  queries_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::QueryInfo& GeoQueryInfo::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return queries_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::QueryInfo* GeoQueryInfo::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return queries_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::QueryInfo* GeoQueryInfo::add_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return queries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryInfo >*
GeoQueryInfo::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return &queries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryInfo >&
GeoQueryInfo::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.GeoQueryInfo.queries)
  return queries_;
}

// -------------------------------------------------------------------

// QueryData

// repeated .ru.mail.go.webbase.blobs.GeoQueryInfo geo_queries = 1;
inline int QueryData::geo_queries_size() const {
  return geo_queries_.size();
}
inline void QueryData::clear_geo_queries() {
  geo_queries_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::GeoQueryInfo& QueryData::geo_queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return geo_queries_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::GeoQueryInfo* QueryData::mutable_geo_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return geo_queries_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::GeoQueryInfo* QueryData::add_geo_queries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return geo_queries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GeoQueryInfo >*
QueryData::mutable_geo_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return &geo_queries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::GeoQueryInfo >&
QueryData::geo_queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.QueryData.geo_queries)
  return geo_queries_;
}

// -------------------------------------------------------------------

// DailyQueryData

// repeated .ru.mail.go.webbase.blobs.QueryData query_data = 1;
inline int DailyQueryData::query_data_size() const {
  return query_data_.size();
}
inline void DailyQueryData::clear_query_data() {
  query_data_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::QueryData& DailyQueryData::query_data(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return query_data_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::QueryData* DailyQueryData::mutable_query_data(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return query_data_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::QueryData* DailyQueryData::add_query_data() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return query_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryData >*
DailyQueryData::mutable_query_data() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return &query_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryData >&
DailyQueryData::query_data() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.DailyQueryData.query_data)
  return query_data_;
}

// -------------------------------------------------------------------

// SekiteiQuotaData

// required string description = 1;
inline bool SekiteiQuotaData::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SekiteiQuotaData::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SekiteiQuotaData::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SekiteiQuotaData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& SekiteiQuotaData::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
  return description_.GetNoArena();
}
inline void SekiteiQuotaData::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}
#if LANG_CXX11
inline void SekiteiQuotaData::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}
#endif
inline void SekiteiQuotaData::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}
inline void SekiteiQuotaData::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}
inline ::std::string* SekiteiQuotaData::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SekiteiQuotaData::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SekiteiQuotaData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SekiteiQuotaData.description)
}

// required int32 maxQuota = 2;
inline bool SekiteiQuotaData::has_maxquota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SekiteiQuotaData::set_has_maxquota() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SekiteiQuotaData::clear_has_maxquota() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SekiteiQuotaData::clear_maxquota() {
  maxquota_ = 0;
  clear_has_maxquota();
}
inline ::google::protobuf::int32 SekiteiQuotaData::maxquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SekiteiQuotaData.maxQuota)
  return maxquota_;
}
inline void SekiteiQuotaData::set_maxquota(::google::protobuf::int32 value) {
  set_has_maxquota();
  maxquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SekiteiQuotaData.maxQuota)
}

// required int32 urlsInQuota = 3;
inline bool SekiteiQuotaData::has_urlsinquota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SekiteiQuotaData::set_has_urlsinquota() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SekiteiQuotaData::clear_has_urlsinquota() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SekiteiQuotaData::clear_urlsinquota() {
  urlsinquota_ = 0;
  clear_has_urlsinquota();
}
inline ::google::protobuf::int32 SekiteiQuotaData::urlsinquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SekiteiQuotaData.urlsInQuota)
  return urlsinquota_;
}
inline void SekiteiQuotaData::set_urlsinquota(::google::protobuf::int32 value) {
  set_has_urlsinquota();
  urlsinquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SekiteiQuotaData.urlsInQuota)
}

// -------------------------------------------------------------------

// SiteData

// optional int32 maxQuota = 1;
inline bool SiteData::has_maxquota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiteData::set_has_maxquota() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiteData::clear_has_maxquota() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiteData::clear_maxquota() {
  maxquota_ = 0;
  clear_has_maxquota();
}
inline ::google::protobuf::int32 SiteData::maxquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteData.maxQuota)
  return maxquota_;
}
inline void SiteData::set_maxquota(::google::protobuf::int32 value) {
  set_has_maxquota();
  maxquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiteData.maxQuota)
}

// optional int32 urlsInQuota = 2;
inline bool SiteData::has_urlsinquota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiteData::set_has_urlsinquota() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiteData::clear_has_urlsinquota() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiteData::clear_urlsinquota() {
  urlsinquota_ = 0;
  clear_has_urlsinquota();
}
inline ::google::protobuf::int32 SiteData::urlsinquota() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteData.urlsInQuota)
  return urlsinquota_;
}
inline void SiteData::set_urlsinquota(::google::protobuf::int32 value) {
  set_has_urlsinquota();
  urlsinquota_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiteData.urlsInQuota)
}

// repeated .ru.mail.go.webbase.blobs.SekiteiQuotaData sekiteiQuota = 3;
inline int SiteData::sekiteiquota_size() const {
  return sekiteiquota_.size();
}
inline void SiteData::clear_sekiteiquota() {
  sekiteiquota_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SekiteiQuotaData& SiteData::sekiteiquota(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return sekiteiquota_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SekiteiQuotaData* SiteData::mutable_sekiteiquota(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return sekiteiquota_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SekiteiQuotaData* SiteData::add_sekiteiquota() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return sekiteiquota_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SekiteiQuotaData >*
SiteData::mutable_sekiteiquota() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return &sekiteiquota_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SekiteiQuotaData >&
SiteData::sekiteiquota() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiteData.sekiteiQuota)
  return sekiteiquota_;
}

// optional bool isBanned = 4;
inline bool SiteData::has_isbanned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiteData::set_has_isbanned() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiteData::clear_has_isbanned() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiteData::clear_isbanned() {
  isbanned_ = false;
  clear_has_isbanned();
}
inline bool SiteData::isbanned() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteData.isBanned)
  return isbanned_;
}
inline void SiteData::set_isbanned(bool value) {
  set_has_isbanned();
  isbanned_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiteData.isBanned)
}

// -------------------------------------------------------------------

// Result

// required string url = 1;
inline bool Result::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Result::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.url)
  return url_.GetNoArena();
}
inline void Result::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Result.url)
}
#if LANG_CXX11
inline void Result::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Result.url)
}
#endif
inline void Result::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Result.url)
}
inline void Result::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Result.url)
}
inline ::std::string* Result::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.url)
}

// required .ru.mail.go.webbase.blobs.FetcherData fetcher_data = 2;
inline bool Result::has_fetcher_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_fetcher_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_fetcher_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_fetcher_data() {
  if (fetcher_data_ != NULL) fetcher_data_->::ru::mail::go::webbase::blobs::FetcherData::Clear();
  clear_has_fetcher_data();
}
inline const ::ru::mail::go::webbase::blobs::FetcherData& Result::fetcher_data() const {
  const ::ru::mail::go::webbase::blobs::FetcherData* p = fetcher_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.fetcher_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FetcherData*>(
      &::ru::mail::go::webbase::blobs::_FetcherData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::FetcherData* Result::mutable_fetcher_data() {
  set_has_fetcher_data();
  if (fetcher_data_ == NULL) {
    fetcher_data_ = new ::ru::mail::go::webbase::blobs::FetcherData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.fetcher_data)
  return fetcher_data_;
}
inline ::ru::mail::go::webbase::blobs::FetcherData* Result::release_fetcher_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.fetcher_data)
  clear_has_fetcher_data();
  ::ru::mail::go::webbase::blobs::FetcherData* temp = fetcher_data_;
  fetcher_data_ = NULL;
  return temp;
}
inline void Result::set_allocated_fetcher_data(::ru::mail::go::webbase::blobs::FetcherData* fetcher_data) {
  delete fetcher_data_;
  fetcher_data_ = fetcher_data;
  if (fetcher_data) {
    set_has_fetcher_data();
  } else {
    clear_has_fetcher_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.fetcher_data)
}

// required .ru.mail.go.webbase.blobs.RankingData ranking_data = 3;
inline bool Result::has_ranking_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_ranking_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_ranking_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_ranking_data() {
  if (ranking_data_ != NULL) ranking_data_->::ru::mail::go::webbase::blobs::RankingData::Clear();
  clear_has_ranking_data();
}
inline const ::ru::mail::go::webbase::blobs::RankingData& Result::ranking_data() const {
  const ::ru::mail::go::webbase::blobs::RankingData* p = ranking_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.ranking_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::RankingData*>(
      &::ru::mail::go::webbase::blobs::_RankingData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::RankingData* Result::mutable_ranking_data() {
  set_has_ranking_data();
  if (ranking_data_ == NULL) {
    ranking_data_ = new ::ru::mail::go::webbase::blobs::RankingData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.ranking_data)
  return ranking_data_;
}
inline ::ru::mail::go::webbase::blobs::RankingData* Result::release_ranking_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.ranking_data)
  clear_has_ranking_data();
  ::ru::mail::go::webbase::blobs::RankingData* temp = ranking_data_;
  ranking_data_ = NULL;
  return temp;
}
inline void Result::set_allocated_ranking_data(::ru::mail::go::webbase::blobs::RankingData* ranking_data) {
  delete ranking_data_;
  ranking_data_ = ranking_data;
  if (ranking_data) {
    set_has_ranking_data();
  } else {
    clear_has_ranking_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.ranking_data)
}

// required .ru.mail.go.webbase.blobs.LinksData links_data = 4;
inline bool Result::has_links_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Result::set_has_links_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Result::clear_has_links_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Result::clear_links_data() {
  if (links_data_ != NULL) links_data_->::ru::mail::go::webbase::blobs::LinksData::Clear();
  clear_has_links_data();
}
inline const ::ru::mail::go::webbase::blobs::LinksData& Result::links_data() const {
  const ::ru::mail::go::webbase::blobs::LinksData* p = links_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.links_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::LinksData*>(
      &::ru::mail::go::webbase::blobs::_LinksData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::LinksData* Result::mutable_links_data() {
  set_has_links_data();
  if (links_data_ == NULL) {
    links_data_ = new ::ru::mail::go::webbase::blobs::LinksData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.links_data)
  return links_data_;
}
inline ::ru::mail::go::webbase::blobs::LinksData* Result::release_links_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.links_data)
  clear_has_links_data();
  ::ru::mail::go::webbase::blobs::LinksData* temp = links_data_;
  links_data_ = NULL;
  return temp;
}
inline void Result::set_allocated_links_data(::ru::mail::go::webbase::blobs::LinksData* links_data) {
  delete links_data_;
  links_data_ = links_data;
  if (links_data) {
    set_has_links_data();
  } else {
    clear_has_links_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.links_data)
}

// required .ru.mail.go.webbase.blobs.QueryData query_data = 5;
inline bool Result::has_query_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Result::set_has_query_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Result::clear_has_query_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Result::clear_query_data() {
  if (query_data_ != NULL) query_data_->::ru::mail::go::webbase::blobs::QueryData::Clear();
  clear_has_query_data();
}
inline const ::ru::mail::go::webbase::blobs::QueryData& Result::query_data() const {
  const ::ru::mail::go::webbase::blobs::QueryData* p = query_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.query_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::QueryData*>(
      &::ru::mail::go::webbase::blobs::_QueryData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::QueryData* Result::mutable_query_data() {
  set_has_query_data();
  if (query_data_ == NULL) {
    query_data_ = new ::ru::mail::go::webbase::blobs::QueryData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.query_data)
  return query_data_;
}
inline ::ru::mail::go::webbase::blobs::QueryData* Result::release_query_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.query_data)
  clear_has_query_data();
  ::ru::mail::go::webbase::blobs::QueryData* temp = query_data_;
  query_data_ = NULL;
  return temp;
}
inline void Result::set_allocated_query_data(::ru::mail::go::webbase::blobs::QueryData* query_data) {
  delete query_data_;
  query_data_ = query_data;
  if (query_data) {
    set_has_query_data();
  } else {
    clear_has_query_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.query_data)
}

// optional int32 pik = 6;
inline bool Result::has_pik() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Result::set_has_pik() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Result::clear_has_pik() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Result::clear_pik() {
  pik_ = 0;
  clear_has_pik();
}
inline ::google::protobuf::int32 Result::pik() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.pik)
  return pik_;
}
inline void Result::set_pik(::google::protobuf::int32 value) {
  set_has_pik();
  pik_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Result.pik)
}

// required .ru.mail.go.webbase.blobs.DailyQueryData daily_query_data = 7;
inline bool Result::has_daily_query_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Result::set_has_daily_query_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Result::clear_has_daily_query_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Result::clear_daily_query_data() {
  if (daily_query_data_ != NULL) daily_query_data_->::ru::mail::go::webbase::blobs::DailyQueryData::Clear();
  clear_has_daily_query_data();
}
inline const ::ru::mail::go::webbase::blobs::DailyQueryData& Result::daily_query_data() const {
  const ::ru::mail::go::webbase::blobs::DailyQueryData* p = daily_query_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.daily_query_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::DailyQueryData*>(
      &::ru::mail::go::webbase::blobs::_DailyQueryData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::DailyQueryData* Result::mutable_daily_query_data() {
  set_has_daily_query_data();
  if (daily_query_data_ == NULL) {
    daily_query_data_ = new ::ru::mail::go::webbase::blobs::DailyQueryData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.daily_query_data)
  return daily_query_data_;
}
inline ::ru::mail::go::webbase::blobs::DailyQueryData* Result::release_daily_query_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.daily_query_data)
  clear_has_daily_query_data();
  ::ru::mail::go::webbase::blobs::DailyQueryData* temp = daily_query_data_;
  daily_query_data_ = NULL;
  return temp;
}
inline void Result::set_allocated_daily_query_data(::ru::mail::go::webbase::blobs::DailyQueryData* daily_query_data) {
  delete daily_query_data_;
  daily_query_data_ = daily_query_data;
  if (daily_query_data) {
    set_has_daily_query_data();
  } else {
    clear_has_daily_query_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.daily_query_data)
}

// optional .ru.mail.go.webbase.blobs.SiteData site_data = 8;
inline bool Result::has_site_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Result::set_has_site_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Result::clear_has_site_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Result::clear_site_data() {
  if (site_data_ != NULL) site_data_->::ru::mail::go::webbase::blobs::SiteData::Clear();
  clear_has_site_data();
}
inline const ::ru::mail::go::webbase::blobs::SiteData& Result::site_data() const {
  const ::ru::mail::go::webbase::blobs::SiteData* p = site_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Result.site_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SiteData*>(
      &::ru::mail::go::webbase::blobs::_SiteData_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::SiteData* Result::mutable_site_data() {
  set_has_site_data();
  if (site_data_ == NULL) {
    site_data_ = new ::ru::mail::go::webbase::blobs::SiteData;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Result.site_data)
  return site_data_;
}
inline ::ru::mail::go::webbase::blobs::SiteData* Result::release_site_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Result.site_data)
  clear_has_site_data();
  ::ru::mail::go::webbase::blobs::SiteData* temp = site_data_;
  site_data_ = NULL;
  return temp;
}
inline void Result::set_allocated_site_data(::ru::mail::go::webbase::blobs::SiteData* site_data) {
  delete site_data_;
  site_data_ = site_data;
  if (site_data) {
    set_has_site_data();
  } else {
    clear_has_site_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Result.site_data)
}

// -------------------------------------------------------------------

// SqInfo

// optional string query_text = 1;
inline bool SqInfo::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SqInfo::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SqInfo::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SqInfo::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& SqInfo::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.query_text)
  return query_text_.GetNoArena();
}
inline void SqInfo::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.query_text)
}
#if LANG_CXX11
inline void SqInfo::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.query_text)
}
#endif
inline void SqInfo::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.query_text)
}
inline void SqInfo::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.query_text)
}
inline ::std::string* SqInfo::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqInfo::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqInfo::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.query_text)
}

// optional string serp_url = 2;
inline bool SqInfo::has_serp_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SqInfo::set_has_serp_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SqInfo::clear_has_serp_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SqInfo::clear_serp_url() {
  serp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serp_url();
}
inline const ::std::string& SqInfo::serp_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.serp_url)
  return serp_url_.GetNoArena();
}
inline void SqInfo::set_serp_url(const ::std::string& value) {
  set_has_serp_url();
  serp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}
#if LANG_CXX11
inline void SqInfo::set_serp_url(::std::string&& value) {
  set_has_serp_url();
  serp_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}
#endif
inline void SqInfo::set_serp_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serp_url();
  serp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}
inline void SqInfo::set_serp_url(const char* value, size_t size) {
  set_has_serp_url();
  serp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}
inline ::std::string* SqInfo::mutable_serp_url() {
  set_has_serp_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.serp_url)
  return serp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqInfo::release_serp_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.serp_url)
  clear_has_serp_url();
  return serp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqInfo::set_allocated_serp_url(::std::string* serp_url) {
  if (serp_url != NULL) {
    set_has_serp_url();
  } else {
    clear_has_serp_url();
  }
  serp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serp_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.serp_url)
}

// optional int64 timestamp = 3;
inline bool SqInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SqInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SqInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SqInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 SqInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.timestamp)
  return timestamp_;
}
inline void SqInfo::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.timestamp)
}

// optional string http_request = 4;
inline bool SqInfo::has_http_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SqInfo::set_has_http_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SqInfo::clear_has_http_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SqInfo::clear_http_request() {
  http_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_request();
}
inline const ::std::string& SqInfo::http_request() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.http_request)
  return http_request_.GetNoArena();
}
inline void SqInfo::set_http_request(const ::std::string& value) {
  set_has_http_request();
  http_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.http_request)
}
#if LANG_CXX11
inline void SqInfo::set_http_request(::std::string&& value) {
  set_has_http_request();
  http_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.http_request)
}
#endif
inline void SqInfo::set_http_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_request();
  http_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.http_request)
}
inline void SqInfo::set_http_request(const char* value, size_t size) {
  set_has_http_request();
  http_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.http_request)
}
inline ::std::string* SqInfo::mutable_http_request() {
  set_has_http_request();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.http_request)
  return http_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqInfo::release_http_request() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.http_request)
  clear_has_http_request();
  return http_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqInfo::set_allocated_http_request(::std::string* http_request) {
  if (http_request != NULL) {
    set_has_http_request();
  } else {
    clear_has_http_request();
  }
  http_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_request);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.http_request)
}

// optional string http_response = 5;
inline bool SqInfo::has_http_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SqInfo::set_has_http_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SqInfo::clear_has_http_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SqInfo::clear_http_response() {
  http_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_response();
}
inline const ::std::string& SqInfo::http_response() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.http_response)
  return http_response_.GetNoArena();
}
inline void SqInfo::set_http_response(const ::std::string& value) {
  set_has_http_response();
  http_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.http_response)
}
#if LANG_CXX11
inline void SqInfo::set_http_response(::std::string&& value) {
  set_has_http_response();
  http_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.http_response)
}
#endif
inline void SqInfo::set_http_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_response();
  http_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.http_response)
}
inline void SqInfo::set_http_response(const char* value, size_t size) {
  set_has_http_response();
  http_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.http_response)
}
inline ::std::string* SqInfo::mutable_http_response() {
  set_has_http_response();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.http_response)
  return http_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqInfo::release_http_response() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.http_response)
  clear_has_http_response();
  return http_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqInfo::set_allocated_http_response(::std::string* http_response) {
  if (http_response != NULL) {
    set_has_http_response();
  } else {
    clear_has_http_response();
  }
  http_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_response);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.http_response)
}

// optional string http_redirect = 6;
inline bool SqInfo::has_http_redirect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SqInfo::set_has_http_redirect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SqInfo::clear_has_http_redirect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SqInfo::clear_http_redirect() {
  http_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_http_redirect();
}
inline const ::std::string& SqInfo::http_redirect() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
  return http_redirect_.GetNoArena();
}
inline void SqInfo::set_http_redirect(const ::std::string& value) {
  set_has_http_redirect();
  http_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}
#if LANG_CXX11
inline void SqInfo::set_http_redirect(::std::string&& value) {
  set_has_http_redirect();
  http_redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}
#endif
inline void SqInfo::set_http_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_http_redirect();
  http_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}
inline void SqInfo::set_http_redirect(const char* value, size_t size) {
  set_has_http_redirect();
  http_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}
inline ::std::string* SqInfo::mutable_http_redirect() {
  set_has_http_redirect();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
  return http_redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqInfo::release_http_redirect() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
  clear_has_http_redirect();
  return http_redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqInfo::set_allocated_http_redirect(::std::string* http_redirect) {
  if (http_redirect != NULL) {
    set_has_http_redirect();
  } else {
    clear_has_http_redirect();
  }
  http_redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_redirect);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.http_redirect)
}

// optional bytes raw_html = 7;
inline bool SqInfo::has_raw_html() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SqInfo::set_has_raw_html() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SqInfo::clear_has_raw_html() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SqInfo::clear_raw_html() {
  raw_html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_html();
}
inline const ::std::string& SqInfo::raw_html() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.raw_html)
  return raw_html_.GetNoArena();
}
inline void SqInfo::set_raw_html(const ::std::string& value) {
  set_has_raw_html();
  raw_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}
#if LANG_CXX11
inline void SqInfo::set_raw_html(::std::string&& value) {
  set_has_raw_html();
  raw_html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}
#endif
inline void SqInfo::set_raw_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_html();
  raw_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}
inline void SqInfo::set_raw_html(const void* value, size_t size) {
  set_has_raw_html();
  raw_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}
inline ::std::string* SqInfo::mutable_raw_html() {
  set_has_raw_html();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.raw_html)
  return raw_html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqInfo::release_raw_html() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.raw_html)
  clear_has_raw_html();
  return raw_html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqInfo::set_allocated_raw_html(::std::string* raw_html) {
  if (raw_html != NULL) {
    set_has_raw_html();
  } else {
    clear_has_raw_html();
  }
  raw_html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_html);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.raw_html)
}

// optional bytes rendered_html = 8;
inline bool SqInfo::has_rendered_html() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SqInfo::set_has_rendered_html() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SqInfo::clear_has_rendered_html() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SqInfo::clear_rendered_html() {
  rendered_html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rendered_html();
}
inline const ::std::string& SqInfo::rendered_html() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
  return rendered_html_.GetNoArena();
}
inline void SqInfo::set_rendered_html(const ::std::string& value) {
  set_has_rendered_html();
  rendered_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}
#if LANG_CXX11
inline void SqInfo::set_rendered_html(::std::string&& value) {
  set_has_rendered_html();
  rendered_html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}
#endif
inline void SqInfo::set_rendered_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rendered_html();
  rendered_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}
inline void SqInfo::set_rendered_html(const void* value, size_t size) {
  set_has_rendered_html();
  rendered_html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}
inline ::std::string* SqInfo::mutable_rendered_html() {
  set_has_rendered_html();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
  return rendered_html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqInfo::release_rendered_html() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
  clear_has_rendered_html();
  return rendered_html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqInfo::set_allocated_rendered_html(::std::string* rendered_html) {
  if (rendered_html != NULL) {
    set_has_rendered_html();
  } else {
    clear_has_rendered_html();
  }
  rendered_html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rendered_html);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.rendered_html)
}

// optional string parser_output = 9;
inline bool SqInfo::has_parser_output() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SqInfo::set_has_parser_output() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SqInfo::clear_has_parser_output() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SqInfo::clear_parser_output() {
  parser_output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parser_output();
}
inline const ::std::string& SqInfo::parser_output() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SqInfo.parser_output)
  return parser_output_.GetNoArena();
}
inline void SqInfo::set_parser_output(const ::std::string& value) {
  set_has_parser_output();
  parser_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}
#if LANG_CXX11
inline void SqInfo::set_parser_output(::std::string&& value) {
  set_has_parser_output();
  parser_output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}
#endif
inline void SqInfo::set_parser_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parser_output();
  parser_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}
inline void SqInfo::set_parser_output(const char* value, size_t size) {
  set_has_parser_output();
  parser_output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}
inline ::std::string* SqInfo::mutable_parser_output() {
  set_has_parser_output();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SqInfo.parser_output)
  return parser_output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqInfo::release_parser_output() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SqInfo.parser_output)
  clear_has_parser_output();
  return parser_output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqInfo::set_allocated_parser_output(::std::string* parser_output) {
  if (parser_output != NULL) {
    set_has_parser_output();
  } else {
    clear_has_parser_output();
  }
  parser_output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parser_output);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SqInfo.parser_output)
}

// -------------------------------------------------------------------

// Robots

// optional bytes robots_txt = 1;
inline bool Robots::has_robots_txt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robots::set_has_robots_txt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robots::clear_has_robots_txt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Robots::clear_robots_txt() {
  robots_txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robots_txt();
}
inline const ::std::string& Robots::robots_txt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Robots.robots_txt)
  return robots_txt_.GetNoArena();
}
inline void Robots::set_robots_txt(const ::std::string& value) {
  set_has_robots_txt();
  robots_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Robots.robots_txt)
}
#if LANG_CXX11
inline void Robots::set_robots_txt(::std::string&& value) {
  set_has_robots_txt();
  robots_txt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Robots.robots_txt)
}
#endif
inline void Robots::set_robots_txt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robots_txt();
  robots_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Robots.robots_txt)
}
inline void Robots::set_robots_txt(const void* value, size_t size) {
  set_has_robots_txt();
  robots_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Robots.robots_txt)
}
inline ::std::string* Robots::mutable_robots_txt() {
  set_has_robots_txt();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Robots.robots_txt)
  return robots_txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Robots::release_robots_txt() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Robots.robots_txt)
  clear_has_robots_txt();
  return robots_txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Robots::set_allocated_robots_txt(::std::string* robots_txt) {
  if (robots_txt != NULL) {
    set_has_robots_txt();
  } else {
    clear_has_robots_txt();
  }
  robots_txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robots_txt);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Robots.robots_txt)
}

// optional bytes robots_txt_www = 2;
inline bool Robots::has_robots_txt_www() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robots::set_has_robots_txt_www() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robots::clear_has_robots_txt_www() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robots::clear_robots_txt_www() {
  robots_txt_www_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robots_txt_www();
}
inline const ::std::string& Robots::robots_txt_www() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
  return robots_txt_www_.GetNoArena();
}
inline void Robots::set_robots_txt_www(const ::std::string& value) {
  set_has_robots_txt_www();
  robots_txt_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}
#if LANG_CXX11
inline void Robots::set_robots_txt_www(::std::string&& value) {
  set_has_robots_txt_www();
  robots_txt_www_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}
#endif
inline void Robots::set_robots_txt_www(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robots_txt_www();
  robots_txt_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}
inline void Robots::set_robots_txt_www(const void* value, size_t size) {
  set_has_robots_txt_www();
  robots_txt_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}
inline ::std::string* Robots::mutable_robots_txt_www() {
  set_has_robots_txt_www();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
  return robots_txt_www_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Robots::release_robots_txt_www() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
  clear_has_robots_txt_www();
  return robots_txt_www_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Robots::set_allocated_robots_txt_www(::std::string* robots_txt_www) {
  if (robots_txt_www != NULL) {
    set_has_robots_txt_www();
  } else {
    clear_has_robots_txt_www();
  }
  robots_txt_www_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robots_txt_www);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Robots.robots_txt_www)
}

// optional bytes robots_txt_https = 3;
inline bool Robots::has_robots_txt_https() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robots::set_has_robots_txt_https() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robots::clear_has_robots_txt_https() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robots::clear_robots_txt_https() {
  robots_txt_https_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robots_txt_https();
}
inline const ::std::string& Robots::robots_txt_https() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
  return robots_txt_https_.GetNoArena();
}
inline void Robots::set_robots_txt_https(const ::std::string& value) {
  set_has_robots_txt_https();
  robots_txt_https_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}
#if LANG_CXX11
inline void Robots::set_robots_txt_https(::std::string&& value) {
  set_has_robots_txt_https();
  robots_txt_https_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}
#endif
inline void Robots::set_robots_txt_https(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robots_txt_https();
  robots_txt_https_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}
inline void Robots::set_robots_txt_https(const void* value, size_t size) {
  set_has_robots_txt_https();
  robots_txt_https_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}
inline ::std::string* Robots::mutable_robots_txt_https() {
  set_has_robots_txt_https();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
  return robots_txt_https_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Robots::release_robots_txt_https() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
  clear_has_robots_txt_https();
  return robots_txt_https_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Robots::set_allocated_robots_txt_https(::std::string* robots_txt_https) {
  if (robots_txt_https != NULL) {
    set_has_robots_txt_https();
  } else {
    clear_has_robots_txt_https();
  }
  robots_txt_https_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robots_txt_https);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Robots.robots_txt_https)
}

// optional bytes robots_txt_https_www = 4;
inline bool Robots::has_robots_txt_https_www() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Robots::set_has_robots_txt_https_www() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Robots::clear_has_robots_txt_https_www() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Robots::clear_robots_txt_https_www() {
  robots_txt_https_www_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robots_txt_https_www();
}
inline const ::std::string& Robots::robots_txt_https_www() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
  return robots_txt_https_www_.GetNoArena();
}
inline void Robots::set_robots_txt_https_www(const ::std::string& value) {
  set_has_robots_txt_https_www();
  robots_txt_https_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}
#if LANG_CXX11
inline void Robots::set_robots_txt_https_www(::std::string&& value) {
  set_has_robots_txt_https_www();
  robots_txt_https_www_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}
#endif
inline void Robots::set_robots_txt_https_www(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robots_txt_https_www();
  robots_txt_https_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}
inline void Robots::set_robots_txt_https_www(const void* value, size_t size) {
  set_has_robots_txt_https_www();
  robots_txt_https_www_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}
inline ::std::string* Robots::mutable_robots_txt_https_www() {
  set_has_robots_txt_https_www();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
  return robots_txt_https_www_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Robots::release_robots_txt_https_www() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
  clear_has_robots_txt_https_www();
  return robots_txt_https_www_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Robots::set_allocated_robots_txt_https_www(::std::string* robots_txt_https_www) {
  if (robots_txt_https_www != NULL) {
    set_has_robots_txt_https_www();
  } else {
    clear_has_robots_txt_https_www();
  }
  robots_txt_https_www_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robots_txt_https_www);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Robots.robots_txt_https_www)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_webmaster_5fblobs_2eproto__INCLUDED
