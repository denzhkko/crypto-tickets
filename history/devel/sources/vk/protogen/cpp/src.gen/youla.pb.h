// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youla.proto

#ifndef PROTOBUF_youla_2eproto__INCLUDED
#define PROTOBUF_youla_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class ContactsAnalysisEvent;
class ContactsAnalysisEventDefaultTypeInternal;
extern ContactsAnalysisEventDefaultTypeInternal _ContactsAnalysisEvent_default_instance_;
class Images;
class ImagesDefaultTypeInternal;
extern ImagesDefaultTypeInternal _Images_default_instance_;
class InterleavingEvent;
class InterleavingEventDefaultTypeInternal;
extern InterleavingEventDefaultTypeInternal _InterleavingEvent_default_instance_;
class LiruMapping;
class LiruMappingDefaultTypeInternal;
extern LiruMappingDefaultTypeInternal _LiruMapping_default_instance_;
class UserNotification;
class UserNotificationDefaultTypeInternal;
extern UserNotificationDefaultTypeInternal _UserNotification_default_instance_;
class UserNotificationInfo;
class UserNotificationInfoDefaultTypeInternal;
extern UserNotificationInfoDefaultTypeInternal _UserNotificationInfo_default_instance_;
class ViewsAnalysisEvent;
class ViewsAnalysisEventDefaultTypeInternal;
extern ViewsAnalysisEventDefaultTypeInternal _ViewsAnalysisEvent_default_instance_;
class YProductPartialEvent;
class YProductPartialEventDefaultTypeInternal;
extern YProductPartialEventDefaultTypeInternal _YProductPartialEvent_default_instance_;
class YoulaMixedIdEntry;
class YoulaMixedIdEntryDefaultTypeInternal;
extern YoulaMixedIdEntryDefaultTypeInternal _YoulaMixedIdEntry_default_instance_;
class YoulaMixedIdRecord;
class YoulaMixedIdRecordDefaultTypeInternal;
extern YoulaMixedIdRecordDefaultTypeInternal _YoulaMixedIdRecord_default_instance_;

namespace protobuf_youla_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_youla_2eproto

enum InterleavingEventType {
  SEARCH = 0,
  CLICK = 1,
  CONTACT = 2
};
bool InterleavingEventType_IsValid(int value);
const InterleavingEventType InterleavingEventType_MIN = SEARCH;
const InterleavingEventType InterleavingEventType_MAX = CONTACT;
const int InterleavingEventType_ARRAYSIZE = InterleavingEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InterleavingEventType_descriptor();
inline const ::std::string& InterleavingEventType_Name(InterleavingEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InterleavingEventType_descriptor(), value);
}
inline bool InterleavingEventType_Parse(
    const ::std::string& name, InterleavingEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InterleavingEventType>(
    InterleavingEventType_descriptor(), name, value);
}
enum KafkaEventSource {
  Y_SEARCHES = 0,
  Y_USER_USER_COUNTER = 1,
  Y_USER_PRODUCT_COUNTER = 2,
  Y_PRODUCTS = 3
};
bool KafkaEventSource_IsValid(int value);
const KafkaEventSource KafkaEventSource_MIN = Y_SEARCHES;
const KafkaEventSource KafkaEventSource_MAX = Y_PRODUCTS;
const int KafkaEventSource_ARRAYSIZE = KafkaEventSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* KafkaEventSource_descriptor();
inline const ::std::string& KafkaEventSource_Name(KafkaEventSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    KafkaEventSource_descriptor(), value);
}
inline bool KafkaEventSource_Parse(
    const ::std::string& name, KafkaEventSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KafkaEventSource>(
    KafkaEventSource_descriptor(), name, value);
}
// ===================================================================

class Images : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Images) */ {
 public:
  Images();
  virtual ~Images();

  Images(const Images& from);

  inline Images& operator=(const Images& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Images(Images&& from) noexcept
    : Images() {
    *this = ::std::move(from);
  }

  inline Images& operator=(Images&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Images& default_instance();

  static inline const Images* internal_default_instance() {
    return reinterpret_cast<const Images*>(
               &_Images_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Images* other);
  friend void swap(Images& a, Images& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Images* New() const PROTOBUF_FINAL { return New(NULL); }

  Images* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Images& from);
  void MergeFrom(const Images& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Images* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string images = 1;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 1;
  const ::std::string& images(int index) const;
  ::std::string* mutable_images(int index);
  void set_images(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_images(int index, ::std::string&& value);
  #endif
  void set_images(int index, const char* value);
  void set_images(int index, const char* value, size_t size);
  ::std::string* add_images();
  void add_images(const ::std::string& value);
  #if LANG_CXX11
  void add_images(::std::string&& value);
  #endif
  void add_images(const char* value);
  void add_images(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& images() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_images();

  // @@protoc_insertion_point(class_scope:Images)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> images_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YoulaMixedIdEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YoulaMixedIdEntry) */ {
 public:
  YoulaMixedIdEntry();
  virtual ~YoulaMixedIdEntry();

  YoulaMixedIdEntry(const YoulaMixedIdEntry& from);

  inline YoulaMixedIdEntry& operator=(const YoulaMixedIdEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YoulaMixedIdEntry(YoulaMixedIdEntry&& from) noexcept
    : YoulaMixedIdEntry() {
    *this = ::std::move(from);
  }

  inline YoulaMixedIdEntry& operator=(YoulaMixedIdEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoulaMixedIdEntry& default_instance();

  static inline const YoulaMixedIdEntry* internal_default_instance() {
    return reinterpret_cast<const YoulaMixedIdEntry*>(
               &_YoulaMixedIdEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(YoulaMixedIdEntry* other);
  friend void swap(YoulaMixedIdEntry& a, YoulaMixedIdEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YoulaMixedIdEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  YoulaMixedIdEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YoulaMixedIdEntry& from);
  void MergeFrom(const YoulaMixedIdEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YoulaMixedIdEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vid = 1;
  bool has_vid() const;
  void clear_vid();
  static const int kVidFieldNumber = 1;
  const ::std::string& vid() const;
  void set_vid(const ::std::string& value);
  #if LANG_CXX11
  void set_vid(::std::string&& value);
  #endif
  void set_vid(const char* value);
  void set_vid(const char* value, size_t size);
  ::std::string* mutable_vid();
  ::std::string* release_vid();
  void set_allocated_vid(::std::string* vid);

  // optional string gaid = 2;
  bool has_gaid() const;
  void clear_gaid();
  static const int kGaidFieldNumber = 2;
  const ::std::string& gaid() const;
  void set_gaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gaid(::std::string&& value);
  #endif
  void set_gaid(const char* value);
  void set_gaid(const char* value, size_t size);
  ::std::string* mutable_gaid();
  ::std::string* release_gaid();
  void set_allocated_gaid(::std::string* gaid);

  // optional string idfa = 3;
  bool has_idfa() const;
  void clear_idfa();
  static const int kIdfaFieldNumber = 3;
  const ::std::string& idfa() const;
  void set_idfa(const ::std::string& value);
  #if LANG_CXX11
  void set_idfa(::std::string&& value);
  #endif
  void set_idfa(const char* value);
  void set_idfa(const char* value, size_t size);
  ::std::string* mutable_idfa();
  ::std::string* release_idfa();
  void set_allocated_idfa(::std::string* idfa);

  // optional string uid = 5;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 5;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional string user_id = 6;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 6;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional int64 ts = 4;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 4;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:YoulaMixedIdEntry)
 private:
  void set_has_vid();
  void clear_has_vid();
  void set_has_gaid();
  void clear_has_gaid();
  void set_has_idfa();
  void clear_has_idfa();
  void set_has_ts();
  void clear_has_ts();
  void set_has_uid();
  void clear_has_uid();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vid_;
  ::google::protobuf::internal::ArenaStringPtr gaid_;
  ::google::protobuf::internal::ArenaStringPtr idfa_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::int64 ts_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YoulaMixedIdRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YoulaMixedIdRecord) */ {
 public:
  YoulaMixedIdRecord();
  virtual ~YoulaMixedIdRecord();

  YoulaMixedIdRecord(const YoulaMixedIdRecord& from);

  inline YoulaMixedIdRecord& operator=(const YoulaMixedIdRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YoulaMixedIdRecord(YoulaMixedIdRecord&& from) noexcept
    : YoulaMixedIdRecord() {
    *this = ::std::move(from);
  }

  inline YoulaMixedIdRecord& operator=(YoulaMixedIdRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoulaMixedIdRecord& default_instance();

  static inline const YoulaMixedIdRecord* internal_default_instance() {
    return reinterpret_cast<const YoulaMixedIdRecord*>(
               &_YoulaMixedIdRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(YoulaMixedIdRecord* other);
  friend void swap(YoulaMixedIdRecord& a, YoulaMixedIdRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YoulaMixedIdRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  YoulaMixedIdRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YoulaMixedIdRecord& from);
  void MergeFrom(const YoulaMixedIdRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YoulaMixedIdRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .YoulaMixedIdEntry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::YoulaMixedIdEntry& entries(int index) const;
  ::YoulaMixedIdEntry* mutable_entries(int index);
  ::YoulaMixedIdEntry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::YoulaMixedIdEntry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::YoulaMixedIdEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:YoulaMixedIdRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::YoulaMixedIdEntry > entries_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LiruMapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LiruMapping) */ {
 public:
  LiruMapping();
  virtual ~LiruMapping();

  LiruMapping(const LiruMapping& from);

  inline LiruMapping& operator=(const LiruMapping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiruMapping(LiruMapping&& from) noexcept
    : LiruMapping() {
    *this = ::std::move(from);
  }

  inline LiruMapping& operator=(LiruMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiruMapping& default_instance();

  static inline const LiruMapping* internal_default_instance() {
    return reinterpret_cast<const LiruMapping*>(
               &_LiruMapping_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LiruMapping* other);
  friend void swap(LiruMapping& a, LiruMapping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiruMapping* New() const PROTOBUF_FINAL { return New(NULL); }

  LiruMapping* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LiruMapping& from);
  void MergeFrom(const LiruMapping& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LiruMapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string liru_id = 1;
  bool has_liru_id() const;
  void clear_liru_id();
  static const int kLiruIdFieldNumber = 1;
  const ::std::string& liru_id() const;
  void set_liru_id(const ::std::string& value);
  #if LANG_CXX11
  void set_liru_id(::std::string&& value);
  #endif
  void set_liru_id(const char* value);
  void set_liru_id(const char* value, size_t size);
  ::std::string* mutable_liru_id();
  ::std::string* release_liru_id();
  void set_allocated_liru_id(::std::string* liru_id);

  // optional .YoulaMixedIdRecord youla_id = 2;
  bool has_youla_id() const;
  void clear_youla_id();
  static const int kYoulaIdFieldNumber = 2;
  const ::YoulaMixedIdRecord& youla_id() const;
  ::YoulaMixedIdRecord* mutable_youla_id();
  ::YoulaMixedIdRecord* release_youla_id();
  void set_allocated_youla_id(::YoulaMixedIdRecord* youla_id);

  // @@protoc_insertion_point(class_scope:LiruMapping)
 private:
  void set_has_liru_id();
  void clear_has_liru_id();
  void set_has_youla_id();
  void clear_has_youla_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr liru_id_;
  ::YoulaMixedIdRecord* youla_id_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserNotification) */ {
 public:
  UserNotification();
  virtual ~UserNotification();

  UserNotification(const UserNotification& from);

  inline UserNotification& operator=(const UserNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNotification(UserNotification&& from) noexcept
    : UserNotification() {
    *this = ::std::move(from);
  }

  inline UserNotification& operator=(UserNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNotification& default_instance();

  static inline const UserNotification* internal_default_instance() {
    return reinterpret_cast<const UserNotification*>(
               &_UserNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UserNotification* other);
  friend void swap(UserNotification& a, UserNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  UserNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserNotification& from);
  void MergeFrom(const UserNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tm = 1;
  bool has_tm() const;
  void clear_tm();
  static const int kTmFieldNumber = 1;
  ::google::protobuf::uint64 tm() const;
  void set_tm(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:UserNotification)
 private:
  void set_has_tm();
  void clear_has_tm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 tm_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserNotificationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserNotificationInfo) */ {
 public:
  UserNotificationInfo();
  virtual ~UserNotificationInfo();

  UserNotificationInfo(const UserNotificationInfo& from);

  inline UserNotificationInfo& operator=(const UserNotificationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserNotificationInfo(UserNotificationInfo&& from) noexcept
    : UserNotificationInfo() {
    *this = ::std::move(from);
  }

  inline UserNotificationInfo& operator=(UserNotificationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNotificationInfo& default_instance();

  static inline const UserNotificationInfo* internal_default_instance() {
    return reinterpret_cast<const UserNotificationInfo*>(
               &_UserNotificationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UserNotificationInfo* other);
  friend void swap(UserNotificationInfo& a, UserNotificationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserNotificationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserNotificationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserNotificationInfo& from);
  void MergeFrom(const UserNotificationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserNotificationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserNotification notifications = 2;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 2;
  const ::UserNotification& notifications(int index) const;
  ::UserNotification* mutable_notifications(int index);
  ::UserNotification* add_notifications();
  ::google::protobuf::RepeatedPtrField< ::UserNotification >*
      mutable_notifications();
  const ::google::protobuf::RepeatedPtrField< ::UserNotification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:UserNotificationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserNotification > notifications_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YProductPartialEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YProductPartialEvent) */ {
 public:
  YProductPartialEvent();
  virtual ~YProductPartialEvent();

  YProductPartialEvent(const YProductPartialEvent& from);

  inline YProductPartialEvent& operator=(const YProductPartialEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YProductPartialEvent(YProductPartialEvent&& from) noexcept
    : YProductPartialEvent() {
    *this = ::std::move(from);
  }

  inline YProductPartialEvent& operator=(YProductPartialEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YProductPartialEvent& default_instance();

  static inline const YProductPartialEvent* internal_default_instance() {
    return reinterpret_cast<const YProductPartialEvent*>(
               &_YProductPartialEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(YProductPartialEvent* other);
  friend void swap(YProductPartialEvent& a, YProductPartialEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YProductPartialEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  YProductPartialEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YProductPartialEvent& from);
  void MergeFrom(const YProductPartialEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YProductPartialEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string product_id = 1;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // optional string owner_id = 2;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  const ::std::string& owner_id() const;
  void set_owner_id(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_id(::std::string&& value);
  #endif
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  ::std::string* mutable_owner_id();
  ::std::string* release_owner_id();
  void set_allocated_owner_id(::std::string* owner_id);

  // optional string category_id = 3;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 3;
  const ::std::string& category_id() const;
  void set_category_id(const ::std::string& value);
  #if LANG_CXX11
  void set_category_id(::std::string&& value);
  #endif
  void set_category_id(const char* value);
  void set_category_id(const char* value, size_t size);
  ::std::string* mutable_category_id();
  ::std::string* release_category_id();
  void set_allocated_category_id(::std::string* category_id);

  // optional string subcategory_id = 4;
  bool has_subcategory_id() const;
  void clear_subcategory_id();
  static const int kSubcategoryIdFieldNumber = 4;
  const ::std::string& subcategory_id() const;
  void set_subcategory_id(const ::std::string& value);
  #if LANG_CXX11
  void set_subcategory_id(::std::string&& value);
  #endif
  void set_subcategory_id(const char* value);
  void set_subcategory_id(const char* value, size_t size);
  ::std::string* mutable_subcategory_id();
  ::std::string* release_subcategory_id();
  void set_allocated_subcategory_id(::std::string* subcategory_id);

  // optional string city_id = 5;
  bool has_city_id() const;
  void clear_city_id();
  static const int kCityIdFieldNumber = 5;
  const ::std::string& city_id() const;
  void set_city_id(const ::std::string& value);
  #if LANG_CXX11
  void set_city_id(::std::string&& value);
  #endif
  void set_city_id(const char* value);
  void set_city_id(const char* value, size_t size);
  ::std::string* mutable_city_id();
  ::std::string* release_city_id();
  void set_allocated_city_id(::std::string* city_id);

  // optional string region_id = 6;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 6;
  const ::std::string& region_id() const;
  void set_region_id(const ::std::string& value);
  #if LANG_CXX11
  void set_region_id(::std::string&& value);
  #endif
  void set_region_id(const char* value);
  void set_region_id(const char* value, size_t size);
  ::std::string* mutable_region_id();
  ::std::string* release_region_id();
  void set_allocated_region_id(::std::string* region_id);

  // optional string name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string properties = 10;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 10;
  const ::std::string& properties() const;
  void set_properties(const ::std::string& value);
  #if LANG_CXX11
  void set_properties(::std::string&& value);
  #endif
  void set_properties(const char* value);
  void set_properties(const char* value, size_t size);
  ::std::string* mutable_properties();
  ::std::string* release_properties();
  void set_allocated_properties(::std::string* properties);

  // optional string raw_json = 28;
  bool has_raw_json() const;
  void clear_raw_json();
  static const int kRawJsonFieldNumber = 28;
  const ::std::string& raw_json() const;
  void set_raw_json(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_json(::std::string&& value);
  #endif
  void set_raw_json(const char* value);
  void set_raw_json(const char* value, size_t size);
  ::std::string* mutable_raw_json();
  ::std::string* release_raw_json();
  void set_allocated_raw_json(::std::string* raw_json);

  // optional int64 name_length = 8;
  bool has_name_length() const;
  void clear_name_length();
  static const int kNameLengthFieldNumber = 8;
  ::google::protobuf::int64 name_length() const;
  void set_name_length(::google::protobuf::int64 value);

  // optional int64 desc_length = 9;
  bool has_desc_length() const;
  void clear_desc_length();
  static const int kDescLengthFieldNumber = 9;
  ::google::protobuf::int64 desc_length() const;
  void set_desc_length(::google::protobuf::int64 value);

  // optional int64 properties_num = 11;
  bool has_properties_num() const;
  void clear_properties_num();
  static const int kPropertiesNumFieldNumber = 11;
  ::google::protobuf::int64 properties_num() const;
  void set_properties_num(::google::protobuf::int64 value);

  // optional int64 price = 12;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 12;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // optional int64 images_num = 13;
  bool has_images_num() const;
  void clear_images_num();
  static const int kImagesNumFieldNumber = 13;
  ::google::protobuf::int64 images_num() const;
  void set_images_num(::google::protobuf::int64 value);

  // optional int64 date_created = 16;
  bool has_date_created() const;
  void clear_date_created();
  static const int kDateCreatedFieldNumber = 16;
  ::google::protobuf::int64 date_created() const;
  void set_date_created(::google::protobuf::int64 value);

  // optional int64 date_archived = 17;
  bool has_date_archived() const;
  void clear_date_archived();
  static const int kDateArchivedFieldNumber = 17;
  ::google::protobuf::int64 date_archived() const;
  void set_date_archived(::google::protobuf::int64 value);

  // optional int64 date_deleted = 18;
  bool has_date_deleted() const;
  void clear_date_deleted();
  static const int kDateDeletedFieldNumber = 18;
  ::google::protobuf::int64 date_deleted() const;
  void set_date_deleted(::google::protobuf::int64 value);

  // optional int64 date_blocked = 19;
  bool has_date_blocked() const;
  void clear_date_blocked();
  static const int kDateBlockedFieldNumber = 19;
  ::google::protobuf::int64 date_blocked() const;
  void set_date_blocked(::google::protobuf::int64 value);

  // optional int64 date_sold = 20;
  bool has_date_sold() const;
  void clear_date_sold();
  static const int kDateSoldFieldNumber = 20;
  ::google::protobuf::int64 date_sold() const;
  void set_date_sold(::google::protobuf::int64 value);

  // optional int64 sold_mode = 21;
  bool has_sold_mode() const;
  void clear_sold_mode();
  static const int kSoldModeFieldNumber = 21;
  ::google::protobuf::int64 sold_mode() const;
  void set_sold_mode(::google::protobuf::int64 value);

  // optional bool payment_available = 14;
  bool has_payment_available() const;
  void clear_payment_available();
  static const int kPaymentAvailableFieldNumber = 14;
  bool payment_available() const;
  void set_payment_available(bool value);

  // optional bool delivery_available = 15;
  bool has_delivery_available() const;
  void clear_delivery_available();
  static const int kDeliveryAvailableFieldNumber = 15;
  bool delivery_available() const;
  void set_delivery_available(bool value);

  // optional bool is_sold = 23;
  bool has_is_sold() const;
  void clear_is_sold();
  static const int kIsSoldFieldNumber = 23;
  bool is_sold() const;
  void set_is_sold(bool value);

  // optional bool is_archived = 24;
  bool has_is_archived() const;
  void clear_is_archived();
  static const int kIsArchivedFieldNumber = 24;
  bool is_archived() const;
  void set_is_archived(bool value);

  // optional bool is_blocked = 26;
  bool has_is_blocked() const;
  void clear_is_blocked();
  static const int kIsBlockedFieldNumber = 26;
  bool is_blocked() const;
  void set_is_blocked(bool value);

  // optional bool is_deleted = 27;
  bool has_is_deleted() const;
  void clear_is_deleted();
  static const int kIsDeletedFieldNumber = 27;
  bool is_deleted() const;
  void set_is_deleted(bool value);

  // optional int64 views_num = 22;
  bool has_views_num() const;
  void clear_views_num();
  static const int kViewsNumFieldNumber = 22;
  ::google::protobuf::int64 views_num() const;
  void set_views_num(::google::protobuf::int64 value);

  // optional int64 archive_mode = 25;
  bool has_archive_mode() const;
  void clear_archive_mode();
  static const int kArchiveModeFieldNumber = 25;
  ::google::protobuf::int64 archive_mode() const;
  void set_archive_mode(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:YProductPartialEvent)
 private:
  void set_has_product_id();
  void clear_has_product_id();
  void set_has_owner_id();
  void clear_has_owner_id();
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_subcategory_id();
  void clear_has_subcategory_id();
  void set_has_city_id();
  void clear_has_city_id();
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_name();
  void clear_has_name();
  void set_has_name_length();
  void clear_has_name_length();
  void set_has_desc_length();
  void clear_has_desc_length();
  void set_has_properties();
  void clear_has_properties();
  void set_has_properties_num();
  void clear_has_properties_num();
  void set_has_price();
  void clear_has_price();
  void set_has_images_num();
  void clear_has_images_num();
  void set_has_payment_available();
  void clear_has_payment_available();
  void set_has_delivery_available();
  void clear_has_delivery_available();
  void set_has_date_created();
  void clear_has_date_created();
  void set_has_date_archived();
  void clear_has_date_archived();
  void set_has_date_deleted();
  void clear_has_date_deleted();
  void set_has_date_blocked();
  void clear_has_date_blocked();
  void set_has_date_sold();
  void clear_has_date_sold();
  void set_has_sold_mode();
  void clear_has_sold_mode();
  void set_has_views_num();
  void clear_has_views_num();
  void set_has_is_sold();
  void clear_has_is_sold();
  void set_has_is_archived();
  void clear_has_is_archived();
  void set_has_archive_mode();
  void clear_has_archive_mode();
  void set_has_is_blocked();
  void clear_has_is_blocked();
  void set_has_is_deleted();
  void clear_has_is_deleted();
  void set_has_raw_json();
  void clear_has_raw_json();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr owner_id_;
  ::google::protobuf::internal::ArenaStringPtr category_id_;
  ::google::protobuf::internal::ArenaStringPtr subcategory_id_;
  ::google::protobuf::internal::ArenaStringPtr city_id_;
  ::google::protobuf::internal::ArenaStringPtr region_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr properties_;
  ::google::protobuf::internal::ArenaStringPtr raw_json_;
  ::google::protobuf::int64 name_length_;
  ::google::protobuf::int64 desc_length_;
  ::google::protobuf::int64 properties_num_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 images_num_;
  ::google::protobuf::int64 date_created_;
  ::google::protobuf::int64 date_archived_;
  ::google::protobuf::int64 date_deleted_;
  ::google::protobuf::int64 date_blocked_;
  ::google::protobuf::int64 date_sold_;
  ::google::protobuf::int64 sold_mode_;
  bool payment_available_;
  bool delivery_available_;
  bool is_sold_;
  bool is_archived_;
  bool is_blocked_;
  bool is_deleted_;
  ::google::protobuf::int64 views_num_;
  ::google::protobuf::int64 archive_mode_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterleavingEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InterleavingEvent) */ {
 public:
  InterleavingEvent();
  virtual ~InterleavingEvent();

  InterleavingEvent(const InterleavingEvent& from);

  inline InterleavingEvent& operator=(const InterleavingEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterleavingEvent(InterleavingEvent&& from) noexcept
    : InterleavingEvent() {
    *this = ::std::move(from);
  }

  inline InterleavingEvent& operator=(InterleavingEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterleavingEvent& default_instance();

  static inline const InterleavingEvent* internal_default_instance() {
    return reinterpret_cast<const InterleavingEvent*>(
               &_InterleavingEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(InterleavingEvent* other);
  friend void swap(InterleavingEvent& a, InterleavingEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterleavingEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  InterleavingEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InterleavingEvent& from);
  void MergeFrom(const InterleavingEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InterleavingEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string product_id = 2;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 2;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // optional .InterleavingEventType event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  ::InterleavingEventType event_type() const;
  void set_event_type(::InterleavingEventType value);

  // optional int32 split = 3;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 3;
  ::google::protobuf::int32 split() const;
  void set_split(::google::protobuf::int32 value);

  // optional bool showed_from_a = 4;
  bool has_showed_from_a() const;
  void clear_showed_from_a();
  static const int kShowedFromAFieldNumber = 4;
  bool showed_from_a() const;
  void set_showed_from_a(bool value);

  // optional int32 pos = 5;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // optional int32 distance = 6;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 6;
  ::google::protobuf::int32 distance() const;
  void set_distance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:InterleavingEvent)
 private:
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_product_id();
  void clear_has_product_id();
  void set_has_split();
  void clear_has_split();
  void set_has_showed_from_a();
  void clear_has_showed_from_a();
  void set_has_pos();
  void clear_has_pos();
  void set_has_distance();
  void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  int event_type_;
  ::google::protobuf::int32 split_;
  bool showed_from_a_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 distance_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContactsAnalysisEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContactsAnalysisEvent) */ {
 public:
  ContactsAnalysisEvent();
  virtual ~ContactsAnalysisEvent();

  ContactsAnalysisEvent(const ContactsAnalysisEvent& from);

  inline ContactsAnalysisEvent& operator=(const ContactsAnalysisEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactsAnalysisEvent(ContactsAnalysisEvent&& from) noexcept
    : ContactsAnalysisEvent() {
    *this = ::std::move(from);
  }

  inline ContactsAnalysisEvent& operator=(ContactsAnalysisEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactsAnalysisEvent& default_instance();

  static inline const ContactsAnalysisEvent* internal_default_instance() {
    return reinterpret_cast<const ContactsAnalysisEvent*>(
               &_ContactsAnalysisEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ContactsAnalysisEvent* other);
  friend void swap(ContactsAnalysisEvent& a, ContactsAnalysisEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactsAnalysisEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  ContactsAnalysisEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContactsAnalysisEvent& from);
  void MergeFrom(const ContactsAnalysisEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContactsAnalysisEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string product_id = 3;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 3;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // optional string engine = 5;
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 5;
  const ::std::string& engine() const;
  void set_engine(const ::std::string& value);
  #if LANG_CXX11
  void set_engine(::std::string&& value);
  #endif
  void set_engine(const char* value);
  void set_engine(const char* value, size_t size);
  ::std::string* mutable_engine();
  ::std::string* release_engine();
  void set_allocated_engine(::std::string* engine);

  // optional string region_id = 7;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 7;
  const ::std::string& region_id() const;
  void set_region_id(const ::std::string& value);
  #if LANG_CXX11
  void set_region_id(::std::string&& value);
  #endif
  void set_region_id(const char* value);
  void set_region_id(const char* value, size_t size);
  ::std::string* mutable_region_id();
  ::std::string* release_region_id();
  void set_allocated_region_id(::std::string* region_id);

  // optional string city_id = 8;
  bool has_city_id() const;
  void clear_city_id();
  static const int kCityIdFieldNumber = 8;
  const ::std::string& city_id() const;
  void set_city_id(const ::std::string& value);
  #if LANG_CXX11
  void set_city_id(::std::string&& value);
  #endif
  void set_city_id(const char* value);
  void set_city_id(const char* value, size_t size);
  ::std::string* mutable_city_id();
  ::std::string* release_city_id();
  void set_allocated_city_id(::std::string* city_id);

  // optional string search_type = 13;
  bool has_search_type() const;
  void clear_search_type();
  static const int kSearchTypeFieldNumber = 13;
  const ::std::string& search_type() const;
  void set_search_type(const ::std::string& value);
  #if LANG_CXX11
  void set_search_type(::std::string&& value);
  #endif
  void set_search_type(const char* value);
  void set_search_type(const char* value, size_t size);
  ::std::string* mutable_search_type();
  ::std::string* release_search_type();
  void set_allocated_search_type(::std::string* search_type);

  // optional .KafkaEventSource source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  ::KafkaEventSource source() const;
  void set_source(::KafkaEventSource value);

  // optional int32 split = 4;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 4;
  ::google::protobuf::int32 split() const;
  void set_split(::google::protobuf::int32 value);

  // optional int32 distance = 6;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 6;
  ::google::protobuf::int32 distance() const;
  void set_distance(::google::protobuf::int32 value);

  // optional int32 category_id = 9;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 9;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // optional int64 price = 11;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 11;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // optional int64 event_ts = 12;
  bool has_event_ts() const;
  void clear_event_ts();
  static const int kEventTsFieldNumber = 12;
  ::google::protobuf::int64 event_ts() const;
  void set_event_ts(::google::protobuf::int64 value);

  // optional int32 subcategory_id = 10;
  bool has_subcategory_id() const;
  void clear_subcategory_id();
  static const int kSubcategoryIdFieldNumber = 10;
  ::google::protobuf::int32 subcategory_id() const;
  void set_subcategory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ContactsAnalysisEvent)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_product_id();
  void clear_has_product_id();
  void set_has_split();
  void clear_has_split();
  void set_has_engine();
  void clear_has_engine();
  void set_has_distance();
  void clear_has_distance();
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_city_id();
  void clear_has_city_id();
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_subcategory_id();
  void clear_has_subcategory_id();
  void set_has_price();
  void clear_has_price();
  void set_has_event_ts();
  void clear_has_event_ts();
  void set_has_search_type();
  void clear_has_search_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr engine_;
  ::google::protobuf::internal::ArenaStringPtr region_id_;
  ::google::protobuf::internal::ArenaStringPtr city_id_;
  ::google::protobuf::internal::ArenaStringPtr search_type_;
  int source_;
  ::google::protobuf::int32 split_;
  ::google::protobuf::int32 distance_;
  ::google::protobuf::int32 category_id_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 event_ts_;
  ::google::protobuf::int32 subcategory_id_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ViewsAnalysisEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ViewsAnalysisEvent) */ {
 public:
  ViewsAnalysisEvent();
  virtual ~ViewsAnalysisEvent();

  ViewsAnalysisEvent(const ViewsAnalysisEvent& from);

  inline ViewsAnalysisEvent& operator=(const ViewsAnalysisEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ViewsAnalysisEvent(ViewsAnalysisEvent&& from) noexcept
    : ViewsAnalysisEvent() {
    *this = ::std::move(from);
  }

  inline ViewsAnalysisEvent& operator=(ViewsAnalysisEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewsAnalysisEvent& default_instance();

  static inline const ViewsAnalysisEvent* internal_default_instance() {
    return reinterpret_cast<const ViewsAnalysisEvent*>(
               &_ViewsAnalysisEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ViewsAnalysisEvent* other);
  friend void swap(ViewsAnalysisEvent& a, ViewsAnalysisEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViewsAnalysisEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  ViewsAnalysisEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ViewsAnalysisEvent& from);
  void MergeFrom(const ViewsAnalysisEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ViewsAnalysisEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string product_id = 3;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 3;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // optional string search_type = 5;
  bool has_search_type() const;
  void clear_search_type();
  static const int kSearchTypeFieldNumber = 5;
  const ::std::string& search_type() const;
  void set_search_type(const ::std::string& value);
  #if LANG_CXX11
  void set_search_type(::std::string&& value);
  #endif
  void set_search_type(const char* value);
  void set_search_type(const char* value, size_t size);
  ::std::string* mutable_search_type();
  ::std::string* release_search_type();
  void set_allocated_search_type(::std::string* search_type);

  // optional string region_id = 6;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 6;
  const ::std::string& region_id() const;
  void set_region_id(const ::std::string& value);
  #if LANG_CXX11
  void set_region_id(::std::string&& value);
  #endif
  void set_region_id(const char* value);
  void set_region_id(const char* value, size_t size);
  ::std::string* mutable_region_id();
  ::std::string* release_region_id();
  void set_allocated_region_id(::std::string* region_id);

  // optional string city_id = 7;
  bool has_city_id() const;
  void clear_city_id();
  static const int kCityIdFieldNumber = 7;
  const ::std::string& city_id() const;
  void set_city_id(const ::std::string& value);
  #if LANG_CXX11
  void set_city_id(::std::string&& value);
  #endif
  void set_city_id(const char* value);
  void set_city_id(const char* value, size_t size);
  ::std::string* mutable_city_id();
  ::std::string* release_city_id();
  void set_allocated_city_id(::std::string* city_id);

  // optional .KafkaEventSource source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  ::KafkaEventSource source() const;
  void set_source(::KafkaEventSource value);

  // optional int32 split = 4;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 4;
  ::google::protobuf::int32 split() const;
  void set_split(::google::protobuf::int32 value);

  // optional int32 category_id = 8;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 8;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // optional int32 subcategory_id = 9;
  bool has_subcategory_id() const;
  void clear_subcategory_id();
  static const int kSubcategoryIdFieldNumber = 9;
  ::google::protobuf::int32 subcategory_id() const;
  void set_subcategory_id(::google::protobuf::int32 value);

  // optional int64 price = 10;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 10;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // optional int64 event_ts = 11;
  bool has_event_ts() const;
  void clear_event_ts();
  static const int kEventTsFieldNumber = 11;
  ::google::protobuf::int64 event_ts() const;
  void set_event_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ViewsAnalysisEvent)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_product_id();
  void clear_has_product_id();
  void set_has_split();
  void clear_has_split();
  void set_has_search_type();
  void clear_has_search_type();
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_city_id();
  void clear_has_city_id();
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_subcategory_id();
  void clear_has_subcategory_id();
  void set_has_price();
  void clear_has_price();
  void set_has_event_ts();
  void clear_has_event_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr search_type_;
  ::google::protobuf::internal::ArenaStringPtr region_id_;
  ::google::protobuf::internal::ArenaStringPtr city_id_;
  int source_;
  ::google::protobuf::int32 split_;
  ::google::protobuf::int32 category_id_;
  ::google::protobuf::int32 subcategory_id_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 event_ts_;
  friend struct protobuf_youla_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Images

// repeated string images = 1;
inline int Images::images_size() const {
  return images_.size();
}
inline void Images::clear_images() {
  images_.Clear();
}
inline const ::std::string& Images::images(int index) const {
  // @@protoc_insertion_point(field_get:Images.images)
  return images_.Get(index);
}
inline ::std::string* Images::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:Images.images)
  return images_.Mutable(index);
}
inline void Images::set_images(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Images.images)
  images_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Images::set_images(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Images.images)
  images_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Images::set_images(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Images.images)
}
inline void Images::set_images(int index, const char* value, size_t size) {
  images_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Images.images)
}
inline ::std::string* Images::add_images() {
  // @@protoc_insertion_point(field_add_mutable:Images.images)
  return images_.Add();
}
inline void Images::add_images(const ::std::string& value) {
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Images.images)
}
#if LANG_CXX11
inline void Images::add_images(::std::string&& value) {
  images_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Images.images)
}
#endif
inline void Images::add_images(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Images.images)
}
inline void Images::add_images(const char* value, size_t size) {
  images_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Images.images)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Images::images() const {
  // @@protoc_insertion_point(field_list:Images.images)
  return images_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Images::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:Images.images)
  return &images_;
}

// -------------------------------------------------------------------

// YoulaMixedIdEntry

// optional string vid = 1;
inline bool YoulaMixedIdEntry::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoulaMixedIdEntry::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoulaMixedIdEntry::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoulaMixedIdEntry::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
inline const ::std::string& YoulaMixedIdEntry::vid() const {
  // @@protoc_insertion_point(field_get:YoulaMixedIdEntry.vid)
  return vid_.GetNoArena();
}
inline void YoulaMixedIdEntry::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YoulaMixedIdEntry.vid)
}
#if LANG_CXX11
inline void YoulaMixedIdEntry::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YoulaMixedIdEntry.vid)
}
#endif
inline void YoulaMixedIdEntry::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YoulaMixedIdEntry.vid)
}
inline void YoulaMixedIdEntry::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YoulaMixedIdEntry.vid)
}
inline ::std::string* YoulaMixedIdEntry::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:YoulaMixedIdEntry.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YoulaMixedIdEntry::release_vid() {
  // @@protoc_insertion_point(field_release:YoulaMixedIdEntry.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YoulaMixedIdEntry::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:YoulaMixedIdEntry.vid)
}

// optional string gaid = 2;
inline bool YoulaMixedIdEntry::has_gaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoulaMixedIdEntry::set_has_gaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoulaMixedIdEntry::clear_has_gaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoulaMixedIdEntry::clear_gaid() {
  gaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gaid();
}
inline const ::std::string& YoulaMixedIdEntry::gaid() const {
  // @@protoc_insertion_point(field_get:YoulaMixedIdEntry.gaid)
  return gaid_.GetNoArena();
}
inline void YoulaMixedIdEntry::set_gaid(const ::std::string& value) {
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YoulaMixedIdEntry.gaid)
}
#if LANG_CXX11
inline void YoulaMixedIdEntry::set_gaid(::std::string&& value) {
  set_has_gaid();
  gaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YoulaMixedIdEntry.gaid)
}
#endif
inline void YoulaMixedIdEntry::set_gaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YoulaMixedIdEntry.gaid)
}
inline void YoulaMixedIdEntry::set_gaid(const char* value, size_t size) {
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YoulaMixedIdEntry.gaid)
}
inline ::std::string* YoulaMixedIdEntry::mutable_gaid() {
  set_has_gaid();
  // @@protoc_insertion_point(field_mutable:YoulaMixedIdEntry.gaid)
  return gaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YoulaMixedIdEntry::release_gaid() {
  // @@protoc_insertion_point(field_release:YoulaMixedIdEntry.gaid)
  clear_has_gaid();
  return gaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YoulaMixedIdEntry::set_allocated_gaid(::std::string* gaid) {
  if (gaid != NULL) {
    set_has_gaid();
  } else {
    clear_has_gaid();
  }
  gaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gaid);
  // @@protoc_insertion_point(field_set_allocated:YoulaMixedIdEntry.gaid)
}

// optional string idfa = 3;
inline bool YoulaMixedIdEntry::has_idfa() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YoulaMixedIdEntry::set_has_idfa() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YoulaMixedIdEntry::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YoulaMixedIdEntry::clear_idfa() {
  idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idfa();
}
inline const ::std::string& YoulaMixedIdEntry::idfa() const {
  // @@protoc_insertion_point(field_get:YoulaMixedIdEntry.idfa)
  return idfa_.GetNoArena();
}
inline void YoulaMixedIdEntry::set_idfa(const ::std::string& value) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YoulaMixedIdEntry.idfa)
}
#if LANG_CXX11
inline void YoulaMixedIdEntry::set_idfa(::std::string&& value) {
  set_has_idfa();
  idfa_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YoulaMixedIdEntry.idfa)
}
#endif
inline void YoulaMixedIdEntry::set_idfa(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YoulaMixedIdEntry.idfa)
}
inline void YoulaMixedIdEntry::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YoulaMixedIdEntry.idfa)
}
inline ::std::string* YoulaMixedIdEntry::mutable_idfa() {
  set_has_idfa();
  // @@protoc_insertion_point(field_mutable:YoulaMixedIdEntry.idfa)
  return idfa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YoulaMixedIdEntry::release_idfa() {
  // @@protoc_insertion_point(field_release:YoulaMixedIdEntry.idfa)
  clear_has_idfa();
  return idfa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YoulaMixedIdEntry::set_allocated_idfa(::std::string* idfa) {
  if (idfa != NULL) {
    set_has_idfa();
  } else {
    clear_has_idfa();
  }
  idfa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idfa);
  // @@protoc_insertion_point(field_set_allocated:YoulaMixedIdEntry.idfa)
}

// optional int64 ts = 4;
inline bool YoulaMixedIdEntry::has_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YoulaMixedIdEntry::set_has_ts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YoulaMixedIdEntry::clear_has_ts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YoulaMixedIdEntry::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::int64 YoulaMixedIdEntry::ts() const {
  // @@protoc_insertion_point(field_get:YoulaMixedIdEntry.ts)
  return ts_;
}
inline void YoulaMixedIdEntry::set_ts(::google::protobuf::int64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:YoulaMixedIdEntry.ts)
}

// optional string uid = 5;
inline bool YoulaMixedIdEntry::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YoulaMixedIdEntry::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YoulaMixedIdEntry::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YoulaMixedIdEntry::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& YoulaMixedIdEntry::uid() const {
  // @@protoc_insertion_point(field_get:YoulaMixedIdEntry.uid)
  return uid_.GetNoArena();
}
inline void YoulaMixedIdEntry::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YoulaMixedIdEntry.uid)
}
#if LANG_CXX11
inline void YoulaMixedIdEntry::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YoulaMixedIdEntry.uid)
}
#endif
inline void YoulaMixedIdEntry::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YoulaMixedIdEntry.uid)
}
inline void YoulaMixedIdEntry::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YoulaMixedIdEntry.uid)
}
inline ::std::string* YoulaMixedIdEntry::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:YoulaMixedIdEntry.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YoulaMixedIdEntry::release_uid() {
  // @@protoc_insertion_point(field_release:YoulaMixedIdEntry.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YoulaMixedIdEntry::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:YoulaMixedIdEntry.uid)
}

// optional string user_id = 6;
inline bool YoulaMixedIdEntry::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YoulaMixedIdEntry::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YoulaMixedIdEntry::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YoulaMixedIdEntry::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YoulaMixedIdEntry::user_id() const {
  // @@protoc_insertion_point(field_get:YoulaMixedIdEntry.user_id)
  return user_id_.GetNoArena();
}
inline void YoulaMixedIdEntry::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YoulaMixedIdEntry.user_id)
}
#if LANG_CXX11
inline void YoulaMixedIdEntry::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YoulaMixedIdEntry.user_id)
}
#endif
inline void YoulaMixedIdEntry::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YoulaMixedIdEntry.user_id)
}
inline void YoulaMixedIdEntry::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YoulaMixedIdEntry.user_id)
}
inline ::std::string* YoulaMixedIdEntry::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YoulaMixedIdEntry.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YoulaMixedIdEntry::release_user_id() {
  // @@protoc_insertion_point(field_release:YoulaMixedIdEntry.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YoulaMixedIdEntry::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YoulaMixedIdEntry.user_id)
}

// -------------------------------------------------------------------

// YoulaMixedIdRecord

// repeated .YoulaMixedIdEntry entries = 1;
inline int YoulaMixedIdRecord::entries_size() const {
  return entries_.size();
}
inline void YoulaMixedIdRecord::clear_entries() {
  entries_.Clear();
}
inline const ::YoulaMixedIdEntry& YoulaMixedIdRecord::entries(int index) const {
  // @@protoc_insertion_point(field_get:YoulaMixedIdRecord.entries)
  return entries_.Get(index);
}
inline ::YoulaMixedIdEntry* YoulaMixedIdRecord::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:YoulaMixedIdRecord.entries)
  return entries_.Mutable(index);
}
inline ::YoulaMixedIdEntry* YoulaMixedIdRecord::add_entries() {
  // @@protoc_insertion_point(field_add:YoulaMixedIdRecord.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::YoulaMixedIdEntry >*
YoulaMixedIdRecord::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:YoulaMixedIdRecord.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::YoulaMixedIdEntry >&
YoulaMixedIdRecord::entries() const {
  // @@protoc_insertion_point(field_list:YoulaMixedIdRecord.entries)
  return entries_;
}

// -------------------------------------------------------------------

// LiruMapping

// optional string liru_id = 1;
inline bool LiruMapping::has_liru_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiruMapping::set_has_liru_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiruMapping::clear_has_liru_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiruMapping::clear_liru_id() {
  liru_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_liru_id();
}
inline const ::std::string& LiruMapping::liru_id() const {
  // @@protoc_insertion_point(field_get:LiruMapping.liru_id)
  return liru_id_.GetNoArena();
}
inline void LiruMapping::set_liru_id(const ::std::string& value) {
  set_has_liru_id();
  liru_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LiruMapping.liru_id)
}
#if LANG_CXX11
inline void LiruMapping::set_liru_id(::std::string&& value) {
  set_has_liru_id();
  liru_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LiruMapping.liru_id)
}
#endif
inline void LiruMapping::set_liru_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_liru_id();
  liru_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LiruMapping.liru_id)
}
inline void LiruMapping::set_liru_id(const char* value, size_t size) {
  set_has_liru_id();
  liru_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LiruMapping.liru_id)
}
inline ::std::string* LiruMapping::mutable_liru_id() {
  set_has_liru_id();
  // @@protoc_insertion_point(field_mutable:LiruMapping.liru_id)
  return liru_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiruMapping::release_liru_id() {
  // @@protoc_insertion_point(field_release:LiruMapping.liru_id)
  clear_has_liru_id();
  return liru_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiruMapping::set_allocated_liru_id(::std::string* liru_id) {
  if (liru_id != NULL) {
    set_has_liru_id();
  } else {
    clear_has_liru_id();
  }
  liru_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), liru_id);
  // @@protoc_insertion_point(field_set_allocated:LiruMapping.liru_id)
}

// optional .YoulaMixedIdRecord youla_id = 2;
inline bool LiruMapping::has_youla_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiruMapping::set_has_youla_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiruMapping::clear_has_youla_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiruMapping::clear_youla_id() {
  if (youla_id_ != NULL) youla_id_->::YoulaMixedIdRecord::Clear();
  clear_has_youla_id();
}
inline const ::YoulaMixedIdRecord& LiruMapping::youla_id() const {
  const ::YoulaMixedIdRecord* p = youla_id_;
  // @@protoc_insertion_point(field_get:LiruMapping.youla_id)
  return p != NULL ? *p : *reinterpret_cast<const ::YoulaMixedIdRecord*>(
      &::_YoulaMixedIdRecord_default_instance_);
}
inline ::YoulaMixedIdRecord* LiruMapping::mutable_youla_id() {
  set_has_youla_id();
  if (youla_id_ == NULL) {
    youla_id_ = new ::YoulaMixedIdRecord;
  }
  // @@protoc_insertion_point(field_mutable:LiruMapping.youla_id)
  return youla_id_;
}
inline ::YoulaMixedIdRecord* LiruMapping::release_youla_id() {
  // @@protoc_insertion_point(field_release:LiruMapping.youla_id)
  clear_has_youla_id();
  ::YoulaMixedIdRecord* temp = youla_id_;
  youla_id_ = NULL;
  return temp;
}
inline void LiruMapping::set_allocated_youla_id(::YoulaMixedIdRecord* youla_id) {
  delete youla_id_;
  youla_id_ = youla_id;
  if (youla_id) {
    set_has_youla_id();
  } else {
    clear_has_youla_id();
  }
  // @@protoc_insertion_point(field_set_allocated:LiruMapping.youla_id)
}

// -------------------------------------------------------------------

// UserNotification

// optional uint64 tm = 1;
inline bool UserNotification::has_tm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNotification::set_has_tm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNotification::clear_has_tm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNotification::clear_tm() {
  tm_ = GOOGLE_ULONGLONG(0);
  clear_has_tm();
}
inline ::google::protobuf::uint64 UserNotification::tm() const {
  // @@protoc_insertion_point(field_get:UserNotification.tm)
  return tm_;
}
inline void UserNotification::set_tm(::google::protobuf::uint64 value) {
  set_has_tm();
  tm_ = value;
  // @@protoc_insertion_point(field_set:UserNotification.tm)
}

// -------------------------------------------------------------------

// UserNotificationInfo

// repeated .UserNotification notifications = 2;
inline int UserNotificationInfo::notifications_size() const {
  return notifications_.size();
}
inline void UserNotificationInfo::clear_notifications() {
  notifications_.Clear();
}
inline const ::UserNotification& UserNotificationInfo::notifications(int index) const {
  // @@protoc_insertion_point(field_get:UserNotificationInfo.notifications)
  return notifications_.Get(index);
}
inline ::UserNotification* UserNotificationInfo::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:UserNotificationInfo.notifications)
  return notifications_.Mutable(index);
}
inline ::UserNotification* UserNotificationInfo::add_notifications() {
  // @@protoc_insertion_point(field_add:UserNotificationInfo.notifications)
  return notifications_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::UserNotification >*
UserNotificationInfo::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:UserNotificationInfo.notifications)
  return &notifications_;
}
inline const ::google::protobuf::RepeatedPtrField< ::UserNotification >&
UserNotificationInfo::notifications() const {
  // @@protoc_insertion_point(field_list:UserNotificationInfo.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// YProductPartialEvent

// optional string product_id = 1;
inline bool YProductPartialEvent::has_product_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YProductPartialEvent::set_has_product_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YProductPartialEvent::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YProductPartialEvent::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_id();
}
inline const ::std::string& YProductPartialEvent::product_id() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.product_id)
  return product_id_.GetNoArena();
}
inline void YProductPartialEvent::set_product_id(const ::std::string& value) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.product_id)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_product_id(::std::string&& value) {
  set_has_product_id();
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.product_id)
}
#endif
inline void YProductPartialEvent::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.product_id)
}
inline void YProductPartialEvent::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.product_id)
}
inline ::std::string* YProductPartialEvent::mutable_product_id() {
  set_has_product_id();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_product_id() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.product_id)
  clear_has_product_id();
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.product_id)
}

// optional string owner_id = 2;
inline bool YProductPartialEvent::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YProductPartialEvent::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YProductPartialEvent::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YProductPartialEvent::clear_owner_id() {
  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_id();
}
inline const ::std::string& YProductPartialEvent::owner_id() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.owner_id)
  return owner_id_.GetNoArena();
}
inline void YProductPartialEvent::set_owner_id(const ::std::string& value) {
  set_has_owner_id();
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.owner_id)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_owner_id(::std::string&& value) {
  set_has_owner_id();
  owner_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.owner_id)
}
#endif
inline void YProductPartialEvent::set_owner_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_owner_id();
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.owner_id)
}
inline void YProductPartialEvent::set_owner_id(const char* value, size_t size) {
  set_has_owner_id();
  owner_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.owner_id)
}
inline ::std::string* YProductPartialEvent::mutable_owner_id() {
  set_has_owner_id();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.owner_id)
  return owner_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_owner_id() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.owner_id)
  clear_has_owner_id();
  return owner_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_owner_id(::std::string* owner_id) {
  if (owner_id != NULL) {
    set_has_owner_id();
  } else {
    clear_has_owner_id();
  }
  owner_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_id);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.owner_id)
}

// optional string category_id = 3;
inline bool YProductPartialEvent::has_category_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YProductPartialEvent::set_has_category_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YProductPartialEvent::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YProductPartialEvent::clear_category_id() {
  category_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category_id();
}
inline const ::std::string& YProductPartialEvent::category_id() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.category_id)
  return category_id_.GetNoArena();
}
inline void YProductPartialEvent::set_category_id(const ::std::string& value) {
  set_has_category_id();
  category_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.category_id)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_category_id(::std::string&& value) {
  set_has_category_id();
  category_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.category_id)
}
#endif
inline void YProductPartialEvent::set_category_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category_id();
  category_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.category_id)
}
inline void YProductPartialEvent::set_category_id(const char* value, size_t size) {
  set_has_category_id();
  category_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.category_id)
}
inline ::std::string* YProductPartialEvent::mutable_category_id() {
  set_has_category_id();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.category_id)
  return category_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_category_id() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.category_id)
  clear_has_category_id();
  return category_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_category_id(::std::string* category_id) {
  if (category_id != NULL) {
    set_has_category_id();
  } else {
    clear_has_category_id();
  }
  category_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category_id);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.category_id)
}

// optional string subcategory_id = 4;
inline bool YProductPartialEvent::has_subcategory_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YProductPartialEvent::set_has_subcategory_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YProductPartialEvent::clear_has_subcategory_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YProductPartialEvent::clear_subcategory_id() {
  subcategory_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subcategory_id();
}
inline const ::std::string& YProductPartialEvent::subcategory_id() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.subcategory_id)
  return subcategory_id_.GetNoArena();
}
inline void YProductPartialEvent::set_subcategory_id(const ::std::string& value) {
  set_has_subcategory_id();
  subcategory_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.subcategory_id)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_subcategory_id(::std::string&& value) {
  set_has_subcategory_id();
  subcategory_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.subcategory_id)
}
#endif
inline void YProductPartialEvent::set_subcategory_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subcategory_id();
  subcategory_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.subcategory_id)
}
inline void YProductPartialEvent::set_subcategory_id(const char* value, size_t size) {
  set_has_subcategory_id();
  subcategory_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.subcategory_id)
}
inline ::std::string* YProductPartialEvent::mutable_subcategory_id() {
  set_has_subcategory_id();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.subcategory_id)
  return subcategory_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_subcategory_id() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.subcategory_id)
  clear_has_subcategory_id();
  return subcategory_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_subcategory_id(::std::string* subcategory_id) {
  if (subcategory_id != NULL) {
    set_has_subcategory_id();
  } else {
    clear_has_subcategory_id();
  }
  subcategory_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subcategory_id);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.subcategory_id)
}

// optional string city_id = 5;
inline bool YProductPartialEvent::has_city_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YProductPartialEvent::set_has_city_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YProductPartialEvent::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YProductPartialEvent::clear_city_id() {
  city_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city_id();
}
inline const ::std::string& YProductPartialEvent::city_id() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.city_id)
  return city_id_.GetNoArena();
}
inline void YProductPartialEvent::set_city_id(const ::std::string& value) {
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.city_id)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_city_id(::std::string&& value) {
  set_has_city_id();
  city_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.city_id)
}
#endif
inline void YProductPartialEvent::set_city_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.city_id)
}
inline void YProductPartialEvent::set_city_id(const char* value, size_t size) {
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.city_id)
}
inline ::std::string* YProductPartialEvent::mutable_city_id() {
  set_has_city_id();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.city_id)
  return city_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_city_id() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.city_id)
  clear_has_city_id();
  return city_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_city_id(::std::string* city_id) {
  if (city_id != NULL) {
    set_has_city_id();
  } else {
    clear_has_city_id();
  }
  city_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city_id);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.city_id)
}

// optional string region_id = 6;
inline bool YProductPartialEvent::has_region_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YProductPartialEvent::set_has_region_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YProductPartialEvent::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YProductPartialEvent::clear_region_id() {
  region_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_region_id();
}
inline const ::std::string& YProductPartialEvent::region_id() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.region_id)
  return region_id_.GetNoArena();
}
inline void YProductPartialEvent::set_region_id(const ::std::string& value) {
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.region_id)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_region_id(::std::string&& value) {
  set_has_region_id();
  region_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.region_id)
}
#endif
inline void YProductPartialEvent::set_region_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.region_id)
}
inline void YProductPartialEvent::set_region_id(const char* value, size_t size) {
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.region_id)
}
inline ::std::string* YProductPartialEvent::mutable_region_id() {
  set_has_region_id();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.region_id)
  return region_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_region_id() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.region_id)
  clear_has_region_id();
  return region_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_region_id(::std::string* region_id) {
  if (region_id != NULL) {
    set_has_region_id();
  } else {
    clear_has_region_id();
  }
  region_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_id);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.region_id)
}

// optional string name = 7;
inline bool YProductPartialEvent::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YProductPartialEvent::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YProductPartialEvent::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YProductPartialEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& YProductPartialEvent::name() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.name)
  return name_.GetNoArena();
}
inline void YProductPartialEvent::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.name)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.name)
}
#endif
inline void YProductPartialEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.name)
}
inline void YProductPartialEvent::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.name)
}
inline ::std::string* YProductPartialEvent::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_name() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.name)
}

// optional int64 name_length = 8;
inline bool YProductPartialEvent::has_name_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void YProductPartialEvent::set_has_name_length() {
  _has_bits_[0] |= 0x00000200u;
}
inline void YProductPartialEvent::clear_has_name_length() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void YProductPartialEvent::clear_name_length() {
  name_length_ = GOOGLE_LONGLONG(0);
  clear_has_name_length();
}
inline ::google::protobuf::int64 YProductPartialEvent::name_length() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.name_length)
  return name_length_;
}
inline void YProductPartialEvent::set_name_length(::google::protobuf::int64 value) {
  set_has_name_length();
  name_length_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.name_length)
}

// optional int64 desc_length = 9;
inline bool YProductPartialEvent::has_desc_length() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void YProductPartialEvent::set_has_desc_length() {
  _has_bits_[0] |= 0x00000400u;
}
inline void YProductPartialEvent::clear_has_desc_length() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void YProductPartialEvent::clear_desc_length() {
  desc_length_ = GOOGLE_LONGLONG(0);
  clear_has_desc_length();
}
inline ::google::protobuf::int64 YProductPartialEvent::desc_length() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.desc_length)
  return desc_length_;
}
inline void YProductPartialEvent::set_desc_length(::google::protobuf::int64 value) {
  set_has_desc_length();
  desc_length_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.desc_length)
}

// optional string properties = 10;
inline bool YProductPartialEvent::has_properties() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YProductPartialEvent::set_has_properties() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YProductPartialEvent::clear_has_properties() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YProductPartialEvent::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_properties();
}
inline const ::std::string& YProductPartialEvent::properties() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.properties)
  return properties_.GetNoArena();
}
inline void YProductPartialEvent::set_properties(const ::std::string& value) {
  set_has_properties();
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.properties)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_properties(::std::string&& value) {
  set_has_properties();
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.properties)
}
#endif
inline void YProductPartialEvent::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_properties();
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.properties)
}
inline void YProductPartialEvent::set_properties(const char* value, size_t size) {
  set_has_properties();
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.properties)
}
inline ::std::string* YProductPartialEvent::mutable_properties() {
  set_has_properties();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_properties() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.properties)
  clear_has_properties();
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    set_has_properties();
  } else {
    clear_has_properties();
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.properties)
}

// optional int64 properties_num = 11;
inline bool YProductPartialEvent::has_properties_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void YProductPartialEvent::set_has_properties_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void YProductPartialEvent::clear_has_properties_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void YProductPartialEvent::clear_properties_num() {
  properties_num_ = GOOGLE_LONGLONG(0);
  clear_has_properties_num();
}
inline ::google::protobuf::int64 YProductPartialEvent::properties_num() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.properties_num)
  return properties_num_;
}
inline void YProductPartialEvent::set_properties_num(::google::protobuf::int64 value) {
  set_has_properties_num();
  properties_num_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.properties_num)
}

// optional int64 price = 12;
inline bool YProductPartialEvent::has_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void YProductPartialEvent::set_has_price() {
  _has_bits_[0] |= 0x00001000u;
}
inline void YProductPartialEvent::clear_has_price() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void YProductPartialEvent::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 YProductPartialEvent::price() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.price)
  return price_;
}
inline void YProductPartialEvent::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.price)
}

// optional int64 images_num = 13;
inline bool YProductPartialEvent::has_images_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void YProductPartialEvent::set_has_images_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void YProductPartialEvent::clear_has_images_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void YProductPartialEvent::clear_images_num() {
  images_num_ = GOOGLE_LONGLONG(0);
  clear_has_images_num();
}
inline ::google::protobuf::int64 YProductPartialEvent::images_num() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.images_num)
  return images_num_;
}
inline void YProductPartialEvent::set_images_num(::google::protobuf::int64 value) {
  set_has_images_num();
  images_num_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.images_num)
}

// optional bool payment_available = 14;
inline bool YProductPartialEvent::has_payment_available() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void YProductPartialEvent::set_has_payment_available() {
  _has_bits_[0] |= 0x00100000u;
}
inline void YProductPartialEvent::clear_has_payment_available() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void YProductPartialEvent::clear_payment_available() {
  payment_available_ = false;
  clear_has_payment_available();
}
inline bool YProductPartialEvent::payment_available() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.payment_available)
  return payment_available_;
}
inline void YProductPartialEvent::set_payment_available(bool value) {
  set_has_payment_available();
  payment_available_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.payment_available)
}

// optional bool delivery_available = 15;
inline bool YProductPartialEvent::has_delivery_available() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void YProductPartialEvent::set_has_delivery_available() {
  _has_bits_[0] |= 0x00200000u;
}
inline void YProductPartialEvent::clear_has_delivery_available() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void YProductPartialEvent::clear_delivery_available() {
  delivery_available_ = false;
  clear_has_delivery_available();
}
inline bool YProductPartialEvent::delivery_available() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.delivery_available)
  return delivery_available_;
}
inline void YProductPartialEvent::set_delivery_available(bool value) {
  set_has_delivery_available();
  delivery_available_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.delivery_available)
}

// optional int64 date_created = 16;
inline bool YProductPartialEvent::has_date_created() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void YProductPartialEvent::set_has_date_created() {
  _has_bits_[0] |= 0x00004000u;
}
inline void YProductPartialEvent::clear_has_date_created() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void YProductPartialEvent::clear_date_created() {
  date_created_ = GOOGLE_LONGLONG(0);
  clear_has_date_created();
}
inline ::google::protobuf::int64 YProductPartialEvent::date_created() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.date_created)
  return date_created_;
}
inline void YProductPartialEvent::set_date_created(::google::protobuf::int64 value) {
  set_has_date_created();
  date_created_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.date_created)
}

// optional int64 date_archived = 17;
inline bool YProductPartialEvent::has_date_archived() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void YProductPartialEvent::set_has_date_archived() {
  _has_bits_[0] |= 0x00008000u;
}
inline void YProductPartialEvent::clear_has_date_archived() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void YProductPartialEvent::clear_date_archived() {
  date_archived_ = GOOGLE_LONGLONG(0);
  clear_has_date_archived();
}
inline ::google::protobuf::int64 YProductPartialEvent::date_archived() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.date_archived)
  return date_archived_;
}
inline void YProductPartialEvent::set_date_archived(::google::protobuf::int64 value) {
  set_has_date_archived();
  date_archived_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.date_archived)
}

// optional int64 date_deleted = 18;
inline bool YProductPartialEvent::has_date_deleted() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void YProductPartialEvent::set_has_date_deleted() {
  _has_bits_[0] |= 0x00010000u;
}
inline void YProductPartialEvent::clear_has_date_deleted() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void YProductPartialEvent::clear_date_deleted() {
  date_deleted_ = GOOGLE_LONGLONG(0);
  clear_has_date_deleted();
}
inline ::google::protobuf::int64 YProductPartialEvent::date_deleted() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.date_deleted)
  return date_deleted_;
}
inline void YProductPartialEvent::set_date_deleted(::google::protobuf::int64 value) {
  set_has_date_deleted();
  date_deleted_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.date_deleted)
}

// optional int64 date_blocked = 19;
inline bool YProductPartialEvent::has_date_blocked() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void YProductPartialEvent::set_has_date_blocked() {
  _has_bits_[0] |= 0x00020000u;
}
inline void YProductPartialEvent::clear_has_date_blocked() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void YProductPartialEvent::clear_date_blocked() {
  date_blocked_ = GOOGLE_LONGLONG(0);
  clear_has_date_blocked();
}
inline ::google::protobuf::int64 YProductPartialEvent::date_blocked() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.date_blocked)
  return date_blocked_;
}
inline void YProductPartialEvent::set_date_blocked(::google::protobuf::int64 value) {
  set_has_date_blocked();
  date_blocked_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.date_blocked)
}

// optional int64 date_sold = 20;
inline bool YProductPartialEvent::has_date_sold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void YProductPartialEvent::set_has_date_sold() {
  _has_bits_[0] |= 0x00040000u;
}
inline void YProductPartialEvent::clear_has_date_sold() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void YProductPartialEvent::clear_date_sold() {
  date_sold_ = GOOGLE_LONGLONG(0);
  clear_has_date_sold();
}
inline ::google::protobuf::int64 YProductPartialEvent::date_sold() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.date_sold)
  return date_sold_;
}
inline void YProductPartialEvent::set_date_sold(::google::protobuf::int64 value) {
  set_has_date_sold();
  date_sold_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.date_sold)
}

// optional int64 sold_mode = 21;
inline bool YProductPartialEvent::has_sold_mode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void YProductPartialEvent::set_has_sold_mode() {
  _has_bits_[0] |= 0x00080000u;
}
inline void YProductPartialEvent::clear_has_sold_mode() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void YProductPartialEvent::clear_sold_mode() {
  sold_mode_ = GOOGLE_LONGLONG(0);
  clear_has_sold_mode();
}
inline ::google::protobuf::int64 YProductPartialEvent::sold_mode() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.sold_mode)
  return sold_mode_;
}
inline void YProductPartialEvent::set_sold_mode(::google::protobuf::int64 value) {
  set_has_sold_mode();
  sold_mode_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.sold_mode)
}

// optional int64 views_num = 22;
inline bool YProductPartialEvent::has_views_num() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void YProductPartialEvent::set_has_views_num() {
  _has_bits_[0] |= 0x04000000u;
}
inline void YProductPartialEvent::clear_has_views_num() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void YProductPartialEvent::clear_views_num() {
  views_num_ = GOOGLE_LONGLONG(0);
  clear_has_views_num();
}
inline ::google::protobuf::int64 YProductPartialEvent::views_num() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.views_num)
  return views_num_;
}
inline void YProductPartialEvent::set_views_num(::google::protobuf::int64 value) {
  set_has_views_num();
  views_num_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.views_num)
}

// optional bool is_sold = 23;
inline bool YProductPartialEvent::has_is_sold() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void YProductPartialEvent::set_has_is_sold() {
  _has_bits_[0] |= 0x00400000u;
}
inline void YProductPartialEvent::clear_has_is_sold() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void YProductPartialEvent::clear_is_sold() {
  is_sold_ = false;
  clear_has_is_sold();
}
inline bool YProductPartialEvent::is_sold() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.is_sold)
  return is_sold_;
}
inline void YProductPartialEvent::set_is_sold(bool value) {
  set_has_is_sold();
  is_sold_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.is_sold)
}

// optional bool is_archived = 24;
inline bool YProductPartialEvent::has_is_archived() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void YProductPartialEvent::set_has_is_archived() {
  _has_bits_[0] |= 0x00800000u;
}
inline void YProductPartialEvent::clear_has_is_archived() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void YProductPartialEvent::clear_is_archived() {
  is_archived_ = false;
  clear_has_is_archived();
}
inline bool YProductPartialEvent::is_archived() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.is_archived)
  return is_archived_;
}
inline void YProductPartialEvent::set_is_archived(bool value) {
  set_has_is_archived();
  is_archived_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.is_archived)
}

// optional int64 archive_mode = 25;
inline bool YProductPartialEvent::has_archive_mode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void YProductPartialEvent::set_has_archive_mode() {
  _has_bits_[0] |= 0x08000000u;
}
inline void YProductPartialEvent::clear_has_archive_mode() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void YProductPartialEvent::clear_archive_mode() {
  archive_mode_ = GOOGLE_LONGLONG(0);
  clear_has_archive_mode();
}
inline ::google::protobuf::int64 YProductPartialEvent::archive_mode() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.archive_mode)
  return archive_mode_;
}
inline void YProductPartialEvent::set_archive_mode(::google::protobuf::int64 value) {
  set_has_archive_mode();
  archive_mode_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.archive_mode)
}

// optional bool is_blocked = 26;
inline bool YProductPartialEvent::has_is_blocked() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void YProductPartialEvent::set_has_is_blocked() {
  _has_bits_[0] |= 0x01000000u;
}
inline void YProductPartialEvent::clear_has_is_blocked() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void YProductPartialEvent::clear_is_blocked() {
  is_blocked_ = false;
  clear_has_is_blocked();
}
inline bool YProductPartialEvent::is_blocked() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.is_blocked)
  return is_blocked_;
}
inline void YProductPartialEvent::set_is_blocked(bool value) {
  set_has_is_blocked();
  is_blocked_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.is_blocked)
}

// optional bool is_deleted = 27;
inline bool YProductPartialEvent::has_is_deleted() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void YProductPartialEvent::set_has_is_deleted() {
  _has_bits_[0] |= 0x02000000u;
}
inline void YProductPartialEvent::clear_has_is_deleted() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void YProductPartialEvent::clear_is_deleted() {
  is_deleted_ = false;
  clear_has_is_deleted();
}
inline bool YProductPartialEvent::is_deleted() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.is_deleted)
  return is_deleted_;
}
inline void YProductPartialEvent::set_is_deleted(bool value) {
  set_has_is_deleted();
  is_deleted_ = value;
  // @@protoc_insertion_point(field_set:YProductPartialEvent.is_deleted)
}

// optional string raw_json = 28;
inline bool YProductPartialEvent::has_raw_json() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YProductPartialEvent::set_has_raw_json() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YProductPartialEvent::clear_has_raw_json() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YProductPartialEvent::clear_raw_json() {
  raw_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_json();
}
inline const ::std::string& YProductPartialEvent::raw_json() const {
  // @@protoc_insertion_point(field_get:YProductPartialEvent.raw_json)
  return raw_json_.GetNoArena();
}
inline void YProductPartialEvent::set_raw_json(const ::std::string& value) {
  set_has_raw_json();
  raw_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YProductPartialEvent.raw_json)
}
#if LANG_CXX11
inline void YProductPartialEvent::set_raw_json(::std::string&& value) {
  set_has_raw_json();
  raw_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YProductPartialEvent.raw_json)
}
#endif
inline void YProductPartialEvent::set_raw_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_json();
  raw_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YProductPartialEvent.raw_json)
}
inline void YProductPartialEvent::set_raw_json(const char* value, size_t size) {
  set_has_raw_json();
  raw_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YProductPartialEvent.raw_json)
}
inline ::std::string* YProductPartialEvent::mutable_raw_json() {
  set_has_raw_json();
  // @@protoc_insertion_point(field_mutable:YProductPartialEvent.raw_json)
  return raw_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YProductPartialEvent::release_raw_json() {
  // @@protoc_insertion_point(field_release:YProductPartialEvent.raw_json)
  clear_has_raw_json();
  return raw_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YProductPartialEvent::set_allocated_raw_json(::std::string* raw_json) {
  if (raw_json != NULL) {
    set_has_raw_json();
  } else {
    clear_has_raw_json();
  }
  raw_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_json);
  // @@protoc_insertion_point(field_set_allocated:YProductPartialEvent.raw_json)
}

// -------------------------------------------------------------------

// InterleavingEvent

// optional .InterleavingEventType event_type = 1;
inline bool InterleavingEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InterleavingEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InterleavingEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InterleavingEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::InterleavingEventType InterleavingEvent::event_type() const {
  // @@protoc_insertion_point(field_get:InterleavingEvent.event_type)
  return static_cast< ::InterleavingEventType >(event_type_);
}
inline void InterleavingEvent::set_event_type(::InterleavingEventType value) {
  assert(::InterleavingEventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:InterleavingEvent.event_type)
}

// optional string product_id = 2;
inline bool InterleavingEvent::has_product_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InterleavingEvent::set_has_product_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InterleavingEvent::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InterleavingEvent::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_id();
}
inline const ::std::string& InterleavingEvent::product_id() const {
  // @@protoc_insertion_point(field_get:InterleavingEvent.product_id)
  return product_id_.GetNoArena();
}
inline void InterleavingEvent::set_product_id(const ::std::string& value) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InterleavingEvent.product_id)
}
#if LANG_CXX11
inline void InterleavingEvent::set_product_id(::std::string&& value) {
  set_has_product_id();
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InterleavingEvent.product_id)
}
#endif
inline void InterleavingEvent::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InterleavingEvent.product_id)
}
inline void InterleavingEvent::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InterleavingEvent.product_id)
}
inline ::std::string* InterleavingEvent::mutable_product_id() {
  set_has_product_id();
  // @@protoc_insertion_point(field_mutable:InterleavingEvent.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InterleavingEvent::release_product_id() {
  // @@protoc_insertion_point(field_release:InterleavingEvent.product_id)
  clear_has_product_id();
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InterleavingEvent::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:InterleavingEvent.product_id)
}

// optional int32 split = 3;
inline bool InterleavingEvent::has_split() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InterleavingEvent::set_has_split() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InterleavingEvent::clear_has_split() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InterleavingEvent::clear_split() {
  split_ = 0;
  clear_has_split();
}
inline ::google::protobuf::int32 InterleavingEvent::split() const {
  // @@protoc_insertion_point(field_get:InterleavingEvent.split)
  return split_;
}
inline void InterleavingEvent::set_split(::google::protobuf::int32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:InterleavingEvent.split)
}

// optional bool showed_from_a = 4;
inline bool InterleavingEvent::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InterleavingEvent::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InterleavingEvent::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InterleavingEvent::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
inline bool InterleavingEvent::showed_from_a() const {
  // @@protoc_insertion_point(field_get:InterleavingEvent.showed_from_a)
  return showed_from_a_;
}
inline void InterleavingEvent::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:InterleavingEvent.showed_from_a)
}

// optional int32 pos = 5;
inline bool InterleavingEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InterleavingEvent::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InterleavingEvent::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InterleavingEvent::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 InterleavingEvent::pos() const {
  // @@protoc_insertion_point(field_get:InterleavingEvent.pos)
  return pos_;
}
inline void InterleavingEvent::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:InterleavingEvent.pos)
}

// optional int32 distance = 6;
inline bool InterleavingEvent::has_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InterleavingEvent::set_has_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InterleavingEvent::clear_has_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InterleavingEvent::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 InterleavingEvent::distance() const {
  // @@protoc_insertion_point(field_get:InterleavingEvent.distance)
  return distance_;
}
inline void InterleavingEvent::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:InterleavingEvent.distance)
}

// -------------------------------------------------------------------

// ContactsAnalysisEvent

// optional .KafkaEventSource source = 1;
inline bool ContactsAnalysisEvent::has_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContactsAnalysisEvent::set_has_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContactsAnalysisEvent::clear_has_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContactsAnalysisEvent::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::KafkaEventSource ContactsAnalysisEvent::source() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.source)
  return static_cast< ::KafkaEventSource >(source_);
}
inline void ContactsAnalysisEvent::set_source(::KafkaEventSource value) {
  assert(::KafkaEventSource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.source)
}

// optional string user_id = 2;
inline bool ContactsAnalysisEvent::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactsAnalysisEvent::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactsAnalysisEvent::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactsAnalysisEvent::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& ContactsAnalysisEvent::user_id() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.user_id)
  return user_id_.GetNoArena();
}
inline void ContactsAnalysisEvent::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.user_id)
}
#if LANG_CXX11
inline void ContactsAnalysisEvent::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContactsAnalysisEvent.user_id)
}
#endif
inline void ContactsAnalysisEvent::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactsAnalysisEvent.user_id)
}
inline void ContactsAnalysisEvent::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactsAnalysisEvent.user_id)
}
inline ::std::string* ContactsAnalysisEvent::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:ContactsAnalysisEvent.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactsAnalysisEvent::release_user_id() {
  // @@protoc_insertion_point(field_release:ContactsAnalysisEvent.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactsAnalysisEvent::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ContactsAnalysisEvent.user_id)
}

// optional string product_id = 3;
inline bool ContactsAnalysisEvent::has_product_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactsAnalysisEvent::set_has_product_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactsAnalysisEvent::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactsAnalysisEvent::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_id();
}
inline const ::std::string& ContactsAnalysisEvent::product_id() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.product_id)
  return product_id_.GetNoArena();
}
inline void ContactsAnalysisEvent::set_product_id(const ::std::string& value) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.product_id)
}
#if LANG_CXX11
inline void ContactsAnalysisEvent::set_product_id(::std::string&& value) {
  set_has_product_id();
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContactsAnalysisEvent.product_id)
}
#endif
inline void ContactsAnalysisEvent::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactsAnalysisEvent.product_id)
}
inline void ContactsAnalysisEvent::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactsAnalysisEvent.product_id)
}
inline ::std::string* ContactsAnalysisEvent::mutable_product_id() {
  set_has_product_id();
  // @@protoc_insertion_point(field_mutable:ContactsAnalysisEvent.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactsAnalysisEvent::release_product_id() {
  // @@protoc_insertion_point(field_release:ContactsAnalysisEvent.product_id)
  clear_has_product_id();
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactsAnalysisEvent::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:ContactsAnalysisEvent.product_id)
}

// optional int32 split = 4;
inline bool ContactsAnalysisEvent::has_split() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContactsAnalysisEvent::set_has_split() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContactsAnalysisEvent::clear_has_split() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContactsAnalysisEvent::clear_split() {
  split_ = 0;
  clear_has_split();
}
inline ::google::protobuf::int32 ContactsAnalysisEvent::split() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.split)
  return split_;
}
inline void ContactsAnalysisEvent::set_split(::google::protobuf::int32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.split)
}

// optional string engine = 5;
inline bool ContactsAnalysisEvent::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactsAnalysisEvent::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactsAnalysisEvent::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactsAnalysisEvent::clear_engine() {
  engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_engine();
}
inline const ::std::string& ContactsAnalysisEvent::engine() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.engine)
  return engine_.GetNoArena();
}
inline void ContactsAnalysisEvent::set_engine(const ::std::string& value) {
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.engine)
}
#if LANG_CXX11
inline void ContactsAnalysisEvent::set_engine(::std::string&& value) {
  set_has_engine();
  engine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContactsAnalysisEvent.engine)
}
#endif
inline void ContactsAnalysisEvent::set_engine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactsAnalysisEvent.engine)
}
inline void ContactsAnalysisEvent::set_engine(const char* value, size_t size) {
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactsAnalysisEvent.engine)
}
inline ::std::string* ContactsAnalysisEvent::mutable_engine() {
  set_has_engine();
  // @@protoc_insertion_point(field_mutable:ContactsAnalysisEvent.engine)
  return engine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactsAnalysisEvent::release_engine() {
  // @@protoc_insertion_point(field_release:ContactsAnalysisEvent.engine)
  clear_has_engine();
  return engine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactsAnalysisEvent::set_allocated_engine(::std::string* engine) {
  if (engine != NULL) {
    set_has_engine();
  } else {
    clear_has_engine();
  }
  engine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), engine);
  // @@protoc_insertion_point(field_set_allocated:ContactsAnalysisEvent.engine)
}

// optional int32 distance = 6;
inline bool ContactsAnalysisEvent::has_distance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContactsAnalysisEvent::set_has_distance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContactsAnalysisEvent::clear_has_distance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContactsAnalysisEvent::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 ContactsAnalysisEvent::distance() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.distance)
  return distance_;
}
inline void ContactsAnalysisEvent::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.distance)
}

// optional string region_id = 7;
inline bool ContactsAnalysisEvent::has_region_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactsAnalysisEvent::set_has_region_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactsAnalysisEvent::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactsAnalysisEvent::clear_region_id() {
  region_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_region_id();
}
inline const ::std::string& ContactsAnalysisEvent::region_id() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.region_id)
  return region_id_.GetNoArena();
}
inline void ContactsAnalysisEvent::set_region_id(const ::std::string& value) {
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.region_id)
}
#if LANG_CXX11
inline void ContactsAnalysisEvent::set_region_id(::std::string&& value) {
  set_has_region_id();
  region_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContactsAnalysisEvent.region_id)
}
#endif
inline void ContactsAnalysisEvent::set_region_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactsAnalysisEvent.region_id)
}
inline void ContactsAnalysisEvent::set_region_id(const char* value, size_t size) {
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactsAnalysisEvent.region_id)
}
inline ::std::string* ContactsAnalysisEvent::mutable_region_id() {
  set_has_region_id();
  // @@protoc_insertion_point(field_mutable:ContactsAnalysisEvent.region_id)
  return region_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactsAnalysisEvent::release_region_id() {
  // @@protoc_insertion_point(field_release:ContactsAnalysisEvent.region_id)
  clear_has_region_id();
  return region_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactsAnalysisEvent::set_allocated_region_id(::std::string* region_id) {
  if (region_id != NULL) {
    set_has_region_id();
  } else {
    clear_has_region_id();
  }
  region_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_id);
  // @@protoc_insertion_point(field_set_allocated:ContactsAnalysisEvent.region_id)
}

// optional string city_id = 8;
inline bool ContactsAnalysisEvent::has_city_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactsAnalysisEvent::set_has_city_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactsAnalysisEvent::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactsAnalysisEvent::clear_city_id() {
  city_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city_id();
}
inline const ::std::string& ContactsAnalysisEvent::city_id() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.city_id)
  return city_id_.GetNoArena();
}
inline void ContactsAnalysisEvent::set_city_id(const ::std::string& value) {
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.city_id)
}
#if LANG_CXX11
inline void ContactsAnalysisEvent::set_city_id(::std::string&& value) {
  set_has_city_id();
  city_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContactsAnalysisEvent.city_id)
}
#endif
inline void ContactsAnalysisEvent::set_city_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactsAnalysisEvent.city_id)
}
inline void ContactsAnalysisEvent::set_city_id(const char* value, size_t size) {
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactsAnalysisEvent.city_id)
}
inline ::std::string* ContactsAnalysisEvent::mutable_city_id() {
  set_has_city_id();
  // @@protoc_insertion_point(field_mutable:ContactsAnalysisEvent.city_id)
  return city_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactsAnalysisEvent::release_city_id() {
  // @@protoc_insertion_point(field_release:ContactsAnalysisEvent.city_id)
  clear_has_city_id();
  return city_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactsAnalysisEvent::set_allocated_city_id(::std::string* city_id) {
  if (city_id != NULL) {
    set_has_city_id();
  } else {
    clear_has_city_id();
  }
  city_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city_id);
  // @@protoc_insertion_point(field_set_allocated:ContactsAnalysisEvent.city_id)
}

// optional int32 category_id = 9;
inline bool ContactsAnalysisEvent::has_category_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContactsAnalysisEvent::set_has_category_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContactsAnalysisEvent::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContactsAnalysisEvent::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 ContactsAnalysisEvent::category_id() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.category_id)
  return category_id_;
}
inline void ContactsAnalysisEvent::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.category_id)
}

// optional int32 subcategory_id = 10;
inline bool ContactsAnalysisEvent::has_subcategory_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ContactsAnalysisEvent::set_has_subcategory_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ContactsAnalysisEvent::clear_has_subcategory_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ContactsAnalysisEvent::clear_subcategory_id() {
  subcategory_id_ = 0;
  clear_has_subcategory_id();
}
inline ::google::protobuf::int32 ContactsAnalysisEvent::subcategory_id() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.subcategory_id)
  return subcategory_id_;
}
inline void ContactsAnalysisEvent::set_subcategory_id(::google::protobuf::int32 value) {
  set_has_subcategory_id();
  subcategory_id_ = value;
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.subcategory_id)
}

// optional int64 price = 11;
inline bool ContactsAnalysisEvent::has_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContactsAnalysisEvent::set_has_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContactsAnalysisEvent::clear_has_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContactsAnalysisEvent::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 ContactsAnalysisEvent::price() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.price)
  return price_;
}
inline void ContactsAnalysisEvent::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.price)
}

// optional int64 event_ts = 12;
inline bool ContactsAnalysisEvent::has_event_ts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ContactsAnalysisEvent::set_has_event_ts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ContactsAnalysisEvent::clear_has_event_ts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ContactsAnalysisEvent::clear_event_ts() {
  event_ts_ = GOOGLE_LONGLONG(0);
  clear_has_event_ts();
}
inline ::google::protobuf::int64 ContactsAnalysisEvent::event_ts() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.event_ts)
  return event_ts_;
}
inline void ContactsAnalysisEvent::set_event_ts(::google::protobuf::int64 value) {
  set_has_event_ts();
  event_ts_ = value;
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.event_ts)
}

// optional string search_type = 13;
inline bool ContactsAnalysisEvent::has_search_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactsAnalysisEvent::set_has_search_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactsAnalysisEvent::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactsAnalysisEvent::clear_search_type() {
  search_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_type();
}
inline const ::std::string& ContactsAnalysisEvent::search_type() const {
  // @@protoc_insertion_point(field_get:ContactsAnalysisEvent.search_type)
  return search_type_.GetNoArena();
}
inline void ContactsAnalysisEvent::set_search_type(const ::std::string& value) {
  set_has_search_type();
  search_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactsAnalysisEvent.search_type)
}
#if LANG_CXX11
inline void ContactsAnalysisEvent::set_search_type(::std::string&& value) {
  set_has_search_type();
  search_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContactsAnalysisEvent.search_type)
}
#endif
inline void ContactsAnalysisEvent::set_search_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_type();
  search_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactsAnalysisEvent.search_type)
}
inline void ContactsAnalysisEvent::set_search_type(const char* value, size_t size) {
  set_has_search_type();
  search_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactsAnalysisEvent.search_type)
}
inline ::std::string* ContactsAnalysisEvent::mutable_search_type() {
  set_has_search_type();
  // @@protoc_insertion_point(field_mutable:ContactsAnalysisEvent.search_type)
  return search_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactsAnalysisEvent::release_search_type() {
  // @@protoc_insertion_point(field_release:ContactsAnalysisEvent.search_type)
  clear_has_search_type();
  return search_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactsAnalysisEvent::set_allocated_search_type(::std::string* search_type) {
  if (search_type != NULL) {
    set_has_search_type();
  } else {
    clear_has_search_type();
  }
  search_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_type);
  // @@protoc_insertion_point(field_set_allocated:ContactsAnalysisEvent.search_type)
}

// -------------------------------------------------------------------

// ViewsAnalysisEvent

// optional .KafkaEventSource source = 1;
inline bool ViewsAnalysisEvent::has_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ViewsAnalysisEvent::set_has_source() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ViewsAnalysisEvent::clear_has_source() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ViewsAnalysisEvent::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::KafkaEventSource ViewsAnalysisEvent::source() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.source)
  return static_cast< ::KafkaEventSource >(source_);
}
inline void ViewsAnalysisEvent::set_source(::KafkaEventSource value) {
  assert(::KafkaEventSource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.source)
}

// optional string user_id = 2;
inline bool ViewsAnalysisEvent::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewsAnalysisEvent::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewsAnalysisEvent::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewsAnalysisEvent::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& ViewsAnalysisEvent::user_id() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.user_id)
  return user_id_.GetNoArena();
}
inline void ViewsAnalysisEvent::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.user_id)
}
#if LANG_CXX11
inline void ViewsAnalysisEvent::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ViewsAnalysisEvent.user_id)
}
#endif
inline void ViewsAnalysisEvent::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewsAnalysisEvent.user_id)
}
inline void ViewsAnalysisEvent::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewsAnalysisEvent.user_id)
}
inline ::std::string* ViewsAnalysisEvent::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:ViewsAnalysisEvent.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewsAnalysisEvent::release_user_id() {
  // @@protoc_insertion_point(field_release:ViewsAnalysisEvent.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewsAnalysisEvent::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ViewsAnalysisEvent.user_id)
}

// optional string product_id = 3;
inline bool ViewsAnalysisEvent::has_product_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewsAnalysisEvent::set_has_product_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewsAnalysisEvent::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewsAnalysisEvent::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_id();
}
inline const ::std::string& ViewsAnalysisEvent::product_id() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.product_id)
  return product_id_.GetNoArena();
}
inline void ViewsAnalysisEvent::set_product_id(const ::std::string& value) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.product_id)
}
#if LANG_CXX11
inline void ViewsAnalysisEvent::set_product_id(::std::string&& value) {
  set_has_product_id();
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ViewsAnalysisEvent.product_id)
}
#endif
inline void ViewsAnalysisEvent::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewsAnalysisEvent.product_id)
}
inline void ViewsAnalysisEvent::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewsAnalysisEvent.product_id)
}
inline ::std::string* ViewsAnalysisEvent::mutable_product_id() {
  set_has_product_id();
  // @@protoc_insertion_point(field_mutable:ViewsAnalysisEvent.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewsAnalysisEvent::release_product_id() {
  // @@protoc_insertion_point(field_release:ViewsAnalysisEvent.product_id)
  clear_has_product_id();
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewsAnalysisEvent::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:ViewsAnalysisEvent.product_id)
}

// optional int32 split = 4;
inline bool ViewsAnalysisEvent::has_split() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ViewsAnalysisEvent::set_has_split() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ViewsAnalysisEvent::clear_has_split() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ViewsAnalysisEvent::clear_split() {
  split_ = 0;
  clear_has_split();
}
inline ::google::protobuf::int32 ViewsAnalysisEvent::split() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.split)
  return split_;
}
inline void ViewsAnalysisEvent::set_split(::google::protobuf::int32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.split)
}

// optional string search_type = 5;
inline bool ViewsAnalysisEvent::has_search_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ViewsAnalysisEvent::set_has_search_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ViewsAnalysisEvent::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ViewsAnalysisEvent::clear_search_type() {
  search_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_type();
}
inline const ::std::string& ViewsAnalysisEvent::search_type() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.search_type)
  return search_type_.GetNoArena();
}
inline void ViewsAnalysisEvent::set_search_type(const ::std::string& value) {
  set_has_search_type();
  search_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.search_type)
}
#if LANG_CXX11
inline void ViewsAnalysisEvent::set_search_type(::std::string&& value) {
  set_has_search_type();
  search_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ViewsAnalysisEvent.search_type)
}
#endif
inline void ViewsAnalysisEvent::set_search_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_type();
  search_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewsAnalysisEvent.search_type)
}
inline void ViewsAnalysisEvent::set_search_type(const char* value, size_t size) {
  set_has_search_type();
  search_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewsAnalysisEvent.search_type)
}
inline ::std::string* ViewsAnalysisEvent::mutable_search_type() {
  set_has_search_type();
  // @@protoc_insertion_point(field_mutable:ViewsAnalysisEvent.search_type)
  return search_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewsAnalysisEvent::release_search_type() {
  // @@protoc_insertion_point(field_release:ViewsAnalysisEvent.search_type)
  clear_has_search_type();
  return search_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewsAnalysisEvent::set_allocated_search_type(::std::string* search_type) {
  if (search_type != NULL) {
    set_has_search_type();
  } else {
    clear_has_search_type();
  }
  search_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_type);
  // @@protoc_insertion_point(field_set_allocated:ViewsAnalysisEvent.search_type)
}

// optional string region_id = 6;
inline bool ViewsAnalysisEvent::has_region_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ViewsAnalysisEvent::set_has_region_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ViewsAnalysisEvent::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ViewsAnalysisEvent::clear_region_id() {
  region_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_region_id();
}
inline const ::std::string& ViewsAnalysisEvent::region_id() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.region_id)
  return region_id_.GetNoArena();
}
inline void ViewsAnalysisEvent::set_region_id(const ::std::string& value) {
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.region_id)
}
#if LANG_CXX11
inline void ViewsAnalysisEvent::set_region_id(::std::string&& value) {
  set_has_region_id();
  region_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ViewsAnalysisEvent.region_id)
}
#endif
inline void ViewsAnalysisEvent::set_region_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewsAnalysisEvent.region_id)
}
inline void ViewsAnalysisEvent::set_region_id(const char* value, size_t size) {
  set_has_region_id();
  region_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewsAnalysisEvent.region_id)
}
inline ::std::string* ViewsAnalysisEvent::mutable_region_id() {
  set_has_region_id();
  // @@protoc_insertion_point(field_mutable:ViewsAnalysisEvent.region_id)
  return region_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewsAnalysisEvent::release_region_id() {
  // @@protoc_insertion_point(field_release:ViewsAnalysisEvent.region_id)
  clear_has_region_id();
  return region_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewsAnalysisEvent::set_allocated_region_id(::std::string* region_id) {
  if (region_id != NULL) {
    set_has_region_id();
  } else {
    clear_has_region_id();
  }
  region_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_id);
  // @@protoc_insertion_point(field_set_allocated:ViewsAnalysisEvent.region_id)
}

// optional string city_id = 7;
inline bool ViewsAnalysisEvent::has_city_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ViewsAnalysisEvent::set_has_city_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ViewsAnalysisEvent::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ViewsAnalysisEvent::clear_city_id() {
  city_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city_id();
}
inline const ::std::string& ViewsAnalysisEvent::city_id() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.city_id)
  return city_id_.GetNoArena();
}
inline void ViewsAnalysisEvent::set_city_id(const ::std::string& value) {
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.city_id)
}
#if LANG_CXX11
inline void ViewsAnalysisEvent::set_city_id(::std::string&& value) {
  set_has_city_id();
  city_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ViewsAnalysisEvent.city_id)
}
#endif
inline void ViewsAnalysisEvent::set_city_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewsAnalysisEvent.city_id)
}
inline void ViewsAnalysisEvent::set_city_id(const char* value, size_t size) {
  set_has_city_id();
  city_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewsAnalysisEvent.city_id)
}
inline ::std::string* ViewsAnalysisEvent::mutable_city_id() {
  set_has_city_id();
  // @@protoc_insertion_point(field_mutable:ViewsAnalysisEvent.city_id)
  return city_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewsAnalysisEvent::release_city_id() {
  // @@protoc_insertion_point(field_release:ViewsAnalysisEvent.city_id)
  clear_has_city_id();
  return city_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewsAnalysisEvent::set_allocated_city_id(::std::string* city_id) {
  if (city_id != NULL) {
    set_has_city_id();
  } else {
    clear_has_city_id();
  }
  city_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city_id);
  // @@protoc_insertion_point(field_set_allocated:ViewsAnalysisEvent.city_id)
}

// optional int32 category_id = 8;
inline bool ViewsAnalysisEvent::has_category_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ViewsAnalysisEvent::set_has_category_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ViewsAnalysisEvent::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ViewsAnalysisEvent::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 ViewsAnalysisEvent::category_id() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.category_id)
  return category_id_;
}
inline void ViewsAnalysisEvent::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.category_id)
}

// optional int32 subcategory_id = 9;
inline bool ViewsAnalysisEvent::has_subcategory_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ViewsAnalysisEvent::set_has_subcategory_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ViewsAnalysisEvent::clear_has_subcategory_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ViewsAnalysisEvent::clear_subcategory_id() {
  subcategory_id_ = 0;
  clear_has_subcategory_id();
}
inline ::google::protobuf::int32 ViewsAnalysisEvent::subcategory_id() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.subcategory_id)
  return subcategory_id_;
}
inline void ViewsAnalysisEvent::set_subcategory_id(::google::protobuf::int32 value) {
  set_has_subcategory_id();
  subcategory_id_ = value;
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.subcategory_id)
}

// optional int64 price = 10;
inline bool ViewsAnalysisEvent::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ViewsAnalysisEvent::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ViewsAnalysisEvent::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ViewsAnalysisEvent::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 ViewsAnalysisEvent::price() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.price)
  return price_;
}
inline void ViewsAnalysisEvent::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.price)
}

// optional int64 event_ts = 11;
inline bool ViewsAnalysisEvent::has_event_ts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ViewsAnalysisEvent::set_has_event_ts() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ViewsAnalysisEvent::clear_has_event_ts() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ViewsAnalysisEvent::clear_event_ts() {
  event_ts_ = GOOGLE_LONGLONG(0);
  clear_has_event_ts();
}
inline ::google::protobuf::int64 ViewsAnalysisEvent::event_ts() const {
  // @@protoc_insertion_point(field_get:ViewsAnalysisEvent.event_ts)
  return event_ts_;
}
inline void ViewsAnalysisEvent::set_event_ts(::google::protobuf::int64 value) {
  set_has_event_ts();
  event_ts_ = value;
  // @@protoc_insertion_point(field_set:ViewsAnalysisEvent.event_ts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::InterleavingEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InterleavingEventType>() {
  return ::InterleavingEventType_descriptor();
}
template <> struct is_proto_enum< ::KafkaEventSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KafkaEventSource>() {
  return ::KafkaEventSource_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youla_2eproto__INCLUDED
