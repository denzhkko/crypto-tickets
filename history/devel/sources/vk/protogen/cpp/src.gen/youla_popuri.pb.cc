// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youla_popuri.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youla_popuri.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
class FiltersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Filters>
     _instance;
} _Filters_default_instance_;
class CompilationInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CompilationInfo>
     _instance;
} _CompilationInfo_default_instance_;

namespace protobuf_youla_5fpopuri_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, price_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, price_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, place_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, subcategories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, payment_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, delivery_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, free_delivery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, owner_ids_),
  3,
  4,
  0,
  1,
  2,
  5,
  6,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationInfo, query_texts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationInfo, filters_),
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(Filters)},
  { 23, 31, sizeof(CompilationInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Filters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompilationInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "youla_popuri.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Filters_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Filters_default_instance_);_CompilationInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CompilationInfo_default_instance_);_CompilationInfo_default_instance_._instance.get_mutable()->filters_ = const_cast< ::pb::Filters*>(
      ::pb::Filters::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022youla_popuri.proto\022\002pb\"\311\001\n\007Filters\022\022\n\n"
      "price_from\030\001 \001(\005\022\020\n\010price_to\030\002 \001(\005\022\020\n\010pl"
      "ace_id\030\003 \001(\t\022\025\n\rsubcategories\030\004 \001(\t\022\016\n\006p"
      "arams\030\005 \001(\t\022\031\n\021payment_available\030\006 \001(\010\022\032"
      "\n\022delivery_available\030\007 \001(\010\022\025\n\rfree_deliv"
      "ery\030\010 \001(\010\022\021\n\towner_ids\030\013 \003(\t\"P\n\017Compilat"
      "ionInfo\022\023\n\013query_texts\030\001 \003(\t\022\n\n\002id\030\002 \001(\t"
      "\022\034\n\007filters\030\003 \001(\0132\013.pb.Filters"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "youla_popuri.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_youla_5fpopuri_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filters::kPriceFromFieldNumber;
const int Filters::kPriceToFieldNumber;
const int Filters::kPlaceIdFieldNumber;
const int Filters::kSubcategoriesFieldNumber;
const int Filters::kParamsFieldNumber;
const int Filters::kPaymentAvailableFieldNumber;
const int Filters::kDeliveryAvailableFieldNumber;
const int Filters::kFreeDeliveryFieldNumber;
const int Filters::kOwnerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filters::Filters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_youla_5fpopuri_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Filters)
}
Filters::Filters(const Filters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      owner_ids_(from.owner_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  place_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_place_id()) {
    place_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_id_);
  }
  subcategories_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_subcategories()) {
    subcategories_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subcategories_);
  }
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_params()) {
    params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
  }
  ::memcpy(&price_from_, &from.price_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_delivery_) -
    reinterpret_cast<char*>(&price_from_)) + sizeof(free_delivery_));
  // @@protoc_insertion_point(copy_constructor:pb.Filters)
}

void Filters::SharedCtor() {
  _cached_size_ = 0;
  place_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subcategories_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_delivery_) -
      reinterpret_cast<char*>(&price_from_)) + sizeof(free_delivery_));
}

Filters::~Filters() {
  // @@protoc_insertion_point(destructor:pb.Filters)
  SharedDtor();
}

void Filters::SharedDtor() {
  place_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subcategories_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Filters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filters::descriptor() {
  protobuf_youla_5fpopuri_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fpopuri_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Filters& Filters::default_instance() {
  protobuf_youla_5fpopuri_2eproto::InitDefaults();
  return *internal_default_instance();
}

Filters* Filters::New(::google::protobuf::Arena* arena) const {
  Filters* n = new Filters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Filters::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Filters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!place_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*place_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!subcategories_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*subcategories_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!params_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*params_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&price_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&free_delivery_) -
        reinterpret_cast<char*>(&price_from_)) + sizeof(free_delivery_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Filters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Filters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 price_from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_price_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price_to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string place_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->place_id().data(), static_cast<int>(this->place_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.Filters.place_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subcategories = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subcategories()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subcategories().data(), static_cast<int>(this->subcategories().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.Filters.subcategories");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params().data(), static_cast<int>(this->params().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.Filters.params");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool payment_available = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_payment_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &payment_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delivery_available = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_delivery_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delivery_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool free_delivery = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_free_delivery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_delivery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string owner_ids = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_owner_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_ids(this->owner_ids_size() - 1).data(),
            static_cast<int>(this->owner_ids(this->owner_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.Filters.owner_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Filters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Filters)
  return false;
#undef DO_
}

void Filters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Filters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 price_from = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->price_from(), output);
  }

  // optional int32 price_to = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_to(), output);
  }

  // optional string place_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->place_id().data(), static_cast<int>(this->place_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Filters.place_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->place_id(), output);
  }

  // optional string subcategories = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subcategories().data(), static_cast<int>(this->subcategories().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Filters.subcategories");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->subcategories(), output);
  }

  // optional string params = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), static_cast<int>(this->params().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Filters.params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->params(), output);
  }

  // optional bool payment_available = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->payment_available(), output);
  }

  // optional bool delivery_available = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->delivery_available(), output);
  }

  // optional bool free_delivery = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->free_delivery(), output);
  }

  // repeated string owner_ids = 11;
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_ids(i).data(), static_cast<int>(this->owner_ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Filters.owner_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->owner_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Filters)
}

::google::protobuf::uint8* Filters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Filters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 price_from = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->price_from(), target);
  }

  // optional int32 price_to = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_to(), target);
  }

  // optional string place_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->place_id().data(), static_cast<int>(this->place_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Filters.place_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->place_id(), target);
  }

  // optional string subcategories = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subcategories().data(), static_cast<int>(this->subcategories().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Filters.subcategories");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->subcategories(), target);
  }

  // optional string params = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), static_cast<int>(this->params().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Filters.params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->params(), target);
  }

  // optional bool payment_available = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->payment_available(), target);
  }

  // optional bool delivery_available = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->delivery_available(), target);
  }

  // optional bool free_delivery = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->free_delivery(), target);
  }

  // repeated string owner_ids = 11;
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_ids(i).data(), static_cast<int>(this->owner_ids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Filters.owner_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->owner_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Filters)
  return target;
}

size_t Filters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Filters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string owner_ids = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->owner_ids_size());
  for (int i = 0, n = this->owner_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->owner_ids(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string place_id = 3;
    if (has_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place_id());
    }

    // optional string subcategories = 4;
    if (has_subcategories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subcategories());
    }

    // optional string params = 5;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

    // optional int32 price_from = 1;
    if (has_price_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_from());
    }

    // optional int32 price_to = 2;
    if (has_price_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_to());
    }

    // optional bool payment_available = 6;
    if (has_payment_available()) {
      total_size += 1 + 1;
    }

    // optional bool delivery_available = 7;
    if (has_delivery_available()) {
      total_size += 1 + 1;
    }

    // optional bool free_delivery = 8;
    if (has_free_delivery()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Filters)
  GOOGLE_DCHECK_NE(&from, this);
  const Filters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Filters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Filters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Filters)
    MergeFrom(*source);
  }
}

void Filters::MergeFrom(const Filters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Filters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_ids_.MergeFrom(from.owner_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_place_id();
      place_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_subcategories();
      subcategories_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subcategories_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_params();
      params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
    }
    if (cached_has_bits & 0x00000008u) {
      price_from_ = from.price_from_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_to_ = from.price_to_;
    }
    if (cached_has_bits & 0x00000020u) {
      payment_available_ = from.payment_available_;
    }
    if (cached_has_bits & 0x00000040u) {
      delivery_available_ = from.delivery_available_;
    }
    if (cached_has_bits & 0x00000080u) {
      free_delivery_ = from.free_delivery_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Filters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Filters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filters::CopyFrom(const Filters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Filters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filters::IsInitialized() const {
  return true;
}

void Filters::Swap(Filters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filters::InternalSwap(Filters* other) {
  using std::swap;
  owner_ids_.InternalSwap(&other->owner_ids_);
  place_id_.Swap(&other->place_id_);
  subcategories_.Swap(&other->subcategories_);
  params_.Swap(&other->params_);
  swap(price_from_, other->price_from_);
  swap(price_to_, other->price_to_);
  swap(payment_available_, other->payment_available_);
  swap(delivery_available_, other->delivery_available_);
  swap(free_delivery_, other->free_delivery_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Filters::GetMetadata() const {
  protobuf_youla_5fpopuri_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fpopuri_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Filters

// optional int32 price_from = 1;
bool Filters::has_price_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Filters::set_has_price_from() {
  _has_bits_[0] |= 0x00000008u;
}
void Filters::clear_has_price_from() {
  _has_bits_[0] &= ~0x00000008u;
}
void Filters::clear_price_from() {
  price_from_ = 0;
  clear_has_price_from();
}
::google::protobuf::int32 Filters::price_from() const {
  // @@protoc_insertion_point(field_get:pb.Filters.price_from)
  return price_from_;
}
void Filters::set_price_from(::google::protobuf::int32 value) {
  set_has_price_from();
  price_from_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.price_from)
}

// optional int32 price_to = 2;
bool Filters::has_price_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Filters::set_has_price_to() {
  _has_bits_[0] |= 0x00000010u;
}
void Filters::clear_has_price_to() {
  _has_bits_[0] &= ~0x00000010u;
}
void Filters::clear_price_to() {
  price_to_ = 0;
  clear_has_price_to();
}
::google::protobuf::int32 Filters::price_to() const {
  // @@protoc_insertion_point(field_get:pb.Filters.price_to)
  return price_to_;
}
void Filters::set_price_to(::google::protobuf::int32 value) {
  set_has_price_to();
  price_to_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.price_to)
}

// optional string place_id = 3;
bool Filters::has_place_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Filters::set_has_place_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Filters::clear_has_place_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Filters::clear_place_id() {
  place_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_place_id();
}
const ::std::string& Filters::place_id() const {
  // @@protoc_insertion_point(field_get:pb.Filters.place_id)
  return place_id_.GetNoArena();
}
void Filters::set_place_id(const ::std::string& value) {
  set_has_place_id();
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Filters.place_id)
}
#if LANG_CXX11
void Filters::set_place_id(::std::string&& value) {
  set_has_place_id();
  place_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Filters.place_id)
}
#endif
void Filters::set_place_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_place_id();
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Filters.place_id)
}
void Filters::set_place_id(const char* value, size_t size) {
  set_has_place_id();
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Filters.place_id)
}
::std::string* Filters::mutable_place_id() {
  set_has_place_id();
  // @@protoc_insertion_point(field_mutable:pb.Filters.place_id)
  return place_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Filters::release_place_id() {
  // @@protoc_insertion_point(field_release:pb.Filters.place_id)
  clear_has_place_id();
  return place_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Filters::set_allocated_place_id(::std::string* place_id) {
  if (place_id != NULL) {
    set_has_place_id();
  } else {
    clear_has_place_id();
  }
  place_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place_id);
  // @@protoc_insertion_point(field_set_allocated:pb.Filters.place_id)
}

// optional string subcategories = 4;
bool Filters::has_subcategories() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Filters::set_has_subcategories() {
  _has_bits_[0] |= 0x00000002u;
}
void Filters::clear_has_subcategories() {
  _has_bits_[0] &= ~0x00000002u;
}
void Filters::clear_subcategories() {
  subcategories_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subcategories();
}
const ::std::string& Filters::subcategories() const {
  // @@protoc_insertion_point(field_get:pb.Filters.subcategories)
  return subcategories_.GetNoArena();
}
void Filters::set_subcategories(const ::std::string& value) {
  set_has_subcategories();
  subcategories_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Filters.subcategories)
}
#if LANG_CXX11
void Filters::set_subcategories(::std::string&& value) {
  set_has_subcategories();
  subcategories_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Filters.subcategories)
}
#endif
void Filters::set_subcategories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subcategories();
  subcategories_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Filters.subcategories)
}
void Filters::set_subcategories(const char* value, size_t size) {
  set_has_subcategories();
  subcategories_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Filters.subcategories)
}
::std::string* Filters::mutable_subcategories() {
  set_has_subcategories();
  // @@protoc_insertion_point(field_mutable:pb.Filters.subcategories)
  return subcategories_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Filters::release_subcategories() {
  // @@protoc_insertion_point(field_release:pb.Filters.subcategories)
  clear_has_subcategories();
  return subcategories_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Filters::set_allocated_subcategories(::std::string* subcategories) {
  if (subcategories != NULL) {
    set_has_subcategories();
  } else {
    clear_has_subcategories();
  }
  subcategories_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subcategories);
  // @@protoc_insertion_point(field_set_allocated:pb.Filters.subcategories)
}

// optional string params = 5;
bool Filters::has_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Filters::set_has_params() {
  _has_bits_[0] |= 0x00000004u;
}
void Filters::clear_has_params() {
  _has_bits_[0] &= ~0x00000004u;
}
void Filters::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_params();
}
const ::std::string& Filters::params() const {
  // @@protoc_insertion_point(field_get:pb.Filters.params)
  return params_.GetNoArena();
}
void Filters::set_params(const ::std::string& value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Filters.params)
}
#if LANG_CXX11
void Filters::set_params(::std::string&& value) {
  set_has_params();
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Filters.params)
}
#endif
void Filters::set_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Filters.params)
}
void Filters::set_params(const char* value, size_t size) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Filters.params)
}
::std::string* Filters::mutable_params() {
  set_has_params();
  // @@protoc_insertion_point(field_mutable:pb.Filters.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Filters::release_params() {
  // @@protoc_insertion_point(field_release:pb.Filters.params)
  clear_has_params();
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Filters::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    set_has_params();
  } else {
    clear_has_params();
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:pb.Filters.params)
}

// optional bool payment_available = 6;
bool Filters::has_payment_available() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Filters::set_has_payment_available() {
  _has_bits_[0] |= 0x00000020u;
}
void Filters::clear_has_payment_available() {
  _has_bits_[0] &= ~0x00000020u;
}
void Filters::clear_payment_available() {
  payment_available_ = false;
  clear_has_payment_available();
}
bool Filters::payment_available() const {
  // @@protoc_insertion_point(field_get:pb.Filters.payment_available)
  return payment_available_;
}
void Filters::set_payment_available(bool value) {
  set_has_payment_available();
  payment_available_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.payment_available)
}

// optional bool delivery_available = 7;
bool Filters::has_delivery_available() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Filters::set_has_delivery_available() {
  _has_bits_[0] |= 0x00000040u;
}
void Filters::clear_has_delivery_available() {
  _has_bits_[0] &= ~0x00000040u;
}
void Filters::clear_delivery_available() {
  delivery_available_ = false;
  clear_has_delivery_available();
}
bool Filters::delivery_available() const {
  // @@protoc_insertion_point(field_get:pb.Filters.delivery_available)
  return delivery_available_;
}
void Filters::set_delivery_available(bool value) {
  set_has_delivery_available();
  delivery_available_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.delivery_available)
}

// optional bool free_delivery = 8;
bool Filters::has_free_delivery() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Filters::set_has_free_delivery() {
  _has_bits_[0] |= 0x00000080u;
}
void Filters::clear_has_free_delivery() {
  _has_bits_[0] &= ~0x00000080u;
}
void Filters::clear_free_delivery() {
  free_delivery_ = false;
  clear_has_free_delivery();
}
bool Filters::free_delivery() const {
  // @@protoc_insertion_point(field_get:pb.Filters.free_delivery)
  return free_delivery_;
}
void Filters::set_free_delivery(bool value) {
  set_has_free_delivery();
  free_delivery_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.free_delivery)
}

// repeated string owner_ids = 11;
int Filters::owner_ids_size() const {
  return owner_ids_.size();
}
void Filters::clear_owner_ids() {
  owner_ids_.Clear();
}
const ::std::string& Filters::owner_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.Filters.owner_ids)
  return owner_ids_.Get(index);
}
::std::string* Filters::mutable_owner_ids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Filters.owner_ids)
  return owner_ids_.Mutable(index);
}
void Filters::set_owner_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Filters.owner_ids)
  owner_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Filters::set_owner_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Filters.owner_ids)
  owner_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void Filters::set_owner_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  owner_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Filters.owner_ids)
}
void Filters::set_owner_ids(int index, const char* value, size_t size) {
  owner_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Filters.owner_ids)
}
::std::string* Filters::add_owner_ids() {
  // @@protoc_insertion_point(field_add_mutable:pb.Filters.owner_ids)
  return owner_ids_.Add();
}
void Filters::add_owner_ids(const ::std::string& value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Filters.owner_ids)
}
#if LANG_CXX11
void Filters::add_owner_ids(::std::string&& value) {
  owner_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Filters.owner_ids)
}
#endif
void Filters::add_owner_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Filters.owner_ids)
}
void Filters::add_owner_ids(const char* value, size_t size) {
  owner_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Filters.owner_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Filters::owner_ids() const {
  // @@protoc_insertion_point(field_list:pb.Filters.owner_ids)
  return owner_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Filters::mutable_owner_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.Filters.owner_ids)
  return &owner_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompilationInfo::kQueryTextsFieldNumber;
const int CompilationInfo::kIdFieldNumber;
const int CompilationInfo::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompilationInfo::CompilationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_youla_5fpopuri_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CompilationInfo)
}
CompilationInfo::CompilationInfo(const CompilationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      query_texts_(from.query_texts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_filters()) {
    filters_ = new ::pb::Filters(*from.filters_);
  } else {
    filters_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.CompilationInfo)
}

void CompilationInfo::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_ = NULL;
}

CompilationInfo::~CompilationInfo() {
  // @@protoc_insertion_point(destructor:pb.CompilationInfo)
  SharedDtor();
}

void CompilationInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filters_;
}

void CompilationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompilationInfo::descriptor() {
  protobuf_youla_5fpopuri_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fpopuri_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompilationInfo& CompilationInfo::default_instance() {
  protobuf_youla_5fpopuri_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompilationInfo* CompilationInfo::New(::google::protobuf::Arena* arena) const {
  CompilationInfo* n = new CompilationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompilationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CompilationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_texts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(filters_ != NULL);
      filters_->::pb::Filters::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CompilationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CompilationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string query_texts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_query_texts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_texts(this->query_texts_size() - 1).data(),
            static_cast<int>(this->query_texts(this->query_texts_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.CompilationInfo.query_texts");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.CompilationInfo.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.Filters filters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CompilationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CompilationInfo)
  return false;
#undef DO_
}

void CompilationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CompilationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string query_texts = 1;
  for (int i = 0, n = this->query_texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_texts(i).data(), static_cast<int>(this->query_texts(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.CompilationInfo.query_texts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query_texts(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.CompilationInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional .pb.Filters filters = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CompilationInfo)
}

::google::protobuf::uint8* CompilationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.CompilationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string query_texts = 1;
  for (int i = 0, n = this->query_texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_texts(i).data(), static_cast<int>(this->query_texts(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.CompilationInfo.query_texts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->query_texts(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.CompilationInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional .pb.Filters filters = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filters_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CompilationInfo)
  return target;
}

size_t CompilationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CompilationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string query_texts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->query_texts_size());
  for (int i = 0, n = this->query_texts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->query_texts(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .pb.Filters filters = 3;
    if (has_filters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filters_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompilationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CompilationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CompilationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompilationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CompilationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CompilationInfo)
    MergeFrom(*source);
  }
}

void CompilationInfo::MergeFrom(const CompilationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CompilationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_texts_.MergeFrom(from.query_texts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_filters()->::pb::Filters::MergeFrom(from.filters());
    }
  }
}

void CompilationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CompilationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompilationInfo::CopyFrom(const CompilationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CompilationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompilationInfo::IsInitialized() const {
  return true;
}

void CompilationInfo::Swap(CompilationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompilationInfo::InternalSwap(CompilationInfo* other) {
  using std::swap;
  query_texts_.InternalSwap(&other->query_texts_);
  id_.Swap(&other->id_);
  swap(filters_, other->filters_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompilationInfo::GetMetadata() const {
  protobuf_youla_5fpopuri_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fpopuri_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompilationInfo

// repeated string query_texts = 1;
int CompilationInfo::query_texts_size() const {
  return query_texts_.size();
}
void CompilationInfo::clear_query_texts() {
  query_texts_.Clear();
}
const ::std::string& CompilationInfo::query_texts(int index) const {
  // @@protoc_insertion_point(field_get:pb.CompilationInfo.query_texts)
  return query_texts_.Get(index);
}
::std::string* CompilationInfo::mutable_query_texts(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CompilationInfo.query_texts)
  return query_texts_.Mutable(index);
}
void CompilationInfo::set_query_texts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CompilationInfo.query_texts)
  query_texts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CompilationInfo::set_query_texts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CompilationInfo.query_texts)
  query_texts_.Mutable(index)->assign(std::move(value));
}
#endif
void CompilationInfo::set_query_texts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  query_texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CompilationInfo.query_texts)
}
void CompilationInfo::set_query_texts(int index, const char* value, size_t size) {
  query_texts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CompilationInfo.query_texts)
}
::std::string* CompilationInfo::add_query_texts() {
  // @@protoc_insertion_point(field_add_mutable:pb.CompilationInfo.query_texts)
  return query_texts_.Add();
}
void CompilationInfo::add_query_texts(const ::std::string& value) {
  query_texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CompilationInfo.query_texts)
}
#if LANG_CXX11
void CompilationInfo::add_query_texts(::std::string&& value) {
  query_texts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CompilationInfo.query_texts)
}
#endif
void CompilationInfo::add_query_texts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  query_texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CompilationInfo.query_texts)
}
void CompilationInfo::add_query_texts(const char* value, size_t size) {
  query_texts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CompilationInfo.query_texts)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompilationInfo::query_texts() const {
  // @@protoc_insertion_point(field_list:pb.CompilationInfo.query_texts)
  return query_texts_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CompilationInfo::mutable_query_texts() {
  // @@protoc_insertion_point(field_mutable_list:pb.CompilationInfo.query_texts)
  return &query_texts_;
}

// optional string id = 2;
bool CompilationInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompilationInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CompilationInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompilationInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& CompilationInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.CompilationInfo.id)
  return id_.GetNoArena();
}
void CompilationInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CompilationInfo.id)
}
#if LANG_CXX11
void CompilationInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CompilationInfo.id)
}
#endif
void CompilationInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CompilationInfo.id)
}
void CompilationInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CompilationInfo.id)
}
::std::string* CompilationInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pb.CompilationInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompilationInfo::release_id() {
  // @@protoc_insertion_point(field_release:pb.CompilationInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompilationInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.CompilationInfo.id)
}

// optional .pb.Filters filters = 3;
bool CompilationInfo::has_filters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CompilationInfo::set_has_filters() {
  _has_bits_[0] |= 0x00000002u;
}
void CompilationInfo::clear_has_filters() {
  _has_bits_[0] &= ~0x00000002u;
}
void CompilationInfo::clear_filters() {
  if (filters_ != NULL) filters_->::pb::Filters::Clear();
  clear_has_filters();
}
const ::pb::Filters& CompilationInfo::filters() const {
  const ::pb::Filters* p = filters_;
  // @@protoc_insertion_point(field_get:pb.CompilationInfo.filters)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Filters*>(
      &::pb::_Filters_default_instance_);
}
::pb::Filters* CompilationInfo::mutable_filters() {
  set_has_filters();
  if (filters_ == NULL) {
    filters_ = new ::pb::Filters;
  }
  // @@protoc_insertion_point(field_mutable:pb.CompilationInfo.filters)
  return filters_;
}
::pb::Filters* CompilationInfo::release_filters() {
  // @@protoc_insertion_point(field_release:pb.CompilationInfo.filters)
  clear_has_filters();
  ::pb::Filters* temp = filters_;
  filters_ = NULL;
  return temp;
}
void CompilationInfo::set_allocated_filters(::pb::Filters* filters) {
  delete filters_;
  filters_ = filters;
  if (filters) {
    set_has_filters();
  } else {
    clear_has_filters();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.CompilationInfo.filters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
