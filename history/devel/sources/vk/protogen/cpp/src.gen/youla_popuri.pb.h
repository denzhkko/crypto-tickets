// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youla_popuri.proto

#ifndef PROTOBUF_youla_5fpopuri_2eproto__INCLUDED
#define PROTOBUF_youla_5fpopuri_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace pb {
class CompilationInfo;
class CompilationInfoDefaultTypeInternal;
extern CompilationInfoDefaultTypeInternal _CompilationInfo_default_instance_;
class Filters;
class FiltersDefaultTypeInternal;
extern FiltersDefaultTypeInternal _Filters_default_instance_;
}  // namespace pb

namespace pb {

namespace protobuf_youla_5fpopuri_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_youla_5fpopuri_2eproto

// ===================================================================

class Filters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Filters) */ {
 public:
  Filters();
  virtual ~Filters();

  Filters(const Filters& from);

  inline Filters& operator=(const Filters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filters(Filters&& from) noexcept
    : Filters() {
    *this = ::std::move(from);
  }

  inline Filters& operator=(Filters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Filters& default_instance();

  static inline const Filters* internal_default_instance() {
    return reinterpret_cast<const Filters*>(
               &_Filters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Filters* other);
  friend void swap(Filters& a, Filters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filters* New() const PROTOBUF_FINAL { return New(NULL); }

  Filters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Filters& from);
  void MergeFrom(const Filters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Filters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string owner_ids = 11;
  int owner_ids_size() const;
  void clear_owner_ids();
  static const int kOwnerIdsFieldNumber = 11;
  const ::std::string& owner_ids(int index) const;
  ::std::string* mutable_owner_ids(int index);
  void set_owner_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_owner_ids(int index, ::std::string&& value);
  #endif
  void set_owner_ids(int index, const char* value);
  void set_owner_ids(int index, const char* value, size_t size);
  ::std::string* add_owner_ids();
  void add_owner_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_owner_ids(::std::string&& value);
  #endif
  void add_owner_ids(const char* value);
  void add_owner_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& owner_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_owner_ids();

  // optional string place_id = 3;
  bool has_place_id() const;
  void clear_place_id();
  static const int kPlaceIdFieldNumber = 3;
  const ::std::string& place_id() const;
  void set_place_id(const ::std::string& value);
  #if LANG_CXX11
  void set_place_id(::std::string&& value);
  #endif
  void set_place_id(const char* value);
  void set_place_id(const char* value, size_t size);
  ::std::string* mutable_place_id();
  ::std::string* release_place_id();
  void set_allocated_place_id(::std::string* place_id);

  // optional string subcategories = 4;
  bool has_subcategories() const;
  void clear_subcategories();
  static const int kSubcategoriesFieldNumber = 4;
  const ::std::string& subcategories() const;
  void set_subcategories(const ::std::string& value);
  #if LANG_CXX11
  void set_subcategories(::std::string&& value);
  #endif
  void set_subcategories(const char* value);
  void set_subcategories(const char* value, size_t size);
  ::std::string* mutable_subcategories();
  ::std::string* release_subcategories();
  void set_allocated_subcategories(::std::string* subcategories);

  // optional string params = 5;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 5;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const char* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // optional int32 price_from = 1;
  bool has_price_from() const;
  void clear_price_from();
  static const int kPriceFromFieldNumber = 1;
  ::google::protobuf::int32 price_from() const;
  void set_price_from(::google::protobuf::int32 value);

  // optional int32 price_to = 2;
  bool has_price_to() const;
  void clear_price_to();
  static const int kPriceToFieldNumber = 2;
  ::google::protobuf::int32 price_to() const;
  void set_price_to(::google::protobuf::int32 value);

  // optional bool payment_available = 6;
  bool has_payment_available() const;
  void clear_payment_available();
  static const int kPaymentAvailableFieldNumber = 6;
  bool payment_available() const;
  void set_payment_available(bool value);

  // optional bool delivery_available = 7;
  bool has_delivery_available() const;
  void clear_delivery_available();
  static const int kDeliveryAvailableFieldNumber = 7;
  bool delivery_available() const;
  void set_delivery_available(bool value);

  // optional bool free_delivery = 8;
  bool has_free_delivery() const;
  void clear_free_delivery();
  static const int kFreeDeliveryFieldNumber = 8;
  bool free_delivery() const;
  void set_free_delivery(bool value);

  // @@protoc_insertion_point(class_scope:pb.Filters)
 private:
  void set_has_price_from();
  void clear_has_price_from();
  void set_has_price_to();
  void clear_has_price_to();
  void set_has_place_id();
  void clear_has_place_id();
  void set_has_subcategories();
  void clear_has_subcategories();
  void set_has_params();
  void clear_has_params();
  void set_has_payment_available();
  void clear_has_payment_available();
  void set_has_delivery_available();
  void clear_has_delivery_available();
  void set_has_free_delivery();
  void clear_has_free_delivery();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> owner_ids_;
  ::google::protobuf::internal::ArenaStringPtr place_id_;
  ::google::protobuf::internal::ArenaStringPtr subcategories_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  ::google::protobuf::int32 price_from_;
  ::google::protobuf::int32 price_to_;
  bool payment_available_;
  bool delivery_available_;
  bool free_delivery_;
  friend struct protobuf_youla_5fpopuri_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompilationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.CompilationInfo) */ {
 public:
  CompilationInfo();
  virtual ~CompilationInfo();

  CompilationInfo(const CompilationInfo& from);

  inline CompilationInfo& operator=(const CompilationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompilationInfo(CompilationInfo&& from) noexcept
    : CompilationInfo() {
    *this = ::std::move(from);
  }

  inline CompilationInfo& operator=(CompilationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompilationInfo& default_instance();

  static inline const CompilationInfo* internal_default_instance() {
    return reinterpret_cast<const CompilationInfo*>(
               &_CompilationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CompilationInfo* other);
  friend void swap(CompilationInfo& a, CompilationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompilationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CompilationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompilationInfo& from);
  void MergeFrom(const CompilationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompilationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string query_texts = 1;
  int query_texts_size() const;
  void clear_query_texts();
  static const int kQueryTextsFieldNumber = 1;
  const ::std::string& query_texts(int index) const;
  ::std::string* mutable_query_texts(int index);
  void set_query_texts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_query_texts(int index, ::std::string&& value);
  #endif
  void set_query_texts(int index, const char* value);
  void set_query_texts(int index, const char* value, size_t size);
  ::std::string* add_query_texts();
  void add_query_texts(const ::std::string& value);
  #if LANG_CXX11
  void add_query_texts(::std::string&& value);
  #endif
  void add_query_texts(const char* value);
  void add_query_texts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& query_texts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_query_texts();

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .pb.Filters filters = 3;
  bool has_filters() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 3;
  const ::pb::Filters& filters() const;
  ::pb::Filters* mutable_filters();
  ::pb::Filters* release_filters();
  void set_allocated_filters(::pb::Filters* filters);

  // @@protoc_insertion_point(class_scope:pb.CompilationInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_filters();
  void clear_has_filters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> query_texts_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::pb::Filters* filters_;
  friend struct protobuf_youla_5fpopuri_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Filters

// optional int32 price_from = 1;
inline bool Filters::has_price_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Filters::set_has_price_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Filters::clear_has_price_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Filters::clear_price_from() {
  price_from_ = 0;
  clear_has_price_from();
}
inline ::google::protobuf::int32 Filters::price_from() const {
  // @@protoc_insertion_point(field_get:pb.Filters.price_from)
  return price_from_;
}
inline void Filters::set_price_from(::google::protobuf::int32 value) {
  set_has_price_from();
  price_from_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.price_from)
}

// optional int32 price_to = 2;
inline bool Filters::has_price_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Filters::set_has_price_to() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Filters::clear_has_price_to() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Filters::clear_price_to() {
  price_to_ = 0;
  clear_has_price_to();
}
inline ::google::protobuf::int32 Filters::price_to() const {
  // @@protoc_insertion_point(field_get:pb.Filters.price_to)
  return price_to_;
}
inline void Filters::set_price_to(::google::protobuf::int32 value) {
  set_has_price_to();
  price_to_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.price_to)
}

// optional string place_id = 3;
inline bool Filters::has_place_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Filters::set_has_place_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Filters::clear_has_place_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Filters::clear_place_id() {
  place_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_place_id();
}
inline const ::std::string& Filters::place_id() const {
  // @@protoc_insertion_point(field_get:pb.Filters.place_id)
  return place_id_.GetNoArena();
}
inline void Filters::set_place_id(const ::std::string& value) {
  set_has_place_id();
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Filters.place_id)
}
#if LANG_CXX11
inline void Filters::set_place_id(::std::string&& value) {
  set_has_place_id();
  place_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Filters.place_id)
}
#endif
inline void Filters::set_place_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_place_id();
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Filters.place_id)
}
inline void Filters::set_place_id(const char* value, size_t size) {
  set_has_place_id();
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Filters.place_id)
}
inline ::std::string* Filters::mutable_place_id() {
  set_has_place_id();
  // @@protoc_insertion_point(field_mutable:pb.Filters.place_id)
  return place_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Filters::release_place_id() {
  // @@protoc_insertion_point(field_release:pb.Filters.place_id)
  clear_has_place_id();
  return place_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Filters::set_allocated_place_id(::std::string* place_id) {
  if (place_id != NULL) {
    set_has_place_id();
  } else {
    clear_has_place_id();
  }
  place_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place_id);
  // @@protoc_insertion_point(field_set_allocated:pb.Filters.place_id)
}

// optional string subcategories = 4;
inline bool Filters::has_subcategories() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Filters::set_has_subcategories() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Filters::clear_has_subcategories() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Filters::clear_subcategories() {
  subcategories_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subcategories();
}
inline const ::std::string& Filters::subcategories() const {
  // @@protoc_insertion_point(field_get:pb.Filters.subcategories)
  return subcategories_.GetNoArena();
}
inline void Filters::set_subcategories(const ::std::string& value) {
  set_has_subcategories();
  subcategories_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Filters.subcategories)
}
#if LANG_CXX11
inline void Filters::set_subcategories(::std::string&& value) {
  set_has_subcategories();
  subcategories_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Filters.subcategories)
}
#endif
inline void Filters::set_subcategories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subcategories();
  subcategories_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Filters.subcategories)
}
inline void Filters::set_subcategories(const char* value, size_t size) {
  set_has_subcategories();
  subcategories_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Filters.subcategories)
}
inline ::std::string* Filters::mutable_subcategories() {
  set_has_subcategories();
  // @@protoc_insertion_point(field_mutable:pb.Filters.subcategories)
  return subcategories_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Filters::release_subcategories() {
  // @@protoc_insertion_point(field_release:pb.Filters.subcategories)
  clear_has_subcategories();
  return subcategories_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Filters::set_allocated_subcategories(::std::string* subcategories) {
  if (subcategories != NULL) {
    set_has_subcategories();
  } else {
    clear_has_subcategories();
  }
  subcategories_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subcategories);
  // @@protoc_insertion_point(field_set_allocated:pb.Filters.subcategories)
}

// optional string params = 5;
inline bool Filters::has_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Filters::set_has_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Filters::clear_has_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Filters::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_params();
}
inline const ::std::string& Filters::params() const {
  // @@protoc_insertion_point(field_get:pb.Filters.params)
  return params_.GetNoArena();
}
inline void Filters::set_params(const ::std::string& value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Filters.params)
}
#if LANG_CXX11
inline void Filters::set_params(::std::string&& value) {
  set_has_params();
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Filters.params)
}
#endif
inline void Filters::set_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Filters.params)
}
inline void Filters::set_params(const char* value, size_t size) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Filters.params)
}
inline ::std::string* Filters::mutable_params() {
  set_has_params();
  // @@protoc_insertion_point(field_mutable:pb.Filters.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Filters::release_params() {
  // @@protoc_insertion_point(field_release:pb.Filters.params)
  clear_has_params();
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Filters::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    set_has_params();
  } else {
    clear_has_params();
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:pb.Filters.params)
}

// optional bool payment_available = 6;
inline bool Filters::has_payment_available() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Filters::set_has_payment_available() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Filters::clear_has_payment_available() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Filters::clear_payment_available() {
  payment_available_ = false;
  clear_has_payment_available();
}
inline bool Filters::payment_available() const {
  // @@protoc_insertion_point(field_get:pb.Filters.payment_available)
  return payment_available_;
}
inline void Filters::set_payment_available(bool value) {
  set_has_payment_available();
  payment_available_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.payment_available)
}

// optional bool delivery_available = 7;
inline bool Filters::has_delivery_available() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Filters::set_has_delivery_available() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Filters::clear_has_delivery_available() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Filters::clear_delivery_available() {
  delivery_available_ = false;
  clear_has_delivery_available();
}
inline bool Filters::delivery_available() const {
  // @@protoc_insertion_point(field_get:pb.Filters.delivery_available)
  return delivery_available_;
}
inline void Filters::set_delivery_available(bool value) {
  set_has_delivery_available();
  delivery_available_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.delivery_available)
}

// optional bool free_delivery = 8;
inline bool Filters::has_free_delivery() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Filters::set_has_free_delivery() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Filters::clear_has_free_delivery() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Filters::clear_free_delivery() {
  free_delivery_ = false;
  clear_has_free_delivery();
}
inline bool Filters::free_delivery() const {
  // @@protoc_insertion_point(field_get:pb.Filters.free_delivery)
  return free_delivery_;
}
inline void Filters::set_free_delivery(bool value) {
  set_has_free_delivery();
  free_delivery_ = value;
  // @@protoc_insertion_point(field_set:pb.Filters.free_delivery)
}

// repeated string owner_ids = 11;
inline int Filters::owner_ids_size() const {
  return owner_ids_.size();
}
inline void Filters::clear_owner_ids() {
  owner_ids_.Clear();
}
inline const ::std::string& Filters::owner_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.Filters.owner_ids)
  return owner_ids_.Get(index);
}
inline ::std::string* Filters::mutable_owner_ids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Filters.owner_ids)
  return owner_ids_.Mutable(index);
}
inline void Filters::set_owner_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Filters.owner_ids)
  owner_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Filters::set_owner_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Filters.owner_ids)
  owner_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Filters::set_owner_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  owner_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Filters.owner_ids)
}
inline void Filters::set_owner_ids(int index, const char* value, size_t size) {
  owner_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Filters.owner_ids)
}
inline ::std::string* Filters::add_owner_ids() {
  // @@protoc_insertion_point(field_add_mutable:pb.Filters.owner_ids)
  return owner_ids_.Add();
}
inline void Filters::add_owner_ids(const ::std::string& value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Filters.owner_ids)
}
#if LANG_CXX11
inline void Filters::add_owner_ids(::std::string&& value) {
  owner_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Filters.owner_ids)
}
#endif
inline void Filters::add_owner_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Filters.owner_ids)
}
inline void Filters::add_owner_ids(const char* value, size_t size) {
  owner_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Filters.owner_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Filters::owner_ids() const {
  // @@protoc_insertion_point(field_list:pb.Filters.owner_ids)
  return owner_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Filters::mutable_owner_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.Filters.owner_ids)
  return &owner_ids_;
}

// -------------------------------------------------------------------

// CompilationInfo

// repeated string query_texts = 1;
inline int CompilationInfo::query_texts_size() const {
  return query_texts_.size();
}
inline void CompilationInfo::clear_query_texts() {
  query_texts_.Clear();
}
inline const ::std::string& CompilationInfo::query_texts(int index) const {
  // @@protoc_insertion_point(field_get:pb.CompilationInfo.query_texts)
  return query_texts_.Get(index);
}
inline ::std::string* CompilationInfo::mutable_query_texts(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CompilationInfo.query_texts)
  return query_texts_.Mutable(index);
}
inline void CompilationInfo::set_query_texts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.CompilationInfo.query_texts)
  query_texts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CompilationInfo::set_query_texts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.CompilationInfo.query_texts)
  query_texts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CompilationInfo::set_query_texts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  query_texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.CompilationInfo.query_texts)
}
inline void CompilationInfo::set_query_texts(int index, const char* value, size_t size) {
  query_texts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.CompilationInfo.query_texts)
}
inline ::std::string* CompilationInfo::add_query_texts() {
  // @@protoc_insertion_point(field_add_mutable:pb.CompilationInfo.query_texts)
  return query_texts_.Add();
}
inline void CompilationInfo::add_query_texts(const ::std::string& value) {
  query_texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.CompilationInfo.query_texts)
}
#if LANG_CXX11
inline void CompilationInfo::add_query_texts(::std::string&& value) {
  query_texts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.CompilationInfo.query_texts)
}
#endif
inline void CompilationInfo::add_query_texts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  query_texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.CompilationInfo.query_texts)
}
inline void CompilationInfo::add_query_texts(const char* value, size_t size) {
  query_texts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.CompilationInfo.query_texts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompilationInfo::query_texts() const {
  // @@protoc_insertion_point(field_list:pb.CompilationInfo.query_texts)
  return query_texts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CompilationInfo::mutable_query_texts() {
  // @@protoc_insertion_point(field_mutable_list:pb.CompilationInfo.query_texts)
  return &query_texts_;
}

// optional string id = 2;
inline bool CompilationInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompilationInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompilationInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompilationInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& CompilationInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.CompilationInfo.id)
  return id_.GetNoArena();
}
inline void CompilationInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CompilationInfo.id)
}
#if LANG_CXX11
inline void CompilationInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CompilationInfo.id)
}
#endif
inline void CompilationInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CompilationInfo.id)
}
inline void CompilationInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CompilationInfo.id)
}
inline ::std::string* CompilationInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pb.CompilationInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompilationInfo::release_id() {
  // @@protoc_insertion_point(field_release:pb.CompilationInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompilationInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.CompilationInfo.id)
}

// optional .pb.Filters filters = 3;
inline bool CompilationInfo::has_filters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompilationInfo::set_has_filters() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompilationInfo::clear_has_filters() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompilationInfo::clear_filters() {
  if (filters_ != NULL) filters_->::pb::Filters::Clear();
  clear_has_filters();
}
inline const ::pb::Filters& CompilationInfo::filters() const {
  const ::pb::Filters* p = filters_;
  // @@protoc_insertion_point(field_get:pb.CompilationInfo.filters)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Filters*>(
      &::pb::_Filters_default_instance_);
}
inline ::pb::Filters* CompilationInfo::mutable_filters() {
  set_has_filters();
  if (filters_ == NULL) {
    filters_ = new ::pb::Filters;
  }
  // @@protoc_insertion_point(field_mutable:pb.CompilationInfo.filters)
  return filters_;
}
inline ::pb::Filters* CompilationInfo::release_filters() {
  // @@protoc_insertion_point(field_release:pb.CompilationInfo.filters)
  clear_has_filters();
  ::pb::Filters* temp = filters_;
  filters_ = NULL;
  return temp;
}
inline void CompilationInfo::set_allocated_filters(::pb::Filters* filters) {
  delete filters_;
  filters_ = filters;
  if (filters) {
    set_has_filters();
  } else {
    clear_has_filters();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.CompilationInfo.filters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youla_5fpopuri_2eproto__INCLUDED
