// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youla_search_geo_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youla_search_geo_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace youla {
namespace search_geo_info {
namespace pb {
class SearchGeoInfo_Category_LifeTimeGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SearchGeoInfo_Category_LifeTimeGroup>
     _instance;
} _SearchGeoInfo_Category_LifeTimeGroup_default_instance_;
class SearchGeoInfo_CategoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SearchGeoInfo_Category>
     _instance;
} _SearchGeoInfo_Category_default_instance_;
class SearchGeoInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SearchGeoInfo>
     _instance;
} _SearchGeoInfo_default_instance_;

namespace protobuf_youla_5fsearch_5fgeo_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category_LifeTimeGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category_LifeTimeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category_LifeTimeGroup, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category_LifeTimeGroup, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category_LifeTimeGroup, cnt_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo_Category, life_time_groups_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchGeoInfo, categories_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(SearchGeoInfo_Category_LifeTimeGroup)},
  { 11, 18, sizeof(SearchGeoInfo_Category)},
  { 20, 27, sizeof(SearchGeoInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchGeoInfo_Category_LifeTimeGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchGeoInfo_Category_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchGeoInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "youla_search_geo_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SearchGeoInfo_Category_LifeTimeGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SearchGeoInfo_Category_LifeTimeGroup_default_instance_);_SearchGeoInfo_Category_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SearchGeoInfo_Category_default_instance_);_SearchGeoInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SearchGeoInfo_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033youla_search_geo_info.proto\022\030youla.sea"
      "rch_geo_info.pb\"\243\002\n\rSearchGeoInfo\022\021\n\treg"
      "ion_id\030\001 \001(\005\022D\n\ncategories\030\002 \003(\01320.youla"
      ".search_geo_info.pb.SearchGeoInfo.Catego"
      "ry\032\270\001\n\010Category\022\023\n\013category_id\030\001 \001(\005\022X\n\020"
      "life_time_groups\030\002 \003(\0132>.youla.search_ge"
      "o_info.pb.SearchGeoInfo.Category.LifeTim"
      "eGroup\032=\n\rLifeTimeGroup\022\014\n\004name\030\001 \001(\t\022\021\n"
      "\tfrequency\030\002 \001(\002\022\013\n\003cnt\030\003 \001(\003B\024B\022YoulaSe"
      "archGeoInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 371);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "youla_search_geo_info.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_youla_5fsearch_5fgeo_5finfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchGeoInfo_Category_LifeTimeGroup::kNameFieldNumber;
const int SearchGeoInfo_Category_LifeTimeGroup::kFrequencyFieldNumber;
const int SearchGeoInfo_Category_LifeTimeGroup::kCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchGeoInfo_Category_LifeTimeGroup::SearchGeoInfo_Category_LifeTimeGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
}
SearchGeoInfo_Category_LifeTimeGroup::SearchGeoInfo_Category_LifeTimeGroup(const SearchGeoInfo_Category_LifeTimeGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&cnt_, &from.cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&cnt_)) + sizeof(frequency_));
  // @@protoc_insertion_point(copy_constructor:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
}

void SearchGeoInfo_Category_LifeTimeGroup::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_) -
      reinterpret_cast<char*>(&cnt_)) + sizeof(frequency_));
}

SearchGeoInfo_Category_LifeTimeGroup::~SearchGeoInfo_Category_LifeTimeGroup() {
  // @@protoc_insertion_point(destructor:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  SharedDtor();
}

void SearchGeoInfo_Category_LifeTimeGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchGeoInfo_Category_LifeTimeGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchGeoInfo_Category_LifeTimeGroup::descriptor() {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchGeoInfo_Category_LifeTimeGroup& SearchGeoInfo_Category_LifeTimeGroup::default_instance() {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchGeoInfo_Category_LifeTimeGroup* SearchGeoInfo_Category_LifeTimeGroup::New(::google::protobuf::Arena* arena) const {
  SearchGeoInfo_Category_LifeTimeGroup* n = new SearchGeoInfo_Category_LifeTimeGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchGeoInfo_Category_LifeTimeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&cnt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frequency_) -
        reinterpret_cast<char*>(&cnt_)) + sizeof(frequency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchGeoInfo_Category_LifeTimeGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float frequency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  return false;
#undef DO_
}

void SearchGeoInfo_Category_LifeTimeGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float frequency = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->frequency(), output);
  }

  // optional int64 cnt = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cnt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
}

::google::protobuf::uint8* SearchGeoInfo_Category_LifeTimeGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float frequency = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->frequency(), target);
  }

  // optional int64 cnt = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cnt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  return target;
}

size_t SearchGeoInfo_Category_LifeTimeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 cnt = 3;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cnt());
    }

    // optional float frequency = 2;
    if (has_frequency()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchGeoInfo_Category_LifeTimeGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchGeoInfo_Category_LifeTimeGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchGeoInfo_Category_LifeTimeGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
    MergeFrom(*source);
  }
}

void SearchGeoInfo_Category_LifeTimeGroup::MergeFrom(const SearchGeoInfo_Category_LifeTimeGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      cnt_ = from.cnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_ = from.frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchGeoInfo_Category_LifeTimeGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchGeoInfo_Category_LifeTimeGroup::CopyFrom(const SearchGeoInfo_Category_LifeTimeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGeoInfo_Category_LifeTimeGroup::IsInitialized() const {
  return true;
}

void SearchGeoInfo_Category_LifeTimeGroup::Swap(SearchGeoInfo_Category_LifeTimeGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchGeoInfo_Category_LifeTimeGroup::InternalSwap(SearchGeoInfo_Category_LifeTimeGroup* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(cnt_, other->cnt_);
  swap(frequency_, other->frequency_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchGeoInfo_Category_LifeTimeGroup::GetMetadata() const {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchGeoInfo_Category_LifeTimeGroup

// optional string name = 1;
bool SearchGeoInfo_Category_LifeTimeGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchGeoInfo_Category_LifeTimeGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchGeoInfo_Category_LifeTimeGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchGeoInfo_Category_LifeTimeGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SearchGeoInfo_Category_LifeTimeGroup::name() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
  return name_.GetNoArena();
}
void SearchGeoInfo_Category_LifeTimeGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}
#if LANG_CXX11
void SearchGeoInfo_Category_LifeTimeGroup::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}
#endif
void SearchGeoInfo_Category_LifeTimeGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}
void SearchGeoInfo_Category_LifeTimeGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}
::std::string* SearchGeoInfo_Category_LifeTimeGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchGeoInfo_Category_LifeTimeGroup::release_name() {
  // @@protoc_insertion_point(field_release:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchGeoInfo_Category_LifeTimeGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}

// optional float frequency = 2;
bool SearchGeoInfo_Category_LifeTimeGroup::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SearchGeoInfo_Category_LifeTimeGroup::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
void SearchGeoInfo_Category_LifeTimeGroup::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
void SearchGeoInfo_Category_LifeTimeGroup::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
float SearchGeoInfo_Category_LifeTimeGroup::frequency() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.frequency)
  return frequency_;
}
void SearchGeoInfo_Category_LifeTimeGroup::set_frequency(float value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.frequency)
}

// optional int64 cnt = 3;
bool SearchGeoInfo_Category_LifeTimeGroup::has_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchGeoInfo_Category_LifeTimeGroup::set_has_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchGeoInfo_Category_LifeTimeGroup::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchGeoInfo_Category_LifeTimeGroup::clear_cnt() {
  cnt_ = GOOGLE_LONGLONG(0);
  clear_has_cnt();
}
::google::protobuf::int64 SearchGeoInfo_Category_LifeTimeGroup::cnt() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.cnt)
  return cnt_;
}
void SearchGeoInfo_Category_LifeTimeGroup::set_cnt(::google::protobuf::int64 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.cnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchGeoInfo_Category::kCategoryIdFieldNumber;
const int SearchGeoInfo_Category::kLifeTimeGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchGeoInfo_Category::SearchGeoInfo_Category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:youla.search_geo_info.pb.SearchGeoInfo.Category)
}
SearchGeoInfo_Category::SearchGeoInfo_Category(const SearchGeoInfo_Category& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      life_time_groups_(from.life_time_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_id_ = from.category_id_;
  // @@protoc_insertion_point(copy_constructor:youla.search_geo_info.pb.SearchGeoInfo.Category)
}

void SearchGeoInfo_Category::SharedCtor() {
  _cached_size_ = 0;
  category_id_ = 0;
}

SearchGeoInfo_Category::~SearchGeoInfo_Category() {
  // @@protoc_insertion_point(destructor:youla.search_geo_info.pb.SearchGeoInfo.Category)
  SharedDtor();
}

void SearchGeoInfo_Category::SharedDtor() {
}

void SearchGeoInfo_Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchGeoInfo_Category::descriptor() {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchGeoInfo_Category& SearchGeoInfo_Category::default_instance() {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchGeoInfo_Category* SearchGeoInfo_Category::New(::google::protobuf::Arena* arena) const {
  SearchGeoInfo_Category* n = new SearchGeoInfo_Category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchGeoInfo_Category::Clear() {
// @@protoc_insertion_point(message_clear_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  life_time_groups_.Clear();
  category_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchGeoInfo_Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup life_time_groups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_life_time_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youla.search_geo_info.pb.SearchGeoInfo.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youla.search_geo_info.pb.SearchGeoInfo.Category)
  return false;
#undef DO_
}

void SearchGeoInfo_Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_id(), output);
  }

  // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup life_time_groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->life_time_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->life_time_groups(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youla.search_geo_info.pb.SearchGeoInfo.Category)
}

::google::protobuf::uint8* SearchGeoInfo_Category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category_id(), target);
  }

  // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup life_time_groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->life_time_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->life_time_groups(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youla.search_geo_info.pb.SearchGeoInfo.Category)
  return target;
}

size_t SearchGeoInfo_Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup life_time_groups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->life_time_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->life_time_groups(static_cast<int>(i)));
    }
  }

  // optional int32 category_id = 1;
  if (has_category_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchGeoInfo_Category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchGeoInfo_Category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchGeoInfo_Category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:youla.search_geo_info.pb.SearchGeoInfo.Category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:youla.search_geo_info.pb.SearchGeoInfo.Category)
    MergeFrom(*source);
  }
}

void SearchGeoInfo_Category::MergeFrom(const SearchGeoInfo_Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  life_time_groups_.MergeFrom(from.life_time_groups_);
  if (from.has_category_id()) {
    set_category_id(from.category_id());
  }
}

void SearchGeoInfo_Category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchGeoInfo_Category::CopyFrom(const SearchGeoInfo_Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:youla.search_geo_info.pb.SearchGeoInfo.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGeoInfo_Category::IsInitialized() const {
  return true;
}

void SearchGeoInfo_Category::Swap(SearchGeoInfo_Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchGeoInfo_Category::InternalSwap(SearchGeoInfo_Category* other) {
  using std::swap;
  life_time_groups_.InternalSwap(&other->life_time_groups_);
  swap(category_id_, other->category_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchGeoInfo_Category::GetMetadata() const {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchGeoInfo_Category

// optional int32 category_id = 1;
bool SearchGeoInfo_Category::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchGeoInfo_Category::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchGeoInfo_Category::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchGeoInfo_Category::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
::google::protobuf::int32 SearchGeoInfo_Category::category_id() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.category_id)
  return category_id_;
}
void SearchGeoInfo_Category::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.Category.category_id)
}

// repeated .youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup life_time_groups = 2;
int SearchGeoInfo_Category::life_time_groups_size() const {
  return life_time_groups_.size();
}
void SearchGeoInfo_Category::clear_life_time_groups() {
  life_time_groups_.Clear();
}
const ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup& SearchGeoInfo_Category::life_time_groups(int index) const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return life_time_groups_.Get(index);
}
::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup* SearchGeoInfo_Category::mutable_life_time_groups(int index) {
  // @@protoc_insertion_point(field_mutable:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return life_time_groups_.Mutable(index);
}
::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup* SearchGeoInfo_Category::add_life_time_groups() {
  // @@protoc_insertion_point(field_add:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return life_time_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup >*
SearchGeoInfo_Category::mutable_life_time_groups() {
  // @@protoc_insertion_point(field_mutable_list:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return &life_time_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup >&
SearchGeoInfo_Category::life_time_groups() const {
  // @@protoc_insertion_point(field_list:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return life_time_groups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchGeoInfo::kRegionIdFieldNumber;
const int SearchGeoInfo::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchGeoInfo::SearchGeoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:youla.search_geo_info.pb.SearchGeoInfo)
}
SearchGeoInfo::SearchGeoInfo(const SearchGeoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:youla.search_geo_info.pb.SearchGeoInfo)
}

void SearchGeoInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0;
}

SearchGeoInfo::~SearchGeoInfo() {
  // @@protoc_insertion_point(destructor:youla.search_geo_info.pb.SearchGeoInfo)
  SharedDtor();
}

void SearchGeoInfo::SharedDtor() {
}

void SearchGeoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchGeoInfo::descriptor() {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchGeoInfo& SearchGeoInfo::default_instance() {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchGeoInfo* SearchGeoInfo::New(::google::protobuf::Arena* arena) const {
  SearchGeoInfo* n = new SearchGeoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchGeoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:youla.search_geo_info.pb.SearchGeoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  region_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchGeoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youla.search_geo_info.pb.SearchGeoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 region_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category categories = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youla.search_geo_info.pb.SearchGeoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youla.search_geo_info.pb.SearchGeoInfo)
  return false;
#undef DO_
}

void SearchGeoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youla.search_geo_info.pb.SearchGeoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 region_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category categories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->categories(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youla.search_geo_info.pb.SearchGeoInfo)
}

::google::protobuf::uint8* SearchGeoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:youla.search_geo_info.pb.SearchGeoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 region_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category categories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->categories(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youla.search_geo_info.pb.SearchGeoInfo)
  return target;
}

size_t SearchGeoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:youla.search_geo_info.pb.SearchGeoInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category categories = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->categories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(static_cast<int>(i)));
    }
  }

  // optional int32 region_id = 1;
  if (has_region_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchGeoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:youla.search_geo_info.pb.SearchGeoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchGeoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchGeoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:youla.search_geo_info.pb.SearchGeoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:youla.search_geo_info.pb.SearchGeoInfo)
    MergeFrom(*source);
  }
}

void SearchGeoInfo::MergeFrom(const SearchGeoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:youla.search_geo_info.pb.SearchGeoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  if (from.has_region_id()) {
    set_region_id(from.region_id());
  }
}

void SearchGeoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:youla.search_geo_info.pb.SearchGeoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchGeoInfo::CopyFrom(const SearchGeoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:youla.search_geo_info.pb.SearchGeoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGeoInfo::IsInitialized() const {
  return true;
}

void SearchGeoInfo::Swap(SearchGeoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchGeoInfo::InternalSwap(SearchGeoInfo* other) {
  using std::swap;
  categories_.InternalSwap(&other->categories_);
  swap(region_id_, other->region_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchGeoInfo::GetMetadata() const {
  protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchGeoInfo

// optional int32 region_id = 1;
bool SearchGeoInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchGeoInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchGeoInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchGeoInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
::google::protobuf::int32 SearchGeoInfo::region_id() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.region_id)
  return region_id_;
}
void SearchGeoInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.region_id)
}

// repeated .youla.search_geo_info.pb.SearchGeoInfo.Category categories = 2;
int SearchGeoInfo::categories_size() const {
  return categories_.size();
}
void SearchGeoInfo::clear_categories() {
  categories_.Clear();
}
const ::youla::search_geo_info::pb::SearchGeoInfo_Category& SearchGeoInfo::categories(int index) const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return categories_.Get(index);
}
::youla::search_geo_info::pb::SearchGeoInfo_Category* SearchGeoInfo::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return categories_.Mutable(index);
}
::youla::search_geo_info::pb::SearchGeoInfo_Category* SearchGeoInfo::add_categories() {
  // @@protoc_insertion_point(field_add:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category >*
SearchGeoInfo::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category >&
SearchGeoInfo::categories() const {
  // @@protoc_insertion_point(field_list:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace search_geo_info
}  // namespace youla

// @@protoc_insertion_point(global_scope)
