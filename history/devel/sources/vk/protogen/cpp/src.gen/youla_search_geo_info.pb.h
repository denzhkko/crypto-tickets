// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youla_search_geo_info.proto

#ifndef PROTOBUF_youla_5fsearch_5fgeo_5finfo_2eproto__INCLUDED
#define PROTOBUF_youla_5fsearch_5fgeo_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace youla {
namespace search_geo_info {
namespace pb {
class SearchGeoInfo;
class SearchGeoInfoDefaultTypeInternal;
extern SearchGeoInfoDefaultTypeInternal _SearchGeoInfo_default_instance_;
class SearchGeoInfo_Category;
class SearchGeoInfo_CategoryDefaultTypeInternal;
extern SearchGeoInfo_CategoryDefaultTypeInternal _SearchGeoInfo_Category_default_instance_;
class SearchGeoInfo_Category_LifeTimeGroup;
class SearchGeoInfo_Category_LifeTimeGroupDefaultTypeInternal;
extern SearchGeoInfo_Category_LifeTimeGroupDefaultTypeInternal _SearchGeoInfo_Category_LifeTimeGroup_default_instance_;
}  // namespace pb
}  // namespace search_geo_info
}  // namespace youla

namespace youla {
namespace search_geo_info {
namespace pb {

namespace protobuf_youla_5fsearch_5fgeo_5finfo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_youla_5fsearch_5fgeo_5finfo_2eproto

// ===================================================================

class SearchGeoInfo_Category_LifeTimeGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup) */ {
 public:
  SearchGeoInfo_Category_LifeTimeGroup();
  virtual ~SearchGeoInfo_Category_LifeTimeGroup();

  SearchGeoInfo_Category_LifeTimeGroup(const SearchGeoInfo_Category_LifeTimeGroup& from);

  inline SearchGeoInfo_Category_LifeTimeGroup& operator=(const SearchGeoInfo_Category_LifeTimeGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchGeoInfo_Category_LifeTimeGroup(SearchGeoInfo_Category_LifeTimeGroup&& from) noexcept
    : SearchGeoInfo_Category_LifeTimeGroup() {
    *this = ::std::move(from);
  }

  inline SearchGeoInfo_Category_LifeTimeGroup& operator=(SearchGeoInfo_Category_LifeTimeGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchGeoInfo_Category_LifeTimeGroup& default_instance();

  static inline const SearchGeoInfo_Category_LifeTimeGroup* internal_default_instance() {
    return reinterpret_cast<const SearchGeoInfo_Category_LifeTimeGroup*>(
               &_SearchGeoInfo_Category_LifeTimeGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SearchGeoInfo_Category_LifeTimeGroup* other);
  friend void swap(SearchGeoInfo_Category_LifeTimeGroup& a, SearchGeoInfo_Category_LifeTimeGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchGeoInfo_Category_LifeTimeGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchGeoInfo_Category_LifeTimeGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchGeoInfo_Category_LifeTimeGroup& from);
  void MergeFrom(const SearchGeoInfo_Category_LifeTimeGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchGeoInfo_Category_LifeTimeGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int64 cnt = 3;
  bool has_cnt() const;
  void clear_cnt();
  static const int kCntFieldNumber = 3;
  ::google::protobuf::int64 cnt() const;
  void set_cnt(::google::protobuf::int64 value);

  // optional float frequency = 2;
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  float frequency() const;
  void set_frequency(float value);

  // @@protoc_insertion_point(class_scope:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_frequency();
  void clear_has_frequency();
  void set_has_cnt();
  void clear_has_cnt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 cnt_;
  float frequency_;
  friend struct protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchGeoInfo_Category : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:youla.search_geo_info.pb.SearchGeoInfo.Category) */ {
 public:
  SearchGeoInfo_Category();
  virtual ~SearchGeoInfo_Category();

  SearchGeoInfo_Category(const SearchGeoInfo_Category& from);

  inline SearchGeoInfo_Category& operator=(const SearchGeoInfo_Category& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchGeoInfo_Category(SearchGeoInfo_Category&& from) noexcept
    : SearchGeoInfo_Category() {
    *this = ::std::move(from);
  }

  inline SearchGeoInfo_Category& operator=(SearchGeoInfo_Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchGeoInfo_Category& default_instance();

  static inline const SearchGeoInfo_Category* internal_default_instance() {
    return reinterpret_cast<const SearchGeoInfo_Category*>(
               &_SearchGeoInfo_Category_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SearchGeoInfo_Category* other);
  friend void swap(SearchGeoInfo_Category& a, SearchGeoInfo_Category& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchGeoInfo_Category* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchGeoInfo_Category* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchGeoInfo_Category& from);
  void MergeFrom(const SearchGeoInfo_Category& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchGeoInfo_Category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SearchGeoInfo_Category_LifeTimeGroup LifeTimeGroup;

  // accessors -------------------------------------------------------

  // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup life_time_groups = 2;
  int life_time_groups_size() const;
  void clear_life_time_groups();
  static const int kLifeTimeGroupsFieldNumber = 2;
  const ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup& life_time_groups(int index) const;
  ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup* mutable_life_time_groups(int index);
  ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup* add_life_time_groups();
  ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup >*
      mutable_life_time_groups();
  const ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup >&
      life_time_groups() const;

  // optional int32 category_id = 1;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 1;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:youla.search_geo_info.pb.SearchGeoInfo.Category)
 private:
  void set_has_category_id();
  void clear_has_category_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup > life_time_groups_;
  ::google::protobuf::int32 category_id_;
  friend struct protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchGeoInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:youla.search_geo_info.pb.SearchGeoInfo) */ {
 public:
  SearchGeoInfo();
  virtual ~SearchGeoInfo();

  SearchGeoInfo(const SearchGeoInfo& from);

  inline SearchGeoInfo& operator=(const SearchGeoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchGeoInfo(SearchGeoInfo&& from) noexcept
    : SearchGeoInfo() {
    *this = ::std::move(from);
  }

  inline SearchGeoInfo& operator=(SearchGeoInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchGeoInfo& default_instance();

  static inline const SearchGeoInfo* internal_default_instance() {
    return reinterpret_cast<const SearchGeoInfo*>(
               &_SearchGeoInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SearchGeoInfo* other);
  friend void swap(SearchGeoInfo& a, SearchGeoInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchGeoInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchGeoInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchGeoInfo& from);
  void MergeFrom(const SearchGeoInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchGeoInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SearchGeoInfo_Category Category;

  // accessors -------------------------------------------------------

  // repeated .youla.search_geo_info.pb.SearchGeoInfo.Category categories = 2;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 2;
  const ::youla::search_geo_info::pb::SearchGeoInfo_Category& categories(int index) const;
  ::youla::search_geo_info::pb::SearchGeoInfo_Category* mutable_categories(int index);
  ::youla::search_geo_info::pb::SearchGeoInfo_Category* add_categories();
  ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category >&
      categories() const;

  // optional int32 region_id = 1;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:youla.search_geo_info.pb.SearchGeoInfo)
 private:
  void set_has_region_id();
  void clear_has_region_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category > categories_;
  ::google::protobuf::int32 region_id_;
  friend struct protobuf_youla_5fsearch_5fgeo_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchGeoInfo_Category_LifeTimeGroup

// optional string name = 1;
inline bool SearchGeoInfo_Category_LifeTimeGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SearchGeoInfo_Category_LifeTimeGroup::name() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
  return name_.GetNoArena();
}
inline void SearchGeoInfo_Category_LifeTimeGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}
#if LANG_CXX11
inline void SearchGeoInfo_Category_LifeTimeGroup::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}
#endif
inline void SearchGeoInfo_Category_LifeTimeGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}
inline void SearchGeoInfo_Category_LifeTimeGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}
inline ::std::string* SearchGeoInfo_Category_LifeTimeGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchGeoInfo_Category_LifeTimeGroup::release_name() {
  // @@protoc_insertion_point(field_release:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchGeoInfo_Category_LifeTimeGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.name)
}

// optional float frequency = 2;
inline bool SearchGeoInfo_Category_LifeTimeGroup::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
inline float SearchGeoInfo_Category_LifeTimeGroup::frequency() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.frequency)
  return frequency_;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::set_frequency(float value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.frequency)
}

// optional int64 cnt = 3;
inline bool SearchGeoInfo_Category_LifeTimeGroup::has_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::set_has_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::clear_cnt() {
  cnt_ = GOOGLE_LONGLONG(0);
  clear_has_cnt();
}
inline ::google::protobuf::int64 SearchGeoInfo_Category_LifeTimeGroup::cnt() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.cnt)
  return cnt_;
}
inline void SearchGeoInfo_Category_LifeTimeGroup::set_cnt(::google::protobuf::int64 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup.cnt)
}

// -------------------------------------------------------------------

// SearchGeoInfo_Category

// optional int32 category_id = 1;
inline bool SearchGeoInfo_Category::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchGeoInfo_Category::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchGeoInfo_Category::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchGeoInfo_Category::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 SearchGeoInfo_Category::category_id() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.category_id)
  return category_id_;
}
inline void SearchGeoInfo_Category::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.Category.category_id)
}

// repeated .youla.search_geo_info.pb.SearchGeoInfo.Category.LifeTimeGroup life_time_groups = 2;
inline int SearchGeoInfo_Category::life_time_groups_size() const {
  return life_time_groups_.size();
}
inline void SearchGeoInfo_Category::clear_life_time_groups() {
  life_time_groups_.Clear();
}
inline const ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup& SearchGeoInfo_Category::life_time_groups(int index) const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return life_time_groups_.Get(index);
}
inline ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup* SearchGeoInfo_Category::mutable_life_time_groups(int index) {
  // @@protoc_insertion_point(field_mutable:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return life_time_groups_.Mutable(index);
}
inline ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup* SearchGeoInfo_Category::add_life_time_groups() {
  // @@protoc_insertion_point(field_add:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return life_time_groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup >*
SearchGeoInfo_Category::mutable_life_time_groups() {
  // @@protoc_insertion_point(field_mutable_list:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return &life_time_groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category_LifeTimeGroup >&
SearchGeoInfo_Category::life_time_groups() const {
  // @@protoc_insertion_point(field_list:youla.search_geo_info.pb.SearchGeoInfo.Category.life_time_groups)
  return life_time_groups_;
}

// -------------------------------------------------------------------

// SearchGeoInfo

// optional int32 region_id = 1;
inline bool SearchGeoInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchGeoInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchGeoInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchGeoInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SearchGeoInfo::region_id() const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.region_id)
  return region_id_;
}
inline void SearchGeoInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:youla.search_geo_info.pb.SearchGeoInfo.region_id)
}

// repeated .youla.search_geo_info.pb.SearchGeoInfo.Category categories = 2;
inline int SearchGeoInfo::categories_size() const {
  return categories_.size();
}
inline void SearchGeoInfo::clear_categories() {
  categories_.Clear();
}
inline const ::youla::search_geo_info::pb::SearchGeoInfo_Category& SearchGeoInfo::categories(int index) const {
  // @@protoc_insertion_point(field_get:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return categories_.Get(index);
}
inline ::youla::search_geo_info::pb::SearchGeoInfo_Category* SearchGeoInfo::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return categories_.Mutable(index);
}
inline ::youla::search_geo_info::pb::SearchGeoInfo_Category* SearchGeoInfo::add_categories() {
  // @@protoc_insertion_point(field_add:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category >*
SearchGeoInfo::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::youla::search_geo_info::pb::SearchGeoInfo_Category >&
SearchGeoInfo::categories() const {
  // @@protoc_insertion_point(field_list:youla.search_geo_info.pb.SearchGeoInfo.categories)
  return categories_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace search_geo_info
}  // namespace youla

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youla_5fsearch_5fgeo_5finfo_2eproto__INCLUDED
