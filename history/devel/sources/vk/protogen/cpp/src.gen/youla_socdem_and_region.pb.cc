// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youla_socdem_and_region.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youla_socdem_and_region.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace youla {
namespace socdem_and_region {
namespace pb {
class SocdemAndRegionInfo_CategoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SocdemAndRegionInfo_Category>
     _instance;
} _SocdemAndRegionInfo_Category_default_instance_;
class SocdemAndRegionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SocdemAndRegionInfo>
     _instance;
} _SocdemAndRegionInfo_default_instance_;

namespace protobuf_youla_5fsocdem_5fand_5fregion_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, medium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, low_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, medium_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo_Category, high_abs_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo, socdem_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocdemAndRegionInfo, categories_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(SocdemAndRegionInfo_Category)},
  { 19, 27, sizeof(SocdemAndRegionInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SocdemAndRegionInfo_Category_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SocdemAndRegionInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "youla_socdem_and_region.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SocdemAndRegionInfo_Category_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SocdemAndRegionInfo_Category_default_instance_);_SocdemAndRegionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SocdemAndRegionInfo_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035youla_socdem_and_region.proto\022\032youla.s"
      "ocdem_and_region.pb\"\215\002\n\023SocdemAndRegionI"
      "nfo\022\021\n\tregion_id\030\001 \001(\005\022\021\n\tsocdem_id\030\002 \001("
      "\005\022L\n\ncategories\030\003 \003(\01328.youla.socdem_and"
      "_region.pb.SocdemAndRegionInfo.Category\032"
      "\201\001\n\010Category\022\023\n\013category_id\030\001 \001(\005\022\013\n\003low"
      "\030\002 \001(\002\022\016\n\006medium\030\003 \001(\002\022\014\n\004high\030\004 \001(\002\022\017\n\007"
      "low_abs\030\005 \001(\005\022\022\n\nmedium_abs\030\006 \001(\005\022\020\n\010hig"
      "h_abs\030\007 \001(\005B\026B\024YoulaSocdemAndRegion"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "youla_socdem_and_region.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_youla_5fsocdem_5fand_5fregion_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocdemAndRegionInfo_Category::kCategoryIdFieldNumber;
const int SocdemAndRegionInfo_Category::kLowFieldNumber;
const int SocdemAndRegionInfo_Category::kMediumFieldNumber;
const int SocdemAndRegionInfo_Category::kHighFieldNumber;
const int SocdemAndRegionInfo_Category::kLowAbsFieldNumber;
const int SocdemAndRegionInfo_Category::kMediumAbsFieldNumber;
const int SocdemAndRegionInfo_Category::kHighAbsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocdemAndRegionInfo_Category::SocdemAndRegionInfo_Category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_youla_5fsocdem_5fand_5fregion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
}
SocdemAndRegionInfo_Category::SocdemAndRegionInfo_Category(const SocdemAndRegionInfo_Category& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_id_, &from.category_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_abs_) -
    reinterpret_cast<char*>(&category_id_)) + sizeof(high_abs_));
  // @@protoc_insertion_point(copy_constructor:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
}

void SocdemAndRegionInfo_Category::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&category_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_abs_) -
      reinterpret_cast<char*>(&category_id_)) + sizeof(high_abs_));
}

SocdemAndRegionInfo_Category::~SocdemAndRegionInfo_Category() {
  // @@protoc_insertion_point(destructor:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  SharedDtor();
}

void SocdemAndRegionInfo_Category::SharedDtor() {
}

void SocdemAndRegionInfo_Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocdemAndRegionInfo_Category::descriptor() {
  protobuf_youla_5fsocdem_5fand_5fregion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsocdem_5fand_5fregion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocdemAndRegionInfo_Category& SocdemAndRegionInfo_Category::default_instance() {
  protobuf_youla_5fsocdem_5fand_5fregion_2eproto::InitDefaults();
  return *internal_default_instance();
}

SocdemAndRegionInfo_Category* SocdemAndRegionInfo_Category::New(::google::protobuf::Arena* arena) const {
  SocdemAndRegionInfo_Category* n = new SocdemAndRegionInfo_Category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SocdemAndRegionInfo_Category::Clear() {
// @@protoc_insertion_point(message_clear_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&category_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_abs_) -
        reinterpret_cast<char*>(&category_id_)) + sizeof(high_abs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SocdemAndRegionInfo_Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float low = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float medium = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_medium();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &medium_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float high = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 low_abs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_low_abs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 medium_abs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_medium_abs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medium_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 high_abs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_high_abs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  return false;
#undef DO_
}

void SocdemAndRegionInfo_Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category_id(), output);
  }

  // optional float low = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->low(), output);
  }

  // optional float medium = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->medium(), output);
  }

  // optional float high = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->high(), output);
  }

  // optional int32 low_abs = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->low_abs(), output);
  }

  // optional int32 medium_abs = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->medium_abs(), output);
  }

  // optional int32 high_abs = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->high_abs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
}

::google::protobuf::uint8* SocdemAndRegionInfo_Category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category_id(), target);
  }

  // optional float low = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->low(), target);
  }

  // optional float medium = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->medium(), target);
  }

  // optional float high = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->high(), target);
  }

  // optional int32 low_abs = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->low_abs(), target);
  }

  // optional int32 medium_abs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->medium_abs(), target);
  }

  // optional int32 high_abs = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->high_abs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  return target;
}

size_t SocdemAndRegionInfo_Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 category_id = 1;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // optional float low = 2;
    if (has_low()) {
      total_size += 1 + 4;
    }

    // optional float medium = 3;
    if (has_medium()) {
      total_size += 1 + 4;
    }

    // optional float high = 4;
    if (has_high()) {
      total_size += 1 + 4;
    }

    // optional int32 low_abs = 5;
    if (has_low_abs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low_abs());
    }

    // optional int32 medium_abs = 6;
    if (has_medium_abs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medium_abs());
    }

    // optional int32 high_abs = 7;
    if (has_high_abs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high_abs());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocdemAndRegionInfo_Category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const SocdemAndRegionInfo_Category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocdemAndRegionInfo_Category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
    MergeFrom(*source);
  }
}

void SocdemAndRegionInfo_Category::MergeFrom(const SocdemAndRegionInfo_Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000004u) {
      medium_ = from.medium_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x00000010u) {
      low_abs_ = from.low_abs_;
    }
    if (cached_has_bits & 0x00000020u) {
      medium_abs_ = from.medium_abs_;
    }
    if (cached_has_bits & 0x00000040u) {
      high_abs_ = from.high_abs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SocdemAndRegionInfo_Category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocdemAndRegionInfo_Category::CopyFrom(const SocdemAndRegionInfo_Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocdemAndRegionInfo_Category::IsInitialized() const {
  return true;
}

void SocdemAndRegionInfo_Category::Swap(SocdemAndRegionInfo_Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocdemAndRegionInfo_Category::InternalSwap(SocdemAndRegionInfo_Category* other) {
  using std::swap;
  swap(category_id_, other->category_id_);
  swap(low_, other->low_);
  swap(medium_, other->medium_);
  swap(high_, other->high_);
  swap(low_abs_, other->low_abs_);
  swap(medium_abs_, other->medium_abs_);
  swap(high_abs_, other->high_abs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SocdemAndRegionInfo_Category::GetMetadata() const {
  protobuf_youla_5fsocdem_5fand_5fregion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsocdem_5fand_5fregion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SocdemAndRegionInfo_Category

// optional int32 category_id = 1;
bool SocdemAndRegionInfo_Category::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SocdemAndRegionInfo_Category::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SocdemAndRegionInfo_Category::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SocdemAndRegionInfo_Category::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
::google::protobuf::int32 SocdemAndRegionInfo_Category::category_id() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.category_id)
  return category_id_;
}
void SocdemAndRegionInfo_Category::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.category_id)
}

// optional float low = 2;
bool SocdemAndRegionInfo_Category::has_low() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SocdemAndRegionInfo_Category::set_has_low() {
  _has_bits_[0] |= 0x00000002u;
}
void SocdemAndRegionInfo_Category::clear_has_low() {
  _has_bits_[0] &= ~0x00000002u;
}
void SocdemAndRegionInfo_Category::clear_low() {
  low_ = 0;
  clear_has_low();
}
float SocdemAndRegionInfo_Category::low() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.low)
  return low_;
}
void SocdemAndRegionInfo_Category::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.low)
}

// optional float medium = 3;
bool SocdemAndRegionInfo_Category::has_medium() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SocdemAndRegionInfo_Category::set_has_medium() {
  _has_bits_[0] |= 0x00000004u;
}
void SocdemAndRegionInfo_Category::clear_has_medium() {
  _has_bits_[0] &= ~0x00000004u;
}
void SocdemAndRegionInfo_Category::clear_medium() {
  medium_ = 0;
  clear_has_medium();
}
float SocdemAndRegionInfo_Category::medium() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.medium)
  return medium_;
}
void SocdemAndRegionInfo_Category::set_medium(float value) {
  set_has_medium();
  medium_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.medium)
}

// optional float high = 4;
bool SocdemAndRegionInfo_Category::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SocdemAndRegionInfo_Category::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
void SocdemAndRegionInfo_Category::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
void SocdemAndRegionInfo_Category::clear_high() {
  high_ = 0;
  clear_has_high();
}
float SocdemAndRegionInfo_Category::high() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.high)
  return high_;
}
void SocdemAndRegionInfo_Category::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.high)
}

// optional int32 low_abs = 5;
bool SocdemAndRegionInfo_Category::has_low_abs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SocdemAndRegionInfo_Category::set_has_low_abs() {
  _has_bits_[0] |= 0x00000010u;
}
void SocdemAndRegionInfo_Category::clear_has_low_abs() {
  _has_bits_[0] &= ~0x00000010u;
}
void SocdemAndRegionInfo_Category::clear_low_abs() {
  low_abs_ = 0;
  clear_has_low_abs();
}
::google::protobuf::int32 SocdemAndRegionInfo_Category::low_abs() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.low_abs)
  return low_abs_;
}
void SocdemAndRegionInfo_Category::set_low_abs(::google::protobuf::int32 value) {
  set_has_low_abs();
  low_abs_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.low_abs)
}

// optional int32 medium_abs = 6;
bool SocdemAndRegionInfo_Category::has_medium_abs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SocdemAndRegionInfo_Category::set_has_medium_abs() {
  _has_bits_[0] |= 0x00000020u;
}
void SocdemAndRegionInfo_Category::clear_has_medium_abs() {
  _has_bits_[0] &= ~0x00000020u;
}
void SocdemAndRegionInfo_Category::clear_medium_abs() {
  medium_abs_ = 0;
  clear_has_medium_abs();
}
::google::protobuf::int32 SocdemAndRegionInfo_Category::medium_abs() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.medium_abs)
  return medium_abs_;
}
void SocdemAndRegionInfo_Category::set_medium_abs(::google::protobuf::int32 value) {
  set_has_medium_abs();
  medium_abs_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.medium_abs)
}

// optional int32 high_abs = 7;
bool SocdemAndRegionInfo_Category::has_high_abs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SocdemAndRegionInfo_Category::set_has_high_abs() {
  _has_bits_[0] |= 0x00000040u;
}
void SocdemAndRegionInfo_Category::clear_has_high_abs() {
  _has_bits_[0] &= ~0x00000040u;
}
void SocdemAndRegionInfo_Category::clear_high_abs() {
  high_abs_ = 0;
  clear_has_high_abs();
}
::google::protobuf::int32 SocdemAndRegionInfo_Category::high_abs() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.high_abs)
  return high_abs_;
}
void SocdemAndRegionInfo_Category::set_high_abs(::google::protobuf::int32 value) {
  set_has_high_abs();
  high_abs_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.high_abs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocdemAndRegionInfo::kRegionIdFieldNumber;
const int SocdemAndRegionInfo::kSocdemIdFieldNumber;
const int SocdemAndRegionInfo::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocdemAndRegionInfo::SocdemAndRegionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_youla_5fsocdem_5fand_5fregion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:youla.socdem_and_region.pb.SocdemAndRegionInfo)
}
SocdemAndRegionInfo::SocdemAndRegionInfo(const SocdemAndRegionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&socdem_id_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(socdem_id_));
  // @@protoc_insertion_point(copy_constructor:youla.socdem_and_region.pb.SocdemAndRegionInfo)
}

void SocdemAndRegionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socdem_id_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(socdem_id_));
}

SocdemAndRegionInfo::~SocdemAndRegionInfo() {
  // @@protoc_insertion_point(destructor:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  SharedDtor();
}

void SocdemAndRegionInfo::SharedDtor() {
}

void SocdemAndRegionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocdemAndRegionInfo::descriptor() {
  protobuf_youla_5fsocdem_5fand_5fregion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsocdem_5fand_5fregion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocdemAndRegionInfo& SocdemAndRegionInfo::default_instance() {
  protobuf_youla_5fsocdem_5fand_5fregion_2eproto::InitDefaults();
  return *internal_default_instance();
}

SocdemAndRegionInfo* SocdemAndRegionInfo::New(::google::protobuf::Arena* arena) const {
  SocdemAndRegionInfo* n = new SocdemAndRegionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SocdemAndRegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&region_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socdem_id_) -
        reinterpret_cast<char*>(&region_id_)) + sizeof(socdem_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SocdemAndRegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 region_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 socdem_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_socdem_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socdem_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .youla.socdem_and_region.pb.SocdemAndRegionInfo.Category categories = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  return false;
#undef DO_
}

void SocdemAndRegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 region_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // optional int32 socdem_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->socdem_id(), output);
  }

  // repeated .youla.socdem_and_region.pb.SocdemAndRegionInfo.Category categories = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->categories(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youla.socdem_and_region.pb.SocdemAndRegionInfo)
}

::google::protobuf::uint8* SocdemAndRegionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 region_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // optional int32 socdem_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->socdem_id(), target);
  }

  // repeated .youla.socdem_and_region.pb.SocdemAndRegionInfo.Category categories = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->categories(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  return target;
}

size_t SocdemAndRegionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .youla.socdem_and_region.pb.SocdemAndRegionInfo.Category categories = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->categories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional int32 socdem_id = 2;
    if (has_socdem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socdem_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocdemAndRegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SocdemAndRegionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocdemAndRegionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:youla.socdem_and_region.pb.SocdemAndRegionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:youla.socdem_and_region.pb.SocdemAndRegionInfo)
    MergeFrom(*source);
  }
}

void SocdemAndRegionInfo::MergeFrom(const SocdemAndRegionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      socdem_id_ = from.socdem_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SocdemAndRegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocdemAndRegionInfo::CopyFrom(const SocdemAndRegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:youla.socdem_and_region.pb.SocdemAndRegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocdemAndRegionInfo::IsInitialized() const {
  return true;
}

void SocdemAndRegionInfo::Swap(SocdemAndRegionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocdemAndRegionInfo::InternalSwap(SocdemAndRegionInfo* other) {
  using std::swap;
  categories_.InternalSwap(&other->categories_);
  swap(region_id_, other->region_id_);
  swap(socdem_id_, other->socdem_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SocdemAndRegionInfo::GetMetadata() const {
  protobuf_youla_5fsocdem_5fand_5fregion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_youla_5fsocdem_5fand_5fregion_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SocdemAndRegionInfo

// optional int32 region_id = 1;
bool SocdemAndRegionInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SocdemAndRegionInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SocdemAndRegionInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SocdemAndRegionInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
::google::protobuf::int32 SocdemAndRegionInfo::region_id() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.region_id)
  return region_id_;
}
void SocdemAndRegionInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.region_id)
}

// optional int32 socdem_id = 2;
bool SocdemAndRegionInfo::has_socdem_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SocdemAndRegionInfo::set_has_socdem_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SocdemAndRegionInfo::clear_has_socdem_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SocdemAndRegionInfo::clear_socdem_id() {
  socdem_id_ = 0;
  clear_has_socdem_id();
}
::google::protobuf::int32 SocdemAndRegionInfo::socdem_id() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.socdem_id)
  return socdem_id_;
}
void SocdemAndRegionInfo::set_socdem_id(::google::protobuf::int32 value) {
  set_has_socdem_id();
  socdem_id_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.socdem_id)
}

// repeated .youla.socdem_and_region.pb.SocdemAndRegionInfo.Category categories = 3;
int SocdemAndRegionInfo::categories_size() const {
  return categories_.size();
}
void SocdemAndRegionInfo::clear_categories() {
  categories_.Clear();
}
const ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category& SocdemAndRegionInfo::categories(int index) const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return categories_.Get(index);
}
::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category* SocdemAndRegionInfo::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return categories_.Mutable(index);
}
::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category* SocdemAndRegionInfo::add_categories() {
  // @@protoc_insertion_point(field_add:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category >*
SocdemAndRegionInfo::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category >&
SocdemAndRegionInfo::categories() const {
  // @@protoc_insertion_point(field_list:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace socdem_and_region
}  // namespace youla

// @@protoc_insertion_point(global_scope)
