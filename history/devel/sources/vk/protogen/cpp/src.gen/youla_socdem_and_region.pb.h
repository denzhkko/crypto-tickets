// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youla_socdem_and_region.proto

#ifndef PROTOBUF_youla_5fsocdem_5fand_5fregion_2eproto__INCLUDED
#define PROTOBUF_youla_5fsocdem_5fand_5fregion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace youla {
namespace socdem_and_region {
namespace pb {
class SocdemAndRegionInfo;
class SocdemAndRegionInfoDefaultTypeInternal;
extern SocdemAndRegionInfoDefaultTypeInternal _SocdemAndRegionInfo_default_instance_;
class SocdemAndRegionInfo_Category;
class SocdemAndRegionInfo_CategoryDefaultTypeInternal;
extern SocdemAndRegionInfo_CategoryDefaultTypeInternal _SocdemAndRegionInfo_Category_default_instance_;
}  // namespace pb
}  // namespace socdem_and_region
}  // namespace youla

namespace youla {
namespace socdem_and_region {
namespace pb {

namespace protobuf_youla_5fsocdem_5fand_5fregion_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_youla_5fsocdem_5fand_5fregion_2eproto

// ===================================================================

class SocdemAndRegionInfo_Category : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category) */ {
 public:
  SocdemAndRegionInfo_Category();
  virtual ~SocdemAndRegionInfo_Category();

  SocdemAndRegionInfo_Category(const SocdemAndRegionInfo_Category& from);

  inline SocdemAndRegionInfo_Category& operator=(const SocdemAndRegionInfo_Category& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SocdemAndRegionInfo_Category(SocdemAndRegionInfo_Category&& from) noexcept
    : SocdemAndRegionInfo_Category() {
    *this = ::std::move(from);
  }

  inline SocdemAndRegionInfo_Category& operator=(SocdemAndRegionInfo_Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SocdemAndRegionInfo_Category& default_instance();

  static inline const SocdemAndRegionInfo_Category* internal_default_instance() {
    return reinterpret_cast<const SocdemAndRegionInfo_Category*>(
               &_SocdemAndRegionInfo_Category_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SocdemAndRegionInfo_Category* other);
  friend void swap(SocdemAndRegionInfo_Category& a, SocdemAndRegionInfo_Category& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SocdemAndRegionInfo_Category* New() const PROTOBUF_FINAL { return New(NULL); }

  SocdemAndRegionInfo_Category* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SocdemAndRegionInfo_Category& from);
  void MergeFrom(const SocdemAndRegionInfo_Category& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SocdemAndRegionInfo_Category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 category_id = 1;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 1;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // optional float low = 2;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 2;
  float low() const;
  void set_low(float value);

  // optional float medium = 3;
  bool has_medium() const;
  void clear_medium();
  static const int kMediumFieldNumber = 3;
  float medium() const;
  void set_medium(float value);

  // optional float high = 4;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 4;
  float high() const;
  void set_high(float value);

  // optional int32 low_abs = 5;
  bool has_low_abs() const;
  void clear_low_abs();
  static const int kLowAbsFieldNumber = 5;
  ::google::protobuf::int32 low_abs() const;
  void set_low_abs(::google::protobuf::int32 value);

  // optional int32 medium_abs = 6;
  bool has_medium_abs() const;
  void clear_medium_abs();
  static const int kMediumAbsFieldNumber = 6;
  ::google::protobuf::int32 medium_abs() const;
  void set_medium_abs(::google::protobuf::int32 value);

  // optional int32 high_abs = 7;
  bool has_high_abs() const;
  void clear_high_abs();
  static const int kHighAbsFieldNumber = 7;
  ::google::protobuf::int32 high_abs() const;
  void set_high_abs(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category)
 private:
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_low();
  void clear_has_low();
  void set_has_medium();
  void clear_has_medium();
  void set_has_high();
  void clear_has_high();
  void set_has_low_abs();
  void clear_has_low_abs();
  void set_has_medium_abs();
  void clear_has_medium_abs();
  void set_has_high_abs();
  void clear_has_high_abs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 category_id_;
  float low_;
  float medium_;
  float high_;
  ::google::protobuf::int32 low_abs_;
  ::google::protobuf::int32 medium_abs_;
  ::google::protobuf::int32 high_abs_;
  friend struct protobuf_youla_5fsocdem_5fand_5fregion_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SocdemAndRegionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:youla.socdem_and_region.pb.SocdemAndRegionInfo) */ {
 public:
  SocdemAndRegionInfo();
  virtual ~SocdemAndRegionInfo();

  SocdemAndRegionInfo(const SocdemAndRegionInfo& from);

  inline SocdemAndRegionInfo& operator=(const SocdemAndRegionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SocdemAndRegionInfo(SocdemAndRegionInfo&& from) noexcept
    : SocdemAndRegionInfo() {
    *this = ::std::move(from);
  }

  inline SocdemAndRegionInfo& operator=(SocdemAndRegionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SocdemAndRegionInfo& default_instance();

  static inline const SocdemAndRegionInfo* internal_default_instance() {
    return reinterpret_cast<const SocdemAndRegionInfo*>(
               &_SocdemAndRegionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SocdemAndRegionInfo* other);
  friend void swap(SocdemAndRegionInfo& a, SocdemAndRegionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SocdemAndRegionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SocdemAndRegionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SocdemAndRegionInfo& from);
  void MergeFrom(const SocdemAndRegionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SocdemAndRegionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SocdemAndRegionInfo_Category Category;

  // accessors -------------------------------------------------------

  // repeated .youla.socdem_and_region.pb.SocdemAndRegionInfo.Category categories = 3;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 3;
  const ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category& categories(int index) const;
  ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category* mutable_categories(int index);
  ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category* add_categories();
  ::google::protobuf::RepeatedPtrField< ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category >&
      categories() const;

  // optional int32 region_id = 1;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // optional int32 socdem_id = 2;
  bool has_socdem_id() const;
  void clear_socdem_id();
  static const int kSocdemIdFieldNumber = 2;
  ::google::protobuf::int32 socdem_id() const;
  void set_socdem_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:youla.socdem_and_region.pb.SocdemAndRegionInfo)
 private:
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_socdem_id();
  void clear_has_socdem_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category > categories_;
  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 socdem_id_;
  friend struct protobuf_youla_5fsocdem_5fand_5fregion_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SocdemAndRegionInfo_Category

// optional int32 category_id = 1;
inline bool SocdemAndRegionInfo_Category::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocdemAndRegionInfo_Category::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SocdemAndRegionInfo_Category::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SocdemAndRegionInfo_Category::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 SocdemAndRegionInfo_Category::category_id() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.category_id)
  return category_id_;
}
inline void SocdemAndRegionInfo_Category::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.category_id)
}

// optional float low = 2;
inline bool SocdemAndRegionInfo_Category::has_low() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SocdemAndRegionInfo_Category::set_has_low() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SocdemAndRegionInfo_Category::clear_has_low() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SocdemAndRegionInfo_Category::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline float SocdemAndRegionInfo_Category::low() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.low)
  return low_;
}
inline void SocdemAndRegionInfo_Category::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.low)
}

// optional float medium = 3;
inline bool SocdemAndRegionInfo_Category::has_medium() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SocdemAndRegionInfo_Category::set_has_medium() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SocdemAndRegionInfo_Category::clear_has_medium() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SocdemAndRegionInfo_Category::clear_medium() {
  medium_ = 0;
  clear_has_medium();
}
inline float SocdemAndRegionInfo_Category::medium() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.medium)
  return medium_;
}
inline void SocdemAndRegionInfo_Category::set_medium(float value) {
  set_has_medium();
  medium_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.medium)
}

// optional float high = 4;
inline bool SocdemAndRegionInfo_Category::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SocdemAndRegionInfo_Category::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SocdemAndRegionInfo_Category::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SocdemAndRegionInfo_Category::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline float SocdemAndRegionInfo_Category::high() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.high)
  return high_;
}
inline void SocdemAndRegionInfo_Category::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.high)
}

// optional int32 low_abs = 5;
inline bool SocdemAndRegionInfo_Category::has_low_abs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SocdemAndRegionInfo_Category::set_has_low_abs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SocdemAndRegionInfo_Category::clear_has_low_abs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SocdemAndRegionInfo_Category::clear_low_abs() {
  low_abs_ = 0;
  clear_has_low_abs();
}
inline ::google::protobuf::int32 SocdemAndRegionInfo_Category::low_abs() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.low_abs)
  return low_abs_;
}
inline void SocdemAndRegionInfo_Category::set_low_abs(::google::protobuf::int32 value) {
  set_has_low_abs();
  low_abs_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.low_abs)
}

// optional int32 medium_abs = 6;
inline bool SocdemAndRegionInfo_Category::has_medium_abs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SocdemAndRegionInfo_Category::set_has_medium_abs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SocdemAndRegionInfo_Category::clear_has_medium_abs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SocdemAndRegionInfo_Category::clear_medium_abs() {
  medium_abs_ = 0;
  clear_has_medium_abs();
}
inline ::google::protobuf::int32 SocdemAndRegionInfo_Category::medium_abs() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.medium_abs)
  return medium_abs_;
}
inline void SocdemAndRegionInfo_Category::set_medium_abs(::google::protobuf::int32 value) {
  set_has_medium_abs();
  medium_abs_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.medium_abs)
}

// optional int32 high_abs = 7;
inline bool SocdemAndRegionInfo_Category::has_high_abs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SocdemAndRegionInfo_Category::set_has_high_abs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SocdemAndRegionInfo_Category::clear_has_high_abs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SocdemAndRegionInfo_Category::clear_high_abs() {
  high_abs_ = 0;
  clear_has_high_abs();
}
inline ::google::protobuf::int32 SocdemAndRegionInfo_Category::high_abs() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.high_abs)
  return high_abs_;
}
inline void SocdemAndRegionInfo_Category::set_high_abs(::google::protobuf::int32 value) {
  set_has_high_abs();
  high_abs_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.Category.high_abs)
}

// -------------------------------------------------------------------

// SocdemAndRegionInfo

// optional int32 region_id = 1;
inline bool SocdemAndRegionInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocdemAndRegionInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SocdemAndRegionInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SocdemAndRegionInfo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 SocdemAndRegionInfo::region_id() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.region_id)
  return region_id_;
}
inline void SocdemAndRegionInfo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.region_id)
}

// optional int32 socdem_id = 2;
inline bool SocdemAndRegionInfo::has_socdem_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SocdemAndRegionInfo::set_has_socdem_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SocdemAndRegionInfo::clear_has_socdem_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SocdemAndRegionInfo::clear_socdem_id() {
  socdem_id_ = 0;
  clear_has_socdem_id();
}
inline ::google::protobuf::int32 SocdemAndRegionInfo::socdem_id() const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.socdem_id)
  return socdem_id_;
}
inline void SocdemAndRegionInfo::set_socdem_id(::google::protobuf::int32 value) {
  set_has_socdem_id();
  socdem_id_ = value;
  // @@protoc_insertion_point(field_set:youla.socdem_and_region.pb.SocdemAndRegionInfo.socdem_id)
}

// repeated .youla.socdem_and_region.pb.SocdemAndRegionInfo.Category categories = 3;
inline int SocdemAndRegionInfo::categories_size() const {
  return categories_.size();
}
inline void SocdemAndRegionInfo::clear_categories() {
  categories_.Clear();
}
inline const ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category& SocdemAndRegionInfo::categories(int index) const {
  // @@protoc_insertion_point(field_get:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return categories_.Get(index);
}
inline ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category* SocdemAndRegionInfo::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return categories_.Mutable(index);
}
inline ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category* SocdemAndRegionInfo::add_categories() {
  // @@protoc_insertion_point(field_add:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category >*
SocdemAndRegionInfo::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::youla::socdem_and_region::pb::SocdemAndRegionInfo_Category >&
SocdemAndRegionInfo::categories() const {
  // @@protoc_insertion_point(field_list:youla.socdem_and_region.pb.SocdemAndRegionInfo.categories)
  return categories_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace socdem_and_region
}  // namespace youla

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youla_5fsocdem_5fand_5fregion_2eproto__INCLUDED
