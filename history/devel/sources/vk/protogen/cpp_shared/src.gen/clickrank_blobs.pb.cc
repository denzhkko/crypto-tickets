// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clickrank_blobs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "clickrank_blobs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class ClickRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClickRecord>
     _instance;
} _ClickRecord_default_instance_;
class UrlsRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlsRecord>
     _instance;
} _UrlsRecord_default_instance_;
class BartertownRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BartertownRecord>
     _instance;
} _BartertownRecord_default_instance_;
class VarRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VarRecord>
     _instance;
} _VarRecord_default_instance_;
class PartialSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PartialSession>
     _instance;
} _PartialSession_default_instance_;
class EventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event>
     _instance;
} _Event_default_instance_;
class SerpItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerpItem>
     _instance;
} _SerpItem_default_instance_;
class SessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Session>
     _instance;
} _Session_default_instance_;
class EBinderKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EBinderKey>
     _instance;
} _EBinderKey_default_instance_;
class MarkerKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkerKey>
     _instance;
} _MarkerKey_default_instance_;

namespace protobuf_clickrank_5fblobs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, mrcu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, searchurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, evtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, resulturl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, pixel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, pageurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRecord, duration_),
  0,
  1,
  2,
  6,
  9,
  3,
  10,
  4,
  8,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlsRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlsRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlsRecord, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlsRecord, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlsRecord, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlsRecord, message_type_),
  0,
  ~0u,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, mrcu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, searchurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, vrt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, searcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, sf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, expid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, curqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, vkuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, extra_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BartertownRecord, mobile_),
  0,
  1,
  2,
  6,
  15,
  16,
  7,
  3,
  14,
  8,
  9,
  10,
  4,
  11,
  5,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarRecord, crec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarRecord, urec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarRecord, brec_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialSession, brec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialSession, urec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialSession, crec_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, evtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, pixel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, extra_),
  2,
  6,
  3,
  7,
  0,
  5,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpItem, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpItem, dups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpItem, pageurls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpItem, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpItem, snippet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpItem, searchpos_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, vrt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, searcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, searchurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, mrcu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, expid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, vkuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, urlsrecordmessagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, extra_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, mobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, vkissafesearch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, vkplatform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, vkusercountryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, vkqueryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, dzensearchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, dzenstrongestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, dzensearchtab_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, rustorequeryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, dzenexperimentids_),
  21,
  0,
  22,
  1,
  2,
  10,
  ~0u,
  ~0u,
  23,
  11,
  12,
  3,
  ~0u,
  13,
  14,
  15,
  4,
  5,
  16,
  17,
  18,
  24,
  19,
  6,
  7,
  8,
  20,
  9,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EBinderKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EBinderKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EBinderKey, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EBinderKey, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EBinderKey, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EBinderKey, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EBinderKey, type_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerKey, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerKey, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerKey, type_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(ClickRecord)},
  { 27, 36, sizeof(UrlsRecord)},
  { 40, 62, sizeof(BartertownRecord)},
  { 79, 87, sizeof(VarRecord)},
  { 90, 98, sizeof(PartialSession)},
  { 101, 114, sizeof(Event)},
  { 122, 133, sizeof(SerpItem)},
  { 139, 173, sizeof(Session)},
  { 202, 212, sizeof(EBinderKey)},
  { 217, 225, sizeof(MarkerKey)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClickRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlsRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BartertownRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VarRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PartialSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerpItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EBinderKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkerKey_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "clickrank_blobs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_parsed_5fblobs_2eproto::InitDefaults();
  _ClickRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClickRecord_default_instance_);_UrlsRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlsRecord_default_instance_);_BartertownRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BartertownRecord_default_instance_);_VarRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VarRecord_default_instance_);_PartialSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PartialSession_default_instance_);_Event_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_default_instance_);_SerpItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerpItem_default_instance_);_Session_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Session_default_instance_);_EBinderKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EBinderKey_default_instance_);_MarkerKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkerKey_default_instance_);_VarRecord_default_instance_._instance.get_mutable()->crec_ = const_cast< ::ru::mail::go::webbase::blobs::ClickRecord*>(
      ::ru::mail::go::webbase::blobs::ClickRecord::internal_default_instance());
  _VarRecord_default_instance_._instance.get_mutable()->urec_ = const_cast< ::ru::mail::go::webbase::blobs::UrlsRecord*>(
      ::ru::mail::go::webbase::blobs::UrlsRecord::internal_default_instance());
  _VarRecord_default_instance_._instance.get_mutable()->brec_ = const_cast< ::ru::mail::go::webbase::blobs::BartertownRecord*>(
      ::ru::mail::go::webbase::blobs::BartertownRecord::internal_default_instance());
  _PartialSession_default_instance_._instance.get_mutable()->brec_ = const_cast< ::ru::mail::go::webbase::blobs::BartertownRecord*>(
      ::ru::mail::go::webbase::blobs::BartertownRecord::internal_default_instance());
  _PartialSession_default_instance_._instance.get_mutable()->urec_ = const_cast< ::ru::mail::go::webbase::blobs::UrlsRecord*>(
      ::ru::mail::go::webbase::blobs::UrlsRecord::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025clickrank_blobs.proto\022\030ru.mail.go.webb"
      "ase.blobs\032\022parsed_blobs.proto\"\245\002\n\013ClickR"
      "ecord\022\013\n\003qid\030\001 \002(\t\022\014\n\004mrcu\030\002 \001(\t\022\021\n\tsear"
      "chUrl\030\003 \002(\t\022\014\n\004time\030\004 \002(\004\0220\n\006evtype\030\005 \002("
      "\0162 .ru.mail.go.webbase.blobs.Evtype\022\021\n\tr"
      "esultUrl\030\006 \001(\t\0220\n\006device\030\007 \001(\0162 .ru.mail"
      ".go.webbase.blobs.Device\022\r\n\005pixel\030\010 \001(\t\022"
      "1\n\004area\030\t \001(\0162#.ru.mail.go.webbase.blobs"
      ".ClickArea\022\017\n\007pageUrl\030\n \001(\t\022\020\n\010duration\030"
      "\013 \001(\r\"J\n\nUrlsRecord\022\013\n\003qid\030\001 \001(\t\022\013\n\003url\030"
      "\002 \003(\t\022\014\n\004time\030\003 \001(\004\022\024\n\014message_type\030\004 \001("
      "\t\"\363\002\n\020BartertownRecord\022\013\n\003qid\030\001 \002(\t\022\014\n\004m"
      "rcu\030\002 \001(\t\022\021\n\tsearchUrl\030\003 \002(\t\022\014\n\004time\030\004 \002"
      "(\004\022*\n\003vrt\030\005 \001(\0162\035.ru.mail.go.webbase.blo"
      "bs.Vrt\0224\n\010searcher\030\006 \001(\0162\".ru.mail.go.we"
      "bbase.blobs.Searcher\022\n\n\002sf\030\007 \001(\r\022\r\n\005quer"
      "y\030\010 \001(\t\022*\n\003sex\030\t \001(\0162\035.ru.mail.go.webbas"
      "e.blobs.Sex\022\013\n\003age\030\n \001(\r\022\016\n\006region\030\013 \001(\r"
      "\022\r\n\005expid\030\014 \001(\r\022\016\n\006curQid\030\r \001(\t\022\020\n\010vkUse"
      "rId\030\016 \001(\004\022\r\n\005extra\030\017 \001(\t\022\r\n\005split\030\020 \001(\r\022"
      "\016\n\006mobile\030\021 \001(\010\"\256\001\n\tVarRecord\0223\n\004crec\030\001 "
      "\001(\0132%.ru.mail.go.webbase.blobs.ClickReco"
      "rd\0222\n\004urec\030\002 \001(\0132$.ru.mail.go.webbase.bl"
      "obs.UrlsRecord\0228\n\004brec\030\003 \001(\0132*.ru.mail.g"
      "o.webbase.blobs.BartertownRecord\"\263\001\n\016Par"
      "tialSession\0228\n\004brec\030\001 \002(\0132*.ru.mail.go.w"
      "ebbase.blobs.BartertownRecord\0222\n\004urec\030\002 "
      "\001(\0132$.ru.mail.go.webbase.blobs.UrlsRecor"
      "d\0223\n\004crec\030\003 \003(\0132%.ru.mail.go.webbase.blo"
      "bs.ClickRecord\"\351\001\n\005Event\022\014\n\004time\030\001 \002(\004\0220"
      "\n\006evtype\030\002 \002(\0162 .ru.mail.go.webbase.blob"
      "s.Evtype\022\013\n\003pos\030\003 \001(\r\0220\n\006device\030\004 \001(\0162 ."
      "ru.mail.go.webbase.blobs.Device\022\r\n\005pixel"
      "\030\005 \001(\t\0221\n\004area\030\006 \001(\0162#.ru.mail.go.webbas"
      "e.blobs.ClickArea\022\020\n\010duration\030\007 \001(\r\022\r\n\005e"
      "xtra\030\010 \001(\t\"j\n\010SerpItem\022\013\n\003url\030\001 \002(\t\022\014\n\004d"
      "ups\030\002 \003(\t\022\020\n\010pageUrls\030\003 \003(\t\022\r\n\005title\030\004 \001"
      "(\t\022\017\n\007snippet\030\005 \001(\t\022\021\n\tsearchPos\030\006 \001(\r\"\215"
      "\006\n\007Session\022*\n\003vrt\030\001 \001(\0162\035.ru.mail.go.web"
      "base.blobs.Vrt\022\r\n\005query\030\002 \001(\t\0224\n\010searche"
      "r\030\003 \001(\0162\".ru.mail.go.webbase.blobs.Searc"
      "her\022\021\n\tsearchUrl\030\004 \001(\t\022\014\n\004mrcu\030\005 \001(\t\022\014\n\004"
      "time\030\006 \002(\004\022.\n\005event\030\007 \003(\0132\037.ru.mail.go.w"
      "ebbase.blobs.Event\022\013\n\003url\030\010 \003(\t\022*\n\003sex\030\t"
      " \001(\0162\035.ru.mail.go.webbase.blobs.Sex\022\013\n\003a"
      "ge\030\n \001(\r\022\016\n\006region\030\013 \001(\r\022\013\n\003uid\030\014 \001(\t\0221\n"
      "\005items\030\r \003(\0132\".ru.mail.go.webbase.blobs."
      "SerpItem\022\016\n\006weight\030\016 \001(\r\022\r\n\005expid\030\017 \001(\r\022"
      "\020\n\010vkUserId\030\020 \001(\004\022\035\n\025urlsRecordMessageTy"
      "pe\030\021 \001(\t\022\r\n\005extra\030\022 \001(\t\022\r\n\005split\030\023 \001(\r\022\016"
      "\n\006mobile\030\024 \001(\010\022\026\n\016vkIsSafeSearch\030\025 \001(\010\0228"
      "\n\nvkPlatform\030\026 \001(\0162$.ru.mail.go.webbase."
      "blobs.VkPlatform\022\027\n\017vkUserCountryId\030\027 \001("
      "\r\022\021\n\tvkQueryId\030\030 \001(\t\022\024\n\014dzenSearchId\030\031 \001"
      "(\t\022\027\n\017dzenStrongestId\030\032 \001(\t\022>\n\rdzenSearc"
      "hTab\030\033 \001(\0162\'.ru.mail.go.webbase.blobs.Dz"
      "enSearchTab\022\026\n\016rustoreQueryId\030\034 \001(\t\022\031\n\021d"
      "zenExperimentIds\030\035 \003(\004\"\216\001\n\nEBinderKey\022\013\n"
      "\003url\030\001 \002(\t\022\013\n\003key\030\002 \002(\t\022\014\n\004text\030\003 \002(\t\022\021\n"
      "\ttimestamp\030\004 \002(\003\022E\n\004type\030\005 \002(\01627.ru.mail"
      ".go.webbase.blobs.ExtraTextArray.ExtraTe"
      "xt.Type\"\241\001\n\tMarkerKey\022\013\n\003url\030\001 \002(\t\0222\n\006so"
      "urce\030\002 \002(\0162\".ru.mail.go.webbase.blobs.Se"
      "archer\0226\n\004type\030\003 \002(\0162(.ru.mail.go.webbas"
      "e.blobs.MarkerKey.Type\"\033\n\004Type\022\t\n\005IMAGE\020"
      "\001\022\010\n\004PAGE\020\002*\023\n\003Sex\022\005\n\001M\020\001\022\005\n\001F\020\002*z\n\nVkPl"
      "atform\022\007\n\003WEB\020\001\022\n\n\006IPHONE\020\002\022\013\n\007ANDROID\020\003"
      "\022\007\n\003MVK\020\004\022\014\n\010SMART_TV\020\005\022\013\n\007IPAD_V2\020\006\022\024\n\020"
      "VK_VIDEO_ANDROID\020\007\022\020\n\014VK_VIDEO_IOS\020\010*H\n\r"
      "DzenSearchTab\022\020\n\014VIDEO_SEARCH\020\001\022\023\n\017ARTIC"
      "LES_SEARCH\020\002\022\020\n\014MULTI_SEARCH\020\003*7\n\003Vrt\022\007\n"
      "\003IMG\020\001\022\007\n\003VDO\020\002\022\016\n\nVDO_MYMAIL\020\003\022\016\n\nMUS_M"
      "YMAIL\020\004*\210\001\n\010Searcher\022\010\n\004MAIL\020\001\022\t\n\005MAILG\020"
      "\002\022\010\n\004YNDX\020\003\022\010\n\004GOOG\020\004\022\017\n\013GOOG_IMGMIX\020\005\022\017"
      "\n\013YNDX_KVAKIN\020\006\022\017\n\013GOOG_KVAKIN\020\007\022\017\n\013INT_"
      "VS_GOOG\020\010\022\017\n\013INT_VS_YNDX\020\t*\033\n\006Device\022\010\n\004"
      "LBUT\020\001\022\007\n\003KBD\020\002*\371\003\n\006Evtype\022\016\n\nON_UNKNOWN"
      "\020\001\022\r\n\tON_SEARCH\020\002\022\022\n\016ON_CLICK_THUMB\020\003\022\021\n"
      "\rON_CLICK_SITE\020\004\022\021\n\rON_CLICK_ORIG\020\005\022\021\n\rO"
      "N_CLICK_HIDE\020\006\022\017\n\013ON_ERR_LOAD\020\007\022\016\n\nON_CL"
      "OAKED\020\010\022\021\n\rON_CLICK_MORE\020\t\022\017\n\013ON_VIEW_IM"
      "G\020\n\022\021\n\rON_SHORT_VIEW\020\013\022\027\n\023ON_ULTRA_SHORT"
      "_VIEW\020\014\022\017\n\013ON_VIEW_VDO\020\r\022\027\n\023ON_FIRST_SHO"
      "RT_VIEW\020\016\022\035\n\031ON_FIRST_ULTRA_SHORT_VIEW\020\017"
      "\022\025\n\021ON_FIRST_VIEW_VDO\020\020\022-\n)ON_FOLLOW_LIN"
      "K_TO_VIDEO_NOT_ON_FIRST_PAGE\020\021\022\022\n\016ON_CLI"
      "CK_MUSIC\020\022\022\020\n\014ON_VIDEO_10S\020\023\022\020\n\014ON_VIDEO"
      "_60S\020\024\022\026\n\022ON_CLICK_MOB_THUMB\020\025\022\n\n\006ON_SAW"
      "\020\026\022\020\n\014ON_CLICK_APP\020\027\022\025\n\021ON_DOWNLOADED_AP"
      "P\020\030*)\n\tClickArea\022\r\n\tON_MATRIX\020\001\022\r\n\tON_RI"
      "BBON\020\002B\020B\016ClickrankBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "clickrank_blobs.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_parsed_5fblobs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_clickrank_5fblobs_2eproto

const ::google::protobuf::EnumDescriptor* MarkerKey_Type_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[0];
}
bool MarkerKey_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MarkerKey_Type MarkerKey::IMAGE;
const MarkerKey_Type MarkerKey::PAGE;
const MarkerKey_Type MarkerKey::Type_MIN;
const MarkerKey_Type MarkerKey::Type_MAX;
const int MarkerKey::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sex_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[1];
}
bool Sex_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VkPlatform_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[2];
}
bool VkPlatform_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DzenSearchTab_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[3];
}
bool DzenSearchTab_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Vrt_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[4];
}
bool Vrt_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Searcher_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[5];
}
bool Searcher_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Device_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[6];
}
bool Device_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Evtype_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[7];
}
bool Evtype_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClickArea_descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_enum_descriptors[8];
}
bool ClickArea_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClickRecord::kQidFieldNumber;
const int ClickRecord::kMrcuFieldNumber;
const int ClickRecord::kSearchUrlFieldNumber;
const int ClickRecord::kTimeFieldNumber;
const int ClickRecord::kEvtypeFieldNumber;
const int ClickRecord::kResultUrlFieldNumber;
const int ClickRecord::kDeviceFieldNumber;
const int ClickRecord::kPixelFieldNumber;
const int ClickRecord::kAreaFieldNumber;
const int ClickRecord::kPageUrlFieldNumber;
const int ClickRecord::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClickRecord::ClickRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ClickRecord)
}
ClickRecord::ClickRecord(const ClickRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qid()) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mrcu()) {
    mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
  }
  searchurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searchurl()) {
    searchurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchurl_);
  }
  resulturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resulturl()) {
    resulturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resulturl_);
  }
  pixel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pixel()) {
    pixel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pixel_);
  }
  pageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pageurl()) {
    pageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pageurl_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_) -
    reinterpret_cast<char*>(&time_)) + sizeof(device_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ClickRecord)
}

void ClickRecord::SharedCtor() {
  _cached_size_ = 0;
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resulturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pixel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&time_)) + sizeof(duration_));
  area_ = 1;
  evtype_ = 1;
  device_ = 1;
}

ClickRecord::~ClickRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ClickRecord)
  SharedDtor();
}

void ClickRecord::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mrcu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resulturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pixel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pageurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClickRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickRecord::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClickRecord& ClickRecord::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClickRecord* ClickRecord::New(::google::protobuf::Arena* arena) const {
  ClickRecord* n = new ClickRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClickRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ClickRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!qid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mrcu_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mrcu_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!searchurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*searchurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!resulturl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*resulturl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!pixel_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pixel_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!pageurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pageurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&time_)) + sizeof(duration_));
  }
  if (cached_has_bits & 1792u) {
    area_ = 1;
    evtype_ = 1;
    device_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClickRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ClickRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string qid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ClickRecord.qid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mrcu = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mrcu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mrcu().data(), static_cast<int>(this->mrcu().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ClickRecord.mrcu");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string searchUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchurl().data(), static_cast<int>(this->searchurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ClickRecord.searchUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.Evtype evtype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Evtype_IsValid(value)) {
            set_evtype(static_cast< ::ru::mail::go::webbase::blobs::Evtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string resultUrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resulturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resulturl().data(), static_cast<int>(this->resulturl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ClickRecord.resultUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Device device = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Device_IsValid(value)) {
            set_device(static_cast< ::ru::mail::go::webbase::blobs::Device >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pixel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pixel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pixel().data(), static_cast<int>(this->pixel().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ClickRecord.pixel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ClickArea area = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ClickArea_IsValid(value)) {
            set_area(static_cast< ::ru::mail::go::webbase::blobs::ClickArea >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pageUrl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pageurl().data(), static_cast<int>(this->pageurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ClickRecord.pageUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ClickRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ClickRecord)
  return false;
#undef DO_
}

void ClickRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ClickRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string qid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // optional string mrcu = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.mrcu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mrcu(), output);
  }

  // required string searchUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchurl().data(), static_cast<int>(this->searchurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.searchUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->searchurl(), output);
  }

  // required uint64 time = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // required .ru.mail.go.webbase.blobs.Evtype evtype = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->evtype(), output);
  }

  // optional string resultUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulturl().data(), static_cast<int>(this->resulturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.resultUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->resulturl(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Device device = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->device(), output);
  }

  // optional string pixel = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pixel().data(), static_cast<int>(this->pixel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.pixel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->pixel(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ClickArea area = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->area(), output);
  }

  // optional string pageUrl = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), static_cast<int>(this->pageurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.pageUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pageurl(), output);
  }

  // optional uint32 duration = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ClickRecord)
}

::google::protobuf::uint8* ClickRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ClickRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string qid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // optional string mrcu = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.mrcu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mrcu(), target);
  }

  // required string searchUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchurl().data(), static_cast<int>(this->searchurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.searchUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->searchurl(), target);
  }

  // required uint64 time = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // required .ru.mail.go.webbase.blobs.Evtype evtype = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->evtype(), target);
  }

  // optional string resultUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulturl().data(), static_cast<int>(this->resulturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.resultUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->resulturl(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Device device = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->device(), target);
  }

  // optional string pixel = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pixel().data(), static_cast<int>(this->pixel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.pixel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pixel(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ClickArea area = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->area(), target);
  }

  // optional string pageUrl = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), static_cast<int>(this->pageurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClickRecord.pageUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pageurl(), target);
  }

  // optional uint32 duration = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ClickRecord)
  return target;
}

size_t ClickRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ClickRecord)
  size_t total_size = 0;

  if (has_qid()) {
    // required string qid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  if (has_searchurl()) {
    // required string searchUrl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searchurl());
  }

  if (has_time()) {
    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_evtype()) {
    // required .ru.mail.go.webbase.blobs.Evtype evtype = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->evtype());
  }

  return total_size;
}
size_t ClickRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ClickRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000245) ^ 0x00000245) == 0) {  // All required fields are present.
    // required string qid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());

    // required string searchUrl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searchurl());

    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required .ru.mail.go.webbase.blobs.Evtype evtype = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->evtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string mrcu = 2;
  if (has_mrcu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mrcu());
  }

  if (_has_bits_[0 / 32] & 56u) {
    // optional string resultUrl = 6;
    if (has_resulturl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resulturl());
    }

    // optional string pixel = 8;
    if (has_pixel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pixel());
    }

    // optional string pageUrl = 10;
    if (has_pageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pageurl());
    }

  }
  // optional uint32 duration = 11;
  if (has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  // optional .ru.mail.go.webbase.blobs.ClickArea area = 9;
  if (has_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->area());
  }

  // optional .ru.mail.go.webbase.blobs.Device device = 7;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ClickRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ClickRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClickRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ClickRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ClickRecord)
    MergeFrom(*source);
  }
}

void ClickRecord::MergeFrom(const ClickRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ClickRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qid();
      qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mrcu();
      mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_searchurl();
      searchurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_resulturl();
      resulturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resulturl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_pixel();
      pixel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pixel_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_pageurl();
      pageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pageurl_);
    }
    if (cached_has_bits & 0x00000040u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000080u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000200u) {
      evtype_ = from.evtype_;
    }
    if (cached_has_bits & 0x00000400u) {
      device_ = from.device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClickRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ClickRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickRecord::CopyFrom(const ClickRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ClickRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000245) != 0x00000245) return false;
  return true;
}

void ClickRecord::Swap(ClickRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClickRecord::InternalSwap(ClickRecord* other) {
  using std::swap;
  qid_.Swap(&other->qid_);
  mrcu_.Swap(&other->mrcu_);
  searchurl_.Swap(&other->searchurl_);
  resulturl_.Swap(&other->resulturl_);
  pixel_.Swap(&other->pixel_);
  pageurl_.Swap(&other->pageurl_);
  swap(time_, other->time_);
  swap(duration_, other->duration_);
  swap(area_, other->area_);
  swap(evtype_, other->evtype_);
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClickRecord::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClickRecord

// required string qid = 1;
bool ClickRecord::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClickRecord::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
void ClickRecord::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClickRecord::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
const ::std::string& ClickRecord::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.qid)
  return qid_.GetNoArena();
}
void ClickRecord::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.qid)
}
#if LANG_CXX11
void ClickRecord::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.qid)
}
#endif
void ClickRecord::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.qid)
}
void ClickRecord::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.qid)
}
::std::string* ClickRecord::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClickRecord::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClickRecord::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.qid)
}

// optional string mrcu = 2;
bool ClickRecord::has_mrcu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClickRecord::set_has_mrcu() {
  _has_bits_[0] |= 0x00000002u;
}
void ClickRecord::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClickRecord::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
const ::std::string& ClickRecord::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
  return mrcu_.GetNoArena();
}
void ClickRecord::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}
#if LANG_CXX11
void ClickRecord::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}
#endif
void ClickRecord::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}
void ClickRecord::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}
::std::string* ClickRecord::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClickRecord::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClickRecord::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}

// required string searchUrl = 3;
bool ClickRecord::has_searchurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClickRecord::set_has_searchurl() {
  _has_bits_[0] |= 0x00000004u;
}
void ClickRecord::clear_has_searchurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClickRecord::clear_searchurl() {
  searchurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchurl();
}
const ::std::string& ClickRecord::searchurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
  return searchurl_.GetNoArena();
}
void ClickRecord::set_searchurl(const ::std::string& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}
#if LANG_CXX11
void ClickRecord::set_searchurl(::std::string&& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}
#endif
void ClickRecord::set_searchurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}
void ClickRecord::set_searchurl(const char* value, size_t size) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}
::std::string* ClickRecord::mutable_searchurl() {
  set_has_searchurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
  return searchurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClickRecord::release_searchurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
  clear_has_searchurl();
  return searchurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClickRecord::set_allocated_searchurl(::std::string* searchurl) {
  if (searchurl != NULL) {
    set_has_searchurl();
  } else {
    clear_has_searchurl();
  }
  searchurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}

// required uint64 time = 4;
bool ClickRecord::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClickRecord::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void ClickRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClickRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 ClickRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.time)
  return time_;
}
void ClickRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.time)
}

// required .ru.mail.go.webbase.blobs.Evtype evtype = 5;
bool ClickRecord::has_evtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ClickRecord::set_has_evtype() {
  _has_bits_[0] |= 0x00000200u;
}
void ClickRecord::clear_has_evtype() {
  _has_bits_[0] &= ~0x00000200u;
}
void ClickRecord::clear_evtype() {
  evtype_ = 1;
  clear_has_evtype();
}
::ru::mail::go::webbase::blobs::Evtype ClickRecord::evtype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.evtype)
  return static_cast< ::ru::mail::go::webbase::blobs::Evtype >(evtype_);
}
void ClickRecord::set_evtype(::ru::mail::go::webbase::blobs::Evtype value) {
  assert(::ru::mail::go::webbase::blobs::Evtype_IsValid(value));
  set_has_evtype();
  evtype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.evtype)
}

// optional string resultUrl = 6;
bool ClickRecord::has_resulturl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClickRecord::set_has_resulturl() {
  _has_bits_[0] |= 0x00000008u;
}
void ClickRecord::clear_has_resulturl() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClickRecord::clear_resulturl() {
  resulturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resulturl();
}
const ::std::string& ClickRecord::resulturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
  return resulturl_.GetNoArena();
}
void ClickRecord::set_resulturl(const ::std::string& value) {
  set_has_resulturl();
  resulturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}
#if LANG_CXX11
void ClickRecord::set_resulturl(::std::string&& value) {
  set_has_resulturl();
  resulturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}
#endif
void ClickRecord::set_resulturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resulturl();
  resulturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}
void ClickRecord::set_resulturl(const char* value, size_t size) {
  set_has_resulturl();
  resulturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}
::std::string* ClickRecord::mutable_resulturl() {
  set_has_resulturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
  return resulturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClickRecord::release_resulturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
  clear_has_resulturl();
  return resulturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClickRecord::set_allocated_resulturl(::std::string* resulturl) {
  if (resulturl != NULL) {
    set_has_resulturl();
  } else {
    clear_has_resulturl();
  }
  resulturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resulturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}

// optional .ru.mail.go.webbase.blobs.Device device = 7;
bool ClickRecord::has_device() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ClickRecord::set_has_device() {
  _has_bits_[0] |= 0x00000400u;
}
void ClickRecord::clear_has_device() {
  _has_bits_[0] &= ~0x00000400u;
}
void ClickRecord::clear_device() {
  device_ = 1;
  clear_has_device();
}
::ru::mail::go::webbase::blobs::Device ClickRecord::device() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.device)
  return static_cast< ::ru::mail::go::webbase::blobs::Device >(device_);
}
void ClickRecord::set_device(::ru::mail::go::webbase::blobs::Device value) {
  assert(::ru::mail::go::webbase::blobs::Device_IsValid(value));
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.device)
}

// optional string pixel = 8;
bool ClickRecord::has_pixel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClickRecord::set_has_pixel() {
  _has_bits_[0] |= 0x00000010u;
}
void ClickRecord::clear_has_pixel() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClickRecord::clear_pixel() {
  pixel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pixel();
}
const ::std::string& ClickRecord::pixel() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.pixel)
  return pixel_.GetNoArena();
}
void ClickRecord::set_pixel(const ::std::string& value) {
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}
#if LANG_CXX11
void ClickRecord::set_pixel(::std::string&& value) {
  set_has_pixel();
  pixel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}
#endif
void ClickRecord::set_pixel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}
void ClickRecord::set_pixel(const char* value, size_t size) {
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}
::std::string* ClickRecord::mutable_pixel() {
  set_has_pixel();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.pixel)
  return pixel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClickRecord::release_pixel() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.pixel)
  clear_has_pixel();
  return pixel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClickRecord::set_allocated_pixel(::std::string* pixel) {
  if (pixel != NULL) {
    set_has_pixel();
  } else {
    clear_has_pixel();
  }
  pixel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pixel);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}

// optional .ru.mail.go.webbase.blobs.ClickArea area = 9;
bool ClickRecord::has_area() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ClickRecord::set_has_area() {
  _has_bits_[0] |= 0x00000100u;
}
void ClickRecord::clear_has_area() {
  _has_bits_[0] &= ~0x00000100u;
}
void ClickRecord::clear_area() {
  area_ = 1;
  clear_has_area();
}
::ru::mail::go::webbase::blobs::ClickArea ClickRecord::area() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.area)
  return static_cast< ::ru::mail::go::webbase::blobs::ClickArea >(area_);
}
void ClickRecord::set_area(::ru::mail::go::webbase::blobs::ClickArea value) {
  assert(::ru::mail::go::webbase::blobs::ClickArea_IsValid(value));
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.area)
}

// optional string pageUrl = 10;
bool ClickRecord::has_pageurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClickRecord::set_has_pageurl() {
  _has_bits_[0] |= 0x00000020u;
}
void ClickRecord::clear_has_pageurl() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClickRecord::clear_pageurl() {
  pageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pageurl();
}
const ::std::string& ClickRecord::pageurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
  return pageurl_.GetNoArena();
}
void ClickRecord::set_pageurl(const ::std::string& value) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}
#if LANG_CXX11
void ClickRecord::set_pageurl(::std::string&& value) {
  set_has_pageurl();
  pageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}
#endif
void ClickRecord::set_pageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}
void ClickRecord::set_pageurl(const char* value, size_t size) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}
::std::string* ClickRecord::mutable_pageurl() {
  set_has_pageurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
  return pageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClickRecord::release_pageurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
  clear_has_pageurl();
  return pageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClickRecord::set_allocated_pageurl(::std::string* pageurl) {
  if (pageurl != NULL) {
    set_has_pageurl();
  } else {
    clear_has_pageurl();
  }
  pageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pageurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}

// optional uint32 duration = 11;
bool ClickRecord::has_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClickRecord::set_has_duration() {
  _has_bits_[0] |= 0x00000080u;
}
void ClickRecord::clear_has_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClickRecord::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 ClickRecord::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.duration)
  return duration_;
}
void ClickRecord::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlsRecord::kQidFieldNumber;
const int UrlsRecord::kUrlFieldNumber;
const int UrlsRecord::kTimeFieldNumber;
const int UrlsRecord::kMessageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlsRecord::UrlsRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.UrlsRecord)
}
UrlsRecord::UrlsRecord(const UrlsRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_(from.url_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qid()) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_type()) {
    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.UrlsRecord)
}

void UrlsRecord::SharedCtor() {
  _cached_size_ = 0;
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

UrlsRecord::~UrlsRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.UrlsRecord)
  SharedDtor();
}

void UrlsRecord::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UrlsRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlsRecord::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlsRecord& UrlsRecord::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlsRecord* UrlsRecord::New(::google::protobuf::Arena* arena) const {
  UrlsRecord* n = new UrlsRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.UrlsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!qid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!message_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_type_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlsRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.UrlsRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string qid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlsRecord.qid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url(this->url_size() - 1).data(),
            static_cast<int>(this->url(this->url_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlsRecord.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_type().data(), static_cast<int>(this->message_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlsRecord.message_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.UrlsRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.UrlsRecord)
  return false;
#undef DO_
}

void UrlsRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.UrlsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string qid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlsRecord.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlsRecord.url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(i), output);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional string message_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlsRecord.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.UrlsRecord)
}

::google::protobuf::uint8* UrlsRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.UrlsRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string qid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlsRecord.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlsRecord.url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->url(i), target);
  }

  // optional uint64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional string message_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), static_cast<int>(this->message_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlsRecord.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.UrlsRecord)
  return target;
}

size_t UrlsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.UrlsRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string url = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->url_size());
  for (int i = 0, n = this->url_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string qid = 1;
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qid());
    }

    // optional string message_type = 4;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlsRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.UrlsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlsRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlsRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.UrlsRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.UrlsRecord)
    MergeFrom(*source);
  }
}

void UrlsRecord::MergeFrom(const UrlsRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.UrlsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_.MergeFrom(from.url_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qid();
      qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_type();
      message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UrlsRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.UrlsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlsRecord::CopyFrom(const UrlsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.UrlsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlsRecord::IsInitialized() const {
  return true;
}

void UrlsRecord::Swap(UrlsRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlsRecord::InternalSwap(UrlsRecord* other) {
  using std::swap;
  url_.InternalSwap(&other->url_);
  qid_.Swap(&other->qid_);
  message_type_.Swap(&other->message_type_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlsRecord::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlsRecord

// optional string qid = 1;
bool UrlsRecord::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UrlsRecord::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
void UrlsRecord::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UrlsRecord::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
const ::std::string& UrlsRecord::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlsRecord.qid)
  return qid_.GetNoArena();
}
void UrlsRecord::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}
#if LANG_CXX11
void UrlsRecord::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}
#endif
void UrlsRecord::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}
void UrlsRecord::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}
::std::string* UrlsRecord::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlsRecord.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlsRecord::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlsRecord.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlsRecord::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}

// repeated string url = 2;
int UrlsRecord::url_size() const {
  return url_.size();
}
void UrlsRecord::clear_url() {
  url_.Clear();
}
const ::std::string& UrlsRecord::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return url_.Get(index);
}
::std::string* UrlsRecord::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return url_.Mutable(index);
}
void UrlsRecord::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UrlsRecord::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
void UrlsRecord::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
void UrlsRecord::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
::std::string* UrlsRecord::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return url_.Add();
}
void UrlsRecord::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
#if LANG_CXX11
void UrlsRecord::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
#endif
void UrlsRecord::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
void UrlsRecord::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlsRecord::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return url_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UrlsRecord::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return &url_;
}

// optional uint64 time = 3;
bool UrlsRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UrlsRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void UrlsRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void UrlsRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 UrlsRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlsRecord.time)
  return time_;
}
void UrlsRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.time)
}

// optional string message_type = 4;
bool UrlsRecord::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UrlsRecord::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
void UrlsRecord::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void UrlsRecord::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_type();
}
const ::std::string& UrlsRecord::message_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
  return message_type_.GetNoArena();
}
void UrlsRecord::set_message_type(const ::std::string& value) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}
#if LANG_CXX11
void UrlsRecord::set_message_type(::std::string&& value) {
  set_has_message_type();
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}
#endif
void UrlsRecord::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}
void UrlsRecord::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}
::std::string* UrlsRecord::mutable_message_type() {
  set_has_message_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlsRecord::release_message_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
  clear_has_message_type();
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlsRecord::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BartertownRecord::kQidFieldNumber;
const int BartertownRecord::kMrcuFieldNumber;
const int BartertownRecord::kSearchUrlFieldNumber;
const int BartertownRecord::kTimeFieldNumber;
const int BartertownRecord::kVrtFieldNumber;
const int BartertownRecord::kSearcherFieldNumber;
const int BartertownRecord::kSfFieldNumber;
const int BartertownRecord::kQueryFieldNumber;
const int BartertownRecord::kSexFieldNumber;
const int BartertownRecord::kAgeFieldNumber;
const int BartertownRecord::kRegionFieldNumber;
const int BartertownRecord::kExpidFieldNumber;
const int BartertownRecord::kCurQidFieldNumber;
const int BartertownRecord::kVkUserIdFieldNumber;
const int BartertownRecord::kExtraFieldNumber;
const int BartertownRecord::kSplitFieldNumber;
const int BartertownRecord::kMobileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BartertownRecord::BartertownRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.BartertownRecord)
}
BartertownRecord::BartertownRecord(const BartertownRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qid()) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mrcu()) {
    mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
  }
  searchurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searchurl()) {
    searchurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchurl_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  curqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_curqid()) {
    curqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curqid_);
  }
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra()) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&searcher_) -
    reinterpret_cast<char*>(&time_)) + sizeof(searcher_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.BartertownRecord)
}

void BartertownRecord::SharedCtor() {
  _cached_size_ = 0;
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mobile_) -
      reinterpret_cast<char*>(&time_)) + sizeof(mobile_));
  sex_ = 1;
  vrt_ = 1;
  searcher_ = 1;
}

BartertownRecord::~BartertownRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.BartertownRecord)
  SharedDtor();
}

void BartertownRecord::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mrcu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BartertownRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BartertownRecord::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BartertownRecord& BartertownRecord::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

BartertownRecord* BartertownRecord::New(::google::protobuf::Arena* arena) const {
  BartertownRecord* n = new BartertownRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BartertownRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.BartertownRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!qid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mrcu_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mrcu_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!searchurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*searchurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!curqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*curqid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!extra_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extra_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sf_) -
        reinterpret_cast<char*>(&time_)) + sizeof(sf_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&age_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mobile_) -
        reinterpret_cast<char*>(&age_)) + sizeof(mobile_));
    sex_ = 1;
    vrt_ = 1;
  }
  searcher_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BartertownRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.BartertownRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string qid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.BartertownRecord.qid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mrcu = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mrcu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mrcu().data(), static_cast<int>(this->mrcu().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.BartertownRecord.mrcu");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string searchUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchurl().data(), static_cast<int>(this->searchurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.BartertownRecord.searchUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Vrt vrt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Vrt_IsValid(value)) {
            set_vrt(static_cast< ::ru::mail::go::webbase::blobs::Vrt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Searcher searcher = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Searcher_IsValid(value)) {
            set_searcher(static_cast< ::ru::mail::go::webbase::blobs::Searcher >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.BartertownRecord.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Sex_IsValid(value)) {
            set_sex(static_cast< ::ru::mail::go::webbase::blobs::Sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_expid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string curQid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curqid().data(), static_cast<int>(this->curqid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.BartertownRecord.curQid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 vkUserId = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_vkuserid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vkuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extra = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra().data(), static_cast<int>(this->extra().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.BartertownRecord.extra");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 split = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_split();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mobile = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_mobile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.BartertownRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.BartertownRecord)
  return false;
#undef DO_
}

void BartertownRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.BartertownRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string qid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // optional string mrcu = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.mrcu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mrcu(), output);
  }

  // required string searchUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchurl().data(), static_cast<int>(this->searchurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.searchUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->searchurl(), output);
  }

  // required uint64 time = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Vrt vrt = 5;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->vrt(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Searcher searcher = 6;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->searcher(), output);
  }

  // optional uint32 sf = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sf(), output);
  }

  // optional string query = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->query(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->sex(), output);
  }

  // optional uint32 age = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->age(), output);
  }

  // optional uint32 region = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->region(), output);
  }

  // optional uint32 expid = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->expid(), output);
  }

  // optional string curQid = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curqid().data(), static_cast<int>(this->curqid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.curQid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->curqid(), output);
  }

  // optional uint64 vkUserId = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->vkuserid(), output);
  }

  // optional string extra = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->extra(), output);
  }

  // optional uint32 split = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->split(), output);
  }

  // optional bool mobile = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->mobile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.BartertownRecord)
}

::google::protobuf::uint8* BartertownRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.BartertownRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string qid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // optional string mrcu = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.mrcu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mrcu(), target);
  }

  // required string searchUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchurl().data(), static_cast<int>(this->searchurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.searchUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->searchurl(), target);
  }

  // required uint64 time = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Vrt vrt = 5;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->vrt(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Searcher searcher = 6;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->searcher(), target);
  }

  // optional uint32 sf = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sf(), target);
  }

  // optional string query = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->query(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->sex(), target);
  }

  // optional uint32 age = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->age(), target);
  }

  // optional uint32 region = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->region(), target);
  }

  // optional uint32 expid = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->expid(), target);
  }

  // optional string curQid = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curqid().data(), static_cast<int>(this->curqid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.curQid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->curqid(), target);
  }

  // optional uint64 vkUserId = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->vkuserid(), target);
  }

  // optional string extra = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BartertownRecord.extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->extra(), target);
  }

  // optional uint32 split = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->split(), target);
  }

  // optional bool mobile = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->mobile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.BartertownRecord)
  return target;
}

size_t BartertownRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.BartertownRecord)
  size_t total_size = 0;

  if (has_qid()) {
    // required string qid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  if (has_searchurl()) {
    // required string searchUrl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searchurl());
  }

  if (has_time()) {
    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t BartertownRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.BartertownRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000045) ^ 0x00000045) == 0) {  // All required fields are present.
    // required string qid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());

    // required string searchUrl = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searchurl());

    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string mrcu = 2;
  if (has_mrcu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mrcu());
  }

  if (_has_bits_[0 / 32] & 56u) {
    // optional string query = 8;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string curQid = 13;
    if (has_curqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curqid());
    }

    // optional string extra = 15;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

  }
  // optional uint32 sf = 7;
  if (has_sf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sf());
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 age = 10;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 region = 11;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional uint32 expid = 12;
    if (has_expid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expid());
    }

    // optional uint64 vkUserId = 14;
    if (has_vkuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vkuserid());
    }

    // optional uint32 split = 16;
    if (has_split()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->split());
    }

    // optional bool mobile = 17;
    if (has_mobile()) {
      total_size += 2 + 1;
    }

    // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional .ru.mail.go.webbase.blobs.Vrt vrt = 5;
    if (has_vrt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vrt());
    }

  }
  // optional .ru.mail.go.webbase.blobs.Searcher searcher = 6;
  if (has_searcher()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->searcher());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BartertownRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.BartertownRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const BartertownRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BartertownRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.BartertownRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.BartertownRecord)
    MergeFrom(*source);
  }
}

void BartertownRecord::MergeFrom(const BartertownRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.BartertownRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qid();
      qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mrcu();
      mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_searchurl();
      searchurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_curqid();
      curqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curqid_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_extra();
      extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
    }
    if (cached_has_bits & 0x00000040u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000080u) {
      sf_ = from.sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000200u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000400u) {
      expid_ = from.expid_;
    }
    if (cached_has_bits & 0x00000800u) {
      vkuserid_ = from.vkuserid_;
    }
    if (cached_has_bits & 0x00001000u) {
      split_ = from.split_;
    }
    if (cached_has_bits & 0x00002000u) {
      mobile_ = from.mobile_;
    }
    if (cached_has_bits & 0x00004000u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00008000u) {
      vrt_ = from.vrt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_searcher(from.searcher());
  }
}

void BartertownRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.BartertownRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BartertownRecord::CopyFrom(const BartertownRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.BartertownRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BartertownRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000045) != 0x00000045) return false;
  return true;
}

void BartertownRecord::Swap(BartertownRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BartertownRecord::InternalSwap(BartertownRecord* other) {
  using std::swap;
  qid_.Swap(&other->qid_);
  mrcu_.Swap(&other->mrcu_);
  searchurl_.Swap(&other->searchurl_);
  query_.Swap(&other->query_);
  curqid_.Swap(&other->curqid_);
  extra_.Swap(&other->extra_);
  swap(time_, other->time_);
  swap(sf_, other->sf_);
  swap(age_, other->age_);
  swap(region_, other->region_);
  swap(expid_, other->expid_);
  swap(vkuserid_, other->vkuserid_);
  swap(split_, other->split_);
  swap(mobile_, other->mobile_);
  swap(sex_, other->sex_);
  swap(vrt_, other->vrt_);
  swap(searcher_, other->searcher_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BartertownRecord::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BartertownRecord

// required string qid = 1;
bool BartertownRecord::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BartertownRecord::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
void BartertownRecord::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BartertownRecord::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
const ::std::string& BartertownRecord::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.qid)
  return qid_.GetNoArena();
}
void BartertownRecord::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}
#if LANG_CXX11
void BartertownRecord::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}
#endif
void BartertownRecord::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}
void BartertownRecord::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}
::std::string* BartertownRecord::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BartertownRecord::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BartertownRecord::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}

// optional string mrcu = 2;
bool BartertownRecord::has_mrcu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BartertownRecord::set_has_mrcu() {
  _has_bits_[0] |= 0x00000002u;
}
void BartertownRecord::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000002u;
}
void BartertownRecord::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
const ::std::string& BartertownRecord::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
  return mrcu_.GetNoArena();
}
void BartertownRecord::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}
#if LANG_CXX11
void BartertownRecord::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}
#endif
void BartertownRecord::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}
void BartertownRecord::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}
::std::string* BartertownRecord::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BartertownRecord::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BartertownRecord::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}

// required string searchUrl = 3;
bool BartertownRecord::has_searchurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BartertownRecord::set_has_searchurl() {
  _has_bits_[0] |= 0x00000004u;
}
void BartertownRecord::clear_has_searchurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void BartertownRecord::clear_searchurl() {
  searchurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchurl();
}
const ::std::string& BartertownRecord::searchurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
  return searchurl_.GetNoArena();
}
void BartertownRecord::set_searchurl(const ::std::string& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}
#if LANG_CXX11
void BartertownRecord::set_searchurl(::std::string&& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}
#endif
void BartertownRecord::set_searchurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}
void BartertownRecord::set_searchurl(const char* value, size_t size) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}
::std::string* BartertownRecord::mutable_searchurl() {
  set_has_searchurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
  return searchurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BartertownRecord::release_searchurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
  clear_has_searchurl();
  return searchurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BartertownRecord::set_allocated_searchurl(::std::string* searchurl) {
  if (searchurl != NULL) {
    set_has_searchurl();
  } else {
    clear_has_searchurl();
  }
  searchurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}

// required uint64 time = 4;
bool BartertownRecord::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BartertownRecord::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void BartertownRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void BartertownRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 BartertownRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.time)
  return time_;
}
void BartertownRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.time)
}

// optional .ru.mail.go.webbase.blobs.Vrt vrt = 5;
bool BartertownRecord::has_vrt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BartertownRecord::set_has_vrt() {
  _has_bits_[0] |= 0x00008000u;
}
void BartertownRecord::clear_has_vrt() {
  _has_bits_[0] &= ~0x00008000u;
}
void BartertownRecord::clear_vrt() {
  vrt_ = 1;
  clear_has_vrt();
}
::ru::mail::go::webbase::blobs::Vrt BartertownRecord::vrt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.vrt)
  return static_cast< ::ru::mail::go::webbase::blobs::Vrt >(vrt_);
}
void BartertownRecord::set_vrt(::ru::mail::go::webbase::blobs::Vrt value) {
  assert(::ru::mail::go::webbase::blobs::Vrt_IsValid(value));
  set_has_vrt();
  vrt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.vrt)
}

// optional .ru.mail.go.webbase.blobs.Searcher searcher = 6;
bool BartertownRecord::has_searcher() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BartertownRecord::set_has_searcher() {
  _has_bits_[0] |= 0x00010000u;
}
void BartertownRecord::clear_has_searcher() {
  _has_bits_[0] &= ~0x00010000u;
}
void BartertownRecord::clear_searcher() {
  searcher_ = 1;
  clear_has_searcher();
}
::ru::mail::go::webbase::blobs::Searcher BartertownRecord::searcher() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.searcher)
  return static_cast< ::ru::mail::go::webbase::blobs::Searcher >(searcher_);
}
void BartertownRecord::set_searcher(::ru::mail::go::webbase::blobs::Searcher value) {
  assert(::ru::mail::go::webbase::blobs::Searcher_IsValid(value));
  set_has_searcher();
  searcher_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.searcher)
}

// optional uint32 sf = 7;
bool BartertownRecord::has_sf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BartertownRecord::set_has_sf() {
  _has_bits_[0] |= 0x00000080u;
}
void BartertownRecord::clear_has_sf() {
  _has_bits_[0] &= ~0x00000080u;
}
void BartertownRecord::clear_sf() {
  sf_ = 0u;
  clear_has_sf();
}
::google::protobuf::uint32 BartertownRecord::sf() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.sf)
  return sf_;
}
void BartertownRecord::set_sf(::google::protobuf::uint32 value) {
  set_has_sf();
  sf_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.sf)
}

// optional string query = 8;
bool BartertownRecord::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BartertownRecord::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
void BartertownRecord::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
void BartertownRecord::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& BartertownRecord::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.query)
  return query_.GetNoArena();
}
void BartertownRecord::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.query)
}
#if LANG_CXX11
void BartertownRecord::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.query)
}
#endif
void BartertownRecord::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.query)
}
void BartertownRecord::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.query)
}
::std::string* BartertownRecord::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BartertownRecord::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BartertownRecord::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.query)
}

// optional .ru.mail.go.webbase.blobs.Sex sex = 9;
bool BartertownRecord::has_sex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BartertownRecord::set_has_sex() {
  _has_bits_[0] |= 0x00004000u;
}
void BartertownRecord::clear_has_sex() {
  _has_bits_[0] &= ~0x00004000u;
}
void BartertownRecord::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
::ru::mail::go::webbase::blobs::Sex BartertownRecord::sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.sex)
  return static_cast< ::ru::mail::go::webbase::blobs::Sex >(sex_);
}
void BartertownRecord::set_sex(::ru::mail::go::webbase::blobs::Sex value) {
  assert(::ru::mail::go::webbase::blobs::Sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.sex)
}

// optional uint32 age = 10;
bool BartertownRecord::has_age() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BartertownRecord::set_has_age() {
  _has_bits_[0] |= 0x00000100u;
}
void BartertownRecord::clear_has_age() {
  _has_bits_[0] &= ~0x00000100u;
}
void BartertownRecord::clear_age() {
  age_ = 0u;
  clear_has_age();
}
::google::protobuf::uint32 BartertownRecord::age() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.age)
  return age_;
}
void BartertownRecord::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.age)
}

// optional uint32 region = 11;
bool BartertownRecord::has_region() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BartertownRecord::set_has_region() {
  _has_bits_[0] |= 0x00000200u;
}
void BartertownRecord::clear_has_region() {
  _has_bits_[0] &= ~0x00000200u;
}
void BartertownRecord::clear_region() {
  region_ = 0u;
  clear_has_region();
}
::google::protobuf::uint32 BartertownRecord::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.region)
  return region_;
}
void BartertownRecord::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.region)
}

// optional uint32 expid = 12;
bool BartertownRecord::has_expid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BartertownRecord::set_has_expid() {
  _has_bits_[0] |= 0x00000400u;
}
void BartertownRecord::clear_has_expid() {
  _has_bits_[0] &= ~0x00000400u;
}
void BartertownRecord::clear_expid() {
  expid_ = 0u;
  clear_has_expid();
}
::google::protobuf::uint32 BartertownRecord::expid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.expid)
  return expid_;
}
void BartertownRecord::set_expid(::google::protobuf::uint32 value) {
  set_has_expid();
  expid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.expid)
}

// optional string curQid = 13;
bool BartertownRecord::has_curqid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BartertownRecord::set_has_curqid() {
  _has_bits_[0] |= 0x00000010u;
}
void BartertownRecord::clear_has_curqid() {
  _has_bits_[0] &= ~0x00000010u;
}
void BartertownRecord::clear_curqid() {
  curqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_curqid();
}
const ::std::string& BartertownRecord::curqid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
  return curqid_.GetNoArena();
}
void BartertownRecord::set_curqid(const ::std::string& value) {
  set_has_curqid();
  curqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}
#if LANG_CXX11
void BartertownRecord::set_curqid(::std::string&& value) {
  set_has_curqid();
  curqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}
#endif
void BartertownRecord::set_curqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_curqid();
  curqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}
void BartertownRecord::set_curqid(const char* value, size_t size) {
  set_has_curqid();
  curqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}
::std::string* BartertownRecord::mutable_curqid() {
  set_has_curqid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
  return curqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BartertownRecord::release_curqid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
  clear_has_curqid();
  return curqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BartertownRecord::set_allocated_curqid(::std::string* curqid) {
  if (curqid != NULL) {
    set_has_curqid();
  } else {
    clear_has_curqid();
  }
  curqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curqid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}

// optional uint64 vkUserId = 14;
bool BartertownRecord::has_vkuserid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BartertownRecord::set_has_vkuserid() {
  _has_bits_[0] |= 0x00000800u;
}
void BartertownRecord::clear_has_vkuserid() {
  _has_bits_[0] &= ~0x00000800u;
}
void BartertownRecord::clear_vkuserid() {
  vkuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_vkuserid();
}
::google::protobuf::uint64 BartertownRecord::vkuserid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.vkUserId)
  return vkuserid_;
}
void BartertownRecord::set_vkuserid(::google::protobuf::uint64 value) {
  set_has_vkuserid();
  vkuserid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.vkUserId)
}

// optional string extra = 15;
bool BartertownRecord::has_extra() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BartertownRecord::set_has_extra() {
  _has_bits_[0] |= 0x00000020u;
}
void BartertownRecord::clear_has_extra() {
  _has_bits_[0] &= ~0x00000020u;
}
void BartertownRecord::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
const ::std::string& BartertownRecord::extra() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.extra)
  return extra_.GetNoArena();
}
void BartertownRecord::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}
#if LANG_CXX11
void BartertownRecord::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}
#endif
void BartertownRecord::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}
void BartertownRecord::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}
::std::string* BartertownRecord::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BartertownRecord::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BartertownRecord::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}

// optional uint32 split = 16;
bool BartertownRecord::has_split() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BartertownRecord::set_has_split() {
  _has_bits_[0] |= 0x00001000u;
}
void BartertownRecord::clear_has_split() {
  _has_bits_[0] &= ~0x00001000u;
}
void BartertownRecord::clear_split() {
  split_ = 0u;
  clear_has_split();
}
::google::protobuf::uint32 BartertownRecord::split() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.split)
  return split_;
}
void BartertownRecord::set_split(::google::protobuf::uint32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.split)
}

// optional bool mobile = 17;
bool BartertownRecord::has_mobile() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BartertownRecord::set_has_mobile() {
  _has_bits_[0] |= 0x00002000u;
}
void BartertownRecord::clear_has_mobile() {
  _has_bits_[0] &= ~0x00002000u;
}
void BartertownRecord::clear_mobile() {
  mobile_ = false;
  clear_has_mobile();
}
bool BartertownRecord::mobile() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.mobile)
  return mobile_;
}
void BartertownRecord::set_mobile(bool value) {
  set_has_mobile();
  mobile_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.mobile)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VarRecord::kCrecFieldNumber;
const int VarRecord::kUrecFieldNumber;
const int VarRecord::kBrecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VarRecord::VarRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VarRecord)
}
VarRecord::VarRecord(const VarRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crec()) {
    crec_ = new ::ru::mail::go::webbase::blobs::ClickRecord(*from.crec_);
  } else {
    crec_ = NULL;
  }
  if (from.has_urec()) {
    urec_ = new ::ru::mail::go::webbase::blobs::UrlsRecord(*from.urec_);
  } else {
    urec_ = NULL;
  }
  if (from.has_brec()) {
    brec_ = new ::ru::mail::go::webbase::blobs::BartertownRecord(*from.brec_);
  } else {
    brec_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VarRecord)
}

void VarRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&crec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brec_) -
      reinterpret_cast<char*>(&crec_)) + sizeof(brec_));
}

VarRecord::~VarRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VarRecord)
  SharedDtor();
}

void VarRecord::SharedDtor() {
  if (this != internal_default_instance()) delete crec_;
  if (this != internal_default_instance()) delete urec_;
  if (this != internal_default_instance()) delete brec_;
}

void VarRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarRecord::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VarRecord& VarRecord::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

VarRecord* VarRecord::New(::google::protobuf::Arena* arena) const {
  VarRecord* n = new VarRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VarRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VarRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(crec_ != NULL);
      crec_->::ru::mail::go::webbase::blobs::ClickRecord::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(urec_ != NULL);
      urec_->::ru::mail::go::webbase::blobs::UrlsRecord::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brec_ != NULL);
      brec_->::ru::mail::go::webbase::blobs::BartertownRecord::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VarRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VarRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.ClickRecord crec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_urec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.BartertownRecord brec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VarRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VarRecord)
  return false;
#undef DO_
}

void VarRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VarRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.ClickRecord crec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->crec_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->urec_, output);
  }

  // optional .ru.mail.go.webbase.blobs.BartertownRecord brec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->brec_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VarRecord)
}

::google::protobuf::uint8* VarRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VarRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.ClickRecord crec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->crec_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->urec_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.BartertownRecord brec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->brec_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VarRecord)
  return target;
}

size_t VarRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VarRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ru.mail.go.webbase.blobs.ClickRecord crec = 1;
    if (has_crec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crec_);
    }

    // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
    if (has_urec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->urec_);
    }

    // optional .ru.mail.go.webbase.blobs.BartertownRecord brec = 3;
    if (has_brec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->brec_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VarRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const VarRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VarRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VarRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VarRecord)
    MergeFrom(*source);
  }
}

void VarRecord::MergeFrom(const VarRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VarRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_crec()->::ru::mail::go::webbase::blobs::ClickRecord::MergeFrom(from.crec());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_urec()->::ru::mail::go::webbase::blobs::UrlsRecord::MergeFrom(from.urec());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_brec()->::ru::mail::go::webbase::blobs::BartertownRecord::MergeFrom(from.brec());
    }
  }
}

void VarRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VarRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarRecord::CopyFrom(const VarRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VarRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarRecord::IsInitialized() const {
  if (has_crec()) {
    if (!this->crec_->IsInitialized()) return false;
  }
  if (has_brec()) {
    if (!this->brec_->IsInitialized()) return false;
  }
  return true;
}

void VarRecord::Swap(VarRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VarRecord::InternalSwap(VarRecord* other) {
  using std::swap;
  swap(crec_, other->crec_);
  swap(urec_, other->urec_);
  swap(brec_, other->brec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VarRecord::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VarRecord

// optional .ru.mail.go.webbase.blobs.ClickRecord crec = 1;
bool VarRecord::has_crec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VarRecord::set_has_crec() {
  _has_bits_[0] |= 0x00000001u;
}
void VarRecord::clear_has_crec() {
  _has_bits_[0] &= ~0x00000001u;
}
void VarRecord::clear_crec() {
  if (crec_ != NULL) crec_->::ru::mail::go::webbase::blobs::ClickRecord::Clear();
  clear_has_crec();
}
const ::ru::mail::go::webbase::blobs::ClickRecord& VarRecord::crec() const {
  const ::ru::mail::go::webbase::blobs::ClickRecord* p = crec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarRecord.crec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ClickRecord*>(
      &::ru::mail::go::webbase::blobs::_ClickRecord_default_instance_);
}
::ru::mail::go::webbase::blobs::ClickRecord* VarRecord::mutable_crec() {
  set_has_crec();
  if (crec_ == NULL) {
    crec_ = new ::ru::mail::go::webbase::blobs::ClickRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarRecord.crec)
  return crec_;
}
::ru::mail::go::webbase::blobs::ClickRecord* VarRecord::release_crec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VarRecord.crec)
  clear_has_crec();
  ::ru::mail::go::webbase::blobs::ClickRecord* temp = crec_;
  crec_ = NULL;
  return temp;
}
void VarRecord::set_allocated_crec(::ru::mail::go::webbase::blobs::ClickRecord* crec) {
  delete crec_;
  crec_ = crec;
  if (crec) {
    set_has_crec();
  } else {
    clear_has_crec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VarRecord.crec)
}

// optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
bool VarRecord::has_urec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VarRecord::set_has_urec() {
  _has_bits_[0] |= 0x00000002u;
}
void VarRecord::clear_has_urec() {
  _has_bits_[0] &= ~0x00000002u;
}
void VarRecord::clear_urec() {
  if (urec_ != NULL) urec_->::ru::mail::go::webbase::blobs::UrlsRecord::Clear();
  clear_has_urec();
}
const ::ru::mail::go::webbase::blobs::UrlsRecord& VarRecord::urec() const {
  const ::ru::mail::go::webbase::blobs::UrlsRecord* p = urec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarRecord.urec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlsRecord*>(
      &::ru::mail::go::webbase::blobs::_UrlsRecord_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlsRecord* VarRecord::mutable_urec() {
  set_has_urec();
  if (urec_ == NULL) {
    urec_ = new ::ru::mail::go::webbase::blobs::UrlsRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarRecord.urec)
  return urec_;
}
::ru::mail::go::webbase::blobs::UrlsRecord* VarRecord::release_urec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VarRecord.urec)
  clear_has_urec();
  ::ru::mail::go::webbase::blobs::UrlsRecord* temp = urec_;
  urec_ = NULL;
  return temp;
}
void VarRecord::set_allocated_urec(::ru::mail::go::webbase::blobs::UrlsRecord* urec) {
  delete urec_;
  urec_ = urec;
  if (urec) {
    set_has_urec();
  } else {
    clear_has_urec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VarRecord.urec)
}

// optional .ru.mail.go.webbase.blobs.BartertownRecord brec = 3;
bool VarRecord::has_brec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VarRecord::set_has_brec() {
  _has_bits_[0] |= 0x00000004u;
}
void VarRecord::clear_has_brec() {
  _has_bits_[0] &= ~0x00000004u;
}
void VarRecord::clear_brec() {
  if (brec_ != NULL) brec_->::ru::mail::go::webbase::blobs::BartertownRecord::Clear();
  clear_has_brec();
}
const ::ru::mail::go::webbase::blobs::BartertownRecord& VarRecord::brec() const {
  const ::ru::mail::go::webbase::blobs::BartertownRecord* p = brec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarRecord.brec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::BartertownRecord*>(
      &::ru::mail::go::webbase::blobs::_BartertownRecord_default_instance_);
}
::ru::mail::go::webbase::blobs::BartertownRecord* VarRecord::mutable_brec() {
  set_has_brec();
  if (brec_ == NULL) {
    brec_ = new ::ru::mail::go::webbase::blobs::BartertownRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarRecord.brec)
  return brec_;
}
::ru::mail::go::webbase::blobs::BartertownRecord* VarRecord::release_brec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VarRecord.brec)
  clear_has_brec();
  ::ru::mail::go::webbase::blobs::BartertownRecord* temp = brec_;
  brec_ = NULL;
  return temp;
}
void VarRecord::set_allocated_brec(::ru::mail::go::webbase::blobs::BartertownRecord* brec) {
  delete brec_;
  brec_ = brec;
  if (brec) {
    set_has_brec();
  } else {
    clear_has_brec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VarRecord.brec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialSession::kBrecFieldNumber;
const int PartialSession::kUrecFieldNumber;
const int PartialSession::kCrecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialSession::PartialSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PartialSession)
}
PartialSession::PartialSession(const PartialSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      crec_(from.crec_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_brec()) {
    brec_ = new ::ru::mail::go::webbase::blobs::BartertownRecord(*from.brec_);
  } else {
    brec_ = NULL;
  }
  if (from.has_urec()) {
    urec_ = new ::ru::mail::go::webbase::blobs::UrlsRecord(*from.urec_);
  } else {
    urec_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PartialSession)
}

void PartialSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&brec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&urec_) -
      reinterpret_cast<char*>(&brec_)) + sizeof(urec_));
}

PartialSession::~PartialSession() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PartialSession)
  SharedDtor();
}

void PartialSession::SharedDtor() {
  if (this != internal_default_instance()) delete brec_;
  if (this != internal_default_instance()) delete urec_;
}

void PartialSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartialSession::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartialSession& PartialSession::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartialSession* PartialSession::New(::google::protobuf::Arena* arena) const {
  PartialSession* n = new PartialSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartialSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PartialSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crec_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(brec_ != NULL);
      brec_->::ru::mail::go::webbase::blobs::BartertownRecord::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(urec_ != NULL);
      urec_->::ru::mail::go::webbase::blobs::UrlsRecord::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PartialSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PartialSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.BartertownRecord brec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_urec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.ClickRecord crec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PartialSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PartialSession)
  return false;
#undef DO_
}

void PartialSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PartialSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.BartertownRecord brec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->brec_, output);
  }

  // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->urec_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.ClickRecord crec = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crec_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->crec(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PartialSession)
}

::google::protobuf::uint8* PartialSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PartialSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.BartertownRecord brec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->brec_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->urec_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.ClickRecord crec = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crec_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->crec(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PartialSession)
  return target;
}

size_t PartialSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PartialSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.BartertownRecord brec = 1;
  if (has_brec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->brec_);
  }
  // repeated .ru.mail.go.webbase.blobs.ClickRecord crec = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->crec_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crec(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
  if (has_urec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->urec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartialSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PartialSession)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartialSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PartialSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PartialSession)
    MergeFrom(*source);
  }
}

void PartialSession::MergeFrom(const PartialSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PartialSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crec_.MergeFrom(from.crec_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_brec()->::ru::mail::go::webbase::blobs::BartertownRecord::MergeFrom(from.brec());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_urec()->::ru::mail::go::webbase::blobs::UrlsRecord::MergeFrom(from.urec());
    }
  }
}

void PartialSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PartialSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialSession::CopyFrom(const PartialSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PartialSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->crec())) return false;
  if (has_brec()) {
    if (!this->brec_->IsInitialized()) return false;
  }
  return true;
}

void PartialSession::Swap(PartialSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartialSession::InternalSwap(PartialSession* other) {
  using std::swap;
  crec_.InternalSwap(&other->crec_);
  swap(brec_, other->brec_);
  swap(urec_, other->urec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartialSession::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartialSession

// required .ru.mail.go.webbase.blobs.BartertownRecord brec = 1;
bool PartialSession::has_brec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PartialSession::set_has_brec() {
  _has_bits_[0] |= 0x00000001u;
}
void PartialSession::clear_has_brec() {
  _has_bits_[0] &= ~0x00000001u;
}
void PartialSession::clear_brec() {
  if (brec_ != NULL) brec_->::ru::mail::go::webbase::blobs::BartertownRecord::Clear();
  clear_has_brec();
}
const ::ru::mail::go::webbase::blobs::BartertownRecord& PartialSession::brec() const {
  const ::ru::mail::go::webbase::blobs::BartertownRecord* p = brec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PartialSession.brec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::BartertownRecord*>(
      &::ru::mail::go::webbase::blobs::_BartertownRecord_default_instance_);
}
::ru::mail::go::webbase::blobs::BartertownRecord* PartialSession::mutable_brec() {
  set_has_brec();
  if (brec_ == NULL) {
    brec_ = new ::ru::mail::go::webbase::blobs::BartertownRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PartialSession.brec)
  return brec_;
}
::ru::mail::go::webbase::blobs::BartertownRecord* PartialSession::release_brec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PartialSession.brec)
  clear_has_brec();
  ::ru::mail::go::webbase::blobs::BartertownRecord* temp = brec_;
  brec_ = NULL;
  return temp;
}
void PartialSession::set_allocated_brec(::ru::mail::go::webbase::blobs::BartertownRecord* brec) {
  delete brec_;
  brec_ = brec;
  if (brec) {
    set_has_brec();
  } else {
    clear_has_brec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PartialSession.brec)
}

// optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
bool PartialSession::has_urec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PartialSession::set_has_urec() {
  _has_bits_[0] |= 0x00000002u;
}
void PartialSession::clear_has_urec() {
  _has_bits_[0] &= ~0x00000002u;
}
void PartialSession::clear_urec() {
  if (urec_ != NULL) urec_->::ru::mail::go::webbase::blobs::UrlsRecord::Clear();
  clear_has_urec();
}
const ::ru::mail::go::webbase::blobs::UrlsRecord& PartialSession::urec() const {
  const ::ru::mail::go::webbase::blobs::UrlsRecord* p = urec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PartialSession.urec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlsRecord*>(
      &::ru::mail::go::webbase::blobs::_UrlsRecord_default_instance_);
}
::ru::mail::go::webbase::blobs::UrlsRecord* PartialSession::mutable_urec() {
  set_has_urec();
  if (urec_ == NULL) {
    urec_ = new ::ru::mail::go::webbase::blobs::UrlsRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PartialSession.urec)
  return urec_;
}
::ru::mail::go::webbase::blobs::UrlsRecord* PartialSession::release_urec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PartialSession.urec)
  clear_has_urec();
  ::ru::mail::go::webbase::blobs::UrlsRecord* temp = urec_;
  urec_ = NULL;
  return temp;
}
void PartialSession::set_allocated_urec(::ru::mail::go::webbase::blobs::UrlsRecord* urec) {
  delete urec_;
  urec_ = urec;
  if (urec) {
    set_has_urec();
  } else {
    clear_has_urec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PartialSession.urec)
}

// repeated .ru.mail.go.webbase.blobs.ClickRecord crec = 3;
int PartialSession::crec_size() const {
  return crec_.size();
}
void PartialSession::clear_crec() {
  crec_.Clear();
}
const ::ru::mail::go::webbase::blobs::ClickRecord& PartialSession::crec(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PartialSession.crec)
  return crec_.Get(index);
}
::ru::mail::go::webbase::blobs::ClickRecord* PartialSession::mutable_crec(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PartialSession.crec)
  return crec_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ClickRecord* PartialSession::add_crec() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PartialSession.crec)
  return crec_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ClickRecord >*
PartialSession::mutable_crec() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PartialSession.crec)
  return &crec_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ClickRecord >&
PartialSession::crec() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PartialSession.crec)
  return crec_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kTimeFieldNumber;
const int Event::kEvtypeFieldNumber;
const int Event::kPosFieldNumber;
const int Event::kDeviceFieldNumber;
const int Event::kPixelFieldNumber;
const int Event::kAreaFieldNumber;
const int Event::kDurationFieldNumber;
const int Event::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pixel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pixel()) {
    pixel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pixel_);
  }
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra()) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_) -
    reinterpret_cast<char*>(&time_)) + sizeof(device_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  pixel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&time_)) + sizeof(duration_));
  area_ = 1;
  evtype_ = 1;
  device_ = 1;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  pixel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!pixel_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pixel_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!extra_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extra_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&time_)) + sizeof(duration_));
    area_ = 1;
    evtype_ = 1;
    device_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.Evtype evtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Evtype_IsValid(value)) {
            set_evtype(static_cast< ::ru::mail::go::webbase::blobs::Evtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Device device = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Device_IsValid(value)) {
            set_device(static_cast< ::ru::mail::go::webbase::blobs::Device >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pixel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pixel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pixel().data(), static_cast<int>(this->pixel().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Event.pixel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ClickArea area = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ClickArea_IsValid(value)) {
            set_area(static_cast< ::ru::mail::go::webbase::blobs::ClickArea >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extra = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra().data(), static_cast<int>(this->extra().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Event.extra");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required .ru.mail.go.webbase.blobs.Evtype evtype = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->evtype(), output);
  }

  // optional uint32 pos = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Device device = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->device(), output);
  }

  // optional string pixel = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pixel().data(), static_cast<int>(this->pixel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Event.pixel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pixel(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ClickArea area = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->area(), output);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(), output);
  }

  // optional string extra = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Event.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->extra(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required .ru.mail.go.webbase.blobs.Evtype evtype = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->evtype(), target);
  }

  // optional uint32 pos = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Device device = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->device(), target);
  }

  // optional string pixel = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pixel().data(), static_cast<int>(this->pixel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Event.pixel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pixel(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ClickArea area = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->area(), target);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration(), target);
  }

  // optional string extra = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Event.extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->extra(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Event)
  return target;
}

size_t Event::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.Event)
  size_t total_size = 0;

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_evtype()) {
    // required .ru.mail.go.webbase.blobs.Evtype evtype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->evtype());
  }

  return total_size;
}
size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000044) ^ 0x00000044) == 0) {  // All required fields are present.
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required .ru.mail.go.webbase.blobs.Evtype evtype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->evtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string pixel = 5;
    if (has_pixel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pixel());
    }

    // optional string extra = 8;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 duration = 7;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional .ru.mail.go.webbase.blobs.ClickArea area = 6;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->area());
    }

  }
  // optional .ru.mail.go.webbase.blobs.Device device = 4;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pixel();
      pixel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pixel_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_extra();
      extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_ = from.pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000040u) {
      evtype_ = from.evtype_;
    }
    if (cached_has_bits & 0x00000080u) {
      device_ = from.device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000044) != 0x00000044) return false;
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  pixel_.Swap(&other->pixel_);
  extra_.Swap(&other->extra_);
  swap(time_, other->time_);
  swap(pos_, other->pos_);
  swap(duration_, other->duration_);
  swap(area_, other->area_);
  swap(evtype_, other->evtype_);
  swap(device_, other->device_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// required uint64 time = 1;
bool Event::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Event::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Event::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Event::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Event::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.time)
  return time_;
}
void Event::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.time)
}

// required .ru.mail.go.webbase.blobs.Evtype evtype = 2;
bool Event::has_evtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Event::set_has_evtype() {
  _has_bits_[0] |= 0x00000040u;
}
void Event::clear_has_evtype() {
  _has_bits_[0] &= ~0x00000040u;
}
void Event::clear_evtype() {
  evtype_ = 1;
  clear_has_evtype();
}
::ru::mail::go::webbase::blobs::Evtype Event::evtype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.evtype)
  return static_cast< ::ru::mail::go::webbase::blobs::Evtype >(evtype_);
}
void Event::set_evtype(::ru::mail::go::webbase::blobs::Evtype value) {
  assert(::ru::mail::go::webbase::blobs::Evtype_IsValid(value));
  set_has_evtype();
  evtype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.evtype)
}

// optional uint32 pos = 3;
bool Event::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Event::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
void Event::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
void Event::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
::google::protobuf::uint32 Event::pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.pos)
  return pos_;
}
void Event::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.pos)
}

// optional .ru.mail.go.webbase.blobs.Device device = 4;
bool Event::has_device() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Event::set_has_device() {
  _has_bits_[0] |= 0x00000080u;
}
void Event::clear_has_device() {
  _has_bits_[0] &= ~0x00000080u;
}
void Event::clear_device() {
  device_ = 1;
  clear_has_device();
}
::ru::mail::go::webbase::blobs::Device Event::device() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.device)
  return static_cast< ::ru::mail::go::webbase::blobs::Device >(device_);
}
void Event::set_device(::ru::mail::go::webbase::blobs::Device value) {
  assert(::ru::mail::go::webbase::blobs::Device_IsValid(value));
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.device)
}

// optional string pixel = 5;
bool Event::has_pixel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Event::set_has_pixel() {
  _has_bits_[0] |= 0x00000001u;
}
void Event::clear_has_pixel() {
  _has_bits_[0] &= ~0x00000001u;
}
void Event::clear_pixel() {
  pixel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pixel();
}
const ::std::string& Event::pixel() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.pixel)
  return pixel_.GetNoArena();
}
void Event::set_pixel(const ::std::string& value) {
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.pixel)
}
#if LANG_CXX11
void Event::set_pixel(::std::string&& value) {
  set_has_pixel();
  pixel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Event.pixel)
}
#endif
void Event::set_pixel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Event.pixel)
}
void Event::set_pixel(const char* value, size_t size) {
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Event.pixel)
}
::std::string* Event::mutable_pixel() {
  set_has_pixel();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Event.pixel)
  return pixel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Event::release_pixel() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Event.pixel)
  clear_has_pixel();
  return pixel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Event::set_allocated_pixel(::std::string* pixel) {
  if (pixel != NULL) {
    set_has_pixel();
  } else {
    clear_has_pixel();
  }
  pixel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pixel);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Event.pixel)
}

// optional .ru.mail.go.webbase.blobs.ClickArea area = 6;
bool Event::has_area() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Event::set_has_area() {
  _has_bits_[0] |= 0x00000020u;
}
void Event::clear_has_area() {
  _has_bits_[0] &= ~0x00000020u;
}
void Event::clear_area() {
  area_ = 1;
  clear_has_area();
}
::ru::mail::go::webbase::blobs::ClickArea Event::area() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.area)
  return static_cast< ::ru::mail::go::webbase::blobs::ClickArea >(area_);
}
void Event::set_area(::ru::mail::go::webbase::blobs::ClickArea value) {
  assert(::ru::mail::go::webbase::blobs::ClickArea_IsValid(value));
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.area)
}

// optional uint32 duration = 7;
bool Event::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Event::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void Event::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void Event::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 Event::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.duration)
  return duration_;
}
void Event::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.duration)
}

// optional string extra = 8;
bool Event::has_extra() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Event::set_has_extra() {
  _has_bits_[0] |= 0x00000002u;
}
void Event::clear_has_extra() {
  _has_bits_[0] &= ~0x00000002u;
}
void Event::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
const ::std::string& Event::extra() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.extra)
  return extra_.GetNoArena();
}
void Event::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.extra)
}
#if LANG_CXX11
void Event::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Event.extra)
}
#endif
void Event::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Event.extra)
}
void Event::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Event.extra)
}
::std::string* Event::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Event.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Event::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Event.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Event::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Event.extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerpItem::kUrlFieldNumber;
const int SerpItem::kDupsFieldNumber;
const int SerpItem::kPageUrlsFieldNumber;
const int SerpItem::kTitleFieldNumber;
const int SerpItem::kSnippetFieldNumber;
const int SerpItem::kSearchPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerpItem::SerpItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SerpItem)
}
SerpItem::SerpItem(const SerpItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dups_(from.dups_),
      pageurls_(from.pageurls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snippet()) {
    snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
  }
  searchpos_ = from.searchpos_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SerpItem)
}

void SerpItem::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchpos_ = 0u;
}

SerpItem::~SerpItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SerpItem)
  SharedDtor();
}

void SerpItem::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SerpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerpItem::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerpItem& SerpItem::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerpItem* SerpItem::New(::google::protobuf::Arena* arena) const {
  SerpItem* n = new SerpItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerpItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SerpItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dups_.Clear();
  pageurls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!snippet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snippet_.UnsafeRawStringPointer())->clear();
    }
  }
  searchpos_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SerpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SerpItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SerpItem.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dups()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dups(this->dups_size() - 1).data(),
            static_cast<int>(this->dups(this->dups_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SerpItem.dups");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string pageUrls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pageurls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pageurls(this->pageurls_size() - 1).data(),
            static_cast<int>(this->pageurls(this->pageurls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SerpItem.pageUrls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SerpItem.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snippet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snippet().data(), static_cast<int>(this->snippet().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SerpItem.snippet");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 searchPos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_searchpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &searchpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SerpItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SerpItem)
  return false;
#undef DO_
}

void SerpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SerpItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // repeated string dups = 2;
  for (int i = 0, n = this->dups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dups(i).data(), static_cast<int>(this->dups(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.dups");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dups(i), output);
  }

  // repeated string pageUrls = 3;
  for (int i = 0, n = this->pageurls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurls(i).data(), static_cast<int>(this->pageurls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.pageUrls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pageurls(i), output);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string snippet = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->snippet(), output);
  }

  // optional uint32 searchPos = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->searchpos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SerpItem)
}

::google::protobuf::uint8* SerpItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SerpItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated string dups = 2;
  for (int i = 0, n = this->dups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dups(i).data(), static_cast<int>(this->dups(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.dups");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->dups(i), target);
  }

  // repeated string pageUrls = 3;
  for (int i = 0, n = this->pageurls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurls(i).data(), static_cast<int>(this->pageurls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.pageUrls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->pageurls(i), target);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string snippet = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SerpItem.snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->snippet(), target);
  }

  // optional uint32 searchPos = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->searchpos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SerpItem)
  return target;
}

size_t SerpItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SerpItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // repeated string dups = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dups_size());
  for (int i = 0, n = this->dups_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dups(i));
  }

  // repeated string pageUrls = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pageurls_size());
  for (int i = 0, n = this->pageurls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pageurls(i));
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string snippet = 5;
    if (has_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snippet());
    }

    // optional uint32 searchPos = 6;
    if (has_searchpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->searchpos());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerpItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SerpItem)
  GOOGLE_DCHECK_NE(&from, this);
  const SerpItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerpItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SerpItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SerpItem)
    MergeFrom(*source);
  }
}

void SerpItem::MergeFrom(const SerpItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SerpItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dups_.MergeFrom(from.dups_);
  pageurls_.MergeFrom(from.pageurls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_snippet();
      snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
    }
    if (cached_has_bits & 0x00000008u) {
      searchpos_ = from.searchpos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SerpItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SerpItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerpItem::CopyFrom(const SerpItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SerpItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerpItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SerpItem::Swap(SerpItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerpItem::InternalSwap(SerpItem* other) {
  using std::swap;
  dups_.InternalSwap(&other->dups_);
  pageurls_.InternalSwap(&other->pageurls_);
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  snippet_.Swap(&other->snippet_);
  swap(searchpos_, other->searchpos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerpItem::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerpItem

// required string url = 1;
bool SerpItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerpItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SerpItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerpItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SerpItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.url)
  return url_.GetNoArena();
}
void SerpItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.url)
}
#if LANG_CXX11
void SerpItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SerpItem.url)
}
#endif
void SerpItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.url)
}
void SerpItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.url)
}
::std::string* SerpItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerpItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SerpItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerpItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SerpItem.url)
}

// repeated string dups = 2;
int SerpItem::dups_size() const {
  return dups_.size();
}
void SerpItem::clear_dups() {
  dups_.Clear();
}
const ::std::string& SerpItem::dups(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.dups)
  return dups_.Get(index);
}
::std::string* SerpItem::mutable_dups(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.dups)
  return dups_.Mutable(index);
}
void SerpItem::set_dups(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.dups)
  dups_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SerpItem::set_dups(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.dups)
  dups_.Mutable(index)->assign(std::move(value));
}
#endif
void SerpItem::set_dups(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.dups)
}
void SerpItem::set_dups(int index, const char* value, size_t size) {
  dups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.dups)
}
::std::string* SerpItem::add_dups() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SerpItem.dups)
  return dups_.Add();
}
void SerpItem::add_dups(const ::std::string& value) {
  dups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SerpItem.dups)
}
#if LANG_CXX11
void SerpItem::add_dups(::std::string&& value) {
  dups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SerpItem.dups)
}
#endif
void SerpItem::add_dups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SerpItem.dups)
}
void SerpItem::add_dups(const char* value, size_t size) {
  dups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SerpItem.dups)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerpItem::dups() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SerpItem.dups)
  return dups_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SerpItem::mutable_dups() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SerpItem.dups)
  return &dups_;
}

// repeated string pageUrls = 3;
int SerpItem::pageurls_size() const {
  return pageurls_.size();
}
void SerpItem::clear_pageurls() {
  pageurls_.Clear();
}
const ::std::string& SerpItem::pageurls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return pageurls_.Get(index);
}
::std::string* SerpItem::mutable_pageurls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return pageurls_.Mutable(index);
}
void SerpItem::set_pageurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  pageurls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SerpItem::set_pageurls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  pageurls_.Mutable(index)->assign(std::move(value));
}
#endif
void SerpItem::set_pageurls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pageurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
void SerpItem::set_pageurls(int index, const char* value, size_t size) {
  pageurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
::std::string* SerpItem::add_pageurls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return pageurls_.Add();
}
void SerpItem::add_pageurls(const ::std::string& value) {
  pageurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
#if LANG_CXX11
void SerpItem::add_pageurls(::std::string&& value) {
  pageurls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
#endif
void SerpItem::add_pageurls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pageurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
void SerpItem::add_pageurls(const char* value, size_t size) {
  pageurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerpItem::pageurls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return pageurls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SerpItem::mutable_pageurls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return &pageurls_;
}

// optional string title = 4;
bool SerpItem::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SerpItem::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void SerpItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void SerpItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& SerpItem::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.title)
  return title_.GetNoArena();
}
void SerpItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.title)
}
#if LANG_CXX11
void SerpItem::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SerpItem.title)
}
#endif
void SerpItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.title)
}
void SerpItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.title)
}
::std::string* SerpItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerpItem::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SerpItem.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerpItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SerpItem.title)
}

// optional string snippet = 5;
bool SerpItem::has_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SerpItem::set_has_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
void SerpItem::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
void SerpItem::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
const ::std::string& SerpItem::snippet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.snippet)
  return snippet_.GetNoArena();
}
void SerpItem::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.snippet)
}
#if LANG_CXX11
void SerpItem::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SerpItem.snippet)
}
#endif
void SerpItem::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.snippet)
}
void SerpItem::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.snippet)
}
::std::string* SerpItem::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerpItem::release_snippet() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SerpItem.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerpItem::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SerpItem.snippet)
}

// optional uint32 searchPos = 6;
bool SerpItem::has_searchpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SerpItem::set_has_searchpos() {
  _has_bits_[0] |= 0x00000008u;
}
void SerpItem::clear_has_searchpos() {
  _has_bits_[0] &= ~0x00000008u;
}
void SerpItem::clear_searchpos() {
  searchpos_ = 0u;
  clear_has_searchpos();
}
::google::protobuf::uint32 SerpItem::searchpos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.searchPos)
  return searchpos_;
}
void SerpItem::set_searchpos(::google::protobuf::uint32 value) {
  set_has_searchpos();
  searchpos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.searchPos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kVrtFieldNumber;
const int Session::kQueryFieldNumber;
const int Session::kSearcherFieldNumber;
const int Session::kSearchUrlFieldNumber;
const int Session::kMrcuFieldNumber;
const int Session::kTimeFieldNumber;
const int Session::kEventFieldNumber;
const int Session::kUrlFieldNumber;
const int Session::kSexFieldNumber;
const int Session::kAgeFieldNumber;
const int Session::kRegionFieldNumber;
const int Session::kUidFieldNumber;
const int Session::kItemsFieldNumber;
const int Session::kWeightFieldNumber;
const int Session::kExpidFieldNumber;
const int Session::kVkUserIdFieldNumber;
const int Session::kUrlsRecordMessageTypeFieldNumber;
const int Session::kExtraFieldNumber;
const int Session::kSplitFieldNumber;
const int Session::kMobileFieldNumber;
const int Session::kVkIsSafeSearchFieldNumber;
const int Session::kVkPlatformFieldNumber;
const int Session::kVkUserCountryIdFieldNumber;
const int Session::kVkQueryIdFieldNumber;
const int Session::kDzenSearchIdFieldNumber;
const int Session::kDzenStrongestIdFieldNumber;
const int Session::kDzenSearchTabFieldNumber;
const int Session::kRustoreQueryIdFieldNumber;
const int Session::kDzenExperimentIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      event_(from.event_),
      url_(from.url_),
      items_(from.items_),
      dzenexperimentids_(from.dzenexperimentids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  searchurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searchurl()) {
    searchurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchurl_);
  }
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mrcu()) {
    mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  urlsrecordmessagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_urlsrecordmessagetype()) {
    urlsrecordmessagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlsrecordmessagetype_);
  }
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra()) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  vkqueryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vkqueryid()) {
    vkqueryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vkqueryid_);
  }
  dzensearchid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dzensearchid()) {
    dzensearchid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dzensearchid_);
  }
  dzenstrongestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dzenstrongestid()) {
    dzenstrongestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dzenstrongestid_);
  }
  rustorequeryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rustorequeryid()) {
    rustorequeryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rustorequeryid_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&vkplatform_) -
    reinterpret_cast<char*>(&time_)) + sizeof(vkplatform_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Session)
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlsrecordmessagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vkqueryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dzensearchid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dzenstrongestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rustorequeryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vkusercountryid_) -
      reinterpret_cast<char*>(&time_)) + sizeof(vkusercountryid_));
  dzensearchtab_ = 1;
  vrt_ = 1;
  searcher_ = 1;
  sex_ = 1;
  vkplatform_ = 1;
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mrcu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlsrecordmessagetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vkqueryid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dzensearchid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dzenstrongestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rustorequeryid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_.Clear();
  url_.Clear();
  items_.Clear();
  dzenexperimentids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!searchurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*searchurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!mrcu_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mrcu_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!urlsrecordmessagetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*urlsrecordmessagetype_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!extra_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extra_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!vkqueryid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vkqueryid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!dzensearchid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dzensearchid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!dzenstrongestid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dzenstrongestid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!rustorequeryid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rustorequeryid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 64512u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vkuserid_) -
        reinterpret_cast<char*>(&time_)) + sizeof(vkuserid_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&split_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vkusercountryid_) -
        reinterpret_cast<char*>(&split_)) + sizeof(vkusercountryid_));
    dzensearchtab_ = 1;
    vrt_ = 1;
    searcher_ = 1;
    sex_ = 1;
  }
  vkplatform_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.Vrt vrt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Vrt_IsValid(value)) {
            set_vrt(static_cast< ::ru::mail::go::webbase::blobs::Vrt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Searcher searcher = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Searcher_IsValid(value)) {
            set_searcher(static_cast< ::ru::mail::go::webbase::blobs::Searcher >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string searchUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchurl().data(), static_cast<int>(this->searchurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.searchUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mrcu = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mrcu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mrcu().data(), static_cast<int>(this->mrcu().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.mrcu");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Event event = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url(this->url_size() - 1).data(),
            static_cast<int>(this->url(this->url_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Sex_IsValid(value)) {
            set_sex(static_cast< ::ru::mail::go::webbase::blobs::Sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.SerpItem items = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weight = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_expid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 vkUserId = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_vkuserid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vkuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string urlsRecordMessageType = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urlsrecordmessagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urlsrecordmessagetype().data(), static_cast<int>(this->urlsrecordmessagetype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.urlsRecordMessageType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extra = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra().data(), static_cast<int>(this->extra().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.extra");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 split = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_split();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mobile = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_mobile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vkIsSafeSearch = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_vkissafesearch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vkissafesearch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VkPlatform vkPlatform = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::VkPlatform_IsValid(value)) {
            set_vkplatform(static_cast< ::ru::mail::go::webbase::blobs::VkPlatform >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vkUserCountryId = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_vkusercountryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vkusercountryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vkQueryId = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vkqueryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vkqueryid().data(), static_cast<int>(this->vkqueryid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.vkQueryId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dzenSearchId = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dzensearchid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dzensearchid().data(), static_cast<int>(this->dzensearchid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.dzenSearchId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dzenStrongestId = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dzenstrongestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dzenstrongestid().data(), static_cast<int>(this->dzenstrongestid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.dzenStrongestId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.DzenSearchTab dzenSearchTab = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::DzenSearchTab_IsValid(value)) {
            set_dzensearchtab(static_cast< ::ru::mail::go::webbase::blobs::DzenSearchTab >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                27, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rustoreQueryId = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rustorequeryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rustorequeryid().data(), static_cast<int>(this->rustorequeryid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Session.rustoreQueryId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 dzenExperimentIds = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 232u, input, this->mutable_dzenexperimentids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dzenexperimentids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Vrt vrt = 1;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vrt(), output);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Searcher searcher = 3;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->searcher(), output);
  }

  // optional string searchUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchurl().data(), static_cast<int>(this->searchurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.searchUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->searchurl(), output);
  }

  // optional string mrcu = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.mrcu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mrcu(), output);
  }

  // required uint64 time = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Event event = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->event(static_cast<int>(i)), output);
  }

  // repeated string url = 8;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->url(i), output);
  }

  // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->sex(), output);
  }

  // optional uint32 age = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->age(), output);
  }

  // optional uint32 region = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->region(), output);
  }

  // optional string uid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->uid(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.SerpItem items = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->items(static_cast<int>(i)), output);
  }

  // optional uint32 weight = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->weight(), output);
  }

  // optional uint32 expid = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->expid(), output);
  }

  // optional uint64 vkUserId = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->vkuserid(), output);
  }

  // optional string urlsRecordMessageType = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlsrecordmessagetype().data(), static_cast<int>(this->urlsrecordmessagetype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.urlsRecordMessageType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->urlsrecordmessagetype(), output);
  }

  // optional string extra = 18;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->extra(), output);
  }

  // optional uint32 split = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->split(), output);
  }

  // optional bool mobile = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->mobile(), output);
  }

  // optional bool vkIsSafeSearch = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->vkissafesearch(), output);
  }

  // optional .ru.mail.go.webbase.blobs.VkPlatform vkPlatform = 22;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->vkplatform(), output);
  }

  // optional uint32 vkUserCountryId = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->vkusercountryid(), output);
  }

  // optional string vkQueryId = 24;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vkqueryid().data(), static_cast<int>(this->vkqueryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.vkQueryId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->vkqueryid(), output);
  }

  // optional string dzenSearchId = 25;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dzensearchid().data(), static_cast<int>(this->dzensearchid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.dzenSearchId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->dzensearchid(), output);
  }

  // optional string dzenStrongestId = 26;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dzenstrongestid().data(), static_cast<int>(this->dzenstrongestid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.dzenStrongestId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->dzenstrongestid(), output);
  }

  // optional .ru.mail.go.webbase.blobs.DzenSearchTab dzenSearchTab = 27;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->dzensearchtab(), output);
  }

  // optional string rustoreQueryId = 28;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rustorequeryid().data(), static_cast<int>(this->rustorequeryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.rustoreQueryId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->rustorequeryid(), output);
  }

  // repeated uint64 dzenExperimentIds = 29;
  for (int i = 0, n = this->dzenexperimentids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      29, this->dzenexperimentids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Vrt vrt = 1;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->vrt(), target);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Searcher searcher = 3;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->searcher(), target);
  }

  // optional string searchUrl = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchurl().data(), static_cast<int>(this->searchurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.searchUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->searchurl(), target);
  }

  // optional string mrcu = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.mrcu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mrcu(), target);
  }

  // required uint64 time = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.Event event = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->event(static_cast<int>(i)), deterministic, target);
  }

  // repeated string url = 8;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->url(i), target);
  }

  // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->sex(), target);
  }

  // optional uint32 age = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->age(), target);
  }

  // optional uint32 region = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->region(), target);
  }

  // optional string uid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->uid(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.SerpItem items = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->items(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 weight = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->weight(), target);
  }

  // optional uint32 expid = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->expid(), target);
  }

  // optional uint64 vkUserId = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->vkuserid(), target);
  }

  // optional string urlsRecordMessageType = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlsrecordmessagetype().data(), static_cast<int>(this->urlsrecordmessagetype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.urlsRecordMessageType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->urlsrecordmessagetype(), target);
  }

  // optional string extra = 18;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->extra(), target);
  }

  // optional uint32 split = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->split(), target);
  }

  // optional bool mobile = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->mobile(), target);
  }

  // optional bool vkIsSafeSearch = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->vkissafesearch(), target);
  }

  // optional .ru.mail.go.webbase.blobs.VkPlatform vkPlatform = 22;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->vkplatform(), target);
  }

  // optional uint32 vkUserCountryId = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->vkusercountryid(), target);
  }

  // optional string vkQueryId = 24;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vkqueryid().data(), static_cast<int>(this->vkqueryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.vkQueryId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->vkqueryid(), target);
  }

  // optional string dzenSearchId = 25;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dzensearchid().data(), static_cast<int>(this->dzensearchid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.dzenSearchId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->dzensearchid(), target);
  }

  // optional string dzenStrongestId = 26;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dzenstrongestid().data(), static_cast<int>(this->dzenstrongestid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.dzenStrongestId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->dzenstrongestid(), target);
  }

  // optional .ru.mail.go.webbase.blobs.DzenSearchTab dzenSearchTab = 27;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->dzensearchtab(), target);
  }

  // optional string rustoreQueryId = 28;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rustorequeryid().data(), static_cast<int>(this->rustorequeryid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Session.rustoreQueryId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->rustorequeryid(), target);
  }

  // repeated uint64 dzenExperimentIds = 29;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(29, this->dzenexperimentids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Session)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 time = 6;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }
  // repeated .ru.mail.go.webbase.blobs.Event event = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event(static_cast<int>(i)));
    }
  }

  // repeated string url = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->url_size());
  for (int i = 0, n = this->url_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url(i));
  }

  // repeated .ru.mail.go.webbase.blobs.SerpItem items = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated uint64 dzenExperimentIds = 29;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->dzenexperimentids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->dzenexperimentids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string searchUrl = 4;
    if (has_searchurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchurl());
    }

    // optional string mrcu = 5;
    if (has_mrcu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mrcu());
    }

    // optional string uid = 12;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string urlsRecordMessageType = 17;
    if (has_urlsrecordmessagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urlsrecordmessagetype());
    }

    // optional string extra = 18;
    if (has_extra()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

    // optional string vkQueryId = 24;
    if (has_vkqueryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vkqueryid());
    }

    // optional string dzenSearchId = 25;
    if (has_dzensearchid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dzensearchid());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string dzenStrongestId = 26;
    if (has_dzenstrongestid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dzenstrongestid());
    }

    // optional string rustoreQueryId = 28;
    if (has_rustorequeryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rustorequeryid());
    }

  }
  if (_has_bits_[8 / 32] & 63488u) {
    // optional uint32 age = 10;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 region = 11;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional uint32 weight = 14;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // optional uint32 expid = 15;
    if (has_expid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expid());
    }

    // optional uint64 vkUserId = 16;
    if (has_vkuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vkuserid());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 split = 19;
    if (has_split()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->split());
    }

    // optional bool mobile = 20;
    if (has_mobile()) {
      total_size += 2 + 1;
    }

    // optional bool vkIsSafeSearch = 21;
    if (has_vkissafesearch()) {
      total_size += 2 + 1;
    }

    // optional uint32 vkUserCountryId = 23;
    if (has_vkusercountryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vkusercountryid());
    }

    // optional .ru.mail.go.webbase.blobs.DzenSearchTab dzenSearchTab = 27;
    if (has_dzensearchtab()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dzensearchtab());
    }

    // optional .ru.mail.go.webbase.blobs.Vrt vrt = 1;
    if (has_vrt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vrt());
    }

    // optional .ru.mail.go.webbase.blobs.Searcher searcher = 3;
    if (has_searcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->searcher());
    }

    // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

  }
  // optional .ru.mail.go.webbase.blobs.VkPlatform vkPlatform = 22;
  if (has_vkplatform()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vkplatform());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_.MergeFrom(from.event_);
  url_.MergeFrom(from.url_);
  items_.MergeFrom(from.items_);
  dzenexperimentids_.MergeFrom(from.dzenexperimentids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_searchurl();
      searchurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mrcu();
      mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_urlsrecordmessagetype();
      urlsrecordmessagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlsrecordmessagetype_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_extra();
      extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_vkqueryid();
      vkqueryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vkqueryid_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_dzensearchid();
      dzensearchid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dzensearchid_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_dzenstrongestid();
      dzenstrongestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dzenstrongestid_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_rustorequeryid();
      rustorequeryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rustorequeryid_);
    }
    if (cached_has_bits & 0x00000400u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000800u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00001000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00002000u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00004000u) {
      expid_ = from.expid_;
    }
    if (cached_has_bits & 0x00008000u) {
      vkuserid_ = from.vkuserid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      split_ = from.split_;
    }
    if (cached_has_bits & 0x00020000u) {
      mobile_ = from.mobile_;
    }
    if (cached_has_bits & 0x00040000u) {
      vkissafesearch_ = from.vkissafesearch_;
    }
    if (cached_has_bits & 0x00080000u) {
      vkusercountryid_ = from.vkusercountryid_;
    }
    if (cached_has_bits & 0x00100000u) {
      dzensearchtab_ = from.dzensearchtab_;
    }
    if (cached_has_bits & 0x00200000u) {
      vrt_ = from.vrt_;
    }
    if (cached_has_bits & 0x00400000u) {
      searcher_ = from.searcher_;
    }
    if (cached_has_bits & 0x00800000u) {
      sex_ = from.sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_vkplatform(from.vkplatform());
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000400) != 0x00000400) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->event())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  event_.InternalSwap(&other->event_);
  url_.InternalSwap(&other->url_);
  items_.InternalSwap(&other->items_);
  dzenexperimentids_.InternalSwap(&other->dzenexperimentids_);
  query_.Swap(&other->query_);
  searchurl_.Swap(&other->searchurl_);
  mrcu_.Swap(&other->mrcu_);
  uid_.Swap(&other->uid_);
  urlsrecordmessagetype_.Swap(&other->urlsrecordmessagetype_);
  extra_.Swap(&other->extra_);
  vkqueryid_.Swap(&other->vkqueryid_);
  dzensearchid_.Swap(&other->dzensearchid_);
  dzenstrongestid_.Swap(&other->dzenstrongestid_);
  rustorequeryid_.Swap(&other->rustorequeryid_);
  swap(time_, other->time_);
  swap(age_, other->age_);
  swap(region_, other->region_);
  swap(weight_, other->weight_);
  swap(expid_, other->expid_);
  swap(vkuserid_, other->vkuserid_);
  swap(split_, other->split_);
  swap(mobile_, other->mobile_);
  swap(vkissafesearch_, other->vkissafesearch_);
  swap(vkusercountryid_, other->vkusercountryid_);
  swap(dzensearchtab_, other->dzensearchtab_);
  swap(vrt_, other->vrt_);
  swap(searcher_, other->searcher_);
  swap(sex_, other->sex_);
  swap(vkplatform_, other->vkplatform_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Session

// optional .ru.mail.go.webbase.blobs.Vrt vrt = 1;
bool Session::has_vrt() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Session::set_has_vrt() {
  _has_bits_[0] |= 0x00200000u;
}
void Session::clear_has_vrt() {
  _has_bits_[0] &= ~0x00200000u;
}
void Session::clear_vrt() {
  vrt_ = 1;
  clear_has_vrt();
}
::ru::mail::go::webbase::blobs::Vrt Session::vrt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vrt)
  return static_cast< ::ru::mail::go::webbase::blobs::Vrt >(vrt_);
}
void Session::set_vrt(::ru::mail::go::webbase::blobs::Vrt value) {
  assert(::ru::mail::go::webbase::blobs::Vrt_IsValid(value));
  set_has_vrt();
  vrt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vrt)
}

// optional string query = 2;
bool Session::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Session::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void Session::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void Session::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& Session::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.query)
  return query_.GetNoArena();
}
void Session::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.query)
}
#if LANG_CXX11
void Session::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.query)
}
#endif
void Session::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.query)
}
void Session::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.query)
}
::std::string* Session::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.query)
}

// optional .ru.mail.go.webbase.blobs.Searcher searcher = 3;
bool Session::has_searcher() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Session::set_has_searcher() {
  _has_bits_[0] |= 0x00400000u;
}
void Session::clear_has_searcher() {
  _has_bits_[0] &= ~0x00400000u;
}
void Session::clear_searcher() {
  searcher_ = 1;
  clear_has_searcher();
}
::ru::mail::go::webbase::blobs::Searcher Session::searcher() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.searcher)
  return static_cast< ::ru::mail::go::webbase::blobs::Searcher >(searcher_);
}
void Session::set_searcher(::ru::mail::go::webbase::blobs::Searcher value) {
  assert(::ru::mail::go::webbase::blobs::Searcher_IsValid(value));
  set_has_searcher();
  searcher_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.searcher)
}

// optional string searchUrl = 4;
bool Session::has_searchurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Session::set_has_searchurl() {
  _has_bits_[0] |= 0x00000002u;
}
void Session::clear_has_searchurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void Session::clear_searchurl() {
  searchurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchurl();
}
const ::std::string& Session::searchurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.searchUrl)
  return searchurl_.GetNoArena();
}
void Session::set_searchurl(const ::std::string& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.searchUrl)
}
#if LANG_CXX11
void Session::set_searchurl(::std::string&& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.searchUrl)
}
#endif
void Session::set_searchurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.searchUrl)
}
void Session::set_searchurl(const char* value, size_t size) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.searchUrl)
}
::std::string* Session::mutable_searchurl() {
  set_has_searchurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.searchUrl)
  return searchurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_searchurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.searchUrl)
  clear_has_searchurl();
  return searchurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_searchurl(::std::string* searchurl) {
  if (searchurl != NULL) {
    set_has_searchurl();
  } else {
    clear_has_searchurl();
  }
  searchurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.searchUrl)
}

// optional string mrcu = 5;
bool Session::has_mrcu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Session::set_has_mrcu() {
  _has_bits_[0] |= 0x00000004u;
}
void Session::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000004u;
}
void Session::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
const ::std::string& Session::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.mrcu)
  return mrcu_.GetNoArena();
}
void Session::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.mrcu)
}
#if LANG_CXX11
void Session::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.mrcu)
}
#endif
void Session::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.mrcu)
}
void Session::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.mrcu)
}
::std::string* Session::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.mrcu)
}

// required uint64 time = 6;
bool Session::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Session::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
void Session::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void Session::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Session::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.time)
  return time_;
}
void Session::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.time)
}

// repeated .ru.mail.go.webbase.blobs.Event event = 7;
int Session::event_size() const {
  return event_.size();
}
void Session::clear_event() {
  event_.Clear();
}
const ::ru::mail::go::webbase::blobs::Event& Session::event(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.event)
  return event_.Get(index);
}
::ru::mail::go::webbase::blobs::Event* Session::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.event)
  return event_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Event* Session::add_event() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.event)
  return event_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Event >*
Session::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Session.event)
  return &event_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Event >&
Session::event() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Session.event)
  return event_;
}

// repeated string url = 8;
int Session::url_size() const {
  return url_.size();
}
void Session::clear_url() {
  url_.Clear();
}
const ::std::string& Session::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.url)
  return url_.Get(index);
}
::std::string* Session::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.url)
  return url_.Mutable(index);
}
void Session::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Session::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
void Session::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.url)
}
void Session::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.url)
}
::std::string* Session::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.Session.url)
  return url_.Add();
}
void Session::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.url)
}
#if LANG_CXX11
void Session::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.url)
}
#endif
void Session::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.Session.url)
}
void Session::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.Session.url)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Session::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Session.url)
  return url_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Session::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Session.url)
  return &url_;
}

// optional .ru.mail.go.webbase.blobs.Sex sex = 9;
bool Session::has_sex() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Session::set_has_sex() {
  _has_bits_[0] |= 0x00800000u;
}
void Session::clear_has_sex() {
  _has_bits_[0] &= ~0x00800000u;
}
void Session::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
::ru::mail::go::webbase::blobs::Sex Session::sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.sex)
  return static_cast< ::ru::mail::go::webbase::blobs::Sex >(sex_);
}
void Session::set_sex(::ru::mail::go::webbase::blobs::Sex value) {
  assert(::ru::mail::go::webbase::blobs::Sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.sex)
}

// optional uint32 age = 10;
bool Session::has_age() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Session::set_has_age() {
  _has_bits_[0] |= 0x00000800u;
}
void Session::clear_has_age() {
  _has_bits_[0] &= ~0x00000800u;
}
void Session::clear_age() {
  age_ = 0u;
  clear_has_age();
}
::google::protobuf::uint32 Session::age() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.age)
  return age_;
}
void Session::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.age)
}

// optional uint32 region = 11;
bool Session::has_region() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Session::set_has_region() {
  _has_bits_[0] |= 0x00001000u;
}
void Session::clear_has_region() {
  _has_bits_[0] &= ~0x00001000u;
}
void Session::clear_region() {
  region_ = 0u;
  clear_has_region();
}
::google::protobuf::uint32 Session::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.region)
  return region_;
}
void Session::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.region)
}

// optional string uid = 12;
bool Session::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Session::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
void Session::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Session::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
const ::std::string& Session::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.uid)
  return uid_.GetNoArena();
}
void Session::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.uid)
}
#if LANG_CXX11
void Session::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.uid)
}
#endif
void Session::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.uid)
}
void Session::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.uid)
}
::std::string* Session::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.uid)
}

// repeated .ru.mail.go.webbase.blobs.SerpItem items = 13;
int Session::items_size() const {
  return items_.size();
}
void Session::clear_items() {
  items_.Clear();
}
const ::ru::mail::go::webbase::blobs::SerpItem& Session::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.items)
  return items_.Get(index);
}
::ru::mail::go::webbase::blobs::SerpItem* Session::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.items)
  return items_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SerpItem* Session::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SerpItem >*
Session::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Session.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SerpItem >&
Session::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Session.items)
  return items_;
}

// optional uint32 weight = 14;
bool Session::has_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Session::set_has_weight() {
  _has_bits_[0] |= 0x00002000u;
}
void Session::clear_has_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
void Session::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
::google::protobuf::uint32 Session::weight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.weight)
  return weight_;
}
void Session::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.weight)
}

// optional uint32 expid = 15;
bool Session::has_expid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Session::set_has_expid() {
  _has_bits_[0] |= 0x00004000u;
}
void Session::clear_has_expid() {
  _has_bits_[0] &= ~0x00004000u;
}
void Session::clear_expid() {
  expid_ = 0u;
  clear_has_expid();
}
::google::protobuf::uint32 Session::expid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.expid)
  return expid_;
}
void Session::set_expid(::google::protobuf::uint32 value) {
  set_has_expid();
  expid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.expid)
}

// optional uint64 vkUserId = 16;
bool Session::has_vkuserid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Session::set_has_vkuserid() {
  _has_bits_[0] |= 0x00008000u;
}
void Session::clear_has_vkuserid() {
  _has_bits_[0] &= ~0x00008000u;
}
void Session::clear_vkuserid() {
  vkuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_vkuserid();
}
::google::protobuf::uint64 Session::vkuserid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkUserId)
  return vkuserid_;
}
void Session::set_vkuserid(::google::protobuf::uint64 value) {
  set_has_vkuserid();
  vkuserid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkUserId)
}

// optional string urlsRecordMessageType = 17;
bool Session::has_urlsrecordmessagetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Session::set_has_urlsrecordmessagetype() {
  _has_bits_[0] |= 0x00000010u;
}
void Session::clear_has_urlsrecordmessagetype() {
  _has_bits_[0] &= ~0x00000010u;
}
void Session::clear_urlsrecordmessagetype() {
  urlsrecordmessagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urlsrecordmessagetype();
}
const ::std::string& Session::urlsrecordmessagetype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
  return urlsrecordmessagetype_.GetNoArena();
}
void Session::set_urlsrecordmessagetype(const ::std::string& value) {
  set_has_urlsrecordmessagetype();
  urlsrecordmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}
#if LANG_CXX11
void Session::set_urlsrecordmessagetype(::std::string&& value) {
  set_has_urlsrecordmessagetype();
  urlsrecordmessagetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}
#endif
void Session::set_urlsrecordmessagetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urlsrecordmessagetype();
  urlsrecordmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}
void Session::set_urlsrecordmessagetype(const char* value, size_t size) {
  set_has_urlsrecordmessagetype();
  urlsrecordmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}
::std::string* Session::mutable_urlsrecordmessagetype() {
  set_has_urlsrecordmessagetype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
  return urlsrecordmessagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_urlsrecordmessagetype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
  clear_has_urlsrecordmessagetype();
  return urlsrecordmessagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_urlsrecordmessagetype(::std::string* urlsrecordmessagetype) {
  if (urlsrecordmessagetype != NULL) {
    set_has_urlsrecordmessagetype();
  } else {
    clear_has_urlsrecordmessagetype();
  }
  urlsrecordmessagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urlsrecordmessagetype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}

// optional string extra = 18;
bool Session::has_extra() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Session::set_has_extra() {
  _has_bits_[0] |= 0x00000020u;
}
void Session::clear_has_extra() {
  _has_bits_[0] &= ~0x00000020u;
}
void Session::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
const ::std::string& Session::extra() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.extra)
  return extra_.GetNoArena();
}
void Session::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.extra)
}
#if LANG_CXX11
void Session::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.extra)
}
#endif
void Session::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.extra)
}
void Session::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.extra)
}
::std::string* Session::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.extra)
}

// optional uint32 split = 19;
bool Session::has_split() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Session::set_has_split() {
  _has_bits_[0] |= 0x00010000u;
}
void Session::clear_has_split() {
  _has_bits_[0] &= ~0x00010000u;
}
void Session::clear_split() {
  split_ = 0u;
  clear_has_split();
}
::google::protobuf::uint32 Session::split() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.split)
  return split_;
}
void Session::set_split(::google::protobuf::uint32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.split)
}

// optional bool mobile = 20;
bool Session::has_mobile() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Session::set_has_mobile() {
  _has_bits_[0] |= 0x00020000u;
}
void Session::clear_has_mobile() {
  _has_bits_[0] &= ~0x00020000u;
}
void Session::clear_mobile() {
  mobile_ = false;
  clear_has_mobile();
}
bool Session::mobile() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.mobile)
  return mobile_;
}
void Session::set_mobile(bool value) {
  set_has_mobile();
  mobile_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.mobile)
}

// optional bool vkIsSafeSearch = 21;
bool Session::has_vkissafesearch() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Session::set_has_vkissafesearch() {
  _has_bits_[0] |= 0x00040000u;
}
void Session::clear_has_vkissafesearch() {
  _has_bits_[0] &= ~0x00040000u;
}
void Session::clear_vkissafesearch() {
  vkissafesearch_ = false;
  clear_has_vkissafesearch();
}
bool Session::vkissafesearch() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkIsSafeSearch)
  return vkissafesearch_;
}
void Session::set_vkissafesearch(bool value) {
  set_has_vkissafesearch();
  vkissafesearch_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkIsSafeSearch)
}

// optional .ru.mail.go.webbase.blobs.VkPlatform vkPlatform = 22;
bool Session::has_vkplatform() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Session::set_has_vkplatform() {
  _has_bits_[0] |= 0x01000000u;
}
void Session::clear_has_vkplatform() {
  _has_bits_[0] &= ~0x01000000u;
}
void Session::clear_vkplatform() {
  vkplatform_ = 1;
  clear_has_vkplatform();
}
::ru::mail::go::webbase::blobs::VkPlatform Session::vkplatform() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkPlatform)
  return static_cast< ::ru::mail::go::webbase::blobs::VkPlatform >(vkplatform_);
}
void Session::set_vkplatform(::ru::mail::go::webbase::blobs::VkPlatform value) {
  assert(::ru::mail::go::webbase::blobs::VkPlatform_IsValid(value));
  set_has_vkplatform();
  vkplatform_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkPlatform)
}

// optional uint32 vkUserCountryId = 23;
bool Session::has_vkusercountryid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Session::set_has_vkusercountryid() {
  _has_bits_[0] |= 0x00080000u;
}
void Session::clear_has_vkusercountryid() {
  _has_bits_[0] &= ~0x00080000u;
}
void Session::clear_vkusercountryid() {
  vkusercountryid_ = 0u;
  clear_has_vkusercountryid();
}
::google::protobuf::uint32 Session::vkusercountryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkUserCountryId)
  return vkusercountryid_;
}
void Session::set_vkusercountryid(::google::protobuf::uint32 value) {
  set_has_vkusercountryid();
  vkusercountryid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkUserCountryId)
}

// optional string vkQueryId = 24;
bool Session::has_vkqueryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Session::set_has_vkqueryid() {
  _has_bits_[0] |= 0x00000040u;
}
void Session::clear_has_vkqueryid() {
  _has_bits_[0] &= ~0x00000040u;
}
void Session::clear_vkqueryid() {
  vkqueryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vkqueryid();
}
const ::std::string& Session::vkqueryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkQueryId)
  return vkqueryid_.GetNoArena();
}
void Session::set_vkqueryid(const ::std::string& value) {
  set_has_vkqueryid();
  vkqueryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkQueryId)
}
#if LANG_CXX11
void Session::set_vkqueryid(::std::string&& value) {
  set_has_vkqueryid();
  vkqueryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.vkQueryId)
}
#endif
void Session::set_vkqueryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vkqueryid();
  vkqueryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.vkQueryId)
}
void Session::set_vkqueryid(const char* value, size_t size) {
  set_has_vkqueryid();
  vkqueryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.vkQueryId)
}
::std::string* Session::mutable_vkqueryid() {
  set_has_vkqueryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.vkQueryId)
  return vkqueryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_vkqueryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.vkQueryId)
  clear_has_vkqueryid();
  return vkqueryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_vkqueryid(::std::string* vkqueryid) {
  if (vkqueryid != NULL) {
    set_has_vkqueryid();
  } else {
    clear_has_vkqueryid();
  }
  vkqueryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vkqueryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.vkQueryId)
}

// optional string dzenSearchId = 25;
bool Session::has_dzensearchid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Session::set_has_dzensearchid() {
  _has_bits_[0] |= 0x00000080u;
}
void Session::clear_has_dzensearchid() {
  _has_bits_[0] &= ~0x00000080u;
}
void Session::clear_dzensearchid() {
  dzensearchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dzensearchid();
}
const ::std::string& Session::dzensearchid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.dzenSearchId)
  return dzensearchid_.GetNoArena();
}
void Session::set_dzensearchid(const ::std::string& value) {
  set_has_dzensearchid();
  dzensearchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}
#if LANG_CXX11
void Session::set_dzensearchid(::std::string&& value) {
  set_has_dzensearchid();
  dzensearchid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}
#endif
void Session::set_dzensearchid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dzensearchid();
  dzensearchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}
void Session::set_dzensearchid(const char* value, size_t size) {
  set_has_dzensearchid();
  dzensearchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}
::std::string* Session::mutable_dzensearchid() {
  set_has_dzensearchid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.dzenSearchId)
  return dzensearchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_dzensearchid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.dzenSearchId)
  clear_has_dzensearchid();
  return dzensearchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_dzensearchid(::std::string* dzensearchid) {
  if (dzensearchid != NULL) {
    set_has_dzensearchid();
  } else {
    clear_has_dzensearchid();
  }
  dzensearchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dzensearchid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}

// optional string dzenStrongestId = 26;
bool Session::has_dzenstrongestid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Session::set_has_dzenstrongestid() {
  _has_bits_[0] |= 0x00000100u;
}
void Session::clear_has_dzenstrongestid() {
  _has_bits_[0] &= ~0x00000100u;
}
void Session::clear_dzenstrongestid() {
  dzenstrongestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dzenstrongestid();
}
const ::std::string& Session::dzenstrongestid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
  return dzenstrongestid_.GetNoArena();
}
void Session::set_dzenstrongestid(const ::std::string& value) {
  set_has_dzenstrongestid();
  dzenstrongestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}
#if LANG_CXX11
void Session::set_dzenstrongestid(::std::string&& value) {
  set_has_dzenstrongestid();
  dzenstrongestid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}
#endif
void Session::set_dzenstrongestid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dzenstrongestid();
  dzenstrongestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}
void Session::set_dzenstrongestid(const char* value, size_t size) {
  set_has_dzenstrongestid();
  dzenstrongestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}
::std::string* Session::mutable_dzenstrongestid() {
  set_has_dzenstrongestid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
  return dzenstrongestid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_dzenstrongestid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
  clear_has_dzenstrongestid();
  return dzenstrongestid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_dzenstrongestid(::std::string* dzenstrongestid) {
  if (dzenstrongestid != NULL) {
    set_has_dzenstrongestid();
  } else {
    clear_has_dzenstrongestid();
  }
  dzenstrongestid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dzenstrongestid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}

// optional .ru.mail.go.webbase.blobs.DzenSearchTab dzenSearchTab = 27;
bool Session::has_dzensearchtab() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Session::set_has_dzensearchtab() {
  _has_bits_[0] |= 0x00100000u;
}
void Session::clear_has_dzensearchtab() {
  _has_bits_[0] &= ~0x00100000u;
}
void Session::clear_dzensearchtab() {
  dzensearchtab_ = 1;
  clear_has_dzensearchtab();
}
::ru::mail::go::webbase::blobs::DzenSearchTab Session::dzensearchtab() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.dzenSearchTab)
  return static_cast< ::ru::mail::go::webbase::blobs::DzenSearchTab >(dzensearchtab_);
}
void Session::set_dzensearchtab(::ru::mail::go::webbase::blobs::DzenSearchTab value) {
  assert(::ru::mail::go::webbase::blobs::DzenSearchTab_IsValid(value));
  set_has_dzensearchtab();
  dzensearchtab_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.dzenSearchTab)
}

// optional string rustoreQueryId = 28;
bool Session::has_rustorequeryid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Session::set_has_rustorequeryid() {
  _has_bits_[0] |= 0x00000200u;
}
void Session::clear_has_rustorequeryid() {
  _has_bits_[0] &= ~0x00000200u;
}
void Session::clear_rustorequeryid() {
  rustorequeryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rustorequeryid();
}
const ::std::string& Session::rustorequeryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
  return rustorequeryid_.GetNoArena();
}
void Session::set_rustorequeryid(const ::std::string& value) {
  set_has_rustorequeryid();
  rustorequeryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}
#if LANG_CXX11
void Session::set_rustorequeryid(::std::string&& value) {
  set_has_rustorequeryid();
  rustorequeryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}
#endif
void Session::set_rustorequeryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rustorequeryid();
  rustorequeryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}
void Session::set_rustorequeryid(const char* value, size_t size) {
  set_has_rustorequeryid();
  rustorequeryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}
::std::string* Session::mutable_rustorequeryid() {
  set_has_rustorequeryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
  return rustorequeryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_rustorequeryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
  clear_has_rustorequeryid();
  return rustorequeryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_rustorequeryid(::std::string* rustorequeryid) {
  if (rustorequeryid != NULL) {
    set_has_rustorequeryid();
  } else {
    clear_has_rustorequeryid();
  }
  rustorequeryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rustorequeryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}

// repeated uint64 dzenExperimentIds = 29;
int Session::dzenexperimentids_size() const {
  return dzenexperimentids_.size();
}
void Session::clear_dzenexperimentids() {
  dzenexperimentids_.Clear();
}
::google::protobuf::uint64 Session::dzenexperimentids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
  return dzenexperimentids_.Get(index);
}
void Session::set_dzenexperimentids(int index, ::google::protobuf::uint64 value) {
  dzenexperimentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
}
void Session::add_dzenexperimentids(::google::protobuf::uint64 value) {
  dzenexperimentids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Session::dzenexperimentids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
  return dzenexperimentids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Session::mutable_dzenexperimentids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
  return &dzenexperimentids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EBinderKey::kUrlFieldNumber;
const int EBinderKey::kKeyFieldNumber;
const int EBinderKey::kTextFieldNumber;
const int EBinderKey::kTimestampFieldNumber;
const int EBinderKey::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EBinderKey::EBinderKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.EBinderKey)
}
EBinderKey::EBinderKey(const EBinderKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.EBinderKey)
}

void EBinderKey::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  type_ = 1;
}

EBinderKey::~EBinderKey() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.EBinderKey)
  SharedDtor();
}

void EBinderKey::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EBinderKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EBinderKey::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EBinderKey& EBinderKey::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

EBinderKey* EBinderKey::New(::google::protobuf::Arena* arena) const {
  EBinderKey* n = new EBinderKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EBinderKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.EBinderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 24u) {
    timestamp_ = GOOGLE_LONGLONG(0);
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EBinderKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.EBinderKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.EBinderKey.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.EBinderKey.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.EBinderKey.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.ExtraTextArray.ExtraText.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.EBinderKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.EBinderKey)
  return false;
#undef DO_
}

void EBinderKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.EBinderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.EBinderKey.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required string key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.EBinderKey.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // required string text = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.EBinderKey.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // required .ru.mail.go.webbase.blobs.ExtraTextArray.ExtraText.Type type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.EBinderKey)
}

::google::protobuf::uint8* EBinderKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.EBinderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.EBinderKey.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required string key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.EBinderKey.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // required string text = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.EBinderKey.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // required .ru.mail.go.webbase.blobs.ExtraTextArray.ExtraText.Type type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.EBinderKey)
  return target;
}

size_t EBinderKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.EBinderKey)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_key()) {
    // required string key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_text()) {
    // required string text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_type()) {
    // required .ru.mail.go.webbase.blobs.ExtraTextArray.ExtraText.Type type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t EBinderKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.EBinderKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required .ru.mail.go.webbase.blobs.ExtraTextArray.ExtraText.Type type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EBinderKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.EBinderKey)
  GOOGLE_DCHECK_NE(&from, this);
  const EBinderKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EBinderKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.EBinderKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.EBinderKey)
    MergeFrom(*source);
  }
}

void EBinderKey::MergeFrom(const EBinderKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.EBinderKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EBinderKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.EBinderKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EBinderKey::CopyFrom(const EBinderKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.EBinderKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EBinderKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void EBinderKey::Swap(EBinderKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EBinderKey::InternalSwap(EBinderKey* other) {
  using std::swap;
  url_.Swap(&other->url_);
  key_.Swap(&other->key_);
  text_.Swap(&other->text_);
  swap(timestamp_, other->timestamp_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EBinderKey::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EBinderKey

// required string url = 1;
bool EBinderKey::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EBinderKey::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void EBinderKey::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void EBinderKey::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& EBinderKey::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.url)
  return url_.GetNoArena();
}
void EBinderKey::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.url)
}
#if LANG_CXX11
void EBinderKey::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.EBinderKey.url)
}
#endif
void EBinderKey::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.EBinderKey.url)
}
void EBinderKey::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.EBinderKey.url)
}
::std::string* EBinderKey::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.EBinderKey.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EBinderKey::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.EBinderKey.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EBinderKey::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.EBinderKey.url)
}

// required string key = 2;
bool EBinderKey::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EBinderKey::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void EBinderKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void EBinderKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& EBinderKey::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.key)
  return key_.GetNoArena();
}
void EBinderKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.key)
}
#if LANG_CXX11
void EBinderKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.EBinderKey.key)
}
#endif
void EBinderKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.EBinderKey.key)
}
void EBinderKey::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.EBinderKey.key)
}
::std::string* EBinderKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.EBinderKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EBinderKey::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.EBinderKey.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EBinderKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.EBinderKey.key)
}

// required string text = 3;
bool EBinderKey::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EBinderKey::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
void EBinderKey::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
void EBinderKey::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& EBinderKey::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.text)
  return text_.GetNoArena();
}
void EBinderKey::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.text)
}
#if LANG_CXX11
void EBinderKey::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.EBinderKey.text)
}
#endif
void EBinderKey::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.EBinderKey.text)
}
void EBinderKey::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.EBinderKey.text)
}
::std::string* EBinderKey::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.EBinderKey.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EBinderKey::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.EBinderKey.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EBinderKey::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.EBinderKey.text)
}

// required int64 timestamp = 4;
bool EBinderKey::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EBinderKey::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void EBinderKey::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void EBinderKey::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 EBinderKey::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.timestamp)
  return timestamp_;
}
void EBinderKey::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.timestamp)
}

// required .ru.mail.go.webbase.blobs.ExtraTextArray.ExtraText.Type type = 5;
bool EBinderKey::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EBinderKey::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void EBinderKey::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void EBinderKey::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type EBinderKey::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.type)
  return static_cast< ::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type >(type_);
}
void EBinderKey::set_type(::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type value) {
  assert(::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkerKey::kUrlFieldNumber;
const int MarkerKey::kSourceFieldNumber;
const int MarkerKey::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkerKey::MarkerKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MarkerKey)
}
MarkerKey::MarkerKey(const MarkerKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&source_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MarkerKey)
}

void MarkerKey::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = 1;
  type_ = 1;
}

MarkerKey::~MarkerKey() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MarkerKey)
  SharedDtor();
}

void MarkerKey::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarkerKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkerKey::descriptor() {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkerKey& MarkerKey::default_instance() {
  protobuf_clickrank_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkerKey* MarkerKey::New(::google::protobuf::Arena* arena) const {
  MarkerKey* n = new MarkerKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MarkerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    source_ = 1;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MarkerKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MarkerKey.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.Searcher source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Searcher_IsValid(value)) {
            set_source(static_cast< ::ru::mail::go::webbase::blobs::Searcher >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.MarkerKey.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::MarkerKey_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::MarkerKey_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MarkerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MarkerKey)
  return false;
#undef DO_
}

void MarkerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MarkerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MarkerKey.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required .ru.mail.go.webbase.blobs.Searcher source = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source(), output);
  }

  // required .ru.mail.go.webbase.blobs.MarkerKey.Type type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MarkerKey)
}

::google::protobuf::uint8* MarkerKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MarkerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MarkerKey.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required .ru.mail.go.webbase.blobs.Searcher source = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->source(), target);
  }

  // required .ru.mail.go.webbase.blobs.MarkerKey.Type type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MarkerKey)
  return target;
}

size_t MarkerKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.MarkerKey)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_source()) {
    // required .ru.mail.go.webbase.blobs.Searcher source = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  if (has_type()) {
    // required .ru.mail.go.webbase.blobs.MarkerKey.Type type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t MarkerKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MarkerKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required .ru.mail.go.webbase.blobs.Searcher source = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());

    // required .ru.mail.go.webbase.blobs.MarkerKey.Type type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MarkerKey)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkerKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkerKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MarkerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MarkerKey)
    MergeFrom(*source);
  }
}

void MarkerKey::MergeFrom(const MarkerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MarkerKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MarkerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerKey::CopyFrom(const MarkerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MarkerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MarkerKey::Swap(MarkerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkerKey::InternalSwap(MarkerKey* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(source_, other->source_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkerKey::GetMetadata() const {
  protobuf_clickrank_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clickrank_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkerKey

// required string url = 1;
bool MarkerKey::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkerKey::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkerKey::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkerKey::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& MarkerKey::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerKey.url)
  return url_.GetNoArena();
}
void MarkerKey::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerKey.url)
}
#if LANG_CXX11
void MarkerKey::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MarkerKey.url)
}
#endif
void MarkerKey::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MarkerKey.url)
}
void MarkerKey::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MarkerKey.url)
}
::std::string* MarkerKey::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkerKey.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkerKey::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MarkerKey.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkerKey::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MarkerKey.url)
}

// required .ru.mail.go.webbase.blobs.Searcher source = 2;
bool MarkerKey::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkerKey::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkerKey::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkerKey::clear_source() {
  source_ = 1;
  clear_has_source();
}
::ru::mail::go::webbase::blobs::Searcher MarkerKey::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerKey.source)
  return static_cast< ::ru::mail::go::webbase::blobs::Searcher >(source_);
}
void MarkerKey::set_source(::ru::mail::go::webbase::blobs::Searcher value) {
  assert(::ru::mail::go::webbase::blobs::Searcher_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerKey.source)
}

// required .ru.mail.go.webbase.blobs.MarkerKey.Type type = 3;
bool MarkerKey::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarkerKey::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void MarkerKey::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarkerKey::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::MarkerKey_Type MarkerKey::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerKey.type)
  return static_cast< ::ru::mail::go::webbase::blobs::MarkerKey_Type >(type_);
}
void MarkerKey::set_type(::ru::mail::go::webbase::blobs::MarkerKey_Type value) {
  assert(::ru::mail::go::webbase::blobs::MarkerKey_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerKey.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
