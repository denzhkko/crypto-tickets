// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clickrank_blobs.proto

#ifndef PROTOBUF_clickrank_5fblobs_2eproto__INCLUDED
#define PROTOBUF_clickrank_5fblobs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "parsed_blobs.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class BartertownRecord;
class BartertownRecordDefaultTypeInternal;
extern BartertownRecordDefaultTypeInternal _BartertownRecord_default_instance_;
class ClickRecord;
class ClickRecordDefaultTypeInternal;
extern ClickRecordDefaultTypeInternal _ClickRecord_default_instance_;
class EBinderKey;
class EBinderKeyDefaultTypeInternal;
extern EBinderKeyDefaultTypeInternal _EBinderKey_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class MarkerKey;
class MarkerKeyDefaultTypeInternal;
extern MarkerKeyDefaultTypeInternal _MarkerKey_default_instance_;
class PartialSession;
class PartialSessionDefaultTypeInternal;
extern PartialSessionDefaultTypeInternal _PartialSession_default_instance_;
class SerpItem;
class SerpItemDefaultTypeInternal;
extern SerpItemDefaultTypeInternal _SerpItem_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class UrlsRecord;
class UrlsRecordDefaultTypeInternal;
extern UrlsRecordDefaultTypeInternal _UrlsRecord_default_instance_;
class VarRecord;
class VarRecordDefaultTypeInternal;
extern VarRecordDefaultTypeInternal _VarRecord_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_clickrank_5fblobs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_clickrank_5fblobs_2eproto

enum MarkerKey_Type {
  MarkerKey_Type_IMAGE = 1,
  MarkerKey_Type_PAGE = 2
};
bool MarkerKey_Type_IsValid(int value);
const MarkerKey_Type MarkerKey_Type_Type_MIN = MarkerKey_Type_IMAGE;
const MarkerKey_Type MarkerKey_Type_Type_MAX = MarkerKey_Type_PAGE;
const int MarkerKey_Type_Type_ARRAYSIZE = MarkerKey_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarkerKey_Type_descriptor();
inline const ::std::string& MarkerKey_Type_Name(MarkerKey_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarkerKey_Type_descriptor(), value);
}
inline bool MarkerKey_Type_Parse(
    const ::std::string& name, MarkerKey_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarkerKey_Type>(
    MarkerKey_Type_descriptor(), name, value);
}
enum Sex {
  M = 1,
  F = 2
};
bool Sex_IsValid(int value);
const Sex Sex_MIN = M;
const Sex Sex_MAX = F;
const int Sex_ARRAYSIZE = Sex_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sex_descriptor();
inline const ::std::string& Sex_Name(Sex value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sex_descriptor(), value);
}
inline bool Sex_Parse(
    const ::std::string& name, Sex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sex>(
    Sex_descriptor(), name, value);
}
enum VkPlatform {
  WEB = 1,
  IPHONE = 2,
  ANDROID = 3,
  MVK = 4,
  SMART_TV = 5,
  IPAD_V2 = 6,
  VK_VIDEO_ANDROID = 7,
  VK_VIDEO_IOS = 8
};
bool VkPlatform_IsValid(int value);
const VkPlatform VkPlatform_MIN = WEB;
const VkPlatform VkPlatform_MAX = VK_VIDEO_IOS;
const int VkPlatform_ARRAYSIZE = VkPlatform_MAX + 1;

const ::google::protobuf::EnumDescriptor* VkPlatform_descriptor();
inline const ::std::string& VkPlatform_Name(VkPlatform value) {
  return ::google::protobuf::internal::NameOfEnum(
    VkPlatform_descriptor(), value);
}
inline bool VkPlatform_Parse(
    const ::std::string& name, VkPlatform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VkPlatform>(
    VkPlatform_descriptor(), name, value);
}
enum DzenSearchTab {
  VIDEO_SEARCH = 1,
  ARTICLES_SEARCH = 2,
  MULTI_SEARCH = 3
};
bool DzenSearchTab_IsValid(int value);
const DzenSearchTab DzenSearchTab_MIN = VIDEO_SEARCH;
const DzenSearchTab DzenSearchTab_MAX = MULTI_SEARCH;
const int DzenSearchTab_ARRAYSIZE = DzenSearchTab_MAX + 1;

const ::google::protobuf::EnumDescriptor* DzenSearchTab_descriptor();
inline const ::std::string& DzenSearchTab_Name(DzenSearchTab value) {
  return ::google::protobuf::internal::NameOfEnum(
    DzenSearchTab_descriptor(), value);
}
inline bool DzenSearchTab_Parse(
    const ::std::string& name, DzenSearchTab* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DzenSearchTab>(
    DzenSearchTab_descriptor(), name, value);
}
enum Vrt {
  IMG = 1,
  VDO = 2,
  VDO_MYMAIL = 3,
  MUS_MYMAIL = 4
};
bool Vrt_IsValid(int value);
const Vrt Vrt_MIN = IMG;
const Vrt Vrt_MAX = MUS_MYMAIL;
const int Vrt_ARRAYSIZE = Vrt_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vrt_descriptor();
inline const ::std::string& Vrt_Name(Vrt value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vrt_descriptor(), value);
}
inline bool Vrt_Parse(
    const ::std::string& name, Vrt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vrt>(
    Vrt_descriptor(), name, value);
}
enum Searcher {
  MAIL = 1,
  MAILG = 2,
  YNDX = 3,
  GOOG = 4,
  GOOG_IMGMIX = 5,
  YNDX_KVAKIN = 6,
  GOOG_KVAKIN = 7,
  INT_VS_GOOG = 8,
  INT_VS_YNDX = 9
};
bool Searcher_IsValid(int value);
const Searcher Searcher_MIN = MAIL;
const Searcher Searcher_MAX = INT_VS_YNDX;
const int Searcher_ARRAYSIZE = Searcher_MAX + 1;

const ::google::protobuf::EnumDescriptor* Searcher_descriptor();
inline const ::std::string& Searcher_Name(Searcher value) {
  return ::google::protobuf::internal::NameOfEnum(
    Searcher_descriptor(), value);
}
inline bool Searcher_Parse(
    const ::std::string& name, Searcher* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Searcher>(
    Searcher_descriptor(), name, value);
}
enum Device {
  LBUT = 1,
  KBD = 2
};
bool Device_IsValid(int value);
const Device Device_MIN = LBUT;
const Device Device_MAX = KBD;
const int Device_ARRAYSIZE = Device_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_descriptor();
inline const ::std::string& Device_Name(Device value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_descriptor(), value);
}
inline bool Device_Parse(
    const ::std::string& name, Device* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device>(
    Device_descriptor(), name, value);
}
enum Evtype {
  ON_UNKNOWN = 1,
  ON_SEARCH = 2,
  ON_CLICK_THUMB = 3,
  ON_CLICK_SITE = 4,
  ON_CLICK_ORIG = 5,
  ON_CLICK_HIDE = 6,
  ON_ERR_LOAD = 7,
  ON_CLOAKED = 8,
  ON_CLICK_MORE = 9,
  ON_VIEW_IMG = 10,
  ON_SHORT_VIEW = 11,
  ON_ULTRA_SHORT_VIEW = 12,
  ON_VIEW_VDO = 13,
  ON_FIRST_SHORT_VIEW = 14,
  ON_FIRST_ULTRA_SHORT_VIEW = 15,
  ON_FIRST_VIEW_VDO = 16,
  ON_FOLLOW_LINK_TO_VIDEO_NOT_ON_FIRST_PAGE = 17,
  ON_CLICK_MUSIC = 18,
  ON_VIDEO_10S = 19,
  ON_VIDEO_60S = 20,
  ON_CLICK_MOB_THUMB = 21,
  ON_SAW = 22,
  ON_CLICK_APP = 23,
  ON_DOWNLOADED_APP = 24
};
bool Evtype_IsValid(int value);
const Evtype Evtype_MIN = ON_UNKNOWN;
const Evtype Evtype_MAX = ON_DOWNLOADED_APP;
const int Evtype_ARRAYSIZE = Evtype_MAX + 1;

const ::google::protobuf::EnumDescriptor* Evtype_descriptor();
inline const ::std::string& Evtype_Name(Evtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    Evtype_descriptor(), value);
}
inline bool Evtype_Parse(
    const ::std::string& name, Evtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Evtype>(
    Evtype_descriptor(), name, value);
}
enum ClickArea {
  ON_MATRIX = 1,
  ON_RIBBON = 2
};
bool ClickArea_IsValid(int value);
const ClickArea ClickArea_MIN = ON_MATRIX;
const ClickArea ClickArea_MAX = ON_RIBBON;
const int ClickArea_ARRAYSIZE = ClickArea_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClickArea_descriptor();
inline const ::std::string& ClickArea_Name(ClickArea value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClickArea_descriptor(), value);
}
inline bool ClickArea_Parse(
    const ::std::string& name, ClickArea* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClickArea>(
    ClickArea_descriptor(), name, value);
}
// ===================================================================

class ClickRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.ClickRecord) */ {
 public:
  ClickRecord();
  virtual ~ClickRecord();

  ClickRecord(const ClickRecord& from);

  inline ClickRecord& operator=(const ClickRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClickRecord(ClickRecord&& from) noexcept
    : ClickRecord() {
    *this = ::std::move(from);
  }

  inline ClickRecord& operator=(ClickRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickRecord& default_instance();

  static inline const ClickRecord* internal_default_instance() {
    return reinterpret_cast<const ClickRecord*>(
               &_ClickRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClickRecord* other);
  friend void swap(ClickRecord& a, ClickRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClickRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  ClickRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClickRecord& from);
  void MergeFrom(const ClickRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClickRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string qid = 1;
  bool has_qid() const;
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // optional string mrcu = 2;
  bool has_mrcu() const;
  void clear_mrcu();
  static const int kMrcuFieldNumber = 2;
  const ::std::string& mrcu() const;
  void set_mrcu(const ::std::string& value);
  #if LANG_CXX11
  void set_mrcu(::std::string&& value);
  #endif
  void set_mrcu(const char* value);
  void set_mrcu(const char* value, size_t size);
  ::std::string* mutable_mrcu();
  ::std::string* release_mrcu();
  void set_allocated_mrcu(::std::string* mrcu);

  // required string searchUrl = 3;
  bool has_searchurl() const;
  void clear_searchurl();
  static const int kSearchUrlFieldNumber = 3;
  const ::std::string& searchurl() const;
  void set_searchurl(const ::std::string& value);
  #if LANG_CXX11
  void set_searchurl(::std::string&& value);
  #endif
  void set_searchurl(const char* value);
  void set_searchurl(const char* value, size_t size);
  ::std::string* mutable_searchurl();
  ::std::string* release_searchurl();
  void set_allocated_searchurl(::std::string* searchurl);

  // optional string resultUrl = 6;
  bool has_resulturl() const;
  void clear_resulturl();
  static const int kResultUrlFieldNumber = 6;
  const ::std::string& resulturl() const;
  void set_resulturl(const ::std::string& value);
  #if LANG_CXX11
  void set_resulturl(::std::string&& value);
  #endif
  void set_resulturl(const char* value);
  void set_resulturl(const char* value, size_t size);
  ::std::string* mutable_resulturl();
  ::std::string* release_resulturl();
  void set_allocated_resulturl(::std::string* resulturl);

  // optional string pixel = 8;
  bool has_pixel() const;
  void clear_pixel();
  static const int kPixelFieldNumber = 8;
  const ::std::string& pixel() const;
  void set_pixel(const ::std::string& value);
  #if LANG_CXX11
  void set_pixel(::std::string&& value);
  #endif
  void set_pixel(const char* value);
  void set_pixel(const char* value, size_t size);
  ::std::string* mutable_pixel();
  ::std::string* release_pixel();
  void set_allocated_pixel(::std::string* pixel);

  // optional string pageUrl = 10;
  bool has_pageurl() const;
  void clear_pageurl();
  static const int kPageUrlFieldNumber = 10;
  const ::std::string& pageurl() const;
  void set_pageurl(const ::std::string& value);
  #if LANG_CXX11
  void set_pageurl(::std::string&& value);
  #endif
  void set_pageurl(const char* value);
  void set_pageurl(const char* value, size_t size);
  ::std::string* mutable_pageurl();
  ::std::string* release_pageurl();
  void set_allocated_pageurl(::std::string* pageurl);

  // required uint64 time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint32 duration = 11;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 11;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.blobs.ClickArea area = 9;
  bool has_area() const;
  void clear_area();
  static const int kAreaFieldNumber = 9;
  ::ru::mail::go::webbase::blobs::ClickArea area() const;
  void set_area(::ru::mail::go::webbase::blobs::ClickArea value);

  // required .ru.mail.go.webbase.blobs.Evtype evtype = 5;
  bool has_evtype() const;
  void clear_evtype();
  static const int kEvtypeFieldNumber = 5;
  ::ru::mail::go::webbase::blobs::Evtype evtype() const;
  void set_evtype(::ru::mail::go::webbase::blobs::Evtype value);

  // optional .ru.mail.go.webbase.blobs.Device device = 7;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 7;
  ::ru::mail::go::webbase::blobs::Device device() const;
  void set_device(::ru::mail::go::webbase::blobs::Device value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.ClickRecord)
 private:
  void set_has_qid();
  void clear_has_qid();
  void set_has_mrcu();
  void clear_has_mrcu();
  void set_has_searchurl();
  void clear_has_searchurl();
  void set_has_time();
  void clear_has_time();
  void set_has_evtype();
  void clear_has_evtype();
  void set_has_resulturl();
  void clear_has_resulturl();
  void set_has_device();
  void clear_has_device();
  void set_has_pixel();
  void clear_has_pixel();
  void set_has_area();
  void clear_has_area();
  void set_has_pageurl();
  void clear_has_pageurl();
  void set_has_duration();
  void clear_has_duration();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr mrcu_;
  ::google::protobuf::internal::ArenaStringPtr searchurl_;
  ::google::protobuf::internal::ArenaStringPtr resulturl_;
  ::google::protobuf::internal::ArenaStringPtr pixel_;
  ::google::protobuf::internal::ArenaStringPtr pageurl_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 duration_;
  int area_;
  int evtype_;
  int device_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UrlsRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.UrlsRecord) */ {
 public:
  UrlsRecord();
  virtual ~UrlsRecord();

  UrlsRecord(const UrlsRecord& from);

  inline UrlsRecord& operator=(const UrlsRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UrlsRecord(UrlsRecord&& from) noexcept
    : UrlsRecord() {
    *this = ::std::move(from);
  }

  inline UrlsRecord& operator=(UrlsRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UrlsRecord& default_instance();

  static inline const UrlsRecord* internal_default_instance() {
    return reinterpret_cast<const UrlsRecord*>(
               &_UrlsRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UrlsRecord* other);
  friend void swap(UrlsRecord& a, UrlsRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UrlsRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  UrlsRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UrlsRecord& from);
  void MergeFrom(const UrlsRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UrlsRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string url = 2;
  int url_size() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url(int index) const;
  ::std::string* mutable_url(int index);
  void set_url(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_url(int index, ::std::string&& value);
  #endif
  void set_url(int index, const char* value);
  void set_url(int index, const char* value, size_t size);
  ::std::string* add_url();
  void add_url(const ::std::string& value);
  #if LANG_CXX11
  void add_url(::std::string&& value);
  #endif
  void add_url(const char* value);
  void add_url(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& url() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url();

  // optional string qid = 1;
  bool has_qid() const;
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // optional string message_type = 4;
  bool has_message_type() const;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 4;
  const ::std::string& message_type() const;
  void set_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_message_type(::std::string&& value);
  #endif
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  ::std::string* mutable_message_type();
  ::std::string* release_message_type();
  void set_allocated_message_type(::std::string* message_type);

  // optional uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.UrlsRecord)
 private:
  void set_has_qid();
  void clear_has_qid();
  void set_has_time();
  void clear_has_time();
  void set_has_message_type();
  void clear_has_message_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr message_type_;
  ::google::protobuf::uint64 time_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BartertownRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.BartertownRecord) */ {
 public:
  BartertownRecord();
  virtual ~BartertownRecord();

  BartertownRecord(const BartertownRecord& from);

  inline BartertownRecord& operator=(const BartertownRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BartertownRecord(BartertownRecord&& from) noexcept
    : BartertownRecord() {
    *this = ::std::move(from);
  }

  inline BartertownRecord& operator=(BartertownRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BartertownRecord& default_instance();

  static inline const BartertownRecord* internal_default_instance() {
    return reinterpret_cast<const BartertownRecord*>(
               &_BartertownRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BartertownRecord* other);
  friend void swap(BartertownRecord& a, BartertownRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BartertownRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  BartertownRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BartertownRecord& from);
  void MergeFrom(const BartertownRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BartertownRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string qid = 1;
  bool has_qid() const;
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // optional string mrcu = 2;
  bool has_mrcu() const;
  void clear_mrcu();
  static const int kMrcuFieldNumber = 2;
  const ::std::string& mrcu() const;
  void set_mrcu(const ::std::string& value);
  #if LANG_CXX11
  void set_mrcu(::std::string&& value);
  #endif
  void set_mrcu(const char* value);
  void set_mrcu(const char* value, size_t size);
  ::std::string* mutable_mrcu();
  ::std::string* release_mrcu();
  void set_allocated_mrcu(::std::string* mrcu);

  // required string searchUrl = 3;
  bool has_searchurl() const;
  void clear_searchurl();
  static const int kSearchUrlFieldNumber = 3;
  const ::std::string& searchurl() const;
  void set_searchurl(const ::std::string& value);
  #if LANG_CXX11
  void set_searchurl(::std::string&& value);
  #endif
  void set_searchurl(const char* value);
  void set_searchurl(const char* value, size_t size);
  ::std::string* mutable_searchurl();
  ::std::string* release_searchurl();
  void set_allocated_searchurl(::std::string* searchurl);

  // optional string query = 8;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 8;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string curQid = 13;
  bool has_curqid() const;
  void clear_curqid();
  static const int kCurQidFieldNumber = 13;
  const ::std::string& curqid() const;
  void set_curqid(const ::std::string& value);
  #if LANG_CXX11
  void set_curqid(::std::string&& value);
  #endif
  void set_curqid(const char* value);
  void set_curqid(const char* value, size_t size);
  ::std::string* mutable_curqid();
  ::std::string* release_curqid();
  void set_allocated_curqid(::std::string* curqid);

  // optional string extra = 15;
  bool has_extra() const;
  void clear_extra();
  static const int kExtraFieldNumber = 15;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  #if LANG_CXX11
  void set_extra(::std::string&& value);
  #endif
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // required uint64 time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint32 sf = 7;
  bool has_sf() const;
  void clear_sf();
  static const int kSfFieldNumber = 7;
  ::google::protobuf::uint32 sf() const;
  void set_sf(::google::protobuf::uint32 value);

  // optional uint32 age = 10;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 10;
  ::google::protobuf::uint32 age() const;
  void set_age(::google::protobuf::uint32 value);

  // optional uint32 region = 11;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 11;
  ::google::protobuf::uint32 region() const;
  void set_region(::google::protobuf::uint32 value);

  // optional uint32 expid = 12;
  bool has_expid() const;
  void clear_expid();
  static const int kExpidFieldNumber = 12;
  ::google::protobuf::uint32 expid() const;
  void set_expid(::google::protobuf::uint32 value);

  // optional uint64 vkUserId = 14;
  bool has_vkuserid() const;
  void clear_vkuserid();
  static const int kVkUserIdFieldNumber = 14;
  ::google::protobuf::uint64 vkuserid() const;
  void set_vkuserid(::google::protobuf::uint64 value);

  // optional uint32 split = 16;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 16;
  ::google::protobuf::uint32 split() const;
  void set_split(::google::protobuf::uint32 value);

  // optional bool mobile = 17;
  bool has_mobile() const;
  void clear_mobile();
  static const int kMobileFieldNumber = 17;
  bool mobile() const;
  void set_mobile(bool value);

  // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 9;
  ::ru::mail::go::webbase::blobs::Sex sex() const;
  void set_sex(::ru::mail::go::webbase::blobs::Sex value);

  // optional .ru.mail.go.webbase.blobs.Vrt vrt = 5;
  bool has_vrt() const;
  void clear_vrt();
  static const int kVrtFieldNumber = 5;
  ::ru::mail::go::webbase::blobs::Vrt vrt() const;
  void set_vrt(::ru::mail::go::webbase::blobs::Vrt value);

  // optional .ru.mail.go.webbase.blobs.Searcher searcher = 6;
  bool has_searcher() const;
  void clear_searcher();
  static const int kSearcherFieldNumber = 6;
  ::ru::mail::go::webbase::blobs::Searcher searcher() const;
  void set_searcher(::ru::mail::go::webbase::blobs::Searcher value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.BartertownRecord)
 private:
  void set_has_qid();
  void clear_has_qid();
  void set_has_mrcu();
  void clear_has_mrcu();
  void set_has_searchurl();
  void clear_has_searchurl();
  void set_has_time();
  void clear_has_time();
  void set_has_vrt();
  void clear_has_vrt();
  void set_has_searcher();
  void clear_has_searcher();
  void set_has_sf();
  void clear_has_sf();
  void set_has_query();
  void clear_has_query();
  void set_has_sex();
  void clear_has_sex();
  void set_has_age();
  void clear_has_age();
  void set_has_region();
  void clear_has_region();
  void set_has_expid();
  void clear_has_expid();
  void set_has_curqid();
  void clear_has_curqid();
  void set_has_vkuserid();
  void clear_has_vkuserid();
  void set_has_extra();
  void clear_has_extra();
  void set_has_split();
  void clear_has_split();
  void set_has_mobile();
  void clear_has_mobile();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr mrcu_;
  ::google::protobuf::internal::ArenaStringPtr searchurl_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr curqid_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 sf_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 region_;
  ::google::protobuf::uint32 expid_;
  ::google::protobuf::uint64 vkuserid_;
  ::google::protobuf::uint32 split_;
  bool mobile_;
  int sex_;
  int vrt_;
  int searcher_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VarRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.VarRecord) */ {
 public:
  VarRecord();
  virtual ~VarRecord();

  VarRecord(const VarRecord& from);

  inline VarRecord& operator=(const VarRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VarRecord(VarRecord&& from) noexcept
    : VarRecord() {
    *this = ::std::move(from);
  }

  inline VarRecord& operator=(VarRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VarRecord& default_instance();

  static inline const VarRecord* internal_default_instance() {
    return reinterpret_cast<const VarRecord*>(
               &_VarRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VarRecord* other);
  friend void swap(VarRecord& a, VarRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VarRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  VarRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VarRecord& from);
  void MergeFrom(const VarRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VarRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.webbase.blobs.ClickRecord crec = 1;
  bool has_crec() const;
  void clear_crec();
  static const int kCrecFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::ClickRecord& crec() const;
  ::ru::mail::go::webbase::blobs::ClickRecord* mutable_crec();
  ::ru::mail::go::webbase::blobs::ClickRecord* release_crec();
  void set_allocated_crec(::ru::mail::go::webbase::blobs::ClickRecord* crec);

  // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
  bool has_urec() const;
  void clear_urec();
  static const int kUrecFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::UrlsRecord& urec() const;
  ::ru::mail::go::webbase::blobs::UrlsRecord* mutable_urec();
  ::ru::mail::go::webbase::blobs::UrlsRecord* release_urec();
  void set_allocated_urec(::ru::mail::go::webbase::blobs::UrlsRecord* urec);

  // optional .ru.mail.go.webbase.blobs.BartertownRecord brec = 3;
  bool has_brec() const;
  void clear_brec();
  static const int kBrecFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::BartertownRecord& brec() const;
  ::ru::mail::go::webbase::blobs::BartertownRecord* mutable_brec();
  ::ru::mail::go::webbase::blobs::BartertownRecord* release_brec();
  void set_allocated_brec(::ru::mail::go::webbase::blobs::BartertownRecord* brec);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.VarRecord)
 private:
  void set_has_crec();
  void clear_has_crec();
  void set_has_urec();
  void clear_has_urec();
  void set_has_brec();
  void clear_has_brec();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::blobs::ClickRecord* crec_;
  ::ru::mail::go::webbase::blobs::UrlsRecord* urec_;
  ::ru::mail::go::webbase::blobs::BartertownRecord* brec_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PartialSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.PartialSession) */ {
 public:
  PartialSession();
  virtual ~PartialSession();

  PartialSession(const PartialSession& from);

  inline PartialSession& operator=(const PartialSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PartialSession(PartialSession&& from) noexcept
    : PartialSession() {
    *this = ::std::move(from);
  }

  inline PartialSession& operator=(PartialSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartialSession& default_instance();

  static inline const PartialSession* internal_default_instance() {
    return reinterpret_cast<const PartialSession*>(
               &_PartialSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PartialSession* other);
  friend void swap(PartialSession& a, PartialSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PartialSession* New() const PROTOBUF_FINAL { return New(NULL); }

  PartialSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PartialSession& from);
  void MergeFrom(const PartialSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PartialSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.ClickRecord crec = 3;
  int crec_size() const;
  void clear_crec();
  static const int kCrecFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::ClickRecord& crec(int index) const;
  ::ru::mail::go::webbase::blobs::ClickRecord* mutable_crec(int index);
  ::ru::mail::go::webbase::blobs::ClickRecord* add_crec();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ClickRecord >*
      mutable_crec();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ClickRecord >&
      crec() const;

  // required .ru.mail.go.webbase.blobs.BartertownRecord brec = 1;
  bool has_brec() const;
  void clear_brec();
  static const int kBrecFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::BartertownRecord& brec() const;
  ::ru::mail::go::webbase::blobs::BartertownRecord* mutable_brec();
  ::ru::mail::go::webbase::blobs::BartertownRecord* release_brec();
  void set_allocated_brec(::ru::mail::go::webbase::blobs::BartertownRecord* brec);

  // optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
  bool has_urec() const;
  void clear_urec();
  static const int kUrecFieldNumber = 2;
  const ::ru::mail::go::webbase::blobs::UrlsRecord& urec() const;
  ::ru::mail::go::webbase::blobs::UrlsRecord* mutable_urec();
  ::ru::mail::go::webbase::blobs::UrlsRecord* release_urec();
  void set_allocated_urec(::ru::mail::go::webbase::blobs::UrlsRecord* urec);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.PartialSession)
 private:
  void set_has_brec();
  void clear_has_brec();
  void set_has_urec();
  void clear_has_urec();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ClickRecord > crec_;
  ::ru::mail::go::webbase::blobs::BartertownRecord* brec_;
  ::ru::mail::go::webbase::blobs::UrlsRecord* urec_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pixel = 5;
  bool has_pixel() const;
  void clear_pixel();
  static const int kPixelFieldNumber = 5;
  const ::std::string& pixel() const;
  void set_pixel(const ::std::string& value);
  #if LANG_CXX11
  void set_pixel(::std::string&& value);
  #endif
  void set_pixel(const char* value);
  void set_pixel(const char* value, size_t size);
  ::std::string* mutable_pixel();
  ::std::string* release_pixel();
  void set_allocated_pixel(::std::string* pixel);

  // optional string extra = 8;
  bool has_extra() const;
  void clear_extra();
  static const int kExtraFieldNumber = 8;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  #if LANG_CXX11
  void set_extra(::std::string&& value);
  #endif
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint32 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // optional uint32 duration = 7;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 7;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.blobs.ClickArea area = 6;
  bool has_area() const;
  void clear_area();
  static const int kAreaFieldNumber = 6;
  ::ru::mail::go::webbase::blobs::ClickArea area() const;
  void set_area(::ru::mail::go::webbase::blobs::ClickArea value);

  // required .ru.mail.go.webbase.blobs.Evtype evtype = 2;
  bool has_evtype() const;
  void clear_evtype();
  static const int kEvtypeFieldNumber = 2;
  ::ru::mail::go::webbase::blobs::Evtype evtype() const;
  void set_evtype(::ru::mail::go::webbase::blobs::Evtype value);

  // optional .ru.mail.go.webbase.blobs.Device device = 4;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 4;
  ::ru::mail::go::webbase::blobs::Device device() const;
  void set_device(::ru::mail::go::webbase::blobs::Device value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.Event)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_evtype();
  void clear_has_evtype();
  void set_has_pos();
  void clear_has_pos();
  void set_has_device();
  void clear_has_device();
  void set_has_pixel();
  void clear_has_pixel();
  void set_has_area();
  void clear_has_area();
  void set_has_duration();
  void clear_has_duration();
  void set_has_extra();
  void clear_has_extra();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pixel_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 duration_;
  int area_;
  int evtype_;
  int device_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerpItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.SerpItem) */ {
 public:
  SerpItem();
  virtual ~SerpItem();

  SerpItem(const SerpItem& from);

  inline SerpItem& operator=(const SerpItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerpItem(SerpItem&& from) noexcept
    : SerpItem() {
    *this = ::std::move(from);
  }

  inline SerpItem& operator=(SerpItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerpItem& default_instance();

  static inline const SerpItem* internal_default_instance() {
    return reinterpret_cast<const SerpItem*>(
               &_SerpItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SerpItem* other);
  friend void swap(SerpItem& a, SerpItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerpItem* New() const PROTOBUF_FINAL { return New(NULL); }

  SerpItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerpItem& from);
  void MergeFrom(const SerpItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerpItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dups = 2;
  int dups_size() const;
  void clear_dups();
  static const int kDupsFieldNumber = 2;
  const ::std::string& dups(int index) const;
  ::std::string* mutable_dups(int index);
  void set_dups(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dups(int index, ::std::string&& value);
  #endif
  void set_dups(int index, const char* value);
  void set_dups(int index, const char* value, size_t size);
  ::std::string* add_dups();
  void add_dups(const ::std::string& value);
  #if LANG_CXX11
  void add_dups(::std::string&& value);
  #endif
  void add_dups(const char* value);
  void add_dups(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dups() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dups();

  // repeated string pageUrls = 3;
  int pageurls_size() const;
  void clear_pageurls();
  static const int kPageUrlsFieldNumber = 3;
  const ::std::string& pageurls(int index) const;
  ::std::string* mutable_pageurls(int index);
  void set_pageurls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_pageurls(int index, ::std::string&& value);
  #endif
  void set_pageurls(int index, const char* value);
  void set_pageurls(int index, const char* value, size_t size);
  ::std::string* add_pageurls();
  void add_pageurls(const ::std::string& value);
  #if LANG_CXX11
  void add_pageurls(::std::string&& value);
  #endif
  void add_pageurls(const char* value);
  void add_pageurls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pageurls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pageurls();

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string snippet = 5;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 5;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // optional uint32 searchPos = 6;
  bool has_searchpos() const;
  void clear_searchpos();
  static const int kSearchPosFieldNumber = 6;
  ::google::protobuf::uint32 searchpos() const;
  void set_searchpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.SerpItem)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();
  void set_has_snippet();
  void clear_has_snippet();
  void set_has_searchpos();
  void clear_has_searchpos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dups_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pageurls_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  ::google::protobuf::uint32 searchpos_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const PROTOBUF_FINAL { return New(NULL); }

  Session* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.Event event = 7;
  int event_size() const;
  void clear_event();
  static const int kEventFieldNumber = 7;
  const ::ru::mail::go::webbase::blobs::Event& event(int index) const;
  ::ru::mail::go::webbase::blobs::Event* mutable_event(int index);
  ::ru::mail::go::webbase::blobs::Event* add_event();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Event >*
      mutable_event();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Event >&
      event() const;

  // repeated string url = 8;
  int url_size() const;
  void clear_url();
  static const int kUrlFieldNumber = 8;
  const ::std::string& url(int index) const;
  ::std::string* mutable_url(int index);
  void set_url(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_url(int index, ::std::string&& value);
  #endif
  void set_url(int index, const char* value);
  void set_url(int index, const char* value, size_t size);
  ::std::string* add_url();
  void add_url(const ::std::string& value);
  #if LANG_CXX11
  void add_url(::std::string&& value);
  #endif
  void add_url(const char* value);
  void add_url(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& url() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url();

  // repeated .ru.mail.go.webbase.blobs.SerpItem items = 13;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 13;
  const ::ru::mail::go::webbase::blobs::SerpItem& items(int index) const;
  ::ru::mail::go::webbase::blobs::SerpItem* mutable_items(int index);
  ::ru::mail::go::webbase::blobs::SerpItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SerpItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SerpItem >&
      items() const;

  // repeated uint64 dzenExperimentIds = 29;
  int dzenexperimentids_size() const;
  void clear_dzenexperimentids();
  static const int kDzenExperimentIdsFieldNumber = 29;
  ::google::protobuf::uint64 dzenexperimentids(int index) const;
  void set_dzenexperimentids(int index, ::google::protobuf::uint64 value);
  void add_dzenexperimentids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      dzenexperimentids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_dzenexperimentids();

  // optional string query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string searchUrl = 4;
  bool has_searchurl() const;
  void clear_searchurl();
  static const int kSearchUrlFieldNumber = 4;
  const ::std::string& searchurl() const;
  void set_searchurl(const ::std::string& value);
  #if LANG_CXX11
  void set_searchurl(::std::string&& value);
  #endif
  void set_searchurl(const char* value);
  void set_searchurl(const char* value, size_t size);
  ::std::string* mutable_searchurl();
  ::std::string* release_searchurl();
  void set_allocated_searchurl(::std::string* searchurl);

  // optional string mrcu = 5;
  bool has_mrcu() const;
  void clear_mrcu();
  static const int kMrcuFieldNumber = 5;
  const ::std::string& mrcu() const;
  void set_mrcu(const ::std::string& value);
  #if LANG_CXX11
  void set_mrcu(::std::string&& value);
  #endif
  void set_mrcu(const char* value);
  void set_mrcu(const char* value, size_t size);
  ::std::string* mutable_mrcu();
  ::std::string* release_mrcu();
  void set_allocated_mrcu(::std::string* mrcu);

  // optional string uid = 12;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 12;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional string urlsRecordMessageType = 17;
  bool has_urlsrecordmessagetype() const;
  void clear_urlsrecordmessagetype();
  static const int kUrlsRecordMessageTypeFieldNumber = 17;
  const ::std::string& urlsrecordmessagetype() const;
  void set_urlsrecordmessagetype(const ::std::string& value);
  #if LANG_CXX11
  void set_urlsrecordmessagetype(::std::string&& value);
  #endif
  void set_urlsrecordmessagetype(const char* value);
  void set_urlsrecordmessagetype(const char* value, size_t size);
  ::std::string* mutable_urlsrecordmessagetype();
  ::std::string* release_urlsrecordmessagetype();
  void set_allocated_urlsrecordmessagetype(::std::string* urlsrecordmessagetype);

  // optional string extra = 18;
  bool has_extra() const;
  void clear_extra();
  static const int kExtraFieldNumber = 18;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  #if LANG_CXX11
  void set_extra(::std::string&& value);
  #endif
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // optional string vkQueryId = 24;
  bool has_vkqueryid() const;
  void clear_vkqueryid();
  static const int kVkQueryIdFieldNumber = 24;
  const ::std::string& vkqueryid() const;
  void set_vkqueryid(const ::std::string& value);
  #if LANG_CXX11
  void set_vkqueryid(::std::string&& value);
  #endif
  void set_vkqueryid(const char* value);
  void set_vkqueryid(const char* value, size_t size);
  ::std::string* mutable_vkqueryid();
  ::std::string* release_vkqueryid();
  void set_allocated_vkqueryid(::std::string* vkqueryid);

  // optional string dzenSearchId = 25;
  bool has_dzensearchid() const;
  void clear_dzensearchid();
  static const int kDzenSearchIdFieldNumber = 25;
  const ::std::string& dzensearchid() const;
  void set_dzensearchid(const ::std::string& value);
  #if LANG_CXX11
  void set_dzensearchid(::std::string&& value);
  #endif
  void set_dzensearchid(const char* value);
  void set_dzensearchid(const char* value, size_t size);
  ::std::string* mutable_dzensearchid();
  ::std::string* release_dzensearchid();
  void set_allocated_dzensearchid(::std::string* dzensearchid);

  // optional string dzenStrongestId = 26;
  bool has_dzenstrongestid() const;
  void clear_dzenstrongestid();
  static const int kDzenStrongestIdFieldNumber = 26;
  const ::std::string& dzenstrongestid() const;
  void set_dzenstrongestid(const ::std::string& value);
  #if LANG_CXX11
  void set_dzenstrongestid(::std::string&& value);
  #endif
  void set_dzenstrongestid(const char* value);
  void set_dzenstrongestid(const char* value, size_t size);
  ::std::string* mutable_dzenstrongestid();
  ::std::string* release_dzenstrongestid();
  void set_allocated_dzenstrongestid(::std::string* dzenstrongestid);

  // optional string rustoreQueryId = 28;
  bool has_rustorequeryid() const;
  void clear_rustorequeryid();
  static const int kRustoreQueryIdFieldNumber = 28;
  const ::std::string& rustorequeryid() const;
  void set_rustorequeryid(const ::std::string& value);
  #if LANG_CXX11
  void set_rustorequeryid(::std::string&& value);
  #endif
  void set_rustorequeryid(const char* value);
  void set_rustorequeryid(const char* value, size_t size);
  ::std::string* mutable_rustorequeryid();
  ::std::string* release_rustorequeryid();
  void set_allocated_rustorequeryid(::std::string* rustorequeryid);

  // required uint64 time = 6;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint32 age = 10;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 10;
  ::google::protobuf::uint32 age() const;
  void set_age(::google::protobuf::uint32 value);

  // optional uint32 region = 11;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 11;
  ::google::protobuf::uint32 region() const;
  void set_region(::google::protobuf::uint32 value);

  // optional uint32 weight = 14;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 14;
  ::google::protobuf::uint32 weight() const;
  void set_weight(::google::protobuf::uint32 value);

  // optional uint32 expid = 15;
  bool has_expid() const;
  void clear_expid();
  static const int kExpidFieldNumber = 15;
  ::google::protobuf::uint32 expid() const;
  void set_expid(::google::protobuf::uint32 value);

  // optional uint64 vkUserId = 16;
  bool has_vkuserid() const;
  void clear_vkuserid();
  static const int kVkUserIdFieldNumber = 16;
  ::google::protobuf::uint64 vkuserid() const;
  void set_vkuserid(::google::protobuf::uint64 value);

  // optional uint32 split = 19;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 19;
  ::google::protobuf::uint32 split() const;
  void set_split(::google::protobuf::uint32 value);

  // optional bool mobile = 20;
  bool has_mobile() const;
  void clear_mobile();
  static const int kMobileFieldNumber = 20;
  bool mobile() const;
  void set_mobile(bool value);

  // optional bool vkIsSafeSearch = 21;
  bool has_vkissafesearch() const;
  void clear_vkissafesearch();
  static const int kVkIsSafeSearchFieldNumber = 21;
  bool vkissafesearch() const;
  void set_vkissafesearch(bool value);

  // optional uint32 vkUserCountryId = 23;
  bool has_vkusercountryid() const;
  void clear_vkusercountryid();
  static const int kVkUserCountryIdFieldNumber = 23;
  ::google::protobuf::uint32 vkusercountryid() const;
  void set_vkusercountryid(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.blobs.DzenSearchTab dzenSearchTab = 27;
  bool has_dzensearchtab() const;
  void clear_dzensearchtab();
  static const int kDzenSearchTabFieldNumber = 27;
  ::ru::mail::go::webbase::blobs::DzenSearchTab dzensearchtab() const;
  void set_dzensearchtab(::ru::mail::go::webbase::blobs::DzenSearchTab value);

  // optional .ru.mail.go.webbase.blobs.Vrt vrt = 1;
  bool has_vrt() const;
  void clear_vrt();
  static const int kVrtFieldNumber = 1;
  ::ru::mail::go::webbase::blobs::Vrt vrt() const;
  void set_vrt(::ru::mail::go::webbase::blobs::Vrt value);

  // optional .ru.mail.go.webbase.blobs.Searcher searcher = 3;
  bool has_searcher() const;
  void clear_searcher();
  static const int kSearcherFieldNumber = 3;
  ::ru::mail::go::webbase::blobs::Searcher searcher() const;
  void set_searcher(::ru::mail::go::webbase::blobs::Searcher value);

  // optional .ru.mail.go.webbase.blobs.Sex sex = 9;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 9;
  ::ru::mail::go::webbase::blobs::Sex sex() const;
  void set_sex(::ru::mail::go::webbase::blobs::Sex value);

  // optional .ru.mail.go.webbase.blobs.VkPlatform vkPlatform = 22;
  bool has_vkplatform() const;
  void clear_vkplatform();
  static const int kVkPlatformFieldNumber = 22;
  ::ru::mail::go::webbase::blobs::VkPlatform vkplatform() const;
  void set_vkplatform(::ru::mail::go::webbase::blobs::VkPlatform value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.Session)
 private:
  void set_has_vrt();
  void clear_has_vrt();
  void set_has_query();
  void clear_has_query();
  void set_has_searcher();
  void clear_has_searcher();
  void set_has_searchurl();
  void clear_has_searchurl();
  void set_has_mrcu();
  void clear_has_mrcu();
  void set_has_time();
  void clear_has_time();
  void set_has_sex();
  void clear_has_sex();
  void set_has_age();
  void clear_has_age();
  void set_has_region();
  void clear_has_region();
  void set_has_uid();
  void clear_has_uid();
  void set_has_weight();
  void clear_has_weight();
  void set_has_expid();
  void clear_has_expid();
  void set_has_vkuserid();
  void clear_has_vkuserid();
  void set_has_urlsrecordmessagetype();
  void clear_has_urlsrecordmessagetype();
  void set_has_extra();
  void clear_has_extra();
  void set_has_split();
  void clear_has_split();
  void set_has_mobile();
  void clear_has_mobile();
  void set_has_vkissafesearch();
  void clear_has_vkissafesearch();
  void set_has_vkplatform();
  void clear_has_vkplatform();
  void set_has_vkusercountryid();
  void clear_has_vkusercountryid();
  void set_has_vkqueryid();
  void clear_has_vkqueryid();
  void set_has_dzensearchid();
  void clear_has_dzensearchid();
  void set_has_dzenstrongestid();
  void clear_has_dzenstrongestid();
  void set_has_dzensearchtab();
  void clear_has_dzensearchtab();
  void set_has_rustorequeryid();
  void clear_has_rustorequeryid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Event > event_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SerpItem > items_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > dzenexperimentids_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr searchurl_;
  ::google::protobuf::internal::ArenaStringPtr mrcu_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr urlsrecordmessagetype_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::internal::ArenaStringPtr vkqueryid_;
  ::google::protobuf::internal::ArenaStringPtr dzensearchid_;
  ::google::protobuf::internal::ArenaStringPtr dzenstrongestid_;
  ::google::protobuf::internal::ArenaStringPtr rustorequeryid_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 region_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 expid_;
  ::google::protobuf::uint64 vkuserid_;
  ::google::protobuf::uint32 split_;
  bool mobile_;
  bool vkissafesearch_;
  ::google::protobuf::uint32 vkusercountryid_;
  int dzensearchtab_;
  int vrt_;
  int searcher_;
  int sex_;
  int vkplatform_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EBinderKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.EBinderKey) */ {
 public:
  EBinderKey();
  virtual ~EBinderKey();

  EBinderKey(const EBinderKey& from);

  inline EBinderKey& operator=(const EBinderKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EBinderKey(EBinderKey&& from) noexcept
    : EBinderKey() {
    *this = ::std::move(from);
  }

  inline EBinderKey& operator=(EBinderKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EBinderKey& default_instance();

  static inline const EBinderKey* internal_default_instance() {
    return reinterpret_cast<const EBinderKey*>(
               &_EBinderKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(EBinderKey* other);
  friend void swap(EBinderKey& a, EBinderKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EBinderKey* New() const PROTOBUF_FINAL { return New(NULL); }

  EBinderKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EBinderKey& from);
  void MergeFrom(const EBinderKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EBinderKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required int64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required .ru.mail.go.webbase.blobs.ExtraTextArray.ExtraText.Type type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type type() const;
  void set_type(::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.EBinderKey)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_key();
  void clear_has_key();
  void set_has_text();
  void clear_has_text();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::int64 timestamp_;
  int type_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkerKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.MarkerKey) */ {
 public:
  MarkerKey();
  virtual ~MarkerKey();

  MarkerKey(const MarkerKey& from);

  inline MarkerKey& operator=(const MarkerKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkerKey(MarkerKey&& from) noexcept
    : MarkerKey() {
    *this = ::std::move(from);
  }

  inline MarkerKey& operator=(MarkerKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkerKey& default_instance();

  static inline const MarkerKey* internal_default_instance() {
    return reinterpret_cast<const MarkerKey*>(
               &_MarkerKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(MarkerKey* other);
  friend void swap(MarkerKey& a, MarkerKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkerKey* New() const PROTOBUF_FINAL { return New(NULL); }

  MarkerKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarkerKey& from);
  void MergeFrom(const MarkerKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarkerKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MarkerKey_Type Type;
  static const Type IMAGE =
    MarkerKey_Type_IMAGE;
  static const Type PAGE =
    MarkerKey_Type_PAGE;
  static inline bool Type_IsValid(int value) {
    return MarkerKey_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MarkerKey_Type_Type_MIN;
  static const Type Type_MAX =
    MarkerKey_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MarkerKey_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MarkerKey_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MarkerKey_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MarkerKey_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required .ru.mail.go.webbase.blobs.Searcher source = 2;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  ::ru::mail::go::webbase::blobs::Searcher source() const;
  void set_source(::ru::mail::go::webbase::blobs::Searcher value);

  // required .ru.mail.go.webbase.blobs.MarkerKey.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ru::mail::go::webbase::blobs::MarkerKey_Type type() const;
  void set_type(::ru::mail::go::webbase::blobs::MarkerKey_Type value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.MarkerKey)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_source();
  void clear_has_source();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  int source_;
  int type_;
  friend struct protobuf_clickrank_5fblobs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClickRecord

// required string qid = 1;
inline bool ClickRecord::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickRecord::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickRecord::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickRecord::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
inline const ::std::string& ClickRecord::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.qid)
  return qid_.GetNoArena();
}
inline void ClickRecord::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.qid)
}
#if LANG_CXX11
inline void ClickRecord::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.qid)
}
#endif
inline void ClickRecord::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.qid)
}
inline void ClickRecord::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.qid)
}
inline ::std::string* ClickRecord::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickRecord::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRecord::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.qid)
}

// optional string mrcu = 2;
inline bool ClickRecord::has_mrcu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClickRecord::set_has_mrcu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClickRecord::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClickRecord::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
inline const ::std::string& ClickRecord::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
  return mrcu_.GetNoArena();
}
inline void ClickRecord::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}
#if LANG_CXX11
inline void ClickRecord::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}
#endif
inline void ClickRecord::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}
inline void ClickRecord::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}
inline ::std::string* ClickRecord::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickRecord::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRecord::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.mrcu)
}

// required string searchUrl = 3;
inline bool ClickRecord::has_searchurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClickRecord::set_has_searchurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClickRecord::clear_has_searchurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClickRecord::clear_searchurl() {
  searchurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchurl();
}
inline const ::std::string& ClickRecord::searchurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
  return searchurl_.GetNoArena();
}
inline void ClickRecord::set_searchurl(const ::std::string& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}
#if LANG_CXX11
inline void ClickRecord::set_searchurl(::std::string&& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}
#endif
inline void ClickRecord::set_searchurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}
inline void ClickRecord::set_searchurl(const char* value, size_t size) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}
inline ::std::string* ClickRecord::mutable_searchurl() {
  set_has_searchurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
  return searchurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickRecord::release_searchurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
  clear_has_searchurl();
  return searchurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRecord::set_allocated_searchurl(::std::string* searchurl) {
  if (searchurl != NULL) {
    set_has_searchurl();
  } else {
    clear_has_searchurl();
  }
  searchurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.searchUrl)
}

// required uint64 time = 4;
inline bool ClickRecord::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClickRecord::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClickRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClickRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 ClickRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.time)
  return time_;
}
inline void ClickRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.time)
}

// required .ru.mail.go.webbase.blobs.Evtype evtype = 5;
inline bool ClickRecord::has_evtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClickRecord::set_has_evtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClickRecord::clear_has_evtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClickRecord::clear_evtype() {
  evtype_ = 1;
  clear_has_evtype();
}
inline ::ru::mail::go::webbase::blobs::Evtype ClickRecord::evtype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.evtype)
  return static_cast< ::ru::mail::go::webbase::blobs::Evtype >(evtype_);
}
inline void ClickRecord::set_evtype(::ru::mail::go::webbase::blobs::Evtype value) {
  assert(::ru::mail::go::webbase::blobs::Evtype_IsValid(value));
  set_has_evtype();
  evtype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.evtype)
}

// optional string resultUrl = 6;
inline bool ClickRecord::has_resulturl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClickRecord::set_has_resulturl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClickRecord::clear_has_resulturl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClickRecord::clear_resulturl() {
  resulturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resulturl();
}
inline const ::std::string& ClickRecord::resulturl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
  return resulturl_.GetNoArena();
}
inline void ClickRecord::set_resulturl(const ::std::string& value) {
  set_has_resulturl();
  resulturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}
#if LANG_CXX11
inline void ClickRecord::set_resulturl(::std::string&& value) {
  set_has_resulturl();
  resulturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}
#endif
inline void ClickRecord::set_resulturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resulturl();
  resulturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}
inline void ClickRecord::set_resulturl(const char* value, size_t size) {
  set_has_resulturl();
  resulturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}
inline ::std::string* ClickRecord::mutable_resulturl() {
  set_has_resulturl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
  return resulturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickRecord::release_resulturl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
  clear_has_resulturl();
  return resulturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRecord::set_allocated_resulturl(::std::string* resulturl) {
  if (resulturl != NULL) {
    set_has_resulturl();
  } else {
    clear_has_resulturl();
  }
  resulturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resulturl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.resultUrl)
}

// optional .ru.mail.go.webbase.blobs.Device device = 7;
inline bool ClickRecord::has_device() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ClickRecord::set_has_device() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ClickRecord::clear_has_device() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ClickRecord::clear_device() {
  device_ = 1;
  clear_has_device();
}
inline ::ru::mail::go::webbase::blobs::Device ClickRecord::device() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.device)
  return static_cast< ::ru::mail::go::webbase::blobs::Device >(device_);
}
inline void ClickRecord::set_device(::ru::mail::go::webbase::blobs::Device value) {
  assert(::ru::mail::go::webbase::blobs::Device_IsValid(value));
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.device)
}

// optional string pixel = 8;
inline bool ClickRecord::has_pixel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClickRecord::set_has_pixel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClickRecord::clear_has_pixel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClickRecord::clear_pixel() {
  pixel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pixel();
}
inline const ::std::string& ClickRecord::pixel() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.pixel)
  return pixel_.GetNoArena();
}
inline void ClickRecord::set_pixel(const ::std::string& value) {
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}
#if LANG_CXX11
inline void ClickRecord::set_pixel(::std::string&& value) {
  set_has_pixel();
  pixel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}
#endif
inline void ClickRecord::set_pixel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}
inline void ClickRecord::set_pixel(const char* value, size_t size) {
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}
inline ::std::string* ClickRecord::mutable_pixel() {
  set_has_pixel();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.pixel)
  return pixel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickRecord::release_pixel() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.pixel)
  clear_has_pixel();
  return pixel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRecord::set_allocated_pixel(::std::string* pixel) {
  if (pixel != NULL) {
    set_has_pixel();
  } else {
    clear_has_pixel();
  }
  pixel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pixel);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.pixel)
}

// optional .ru.mail.go.webbase.blobs.ClickArea area = 9;
inline bool ClickRecord::has_area() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClickRecord::set_has_area() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClickRecord::clear_has_area() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClickRecord::clear_area() {
  area_ = 1;
  clear_has_area();
}
inline ::ru::mail::go::webbase::blobs::ClickArea ClickRecord::area() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.area)
  return static_cast< ::ru::mail::go::webbase::blobs::ClickArea >(area_);
}
inline void ClickRecord::set_area(::ru::mail::go::webbase::blobs::ClickArea value) {
  assert(::ru::mail::go::webbase::blobs::ClickArea_IsValid(value));
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.area)
}

// optional string pageUrl = 10;
inline bool ClickRecord::has_pageurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClickRecord::set_has_pageurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClickRecord::clear_has_pageurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClickRecord::clear_pageurl() {
  pageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pageurl();
}
inline const ::std::string& ClickRecord::pageurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
  return pageurl_.GetNoArena();
}
inline void ClickRecord::set_pageurl(const ::std::string& value) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}
#if LANG_CXX11
inline void ClickRecord::set_pageurl(::std::string&& value) {
  set_has_pageurl();
  pageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}
#endif
inline void ClickRecord::set_pageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}
inline void ClickRecord::set_pageurl(const char* value, size_t size) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}
inline ::std::string* ClickRecord::mutable_pageurl() {
  set_has_pageurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
  return pageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickRecord::release_pageurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
  clear_has_pageurl();
  return pageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickRecord::set_allocated_pageurl(::std::string* pageurl) {
  if (pageurl != NULL) {
    set_has_pageurl();
  } else {
    clear_has_pageurl();
  }
  pageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pageurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ClickRecord.pageUrl)
}

// optional uint32 duration = 11;
inline bool ClickRecord::has_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClickRecord::set_has_duration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClickRecord::clear_has_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClickRecord::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 ClickRecord::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClickRecord.duration)
  return duration_;
}
inline void ClickRecord::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClickRecord.duration)
}

// -------------------------------------------------------------------

// UrlsRecord

// optional string qid = 1;
inline bool UrlsRecord::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UrlsRecord::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UrlsRecord::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UrlsRecord::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
inline const ::std::string& UrlsRecord::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlsRecord.qid)
  return qid_.GetNoArena();
}
inline void UrlsRecord::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}
#if LANG_CXX11
inline void UrlsRecord::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}
#endif
inline void UrlsRecord::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}
inline void UrlsRecord::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}
inline ::std::string* UrlsRecord::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlsRecord.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UrlsRecord::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlsRecord.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UrlsRecord::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlsRecord.qid)
}

// repeated string url = 2;
inline int UrlsRecord::url_size() const {
  return url_.size();
}
inline void UrlsRecord::clear_url() {
  url_.Clear();
}
inline const ::std::string& UrlsRecord::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return url_.Get(index);
}
inline ::std::string* UrlsRecord::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return url_.Mutable(index);
}
inline void UrlsRecord::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UrlsRecord::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UrlsRecord::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
inline void UrlsRecord::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
inline ::std::string* UrlsRecord::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return url_.Add();
}
inline void UrlsRecord::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
#if LANG_CXX11
inline void UrlsRecord::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
#endif
inline void UrlsRecord::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
inline void UrlsRecord::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.UrlsRecord.url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlsRecord::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UrlsRecord::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UrlsRecord.url)
  return &url_;
}

// optional uint64 time = 3;
inline bool UrlsRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UrlsRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UrlsRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UrlsRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 UrlsRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlsRecord.time)
  return time_;
}
inline void UrlsRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.time)
}

// optional string message_type = 4;
inline bool UrlsRecord::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UrlsRecord::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UrlsRecord::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UrlsRecord::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_type();
}
inline const ::std::string& UrlsRecord::message_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
  return message_type_.GetNoArena();
}
inline void UrlsRecord::set_message_type(const ::std::string& value) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}
#if LANG_CXX11
inline void UrlsRecord::set_message_type(::std::string&& value) {
  set_has_message_type();
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}
#endif
inline void UrlsRecord::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}
inline void UrlsRecord::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}
inline ::std::string* UrlsRecord::mutable_message_type() {
  set_has_message_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UrlsRecord::release_message_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
  clear_has_message_type();
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UrlsRecord::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlsRecord.message_type)
}

// -------------------------------------------------------------------

// BartertownRecord

// required string qid = 1;
inline bool BartertownRecord::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BartertownRecord::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BartertownRecord::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BartertownRecord::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
inline const ::std::string& BartertownRecord::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.qid)
  return qid_.GetNoArena();
}
inline void BartertownRecord::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}
#if LANG_CXX11
inline void BartertownRecord::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}
#endif
inline void BartertownRecord::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}
inline void BartertownRecord::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}
inline ::std::string* BartertownRecord::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BartertownRecord::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BartertownRecord::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.qid)
}

// optional string mrcu = 2;
inline bool BartertownRecord::has_mrcu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BartertownRecord::set_has_mrcu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BartertownRecord::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BartertownRecord::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
inline const ::std::string& BartertownRecord::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
  return mrcu_.GetNoArena();
}
inline void BartertownRecord::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}
#if LANG_CXX11
inline void BartertownRecord::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}
#endif
inline void BartertownRecord::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}
inline void BartertownRecord::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}
inline ::std::string* BartertownRecord::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BartertownRecord::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BartertownRecord::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.mrcu)
}

// required string searchUrl = 3;
inline bool BartertownRecord::has_searchurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BartertownRecord::set_has_searchurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BartertownRecord::clear_has_searchurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BartertownRecord::clear_searchurl() {
  searchurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchurl();
}
inline const ::std::string& BartertownRecord::searchurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
  return searchurl_.GetNoArena();
}
inline void BartertownRecord::set_searchurl(const ::std::string& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}
#if LANG_CXX11
inline void BartertownRecord::set_searchurl(::std::string&& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}
#endif
inline void BartertownRecord::set_searchurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}
inline void BartertownRecord::set_searchurl(const char* value, size_t size) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}
inline ::std::string* BartertownRecord::mutable_searchurl() {
  set_has_searchurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
  return searchurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BartertownRecord::release_searchurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
  clear_has_searchurl();
  return searchurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BartertownRecord::set_allocated_searchurl(::std::string* searchurl) {
  if (searchurl != NULL) {
    set_has_searchurl();
  } else {
    clear_has_searchurl();
  }
  searchurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.searchUrl)
}

// required uint64 time = 4;
inline bool BartertownRecord::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BartertownRecord::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BartertownRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BartertownRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 BartertownRecord::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.time)
  return time_;
}
inline void BartertownRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.time)
}

// optional .ru.mail.go.webbase.blobs.Vrt vrt = 5;
inline bool BartertownRecord::has_vrt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BartertownRecord::set_has_vrt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BartertownRecord::clear_has_vrt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BartertownRecord::clear_vrt() {
  vrt_ = 1;
  clear_has_vrt();
}
inline ::ru::mail::go::webbase::blobs::Vrt BartertownRecord::vrt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.vrt)
  return static_cast< ::ru::mail::go::webbase::blobs::Vrt >(vrt_);
}
inline void BartertownRecord::set_vrt(::ru::mail::go::webbase::blobs::Vrt value) {
  assert(::ru::mail::go::webbase::blobs::Vrt_IsValid(value));
  set_has_vrt();
  vrt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.vrt)
}

// optional .ru.mail.go.webbase.blobs.Searcher searcher = 6;
inline bool BartertownRecord::has_searcher() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BartertownRecord::set_has_searcher() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BartertownRecord::clear_has_searcher() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BartertownRecord::clear_searcher() {
  searcher_ = 1;
  clear_has_searcher();
}
inline ::ru::mail::go::webbase::blobs::Searcher BartertownRecord::searcher() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.searcher)
  return static_cast< ::ru::mail::go::webbase::blobs::Searcher >(searcher_);
}
inline void BartertownRecord::set_searcher(::ru::mail::go::webbase::blobs::Searcher value) {
  assert(::ru::mail::go::webbase::blobs::Searcher_IsValid(value));
  set_has_searcher();
  searcher_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.searcher)
}

// optional uint32 sf = 7;
inline bool BartertownRecord::has_sf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BartertownRecord::set_has_sf() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BartertownRecord::clear_has_sf() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BartertownRecord::clear_sf() {
  sf_ = 0u;
  clear_has_sf();
}
inline ::google::protobuf::uint32 BartertownRecord::sf() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.sf)
  return sf_;
}
inline void BartertownRecord::set_sf(::google::protobuf::uint32 value) {
  set_has_sf();
  sf_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.sf)
}

// optional string query = 8;
inline bool BartertownRecord::has_query() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BartertownRecord::set_has_query() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BartertownRecord::clear_has_query() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BartertownRecord::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& BartertownRecord::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.query)
  return query_.GetNoArena();
}
inline void BartertownRecord::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.query)
}
#if LANG_CXX11
inline void BartertownRecord::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.query)
}
#endif
inline void BartertownRecord::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.query)
}
inline void BartertownRecord::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.query)
}
inline ::std::string* BartertownRecord::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BartertownRecord::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BartertownRecord::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.query)
}

// optional .ru.mail.go.webbase.blobs.Sex sex = 9;
inline bool BartertownRecord::has_sex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BartertownRecord::set_has_sex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BartertownRecord::clear_has_sex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BartertownRecord::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
inline ::ru::mail::go::webbase::blobs::Sex BartertownRecord::sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.sex)
  return static_cast< ::ru::mail::go::webbase::blobs::Sex >(sex_);
}
inline void BartertownRecord::set_sex(::ru::mail::go::webbase::blobs::Sex value) {
  assert(::ru::mail::go::webbase::blobs::Sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.sex)
}

// optional uint32 age = 10;
inline bool BartertownRecord::has_age() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BartertownRecord::set_has_age() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BartertownRecord::clear_has_age() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BartertownRecord::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 BartertownRecord::age() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.age)
  return age_;
}
inline void BartertownRecord::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.age)
}

// optional uint32 region = 11;
inline bool BartertownRecord::has_region() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BartertownRecord::set_has_region() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BartertownRecord::clear_has_region() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BartertownRecord::clear_region() {
  region_ = 0u;
  clear_has_region();
}
inline ::google::protobuf::uint32 BartertownRecord::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.region)
  return region_;
}
inline void BartertownRecord::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.region)
}

// optional uint32 expid = 12;
inline bool BartertownRecord::has_expid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BartertownRecord::set_has_expid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BartertownRecord::clear_has_expid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BartertownRecord::clear_expid() {
  expid_ = 0u;
  clear_has_expid();
}
inline ::google::protobuf::uint32 BartertownRecord::expid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.expid)
  return expid_;
}
inline void BartertownRecord::set_expid(::google::protobuf::uint32 value) {
  set_has_expid();
  expid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.expid)
}

// optional string curQid = 13;
inline bool BartertownRecord::has_curqid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BartertownRecord::set_has_curqid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BartertownRecord::clear_has_curqid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BartertownRecord::clear_curqid() {
  curqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_curqid();
}
inline const ::std::string& BartertownRecord::curqid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
  return curqid_.GetNoArena();
}
inline void BartertownRecord::set_curqid(const ::std::string& value) {
  set_has_curqid();
  curqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}
#if LANG_CXX11
inline void BartertownRecord::set_curqid(::std::string&& value) {
  set_has_curqid();
  curqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}
#endif
inline void BartertownRecord::set_curqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_curqid();
  curqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}
inline void BartertownRecord::set_curqid(const char* value, size_t size) {
  set_has_curqid();
  curqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}
inline ::std::string* BartertownRecord::mutable_curqid() {
  set_has_curqid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
  return curqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BartertownRecord::release_curqid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
  clear_has_curqid();
  return curqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BartertownRecord::set_allocated_curqid(::std::string* curqid) {
  if (curqid != NULL) {
    set_has_curqid();
  } else {
    clear_has_curqid();
  }
  curqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curqid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.curQid)
}

// optional uint64 vkUserId = 14;
inline bool BartertownRecord::has_vkuserid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BartertownRecord::set_has_vkuserid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BartertownRecord::clear_has_vkuserid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BartertownRecord::clear_vkuserid() {
  vkuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_vkuserid();
}
inline ::google::protobuf::uint64 BartertownRecord::vkuserid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.vkUserId)
  return vkuserid_;
}
inline void BartertownRecord::set_vkuserid(::google::protobuf::uint64 value) {
  set_has_vkuserid();
  vkuserid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.vkUserId)
}

// optional string extra = 15;
inline bool BartertownRecord::has_extra() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BartertownRecord::set_has_extra() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BartertownRecord::clear_has_extra() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BartertownRecord::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
inline const ::std::string& BartertownRecord::extra() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.extra)
  return extra_.GetNoArena();
}
inline void BartertownRecord::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}
#if LANG_CXX11
inline void BartertownRecord::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}
#endif
inline void BartertownRecord::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}
inline void BartertownRecord::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}
inline ::std::string* BartertownRecord::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BartertownRecord.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BartertownRecord::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BartertownRecord.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BartertownRecord::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BartertownRecord.extra)
}

// optional uint32 split = 16;
inline bool BartertownRecord::has_split() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BartertownRecord::set_has_split() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BartertownRecord::clear_has_split() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BartertownRecord::clear_split() {
  split_ = 0u;
  clear_has_split();
}
inline ::google::protobuf::uint32 BartertownRecord::split() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.split)
  return split_;
}
inline void BartertownRecord::set_split(::google::protobuf::uint32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.split)
}

// optional bool mobile = 17;
inline bool BartertownRecord::has_mobile() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BartertownRecord::set_has_mobile() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BartertownRecord::clear_has_mobile() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BartertownRecord::clear_mobile() {
  mobile_ = false;
  clear_has_mobile();
}
inline bool BartertownRecord::mobile() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BartertownRecord.mobile)
  return mobile_;
}
inline void BartertownRecord::set_mobile(bool value) {
  set_has_mobile();
  mobile_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BartertownRecord.mobile)
}

// -------------------------------------------------------------------

// VarRecord

// optional .ru.mail.go.webbase.blobs.ClickRecord crec = 1;
inline bool VarRecord::has_crec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VarRecord::set_has_crec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VarRecord::clear_has_crec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VarRecord::clear_crec() {
  if (crec_ != NULL) crec_->::ru::mail::go::webbase::blobs::ClickRecord::Clear();
  clear_has_crec();
}
inline const ::ru::mail::go::webbase::blobs::ClickRecord& VarRecord::crec() const {
  const ::ru::mail::go::webbase::blobs::ClickRecord* p = crec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarRecord.crec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ClickRecord*>(
      &::ru::mail::go::webbase::blobs::_ClickRecord_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::ClickRecord* VarRecord::mutable_crec() {
  set_has_crec();
  if (crec_ == NULL) {
    crec_ = new ::ru::mail::go::webbase::blobs::ClickRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarRecord.crec)
  return crec_;
}
inline ::ru::mail::go::webbase::blobs::ClickRecord* VarRecord::release_crec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VarRecord.crec)
  clear_has_crec();
  ::ru::mail::go::webbase::blobs::ClickRecord* temp = crec_;
  crec_ = NULL;
  return temp;
}
inline void VarRecord::set_allocated_crec(::ru::mail::go::webbase::blobs::ClickRecord* crec) {
  delete crec_;
  crec_ = crec;
  if (crec) {
    set_has_crec();
  } else {
    clear_has_crec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VarRecord.crec)
}

// optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
inline bool VarRecord::has_urec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VarRecord::set_has_urec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VarRecord::clear_has_urec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VarRecord::clear_urec() {
  if (urec_ != NULL) urec_->::ru::mail::go::webbase::blobs::UrlsRecord::Clear();
  clear_has_urec();
}
inline const ::ru::mail::go::webbase::blobs::UrlsRecord& VarRecord::urec() const {
  const ::ru::mail::go::webbase::blobs::UrlsRecord* p = urec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarRecord.urec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlsRecord*>(
      &::ru::mail::go::webbase::blobs::_UrlsRecord_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::UrlsRecord* VarRecord::mutable_urec() {
  set_has_urec();
  if (urec_ == NULL) {
    urec_ = new ::ru::mail::go::webbase::blobs::UrlsRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarRecord.urec)
  return urec_;
}
inline ::ru::mail::go::webbase::blobs::UrlsRecord* VarRecord::release_urec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VarRecord.urec)
  clear_has_urec();
  ::ru::mail::go::webbase::blobs::UrlsRecord* temp = urec_;
  urec_ = NULL;
  return temp;
}
inline void VarRecord::set_allocated_urec(::ru::mail::go::webbase::blobs::UrlsRecord* urec) {
  delete urec_;
  urec_ = urec;
  if (urec) {
    set_has_urec();
  } else {
    clear_has_urec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VarRecord.urec)
}

// optional .ru.mail.go.webbase.blobs.BartertownRecord brec = 3;
inline bool VarRecord::has_brec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VarRecord::set_has_brec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VarRecord::clear_has_brec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VarRecord::clear_brec() {
  if (brec_ != NULL) brec_->::ru::mail::go::webbase::blobs::BartertownRecord::Clear();
  clear_has_brec();
}
inline const ::ru::mail::go::webbase::blobs::BartertownRecord& VarRecord::brec() const {
  const ::ru::mail::go::webbase::blobs::BartertownRecord* p = brec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarRecord.brec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::BartertownRecord*>(
      &::ru::mail::go::webbase::blobs::_BartertownRecord_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::BartertownRecord* VarRecord::mutable_brec() {
  set_has_brec();
  if (brec_ == NULL) {
    brec_ = new ::ru::mail::go::webbase::blobs::BartertownRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarRecord.brec)
  return brec_;
}
inline ::ru::mail::go::webbase::blobs::BartertownRecord* VarRecord::release_brec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VarRecord.brec)
  clear_has_brec();
  ::ru::mail::go::webbase::blobs::BartertownRecord* temp = brec_;
  brec_ = NULL;
  return temp;
}
inline void VarRecord::set_allocated_brec(::ru::mail::go::webbase::blobs::BartertownRecord* brec) {
  delete brec_;
  brec_ = brec;
  if (brec) {
    set_has_brec();
  } else {
    clear_has_brec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VarRecord.brec)
}

// -------------------------------------------------------------------

// PartialSession

// required .ru.mail.go.webbase.blobs.BartertownRecord brec = 1;
inline bool PartialSession::has_brec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PartialSession::set_has_brec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PartialSession::clear_has_brec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PartialSession::clear_brec() {
  if (brec_ != NULL) brec_->::ru::mail::go::webbase::blobs::BartertownRecord::Clear();
  clear_has_brec();
}
inline const ::ru::mail::go::webbase::blobs::BartertownRecord& PartialSession::brec() const {
  const ::ru::mail::go::webbase::blobs::BartertownRecord* p = brec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PartialSession.brec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::BartertownRecord*>(
      &::ru::mail::go::webbase::blobs::_BartertownRecord_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::BartertownRecord* PartialSession::mutable_brec() {
  set_has_brec();
  if (brec_ == NULL) {
    brec_ = new ::ru::mail::go::webbase::blobs::BartertownRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PartialSession.brec)
  return brec_;
}
inline ::ru::mail::go::webbase::blobs::BartertownRecord* PartialSession::release_brec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PartialSession.brec)
  clear_has_brec();
  ::ru::mail::go::webbase::blobs::BartertownRecord* temp = brec_;
  brec_ = NULL;
  return temp;
}
inline void PartialSession::set_allocated_brec(::ru::mail::go::webbase::blobs::BartertownRecord* brec) {
  delete brec_;
  brec_ = brec;
  if (brec) {
    set_has_brec();
  } else {
    clear_has_brec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PartialSession.brec)
}

// optional .ru.mail.go.webbase.blobs.UrlsRecord urec = 2;
inline bool PartialSession::has_urec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PartialSession::set_has_urec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PartialSession::clear_has_urec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PartialSession::clear_urec() {
  if (urec_ != NULL) urec_->::ru::mail::go::webbase::blobs::UrlsRecord::Clear();
  clear_has_urec();
}
inline const ::ru::mail::go::webbase::blobs::UrlsRecord& PartialSession::urec() const {
  const ::ru::mail::go::webbase::blobs::UrlsRecord* p = urec_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PartialSession.urec)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::UrlsRecord*>(
      &::ru::mail::go::webbase::blobs::_UrlsRecord_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::UrlsRecord* PartialSession::mutable_urec() {
  set_has_urec();
  if (urec_ == NULL) {
    urec_ = new ::ru::mail::go::webbase::blobs::UrlsRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PartialSession.urec)
  return urec_;
}
inline ::ru::mail::go::webbase::blobs::UrlsRecord* PartialSession::release_urec() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PartialSession.urec)
  clear_has_urec();
  ::ru::mail::go::webbase::blobs::UrlsRecord* temp = urec_;
  urec_ = NULL;
  return temp;
}
inline void PartialSession::set_allocated_urec(::ru::mail::go::webbase::blobs::UrlsRecord* urec) {
  delete urec_;
  urec_ = urec;
  if (urec) {
    set_has_urec();
  } else {
    clear_has_urec();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PartialSession.urec)
}

// repeated .ru.mail.go.webbase.blobs.ClickRecord crec = 3;
inline int PartialSession::crec_size() const {
  return crec_.size();
}
inline void PartialSession::clear_crec() {
  crec_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::ClickRecord& PartialSession::crec(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PartialSession.crec)
  return crec_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::ClickRecord* PartialSession::mutable_crec(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PartialSession.crec)
  return crec_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::ClickRecord* PartialSession::add_crec() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PartialSession.crec)
  return crec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ClickRecord >*
PartialSession::mutable_crec() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PartialSession.crec)
  return &crec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ClickRecord >&
PartialSession::crec() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PartialSession.crec)
  return crec_;
}

// -------------------------------------------------------------------

// Event

// required uint64 time = 1;
inline bool Event::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Event::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.time)
  return time_;
}
inline void Event::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.time)
}

// required .ru.mail.go.webbase.blobs.Evtype evtype = 2;
inline bool Event::has_evtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_evtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_evtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_evtype() {
  evtype_ = 1;
  clear_has_evtype();
}
inline ::ru::mail::go::webbase::blobs::Evtype Event::evtype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.evtype)
  return static_cast< ::ru::mail::go::webbase::blobs::Evtype >(evtype_);
}
inline void Event::set_evtype(::ru::mail::go::webbase::blobs::Evtype value) {
  assert(::ru::mail::go::webbase::blobs::Evtype_IsValid(value));
  set_has_evtype();
  evtype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.evtype)
}

// optional uint32 pos = 3;
inline bool Event::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 Event::pos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.pos)
  return pos_;
}
inline void Event::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.pos)
}

// optional .ru.mail.go.webbase.blobs.Device device = 4;
inline bool Event::has_device() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event::set_has_device() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event::clear_has_device() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event::clear_device() {
  device_ = 1;
  clear_has_device();
}
inline ::ru::mail::go::webbase::blobs::Device Event::device() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.device)
  return static_cast< ::ru::mail::go::webbase::blobs::Device >(device_);
}
inline void Event::set_device(::ru::mail::go::webbase::blobs::Device value) {
  assert(::ru::mail::go::webbase::blobs::Device_IsValid(value));
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.device)
}

// optional string pixel = 5;
inline bool Event::has_pixel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_pixel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_pixel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_pixel() {
  pixel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pixel();
}
inline const ::std::string& Event::pixel() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.pixel)
  return pixel_.GetNoArena();
}
inline void Event::set_pixel(const ::std::string& value) {
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.pixel)
}
#if LANG_CXX11
inline void Event::set_pixel(::std::string&& value) {
  set_has_pixel();
  pixel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Event.pixel)
}
#endif
inline void Event::set_pixel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Event.pixel)
}
inline void Event::set_pixel(const char* value, size_t size) {
  set_has_pixel();
  pixel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Event.pixel)
}
inline ::std::string* Event::mutable_pixel() {
  set_has_pixel();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Event.pixel)
  return pixel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_pixel() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Event.pixel)
  clear_has_pixel();
  return pixel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_pixel(::std::string* pixel) {
  if (pixel != NULL) {
    set_has_pixel();
  } else {
    clear_has_pixel();
  }
  pixel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pixel);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Event.pixel)
}

// optional .ru.mail.go.webbase.blobs.ClickArea area = 6;
inline bool Event::has_area() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_area() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_area() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_area() {
  area_ = 1;
  clear_has_area();
}
inline ::ru::mail::go::webbase::blobs::ClickArea Event::area() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.area)
  return static_cast< ::ru::mail::go::webbase::blobs::ClickArea >(area_);
}
inline void Event::set_area(::ru::mail::go::webbase::blobs::ClickArea value) {
  assert(::ru::mail::go::webbase::blobs::ClickArea_IsValid(value));
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.area)
}

// optional uint32 duration = 7;
inline bool Event::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 Event::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.duration)
  return duration_;
}
inline void Event::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.duration)
}

// optional string extra = 8;
inline bool Event::has_extra() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_extra() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_extra() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
inline const ::std::string& Event::extra() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Event.extra)
  return extra_.GetNoArena();
}
inline void Event::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Event.extra)
}
#if LANG_CXX11
inline void Event::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Event.extra)
}
#endif
inline void Event::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Event.extra)
}
inline void Event::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Event.extra)
}
inline ::std::string* Event::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Event.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Event.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Event.extra)
}

// -------------------------------------------------------------------

// SerpItem

// required string url = 1;
inline bool SerpItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerpItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerpItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerpItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SerpItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.url)
  return url_.GetNoArena();
}
inline void SerpItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.url)
}
#if LANG_CXX11
inline void SerpItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SerpItem.url)
}
#endif
inline void SerpItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.url)
}
inline void SerpItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.url)
}
inline ::std::string* SerpItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SerpItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SerpItem.url)
}

// repeated string dups = 2;
inline int SerpItem::dups_size() const {
  return dups_.size();
}
inline void SerpItem::clear_dups() {
  dups_.Clear();
}
inline const ::std::string& SerpItem::dups(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.dups)
  return dups_.Get(index);
}
inline ::std::string* SerpItem::mutable_dups(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.dups)
  return dups_.Mutable(index);
}
inline void SerpItem::set_dups(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.dups)
  dups_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SerpItem::set_dups(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.dups)
  dups_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SerpItem::set_dups(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.dups)
}
inline void SerpItem::set_dups(int index, const char* value, size_t size) {
  dups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.dups)
}
inline ::std::string* SerpItem::add_dups() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SerpItem.dups)
  return dups_.Add();
}
inline void SerpItem::add_dups(const ::std::string& value) {
  dups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SerpItem.dups)
}
#if LANG_CXX11
inline void SerpItem::add_dups(::std::string&& value) {
  dups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SerpItem.dups)
}
#endif
inline void SerpItem::add_dups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SerpItem.dups)
}
inline void SerpItem::add_dups(const char* value, size_t size) {
  dups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SerpItem.dups)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerpItem::dups() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SerpItem.dups)
  return dups_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SerpItem::mutable_dups() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SerpItem.dups)
  return &dups_;
}

// repeated string pageUrls = 3;
inline int SerpItem::pageurls_size() const {
  return pageurls_.size();
}
inline void SerpItem::clear_pageurls() {
  pageurls_.Clear();
}
inline const ::std::string& SerpItem::pageurls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return pageurls_.Get(index);
}
inline ::std::string* SerpItem::mutable_pageurls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return pageurls_.Mutable(index);
}
inline void SerpItem::set_pageurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  pageurls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SerpItem::set_pageurls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  pageurls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SerpItem::set_pageurls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pageurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
inline void SerpItem::set_pageurls(int index, const char* value, size_t size) {
  pageurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
inline ::std::string* SerpItem::add_pageurls() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return pageurls_.Add();
}
inline void SerpItem::add_pageurls(const ::std::string& value) {
  pageurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
#if LANG_CXX11
inline void SerpItem::add_pageurls(::std::string&& value) {
  pageurls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
#endif
inline void SerpItem::add_pageurls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  pageurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
inline void SerpItem::add_pageurls(const char* value, size_t size) {
  pageurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SerpItem::pageurls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return pageurls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SerpItem::mutable_pageurls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SerpItem.pageUrls)
  return &pageurls_;
}

// optional string title = 4;
inline bool SerpItem::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerpItem::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerpItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerpItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SerpItem::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.title)
  return title_.GetNoArena();
}
inline void SerpItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.title)
}
#if LANG_CXX11
inline void SerpItem::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SerpItem.title)
}
#endif
inline void SerpItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.title)
}
inline void SerpItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.title)
}
inline ::std::string* SerpItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpItem::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SerpItem.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SerpItem.title)
}

// optional string snippet = 5;
inline bool SerpItem::has_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerpItem::set_has_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SerpItem::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SerpItem::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
inline const ::std::string& SerpItem::snippet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.snippet)
  return snippet_.GetNoArena();
}
inline void SerpItem::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.snippet)
}
#if LANG_CXX11
inline void SerpItem::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SerpItem.snippet)
}
#endif
inline void SerpItem::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SerpItem.snippet)
}
inline void SerpItem::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SerpItem.snippet)
}
inline ::std::string* SerpItem::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SerpItem.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpItem::release_snippet() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SerpItem.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpItem::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SerpItem.snippet)
}

// optional uint32 searchPos = 6;
inline bool SerpItem::has_searchpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SerpItem::set_has_searchpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SerpItem::clear_has_searchpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SerpItem::clear_searchpos() {
  searchpos_ = 0u;
  clear_has_searchpos();
}
inline ::google::protobuf::uint32 SerpItem::searchpos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SerpItem.searchPos)
  return searchpos_;
}
inline void SerpItem::set_searchpos(::google::protobuf::uint32 value) {
  set_has_searchpos();
  searchpos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SerpItem.searchPos)
}

// -------------------------------------------------------------------

// Session

// optional .ru.mail.go.webbase.blobs.Vrt vrt = 1;
inline bool Session::has_vrt() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Session::set_has_vrt() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Session::clear_has_vrt() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Session::clear_vrt() {
  vrt_ = 1;
  clear_has_vrt();
}
inline ::ru::mail::go::webbase::blobs::Vrt Session::vrt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vrt)
  return static_cast< ::ru::mail::go::webbase::blobs::Vrt >(vrt_);
}
inline void Session::set_vrt(::ru::mail::go::webbase::blobs::Vrt value) {
  assert(::ru::mail::go::webbase::blobs::Vrt_IsValid(value));
  set_has_vrt();
  vrt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vrt)
}

// optional string query = 2;
inline bool Session::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& Session::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.query)
  return query_.GetNoArena();
}
inline void Session::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.query)
}
#if LANG_CXX11
inline void Session::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.query)
}
#endif
inline void Session::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.query)
}
inline void Session::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.query)
}
inline ::std::string* Session::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.query)
}

// optional .ru.mail.go.webbase.blobs.Searcher searcher = 3;
inline bool Session::has_searcher() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Session::set_has_searcher() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Session::clear_has_searcher() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Session::clear_searcher() {
  searcher_ = 1;
  clear_has_searcher();
}
inline ::ru::mail::go::webbase::blobs::Searcher Session::searcher() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.searcher)
  return static_cast< ::ru::mail::go::webbase::blobs::Searcher >(searcher_);
}
inline void Session::set_searcher(::ru::mail::go::webbase::blobs::Searcher value) {
  assert(::ru::mail::go::webbase::blobs::Searcher_IsValid(value));
  set_has_searcher();
  searcher_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.searcher)
}

// optional string searchUrl = 4;
inline bool Session::has_searchurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Session::set_has_searchurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Session::clear_has_searchurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Session::clear_searchurl() {
  searchurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchurl();
}
inline const ::std::string& Session::searchurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.searchUrl)
  return searchurl_.GetNoArena();
}
inline void Session::set_searchurl(const ::std::string& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.searchUrl)
}
#if LANG_CXX11
inline void Session::set_searchurl(::std::string&& value) {
  set_has_searchurl();
  searchurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.searchUrl)
}
#endif
inline void Session::set_searchurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.searchUrl)
}
inline void Session::set_searchurl(const char* value, size_t size) {
  set_has_searchurl();
  searchurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.searchUrl)
}
inline ::std::string* Session::mutable_searchurl() {
  set_has_searchurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.searchUrl)
  return searchurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_searchurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.searchUrl)
  clear_has_searchurl();
  return searchurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_searchurl(::std::string* searchurl) {
  if (searchurl != NULL) {
    set_has_searchurl();
  } else {
    clear_has_searchurl();
  }
  searchurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.searchUrl)
}

// optional string mrcu = 5;
inline bool Session::has_mrcu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Session::set_has_mrcu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Session::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Session::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
inline const ::std::string& Session::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.mrcu)
  return mrcu_.GetNoArena();
}
inline void Session::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.mrcu)
}
#if LANG_CXX11
inline void Session::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.mrcu)
}
#endif
inline void Session::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.mrcu)
}
inline void Session::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.mrcu)
}
inline ::std::string* Session::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.mrcu)
}

// required uint64 time = 6;
inline bool Session::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Session::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Session::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Session::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Session::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.time)
  return time_;
}
inline void Session::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.time)
}

// repeated .ru.mail.go.webbase.blobs.Event event = 7;
inline int Session::event_size() const {
  return event_.size();
}
inline void Session::clear_event() {
  event_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::Event& Session::event(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.event)
  return event_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::Event* Session::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.event)
  return event_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::Event* Session::add_event() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.event)
  return event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Event >*
Session::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Session.event)
  return &event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Event >&
Session::event() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Session.event)
  return event_;
}

// repeated string url = 8;
inline int Session::url_size() const {
  return url_.size();
}
inline void Session::clear_url() {
  url_.Clear();
}
inline const ::std::string& Session::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.url)
  return url_.Get(index);
}
inline ::std::string* Session::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.url)
  return url_.Mutable(index);
}
inline void Session::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Session::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Session::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.url)
}
inline void Session::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.url)
}
inline ::std::string* Session::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.Session.url)
  return url_.Add();
}
inline void Session::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.url)
}
#if LANG_CXX11
inline void Session::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.url)
}
#endif
inline void Session::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.Session.url)
}
inline void Session::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.Session.url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Session::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Session.url)
  return url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Session::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Session.url)
  return &url_;
}

// optional .ru.mail.go.webbase.blobs.Sex sex = 9;
inline bool Session::has_sex() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Session::set_has_sex() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Session::clear_has_sex() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Session::clear_sex() {
  sex_ = 1;
  clear_has_sex();
}
inline ::ru::mail::go::webbase::blobs::Sex Session::sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.sex)
  return static_cast< ::ru::mail::go::webbase::blobs::Sex >(sex_);
}
inline void Session::set_sex(::ru::mail::go::webbase::blobs::Sex value) {
  assert(::ru::mail::go::webbase::blobs::Sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.sex)
}

// optional uint32 age = 10;
inline bool Session::has_age() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Session::set_has_age() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Session::clear_has_age() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Session::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 Session::age() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.age)
  return age_;
}
inline void Session::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.age)
}

// optional uint32 region = 11;
inline bool Session::has_region() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Session::set_has_region() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Session::clear_has_region() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Session::clear_region() {
  region_ = 0u;
  clear_has_region();
}
inline ::google::protobuf::uint32 Session::region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.region)
  return region_;
}
inline void Session::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.region)
}

// optional string uid = 12;
inline bool Session::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Session::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Session::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Session::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& Session::uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.uid)
  return uid_.GetNoArena();
}
inline void Session::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.uid)
}
#if LANG_CXX11
inline void Session::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.uid)
}
#endif
inline void Session::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.uid)
}
inline void Session::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.uid)
}
inline ::std::string* Session::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.uid)
}

// repeated .ru.mail.go.webbase.blobs.SerpItem items = 13;
inline int Session::items_size() const {
  return items_.size();
}
inline void Session::clear_items() {
  items_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::SerpItem& Session::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.items)
  return items_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::SerpItem* Session::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.items)
  return items_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::SerpItem* Session::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SerpItem >*
Session::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Session.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SerpItem >&
Session::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Session.items)
  return items_;
}

// optional uint32 weight = 14;
inline bool Session::has_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Session::set_has_weight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Session::clear_has_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Session::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 Session::weight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.weight)
  return weight_;
}
inline void Session::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.weight)
}

// optional uint32 expid = 15;
inline bool Session::has_expid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Session::set_has_expid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Session::clear_has_expid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Session::clear_expid() {
  expid_ = 0u;
  clear_has_expid();
}
inline ::google::protobuf::uint32 Session::expid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.expid)
  return expid_;
}
inline void Session::set_expid(::google::protobuf::uint32 value) {
  set_has_expid();
  expid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.expid)
}

// optional uint64 vkUserId = 16;
inline bool Session::has_vkuserid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Session::set_has_vkuserid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Session::clear_has_vkuserid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Session::clear_vkuserid() {
  vkuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_vkuserid();
}
inline ::google::protobuf::uint64 Session::vkuserid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkUserId)
  return vkuserid_;
}
inline void Session::set_vkuserid(::google::protobuf::uint64 value) {
  set_has_vkuserid();
  vkuserid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkUserId)
}

// optional string urlsRecordMessageType = 17;
inline bool Session::has_urlsrecordmessagetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Session::set_has_urlsrecordmessagetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Session::clear_has_urlsrecordmessagetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Session::clear_urlsrecordmessagetype() {
  urlsrecordmessagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urlsrecordmessagetype();
}
inline const ::std::string& Session::urlsrecordmessagetype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
  return urlsrecordmessagetype_.GetNoArena();
}
inline void Session::set_urlsrecordmessagetype(const ::std::string& value) {
  set_has_urlsrecordmessagetype();
  urlsrecordmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}
#if LANG_CXX11
inline void Session::set_urlsrecordmessagetype(::std::string&& value) {
  set_has_urlsrecordmessagetype();
  urlsrecordmessagetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}
#endif
inline void Session::set_urlsrecordmessagetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urlsrecordmessagetype();
  urlsrecordmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}
inline void Session::set_urlsrecordmessagetype(const char* value, size_t size) {
  set_has_urlsrecordmessagetype();
  urlsrecordmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}
inline ::std::string* Session::mutable_urlsrecordmessagetype() {
  set_has_urlsrecordmessagetype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
  return urlsrecordmessagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_urlsrecordmessagetype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
  clear_has_urlsrecordmessagetype();
  return urlsrecordmessagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_urlsrecordmessagetype(::std::string* urlsrecordmessagetype) {
  if (urlsrecordmessagetype != NULL) {
    set_has_urlsrecordmessagetype();
  } else {
    clear_has_urlsrecordmessagetype();
  }
  urlsrecordmessagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urlsrecordmessagetype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.urlsRecordMessageType)
}

// optional string extra = 18;
inline bool Session::has_extra() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Session::set_has_extra() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Session::clear_has_extra() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Session::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
inline const ::std::string& Session::extra() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.extra)
  return extra_.GetNoArena();
}
inline void Session::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.extra)
}
#if LANG_CXX11
inline void Session::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.extra)
}
#endif
inline void Session::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.extra)
}
inline void Session::set_extra(const char* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.extra)
}
inline ::std::string* Session::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_extra() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.extra)
}

// optional uint32 split = 19;
inline bool Session::has_split() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Session::set_has_split() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Session::clear_has_split() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Session::clear_split() {
  split_ = 0u;
  clear_has_split();
}
inline ::google::protobuf::uint32 Session::split() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.split)
  return split_;
}
inline void Session::set_split(::google::protobuf::uint32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.split)
}

// optional bool mobile = 20;
inline bool Session::has_mobile() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Session::set_has_mobile() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Session::clear_has_mobile() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Session::clear_mobile() {
  mobile_ = false;
  clear_has_mobile();
}
inline bool Session::mobile() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.mobile)
  return mobile_;
}
inline void Session::set_mobile(bool value) {
  set_has_mobile();
  mobile_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.mobile)
}

// optional bool vkIsSafeSearch = 21;
inline bool Session::has_vkissafesearch() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Session::set_has_vkissafesearch() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Session::clear_has_vkissafesearch() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Session::clear_vkissafesearch() {
  vkissafesearch_ = false;
  clear_has_vkissafesearch();
}
inline bool Session::vkissafesearch() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkIsSafeSearch)
  return vkissafesearch_;
}
inline void Session::set_vkissafesearch(bool value) {
  set_has_vkissafesearch();
  vkissafesearch_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkIsSafeSearch)
}

// optional .ru.mail.go.webbase.blobs.VkPlatform vkPlatform = 22;
inline bool Session::has_vkplatform() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Session::set_has_vkplatform() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Session::clear_has_vkplatform() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Session::clear_vkplatform() {
  vkplatform_ = 1;
  clear_has_vkplatform();
}
inline ::ru::mail::go::webbase::blobs::VkPlatform Session::vkplatform() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkPlatform)
  return static_cast< ::ru::mail::go::webbase::blobs::VkPlatform >(vkplatform_);
}
inline void Session::set_vkplatform(::ru::mail::go::webbase::blobs::VkPlatform value) {
  assert(::ru::mail::go::webbase::blobs::VkPlatform_IsValid(value));
  set_has_vkplatform();
  vkplatform_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkPlatform)
}

// optional uint32 vkUserCountryId = 23;
inline bool Session::has_vkusercountryid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Session::set_has_vkusercountryid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Session::clear_has_vkusercountryid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Session::clear_vkusercountryid() {
  vkusercountryid_ = 0u;
  clear_has_vkusercountryid();
}
inline ::google::protobuf::uint32 Session::vkusercountryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkUserCountryId)
  return vkusercountryid_;
}
inline void Session::set_vkusercountryid(::google::protobuf::uint32 value) {
  set_has_vkusercountryid();
  vkusercountryid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkUserCountryId)
}

// optional string vkQueryId = 24;
inline bool Session::has_vkqueryid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Session::set_has_vkqueryid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Session::clear_has_vkqueryid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Session::clear_vkqueryid() {
  vkqueryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vkqueryid();
}
inline const ::std::string& Session::vkqueryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.vkQueryId)
  return vkqueryid_.GetNoArena();
}
inline void Session::set_vkqueryid(const ::std::string& value) {
  set_has_vkqueryid();
  vkqueryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.vkQueryId)
}
#if LANG_CXX11
inline void Session::set_vkqueryid(::std::string&& value) {
  set_has_vkqueryid();
  vkqueryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.vkQueryId)
}
#endif
inline void Session::set_vkqueryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vkqueryid();
  vkqueryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.vkQueryId)
}
inline void Session::set_vkqueryid(const char* value, size_t size) {
  set_has_vkqueryid();
  vkqueryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.vkQueryId)
}
inline ::std::string* Session::mutable_vkqueryid() {
  set_has_vkqueryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.vkQueryId)
  return vkqueryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_vkqueryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.vkQueryId)
  clear_has_vkqueryid();
  return vkqueryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_vkqueryid(::std::string* vkqueryid) {
  if (vkqueryid != NULL) {
    set_has_vkqueryid();
  } else {
    clear_has_vkqueryid();
  }
  vkqueryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vkqueryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.vkQueryId)
}

// optional string dzenSearchId = 25;
inline bool Session::has_dzensearchid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Session::set_has_dzensearchid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Session::clear_has_dzensearchid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Session::clear_dzensearchid() {
  dzensearchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dzensearchid();
}
inline const ::std::string& Session::dzensearchid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.dzenSearchId)
  return dzensearchid_.GetNoArena();
}
inline void Session::set_dzensearchid(const ::std::string& value) {
  set_has_dzensearchid();
  dzensearchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}
#if LANG_CXX11
inline void Session::set_dzensearchid(::std::string&& value) {
  set_has_dzensearchid();
  dzensearchid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}
#endif
inline void Session::set_dzensearchid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dzensearchid();
  dzensearchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}
inline void Session::set_dzensearchid(const char* value, size_t size) {
  set_has_dzensearchid();
  dzensearchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}
inline ::std::string* Session::mutable_dzensearchid() {
  set_has_dzensearchid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.dzenSearchId)
  return dzensearchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_dzensearchid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.dzenSearchId)
  clear_has_dzensearchid();
  return dzensearchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_dzensearchid(::std::string* dzensearchid) {
  if (dzensearchid != NULL) {
    set_has_dzensearchid();
  } else {
    clear_has_dzensearchid();
  }
  dzensearchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dzensearchid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.dzenSearchId)
}

// optional string dzenStrongestId = 26;
inline bool Session::has_dzenstrongestid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Session::set_has_dzenstrongestid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Session::clear_has_dzenstrongestid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Session::clear_dzenstrongestid() {
  dzenstrongestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dzenstrongestid();
}
inline const ::std::string& Session::dzenstrongestid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
  return dzenstrongestid_.GetNoArena();
}
inline void Session::set_dzenstrongestid(const ::std::string& value) {
  set_has_dzenstrongestid();
  dzenstrongestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}
#if LANG_CXX11
inline void Session::set_dzenstrongestid(::std::string&& value) {
  set_has_dzenstrongestid();
  dzenstrongestid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}
#endif
inline void Session::set_dzenstrongestid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dzenstrongestid();
  dzenstrongestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}
inline void Session::set_dzenstrongestid(const char* value, size_t size) {
  set_has_dzenstrongestid();
  dzenstrongestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}
inline ::std::string* Session::mutable_dzenstrongestid() {
  set_has_dzenstrongestid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
  return dzenstrongestid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_dzenstrongestid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
  clear_has_dzenstrongestid();
  return dzenstrongestid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_dzenstrongestid(::std::string* dzenstrongestid) {
  if (dzenstrongestid != NULL) {
    set_has_dzenstrongestid();
  } else {
    clear_has_dzenstrongestid();
  }
  dzenstrongestid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dzenstrongestid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.dzenStrongestId)
}

// optional .ru.mail.go.webbase.blobs.DzenSearchTab dzenSearchTab = 27;
inline bool Session::has_dzensearchtab() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Session::set_has_dzensearchtab() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Session::clear_has_dzensearchtab() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Session::clear_dzensearchtab() {
  dzensearchtab_ = 1;
  clear_has_dzensearchtab();
}
inline ::ru::mail::go::webbase::blobs::DzenSearchTab Session::dzensearchtab() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.dzenSearchTab)
  return static_cast< ::ru::mail::go::webbase::blobs::DzenSearchTab >(dzensearchtab_);
}
inline void Session::set_dzensearchtab(::ru::mail::go::webbase::blobs::DzenSearchTab value) {
  assert(::ru::mail::go::webbase::blobs::DzenSearchTab_IsValid(value));
  set_has_dzensearchtab();
  dzensearchtab_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.dzenSearchTab)
}

// optional string rustoreQueryId = 28;
inline bool Session::has_rustorequeryid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Session::set_has_rustorequeryid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Session::clear_has_rustorequeryid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Session::clear_rustorequeryid() {
  rustorequeryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rustorequeryid();
}
inline const ::std::string& Session::rustorequeryid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
  return rustorequeryid_.GetNoArena();
}
inline void Session::set_rustorequeryid(const ::std::string& value) {
  set_has_rustorequeryid();
  rustorequeryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}
#if LANG_CXX11
inline void Session::set_rustorequeryid(::std::string&& value) {
  set_has_rustorequeryid();
  rustorequeryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}
#endif
inline void Session::set_rustorequeryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rustorequeryid();
  rustorequeryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}
inline void Session::set_rustorequeryid(const char* value, size_t size) {
  set_has_rustorequeryid();
  rustorequeryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}
inline ::std::string* Session::mutable_rustorequeryid() {
  set_has_rustorequeryid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
  return rustorequeryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_rustorequeryid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
  clear_has_rustorequeryid();
  return rustorequeryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_rustorequeryid(::std::string* rustorequeryid) {
  if (rustorequeryid != NULL) {
    set_has_rustorequeryid();
  } else {
    clear_has_rustorequeryid();
  }
  rustorequeryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rustorequeryid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Session.rustoreQueryId)
}

// repeated uint64 dzenExperimentIds = 29;
inline int Session::dzenexperimentids_size() const {
  return dzenexperimentids_.size();
}
inline void Session::clear_dzenexperimentids() {
  dzenexperimentids_.Clear();
}
inline ::google::protobuf::uint64 Session::dzenexperimentids(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
  return dzenexperimentids_.Get(index);
}
inline void Session::set_dzenexperimentids(int index, ::google::protobuf::uint64 value) {
  dzenexperimentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
}
inline void Session::add_dzenexperimentids(::google::protobuf::uint64 value) {
  dzenexperimentids_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Session::dzenexperimentids() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
  return dzenexperimentids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Session::mutable_dzenexperimentids() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Session.dzenExperimentIds)
  return &dzenexperimentids_;
}

// -------------------------------------------------------------------

// EBinderKey

// required string url = 1;
inline bool EBinderKey::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EBinderKey::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EBinderKey::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EBinderKey::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& EBinderKey::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.url)
  return url_.GetNoArena();
}
inline void EBinderKey::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.url)
}
#if LANG_CXX11
inline void EBinderKey::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.EBinderKey.url)
}
#endif
inline void EBinderKey::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.EBinderKey.url)
}
inline void EBinderKey::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.EBinderKey.url)
}
inline ::std::string* EBinderKey::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.EBinderKey.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EBinderKey::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.EBinderKey.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EBinderKey::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.EBinderKey.url)
}

// required string key = 2;
inline bool EBinderKey::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EBinderKey::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EBinderKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EBinderKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& EBinderKey::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.key)
  return key_.GetNoArena();
}
inline void EBinderKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.key)
}
#if LANG_CXX11
inline void EBinderKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.EBinderKey.key)
}
#endif
inline void EBinderKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.EBinderKey.key)
}
inline void EBinderKey::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.EBinderKey.key)
}
inline ::std::string* EBinderKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.EBinderKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EBinderKey::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.EBinderKey.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EBinderKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.EBinderKey.key)
}

// required string text = 3;
inline bool EBinderKey::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EBinderKey::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EBinderKey::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EBinderKey::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& EBinderKey::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.text)
  return text_.GetNoArena();
}
inline void EBinderKey::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.text)
}
#if LANG_CXX11
inline void EBinderKey::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.EBinderKey.text)
}
#endif
inline void EBinderKey::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.EBinderKey.text)
}
inline void EBinderKey::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.EBinderKey.text)
}
inline ::std::string* EBinderKey::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.EBinderKey.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EBinderKey::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.EBinderKey.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EBinderKey::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.EBinderKey.text)
}

// required int64 timestamp = 4;
inline bool EBinderKey::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EBinderKey::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EBinderKey::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EBinderKey::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 EBinderKey::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.timestamp)
  return timestamp_;
}
inline void EBinderKey::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.timestamp)
}

// required .ru.mail.go.webbase.blobs.ExtraTextArray.ExtraText.Type type = 5;
inline bool EBinderKey::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EBinderKey::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EBinderKey::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EBinderKey::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type EBinderKey::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EBinderKey.type)
  return static_cast< ::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type >(type_);
}
inline void EBinderKey::set_type(::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type value) {
  assert(::ru::mail::go::webbase::blobs::ExtraTextArray_ExtraText_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EBinderKey.type)
}

// -------------------------------------------------------------------

// MarkerKey

// required string url = 1;
inline bool MarkerKey::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkerKey::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkerKey::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkerKey::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& MarkerKey::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerKey.url)
  return url_.GetNoArena();
}
inline void MarkerKey::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerKey.url)
}
#if LANG_CXX11
inline void MarkerKey::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MarkerKey.url)
}
#endif
inline void MarkerKey::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MarkerKey.url)
}
inline void MarkerKey::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MarkerKey.url)
}
inline ::std::string* MarkerKey::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkerKey.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkerKey::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MarkerKey.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkerKey::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MarkerKey.url)
}

// required .ru.mail.go.webbase.blobs.Searcher source = 2;
inline bool MarkerKey::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkerKey::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkerKey::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkerKey::clear_source() {
  source_ = 1;
  clear_has_source();
}
inline ::ru::mail::go::webbase::blobs::Searcher MarkerKey::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerKey.source)
  return static_cast< ::ru::mail::go::webbase::blobs::Searcher >(source_);
}
inline void MarkerKey::set_source(::ru::mail::go::webbase::blobs::Searcher value) {
  assert(::ru::mail::go::webbase::blobs::Searcher_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerKey.source)
}

// required .ru.mail.go.webbase.blobs.MarkerKey.Type type = 3;
inline bool MarkerKey::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarkerKey::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarkerKey::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarkerKey::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::MarkerKey_Type MarkerKey::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkerKey.type)
  return static_cast< ::ru::mail::go::webbase::blobs::MarkerKey_Type >(type_);
}
inline void MarkerKey::set_type(::ru::mail::go::webbase::blobs::MarkerKey_Type value) {
  assert(::ru::mail::go::webbase::blobs::MarkerKey_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkerKey.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::MarkerKey_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::MarkerKey_Type>() {
  return ::ru::mail::go::webbase::blobs::MarkerKey_Type_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::Sex> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::Sex>() {
  return ::ru::mail::go::webbase::blobs::Sex_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::VkPlatform> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::VkPlatform>() {
  return ::ru::mail::go::webbase::blobs::VkPlatform_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::DzenSearchTab> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::DzenSearchTab>() {
  return ::ru::mail::go::webbase::blobs::DzenSearchTab_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::Vrt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::Vrt>() {
  return ::ru::mail::go::webbase::blobs::Vrt_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::Searcher> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::Searcher>() {
  return ::ru::mail::go::webbase::blobs::Searcher_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::Device> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::Device>() {
  return ::ru::mail::go::webbase::blobs::Device_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::Evtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::Evtype>() {
  return ::ru::mail::go::webbase::blobs::Evtype_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::ClickArea> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::ClickArea>() {
  return ::ru::mail::go::webbase::blobs::ClickArea_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_clickrank_5fblobs_2eproto__INCLUDED
