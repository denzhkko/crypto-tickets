// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_storage.proto

#ifndef PROTOBUF_content_5fstorage_2eproto__INCLUDED
#define PROTOBUF_content_5fstorage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fetch_list.pb.h"
#include "crawl_state.pb.h"
// @@protoc_insertion_point(includes)
namespace gogo {
namespace storage {
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class RegionBlob;
class RegionBlobDefaultTypeInternal;
extern RegionBlobDefaultTypeInternal _RegionBlob_default_instance_;
class document_attributes;
class document_attributesDefaultTypeInternal;
extern document_attributesDefaultTypeInternal _document_attributes_default_instance_;
class extra_info;
class extra_infoDefaultTypeInternal;
extern extra_infoDefaultTypeInternal _extra_info_default_instance_;
class spider_document_detail;
class spider_document_detailDefaultTypeInternal;
extern spider_document_detailDefaultTypeInternal _spider_document_detail_default_instance_;
}  // namespace storage
}  // namespace gogo

namespace gogo {
namespace storage {

namespace protobuf_content_5fstorage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_content_5fstorage_2eproto

enum extra_info_encoding_t {
  extra_info_encoding_t_none = 0,
  extra_info_encoding_t_utf8 = 1
};
bool extra_info_encoding_t_IsValid(int value);
const extra_info_encoding_t extra_info_encoding_t_encoding_t_MIN = extra_info_encoding_t_none;
const extra_info_encoding_t extra_info_encoding_t_encoding_t_MAX = extra_info_encoding_t_utf8;
const int extra_info_encoding_t_encoding_t_ARRAYSIZE = extra_info_encoding_t_encoding_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* extra_info_encoding_t_descriptor();
inline const ::std::string& extra_info_encoding_t_Name(extra_info_encoding_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    extra_info_encoding_t_descriptor(), value);
}
inline bool extra_info_encoding_t_Parse(
    const ::std::string& name, extra_info_encoding_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<extra_info_encoding_t>(
    extra_info_encoding_t_descriptor(), name, value);
}
enum spider_document_detail_flag_t {
  spider_document_detail_flag_t_empty = 0,
  spider_document_detail_flag_t_original = 1,
  spider_document_detail_flag_t_remove_page_from_index = 2,
  spider_document_detail_flag_t_converted = 3,
  spider_document_detail_flag_t_remove_site_from_index = 4,
  spider_document_detail_flag_t_metainformation = 5,
  spider_document_detail_flag_t_not_found = 6,
  spider_document_detail_flag_t_redirect = 7,
  spider_document_detail_flag_t_index_extra_info = 8
};
bool spider_document_detail_flag_t_IsValid(int value);
const spider_document_detail_flag_t spider_document_detail_flag_t_flag_t_MIN = spider_document_detail_flag_t_empty;
const spider_document_detail_flag_t spider_document_detail_flag_t_flag_t_MAX = spider_document_detail_flag_t_index_extra_info;
const int spider_document_detail_flag_t_flag_t_ARRAYSIZE = spider_document_detail_flag_t_flag_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* spider_document_detail_flag_t_descriptor();
inline const ::std::string& spider_document_detail_flag_t_Name(spider_document_detail_flag_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    spider_document_detail_flag_t_descriptor(), value);
}
inline bool spider_document_detail_flag_t_Parse(
    const ::std::string& name, spider_document_detail_flag_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<spider_document_detail_flag_t>(
    spider_document_detail_flag_t_descriptor(), name, value);
}
enum spider_document_detail_type_t {
  spider_document_detail_type_t_unknown = 0,
  spider_document_detail_type_t_html = 1,
  spider_document_detail_type_t_xml = 2,
  spider_document_detail_type_t_wml = 3,
  spider_document_detail_type_t_rss = 4,
  spider_document_detail_type_t_pdf = 5,
  spider_document_detail_type_t_doc = 6,
  spider_document_detail_type_t_rtf = 7,
  spider_document_detail_type_t_ppt = 8,
  spider_document_detail_type_t_pps = 9,
  spider_document_detail_type_t_ps = 10,
  spider_document_detail_type_t_jpeg = 11,
  spider_document_detail_type_t_gif = 12,
  spider_document_detail_type_t_png = 13,
  spider_document_detail_type_t_xls = 14,
  spider_document_detail_type_t_txt = 15,
  spider_document_detail_type_t_mid = 16,
  spider_document_detail_type_t_wav = 17,
  spider_document_detail_type_t_mp3 = 18,
  spider_document_detail_type_t_ogg = 19,
  spider_document_detail_type_t_aac = 20,
  spider_document_detail_type_t_wma = 21,
  spider_document_detail_type_t_aif = 22,
  spider_document_detail_type_t_vqf = 23,
  spider_document_detail_type_t_ra = 24,
  spider_document_detail_type_t_riff_webp = 25
};
bool spider_document_detail_type_t_IsValid(int value);
const spider_document_detail_type_t spider_document_detail_type_t_type_t_MIN = spider_document_detail_type_t_unknown;
const spider_document_detail_type_t spider_document_detail_type_t_type_t_MAX = spider_document_detail_type_t_riff_webp;
const int spider_document_detail_type_t_type_t_ARRAYSIZE = spider_document_detail_type_t_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* spider_document_detail_type_t_descriptor();
inline const ::std::string& spider_document_detail_type_t_Name(spider_document_detail_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    spider_document_detail_type_t_descriptor(), value);
}
inline bool spider_document_detail_type_t_Parse(
    const ::std::string& name, spider_document_detail_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<spider_document_detail_type_t>(
    spider_document_detail_type_t_descriptor(), name, value);
}
enum spider_document_detail_language_t {
  spider_document_detail_language_t_lang_unknown = 0,
  spider_document_detail_language_t_lang_russian = 1,
  spider_document_detail_language_t_lang_cyrillic = 2,
  spider_document_detail_language_t_lang_bolgarian = 3,
  spider_document_detail_language_t_lang_ukrainian = 4,
  spider_document_detail_language_t_lang_byelorussian = 5,
  spider_document_detail_language_t_lang_kazakh = 6,
  spider_document_detail_language_t_lang_english = 7
};
bool spider_document_detail_language_t_IsValid(int value);
const spider_document_detail_language_t spider_document_detail_language_t_language_t_MIN = spider_document_detail_language_t_lang_unknown;
const spider_document_detail_language_t spider_document_detail_language_t_language_t_MAX = spider_document_detail_language_t_lang_english;
const int spider_document_detail_language_t_language_t_ARRAYSIZE = spider_document_detail_language_t_language_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* spider_document_detail_language_t_descriptor();
inline const ::std::string& spider_document_detail_language_t_Name(spider_document_detail_language_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    spider_document_detail_language_t_descriptor(), value);
}
inline bool spider_document_detail_language_t_Parse(
    const ::std::string& name, spider_document_detail_language_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<spider_document_detail_language_t>(
    spider_document_detail_language_t_descriptor(), name, value);
}
enum spider_document_detail_encoding_t {
  spider_document_detail_encoding_t_enc_undefined = 0,
  spider_document_detail_encoding_t_enc_unknown = 1,
  spider_document_detail_encoding_t_enc_utf8 = 2,
  spider_document_detail_encoding_t_enc_cp1251 = 3,
  spider_document_detail_encoding_t_enc_koi8 = 4
};
bool spider_document_detail_encoding_t_IsValid(int value);
const spider_document_detail_encoding_t spider_document_detail_encoding_t_encoding_t_MIN = spider_document_detail_encoding_t_enc_undefined;
const spider_document_detail_encoding_t spider_document_detail_encoding_t_encoding_t_MAX = spider_document_detail_encoding_t_enc_koi8;
const int spider_document_detail_encoding_t_encoding_t_ARRAYSIZE = spider_document_detail_encoding_t_encoding_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* spider_document_detail_encoding_t_descriptor();
inline const ::std::string& spider_document_detail_encoding_t_Name(spider_document_detail_encoding_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    spider_document_detail_encoding_t_descriptor(), value);
}
inline bool spider_document_detail_encoding_t_Parse(
    const ::std::string& name, spider_document_detail_encoding_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<spider_document_detail_encoding_t>(
    spider_document_detail_encoding_t_descriptor(), name, value);
}
// ===================================================================

class document_attributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.storage.document_attributes) */ {
 public:
  document_attributes();
  virtual ~document_attributes();

  document_attributes(const document_attributes& from);

  inline document_attributes& operator=(const document_attributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  document_attributes(document_attributes&& from) noexcept
    : document_attributes() {
    *this = ::std::move(from);
  }

  inline document_attributes& operator=(document_attributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const document_attributes& default_instance();

  static inline const document_attributes* internal_default_instance() {
    return reinterpret_cast<const document_attributes*>(
               &_document_attributes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(document_attributes* other);
  friend void swap(document_attributes& a, document_attributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline document_attributes* New() const PROTOBUF_FINAL { return New(NULL); }

  document_attributes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const document_attributes& from);
  void MergeFrom(const document_attributes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(document_attributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:gogo.storage.document_attributes)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_content_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Region : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.storage.Region) */ {
 public:
  Region();
  virtual ~Region();

  Region(const Region& from);

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Region& default_instance();

  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Region* other);
  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const PROTOBUF_FINAL { return New(NULL); }

  Region* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Region* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // required int32 end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.storage.Region)
 private:
  void set_has_start();
  void clear_has_start();
  void set_has_end();
  void clear_has_end();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  friend struct protobuf_content_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionBlob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.storage.RegionBlob) */ {
 public:
  RegionBlob();
  virtual ~RegionBlob();

  RegionBlob(const RegionBlob& from);

  inline RegionBlob& operator=(const RegionBlob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionBlob(RegionBlob&& from) noexcept
    : RegionBlob() {
    *this = ::std::move(from);
  }

  inline RegionBlob& operator=(RegionBlob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionBlob& default_instance();

  static inline const RegionBlob* internal_default_instance() {
    return reinterpret_cast<const RegionBlob*>(
               &_RegionBlob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RegionBlob* other);
  friend void swap(RegionBlob& a, RegionBlob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionBlob* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionBlob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionBlob& from);
  void MergeFrom(const RegionBlob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionBlob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gogo.storage.Region data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::gogo::storage::Region& data(int index) const;
  ::gogo::storage::Region* mutable_data(int index);
  ::gogo::storage::Region* add_data();
  ::google::protobuf::RepeatedPtrField< ::gogo::storage::Region >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::gogo::storage::Region >&
      data() const;

  // required int32 num = 1;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gogo.storage.RegionBlob)
 private:
  void set_has_num();
  void clear_has_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::storage::Region > data_;
  ::google::protobuf::int32 num_;
  friend struct protobuf_content_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class extra_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.storage.extra_info) */ {
 public:
  extra_info();
  virtual ~extra_info();

  extra_info(const extra_info& from);

  inline extra_info& operator=(const extra_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  extra_info(extra_info&& from) noexcept
    : extra_info() {
    *this = ::std::move(from);
  }

  inline extra_info& operator=(extra_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const extra_info& default_instance();

  static inline const extra_info* internal_default_instance() {
    return reinterpret_cast<const extra_info*>(
               &_extra_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(extra_info* other);
  friend void swap(extra_info& a, extra_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline extra_info* New() const PROTOBUF_FINAL { return New(NULL); }

  extra_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const extra_info& from);
  void MergeFrom(const extra_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(extra_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef extra_info_encoding_t encoding_t;
  static const encoding_t none =
    extra_info_encoding_t_none;
  static const encoding_t utf8 =
    extra_info_encoding_t_utf8;
  static inline bool encoding_t_IsValid(int value) {
    return extra_info_encoding_t_IsValid(value);
  }
  static const encoding_t encoding_t_MIN =
    extra_info_encoding_t_encoding_t_MIN;
  static const encoding_t encoding_t_MAX =
    extra_info_encoding_t_encoding_t_MAX;
  static const int encoding_t_ARRAYSIZE =
    extra_info_encoding_t_encoding_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  encoding_t_descriptor() {
    return extra_info_encoding_t_descriptor();
  }
  static inline const ::std::string& encoding_t_Name(encoding_t value) {
    return extra_info_encoding_t_Name(value);
  }
  static inline bool encoding_t_Parse(const ::std::string& name,
      encoding_t* value) {
    return extra_info_encoding_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 props_ui32 = 4;
  int props_ui32_size() const;
  void clear_props_ui32();
  static const int kPropsUi32FieldNumber = 4;
  ::google::protobuf::uint32 props_ui32(int index) const;
  void set_props_ui32(int index, ::google::protobuf::uint32 value);
  void add_props_ui32(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      props_ui32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_props_ui32();

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required .gogo.storage.extra_info.encoding_t encoding = 2;
  bool has_encoding() const;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  ::gogo::storage::extra_info_encoding_t encoding() const;
  void set_encoding(::gogo::storage::extra_info_encoding_t value);

  // @@protoc_insertion_point(class_scope:gogo.storage.extra_info)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_encoding();
  void clear_has_encoding();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > props_ui32_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int encoding_;
  friend struct protobuf_content_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class spider_document_detail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.storage.spider_document_detail) */ {
 public:
  spider_document_detail();
  virtual ~spider_document_detail();

  spider_document_detail(const spider_document_detail& from);

  inline spider_document_detail& operator=(const spider_document_detail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  spider_document_detail(spider_document_detail&& from) noexcept
    : spider_document_detail() {
    *this = ::std::move(from);
  }

  inline spider_document_detail& operator=(spider_document_detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const spider_document_detail& default_instance();

  static inline const spider_document_detail* internal_default_instance() {
    return reinterpret_cast<const spider_document_detail*>(
               &_spider_document_detail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(spider_document_detail* other);
  friend void swap(spider_document_detail& a, spider_document_detail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline spider_document_detail* New() const PROTOBUF_FINAL { return New(NULL); }

  spider_document_detail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const spider_document_detail& from);
  void MergeFrom(const spider_document_detail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(spider_document_detail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef spider_document_detail_flag_t flag_t;
  static const flag_t empty =
    spider_document_detail_flag_t_empty;
  static const flag_t original =
    spider_document_detail_flag_t_original;
  static const flag_t remove_page_from_index =
    spider_document_detail_flag_t_remove_page_from_index;
  static const flag_t converted =
    spider_document_detail_flag_t_converted;
  static const flag_t remove_site_from_index =
    spider_document_detail_flag_t_remove_site_from_index;
  static const flag_t metainformation =
    spider_document_detail_flag_t_metainformation;
  static const flag_t not_found =
    spider_document_detail_flag_t_not_found;
  static const flag_t redirect =
    spider_document_detail_flag_t_redirect;
  static const flag_t index_extra_info =
    spider_document_detail_flag_t_index_extra_info;
  static inline bool flag_t_IsValid(int value) {
    return spider_document_detail_flag_t_IsValid(value);
  }
  static const flag_t flag_t_MIN =
    spider_document_detail_flag_t_flag_t_MIN;
  static const flag_t flag_t_MAX =
    spider_document_detail_flag_t_flag_t_MAX;
  static const int flag_t_ARRAYSIZE =
    spider_document_detail_flag_t_flag_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  flag_t_descriptor() {
    return spider_document_detail_flag_t_descriptor();
  }
  static inline const ::std::string& flag_t_Name(flag_t value) {
    return spider_document_detail_flag_t_Name(value);
  }
  static inline bool flag_t_Parse(const ::std::string& name,
      flag_t* value) {
    return spider_document_detail_flag_t_Parse(name, value);
  }

  typedef spider_document_detail_type_t type_t;
  static const type_t unknown =
    spider_document_detail_type_t_unknown;
  static const type_t html =
    spider_document_detail_type_t_html;
  static const type_t xml =
    spider_document_detail_type_t_xml;
  static const type_t wml =
    spider_document_detail_type_t_wml;
  static const type_t rss =
    spider_document_detail_type_t_rss;
  static const type_t pdf =
    spider_document_detail_type_t_pdf;
  static const type_t doc =
    spider_document_detail_type_t_doc;
  static const type_t rtf =
    spider_document_detail_type_t_rtf;
  static const type_t ppt =
    spider_document_detail_type_t_ppt;
  static const type_t pps =
    spider_document_detail_type_t_pps;
  static const type_t ps =
    spider_document_detail_type_t_ps;
  static const type_t jpeg =
    spider_document_detail_type_t_jpeg;
  static const type_t gif =
    spider_document_detail_type_t_gif;
  static const type_t png =
    spider_document_detail_type_t_png;
  static const type_t xls =
    spider_document_detail_type_t_xls;
  static const type_t txt =
    spider_document_detail_type_t_txt;
  static const type_t mid =
    spider_document_detail_type_t_mid;
  static const type_t wav =
    spider_document_detail_type_t_wav;
  static const type_t mp3 =
    spider_document_detail_type_t_mp3;
  static const type_t ogg =
    spider_document_detail_type_t_ogg;
  static const type_t aac =
    spider_document_detail_type_t_aac;
  static const type_t wma =
    spider_document_detail_type_t_wma;
  static const type_t aif =
    spider_document_detail_type_t_aif;
  static const type_t vqf =
    spider_document_detail_type_t_vqf;
  static const type_t ra =
    spider_document_detail_type_t_ra;
  static const type_t riff_webp =
    spider_document_detail_type_t_riff_webp;
  static inline bool type_t_IsValid(int value) {
    return spider_document_detail_type_t_IsValid(value);
  }
  static const type_t type_t_MIN =
    spider_document_detail_type_t_type_t_MIN;
  static const type_t type_t_MAX =
    spider_document_detail_type_t_type_t_MAX;
  static const int type_t_ARRAYSIZE =
    spider_document_detail_type_t_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_t_descriptor() {
    return spider_document_detail_type_t_descriptor();
  }
  static inline const ::std::string& type_t_Name(type_t value) {
    return spider_document_detail_type_t_Name(value);
  }
  static inline bool type_t_Parse(const ::std::string& name,
      type_t* value) {
    return spider_document_detail_type_t_Parse(name, value);
  }

  typedef spider_document_detail_language_t language_t;
  static const language_t lang_unknown =
    spider_document_detail_language_t_lang_unknown;
  static const language_t lang_russian =
    spider_document_detail_language_t_lang_russian;
  static const language_t lang_cyrillic =
    spider_document_detail_language_t_lang_cyrillic;
  static const language_t lang_bolgarian =
    spider_document_detail_language_t_lang_bolgarian;
  static const language_t lang_ukrainian =
    spider_document_detail_language_t_lang_ukrainian;
  static const language_t lang_byelorussian =
    spider_document_detail_language_t_lang_byelorussian;
  static const language_t lang_kazakh =
    spider_document_detail_language_t_lang_kazakh;
  static const language_t lang_english =
    spider_document_detail_language_t_lang_english;
  static inline bool language_t_IsValid(int value) {
    return spider_document_detail_language_t_IsValid(value);
  }
  static const language_t language_t_MIN =
    spider_document_detail_language_t_language_t_MIN;
  static const language_t language_t_MAX =
    spider_document_detail_language_t_language_t_MAX;
  static const int language_t_ARRAYSIZE =
    spider_document_detail_language_t_language_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  language_t_descriptor() {
    return spider_document_detail_language_t_descriptor();
  }
  static inline const ::std::string& language_t_Name(language_t value) {
    return spider_document_detail_language_t_Name(value);
  }
  static inline bool language_t_Parse(const ::std::string& name,
      language_t* value) {
    return spider_document_detail_language_t_Parse(name, value);
  }

  typedef spider_document_detail_encoding_t encoding_t;
  static const encoding_t enc_undefined =
    spider_document_detail_encoding_t_enc_undefined;
  static const encoding_t enc_unknown =
    spider_document_detail_encoding_t_enc_unknown;
  static const encoding_t enc_utf8 =
    spider_document_detail_encoding_t_enc_utf8;
  static const encoding_t enc_cp1251 =
    spider_document_detail_encoding_t_enc_cp1251;
  static const encoding_t enc_koi8 =
    spider_document_detail_encoding_t_enc_koi8;
  static inline bool encoding_t_IsValid(int value) {
    return spider_document_detail_encoding_t_IsValid(value);
  }
  static const encoding_t encoding_t_MIN =
    spider_document_detail_encoding_t_encoding_t_MIN;
  static const encoding_t encoding_t_MAX =
    spider_document_detail_encoding_t_encoding_t_MAX;
  static const int encoding_t_ARRAYSIZE =
    spider_document_detail_encoding_t_encoding_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  encoding_t_descriptor() {
    return spider_document_detail_encoding_t_descriptor();
  }
  static inline const ::std::string& encoding_t_Name(encoding_t value) {
    return spider_document_detail_encoding_t_Name(value);
  }
  static inline bool encoding_t_Parse(const ::std::string& name,
      encoding_t* value) {
    return spider_document_detail_encoding_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .gogo.storage.document_attributes attributes = 7;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 7;
  const ::gogo::storage::document_attributes& attributes(int index) const;
  ::gogo::storage::document_attributes* mutable_attributes(int index);
  ::gogo::storage::document_attributes* add_attributes();
  ::google::protobuf::RepeatedPtrField< ::gogo::storage::document_attributes >*
      mutable_attributes();
  const ::google::protobuf::RepeatedPtrField< ::gogo::storage::document_attributes >&
      attributes() const;

  // repeated .gogo.storage.extra_info extra_info = 10;
  int extra_info_size() const;
  void clear_extra_info();
  static const int kExtraInfoFieldNumber = 10;
  const ::gogo::storage::extra_info& extra_info(int index) const;
  ::gogo::storage::extra_info* mutable_extra_info(int index);
  ::gogo::storage::extra_info* add_extra_info();
  ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >*
      mutable_extra_info();
  const ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >&
      extra_info() const;

  // repeated string redirects = 17;
  int redirects_size() const;
  void clear_redirects();
  static const int kRedirectsFieldNumber = 17;
  const ::std::string& redirects(int index) const;
  ::std::string* mutable_redirects(int index);
  void set_redirects(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_redirects(int index, ::std::string&& value);
  #endif
  void set_redirects(int index, const char* value);
  void set_redirects(int index, const char* value, size_t size);
  ::std::string* add_redirects();
  void add_redirects(const ::std::string& value);
  #if LANG_CXX11
  void add_redirects(::std::string&& value);
  #endif
  void add_redirects(const char* value);
  void add_redirects(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& redirects() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_redirects();

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional bytes content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional bytes meta_description = 15;
  bool has_meta_description() const;
  void clear_meta_description();
  static const int kMetaDescriptionFieldNumber = 15;
  const ::std::string& meta_description() const;
  void set_meta_description(const ::std::string& value);
  #if LANG_CXX11
  void set_meta_description(::std::string&& value);
  #endif
  void set_meta_description(const char* value);
  void set_meta_description(const void* value, size_t size);
  ::std::string* mutable_meta_description();
  ::std::string* release_meta_description();
  void set_allocated_meta_description(::std::string* meta_description);

  // optional bytes plainIndex = 19;
  bool has_plainindex() const;
  void clear_plainindex();
  static const int kPlainIndexFieldNumber = 19;
  const ::std::string& plainindex() const;
  void set_plainindex(const ::std::string& value);
  #if LANG_CXX11
  void set_plainindex(::std::string&& value);
  #endif
  void set_plainindex(const char* value);
  void set_plainindex(const void* value, size_t size);
  ::std::string* mutable_plainindex();
  ::std::string* release_plainindex();
  void set_allocated_plainindex(::std::string* plainindex);

  // optional bytes titles_vector = 20;
  bool has_titles_vector() const;
  void clear_titles_vector();
  static const int kTitlesVectorFieldNumber = 20;
  const ::std::string& titles_vector() const;
  void set_titles_vector(const ::std::string& value);
  #if LANG_CXX11
  void set_titles_vector(::std::string&& value);
  #endif
  void set_titles_vector(const char* value);
  void set_titles_vector(const void* value, size_t size);
  ::std::string* mutable_titles_vector();
  ::std::string* release_titles_vector();
  void set_allocated_titles_vector(::std::string* titles_vector);

  // optional .gogo.storage.RegionBlob cuttedBlob = 14;
  bool has_cuttedblob() const;
  void clear_cuttedblob();
  static const int kCuttedBlobFieldNumber = 14;
  const ::gogo::storage::RegionBlob& cuttedblob() const;
  ::gogo::storage::RegionBlob* mutable_cuttedblob();
  ::gogo::storage::RegionBlob* release_cuttedblob();
  void set_allocated_cuttedblob(::gogo::storage::RegionBlob* cuttedblob);

  // required uint64 download_time = 2;
  bool has_download_time() const;
  void clear_download_time();
  static const int kDownloadTimeFieldNumber = 2;
  ::google::protobuf::uint64 download_time() const;
  void set_download_time(::google::protobuf::uint64 value);

  // required .gogo.storage.spider_document_detail.flag_t flag = 4;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 4;
  ::gogo::storage::spider_document_detail_flag_t flag() const;
  void set_flag(::gogo::storage::spider_document_detail_flag_t value);

  // optional .gogo.storage.spider_document_detail.type_t type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::gogo::storage::spider_document_detail_type_t type() const;
  void set_type(::gogo::storage::spider_document_detail_type_t value);

  // optional .gogo.storage.spider_document_detail.language_t language = 6;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 6;
  ::gogo::storage::spider_document_detail_language_t language() const;
  void set_language(::gogo::storage::spider_document_detail_language_t value);

  // optional .gogo.storage.spider_document_detail.encoding_t encoding = 8;
  bool has_encoding() const;
  void clear_encoding();
  static const int kEncodingFieldNumber = 8;
  ::gogo::storage::spider_document_detail_encoding_t encoding() const;
  void set_encoding(::gogo::storage::spider_document_detail_encoding_t value);

  // optional uint64 publication_time = 9;
  bool has_publication_time() const;
  void clear_publication_time();
  static const int kPublicationTimeFieldNumber = 9;
  ::google::protobuf::uint64 publication_time() const;
  void set_publication_time(::google::protobuf::uint64 value);

  // optional uint32 porno_level = 12;
  bool has_porno_level() const;
  void clear_porno_level();
  static const int kPornoLevelFieldNumber = 12;
  ::google::protobuf::uint32 porno_level() const;
  void set_porno_level(::google::protobuf::uint32 value);

  // optional uint32 spam_level = 13;
  bool has_spam_level() const;
  void clear_spam_level();
  static const int kSpamLevelFieldNumber = 13;
  ::google::protobuf::uint32 spam_level() const;
  void set_spam_level(::google::protobuf::uint32 value);

  // optional bool origin_fetcher = 11 [default = false];
  bool has_origin_fetcher() const;
  void clear_origin_fetcher();
  static const int kOriginFetcherFieldNumber = 11;
  bool origin_fetcher() const;
  void set_origin_fetcher(bool value);

  // optional bool disabled_stub = 16 [default = false];
  bool has_disabled_stub() const;
  void clear_disabled_stub();
  static const int kDisabledStubFieldNumber = 16;
  bool disabled_stub() const;
  void set_disabled_stub(bool value);

  // optional bool reindexing = 18 [default = false];
  bool has_reindexing() const;
  void clear_reindexing();
  static const int kReindexingFieldNumber = 18;
  bool reindexing() const;
  void set_reindexing(bool value);

  // optional bool update_video = 21;
  bool has_update_video() const;
  void clear_update_video();
  static const int kUpdateVideoFieldNumber = 21;
  bool update_video() const;
  void set_update_video(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(spider_document_detail)
  static const int kFetchUrlFieldNumber = 1000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::gogo::storage::spider_document_detail,
      ::google::protobuf::internal::MessageTypeTraits< ::ru::mail::go::webbase::blobs::FetchUrl >, 11, false >
    fetchUrl;
  static const int kFetchStatusFieldNumber = 1001;
  static ::google::protobuf::internal::ExtensionIdentifier< ::gogo::storage::spider_document_detail,
      ::google::protobuf::internal::EnumTypeTraits< ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes, ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes_IsValid>, 14, false >
    fetchStatus;
  // @@protoc_insertion_point(class_scope:gogo.storage.spider_document_detail)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_download_time();
  void clear_has_download_time();
  void set_has_content();
  void clear_has_content();
  void set_has_flag();
  void clear_has_flag();
  void set_has_type();
  void clear_has_type();
  void set_has_language();
  void clear_has_language();
  void set_has_encoding();
  void clear_has_encoding();
  void set_has_publication_time();
  void clear_has_publication_time();
  void set_has_origin_fetcher();
  void clear_has_origin_fetcher();
  void set_has_porno_level();
  void clear_has_porno_level();
  void set_has_spam_level();
  void clear_has_spam_level();
  void set_has_cuttedblob();
  void clear_has_cuttedblob();
  void set_has_meta_description();
  void clear_has_meta_description();
  void set_has_disabled_stub();
  void clear_has_disabled_stub();
  void set_has_reindexing();
  void clear_has_reindexing();
  void set_has_plainindex();
  void clear_has_plainindex();
  void set_has_titles_vector();
  void clear_has_titles_vector();
  void set_has_update_video();
  void clear_has_update_video();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::storage::document_attributes > attributes_;
  ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info > extra_info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> redirects_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr meta_description_;
  ::google::protobuf::internal::ArenaStringPtr plainindex_;
  ::google::protobuf::internal::ArenaStringPtr titles_vector_;
  ::gogo::storage::RegionBlob* cuttedblob_;
  ::google::protobuf::uint64 download_time_;
  int flag_;
  int type_;
  int language_;
  int encoding_;
  ::google::protobuf::uint64 publication_time_;
  ::google::protobuf::uint32 porno_level_;
  ::google::protobuf::uint32 spam_level_;
  bool origin_fetcher_;
  bool disabled_stub_;
  bool reindexing_;
  bool update_video_;
  friend struct protobuf_content_5fstorage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// document_attributes

// required string name = 1;
inline bool document_attributes::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void document_attributes::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void document_attributes::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void document_attributes::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& document_attributes::name() const {
  // @@protoc_insertion_point(field_get:gogo.storage.document_attributes.name)
  return name_.GetNoArena();
}
inline void document_attributes::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.document_attributes.name)
}
#if LANG_CXX11
inline void document_attributes::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.document_attributes.name)
}
#endif
inline void document_attributes::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.document_attributes.name)
}
inline void document_attributes::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.document_attributes.name)
}
inline ::std::string* document_attributes::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.storage.document_attributes.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* document_attributes::release_name() {
  // @@protoc_insertion_point(field_release:gogo.storage.document_attributes.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void document_attributes::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.document_attributes.name)
}

// required string value = 2;
inline bool document_attributes::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void document_attributes::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void document_attributes::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void document_attributes::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& document_attributes::value() const {
  // @@protoc_insertion_point(field_get:gogo.storage.document_attributes.value)
  return value_.GetNoArena();
}
inline void document_attributes::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.document_attributes.value)
}
#if LANG_CXX11
inline void document_attributes::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.document_attributes.value)
}
#endif
inline void document_attributes::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.document_attributes.value)
}
inline void document_attributes::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.document_attributes.value)
}
inline ::std::string* document_attributes::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:gogo.storage.document_attributes.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* document_attributes::release_value() {
  // @@protoc_insertion_point(field_release:gogo.storage.document_attributes.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void document_attributes::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.document_attributes.value)
}

// -------------------------------------------------------------------

// Region

// required int32 start = 1;
inline bool Region::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Region::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Region::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Region::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 Region::start() const {
  // @@protoc_insertion_point(field_get:gogo.storage.Region.start)
  return start_;
}
inline void Region::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.Region.start)
}

// required int32 end = 2;
inline bool Region::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Region::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Region::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Region::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 Region::end() const {
  // @@protoc_insertion_point(field_get:gogo.storage.Region.end)
  return end_;
}
inline void Region::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.Region.end)
}

// -------------------------------------------------------------------

// RegionBlob

// required int32 num = 1;
inline bool RegionBlob::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionBlob::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionBlob::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionBlob::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 RegionBlob::num() const {
  // @@protoc_insertion_point(field_get:gogo.storage.RegionBlob.num)
  return num_;
}
inline void RegionBlob::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.RegionBlob.num)
}

// repeated .gogo.storage.Region data = 2;
inline int RegionBlob::data_size() const {
  return data_.size();
}
inline void RegionBlob::clear_data() {
  data_.Clear();
}
inline const ::gogo::storage::Region& RegionBlob::data(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.RegionBlob.data)
  return data_.Get(index);
}
inline ::gogo::storage::Region* RegionBlob::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.storage.RegionBlob.data)
  return data_.Mutable(index);
}
inline ::gogo::storage::Region* RegionBlob::add_data() {
  // @@protoc_insertion_point(field_add:gogo.storage.RegionBlob.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::storage::Region >*
RegionBlob::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.RegionBlob.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::storage::Region >&
RegionBlob::data() const {
  // @@protoc_insertion_point(field_list:gogo.storage.RegionBlob.data)
  return data_;
}

// -------------------------------------------------------------------

// extra_info

// required string type = 1;
inline bool extra_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void extra_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void extra_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void extra_info::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& extra_info::type() const {
  // @@protoc_insertion_point(field_get:gogo.storage.extra_info.type)
  return type_.GetNoArena();
}
inline void extra_info::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.extra_info.type)
}
#if LANG_CXX11
inline void extra_info::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.extra_info.type)
}
#endif
inline void extra_info::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.extra_info.type)
}
inline void extra_info::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.extra_info.type)
}
inline ::std::string* extra_info::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:gogo.storage.extra_info.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* extra_info::release_type() {
  // @@protoc_insertion_point(field_release:gogo.storage.extra_info.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void extra_info::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.extra_info.type)
}

// required .gogo.storage.extra_info.encoding_t encoding = 2;
inline bool extra_info::has_encoding() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void extra_info::set_has_encoding() {
  _has_bits_[0] |= 0x00000004u;
}
inline void extra_info::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void extra_info::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
inline ::gogo::storage::extra_info_encoding_t extra_info::encoding() const {
  // @@protoc_insertion_point(field_get:gogo.storage.extra_info.encoding)
  return static_cast< ::gogo::storage::extra_info_encoding_t >(encoding_);
}
inline void extra_info::set_encoding(::gogo::storage::extra_info_encoding_t value) {
  assert(::gogo::storage::extra_info_encoding_t_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.extra_info.encoding)
}

// required bytes data = 3;
inline bool extra_info::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void extra_info::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void extra_info::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void extra_info::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& extra_info::data() const {
  // @@protoc_insertion_point(field_get:gogo.storage.extra_info.data)
  return data_.GetNoArena();
}
inline void extra_info::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.extra_info.data)
}
#if LANG_CXX11
inline void extra_info::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.extra_info.data)
}
#endif
inline void extra_info::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.extra_info.data)
}
inline void extra_info::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.extra_info.data)
}
inline ::std::string* extra_info::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:gogo.storage.extra_info.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* extra_info::release_data() {
  // @@protoc_insertion_point(field_release:gogo.storage.extra_info.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void extra_info::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.extra_info.data)
}

// repeated uint32 props_ui32 = 4;
inline int extra_info::props_ui32_size() const {
  return props_ui32_.size();
}
inline void extra_info::clear_props_ui32() {
  props_ui32_.Clear();
}
inline ::google::protobuf::uint32 extra_info::props_ui32(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.extra_info.props_ui32)
  return props_ui32_.Get(index);
}
inline void extra_info::set_props_ui32(int index, ::google::protobuf::uint32 value) {
  props_ui32_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.storage.extra_info.props_ui32)
}
inline void extra_info::add_props_ui32(::google::protobuf::uint32 value) {
  props_ui32_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.storage.extra_info.props_ui32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
extra_info::props_ui32() const {
  // @@protoc_insertion_point(field_list:gogo.storage.extra_info.props_ui32)
  return props_ui32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
extra_info::mutable_props_ui32() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.extra_info.props_ui32)
  return &props_ui32_;
}

// -------------------------------------------------------------------

// spider_document_detail

// required string url = 1;
inline bool spider_document_detail::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void spider_document_detail::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void spider_document_detail::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void spider_document_detail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& spider_document_detail::url() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.url)
  return url_.GetNoArena();
}
inline void spider_document_detail::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.url)
}
#if LANG_CXX11
inline void spider_document_detail::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.url)
}
#endif
inline void spider_document_detail::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.url)
}
inline void spider_document_detail::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.url)
}
inline ::std::string* spider_document_detail::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* spider_document_detail::release_url() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void spider_document_detail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.url)
}

// required uint64 download_time = 2;
inline bool spider_document_detail::has_download_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void spider_document_detail::set_has_download_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void spider_document_detail::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void spider_document_detail::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
inline ::google::protobuf::uint64 spider_document_detail::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.download_time)
  return download_time_;
}
inline void spider_document_detail::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.download_time)
}

// optional bytes content = 3;
inline bool spider_document_detail::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void spider_document_detail::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void spider_document_detail::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void spider_document_detail::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& spider_document_detail::content() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.content)
  return content_.GetNoArena();
}
inline void spider_document_detail::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.content)
}
#if LANG_CXX11
inline void spider_document_detail::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.content)
}
#endif
inline void spider_document_detail::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.content)
}
inline void spider_document_detail::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.content)
}
inline ::std::string* spider_document_detail::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* spider_document_detail::release_content() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void spider_document_detail::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.content)
}

// required .gogo.storage.spider_document_detail.flag_t flag = 4;
inline bool spider_document_detail::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void spider_document_detail::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void spider_document_detail::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void spider_document_detail::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::gogo::storage::spider_document_detail_flag_t spider_document_detail::flag() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.flag)
  return static_cast< ::gogo::storage::spider_document_detail_flag_t >(flag_);
}
inline void spider_document_detail::set_flag(::gogo::storage::spider_document_detail_flag_t value) {
  assert(::gogo::storage::spider_document_detail_flag_t_IsValid(value));
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.flag)
}

// optional .gogo.storage.spider_document_detail.type_t type = 5;
inline bool spider_document_detail::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void spider_document_detail::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void spider_document_detail::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void spider_document_detail::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::gogo::storage::spider_document_detail_type_t spider_document_detail::type() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.type)
  return static_cast< ::gogo::storage::spider_document_detail_type_t >(type_);
}
inline void spider_document_detail::set_type(::gogo::storage::spider_document_detail_type_t value) {
  assert(::gogo::storage::spider_document_detail_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.type)
}

// optional .gogo.storage.spider_document_detail.language_t language = 6;
inline bool spider_document_detail::has_language() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void spider_document_detail::set_has_language() {
  _has_bits_[0] |= 0x00000200u;
}
inline void spider_document_detail::clear_has_language() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void spider_document_detail::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::gogo::storage::spider_document_detail_language_t spider_document_detail::language() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.language)
  return static_cast< ::gogo::storage::spider_document_detail_language_t >(language_);
}
inline void spider_document_detail::set_language(::gogo::storage::spider_document_detail_language_t value) {
  assert(::gogo::storage::spider_document_detail_language_t_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.language)
}

// repeated .gogo.storage.document_attributes attributes = 7;
inline int spider_document_detail::attributes_size() const {
  return attributes_.size();
}
inline void spider_document_detail::clear_attributes() {
  attributes_.Clear();
}
inline const ::gogo::storage::document_attributes& spider_document_detail::attributes(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.attributes)
  return attributes_.Get(index);
}
inline ::gogo::storage::document_attributes* spider_document_detail::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.attributes)
  return attributes_.Mutable(index);
}
inline ::gogo::storage::document_attributes* spider_document_detail::add_attributes() {
  // @@protoc_insertion_point(field_add:gogo.storage.spider_document_detail.attributes)
  return attributes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::storage::document_attributes >*
spider_document_detail::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.spider_document_detail.attributes)
  return &attributes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::storage::document_attributes >&
spider_document_detail::attributes() const {
  // @@protoc_insertion_point(field_list:gogo.storage.spider_document_detail.attributes)
  return attributes_;
}

// optional .gogo.storage.spider_document_detail.encoding_t encoding = 8;
inline bool spider_document_detail::has_encoding() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void spider_document_detail::set_has_encoding() {
  _has_bits_[0] |= 0x00000400u;
}
inline void spider_document_detail::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void spider_document_detail::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
inline ::gogo::storage::spider_document_detail_encoding_t spider_document_detail::encoding() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.encoding)
  return static_cast< ::gogo::storage::spider_document_detail_encoding_t >(encoding_);
}
inline void spider_document_detail::set_encoding(::gogo::storage::spider_document_detail_encoding_t value) {
  assert(::gogo::storage::spider_document_detail_encoding_t_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.encoding)
}

// optional uint64 publication_time = 9;
inline bool spider_document_detail::has_publication_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void spider_document_detail::set_has_publication_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void spider_document_detail::clear_has_publication_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void spider_document_detail::clear_publication_time() {
  publication_time_ = GOOGLE_ULONGLONG(0);
  clear_has_publication_time();
}
inline ::google::protobuf::uint64 spider_document_detail::publication_time() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.publication_time)
  return publication_time_;
}
inline void spider_document_detail::set_publication_time(::google::protobuf::uint64 value) {
  set_has_publication_time();
  publication_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.publication_time)
}

// repeated .gogo.storage.extra_info extra_info = 10;
inline int spider_document_detail::extra_info_size() const {
  return extra_info_.size();
}
inline void spider_document_detail::clear_extra_info() {
  extra_info_.Clear();
}
inline const ::gogo::storage::extra_info& spider_document_detail::extra_info(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.extra_info)
  return extra_info_.Get(index);
}
inline ::gogo::storage::extra_info* spider_document_detail::mutable_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.extra_info)
  return extra_info_.Mutable(index);
}
inline ::gogo::storage::extra_info* spider_document_detail::add_extra_info() {
  // @@protoc_insertion_point(field_add:gogo.storage.spider_document_detail.extra_info)
  return extra_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >*
spider_document_detail::mutable_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.spider_document_detail.extra_info)
  return &extra_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >&
spider_document_detail::extra_info() const {
  // @@protoc_insertion_point(field_list:gogo.storage.spider_document_detail.extra_info)
  return extra_info_;
}

// optional bool origin_fetcher = 11 [default = false];
inline bool spider_document_detail::has_origin_fetcher() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void spider_document_detail::set_has_origin_fetcher() {
  _has_bits_[0] |= 0x00004000u;
}
inline void spider_document_detail::clear_has_origin_fetcher() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void spider_document_detail::clear_origin_fetcher() {
  origin_fetcher_ = false;
  clear_has_origin_fetcher();
}
inline bool spider_document_detail::origin_fetcher() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.origin_fetcher)
  return origin_fetcher_;
}
inline void spider_document_detail::set_origin_fetcher(bool value) {
  set_has_origin_fetcher();
  origin_fetcher_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.origin_fetcher)
}

// optional uint32 porno_level = 12;
inline bool spider_document_detail::has_porno_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void spider_document_detail::set_has_porno_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void spider_document_detail::clear_has_porno_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void spider_document_detail::clear_porno_level() {
  porno_level_ = 0u;
  clear_has_porno_level();
}
inline ::google::protobuf::uint32 spider_document_detail::porno_level() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.porno_level)
  return porno_level_;
}
inline void spider_document_detail::set_porno_level(::google::protobuf::uint32 value) {
  set_has_porno_level();
  porno_level_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.porno_level)
}

// optional uint32 spam_level = 13;
inline bool spider_document_detail::has_spam_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void spider_document_detail::set_has_spam_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void spider_document_detail::clear_has_spam_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void spider_document_detail::clear_spam_level() {
  spam_level_ = 0u;
  clear_has_spam_level();
}
inline ::google::protobuf::uint32 spider_document_detail::spam_level() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.spam_level)
  return spam_level_;
}
inline void spider_document_detail::set_spam_level(::google::protobuf::uint32 value) {
  set_has_spam_level();
  spam_level_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.spam_level)
}

// optional .gogo.storage.RegionBlob cuttedBlob = 14;
inline bool spider_document_detail::has_cuttedblob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void spider_document_detail::set_has_cuttedblob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void spider_document_detail::clear_has_cuttedblob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void spider_document_detail::clear_cuttedblob() {
  if (cuttedblob_ != NULL) cuttedblob_->::gogo::storage::RegionBlob::Clear();
  clear_has_cuttedblob();
}
inline const ::gogo::storage::RegionBlob& spider_document_detail::cuttedblob() const {
  const ::gogo::storage::RegionBlob* p = cuttedblob_;
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.cuttedBlob)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::storage::RegionBlob*>(
      &::gogo::storage::_RegionBlob_default_instance_);
}
inline ::gogo::storage::RegionBlob* spider_document_detail::mutable_cuttedblob() {
  set_has_cuttedblob();
  if (cuttedblob_ == NULL) {
    cuttedblob_ = new ::gogo::storage::RegionBlob;
  }
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.cuttedBlob)
  return cuttedblob_;
}
inline ::gogo::storage::RegionBlob* spider_document_detail::release_cuttedblob() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.cuttedBlob)
  clear_has_cuttedblob();
  ::gogo::storage::RegionBlob* temp = cuttedblob_;
  cuttedblob_ = NULL;
  return temp;
}
inline void spider_document_detail::set_allocated_cuttedblob(::gogo::storage::RegionBlob* cuttedblob) {
  delete cuttedblob_;
  cuttedblob_ = cuttedblob;
  if (cuttedblob) {
    set_has_cuttedblob();
  } else {
    clear_has_cuttedblob();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.cuttedBlob)
}

// optional bytes meta_description = 15;
inline bool spider_document_detail::has_meta_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void spider_document_detail::set_has_meta_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void spider_document_detail::clear_has_meta_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void spider_document_detail::clear_meta_description() {
  meta_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meta_description();
}
inline const ::std::string& spider_document_detail::meta_description() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.meta_description)
  return meta_description_.GetNoArena();
}
inline void spider_document_detail::set_meta_description(const ::std::string& value) {
  set_has_meta_description();
  meta_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.meta_description)
}
#if LANG_CXX11
inline void spider_document_detail::set_meta_description(::std::string&& value) {
  set_has_meta_description();
  meta_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.meta_description)
}
#endif
inline void spider_document_detail::set_meta_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meta_description();
  meta_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.meta_description)
}
inline void spider_document_detail::set_meta_description(const void* value, size_t size) {
  set_has_meta_description();
  meta_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.meta_description)
}
inline ::std::string* spider_document_detail::mutable_meta_description() {
  set_has_meta_description();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.meta_description)
  return meta_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* spider_document_detail::release_meta_description() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.meta_description)
  clear_has_meta_description();
  return meta_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void spider_document_detail::set_allocated_meta_description(::std::string* meta_description) {
  if (meta_description != NULL) {
    set_has_meta_description();
  } else {
    clear_has_meta_description();
  }
  meta_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta_description);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.meta_description)
}

// optional bool disabled_stub = 16 [default = false];
inline bool spider_document_detail::has_disabled_stub() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void spider_document_detail::set_has_disabled_stub() {
  _has_bits_[0] |= 0x00008000u;
}
inline void spider_document_detail::clear_has_disabled_stub() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void spider_document_detail::clear_disabled_stub() {
  disabled_stub_ = false;
  clear_has_disabled_stub();
}
inline bool spider_document_detail::disabled_stub() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.disabled_stub)
  return disabled_stub_;
}
inline void spider_document_detail::set_disabled_stub(bool value) {
  set_has_disabled_stub();
  disabled_stub_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.disabled_stub)
}

// repeated string redirects = 17;
inline int spider_document_detail::redirects_size() const {
  return redirects_.size();
}
inline void spider_document_detail::clear_redirects() {
  redirects_.Clear();
}
inline const ::std::string& spider_document_detail::redirects(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.redirects)
  return redirects_.Get(index);
}
inline ::std::string* spider_document_detail::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.redirects)
  return redirects_.Mutable(index);
}
inline void spider_document_detail::set_redirects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.redirects)
  redirects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void spider_document_detail::set_redirects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.redirects)
  redirects_.Mutable(index)->assign(std::move(value));
}
#endif
inline void spider_document_detail::set_redirects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.redirects)
}
inline void spider_document_detail::set_redirects(int index, const char* value, size_t size) {
  redirects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.redirects)
}
inline ::std::string* spider_document_detail::add_redirects() {
  // @@protoc_insertion_point(field_add_mutable:gogo.storage.spider_document_detail.redirects)
  return redirects_.Add();
}
inline void spider_document_detail::add_redirects(const ::std::string& value) {
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.storage.spider_document_detail.redirects)
}
#if LANG_CXX11
inline void spider_document_detail::add_redirects(::std::string&& value) {
  redirects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.storage.spider_document_detail.redirects)
}
#endif
inline void spider_document_detail::add_redirects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.storage.spider_document_detail.redirects)
}
inline void spider_document_detail::add_redirects(const char* value, size_t size) {
  redirects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.storage.spider_document_detail.redirects)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
spider_document_detail::redirects() const {
  // @@protoc_insertion_point(field_list:gogo.storage.spider_document_detail.redirects)
  return redirects_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
spider_document_detail::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.spider_document_detail.redirects)
  return &redirects_;
}

// optional bool reindexing = 18 [default = false];
inline bool spider_document_detail::has_reindexing() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void spider_document_detail::set_has_reindexing() {
  _has_bits_[0] |= 0x00010000u;
}
inline void spider_document_detail::clear_has_reindexing() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void spider_document_detail::clear_reindexing() {
  reindexing_ = false;
  clear_has_reindexing();
}
inline bool spider_document_detail::reindexing() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.reindexing)
  return reindexing_;
}
inline void spider_document_detail::set_reindexing(bool value) {
  set_has_reindexing();
  reindexing_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.reindexing)
}

// optional bytes plainIndex = 19;
inline bool spider_document_detail::has_plainindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void spider_document_detail::set_has_plainindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void spider_document_detail::clear_has_plainindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void spider_document_detail::clear_plainindex() {
  plainindex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plainindex();
}
inline const ::std::string& spider_document_detail::plainindex() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.plainIndex)
  return plainindex_.GetNoArena();
}
inline void spider_document_detail::set_plainindex(const ::std::string& value) {
  set_has_plainindex();
  plainindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.plainIndex)
}
#if LANG_CXX11
inline void spider_document_detail::set_plainindex(::std::string&& value) {
  set_has_plainindex();
  plainindex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.plainIndex)
}
#endif
inline void spider_document_detail::set_plainindex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_plainindex();
  plainindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.plainIndex)
}
inline void spider_document_detail::set_plainindex(const void* value, size_t size) {
  set_has_plainindex();
  plainindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.plainIndex)
}
inline ::std::string* spider_document_detail::mutable_plainindex() {
  set_has_plainindex();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.plainIndex)
  return plainindex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* spider_document_detail::release_plainindex() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.plainIndex)
  clear_has_plainindex();
  return plainindex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void spider_document_detail::set_allocated_plainindex(::std::string* plainindex) {
  if (plainindex != NULL) {
    set_has_plainindex();
  } else {
    clear_has_plainindex();
  }
  plainindex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plainindex);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.plainIndex)
}

// optional bytes titles_vector = 20;
inline bool spider_document_detail::has_titles_vector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void spider_document_detail::set_has_titles_vector() {
  _has_bits_[0] |= 0x00000010u;
}
inline void spider_document_detail::clear_has_titles_vector() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void spider_document_detail::clear_titles_vector() {
  titles_vector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_titles_vector();
}
inline const ::std::string& spider_document_detail::titles_vector() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.titles_vector)
  return titles_vector_.GetNoArena();
}
inline void spider_document_detail::set_titles_vector(const ::std::string& value) {
  set_has_titles_vector();
  titles_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.titles_vector)
}
#if LANG_CXX11
inline void spider_document_detail::set_titles_vector(::std::string&& value) {
  set_has_titles_vector();
  titles_vector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.titles_vector)
}
#endif
inline void spider_document_detail::set_titles_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_titles_vector();
  titles_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.titles_vector)
}
inline void spider_document_detail::set_titles_vector(const void* value, size_t size) {
  set_has_titles_vector();
  titles_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.titles_vector)
}
inline ::std::string* spider_document_detail::mutable_titles_vector() {
  set_has_titles_vector();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.titles_vector)
  return titles_vector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* spider_document_detail::release_titles_vector() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.titles_vector)
  clear_has_titles_vector();
  return titles_vector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void spider_document_detail::set_allocated_titles_vector(::std::string* titles_vector) {
  if (titles_vector != NULL) {
    set_has_titles_vector();
  } else {
    clear_has_titles_vector();
  }
  titles_vector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), titles_vector);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.titles_vector)
}

// optional bool update_video = 21;
inline bool spider_document_detail::has_update_video() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void spider_document_detail::set_has_update_video() {
  _has_bits_[0] |= 0x00020000u;
}
inline void spider_document_detail::clear_has_update_video() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void spider_document_detail::clear_update_video() {
  update_video_ = false;
  clear_has_update_video();
}
inline bool spider_document_detail::update_video() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.update_video)
  return update_video_;
}
inline void spider_document_detail::set_update_video(bool value) {
  set_has_update_video();
  update_video_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.update_video)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace storage
}  // namespace gogo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gogo::storage::extra_info_encoding_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::storage::extra_info_encoding_t>() {
  return ::gogo::storage::extra_info_encoding_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::storage::spider_document_detail_flag_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::storage::spider_document_detail_flag_t>() {
  return ::gogo::storage::spider_document_detail_flag_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::storage::spider_document_detail_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::storage::spider_document_detail_type_t>() {
  return ::gogo::storage::spider_document_detail_type_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::storage::spider_document_detail_language_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::storage::spider_document_detail_language_t>() {
  return ::gogo::storage::spider_document_detail_language_t_descriptor();
}
template <> struct is_proto_enum< ::gogo::storage::spider_document_detail_encoding_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gogo::storage::spider_document_detail_encoding_t>() {
  return ::gogo::storage::spider_document_detail_encoding_t_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_content_5fstorage_2eproto__INCLUDED
