// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: document_enums.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "document_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_document_5fenums_2eproto {


namespace {

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;
namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "document_enums.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024document_enums.proto\022\030ru.mail.go.webba"
      "se.blobs*\337\003\n\010Language\022\020\n\014lang_unknown\020\000\022"
      "\020\n\014lang_russian\020\001\022\021\n\rlang_cyrillic\020\002\022\022\n\016"
      "lang_bolgarian\020\003\022\022\n\016lang_ukrainian\020\004\022\025\n\021"
      "lang_byelorussian\020\005\022\017\n\013lang_kazakh\020\006\022\020\n\014"
      "lang_english\020\007\022\016\n\nlang_error\020\010\022\030\n\024lang_n"
      "ot_enough_info\020\t\022\017\n\013lang_german\020\n\022\017\n\013lan"
      "g_french\020\013\022\020\n\014lang_spanish\020\014\022\020\n\014lang_fin"
      "nish\020\r\022\016\n\nlang_czech\020\016\022\022\n\016lang_hungarian"
      "\020\017\022\020\n\014lang_italian\020\020\022\016\n\nlang_dutch\020\021\022\022\n\016"
      "lang_norwegian\020\022\022\017\n\013lang_polish\020\023\022\023\n\017lan"
      "g_portuguese\020\024\022\021\n\rlang_romanian\020\025\022\020\n\014lan"
      "g_swedish\020\026\022\020\n\014lang_turkish\020\027\022\023\n\017lang_ru"
      "translit\020\030*\373\r\n\010Encoding\022\017\n\013enc_unknown\020\000"
      "\022\r\n\tenc_utf_8\020\001\022\016\n\nenc_cp1251\020\002\022\016\n\nenc_k"
      "oi8_r\020\003\022\020\n\014enc_us_ascii\020\004\022\022\n\016enc_iso_885"
      "9_1\020\005\022\022\n\016enc_iso_8859_2\020\006\022\022\n\016enc_iso_885"
      "9_3\020\007\022\022\n\016enc_iso_8859_4\020\010\022\022\n\016enc_iso_885"
      "9_5\020\t\022\022\n\016enc_iso_8859_7\020\n\022\022\n\016enc_iso_885"
      "9_9\020\013\022\023\n\017enc_iso_8859_10\020\014\022\023\n\017enc_iso_88"
      "59_13\020\r\022\023\n\017enc_iso_8859_14\020\016\022\023\n\017enc_iso_"
      "8859_15\020\017\022\023\n\017enc_iso_8859_16\020\020\022\016\n\nenc_ko"
      "i8_u\020\021\022\016\n\nenc_cp1250\020\022\022\016\n\nenc_cp1252\020\023\022\016"
      "\n\nenc_cp1253\020\024\022\016\n\nenc_cp1254\020\025\022\016\n\nenc_cp"
      "1257\020\026\022\r\n\tenc_cp850\020\027\022\r\n\tenc_cp866\020\030\022\016\n\n"
      "enc_cp1131\020\031\022\020\n\014enc_macroman\020\032\022\030\n\024enc_ma"
      "ccentraleurope\020\033\022\022\n\016enc_maciceland\020\034\022\023\n\017"
      "enc_maccroatian\020\035\022\022\n\016enc_macromania\020\036\022\023\n"
      "\017enc_maccyrillic\020\037\022\022\n\016enc_macukraine\020 \022\020"
      "\n\014enc_macgreek\020!\022\022\n\016enc_macturkish\020\"\022\021\n\r"
      "enc_macintosh\020#\022\022\n\016enc_iso_8859_6\020$\022\022\n\016e"
      "nc_iso_8859_8\020%\022\016\n\nenc_cp1255\020&\022\016\n\nenc_c"
      "p1256\020\'\022\r\n\tenc_cp862\020(\022\021\n\renc_machebrew\020"
      ")\022\021\n\renc_macarabic\020*\022\016\n\nenc_euc_jp\020+\022\021\n\r"
      "enc_shift_jis\020,\022\r\n\tenc_cp932\020-\022\023\n\017enc_is"
      "o_2022_jp\020.\022\025\n\021enc_iso_2022_jp_2\020/\022\025\n\021en"
      "c_iso_2022_jp_1\0200\022\016\n\nenc_euc_cn\0201\022\n\n\006enc"
      "_hz\0202\022\013\n\007enc_gbk\0203\022\r\n\tenc_cp936\0204\022\017\n\013enc"
      "_gb18030\0205\022\016\n\nenc_euc_tw\0206\022\014\n\010enc_big5\0207"
      "\022\r\n\tenc_cp950\0208\022\022\n\016enc_big5_hkscs\0209\022\023\n\017e"
      "nc_iso_2022_cn\020:\022\027\n\023enc_iso_2022_cn_ext\020"
      ";\022\016\n\nenc_euc_kr\020<\022\r\n\tenc_cp949\020=\022\023\n\017enc_"
      "iso_2022_kr\020>\022\r\n\tenc_johab\020\?\022\021\n\renc_arms"
      "cii_8\020@\022\030\n\024enc_georgian_academy\020A\022\023\n\017enc"
      "_georgian_ps\020B\022\016\n\nenc_koi8_t\020C\022\r\n\tenc_pt"
      "154\020D\022\016\n\nenc_rk1048\020E\022\023\n\017enc_iso_8859_11"
      "\020F\022\017\n\013enc_tis_620\020G\022\r\n\tenc_cp874\020H\022\017\n\013en"
      "c_macthai\020I\022\021\n\renc_mulelao_1\020J\022\016\n\nenc_cp"
      "1133\020K\022\016\n\nenc_viscii\020L\022\014\n\010enc_tcvn\020M\022\016\n\n"
      "enc_cp1258\020N\022\021\n\renc_hp_roman8\020O\022\020\n\014enc_n"
      "extstep\020P\022\r\n\tenc_ucs_2\020Q\022\017\n\013enc_ucs_2be\020"
      "R\022\017\n\013enc_ucs_2le\020S\022\r\n\tenc_ucs_4\020T\022\017\n\013enc"
      "_ucs_4be\020U\022\017\n\013enc_ucs_4le\020V\022\016\n\nenc_utf_1"
      "6\020W\022\020\n\014enc_utf_16be\020X\022\020\n\014enc_utf_16le\020Y\022"
      "\016\n\nenc_utf_32\020Z\022\020\n\014enc_utf_32be\020[\022\020\n\014enc"
      "_utf_32le\020\\\022\r\n\tenc_utf_7\020]\022\013\n\007enc_c99\020^\022"
      "\014\n\010enc_java\020_\022\026\n\022enc_ucs_2_internal\020`\022\026\n"
      "\022enc_ucs_4_internal\020a\022\021\n\renc_undefined\020c"
      "*\325\002\n\013ContentType\022\020\n\014type_unknown\020\000\022\r\n\tty"
      "pe_html\020\001\022\r\n\ttype_jpeg\020\002\022\014\n\010type_gif\020\003\022\014"
      "\n\010type_png\020\004\022\014\n\010type_pdf\020\005\022\014\n\010type_doc\020\006"
      "\022\r\n\ttype_docx\020\007\022\014\n\010type_rtf\020\010\022\014\n\010type_pp"
      "t\020\t\022\r\n\ttype_pptx\020\n\022\014\n\010type_xls\020\013\022\r\n\ttype"
      "_xlsx\020\014\022\014\n\010type_txt\020\r\022\014\n\010type_xml\020\016\022\013\n\007t"
      "ype_ps\020\017\022\014\n\010type_wml\020\020\022\r\n\ttype_atom\020\021\022\020\n"
      "\014type_sitemap\020\022\022\014\n\010type_rss\020\023\022\r\n\ttype_js"
      "on\020\024\022\022\n\016type_riff_webp\020\025*\\\n\nMetaRobots\022\r"
      "\n\tr_unknown\020\000\022\016\n\nr_nofollow\020\001\022\r\n\tr_noind"
      "ex\020\002\022\017\n\013r_noarchive\020\004\022\017\n\013r_nosnippet\020\010*9"
      "\n\tForumType\022\013\n\007unknown\020\000\022\t\n\005topic\020\001\022\t\n\005b"
      "oard\020\002\022\t\n\005other\020\003*;\n\013RobotsState\022\017\n\013not_"
      "checked\020\000\022\013\n\007allowed\020\001\022\016\n\ndisallowed\020\002*1"
      "\n\nSourceMark\022\007\n\003FBL\020\000\022\010\n\004STUB\020\001\022\007\n\003RBT\020\002"
      "\022\007\n\003CHR\020\003*-\n\nRenderType\022\n\n\006R_NONE\020\000\022\023\n\017R"
      "_SIMPLE_CHROME\020\001B\nB\010DocEnums"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2988);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "document_enums.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_document_5fenums_2eproto

const ::google::protobuf::EnumDescriptor* Language_descriptor() {
  protobuf_document_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fenums_2eproto::file_level_enum_descriptors[0];
}
bool Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Encoding_descriptor() {
  protobuf_document_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fenums_2eproto::file_level_enum_descriptors[1];
}
bool Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContentType_descriptor() {
  protobuf_document_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fenums_2eproto::file_level_enum_descriptors[2];
}
bool ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MetaRobots_descriptor() {
  protobuf_document_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fenums_2eproto::file_level_enum_descriptors[3];
}
bool MetaRobots_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ForumType_descriptor() {
  protobuf_document_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fenums_2eproto::file_level_enum_descriptors[4];
}
bool ForumType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RobotsState_descriptor() {
  protobuf_document_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fenums_2eproto::file_level_enum_descriptors[5];
}
bool RobotsState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SourceMark_descriptor() {
  protobuf_document_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fenums_2eproto::file_level_enum_descriptors[6];
}
bool SourceMark_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RenderType_descriptor() {
  protobuf_document_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fenums_2eproto::file_level_enum_descriptors[7];
}
bool RenderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
