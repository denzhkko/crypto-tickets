// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzen_articles.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dzen_articles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class DzenArticlesImportDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DzenArticlesImportDoc>
     _instance;
} _DzenArticlesImportDoc_default_instance_;

namespace protobuf_dzen_5farticles_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, mongoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, longurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, mainimageurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, publisherid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, publishername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, publisherdesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, publishersubscribers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, publicationtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, viewscnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, likescnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, dislikescnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, commentscnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, certaingrade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, itemtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, existinrecosnapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, fulldumpdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, crclicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DzenArticlesImportDoc, crimps_),
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  12,
  6,
  7,
  13,
  14,
  15,
  16,
  17,
  18,
  8,
  9,
  19,
  21,
  20,
  10,
  22,
  23,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(DzenArticlesImportDoc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DzenArticlesImportDoc_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dzen_articles.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DzenArticlesImportDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DzenArticlesImportDoc_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023dzen_articles.proto\"\357\003\n\025DzenArticlesIm"
      "portDoc\022\n\n\002id\030\001 \001(\022\022\017\n\007mongoId\030\002 \001(\t\022\013\n\003"
      "url\030\003 \001(\t\022\017\n\007longUrl\030\004 \001(\t\022\024\n\014mainImageU"
      "rl\030\005 \001(\t\022\r\n\005title\030\006 \001(\t\022\017\n\007content\030\007 \001(\t"
      "\022\023\n\013publisherId\030\010 \001(\022\022\025\n\rpublisherName\030\t"
      " \001(\t\022\025\n\rpublisherDesc\030\n \001(\t\022\034\n\024publisher"
      "Subscribers\030\013 \001(\r\022\027\n\017publicationTime\030\014 \001"
      "(\r\022\020\n\010viewsCnt\030\r \001(\r\022\020\n\010likesCnt\030\016 \001(\r\022\023"
      "\n\013dislikesCnt\030\017 \001(\r\022\023\n\013commentsCnt\030\020 \001(\r"
      "\022\024\n\014certainGrade\030\021 \001(\t\022\020\n\010itemType\030\022 \001(\t"
      "\022\033\n\023existInRecoSnapshot\030\023 \001(\010\022\016\n\006shares\030"
      "\025 \001(\r\022\020\n\010verified\030\026 \001(\010\022\024\n\014fulldumpDate\030"
      "\024 \001(\t\022\020\n\010crClicks\030\027 \001(\r\022\016\n\006crImps\030\030 \001(\rB"
      "5\n ru.mail.go.webbase.dzen.articlesB\021Dze"
      "nArticlesProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 574);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dzen_articles.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dzen_5farticles_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DzenArticlesImportDoc::kIdFieldNumber;
const int DzenArticlesImportDoc::kMongoIdFieldNumber;
const int DzenArticlesImportDoc::kUrlFieldNumber;
const int DzenArticlesImportDoc::kLongUrlFieldNumber;
const int DzenArticlesImportDoc::kMainImageUrlFieldNumber;
const int DzenArticlesImportDoc::kTitleFieldNumber;
const int DzenArticlesImportDoc::kContentFieldNumber;
const int DzenArticlesImportDoc::kPublisherIdFieldNumber;
const int DzenArticlesImportDoc::kPublisherNameFieldNumber;
const int DzenArticlesImportDoc::kPublisherDescFieldNumber;
const int DzenArticlesImportDoc::kPublisherSubscribersFieldNumber;
const int DzenArticlesImportDoc::kPublicationTimeFieldNumber;
const int DzenArticlesImportDoc::kViewsCntFieldNumber;
const int DzenArticlesImportDoc::kLikesCntFieldNumber;
const int DzenArticlesImportDoc::kDislikesCntFieldNumber;
const int DzenArticlesImportDoc::kCommentsCntFieldNumber;
const int DzenArticlesImportDoc::kCertainGradeFieldNumber;
const int DzenArticlesImportDoc::kItemTypeFieldNumber;
const int DzenArticlesImportDoc::kExistInRecoSnapshotFieldNumber;
const int DzenArticlesImportDoc::kSharesFieldNumber;
const int DzenArticlesImportDoc::kVerifiedFieldNumber;
const int DzenArticlesImportDoc::kFulldumpDateFieldNumber;
const int DzenArticlesImportDoc::kCrClicksFieldNumber;
const int DzenArticlesImportDoc::kCrImpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DzenArticlesImportDoc::DzenArticlesImportDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dzen_5farticles_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DzenArticlesImportDoc)
}
DzenArticlesImportDoc::DzenArticlesImportDoc(const DzenArticlesImportDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mongoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mongoid()) {
    mongoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongoid_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  longurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_longurl()) {
    longurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.longurl_);
  }
  mainimageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mainimageurl()) {
    mainimageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainimageurl_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  publishername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_publishername()) {
    publishername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publishername_);
  }
  publisherdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_publisherdesc()) {
    publisherdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisherdesc_);
  }
  certaingrade_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_certaingrade()) {
    certaingrade_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certaingrade_);
  }
  itemtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_itemtype()) {
    itemtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemtype_);
  }
  fulldumpdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fulldumpdate()) {
    fulldumpdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fulldumpdate_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&crimps_) -
    reinterpret_cast<char*>(&id_)) + sizeof(crimps_));
  // @@protoc_insertion_point(copy_constructor:DzenArticlesImportDoc)
}

void DzenArticlesImportDoc::SharedCtor() {
  _cached_size_ = 0;
  mongoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainimageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publishername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisherdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certaingrade_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fulldumpdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crimps_) -
      reinterpret_cast<char*>(&id_)) + sizeof(crimps_));
}

DzenArticlesImportDoc::~DzenArticlesImportDoc() {
  // @@protoc_insertion_point(destructor:DzenArticlesImportDoc)
  SharedDtor();
}

void DzenArticlesImportDoc::SharedDtor() {
  mongoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainimageurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publishername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisherdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certaingrade_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fulldumpdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DzenArticlesImportDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DzenArticlesImportDoc::descriptor() {
  protobuf_dzen_5farticles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dzen_5farticles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DzenArticlesImportDoc& DzenArticlesImportDoc::default_instance() {
  protobuf_dzen_5farticles_2eproto::InitDefaults();
  return *internal_default_instance();
}

DzenArticlesImportDoc* DzenArticlesImportDoc::New(::google::protobuf::Arena* arena) const {
  DzenArticlesImportDoc* n = new DzenArticlesImportDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DzenArticlesImportDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:DzenArticlesImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!mongoid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mongoid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!longurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*longurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!mainimageurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mainimageurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!publishername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*publishername_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!publisherdesc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*publisherdesc_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!certaingrade_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*certaingrade_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!itemtype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*itemtype_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!fulldumpdate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fulldumpdate_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 63488u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewscnt_) -
        reinterpret_cast<char*>(&id_)) + sizeof(viewscnt_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&likescnt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crimps_) -
        reinterpret_cast<char*>(&likescnt_)) + sizeof(crimps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DzenArticlesImportDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DzenArticlesImportDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mongoId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mongoid().data(), static_cast<int>(this->mongoid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.mongoId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string longUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->longurl().data(), static_cast<int>(this->longurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.longUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mainImageUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainimageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mainimageurl().data(), static_cast<int>(this->mainimageurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.mainImageUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 publisherId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_publisherid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &publisherid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string publisherName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publishername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publishername().data(), static_cast<int>(this->publishername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.publisherName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string publisherDesc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisherdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publisherdesc().data(), static_cast<int>(this->publisherdesc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.publisherDesc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 publisherSubscribers = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_publishersubscribers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publishersubscribers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 publicationTime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_publicationtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publicationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 viewsCnt = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_viewscnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewscnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 likesCnt = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_likescnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likescnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dislikesCnt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_dislikescnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dislikescnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 commentsCnt = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_commentscnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commentscnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string certainGrade = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certaingrade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->certaingrade().data(), static_cast<int>(this->certaingrade().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.certainGrade");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string itemType = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemtype().data(), static_cast<int>(this->itemtype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.itemType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool existInRecoSnapshot = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_existinrecosnapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &existinrecosnapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fulldumpDate = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fulldumpdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fulldumpdate().data(), static_cast<int>(this->fulldumpdate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DzenArticlesImportDoc.fulldumpDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shares = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool verified = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crClicks = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_crclicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crclicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crImps = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_crimps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crimps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DzenArticlesImportDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DzenArticlesImportDoc)
  return false;
#undef DO_
}

void DzenArticlesImportDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DzenArticlesImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 id = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->id(), output);
  }

  // optional string mongoId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mongoid().data(), static_cast<int>(this->mongoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.mongoId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mongoid(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional string longUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longurl().data(), static_cast<int>(this->longurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.longUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->longurl(), output);
  }

  // optional string mainImageUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mainimageurl().data(), static_cast<int>(this->mainimageurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.mainImageUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mainimageurl(), output);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->title(), output);
  }

  // optional string content = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->content(), output);
  }

  // optional sint64 publisherId = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->publisherid(), output);
  }

  // optional string publisherName = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publishername().data(), static_cast<int>(this->publishername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.publisherName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->publishername(), output);
  }

  // optional string publisherDesc = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisherdesc().data(), static_cast<int>(this->publisherdesc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.publisherDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->publisherdesc(), output);
  }

  // optional uint32 publisherSubscribers = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->publishersubscribers(), output);
  }

  // optional uint32 publicationTime = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->publicationtime(), output);
  }

  // optional uint32 viewsCnt = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->viewscnt(), output);
  }

  // optional uint32 likesCnt = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->likescnt(), output);
  }

  // optional uint32 dislikesCnt = 15;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dislikescnt(), output);
  }

  // optional uint32 commentsCnt = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->commentscnt(), output);
  }

  // optional string certainGrade = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certaingrade().data(), static_cast<int>(this->certaingrade().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.certainGrade");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->certaingrade(), output);
  }

  // optional string itemType = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemtype().data(), static_cast<int>(this->itemtype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.itemType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->itemtype(), output);
  }

  // optional bool existInRecoSnapshot = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->existinrecosnapshot(), output);
  }

  // optional string fulldumpDate = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fulldumpdate().data(), static_cast<int>(this->fulldumpdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.fulldumpDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->fulldumpdate(), output);
  }

  // optional uint32 shares = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->shares(), output);
  }

  // optional bool verified = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->verified(), output);
  }

  // optional uint32 crClicks = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->crclicks(), output);
  }

  // optional uint32 crImps = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->crimps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DzenArticlesImportDoc)
}

::google::protobuf::uint8* DzenArticlesImportDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DzenArticlesImportDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 id = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->id(), target);
  }

  // optional string mongoId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mongoid().data(), static_cast<int>(this->mongoid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.mongoId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mongoid(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string longUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longurl().data(), static_cast<int>(this->longurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.longUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->longurl(), target);
  }

  // optional string mainImageUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mainimageurl().data(), static_cast<int>(this->mainimageurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.mainImageUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mainimageurl(), target);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // optional string content = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional sint64 publisherId = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->publisherid(), target);
  }

  // optional string publisherName = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publishername().data(), static_cast<int>(this->publishername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.publisherName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->publishername(), target);
  }

  // optional string publisherDesc = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisherdesc().data(), static_cast<int>(this->publisherdesc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.publisherDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->publisherdesc(), target);
  }

  // optional uint32 publisherSubscribers = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->publishersubscribers(), target);
  }

  // optional uint32 publicationTime = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->publicationtime(), target);
  }

  // optional uint32 viewsCnt = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->viewscnt(), target);
  }

  // optional uint32 likesCnt = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->likescnt(), target);
  }

  // optional uint32 dislikesCnt = 15;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dislikescnt(), target);
  }

  // optional uint32 commentsCnt = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->commentscnt(), target);
  }

  // optional string certainGrade = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certaingrade().data(), static_cast<int>(this->certaingrade().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.certainGrade");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->certaingrade(), target);
  }

  // optional string itemType = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemtype().data(), static_cast<int>(this->itemtype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.itemType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->itemtype(), target);
  }

  // optional bool existInRecoSnapshot = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->existinrecosnapshot(), target);
  }

  // optional string fulldumpDate = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fulldumpdate().data(), static_cast<int>(this->fulldumpdate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DzenArticlesImportDoc.fulldumpDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fulldumpdate(), target);
  }

  // optional uint32 shares = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->shares(), target);
  }

  // optional bool verified = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->verified(), target);
  }

  // optional uint32 crClicks = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->crclicks(), target);
  }

  // optional uint32 crImps = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->crimps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DzenArticlesImportDoc)
  return target;
}

size_t DzenArticlesImportDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DzenArticlesImportDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string mongoId = 2;
    if (has_mongoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mongoid());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string longUrl = 4;
    if (has_longurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longurl());
    }

    // optional string mainImageUrl = 5;
    if (has_mainimageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainimageurl());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string publisherName = 9;
    if (has_publishername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publishername());
    }

    // optional string publisherDesc = 10;
    if (has_publisherdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisherdesc());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string certainGrade = 17;
    if (has_certaingrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->certaingrade());
    }

    // optional string itemType = 18;
    if (has_itemtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemtype());
    }

    // optional string fulldumpDate = 20;
    if (has_fulldumpdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fulldumpdate());
    }

    // optional sint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }

    // optional sint64 publisherId = 8;
    if (has_publisherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->publisherid());
    }

    // optional uint32 publisherSubscribers = 11;
    if (has_publishersubscribers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publishersubscribers());
    }

    // optional uint32 publicationTime = 12;
    if (has_publicationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publicationtime());
    }

    // optional uint32 viewsCnt = 13;
    if (has_viewscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewscnt());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 likesCnt = 14;
    if (has_likescnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likescnt());
    }

    // optional uint32 dislikesCnt = 15;
    if (has_dislikescnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dislikescnt());
    }

    // optional uint32 commentsCnt = 16;
    if (has_commentscnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commentscnt());
    }

    // optional bool existInRecoSnapshot = 19;
    if (has_existinrecosnapshot()) {
      total_size += 2 + 1;
    }

    // optional bool verified = 22;
    if (has_verified()) {
      total_size += 2 + 1;
    }

    // optional uint32 shares = 21;
    if (has_shares()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shares());
    }

    // optional uint32 crClicks = 23;
    if (has_crclicks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crclicks());
    }

    // optional uint32 crImps = 24;
    if (has_crimps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crimps());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DzenArticlesImportDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DzenArticlesImportDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const DzenArticlesImportDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DzenArticlesImportDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DzenArticlesImportDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DzenArticlesImportDoc)
    MergeFrom(*source);
  }
}

void DzenArticlesImportDoc::MergeFrom(const DzenArticlesImportDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DzenArticlesImportDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mongoid();
      mongoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mongoid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_longurl();
      longurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.longurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_mainimageurl();
      mainimageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainimageurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_publishername();
      publishername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publishername_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_publisherdesc();
      publisherdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisherdesc_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_certaingrade();
      certaingrade_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certaingrade_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_itemtype();
      itemtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemtype_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_fulldumpdate();
      fulldumpdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fulldumpdate_);
    }
    if (cached_has_bits & 0x00000800u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00001000u) {
      publisherid_ = from.publisherid_;
    }
    if (cached_has_bits & 0x00002000u) {
      publishersubscribers_ = from.publishersubscribers_;
    }
    if (cached_has_bits & 0x00004000u) {
      publicationtime_ = from.publicationtime_;
    }
    if (cached_has_bits & 0x00008000u) {
      viewscnt_ = from.viewscnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      likescnt_ = from.likescnt_;
    }
    if (cached_has_bits & 0x00020000u) {
      dislikescnt_ = from.dislikescnt_;
    }
    if (cached_has_bits & 0x00040000u) {
      commentscnt_ = from.commentscnt_;
    }
    if (cached_has_bits & 0x00080000u) {
      existinrecosnapshot_ = from.existinrecosnapshot_;
    }
    if (cached_has_bits & 0x00100000u) {
      verified_ = from.verified_;
    }
    if (cached_has_bits & 0x00200000u) {
      shares_ = from.shares_;
    }
    if (cached_has_bits & 0x00400000u) {
      crclicks_ = from.crclicks_;
    }
    if (cached_has_bits & 0x00800000u) {
      crimps_ = from.crimps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DzenArticlesImportDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DzenArticlesImportDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DzenArticlesImportDoc::CopyFrom(const DzenArticlesImportDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DzenArticlesImportDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DzenArticlesImportDoc::IsInitialized() const {
  return true;
}

void DzenArticlesImportDoc::Swap(DzenArticlesImportDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DzenArticlesImportDoc::InternalSwap(DzenArticlesImportDoc* other) {
  using std::swap;
  mongoid_.Swap(&other->mongoid_);
  url_.Swap(&other->url_);
  longurl_.Swap(&other->longurl_);
  mainimageurl_.Swap(&other->mainimageurl_);
  title_.Swap(&other->title_);
  content_.Swap(&other->content_);
  publishername_.Swap(&other->publishername_);
  publisherdesc_.Swap(&other->publisherdesc_);
  certaingrade_.Swap(&other->certaingrade_);
  itemtype_.Swap(&other->itemtype_);
  fulldumpdate_.Swap(&other->fulldumpdate_);
  swap(id_, other->id_);
  swap(publisherid_, other->publisherid_);
  swap(publishersubscribers_, other->publishersubscribers_);
  swap(publicationtime_, other->publicationtime_);
  swap(viewscnt_, other->viewscnt_);
  swap(likescnt_, other->likescnt_);
  swap(dislikescnt_, other->dislikescnt_);
  swap(commentscnt_, other->commentscnt_);
  swap(existinrecosnapshot_, other->existinrecosnapshot_);
  swap(verified_, other->verified_);
  swap(shares_, other->shares_);
  swap(crclicks_, other->crclicks_);
  swap(crimps_, other->crimps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DzenArticlesImportDoc::GetMetadata() const {
  protobuf_dzen_5farticles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dzen_5farticles_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DzenArticlesImportDoc

// optional sint64 id = 1;
bool DzenArticlesImportDoc::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DzenArticlesImportDoc::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
void DzenArticlesImportDoc::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void DzenArticlesImportDoc::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 DzenArticlesImportDoc::id() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.id)
  return id_;
}
void DzenArticlesImportDoc::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.id)
}

// optional string mongoId = 2;
bool DzenArticlesImportDoc::has_mongoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DzenArticlesImportDoc::set_has_mongoid() {
  _has_bits_[0] |= 0x00000001u;
}
void DzenArticlesImportDoc::clear_has_mongoid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DzenArticlesImportDoc::clear_mongoid() {
  mongoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mongoid();
}
const ::std::string& DzenArticlesImportDoc::mongoid() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.mongoId)
  return mongoid_.GetNoArena();
}
void DzenArticlesImportDoc::set_mongoid(const ::std::string& value) {
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.mongoId)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_mongoid(::std::string&& value) {
  set_has_mongoid();
  mongoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.mongoId)
}
#endif
void DzenArticlesImportDoc::set_mongoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.mongoId)
}
void DzenArticlesImportDoc::set_mongoid(const char* value, size_t size) {
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.mongoId)
}
::std::string* DzenArticlesImportDoc::mutable_mongoid() {
  set_has_mongoid();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.mongoId)
  return mongoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_mongoid() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.mongoId)
  clear_has_mongoid();
  return mongoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_mongoid(::std::string* mongoid) {
  if (mongoid != NULL) {
    set_has_mongoid();
  } else {
    clear_has_mongoid();
  }
  mongoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongoid);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.mongoId)
}

// optional string url = 3;
bool DzenArticlesImportDoc::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DzenArticlesImportDoc::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void DzenArticlesImportDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void DzenArticlesImportDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DzenArticlesImportDoc::url() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.url)
  return url_.GetNoArena();
}
void DzenArticlesImportDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.url)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.url)
}
#endif
void DzenArticlesImportDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.url)
}
void DzenArticlesImportDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.url)
}
::std::string* DzenArticlesImportDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_url() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.url)
}

// optional string longUrl = 4;
bool DzenArticlesImportDoc::has_longurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DzenArticlesImportDoc::set_has_longurl() {
  _has_bits_[0] |= 0x00000004u;
}
void DzenArticlesImportDoc::clear_has_longurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void DzenArticlesImportDoc::clear_longurl() {
  longurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_longurl();
}
const ::std::string& DzenArticlesImportDoc::longurl() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.longUrl)
  return longurl_.GetNoArena();
}
void DzenArticlesImportDoc::set_longurl(const ::std::string& value) {
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.longUrl)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_longurl(::std::string&& value) {
  set_has_longurl();
  longurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.longUrl)
}
#endif
void DzenArticlesImportDoc::set_longurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.longUrl)
}
void DzenArticlesImportDoc::set_longurl(const char* value, size_t size) {
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.longUrl)
}
::std::string* DzenArticlesImportDoc::mutable_longurl() {
  set_has_longurl();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.longUrl)
  return longurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_longurl() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.longUrl)
  clear_has_longurl();
  return longurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_longurl(::std::string* longurl) {
  if (longurl != NULL) {
    set_has_longurl();
  } else {
    clear_has_longurl();
  }
  longurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), longurl);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.longUrl)
}

// optional string mainImageUrl = 5;
bool DzenArticlesImportDoc::has_mainimageurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DzenArticlesImportDoc::set_has_mainimageurl() {
  _has_bits_[0] |= 0x00000008u;
}
void DzenArticlesImportDoc::clear_has_mainimageurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void DzenArticlesImportDoc::clear_mainimageurl() {
  mainimageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mainimageurl();
}
const ::std::string& DzenArticlesImportDoc::mainimageurl() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.mainImageUrl)
  return mainimageurl_.GetNoArena();
}
void DzenArticlesImportDoc::set_mainimageurl(const ::std::string& value) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.mainImageUrl)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_mainimageurl(::std::string&& value) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.mainImageUrl)
}
#endif
void DzenArticlesImportDoc::set_mainimageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.mainImageUrl)
}
void DzenArticlesImportDoc::set_mainimageurl(const char* value, size_t size) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.mainImageUrl)
}
::std::string* DzenArticlesImportDoc::mutable_mainimageurl() {
  set_has_mainimageurl();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.mainImageUrl)
  return mainimageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_mainimageurl() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.mainImageUrl)
  clear_has_mainimageurl();
  return mainimageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_mainimageurl(::std::string* mainimageurl) {
  if (mainimageurl != NULL) {
    set_has_mainimageurl();
  } else {
    clear_has_mainimageurl();
  }
  mainimageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainimageurl);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.mainImageUrl)
}

// optional string title = 6;
bool DzenArticlesImportDoc::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DzenArticlesImportDoc::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
void DzenArticlesImportDoc::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
void DzenArticlesImportDoc::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& DzenArticlesImportDoc::title() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.title)
  return title_.GetNoArena();
}
void DzenArticlesImportDoc::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.title)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.title)
}
#endif
void DzenArticlesImportDoc::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.title)
}
void DzenArticlesImportDoc::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.title)
}
::std::string* DzenArticlesImportDoc::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_title() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.title)
}

// optional string content = 7;
bool DzenArticlesImportDoc::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DzenArticlesImportDoc::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
void DzenArticlesImportDoc::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
void DzenArticlesImportDoc::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& DzenArticlesImportDoc::content() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.content)
  return content_.GetNoArena();
}
void DzenArticlesImportDoc::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.content)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.content)
}
#endif
void DzenArticlesImportDoc::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.content)
}
void DzenArticlesImportDoc::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.content)
}
::std::string* DzenArticlesImportDoc::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_content() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.content)
}

// optional sint64 publisherId = 8;
bool DzenArticlesImportDoc::has_publisherid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DzenArticlesImportDoc::set_has_publisherid() {
  _has_bits_[0] |= 0x00001000u;
}
void DzenArticlesImportDoc::clear_has_publisherid() {
  _has_bits_[0] &= ~0x00001000u;
}
void DzenArticlesImportDoc::clear_publisherid() {
  publisherid_ = GOOGLE_LONGLONG(0);
  clear_has_publisherid();
}
::google::protobuf::int64 DzenArticlesImportDoc::publisherid() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publisherId)
  return publisherid_;
}
void DzenArticlesImportDoc::set_publisherid(::google::protobuf::int64 value) {
  set_has_publisherid();
  publisherid_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publisherId)
}

// optional string publisherName = 9;
bool DzenArticlesImportDoc::has_publishername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DzenArticlesImportDoc::set_has_publishername() {
  _has_bits_[0] |= 0x00000040u;
}
void DzenArticlesImportDoc::clear_has_publishername() {
  _has_bits_[0] &= ~0x00000040u;
}
void DzenArticlesImportDoc::clear_publishername() {
  publishername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publishername();
}
const ::std::string& DzenArticlesImportDoc::publishername() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publisherName)
  return publishername_.GetNoArena();
}
void DzenArticlesImportDoc::set_publishername(const ::std::string& value) {
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publisherName)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_publishername(::std::string&& value) {
  set_has_publishername();
  publishername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.publisherName)
}
#endif
void DzenArticlesImportDoc::set_publishername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.publisherName)
}
void DzenArticlesImportDoc::set_publishername(const char* value, size_t size) {
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.publisherName)
}
::std::string* DzenArticlesImportDoc::mutable_publishername() {
  set_has_publishername();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.publisherName)
  return publishername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_publishername() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.publisherName)
  clear_has_publishername();
  return publishername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_publishername(::std::string* publishername) {
  if (publishername != NULL) {
    set_has_publishername();
  } else {
    clear_has_publishername();
  }
  publishername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publishername);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.publisherName)
}

// optional string publisherDesc = 10;
bool DzenArticlesImportDoc::has_publisherdesc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DzenArticlesImportDoc::set_has_publisherdesc() {
  _has_bits_[0] |= 0x00000080u;
}
void DzenArticlesImportDoc::clear_has_publisherdesc() {
  _has_bits_[0] &= ~0x00000080u;
}
void DzenArticlesImportDoc::clear_publisherdesc() {
  publisherdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisherdesc();
}
const ::std::string& DzenArticlesImportDoc::publisherdesc() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publisherDesc)
  return publisherdesc_.GetNoArena();
}
void DzenArticlesImportDoc::set_publisherdesc(const ::std::string& value) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publisherDesc)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_publisherdesc(::std::string&& value) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.publisherDesc)
}
#endif
void DzenArticlesImportDoc::set_publisherdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.publisherDesc)
}
void DzenArticlesImportDoc::set_publisherdesc(const char* value, size_t size) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.publisherDesc)
}
::std::string* DzenArticlesImportDoc::mutable_publisherdesc() {
  set_has_publisherdesc();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.publisherDesc)
  return publisherdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_publisherdesc() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.publisherDesc)
  clear_has_publisherdesc();
  return publisherdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_publisherdesc(::std::string* publisherdesc) {
  if (publisherdesc != NULL) {
    set_has_publisherdesc();
  } else {
    clear_has_publisherdesc();
  }
  publisherdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisherdesc);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.publisherDesc)
}

// optional uint32 publisherSubscribers = 11;
bool DzenArticlesImportDoc::has_publishersubscribers() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DzenArticlesImportDoc::set_has_publishersubscribers() {
  _has_bits_[0] |= 0x00002000u;
}
void DzenArticlesImportDoc::clear_has_publishersubscribers() {
  _has_bits_[0] &= ~0x00002000u;
}
void DzenArticlesImportDoc::clear_publishersubscribers() {
  publishersubscribers_ = 0u;
  clear_has_publishersubscribers();
}
::google::protobuf::uint32 DzenArticlesImportDoc::publishersubscribers() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publisherSubscribers)
  return publishersubscribers_;
}
void DzenArticlesImportDoc::set_publishersubscribers(::google::protobuf::uint32 value) {
  set_has_publishersubscribers();
  publishersubscribers_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publisherSubscribers)
}

// optional uint32 publicationTime = 12;
bool DzenArticlesImportDoc::has_publicationtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DzenArticlesImportDoc::set_has_publicationtime() {
  _has_bits_[0] |= 0x00004000u;
}
void DzenArticlesImportDoc::clear_has_publicationtime() {
  _has_bits_[0] &= ~0x00004000u;
}
void DzenArticlesImportDoc::clear_publicationtime() {
  publicationtime_ = 0u;
  clear_has_publicationtime();
}
::google::protobuf::uint32 DzenArticlesImportDoc::publicationtime() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publicationTime)
  return publicationtime_;
}
void DzenArticlesImportDoc::set_publicationtime(::google::protobuf::uint32 value) {
  set_has_publicationtime();
  publicationtime_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publicationTime)
}

// optional uint32 viewsCnt = 13;
bool DzenArticlesImportDoc::has_viewscnt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DzenArticlesImportDoc::set_has_viewscnt() {
  _has_bits_[0] |= 0x00008000u;
}
void DzenArticlesImportDoc::clear_has_viewscnt() {
  _has_bits_[0] &= ~0x00008000u;
}
void DzenArticlesImportDoc::clear_viewscnt() {
  viewscnt_ = 0u;
  clear_has_viewscnt();
}
::google::protobuf::uint32 DzenArticlesImportDoc::viewscnt() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.viewsCnt)
  return viewscnt_;
}
void DzenArticlesImportDoc::set_viewscnt(::google::protobuf::uint32 value) {
  set_has_viewscnt();
  viewscnt_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.viewsCnt)
}

// optional uint32 likesCnt = 14;
bool DzenArticlesImportDoc::has_likescnt() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DzenArticlesImportDoc::set_has_likescnt() {
  _has_bits_[0] |= 0x00010000u;
}
void DzenArticlesImportDoc::clear_has_likescnt() {
  _has_bits_[0] &= ~0x00010000u;
}
void DzenArticlesImportDoc::clear_likescnt() {
  likescnt_ = 0u;
  clear_has_likescnt();
}
::google::protobuf::uint32 DzenArticlesImportDoc::likescnt() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.likesCnt)
  return likescnt_;
}
void DzenArticlesImportDoc::set_likescnt(::google::protobuf::uint32 value) {
  set_has_likescnt();
  likescnt_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.likesCnt)
}

// optional uint32 dislikesCnt = 15;
bool DzenArticlesImportDoc::has_dislikescnt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DzenArticlesImportDoc::set_has_dislikescnt() {
  _has_bits_[0] |= 0x00020000u;
}
void DzenArticlesImportDoc::clear_has_dislikescnt() {
  _has_bits_[0] &= ~0x00020000u;
}
void DzenArticlesImportDoc::clear_dislikescnt() {
  dislikescnt_ = 0u;
  clear_has_dislikescnt();
}
::google::protobuf::uint32 DzenArticlesImportDoc::dislikescnt() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.dislikesCnt)
  return dislikescnt_;
}
void DzenArticlesImportDoc::set_dislikescnt(::google::protobuf::uint32 value) {
  set_has_dislikescnt();
  dislikescnt_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.dislikesCnt)
}

// optional uint32 commentsCnt = 16;
bool DzenArticlesImportDoc::has_commentscnt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DzenArticlesImportDoc::set_has_commentscnt() {
  _has_bits_[0] |= 0x00040000u;
}
void DzenArticlesImportDoc::clear_has_commentscnt() {
  _has_bits_[0] &= ~0x00040000u;
}
void DzenArticlesImportDoc::clear_commentscnt() {
  commentscnt_ = 0u;
  clear_has_commentscnt();
}
::google::protobuf::uint32 DzenArticlesImportDoc::commentscnt() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.commentsCnt)
  return commentscnt_;
}
void DzenArticlesImportDoc::set_commentscnt(::google::protobuf::uint32 value) {
  set_has_commentscnt();
  commentscnt_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.commentsCnt)
}

// optional string certainGrade = 17;
bool DzenArticlesImportDoc::has_certaingrade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DzenArticlesImportDoc::set_has_certaingrade() {
  _has_bits_[0] |= 0x00000100u;
}
void DzenArticlesImportDoc::clear_has_certaingrade() {
  _has_bits_[0] &= ~0x00000100u;
}
void DzenArticlesImportDoc::clear_certaingrade() {
  certaingrade_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_certaingrade();
}
const ::std::string& DzenArticlesImportDoc::certaingrade() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.certainGrade)
  return certaingrade_.GetNoArena();
}
void DzenArticlesImportDoc::set_certaingrade(const ::std::string& value) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.certainGrade)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_certaingrade(::std::string&& value) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.certainGrade)
}
#endif
void DzenArticlesImportDoc::set_certaingrade(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.certainGrade)
}
void DzenArticlesImportDoc::set_certaingrade(const char* value, size_t size) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.certainGrade)
}
::std::string* DzenArticlesImportDoc::mutable_certaingrade() {
  set_has_certaingrade();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.certainGrade)
  return certaingrade_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_certaingrade() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.certainGrade)
  clear_has_certaingrade();
  return certaingrade_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_certaingrade(::std::string* certaingrade) {
  if (certaingrade != NULL) {
    set_has_certaingrade();
  } else {
    clear_has_certaingrade();
  }
  certaingrade_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certaingrade);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.certainGrade)
}

// optional string itemType = 18;
bool DzenArticlesImportDoc::has_itemtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DzenArticlesImportDoc::set_has_itemtype() {
  _has_bits_[0] |= 0x00000200u;
}
void DzenArticlesImportDoc::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000200u;
}
void DzenArticlesImportDoc::clear_itemtype() {
  itemtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_itemtype();
}
const ::std::string& DzenArticlesImportDoc::itemtype() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.itemType)
  return itemtype_.GetNoArena();
}
void DzenArticlesImportDoc::set_itemtype(const ::std::string& value) {
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.itemType)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_itemtype(::std::string&& value) {
  set_has_itemtype();
  itemtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.itemType)
}
#endif
void DzenArticlesImportDoc::set_itemtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.itemType)
}
void DzenArticlesImportDoc::set_itemtype(const char* value, size_t size) {
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.itemType)
}
::std::string* DzenArticlesImportDoc::mutable_itemtype() {
  set_has_itemtype();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.itemType)
  return itemtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_itemtype() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.itemType)
  clear_has_itemtype();
  return itemtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_itemtype(::std::string* itemtype) {
  if (itemtype != NULL) {
    set_has_itemtype();
  } else {
    clear_has_itemtype();
  }
  itemtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemtype);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.itemType)
}

// optional bool existInRecoSnapshot = 19;
bool DzenArticlesImportDoc::has_existinrecosnapshot() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DzenArticlesImportDoc::set_has_existinrecosnapshot() {
  _has_bits_[0] |= 0x00080000u;
}
void DzenArticlesImportDoc::clear_has_existinrecosnapshot() {
  _has_bits_[0] &= ~0x00080000u;
}
void DzenArticlesImportDoc::clear_existinrecosnapshot() {
  existinrecosnapshot_ = false;
  clear_has_existinrecosnapshot();
}
bool DzenArticlesImportDoc::existinrecosnapshot() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.existInRecoSnapshot)
  return existinrecosnapshot_;
}
void DzenArticlesImportDoc::set_existinrecosnapshot(bool value) {
  set_has_existinrecosnapshot();
  existinrecosnapshot_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.existInRecoSnapshot)
}

// optional uint32 shares = 21;
bool DzenArticlesImportDoc::has_shares() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DzenArticlesImportDoc::set_has_shares() {
  _has_bits_[0] |= 0x00200000u;
}
void DzenArticlesImportDoc::clear_has_shares() {
  _has_bits_[0] &= ~0x00200000u;
}
void DzenArticlesImportDoc::clear_shares() {
  shares_ = 0u;
  clear_has_shares();
}
::google::protobuf::uint32 DzenArticlesImportDoc::shares() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.shares)
  return shares_;
}
void DzenArticlesImportDoc::set_shares(::google::protobuf::uint32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.shares)
}

// optional bool verified = 22;
bool DzenArticlesImportDoc::has_verified() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DzenArticlesImportDoc::set_has_verified() {
  _has_bits_[0] |= 0x00100000u;
}
void DzenArticlesImportDoc::clear_has_verified() {
  _has_bits_[0] &= ~0x00100000u;
}
void DzenArticlesImportDoc::clear_verified() {
  verified_ = false;
  clear_has_verified();
}
bool DzenArticlesImportDoc::verified() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.verified)
  return verified_;
}
void DzenArticlesImportDoc::set_verified(bool value) {
  set_has_verified();
  verified_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.verified)
}

// optional string fulldumpDate = 20;
bool DzenArticlesImportDoc::has_fulldumpdate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DzenArticlesImportDoc::set_has_fulldumpdate() {
  _has_bits_[0] |= 0x00000400u;
}
void DzenArticlesImportDoc::clear_has_fulldumpdate() {
  _has_bits_[0] &= ~0x00000400u;
}
void DzenArticlesImportDoc::clear_fulldumpdate() {
  fulldumpdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fulldumpdate();
}
const ::std::string& DzenArticlesImportDoc::fulldumpdate() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.fulldumpDate)
  return fulldumpdate_.GetNoArena();
}
void DzenArticlesImportDoc::set_fulldumpdate(const ::std::string& value) {
  set_has_fulldumpdate();
  fulldumpdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.fulldumpDate)
}
#if LANG_CXX11
void DzenArticlesImportDoc::set_fulldumpdate(::std::string&& value) {
  set_has_fulldumpdate();
  fulldumpdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.fulldumpDate)
}
#endif
void DzenArticlesImportDoc::set_fulldumpdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fulldumpdate();
  fulldumpdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.fulldumpDate)
}
void DzenArticlesImportDoc::set_fulldumpdate(const char* value, size_t size) {
  set_has_fulldumpdate();
  fulldumpdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.fulldumpDate)
}
::std::string* DzenArticlesImportDoc::mutable_fulldumpdate() {
  set_has_fulldumpdate();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.fulldumpDate)
  return fulldumpdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DzenArticlesImportDoc::release_fulldumpdate() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.fulldumpDate)
  clear_has_fulldumpdate();
  return fulldumpdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DzenArticlesImportDoc::set_allocated_fulldumpdate(::std::string* fulldumpdate) {
  if (fulldumpdate != NULL) {
    set_has_fulldumpdate();
  } else {
    clear_has_fulldumpdate();
  }
  fulldumpdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fulldumpdate);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.fulldumpDate)
}

// optional uint32 crClicks = 23;
bool DzenArticlesImportDoc::has_crclicks() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DzenArticlesImportDoc::set_has_crclicks() {
  _has_bits_[0] |= 0x00400000u;
}
void DzenArticlesImportDoc::clear_has_crclicks() {
  _has_bits_[0] &= ~0x00400000u;
}
void DzenArticlesImportDoc::clear_crclicks() {
  crclicks_ = 0u;
  clear_has_crclicks();
}
::google::protobuf::uint32 DzenArticlesImportDoc::crclicks() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.crClicks)
  return crclicks_;
}
void DzenArticlesImportDoc::set_crclicks(::google::protobuf::uint32 value) {
  set_has_crclicks();
  crclicks_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.crClicks)
}

// optional uint32 crImps = 24;
bool DzenArticlesImportDoc::has_crimps() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DzenArticlesImportDoc::set_has_crimps() {
  _has_bits_[0] |= 0x00800000u;
}
void DzenArticlesImportDoc::clear_has_crimps() {
  _has_bits_[0] &= ~0x00800000u;
}
void DzenArticlesImportDoc::clear_crimps() {
  crimps_ = 0u;
  clear_has_crimps();
}
::google::protobuf::uint32 DzenArticlesImportDoc::crimps() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.crImps)
  return crimps_;
}
void DzenArticlesImportDoc::set_crimps(::google::protobuf::uint32 value) {
  set_has_crimps();
  crimps_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.crImps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
