// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzen_articles.proto

#ifndef PROTOBUF_dzen_5farticles_2eproto__INCLUDED
#define PROTOBUF_dzen_5farticles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class DzenArticlesImportDoc;
class DzenArticlesImportDocDefaultTypeInternal;
extern DzenArticlesImportDocDefaultTypeInternal _DzenArticlesImportDoc_default_instance_;

namespace protobuf_dzen_5farticles_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dzen_5farticles_2eproto

// ===================================================================

class DzenArticlesImportDoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DzenArticlesImportDoc) */ {
 public:
  DzenArticlesImportDoc();
  virtual ~DzenArticlesImportDoc();

  DzenArticlesImportDoc(const DzenArticlesImportDoc& from);

  inline DzenArticlesImportDoc& operator=(const DzenArticlesImportDoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DzenArticlesImportDoc(DzenArticlesImportDoc&& from) noexcept
    : DzenArticlesImportDoc() {
    *this = ::std::move(from);
  }

  inline DzenArticlesImportDoc& operator=(DzenArticlesImportDoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DzenArticlesImportDoc& default_instance();

  static inline const DzenArticlesImportDoc* internal_default_instance() {
    return reinterpret_cast<const DzenArticlesImportDoc*>(
               &_DzenArticlesImportDoc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DzenArticlesImportDoc* other);
  friend void swap(DzenArticlesImportDoc& a, DzenArticlesImportDoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DzenArticlesImportDoc* New() const PROTOBUF_FINAL { return New(NULL); }

  DzenArticlesImportDoc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DzenArticlesImportDoc& from);
  void MergeFrom(const DzenArticlesImportDoc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DzenArticlesImportDoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mongoId = 2;
  bool has_mongoid() const;
  void clear_mongoid();
  static const int kMongoIdFieldNumber = 2;
  const ::std::string& mongoid() const;
  void set_mongoid(const ::std::string& value);
  #if LANG_CXX11
  void set_mongoid(::std::string&& value);
  #endif
  void set_mongoid(const char* value);
  void set_mongoid(const char* value, size_t size);
  ::std::string* mutable_mongoid();
  ::std::string* release_mongoid();
  void set_allocated_mongoid(::std::string* mongoid);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string longUrl = 4;
  bool has_longurl() const;
  void clear_longurl();
  static const int kLongUrlFieldNumber = 4;
  const ::std::string& longurl() const;
  void set_longurl(const ::std::string& value);
  #if LANG_CXX11
  void set_longurl(::std::string&& value);
  #endif
  void set_longurl(const char* value);
  void set_longurl(const char* value, size_t size);
  ::std::string* mutable_longurl();
  ::std::string* release_longurl();
  void set_allocated_longurl(::std::string* longurl);

  // optional string mainImageUrl = 5;
  bool has_mainimageurl() const;
  void clear_mainimageurl();
  static const int kMainImageUrlFieldNumber = 5;
  const ::std::string& mainimageurl() const;
  void set_mainimageurl(const ::std::string& value);
  #if LANG_CXX11
  void set_mainimageurl(::std::string&& value);
  #endif
  void set_mainimageurl(const char* value);
  void set_mainimageurl(const char* value, size_t size);
  ::std::string* mutable_mainimageurl();
  ::std::string* release_mainimageurl();
  void set_allocated_mainimageurl(::std::string* mainimageurl);

  // optional string title = 6;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 6;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string content = 7;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 7;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string publisherName = 9;
  bool has_publishername() const;
  void clear_publishername();
  static const int kPublisherNameFieldNumber = 9;
  const ::std::string& publishername() const;
  void set_publishername(const ::std::string& value);
  #if LANG_CXX11
  void set_publishername(::std::string&& value);
  #endif
  void set_publishername(const char* value);
  void set_publishername(const char* value, size_t size);
  ::std::string* mutable_publishername();
  ::std::string* release_publishername();
  void set_allocated_publishername(::std::string* publishername);

  // optional string publisherDesc = 10;
  bool has_publisherdesc() const;
  void clear_publisherdesc();
  static const int kPublisherDescFieldNumber = 10;
  const ::std::string& publisherdesc() const;
  void set_publisherdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_publisherdesc(::std::string&& value);
  #endif
  void set_publisherdesc(const char* value);
  void set_publisherdesc(const char* value, size_t size);
  ::std::string* mutable_publisherdesc();
  ::std::string* release_publisherdesc();
  void set_allocated_publisherdesc(::std::string* publisherdesc);

  // optional string certainGrade = 17;
  bool has_certaingrade() const;
  void clear_certaingrade();
  static const int kCertainGradeFieldNumber = 17;
  const ::std::string& certaingrade() const;
  void set_certaingrade(const ::std::string& value);
  #if LANG_CXX11
  void set_certaingrade(::std::string&& value);
  #endif
  void set_certaingrade(const char* value);
  void set_certaingrade(const char* value, size_t size);
  ::std::string* mutable_certaingrade();
  ::std::string* release_certaingrade();
  void set_allocated_certaingrade(::std::string* certaingrade);

  // optional string itemType = 18;
  bool has_itemtype() const;
  void clear_itemtype();
  static const int kItemTypeFieldNumber = 18;
  const ::std::string& itemtype() const;
  void set_itemtype(const ::std::string& value);
  #if LANG_CXX11
  void set_itemtype(::std::string&& value);
  #endif
  void set_itemtype(const char* value);
  void set_itemtype(const char* value, size_t size);
  ::std::string* mutable_itemtype();
  ::std::string* release_itemtype();
  void set_allocated_itemtype(::std::string* itemtype);

  // optional string fulldumpDate = 20;
  bool has_fulldumpdate() const;
  void clear_fulldumpdate();
  static const int kFulldumpDateFieldNumber = 20;
  const ::std::string& fulldumpdate() const;
  void set_fulldumpdate(const ::std::string& value);
  #if LANG_CXX11
  void set_fulldumpdate(::std::string&& value);
  #endif
  void set_fulldumpdate(const char* value);
  void set_fulldumpdate(const char* value, size_t size);
  ::std::string* mutable_fulldumpdate();
  ::std::string* release_fulldumpdate();
  void set_allocated_fulldumpdate(::std::string* fulldumpdate);

  // optional sint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional sint64 publisherId = 8;
  bool has_publisherid() const;
  void clear_publisherid();
  static const int kPublisherIdFieldNumber = 8;
  ::google::protobuf::int64 publisherid() const;
  void set_publisherid(::google::protobuf::int64 value);

  // optional uint32 publisherSubscribers = 11;
  bool has_publishersubscribers() const;
  void clear_publishersubscribers();
  static const int kPublisherSubscribersFieldNumber = 11;
  ::google::protobuf::uint32 publishersubscribers() const;
  void set_publishersubscribers(::google::protobuf::uint32 value);

  // optional uint32 publicationTime = 12;
  bool has_publicationtime() const;
  void clear_publicationtime();
  static const int kPublicationTimeFieldNumber = 12;
  ::google::protobuf::uint32 publicationtime() const;
  void set_publicationtime(::google::protobuf::uint32 value);

  // optional uint32 viewsCnt = 13;
  bool has_viewscnt() const;
  void clear_viewscnt();
  static const int kViewsCntFieldNumber = 13;
  ::google::protobuf::uint32 viewscnt() const;
  void set_viewscnt(::google::protobuf::uint32 value);

  // optional uint32 likesCnt = 14;
  bool has_likescnt() const;
  void clear_likescnt();
  static const int kLikesCntFieldNumber = 14;
  ::google::protobuf::uint32 likescnt() const;
  void set_likescnt(::google::protobuf::uint32 value);

  // optional uint32 dislikesCnt = 15;
  bool has_dislikescnt() const;
  void clear_dislikescnt();
  static const int kDislikesCntFieldNumber = 15;
  ::google::protobuf::uint32 dislikescnt() const;
  void set_dislikescnt(::google::protobuf::uint32 value);

  // optional uint32 commentsCnt = 16;
  bool has_commentscnt() const;
  void clear_commentscnt();
  static const int kCommentsCntFieldNumber = 16;
  ::google::protobuf::uint32 commentscnt() const;
  void set_commentscnt(::google::protobuf::uint32 value);

  // optional bool existInRecoSnapshot = 19;
  bool has_existinrecosnapshot() const;
  void clear_existinrecosnapshot();
  static const int kExistInRecoSnapshotFieldNumber = 19;
  bool existinrecosnapshot() const;
  void set_existinrecosnapshot(bool value);

  // optional bool verified = 22;
  bool has_verified() const;
  void clear_verified();
  static const int kVerifiedFieldNumber = 22;
  bool verified() const;
  void set_verified(bool value);

  // optional uint32 shares = 21;
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 21;
  ::google::protobuf::uint32 shares() const;
  void set_shares(::google::protobuf::uint32 value);

  // optional uint32 crClicks = 23;
  bool has_crclicks() const;
  void clear_crclicks();
  static const int kCrClicksFieldNumber = 23;
  ::google::protobuf::uint32 crclicks() const;
  void set_crclicks(::google::protobuf::uint32 value);

  // optional uint32 crImps = 24;
  bool has_crimps() const;
  void clear_crimps();
  static const int kCrImpsFieldNumber = 24;
  ::google::protobuf::uint32 crimps() const;
  void set_crimps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DzenArticlesImportDoc)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_mongoid();
  void clear_has_mongoid();
  void set_has_url();
  void clear_has_url();
  void set_has_longurl();
  void clear_has_longurl();
  void set_has_mainimageurl();
  void clear_has_mainimageurl();
  void set_has_title();
  void clear_has_title();
  void set_has_content();
  void clear_has_content();
  void set_has_publisherid();
  void clear_has_publisherid();
  void set_has_publishername();
  void clear_has_publishername();
  void set_has_publisherdesc();
  void clear_has_publisherdesc();
  void set_has_publishersubscribers();
  void clear_has_publishersubscribers();
  void set_has_publicationtime();
  void clear_has_publicationtime();
  void set_has_viewscnt();
  void clear_has_viewscnt();
  void set_has_likescnt();
  void clear_has_likescnt();
  void set_has_dislikescnt();
  void clear_has_dislikescnt();
  void set_has_commentscnt();
  void clear_has_commentscnt();
  void set_has_certaingrade();
  void clear_has_certaingrade();
  void set_has_itemtype();
  void clear_has_itemtype();
  void set_has_existinrecosnapshot();
  void clear_has_existinrecosnapshot();
  void set_has_shares();
  void clear_has_shares();
  void set_has_verified();
  void clear_has_verified();
  void set_has_fulldumpdate();
  void clear_has_fulldumpdate();
  void set_has_crclicks();
  void clear_has_crclicks();
  void set_has_crimps();
  void clear_has_crimps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mongoid_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr longurl_;
  ::google::protobuf::internal::ArenaStringPtr mainimageurl_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr publishername_;
  ::google::protobuf::internal::ArenaStringPtr publisherdesc_;
  ::google::protobuf::internal::ArenaStringPtr certaingrade_;
  ::google::protobuf::internal::ArenaStringPtr itemtype_;
  ::google::protobuf::internal::ArenaStringPtr fulldumpdate_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 publisherid_;
  ::google::protobuf::uint32 publishersubscribers_;
  ::google::protobuf::uint32 publicationtime_;
  ::google::protobuf::uint32 viewscnt_;
  ::google::protobuf::uint32 likescnt_;
  ::google::protobuf::uint32 dislikescnt_;
  ::google::protobuf::uint32 commentscnt_;
  bool existinrecosnapshot_;
  bool verified_;
  ::google::protobuf::uint32 shares_;
  ::google::protobuf::uint32 crclicks_;
  ::google::protobuf::uint32 crimps_;
  friend struct protobuf_dzen_5farticles_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DzenArticlesImportDoc

// optional sint64 id = 1;
inline bool DzenArticlesImportDoc::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DzenArticlesImportDoc::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DzenArticlesImportDoc::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DzenArticlesImportDoc::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 DzenArticlesImportDoc::id() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.id)
  return id_;
}
inline void DzenArticlesImportDoc::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.id)
}

// optional string mongoId = 2;
inline bool DzenArticlesImportDoc::has_mongoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DzenArticlesImportDoc::set_has_mongoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DzenArticlesImportDoc::clear_has_mongoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DzenArticlesImportDoc::clear_mongoid() {
  mongoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mongoid();
}
inline const ::std::string& DzenArticlesImportDoc::mongoid() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.mongoId)
  return mongoid_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_mongoid(const ::std::string& value) {
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.mongoId)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_mongoid(::std::string&& value) {
  set_has_mongoid();
  mongoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.mongoId)
}
#endif
inline void DzenArticlesImportDoc::set_mongoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.mongoId)
}
inline void DzenArticlesImportDoc::set_mongoid(const char* value, size_t size) {
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.mongoId)
}
inline ::std::string* DzenArticlesImportDoc::mutable_mongoid() {
  set_has_mongoid();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.mongoId)
  return mongoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_mongoid() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.mongoId)
  clear_has_mongoid();
  return mongoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_mongoid(::std::string* mongoid) {
  if (mongoid != NULL) {
    set_has_mongoid();
  } else {
    clear_has_mongoid();
  }
  mongoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongoid);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.mongoId)
}

// optional string url = 3;
inline bool DzenArticlesImportDoc::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DzenArticlesImportDoc::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DzenArticlesImportDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DzenArticlesImportDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& DzenArticlesImportDoc::url() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.url)
  return url_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.url)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.url)
}
#endif
inline void DzenArticlesImportDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.url)
}
inline void DzenArticlesImportDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.url)
}
inline ::std::string* DzenArticlesImportDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_url() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.url)
}

// optional string longUrl = 4;
inline bool DzenArticlesImportDoc::has_longurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DzenArticlesImportDoc::set_has_longurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DzenArticlesImportDoc::clear_has_longurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DzenArticlesImportDoc::clear_longurl() {
  longurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_longurl();
}
inline const ::std::string& DzenArticlesImportDoc::longurl() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.longUrl)
  return longurl_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_longurl(const ::std::string& value) {
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.longUrl)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_longurl(::std::string&& value) {
  set_has_longurl();
  longurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.longUrl)
}
#endif
inline void DzenArticlesImportDoc::set_longurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.longUrl)
}
inline void DzenArticlesImportDoc::set_longurl(const char* value, size_t size) {
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.longUrl)
}
inline ::std::string* DzenArticlesImportDoc::mutable_longurl() {
  set_has_longurl();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.longUrl)
  return longurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_longurl() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.longUrl)
  clear_has_longurl();
  return longurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_longurl(::std::string* longurl) {
  if (longurl != NULL) {
    set_has_longurl();
  } else {
    clear_has_longurl();
  }
  longurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), longurl);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.longUrl)
}

// optional string mainImageUrl = 5;
inline bool DzenArticlesImportDoc::has_mainimageurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DzenArticlesImportDoc::set_has_mainimageurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DzenArticlesImportDoc::clear_has_mainimageurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DzenArticlesImportDoc::clear_mainimageurl() {
  mainimageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mainimageurl();
}
inline const ::std::string& DzenArticlesImportDoc::mainimageurl() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.mainImageUrl)
  return mainimageurl_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_mainimageurl(const ::std::string& value) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.mainImageUrl)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_mainimageurl(::std::string&& value) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.mainImageUrl)
}
#endif
inline void DzenArticlesImportDoc::set_mainimageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.mainImageUrl)
}
inline void DzenArticlesImportDoc::set_mainimageurl(const char* value, size_t size) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.mainImageUrl)
}
inline ::std::string* DzenArticlesImportDoc::mutable_mainimageurl() {
  set_has_mainimageurl();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.mainImageUrl)
  return mainimageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_mainimageurl() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.mainImageUrl)
  clear_has_mainimageurl();
  return mainimageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_mainimageurl(::std::string* mainimageurl) {
  if (mainimageurl != NULL) {
    set_has_mainimageurl();
  } else {
    clear_has_mainimageurl();
  }
  mainimageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainimageurl);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.mainImageUrl)
}

// optional string title = 6;
inline bool DzenArticlesImportDoc::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DzenArticlesImportDoc::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DzenArticlesImportDoc::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DzenArticlesImportDoc::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& DzenArticlesImportDoc::title() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.title)
  return title_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.title)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.title)
}
#endif
inline void DzenArticlesImportDoc::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.title)
}
inline void DzenArticlesImportDoc::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.title)
}
inline ::std::string* DzenArticlesImportDoc::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_title() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.title)
}

// optional string content = 7;
inline bool DzenArticlesImportDoc::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DzenArticlesImportDoc::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DzenArticlesImportDoc::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DzenArticlesImportDoc::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& DzenArticlesImportDoc::content() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.content)
  return content_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.content)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.content)
}
#endif
inline void DzenArticlesImportDoc::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.content)
}
inline void DzenArticlesImportDoc::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.content)
}
inline ::std::string* DzenArticlesImportDoc::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_content() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.content)
}

// optional sint64 publisherId = 8;
inline bool DzenArticlesImportDoc::has_publisherid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_publisherid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DzenArticlesImportDoc::clear_has_publisherid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DzenArticlesImportDoc::clear_publisherid() {
  publisherid_ = GOOGLE_LONGLONG(0);
  clear_has_publisherid();
}
inline ::google::protobuf::int64 DzenArticlesImportDoc::publisherid() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publisherId)
  return publisherid_;
}
inline void DzenArticlesImportDoc::set_publisherid(::google::protobuf::int64 value) {
  set_has_publisherid();
  publisherid_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publisherId)
}

// optional string publisherName = 9;
inline bool DzenArticlesImportDoc::has_publishername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DzenArticlesImportDoc::set_has_publishername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DzenArticlesImportDoc::clear_has_publishername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DzenArticlesImportDoc::clear_publishername() {
  publishername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publishername();
}
inline const ::std::string& DzenArticlesImportDoc::publishername() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publisherName)
  return publishername_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_publishername(const ::std::string& value) {
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publisherName)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_publishername(::std::string&& value) {
  set_has_publishername();
  publishername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.publisherName)
}
#endif
inline void DzenArticlesImportDoc::set_publishername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.publisherName)
}
inline void DzenArticlesImportDoc::set_publishername(const char* value, size_t size) {
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.publisherName)
}
inline ::std::string* DzenArticlesImportDoc::mutable_publishername() {
  set_has_publishername();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.publisherName)
  return publishername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_publishername() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.publisherName)
  clear_has_publishername();
  return publishername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_publishername(::std::string* publishername) {
  if (publishername != NULL) {
    set_has_publishername();
  } else {
    clear_has_publishername();
  }
  publishername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publishername);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.publisherName)
}

// optional string publisherDesc = 10;
inline bool DzenArticlesImportDoc::has_publisherdesc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DzenArticlesImportDoc::set_has_publisherdesc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DzenArticlesImportDoc::clear_has_publisherdesc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DzenArticlesImportDoc::clear_publisherdesc() {
  publisherdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisherdesc();
}
inline const ::std::string& DzenArticlesImportDoc::publisherdesc() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publisherDesc)
  return publisherdesc_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_publisherdesc(const ::std::string& value) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publisherDesc)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_publisherdesc(::std::string&& value) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.publisherDesc)
}
#endif
inline void DzenArticlesImportDoc::set_publisherdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.publisherDesc)
}
inline void DzenArticlesImportDoc::set_publisherdesc(const char* value, size_t size) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.publisherDesc)
}
inline ::std::string* DzenArticlesImportDoc::mutable_publisherdesc() {
  set_has_publisherdesc();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.publisherDesc)
  return publisherdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_publisherdesc() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.publisherDesc)
  clear_has_publisherdesc();
  return publisherdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_publisherdesc(::std::string* publisherdesc) {
  if (publisherdesc != NULL) {
    set_has_publisherdesc();
  } else {
    clear_has_publisherdesc();
  }
  publisherdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisherdesc);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.publisherDesc)
}

// optional uint32 publisherSubscribers = 11;
inline bool DzenArticlesImportDoc::has_publishersubscribers() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_publishersubscribers() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DzenArticlesImportDoc::clear_has_publishersubscribers() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DzenArticlesImportDoc::clear_publishersubscribers() {
  publishersubscribers_ = 0u;
  clear_has_publishersubscribers();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::publishersubscribers() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publisherSubscribers)
  return publishersubscribers_;
}
inline void DzenArticlesImportDoc::set_publishersubscribers(::google::protobuf::uint32 value) {
  set_has_publishersubscribers();
  publishersubscribers_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publisherSubscribers)
}

// optional uint32 publicationTime = 12;
inline bool DzenArticlesImportDoc::has_publicationtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_publicationtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DzenArticlesImportDoc::clear_has_publicationtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DzenArticlesImportDoc::clear_publicationtime() {
  publicationtime_ = 0u;
  clear_has_publicationtime();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::publicationtime() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.publicationTime)
  return publicationtime_;
}
inline void DzenArticlesImportDoc::set_publicationtime(::google::protobuf::uint32 value) {
  set_has_publicationtime();
  publicationtime_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.publicationTime)
}

// optional uint32 viewsCnt = 13;
inline bool DzenArticlesImportDoc::has_viewscnt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_viewscnt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DzenArticlesImportDoc::clear_has_viewscnt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DzenArticlesImportDoc::clear_viewscnt() {
  viewscnt_ = 0u;
  clear_has_viewscnt();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::viewscnt() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.viewsCnt)
  return viewscnt_;
}
inline void DzenArticlesImportDoc::set_viewscnt(::google::protobuf::uint32 value) {
  set_has_viewscnt();
  viewscnt_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.viewsCnt)
}

// optional uint32 likesCnt = 14;
inline bool DzenArticlesImportDoc::has_likescnt() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_likescnt() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DzenArticlesImportDoc::clear_has_likescnt() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DzenArticlesImportDoc::clear_likescnt() {
  likescnt_ = 0u;
  clear_has_likescnt();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::likescnt() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.likesCnt)
  return likescnt_;
}
inline void DzenArticlesImportDoc::set_likescnt(::google::protobuf::uint32 value) {
  set_has_likescnt();
  likescnt_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.likesCnt)
}

// optional uint32 dislikesCnt = 15;
inline bool DzenArticlesImportDoc::has_dislikescnt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_dislikescnt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DzenArticlesImportDoc::clear_has_dislikescnt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DzenArticlesImportDoc::clear_dislikescnt() {
  dislikescnt_ = 0u;
  clear_has_dislikescnt();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::dislikescnt() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.dislikesCnt)
  return dislikescnt_;
}
inline void DzenArticlesImportDoc::set_dislikescnt(::google::protobuf::uint32 value) {
  set_has_dislikescnt();
  dislikescnt_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.dislikesCnt)
}

// optional uint32 commentsCnt = 16;
inline bool DzenArticlesImportDoc::has_commentscnt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_commentscnt() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DzenArticlesImportDoc::clear_has_commentscnt() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DzenArticlesImportDoc::clear_commentscnt() {
  commentscnt_ = 0u;
  clear_has_commentscnt();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::commentscnt() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.commentsCnt)
  return commentscnt_;
}
inline void DzenArticlesImportDoc::set_commentscnt(::google::protobuf::uint32 value) {
  set_has_commentscnt();
  commentscnt_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.commentsCnt)
}

// optional string certainGrade = 17;
inline bool DzenArticlesImportDoc::has_certaingrade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DzenArticlesImportDoc::set_has_certaingrade() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DzenArticlesImportDoc::clear_has_certaingrade() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DzenArticlesImportDoc::clear_certaingrade() {
  certaingrade_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_certaingrade();
}
inline const ::std::string& DzenArticlesImportDoc::certaingrade() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.certainGrade)
  return certaingrade_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_certaingrade(const ::std::string& value) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.certainGrade)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_certaingrade(::std::string&& value) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.certainGrade)
}
#endif
inline void DzenArticlesImportDoc::set_certaingrade(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.certainGrade)
}
inline void DzenArticlesImportDoc::set_certaingrade(const char* value, size_t size) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.certainGrade)
}
inline ::std::string* DzenArticlesImportDoc::mutable_certaingrade() {
  set_has_certaingrade();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.certainGrade)
  return certaingrade_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_certaingrade() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.certainGrade)
  clear_has_certaingrade();
  return certaingrade_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_certaingrade(::std::string* certaingrade) {
  if (certaingrade != NULL) {
    set_has_certaingrade();
  } else {
    clear_has_certaingrade();
  }
  certaingrade_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certaingrade);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.certainGrade)
}

// optional string itemType = 18;
inline bool DzenArticlesImportDoc::has_itemtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DzenArticlesImportDoc::set_has_itemtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DzenArticlesImportDoc::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DzenArticlesImportDoc::clear_itemtype() {
  itemtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_itemtype();
}
inline const ::std::string& DzenArticlesImportDoc::itemtype() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.itemType)
  return itemtype_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_itemtype(const ::std::string& value) {
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.itemType)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_itemtype(::std::string&& value) {
  set_has_itemtype();
  itemtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.itemType)
}
#endif
inline void DzenArticlesImportDoc::set_itemtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.itemType)
}
inline void DzenArticlesImportDoc::set_itemtype(const char* value, size_t size) {
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.itemType)
}
inline ::std::string* DzenArticlesImportDoc::mutable_itemtype() {
  set_has_itemtype();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.itemType)
  return itemtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_itemtype() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.itemType)
  clear_has_itemtype();
  return itemtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_itemtype(::std::string* itemtype) {
  if (itemtype != NULL) {
    set_has_itemtype();
  } else {
    clear_has_itemtype();
  }
  itemtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemtype);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.itemType)
}

// optional bool existInRecoSnapshot = 19;
inline bool DzenArticlesImportDoc::has_existinrecosnapshot() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_existinrecosnapshot() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DzenArticlesImportDoc::clear_has_existinrecosnapshot() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DzenArticlesImportDoc::clear_existinrecosnapshot() {
  existinrecosnapshot_ = false;
  clear_has_existinrecosnapshot();
}
inline bool DzenArticlesImportDoc::existinrecosnapshot() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.existInRecoSnapshot)
  return existinrecosnapshot_;
}
inline void DzenArticlesImportDoc::set_existinrecosnapshot(bool value) {
  set_has_existinrecosnapshot();
  existinrecosnapshot_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.existInRecoSnapshot)
}

// optional uint32 shares = 21;
inline bool DzenArticlesImportDoc::has_shares() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_shares() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DzenArticlesImportDoc::clear_has_shares() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DzenArticlesImportDoc::clear_shares() {
  shares_ = 0u;
  clear_has_shares();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::shares() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.shares)
  return shares_;
}
inline void DzenArticlesImportDoc::set_shares(::google::protobuf::uint32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.shares)
}

// optional bool verified = 22;
inline bool DzenArticlesImportDoc::has_verified() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_verified() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DzenArticlesImportDoc::clear_has_verified() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DzenArticlesImportDoc::clear_verified() {
  verified_ = false;
  clear_has_verified();
}
inline bool DzenArticlesImportDoc::verified() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.verified)
  return verified_;
}
inline void DzenArticlesImportDoc::set_verified(bool value) {
  set_has_verified();
  verified_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.verified)
}

// optional string fulldumpDate = 20;
inline bool DzenArticlesImportDoc::has_fulldumpdate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DzenArticlesImportDoc::set_has_fulldumpdate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DzenArticlesImportDoc::clear_has_fulldumpdate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DzenArticlesImportDoc::clear_fulldumpdate() {
  fulldumpdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fulldumpdate();
}
inline const ::std::string& DzenArticlesImportDoc::fulldumpdate() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.fulldumpDate)
  return fulldumpdate_.GetNoArena();
}
inline void DzenArticlesImportDoc::set_fulldumpdate(const ::std::string& value) {
  set_has_fulldumpdate();
  fulldumpdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.fulldumpDate)
}
#if LANG_CXX11
inline void DzenArticlesImportDoc::set_fulldumpdate(::std::string&& value) {
  set_has_fulldumpdate();
  fulldumpdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DzenArticlesImportDoc.fulldumpDate)
}
#endif
inline void DzenArticlesImportDoc::set_fulldumpdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fulldumpdate();
  fulldumpdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DzenArticlesImportDoc.fulldumpDate)
}
inline void DzenArticlesImportDoc::set_fulldumpdate(const char* value, size_t size) {
  set_has_fulldumpdate();
  fulldumpdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DzenArticlesImportDoc.fulldumpDate)
}
inline ::std::string* DzenArticlesImportDoc::mutable_fulldumpdate() {
  set_has_fulldumpdate();
  // @@protoc_insertion_point(field_mutable:DzenArticlesImportDoc.fulldumpDate)
  return fulldumpdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DzenArticlesImportDoc::release_fulldumpdate() {
  // @@protoc_insertion_point(field_release:DzenArticlesImportDoc.fulldumpDate)
  clear_has_fulldumpdate();
  return fulldumpdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DzenArticlesImportDoc::set_allocated_fulldumpdate(::std::string* fulldumpdate) {
  if (fulldumpdate != NULL) {
    set_has_fulldumpdate();
  } else {
    clear_has_fulldumpdate();
  }
  fulldumpdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fulldumpdate);
  // @@protoc_insertion_point(field_set_allocated:DzenArticlesImportDoc.fulldumpDate)
}

// optional uint32 crClicks = 23;
inline bool DzenArticlesImportDoc::has_crclicks() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_crclicks() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DzenArticlesImportDoc::clear_has_crclicks() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DzenArticlesImportDoc::clear_crclicks() {
  crclicks_ = 0u;
  clear_has_crclicks();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::crclicks() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.crClicks)
  return crclicks_;
}
inline void DzenArticlesImportDoc::set_crclicks(::google::protobuf::uint32 value) {
  set_has_crclicks();
  crclicks_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.crClicks)
}

// optional uint32 crImps = 24;
inline bool DzenArticlesImportDoc::has_crimps() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DzenArticlesImportDoc::set_has_crimps() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DzenArticlesImportDoc::clear_has_crimps() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DzenArticlesImportDoc::clear_crimps() {
  crimps_ = 0u;
  clear_has_crimps();
}
inline ::google::protobuf::uint32 DzenArticlesImportDoc::crimps() const {
  // @@protoc_insertion_point(field_get:DzenArticlesImportDoc.crImps)
  return crimps_;
}
inline void DzenArticlesImportDoc::set_crimps(::google::protobuf::uint32 value) {
  set_has_crimps();
  crimps_ = value;
  // @@protoc_insertion_point(field_set:DzenArticlesImportDoc.crImps)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dzen_5farticles_2eproto__INCLUDED
